{"func": "package googlejam1.p393;\nimport java.io.*;\nimport java.util.*;\n\nclass mush{\n\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint numcase = sc.nextInt();\n\t\tfor(int i =0;i<numcase;i++){\n\t\t\tint numti = sc.nextInt();\n\t\t\tQueue<Integer> mushin1 = new LinkedList<Integer>();\n\t\t\tQueue<Integer> mushin2 = new LinkedList<Integer>();\n\t\t\tfor(int j=0;j<numti;j++){\n\t\t\t\tint mushtime = sc.nextInt();\n\t\t\t\tmushin1.offer(mushtime);\n\t\t\t\tmushin2.offer(mushtime);\n\t\t\t}\n\t\t\tint t1 = 0;\n\t\t\tint t2 = 0;\n\t\t\tint musha = mushin1.poll();\n\t\t\tArrayList<Integer> timediff = new ArrayList<Integer>();\n\t\t\t//timediff.add(musha);\n\t\t\twhile(mushin1.peek()!=null){\n\t\t\t\tint mushb = mushin1.poll();\n\t\t\t\tif(musha - mushb>=0){\n\t\t\t\t\tt1 = t1 + musha - mushb;\n\t\t\t\t}\n\t\t\t\ttimediff.add(musha - mushb);\n\t\t\t\tmusha = mushb;\n\t\t\t}\n\t\t\t\n\t\t\t//Collections.sort(timediff);\n\t\t\t//int maxtd = timediff.get(0);\n\t\t\tboolean lastflag;\n\t\t\tint maxtd = Collections.max(timediff);\n\t\t\tlastflag = maxtd==timediff.get(timediff.size()-1);\n\t\t\t//System.out.println(\"maxtd: \" +maxtd);\n\t\t\twhile(mushin2.peek()!=null){\n\t\t\t\tint mushc = mushin2.poll();\n\t\t\t\tif(mushin2.peek()==null){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(mushc<=maxtd){\n\t\t\t\t\tt2 = t2 + mushc;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tt2 = t2 + maxtd;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n\t\t\tint shylvl = sc.nextInt();\n\t\t\tString ppl = sc.next();\n\t\t\tint inv = 0;\n\t\t\tint standing = Integer.parseInt(ppl.substring(0,1));\n\t\t\tfor(int j=1;j<shylvl;j++){\n\t\t\t\tint shyppl = Integer.parseInt(ppl.substring(j,j+1));\n\t\t\t\tif(standing<j){\n\t\t\t\t\tinv = inv + j-standing;\n\t\t\t\t\tstanding = j + shyppl;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tstanding = standing + shyppl;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint last = Integer.parseInt(ppl.substring(shylvl));\n\t\t\tif(standing<shylvl){\n\t\t\t\tinv = inv + shylvl-standing;\n\t\t\t\tstanding = shylvl + last;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstanding = standing + last;\n\t\t\t}\n\t\t\t*/\n\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+t1 + \" \" + t2);\n\t\t}\n\t}\n\t\n}", "idx": "1393"}
{"func": "package googlejam1.p003;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\npublic class Mushroom {\r\n    final static String PROBLEM_NAME = \"mushroom\";\r\n    final static String WORK_DIR = \"D:\\\\GCJ\\\\\" + PROBLEM_NAME + \"\\\\\";\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + \"input.txt\"));\r\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\r\n        int caseCnt = sc.nextInt();\r\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\r\n            System.out.println(\"Processing test case \" + (caseNum + 1));\r\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n\t\t\tMushroom r = new Mushroom();\r\n            int N = sc.nextInt();\n\t\t\tint[] A = new int[N];\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t    A[i] = sc.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tint ans1 = 0;\n\t\t\tint speed = 0;\n\t\t\tfor (int i = 0; i + 1 < N; i++) {\n\t\t\t    if (A[i + 1] < A[i]) {\n\t\t\t        ans1 += A[i] - A[i + 1];\n\t\t\t        speed = Math.max(speed, A[i] - A[i + 1]);\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tint ans2 = 0;\n\t\t\tfor (int i = 0; i + 1 < N; i++) {\n\t\t\t    ans2 += Math.min(A[i], speed);\n\t\t\t}\n\t\t\t\n\t\t\tpw.println(ans1 + \" \" + ans2);\r\n        }\r\n        pw.flush();\r\n        pw.close();\r\n        sc.close();\r\n    }\r\n}\r\n", "idx": "1003"}
{"func": "package googlejam1.p006;\nimport java.util.*;\nimport static java.lang.Math.*;\n\npublic class A {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int zz = 1; zz <= T; zz++) {\n            int N = in.nextInt();\n            long[] M = new long[N];\n            for (int i = 0; i < N; i++)\n                M[i] = in.nextInt();\n            long ans1 = 0;\n            for (int i = 0; i < N - 1; i++) {\n                ans1 += max(0, M[i] - M[i+1]);\n            }\n            long max = 0;\n            for (int i = 0; i < N - 1; i++) {\n                max = max(max, M[i] - M[i+1]);\n            }\n            long ans2 = 0;\n            for (int i = 0; i < N - 1; i++)\n                ans2 += min(max, M[i]);\n\n            System.out.format(\"Case #%d: %d %d\\n\", zz, ans1, ans2);\n        }\n    }\n}\n", "idx": "1006"}
{"func": "package googlejam1.p011;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class taskA {\r\n\r\n\tPrintWriter out;\r\n\tBufferedReader br;\r\n\tStringTokenizer st;\r\n\r\n\tString nextToken() throws IOException {\r\n\t\twhile ((st == null) || (!st.hasMoreTokens()))\r\n\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\treturn st.nextToken();\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttaskA r = new taskA();\n\t\ttry {\n\t\t\tr.br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tr.out = new PrintWriter(System.out);\n\t\t\n\t\t\tr.br = new BufferedReader(new FileReader(\"taskA.in\"));\n\t\t\tr.out = new PrintWriter(\"taskA.out\");\n\t\t\tint n = Integer.parseInt(r.nextToken());\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\n\t\t\t\tr.out.print(\"Case #\" + (i + 1) + \": \");\n\t\t\t\tint n1 = Integer.parseInt(r.nextToken());\n\t\t\t\t\t\tint[] a = new int[n1];\n\t\t\t\t\t\tfor (int i2 = 0; i2 < n1; i2++) {\n\t\t\t\t\t\t\ta[i2] = Integer.parseInt(r.nextToken());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint y = 0;\n\t\t\t\t\t\tint z = 0;\n\t\t\t\t\t\tint minS = 0;\n\t\t\t\t\t\tfor (int i3 = 1; i3 < n1; i3++) {\n\t\t\t\t\t\t\tif (a[i3] < a[i3 - 1]) {\n\t\t\t\t\t\t\t\ty += a[i3 - 1] - a[i3];\n\t\t\t\t\t\t\t\tminS = Math.max(minS, a[i3 - 1] - a[i3]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t//\t\tSystem.err.println(\"==\");\n\t\t\t\t\t\tfor (int i1 = 0; i1 < n1 - 1; i1++) {\n\t\t\t\t//\t\t\tSystem.err.println(a[i] + \" \" + minS);\n\t\t\t\t\t\t\tz += Math.min(a[i1], minS);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr.out.println(y + \" \" + z);\n\t\t\t}\n\t\t\tr.out.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1011"}
{"func": "package googlejam1.p012;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.StringTokenizer;\n\npublic class A {\n\n\tpublic static void main(String... args) throws Exception {\n\t\tFile file = new File(loc);\n\t\tFile[] paths = file.listFiles();\n\t\tList<File> input = new ArrayList<File>();\n\t\tfor (File f : paths) {\n\t\t\tString s = f.getName();\n\t\t\tif (s.startsWith(name_class) && s.endsWith(\".in\"))\n\t\t\t\tinput.add(f);\n\t\t}\n\t\t\n\t\tif (input.isEmpty()) {\n\t\t\tSystem.err.println(\"LEYENDO DE CONSOLA\");\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t} else {\n\t\t\tFile last_file = input.get(0);\n\t\t\tfor (File f : input) {\n\t\t\t\tif (f.lastModified() > last_file.lastModified())\n\t\t\t\t\tlast_file = f;\n\t\t\t}\n\t\t\n\t\t\tin = new BufferedReader(new FileReader(last_file.toString()));\n\t\t\tSystem.err.println(\"LEYENDO DE ARCHIVO\");\n\t\t\n\t\t}\n\t\tFileWriter fw = new FileWriter(loc + \"/output.txt\");\n\t\tout = new PrintWriter(fw);\n\n\t\tint casos = Integer.parseInt(in.readLine());\n\t\tfor (int casito = 1; casito <= casos; casito++) {\n\t\t\tA r = new A();\n\t\t\tint n = Integer.parseInt(A.nextToken());\n\t\t\tint[] ret = new int[n];\n\t\t\tfor (int i1 = 0; i1 < n; i1++)\n\t\t\t\tret[i1] = Integer.parseInt(A.nextToken());\n\t\t\tint[] arr = ret;\n\t\t\tint ret1 = 0;\n\t\t\t\n\t\t\tint abs =0;\n\t\t\tfor(int i =0;i<n-1;i++){\n\t\t\t\tret1+= Math.max(0, arr[i]-arr[i+1]);\n\t\t\t\tabs = Math.max(abs, arr[i]-arr[i+1]);\n\t\t\t}\n\t\t\tint ret2=0;\n\t\t\tfor(int i =0;i<n -1;i++)\n\t\t\t\tret2+=Math.min(arr[i], abs);\n\t\t\tObject o = ret1+\" \"+ret2;\n\n\t\t\tout.println(\"Case #\" + casito + \": \" + o);\n\t\t\tSystem.out.println(\"Case #\" + casito + \": \" + o);\n\t\t}\n\t\tout.close();\n\t}\n\n\t\n\n\t// /////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\tpublic static BufferedReader in;\n\tpublic static PrintWriter out;\n\tstatic String name_class = \"A\"; //\n\tstatic String loc = \"/home/miguel/workspace/CodeJam/round_1A/src\"; //\n\n\tstatic StringTokenizer strTok = new StringTokenizer(\"\");\n\n\tstatic String nextToken() throws IOException {\n\t\twhile (!strTok.hasMoreTokens())\n\t\t\tstrTok = new StringTokenizer(in.readLine());\n\t\treturn strTok.nextToken();\n\t}\n\n}", "idx": "1012"}
{"func": "package googlejam1.p013;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class A\r\n{\r\n\tpublic static void main(String[] args) throws Exception\r\n\t{\r\n//\t\tScanner in = new Scanner(System.in);\r\n//\t\tPrintWriter out = new PrintWriter(System.out);\r\n\t\t\r\n\t\tScanner in = new Scanner(new File(\"A-large.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new FileWriter(new File(\"A-large.out\")));\r\n\t\t\r\n\t\tint t = in.nextInt();\r\n\t\tfor(int x = 0; x < t; x++)\r\n\t\t{\r\n\t\t\tint n = in.nextInt();\r\n\t\t\t\r\n\t\t\tlong[] array = new long[n];\r\n\t\t\tlong rate = 0;\r\n\t\t\tfor(int y = 0; y < n; y++)\r\n\t\t\t{\r\n\t\t\t\tarray[y] = in.nextInt();\r\n\t\t\t\t\r\n\t\t\t\tif(y > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\trate = Math.max(rate, array[y - 1] - array[y]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong result1 = 0;\r\n\t\t\tlong result2 = 0;\r\n\t\t\tfor(int z = 0; z < array.length - 1; z++)\r\n\t\t\t{\r\n\t\t\t\tresult1 += Math.max(0, array[z] - array[z + 1]);\r\n\t\t\t\tresult2 += Math.min(rate, array[z]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tout.println(\"Case #\" + (x + 1) + \": \" + result1 + \" \" + result2);\r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "1013"}
{"func": "package googlejam1.p015;\nimport java.util.Scanner;\n\npublic class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int numCases = sc.nextInt();\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n            int N = sc.nextInt();\n            int[] m = new int[N];\n            for (int i = 0; i < N; i++) {\n                m[i] = sc.nextInt();\n            }\n            int totalDecrease = 0;\n            int maxDecrease = 0;\n            for (int i = 1; i < N; i++) {\n                if (m[i] < m[i - 1]) {\n                    int difference = m[i - 1] - m[i];\n                    totalDecrease += difference;\n                    maxDecrease = Math.max(maxDecrease, difference);\n                }\n            }\n\n            int mushrooms = 0;\n            for (int i = 0; i < N - 1; i++) {\n                mushrooms += Math.min(maxDecrease, m[i]);\n            }\n\n            System.out.println(\"Case #\" + caseNum + \": \" + totalDecrease + \" \" + mushrooms);\n        }\n    }\n}\n", "idx": "1015"}
{"func": "package googlejam1.p019;\n\n\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class Mushroom {\n\n    static PrintWriter out;\n\n    public static void main(String[] args) throws IOException {\n        String name = \"gcj2015/r1/A-large\";\n        Scanner s = new Scanner(new File(name + \".in\"));\n        int count = s.nextInt();\n        out = new PrintWriter(new BufferedWriter(new FileWriter(name + \".out\")));\n        //out = new PrintWriter(System.out);\n        for (int cc = 1; cc <= count; cc++) {\n            out.print(\"Case #\" + cc + \": \");\n            int n = s.nextInt();\n            int[] a = new int[n];\n            for(int i=0; i<n; i++) {\n                a[i] = s.nextInt();\n            }\n\t\t\tint res = 0;\n\t\t\tfor(int i=0; i<n-1; i++) {\n\t\t\t    res += Math.max(a[i]-a[i+1], 0);\n\t\t\t}\n            int res1 = res;\n\t\t\tint res3 = 0;\n\t\t\tint max = 0;\n\t\t\tfor(int i=0; i<n-1; i++) {\n\t\t\t    max = Math.max(a[i]-a[i+1], max);\n\t\t\t}\n\t\t\tfor(int i=0; i<n-1; i++) {\n\t\t\t    res3 += Math.min(a[i], max);\n\t\t\t}\n            int res2 = res3;\n            out.print(res1);\n            out.print(' ');\n            out.print(res2);\n            out.println();\n        }\n        out.close();\n    }\n\n}\n", "idx": "1019"}
{"func": "package googlejam1.p021;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class mushroom {\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tBufferedReader buf = new BufferedReader(new FileReader(\"mushroom.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"mushroom.out\")));\r\n\t\tLong n = Long.parseLong(buf.readLine());\r\n\t\tfor(int i = 1; i <= n; i++){\r\n\t\t\tLong m = Long.parseLong(buf.readLine());\r\n\t\t\tString[] s = buf.readLine().split(\" \");\r\n\t\t\tlong fsum = 0;\r\n\t\t\tlong largest = 0;\r\n\t\t\tfor(int j = 1; j < m; j++){\r\n\t\t\t\tif(Long.parseLong(s[j]) - Long.parseLong(s[j-1]) < 0){\r\n\t\t\t\t\tfsum = fsum + Long.parseLong(s[j-1]) - Long.parseLong(s[j]);\r\n\t\t\t\t\tif(Long.parseLong(s[j-1]) - Long.parseLong(s[j]) > largest) largest = Long.parseLong(s[j-1]) - Long.parseLong(s[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlong nsum = 0;\r\n\t\t\tfor(int j = 0; j < m-1; j++){\r\n\t\t\t\tnsum = nsum + Math.min(Long.parseLong(s[j]), largest);\r\n\t\t\t}\r\n\t\t\tout.println(\"Case #\" + i + \": \" + fsum + \" \" + nsum); \r\n\t\t}\r\n\t\tbuf.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "1021"}
{"func": "package googlejam1.p022;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\npublic class A {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tint ntests = Integer.parseInt(bf.readLine());\n\t\tfor (int tc = 1; tc <= ntests; tc++) {\n\t\t\tint n = Integer.parseInt(bf.readLine());\n\t\t\tint[] arr = new int[n];\n\t\t\tStringTokenizer st = new StringTokenizer(bf.readLine());\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = Integer.parseInt(st.nextToken());\n\t\t\t}\n\n\t\t\tint firstMin = 0;\n\t\t\tint maxDiff = 0;\n\t\t\tfor (int i = 1; i < n; i++) {\n\t\t\t\tint diff = -arr[i] + arr[i - 1];\n\t\t\t\tif (diff > 0) {\n\t\t\t\t\tfirstMin += diff;\n\t\t\t\t}\n\n\t\t\t\tmaxDiff = Math.max(maxDiff, diff);\n\t\t\t}\n\n\t\t\tint secondMin = 0;\n\t\t\tfor (int i = 1; i < n; i++) {\n\t\t\t\tsecondMin += Math.min(maxDiff, arr[i - 1]);\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Case #\" + tc + \": \" + firstMin + \" \" + secondMin);\n\t\t}\n\t}\n}\n", "idx": "1022"}
{"func": "package googlejam1.p024;\n\n\nimport com.google.common.collect.ImmutableList;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class A {\n    private static final String PROBLEM = \"round1a/A-large\";\n    private final Scanner in;\n    public A(Scanner in) {\n        this.in = in;\n    }\n\n    private List<Integer> nextIntList(int n) {\n        ImmutableList.Builder<Integer> builder = ImmutableList.builder();\n        for (int i = 0; i < n; i++) {\n            builder.add(in.nextInt());\n        }\n        return builder.build();\n    }\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(PROBLEM + \".in\"));\n\t\tA r = new A(in);\n        int numCases = r.in.nextInt();\n\t\tPrintWriter writer = new PrintWriter(A.PROBLEM + \".out\");\n\t\tfor (int casenum = 1; casenum <= numCases; casenum++) {\n\t\t    int n = r.in.nextInt();\n\t\t\tList<Integer> vals = r.nextIntList(n);\n\t\t\t\n\t\t\tint maxDiff = 0;\n\t\t\tlong result1 = 0;\n\t\t\tfor (int i = 1; i < vals.size(); i++) {\n\t\t\t    int diff = vals.get(i - 1) - vals.get(i);\n\t\t\t    maxDiff = Math.max(maxDiff, diff);\n\t\t\t    if (diff > 0) {\n\t\t\t        result1 += diff;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tlong result2 = 0;\n\t\t\tfor (int i = 0; i < vals.size() - 1; i++) {\n\t\t\t    result2 += Math.min(maxDiff, vals.get(i));\n\t\t\t}\n\t\t\tString result = String.format(\"%d %d\", result1, result2);\n\t\t    System.out.printf(\"Case #%d: %s%n\", casenum, result);\n\t\t    writer.printf(\"Case #%d: %s%n\", casenum, result);\n\t\t    writer.flush();\n\t\t}\n    }\n}\n", "idx": "1024"}
{"func": "package googlejam1.p025;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemA {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n//\t\tScanner sc = new Scanner(new File(\"A-practice.in\"));\r\n//\t\t Scanner sc = new Scanner(new File(\"A-small-attempt0.in\"));\r\n\t\t Scanner sc = new Scanner(new File(\"A-large.in\"));\r\n\t\tsc.useLocale(Locale.US);\r\n\t\tint cases = sc.nextInt();\r\n\r\n\t\tfor (int i = 1; i <= cases; i++) {\r\n\t\t\tSystem.out.format(Locale.US, \"Case #%d: \", i);\r\n\t\t\tint N = sc.nextInt();\n\t\t\tint[] m = new int[N];\n\t\t\tint maxDiff = 0;\n\t\t\tint eaten1 = 0;\n\t\t\tfor (int i1 = 0; i1 < m.length; i1++) {\n\t\t\t\tm[i1] = sc.nextInt();\n\t\t\t\tif (i1 > 0) {\n\t\t\t\t\tmaxDiff = Math.max(maxDiff, m[i1 - 1] - m[i1]);\n\t\t\t\t\tif (m[i1 - 1] - m[i1] > 0) {\n\t\t\t\t\t\teaten1 += m[i1 - 1] - m[i1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint eaten2 = 0;\n\t\t\tfor (int i2 = 0; i2 < m.length - 1; i2++) {\n\t\t\t\teaten2 += Math.min(maxDiff, m[i2]);\n\t\t\t}\n\t\t\tSystem.out.println(eaten1 + \" \" + eaten2);\r\n\t\t}\r\n\t\tsc.close();\r\n\t}\r\n}\r\n", "idx": "1025"}
{"func": "package googlejam1.p026;\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\n\r\npublic class Mushrooms{\r\n\tstatic PrintWriter out;\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tScanner reader = new Scanner(System.in);\r\n\t\tout = new PrintWriter(new File(\"a.out\"));\r\n\t\t\r\n\t\tint times = reader.nextInt();\r\n\t\tfor(int t = 1; t <= times; t++){\r\n\t\t\tint n = reader.nextInt();\r\n\t\t\tint[] v = new int[n];\r\n\t\t\tint a = 0, b = 0;\r\n\t\t\tint rate = 0;\r\n\t\t\tfor(int i = 0; i < n; i++){\r\n\t\t\t\tv[i] = reader.nextInt();\r\n\t\t\t\tif(i > 0) a += Math.max(0, v[i-1] - v[i]);\r\n\t\t\t\tif(i > 0) rate = Math.max(rate, v[i-1] - v[i]);\r\n\t\t\t}\r\n\t\t\tfor(int i = 0; i < n-1; i++)\r\n\t\t\t\tb += Math.min(rate, v[i]);\n\t\t\tString msg = \"Case #\"+t+\": \"+a+\" \"+b;\r\n\t\t\tout.println(msg);\n\t\t\tSystem.out.println(msg);\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "1026"}
{"func": "package googlejam1.p027;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner sc = new Scanner(new File(\"A-large.in\"));\r\n\t\tint T = sc.nextInt();\r\n\t\tfor(int testC = 1; testC<=T; ++testC)\r\n\t\t{\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tint[] data = new int[N];\r\n\t\t\tfor(int i=0; i<N; ++i)\r\n\t\t\t\tdata[i]=sc.nextInt();\r\n\t\t\tint max_dif=0, total_dif=0;\r\n\t\t\tfor(int i=0; i<N-1; ++i)\r\n\t\t\t{\r\n\t\t\t\tif(data[i]-data[i+1]>max_dif)\r\n\t\t\t\t\tmax_dif=data[i]-data[i+1];\r\n\t\t\t\tif(data[i]-data[i+1]>0)\r\n\t\t\t\t\ttotal_dif+=data[i]-data[i+1];\t\t\t\t\r\n\t\t\t}\r\n\t\t\tint total=0;\r\n\t\t\tfor(int i=0; i<N-1; ++i)\r\n\t\t\t{\r\n\t\t\t\tif(data[i]<max_dif)\r\n\t\t\t\t\ttotal+=data[i];\r\n\t\t\t\telse\r\n\t\t\t\t\ttotal+=max_dif;\t\t\t\t\r\n\t\t\t}\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", testC, total_dif, total);\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n", "idx": "1027"}
{"func": "package googlejam1.p030;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class A {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner in = new Scanner(new File(\"A2.in\"));\n\t\tPrintWriter out = new PrintWriter(\"A2.out\");\n\t\tint tc = in.nextInt();\n\t\tfor (int cc = 1; cc <= tc; cc++) {\n\t\t\tint n = in.nextInt();\n\t\t\tint[] a = new int[n];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta[i] = in.nextInt();\n\t\t\tint r0 = 0;\n\t\t\tint r1 = 0;\n\t\t\tint max = 0;\n\t\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\t\tif (a[i] > a[i + 1]) {\n\t\t\t\t\tr0 += a[i] - a[i + 1];\n\t\t\t\t\tmax = Math.max(max, a[i] - a[i + 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < n - 1; i++)\n\t\t\t\tr1 += Math.min(max, a[i]);\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", cc, r0, r1);\n\t\t\tout.printf(\"Case #%d: %d %d\\n\", cc, r0, r1);\n\t\t}\n\t\tout.close();\n\t}\n}\n", "idx": "1030"}
{"func": "package googlejam1.p033;\n\n\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class A {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        PrintWriter out = new PrintWriter(System.out);\n\n        int t = in.nextInt();\n        for (int cs = 1 ; cs <= t ; cs++) {\n            int n = in.nextInt();\n            int[] m = new int[n];\n            for (int i = 0; i < n ; i++) {\n                m[i] = in.nextInt();\n            }\n\t\t\tint[] ways = new int[2];\n\t\t\tint n1 = m.length;\n\t\t\t\n\t\t\tfor (int i = 0 ; i < n1-1 ; i++) {\n\t\t\t    if (m[i] > m[i+1]) {\n\t\t\t        ways[0] += m[i] - m[i+1];\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tint maxrate = 0;\n\t\t\tfor (int i = 0 ; i < n1-1 ; i++) {\n\t\t\t    if (m[i] > m[i+1]) {\n\t\t\t        maxrate = Math.max(maxrate, m[i]-m[i+1]);\n\t\t\t    }\n\t\t\t}\n\t\t\tfor (int i = 0 ; i < n1-1 ; i++) {\n\t\t\t    ways[1] += Math.min(maxrate, m[i]);\n\t\t\t}\n            int[] ret = ways;\n            out.println(String.format(\"Case #%d: %d %d\", cs, ret[0], ret[1]));\n        }\n        out.flush();\n    }\n}\n\n\n\n", "idx": "1033"}
{"func": "package googlejam1.p038;\nimport java.util.*;\r\n\r\npublic class A\r\n{\r\n    public static void main(String args[])\r\n    {\r\n        Scanner scan = new Scanner(System.in);\r\n\r\n        int T = scan.nextInt();\r\n        for(int ca=1;ca <= T;ca++)\r\n        {\r\n            int N = scan.nextInt();\r\n            int[] a = new int[N];\r\n            for(int i=0;i < N;i++)\r\n                a[i] = scan.nextInt();\r\n\r\n            int y = 0;\r\n            for(int i=1;i < N;i++)\r\n                if(a[i] < a[i-1])\r\n                    y += a[i-1] - a[i];\r\n            \r\n            int r = 0;\r\n            for(int i=1;i < N;i++)\r\n                r = Math.max(r, a[i-1] - a[i]);\r\n\r\n            int z = 0;\r\n            for(int i=0;i < N-1;i++)\r\n                z += Math.min(a[i], r);\r\n\r\n\r\n            System.out.println(\"Case #\" + ca + \": \" + y + \" \" + z);\r\n        }\r\n    }\r\n}", "idx": "1038"}
{"func": "package googlejam1.p039;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws IOException,\r\n\t\t\tFileNotFoundException {\r\n\t\tString file = \"A-large\";\r\n\r\n\t\tScanner scan = new Scanner(new BufferedReader(new FileReader(file\r\n\t\t\t\t+ \".in\")));\r\n\t\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(file\r\n\t\t\t\t+ \".out\")));\r\n\r\n\t\tint T = Integer.parseInt(scan.nextLine());\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tint N = Integer.parseInt(scan.nextLine());\r\n\t\t\tString[] info = scan.nextLine().split(\" \");\r\n\t\t\tlong[] num = new long[N];\r\n\t\t\tfor (int i = 0; i < N; i++)\r\n\t\t\t\tnum[i] = Long.parseLong(info[i]);\r\n\r\n\t\t\tlong y = 0;\r\n\t\t\tfor (int i = 1; i < N; i++)\r\n\t\t\t\tif (num[i] < num[i - 1])\r\n\t\t\t\t\ty += num[i - 1] - num[i];\r\n\r\n\t\t\tlong z = 0;\r\n\t\t\tlong max = 0;\r\n\t\t\tfor (int i = 1; i < N; i++)\r\n\t\t\t\tif (num[i] <= num[i - 1])\r\n\t\t\t\t\tmax = Math.max(max, num[i - 1] - num[i]);\r\n\t\t\tfor (int i = 1; i < N; i++)\r\n\t\t\t\tz += Math.min(num[i - 1], max);\r\n\r\n\t\t\tpw.println(\"Case #\" + t + \": \" + y + \" \" + z);\r\n\t\t}\r\n\r\n\t\tscan.close();\r\n\t\tpw.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1039"}
{"func": "package googlejam1.p040;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class MushroomMonster {\r\n    \r\n    public static void main(String[] args) throws Exception {\r\n        File inputFile = new File(\"A-large.in\");\r\n        Scanner in = new Scanner(inputFile);\r\n        File outputFile = new File(\"output.txt\");\r\n        PrintWriter out = new PrintWriter(outputFile);\r\n\r\n        int T = in.nextInt();\r\n        for (int t=0; t<T; t++) {\r\n            int N = in.nextInt();\r\n            int[] A = new int[N];\r\n            for (int n=0; n<N; n++) {\r\n                A[n] = in.nextInt();\r\n            }\r\n            long y = 0;\r\n            long max = 0;\r\n            for (int n=1; n<N; n++) {\r\n                long diff = A[n-1]-A[n];\r\n                if (diff > 0) {\r\n                    y += diff;\r\n                    max = Math.max(max, diff);\r\n                }\r\n            }\r\n            long z = 0;\r\n            for (int n=0; n<N-1; n++) {\r\n                z += Math.min(max, A[n]);\r\n            }\r\n            \r\n            out.println(\"Case #\"+(t+1)+\": \"+y+\" \"+z);\r\n        }\r\n\r\n        out.close();\r\n    }\r\n    \r\n}\r\n", "idx": "1040"}
{"func": "package googlejam1.p041;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n  static final String FILENAME = \"A-large\";\r\n  static final String IN = FILENAME + \".in\";\r\n  static final String OUT = FILENAME + \".out\";\r\n  Scanner sc;\r\n  BufferedWriter out;\r\n\r\n  public static void main(String args[]) throws Exception {\r\n    A r = new A();\n\tr.sc = new Scanner(new File(A.IN));\n\tr.out = new BufferedWriter(new FileWriter(A.OUT));\n\tint t = Integer.parseInt(r.sc.nextLine());\n\tfor (int i = 1; i <= t; i++) {\n\t  r.out.write(\"Case #\" + i + \": \");\n\t  int n = r.sc.nextInt();\n\tint[] m = new int[n];\n\tfor(int i1 = 0; i1 < n; i1++) {\n\t  m[i1] = r.sc.nextInt();\n\t}\n\tint sum1 = 0;\n\tint cur = m[0];\n\tfor(int i4 = 1; i4 < n; i4++) {\n\t  if(m[i4] < cur) {\n\t    sum1 += cur - m[i4];\n\t  }\n\t  cur = m[i4];\n\t}\n\tr.out.write(Integer.toString(sum1) + \" \");\n\t\n\tint max = 0;\n\tfor(int i2 = 1; i2 < n; i2++) {\n\t  if(max < m[i2 - 1] - m[i2]) {\n\t    max = m[i2 - 1] - m[i2];\n\t  }\n\t}\n\tint sum2 = 0;\n\tfor(int i3 = 0; i3 < n - 1; i3++) {\n\t  sum2 += Math.min(max, m[i3]);\n\t}\n\tr.out.write(Integer.toString(sum2));\n\tr.out.newLine();\n\tr.out.flush();\n\t}\n\tr.sc.close();\n\tr.out.close();\r\n  }\r\n}\r\n", "idx": "1041"}
{"func": "package googlejam1.p042;\n/*\r\nID: mkural31\r\nLANG: JAVA\r\nTASK: mushroom\r\n*/\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class mushroom{\r\n\tpublic static void main (String [] args) throws IOException {\r\n\t\tBufferedReader f = new BufferedReader(new FileReader(\"mushroom.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"mushroom.out\")));\r\n\t\tint t = Integer.parseInt(f.readLine());\r\n\t\tfor(int waka = 0;waka<t;waka++){\r\n\t\t\tStringTokenizer st = new StringTokenizer(f.readLine());\r\n\t\t\tint n = Integer.parseInt(st.nextToken());\r\n\t\t\tint m[] = new int[n];\r\n\t\t\tStringTokenizer sc  = new StringTokenizer(f.readLine());\r\n\t\t\tSystem.out.println(n);\r\n\t\t\tfor(int i = 0;i<n;i++){\r\n\t\t\t\tm[i]=Integer.parseInt(sc.nextToken());\r\n\t\t\t\tSystem.out.println(\"m[\" + i + \"] is \" + m[i]);\r\n\t\t\t}\r\n\t\t\tint first = 0;\r\n\t\t\tint rate = 0;\r\n\t\t\tfor(int i = 0;i<n-1;i++){\r\n\t\t\t\tfirst+=Math.max(0,m[i]-m[i+1]);\r\n\t\t\t\tif(m[i]>m[i+1]){\r\n\t\t\t\t\trate=Math.max(rate,m[i]-m[i+1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint second = 0;\r\n\t\t\tfor(int i = 0;i<n-1;i++){\r\n\t\t\t\tif(rate>=m[i]){\r\n\t\t\t\t\tsecond +=m[i];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tsecond+=rate;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.print(\"Case #\" + (waka+1) + \": \");\r\n\t\t\tout.println(first + \" \" + second);\r\n\t\t}\r\n\t\tout.close();\r\n\t\tSystem.exit(0);\r\n\t}\r\n}", "idx": "1042"}
{"func": "package googlejam1.p046;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t\r\n\t\tBufferedReader input = new BufferedReader(new FileReader(\"C:\\\\Users\\\\William Li\\\\Desktop\\\\input.txt\"));\r\n\t\tPrintWriter output = new PrintWriter(new FileWriter(\"C:\\\\Users\\\\William Li\\\\Desktop\\\\output.txt\"));\r\n\t\t\r\n\t\tint T = Integer.parseInt(input.readLine());\r\n\t\t\r\n\t\tfor (int t = 1; t <= T; t++){\r\n\t\t\t\r\n\t\t\tint N = Integer.parseInt(input.readLine());\r\n\t\t\t\r\n\t\t\tint method1 = 0;\r\n\t\t\t\r\n\t\t\tString[] nextLine = input.readLine().split(\" \");\r\n\t\t\tint[] mushrooms = new int[N];\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < nextLine.length; i++){\r\n\t\t\t\t\r\n\t\t\t\tmushrooms[i] = Integer.parseInt(nextLine[i]);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int i = 1; i < mushrooms.length; i++){\r\n\t\t\t\t\r\n\t\t\t\tmethod1 += Math.max(mushrooms[i - 1] - mushrooms[i], 0);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint method2 = 0;\r\n\t\t\tint maxdiff = 0;\r\n\t\t\t\r\n\t\t\tfor (int i = 1; i < mushrooms.length; i++){\r\n\t\t\t\t\r\n\t\t\t\tmaxdiff = Math.max(mushrooms[i - 1] - mushrooms[i], maxdiff);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < mushrooms.length - 1; i++){\r\n\t\t\t\t\r\n\t\t\t\tif (mushrooms[i] - maxdiff < 0){\r\n\t\t\t\t\t\r\n\t\t\t\t\tmethod2 += mushrooms[i];\r\n\t\t\t\t\t\r\n\t\t\t\t}else{\r\n\t\t\t\t\t\r\n\t\t\t\t\tmethod2 += maxdiff;\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\toutput.println(\"Case #\" + t + \": \" + method1 + \" \" + method2);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tinput.close();\r\n\t\toutput.close();\r\n\t\t\r\n\t\tSystem.exit(0);\r\n\t\t\r\n\t}\r\n\r\n}", "idx": "1046"}
{"func": "package googlejam1.p048;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tBufferedOutputStream bos = new BufferedOutputStream(System.out);\n\t\tString eol = System.getProperty(\"line.separator\");\n\t\tbyte[] eolb = eol.getBytes();\n\t\ttry {\n\t\t\tString str = br.readLine();\n\t\t\tint t = Integer.parseInt(str);\n\t\t\tfor(int i = 0 ; i < t ; i++) {\n\t\t\t\tstr = br.readLine();\n\t\t\t\tint n = Integer.parseInt(str);\n\t\t\t\tstr = br.readLine();\n\t\t\t\tStringTokenizer st = new StringTokenizer(str,\" \");\n\t\t\t\tint [] ar = new int[n];\n\t\t\t\tint iter = 0;\n\t\t\t\twhile(st.hasMoreTokens()) {\n\t\t\t\t\tar[iter++] = Integer.parseInt(st.nextToken());\n\t\t\t\t}\n\t\t\t\tint ansY = 0;\n\t\t\t\tint ansZ = 0;\n\t\t\t\tint dip = 0;\n\t\t\t\tfor(int j = 0 ; j < n-1 ; j++) {\n\t\t\t\t\tdip = Math.max(dip,ar[j]-ar[j+1]);\n\t\t\t\t\tif(ar[j+1]<ar[j]) {\n\t\t\t\t\t\tansY += ar[j]-ar[j+1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int j = 0 ; j < n-1 ; j++) {\n\t\t\t\t\tint x = Math.min(ar[j],dip);\n\t\t\t\t\tansZ += x;\n\t\t\t\t}\n\t\t\t\tbos.write(\"Case #\".getBytes());\n\t\t\t\tbos.write(new Integer(i+1).toString().getBytes());\n\t\t\t\tbos.write(\": \".getBytes());\n\t\t\t\tbos.write(new Integer(ansY).toString().getBytes());\n\t\t\t\tbos.write(\" \".getBytes());\n\t\t\t\tbos.write(new Integer(ansZ).toString().getBytes());\n\t\t\t\tbos.write(eolb);\n\t\t\t}\n\t\t\tbos.flush();\n\t\t} catch(IOException ioe) {\n\t\t\tioe.printStackTrace();\n\t\t}\n\n\t}\n\n}\n", "idx": "1048"}
{"func": "package googlejam1.p050;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintStream;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"Round1A2015/A-l.in\"));\r\n\t\tSystem.setOut(new PrintStream(\"src/Round1A2015/A-l.out\"));\r\n\t\t\r\n\t\tint T = Integer.parseInt(br.readLine());\r\n\t\t\r\n\t\tfor (int t= 1 ; t <= T; t++){\r\n\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\tString tmp[] = br.readLine().trim().split(\"\\\\s+\");\r\n\t\t\tint m[] = new int[N];\r\n\t\t\tfor (int i = 0 ; i < N ;i++){\r\n\t\t\t\tm[i] = Integer.parseInt(tmp[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong sum = 0;\r\n\t\t\tint max = 0;\r\n\t\t\tfor (int i = 1; i < N ;i++){\r\n\t\t\t\tint d = m[i-1] - m[i];\r\n\t\t\t\tif (d > 0) {\r\n\t\t\t\t\tsum += d;\r\n\t\t\t\t\tif (d > max) max = d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong sum2 = 0;\r\n\t\t\tfor (int i = 0; i < N-1 ;i++){\r\n\t\t\t\tif (m[i] > max) {\r\n\t\t\t\t\tsum2 += max;\r\n\t\t\t\t} else sum2+= m[i];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.print(String.format(\"Case #%d: %d %d\\n\",t,sum,sum2));\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1050"}
{"func": "package googlejam1.p056;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\npublic class P1\r\n{\r\n\tpublic static void main( String[] args ) throws Exception\r\n\t{\r\n\t\tFile inputFile = new File( \"inputfiles/round1a/P1/input.txt\" );\r\n\t\tFileReader fr = new FileReader( inputFile );\r\n\t\tBufferedReader br = new BufferedReader( fr );\r\n\t\t\r\n\t\tint numOfTestCases = Integer.parseInt( br.readLine() );\r\n\t\t\r\n\t\tFile outputFile = new File( \"inputfiles/round1a/P1/output.txt\" );\r\n\t\toutputFile.delete();\r\n\t\toutputFile.createNewFile();\r\n\t\tFileWriter fw = new FileWriter( outputFile );\r\n\t\tBufferedWriter bw = new BufferedWriter( fw );\r\n\t\t\r\n\t\tfor ( int i = 0; i < numOfTestCases; i++ )\r\n\t\t{\r\n\t\t\tint N = Integer.parseInt( br.readLine() );\r\n\t\t\t\r\n\t\t\tint[] m = new int[N];\r\n\t\t\t\r\n\t\t\tString[] data = br.readLine().split( \" \" );\r\n\t\t\t\r\n\t\t\tfor ( int j = 0; j < N; j++ )\r\n\t\t\t\tm[j] = Integer.parseInt( data[j] );\r\n\t\t\t\r\n\t\t\tint minEat1 = 0;\n\t\t\tint minEat2 = 0;\n\t\t\tint maxEat = 0;\n\t\t\tfor ( int i2 = 1; i2 < N; i2++ )\n\t\t\t\tif ( m[i2-1] > m[i2] )\n\t\t\t\t{\n\t\t\t\t\tint eat = m[i2-1] - m[i2];\n\t\t\t\t\tminEat1 += eat;\n\t\t\t\t\tmaxEat = Math.max( maxEat, eat );\n\t\t\t\t}\n\t\t\t\n\t\t\tfor ( int i1 = 0; i1 < N-1; i1++ )\n\t\t\t\tminEat2 += Math.min( maxEat, m[i1] );\n\t\t\t\n\t\t\tbw.append( \"Case #\"+(i+1)+\": \" + minEat1 + \" \" + minEat2 + \"\\n\" );\n\t\t\tbw.flush();\r\n\t\t}\r\n\t\t\r\n\t\tbw.flush();\r\n\t\tfw.flush();\r\n\t\t\r\n\t\tbw.close();\r\n\t\tfw.close();\r\n\t}\r\n}\r\n", "idx": "1056"}
{"func": "package googlejam1.p058;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/A-large.in\"))));\r\n\r\n\t\tString output = \"\";\r\n\t\tint t = sc.nextInt();\r\n\t\tsc.nextLine();\r\n\t\tfor (int i = 1; i <= t; i++) {\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint[] intervals = new int[n];\r\n\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\tintervals[j] = sc.nextInt();\r\n\t\t\t}\r\n\t\t\tint y = 0;\r\n\t\t\tint minPerInterval = 0;\r\n\t\t\tfor (int j = 1; j < n; j++) {\r\n\t\t\t\tif (intervals[j] < intervals[j-1]) {\r\n\t\t\t\t\ty += intervals[j-1]-intervals[j];\r\n\t\t\t\t\tif (intervals[j-1]-intervals[j] > minPerInterval)\r\n\t\t\t\t\t\tminPerInterval = intervals[j-1]-intervals[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint z = 0;\r\n\t\t\tfor (int j = 0; j < n-1; j++) {\r\n\t\t\t\tz += Math.min(minPerInterval, intervals[j]);\r\n\t\t\t}\r\n\t\t\toutput += \"Case #\" + i + \": \" + y + \" \" + z + \"\\n\";\r\n\t\t}\r\n\t\t\r\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src/A-large.out\"), \"utf-8\"));\r\n\t\tbw.write(output);\r\n\t\tbw.close();\r\n\t}\r\n}", "idx": "1058"}
{"func": "package googlejam1.p059;\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tFile fin = new File(\"A-large.in\");\r\n\t\t\tScanner sc = new Scanner(fin);\r\n\t\t\tFile fout = new File(\"aout.txt\");\r\n\t\t\tPrintWriter pw = new PrintWriter(fout);\r\n\t\t\t//PrintWriter pw = new PrintWriter(System.out);\r\n\t\t\tint T = sc.nextInt();\r\n\t\t\tfor (int cn=1; cn<=T; cn++) {\r\n\t\t\t\tint N = sc.nextInt();\r\n\t\t\t\tint[] m = new int[N];\r\n\t\t\t\tfor (int i=0; i<N; i++) {\r\n\t\t\t\t\tm[i] = sc.nextInt();\r\n\t\t\t\t}\r\n\t\t\t\tA a = new A();\n\t\t\t\tint[] res1 = new int[2];\n\t\t\t\tint last = 0;\n\t\t\t\tint rate = 0;\n\t\t\t\tfor (int y: m) {\n\t\t\t\t\tint dec = Math.max(0, last - y);\n\t\t\t\t\tres1[0] += dec;\n\t\t\t\t\trate = Math.max(rate, dec);\n\t\t\t\t\tlast = y;\n\t\t\t\t}\n\t\t\t\tfor (int i=0; i+1<m.length; i++) {\n\t\t\t\t\tres1[1] += Math.min(m[i], rate);\n\t\t\t\t}\r\n\t\t\t\tint[] res = res1;\r\n\t\t\t\tpw.write(\"Case #\" + cn + \": \" + res[0] + \" \" + res[1] + \"\\n\");\r\n\t\t\t}\r\n\t\t\tpw.flush();\r\n\t\t\tpw.close();\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1059"}
{"func": "package googlejam1.p060;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class MushroomMonster {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString fileName = args[0];\r\n\t\tMushroomMonster obj = new MushroomMonster();\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(fileName));\n\t\tBufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(fileName + \".out\"));\n\t\t\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tfor (int i = 0; i < T; i++) {\n\t\t\tInteger N = Integer.parseInt(br.readLine());\n\t\t\tString str = br.readLine();\n\t\t\tStringTokenizer token = new StringTokenizer(str, \" \");\n\t\t\n\t\t\tint[] m = new int[N];\n\t\t\tint max = 0;\n\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\tm[j] = Integer.parseInt(token.nextToken());\n\t\t\t\tif (j > 0 && m[j] - m[j - 1] < 0) {\n\t\t\t\t\tmax = Math.max(max, m[j - 1] - m[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tint ans_x = 0;\n\t\t\tint ans_y = 0;\n\t\t\tfor (int j = 1; j < N; j++) {\n\t\t\t\tif (m[j] - m[j - 1] < 0) {\n\t\t\t\t\tans_x += m[j - 1] - m[j];\n\t\t\t\t}\n\t\t\t\tif (m[j - 1] <= max) {\n\t\t\t\t\tans_y += m[j - 1];\n\t\t\t\t} else {\n\t\t\t\t\tans_y += max;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tbw.write(\"Case #\" + (i + 1) + \": \" + ans_x + \" \" + ans_y);\n\t\t\tbw.write(\"\\r\\n\");\n\t\t}\n\t\tbw.close();\n\t\tbr.close();\r\n\t}\r\n}\r\n", "idx": "1060"}
{"func": "package googlejam1.p061;\nimport java.io.*;\nimport java.util.*;\n\npublic class Mushroom {\n    public static final PrintStream out = System.out;\n    public static final BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    public int numCases;\n    \n    public static void main(String[] args) throws Exception {\n        Mushroom r = new Mushroom();\n\t\tr.numCases = Integer.parseInt(Mushroom.in.readLine().trim());\n\t\tfor (int i = 1; i <= r.numCases; i++) {\n\t\t    Mushroom.out.print(\"Case #\" + i + \": \");\n\t\t    String line = Mushroom.in.readLine();\n\t\t\tScanner scan = new Scanner(line);\n\t\t\tint N = scan.nextInt();\n\t\t\tline = Mushroom.in.readLine();\n\t\t\tscan = new Scanner(line);\n\t\t\tint prev = scan.nextInt();\n\t\t\tint max = 0;\n\t\t\tint sum = 0;\n\t\t\tint[] m = new int[N];\n\t\t\tm[0] = prev;\n\t\t\tfor (int i2 = 1; i2 < N; i2++) {\n\t\t\t    int next = scan.nextInt();\n\t\t\t    m[i2] = next;\n\t\t\t    int diff = prev - next;\n\t\t\t    if (diff > 0) sum += diff;\n\t\t\t    if (diff > max) max = diff;\n\t\t\t    prev = next;\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\tfor (int i1 = 0; i1 < N-1; i1++) {\n\t\t\t    res += Math.min(max, m[i1]);\n\t\t\t}\n\t\t\tSystem.out.println(sum + \" \" + res);\n\t\t}\n    }\n\n}\n", "idx": "1061"}
{"func": "package googlejam1.p063;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class MushroomMonster {\r\n\r\n    static int n;\r\n    static int[] a;\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        //        Scanner cin = new Scanner(new File(\"A-small-attempt1.in\"));\r\n        //        PrintStream cout = new PrintStream(\"A-small-attempt1.out\");\r\n        Scanner cin = new Scanner(new File(\"A-large.in\"));\r\n        PrintStream cout = new PrintStream(\"A-large.out\");\r\n        //                Scanner cin = new Scanner(System.in);\r\n        //                PrintStream cout = System.out;\r\n\r\n        int _case = 0;\r\n        for (int T = cin.nextInt(); T > 0; T--) {\r\n            _case++;\r\n            n = cin.nextInt();\r\n            a = new int[n];\r\n            for (int i = 0; i < n; i++)\r\n                a[i] = cin.nextInt();\r\n\r\n            int one = 0;\r\n            int two = 0;\r\n            int maxGap = 0;\r\n            for (int i = 1; i < n; i++)\r\n                if (a[i] < a[i - 1]) {\r\n                    one += a[i - 1] - a[i];\r\n                    maxGap = Math.max(maxGap, a[i - 1] - a[i]);\r\n                }\r\n\r\n            for (int i = 1; i < n; i++)\r\n                two += Math.min(a[i - 1], maxGap);\r\n\r\n            cout.printf(\"Case #%d: %d %d%n\", _case, one, two);\r\n        }\r\n\r\n        cin.close();\r\n        cout.close();\r\n    }\r\n\r\n}\r\n", "idx": "1063"}
{"func": "package googlejam1.p071;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\npublic class R1A_A {\r\npublic static void main(String[] args) {\r\n\t\tString prblm=\"A\"; boolean fl=true;\r\n\t\tString filein=prblm+\"-\"+((fl)?\"large\":\"small\")+\".in.txt\";\r\n\t\tString fileout=prblm+\"-\"+((fl)?\"large\":\"small\")+\".out.txt\";\r\n\t\ttry {\r\n\t\t\tBufferedReader fr= new BufferedReader(new FileReader(filein));\r\n\t\t\tBufferedWriter fw= new BufferedWriter(new FileWriter(fileout));\r\n\t\t\tString s=fr.readLine();\r\n\t\t\tint T=Integer.parseInt(s);\r\n\t\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\t\ts=fr.readLine();\r\n\t\t\t\tint N=Integer.parseInt(s);\r\n\t\t\t\ts=fr.readLine();\r\n\t\t\t\tString[] tok=s.split(\" \");\r\n\t\t\t\tint mx=0;\r\n\t\t\t\tint tdif=0;\r\n\t\t\t\tint[] vs=new int[N]; \r\n\t\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\t\tvs[j]=Integer.parseInt(tok[j]);\r\n\t\t\t\t\tif (j>0){\r\n\t\t\t\t\t\tmx=Math.max(mx, vs[j-1]-vs[j]);\r\n\t\t\t\t\t\ttdif+=Math.max(0, vs[j-1]-vs[j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tint me=0;\r\n\t\t\t\tfor (int j = 0; j < N-1; j++)\r\n\t\t\t\t\tme+=Math.min(mx, vs[j]);\r\n\t\t\t\ts=tdif+\" \"+me;\r\n\t\t\t\tSystem.out.println(s);\r\n\t\t\t\tfw.write(\"Case #\"+i+\": \"+ s  +\"\\n\");\r\n\t\t\t}\r\n\t\t\tfr.close();\r\n\t\t\tfw.close();\r\n\t\t} catch (Exception e) {\t\t\t\r\n\t\t\te.printStackTrace();\r\n\t\t}\t\t\r\n\t}\r\n}", "idx": "1071"}
{"func": "package googlejam1.p078;\nimport java.io.*;\nimport java.util.*;\n\npublic class A {\n\tpublic static boolean DEBUG = true;\n\t\n\tpublic static void main(String[] args) throws Exception{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\tint cases = Integer.parseInt(br.readLine());\n\t\t\n\t\tfor(int t = 1; t <= cases; t++){\n\t\t\tpw.print(\"Case #\" + t + \": \");\n\t\t\t\n\t\t\tint n = Integer.parseInt(br.readLine());\n\t\t\t\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n\t\t\tint[] m = new int[n];\n\t\t\t\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tm[i] = Integer.parseInt(st.nextToken());\n\t\t\t}\n\t\t\t\n\t\t\tlong a = 0;\n\t\t\tlong b = 0;\n\t\t\t\n\t\t\tfor(int i = 1; i < n; i++){\n\t\t\t\ta += Math.max(0, m[i-1]-m[i]);\n\t\t\t\tb = Math.max(b, m[i-1]-m[i]);\n\t\t\t}\n\t\t\t\n\t\t\tlong c = 0;\n\t\t\t\n\t\t\tfor(int i = 0; i < n-1; i++){\n\t\t\t\tc += Math.min(b, m[i]);\n\t\t\t}\n\t\t\t\n\t\t\tpw.println(a + \" \" + c);\n\t\t}\n\t\t\n\t\tbr.close();\n\t\tpw.close();\n\t}\n}", "idx": "1078"}
{"func": "package googlejam1.p079;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\n\npublic class A {\n\n\tprivate static PrintStream out = System.out;\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint numTests = in.nextInt();\n\t\tfor (int test = 1; test <= numTests; ++test) {\n\t\t\t// read input\n\t\t\tint n = in.nextInt();\n\t\t\tint[] cnts = new int[n];\n\t\t\tfor (int i = 0; i < n; ++i)\n\t\t\t\tcnts[i] = in.nextInt();\n\t\t\t// solve first problem\n\t\t\tlong ans1 = 0;\n\t\t\tfor (int i = 1; i < n; ++i)\n\t\t\t\tans1 += Math.max(0, cnts[i - 1] - cnts[i]);\n\t\t\t// solve second\n\t\t\tint diff = 0;\n\t\t\tfor (int i = 1; i < n; ++i)\n\t\t\t\tdiff = Math.max(diff, cnts[i - 1] - cnts[i]);\n\t\t\tlong ans2 = 0;\n\t\t\tfor (int i = 0; i + 1 < n; ++i)\n\t\t\t\tans2 += Math.min(diff, cnts[i]);\n\t\t\t// output answer\n\t\t\tout.println(\"Case #\" + test + \": \" + ans1 + \" \" + ans2);\n\t\t}\n\t}\n\n}\n", "idx": "1079"}
{"func": "package googlejam1.p081;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class Round1AProbA {\r\n\t\r\n\tpublic static void main(String[] args) throws Exception\r\n\t{\r\n\t\tString file = \"Round1A/A-large.in\";\r\n\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(file));\r\n\t\tPrintWriter writer = new PrintWriter(\"outAlarge.txt\", \"UTF-8\");\r\n\t\tString line;\r\n\r\n\t\tint T = Integer.parseInt(br.readLine());\r\n\t\tfor(int test=0;test<T;test++)\r\n\t\t{\r\n\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\tString[] lines = br.readLine().split(\" \");\r\n\t\t\tint[] m = new int[N];\r\n\t\t\tfor(int i=0;i<lines.length;i++)\r\n\t\t\t{\r\n\t\t\t\tm[i] = Integer.parseInt(lines[i]);\r\n\t\t\t}\n\t\t\tint num = 0;\n\t\t\tfor(int i=1;i<N;i++)\n\t\t\t{\n\t\t\t\tif(m[i]<m[i-1])\n\t\t\t\t{\n\t\t\t\t\tnum+=m[i-1]-m[i];\n\t\t\t\t}\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint num1 = num;\n\t\t\tint rate = 0;\n\t\t\tfor(int i=1;i<N;i++)\n\t\t\t{\n\t\t\t\tif(m[i]<m[i-1])\n\t\t\t\t{\n\t\t\t\t\trate=Math.max(rate,m[i-1]-m[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint num3 = 0;\n\t\t\tfor(int i=0;i<N-1;i++)\n\t\t\t{\n\t\t\t\tnum3 += Math.min(rate,m[i]);\n\t\t\t}\r\n\t\t\tint num2 = num3;\r\n\t\t\t\r\n\t\t\twriter.println(\"Case #\"+(test+1)+\": \" + num1 + \" \" + num2);\r\n\t\t}\r\n\t\twriter.close();\r\n\t}\r\n}", "idx": "1081"}
{"func": "package googlejam1.p082;\nimport java.util.Scanner;\n\npublic class A {\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tint T = scan.nextInt();\n\t\t\n\t\tfor (int Q = 1; Q <= T; Q++)\n\t\t{\n\t\t\tint N = scan.nextInt();\n\t\t\t\n\t\t\tint[] pieces = new int[N];\n\t\t\tint anytime = 0;\n\t\t\tint maxDiff = -1;\n\t\t\t\n\t\t\tfor (int i = 0; i < N; i++)\n\t\t\t{\n\t\t\t\tpieces[i] = scan.nextInt();\n\t\t\t\t\n\t\t\t\tif (i > 0)\n\t\t\t\t{\n\t\t\t\t\tint diff = pieces[i - 1] - pieces[i];\n\t\t\t\t\t\n\t\t\t\t\tif (diff > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tanytime += diff;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (diff > maxDiff)\n\t\t\t\t\t{\n\t\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint constant = 0;\n\t\t\t\n\t\t\tif (maxDiff > 0)\n\t\t\t{\n\t\t\t\tfor (int i = 0; i < N - 1; i++)\n\t\t\t\t{\n\t\t\t\t\tif (pieces[i] > maxDiff)\n\t\t\t\t\t{\n\t\t\t\t\t\tconstant += maxDiff;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tconstant += pieces[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", Q, anytime, constant);\n\t\t}\n\t\t\n\t\tscan.close();\n\t}\n}\n", "idx": "1082"}
{"func": "package googlejam1.p083;\nimport java.math.BigDecimal;\r\nimport java.math.BigInteger;\r\nimport java.util.*;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\n/**\r\n *\r\n *\r\n */\r\npublic class A {\r\n    public static void main(String[] args) {\r\n         try {\r\n             Scanner scanner = (new Scanner(new File(\"c:/users/rafal/ideaprojects/src/Ain.txt\")));\r\n\r\n\r\n             FileOutputStream out = new FileOutputStream(\"c:/users/rafal/ideaprojects/src/Aout.txt\");\r\n\r\n             int numberOfCases;\r\n             numberOfCases = scanner.nextInt();\r\n             scanner.nextLine();\r\n\r\n             PrintWriter wr = new PrintWriter(out);\r\n             for (int i = 0; i < numberOfCases; i++) {\r\n                 int caseNumber = i + 1;\n\t\t\t\tint n = scanner.nextInt();\n\t\t\t\t\n\t\t\t\tint []nn = new int[n];\n\t\t\t\tfor (int i1 = 0; i1 < n; i1++) {\n\t\t\t\t    nn[i1] = scanner.nextInt();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint maxDiff = 0;\n\t\t\t\tint result1 = 0;\n\t\t\t\tfor (int i2 = 1; i2 < n; i2++) {\n\t\t\t\t    if (nn[i2] < nn[i2-1]) {\n\t\t\t\t        int diff = nn[i2-1] - nn[i2];\n\t\t\t\t        if (diff > maxDiff) {\n\t\t\t\t            maxDiff = diff;\n\t\t\t\t        }\n\t\t\t\t        result1 += diff;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint result2 = 0;\n\t\t\t\tfor (int i3 = 0; i3 < n - 1; i3++) {\n\t\t\t\t    if (nn[i3] >= maxDiff) {\n\t\t\t\t        result2 += maxDiff;\n\t\t\t\t    } else {\n\t\t\t\t        result2 += nn[i3];\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twr.println(\"Case #\" + caseNumber + \": \" + result1 + \" \" + result2);\n\t\t\t\tSystem.out.println(\"Case #\" + caseNumber + \": \" + result1 + \" \" + result2);\n\t\t\t\t// ...\r\n                 if (i < numberOfCases - 1)\r\n                    scanner.nextLine();\r\n             }\r\n             wr.close();\r\n             out.close();\r\n\r\n         } catch (IOException e) {\r\n             System.out.println(\"Error: \" + e);\r\n         }\r\n     }\r\n\r\n\r\n\r\n}", "idx": "1083"}
{"func": "package googlejam1.p084;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor (int cas = 1; cas <=T; cas++) {\r\n\t\t\tint N = Integer.parseInt(in.readLine());\r\n\t\t\tlong[] a = new long[N];\r\n\t\t\tString[] spl = in.readLine().split(\" \");\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\ta[i] = Integer.parseInt(spl[i]);\r\n\t\t\t}\r\n\t\t\tlong sum =0;\r\n\t\t\tlong maxD = 0;\r\n\t\t\tfor (int i = 0; i < N-1; i++) {\r\n\t\t\t\tsum += Math.max(0, a[i]-a[i+1]);\r\n\t\t\t\tmaxD = Math.max(maxD, a[i]-a[i+1]);\r\n\t\t\t}\r\n\t\t\tlong s2=0;\r\n\t\t\tfor (int i = 0; i < N-1; i++) {\r\n\t\t\t\ts2 += Math.min(maxD, a[i]);\r\n\t\t\t}\r\n\t\t\tString ans = sum+\" \"+s2;\r\n\t\t\tSystem.out.println(\"Case #\"+cas+\": \"+ans);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "1084"}
{"func": "package googlejam1.p085;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Mushroom {\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Scanner in = new Scanner(new File(\"A-large.in\"));\r\n        int loopvar = in.nextInt();\r\n        PrintWriter out = new PrintWriter(new File(\"mush.out\"));\r\n        for (int j = 0; j < loopvar; j++) {\r\n\r\n            int mush = in.nextInt();\r\n            int[] mushes = new int[mush];\r\n            for (int i = 0; i < mush; i++) {\r\n                mushes[i] = in.nextInt();\r\n            }\r\n\r\n            int tot = 0;\r\n            for (int i = 1; i < mush; i++) {\r\n                if (mushes[i - 1] > mushes[i]) {\r\n                    tot += mushes[i-1] - mushes[i];\r\n                }\r\n            }\r\n\r\n            int rate = 0;\r\n            for (int i = 1; i < mush; i++) {\r\n                if (mushes[i - 1] > mushes[i]) {\r\n                    rate = Math.max(rate, mushes[i -1] - mushes[i]);\r\n                }\r\n            }\r\n            int tr = 0;\r\n            for (int i = 0; i < mush - 1; i++) {\r\n                tr += Math.min(rate, mushes[i]);\r\n            }\r\n\r\n            out.printf(\"Case #%d: %d %d%n\", j + 1, tot, tr);\r\n\r\n        }\r\n        out.close();\r\n    }\r\n}", "idx": "1085"}
{"func": "package googlejam1.p090;\n\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Q1 {\r\n\tpublic static void main(String... args) {\r\n\t\t@SuppressWarnings(\"resource\")\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint caseCount = in.nextInt();\r\n\t\tint[] m = new int[1001];\r\n\t\tfor (int caseValue = 1; caseValue <= caseCount; caseValue++) {\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tm[i] = in.nextInt();\r\n\t\t\t}\r\n\t\t\tint result1 = 0; {\r\n\t\t\t\tint prev = m[0];\r\n\t\t\t\tfor (int i = 1; i < N; i++) {\r\n\t\t\t\t\tint curr = m[i];\r\n\t\t\t\t\tresult1 += Math.max(0, prev - curr);\r\n\t\t\t\t\tprev = curr;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint result2 = 0; {\r\n\t\t\t\tint minEatenMax = 0;\r\n\t\t\t\tint prev = m[0];\r\n\t\t\t\tfor (int i = 1; i < N; i++) {\r\n\t\t\t\t\tint curr = m[i];\r\n\t\t\t\t\tint minEaten = Math.max(0, prev - curr);\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (minEatenMax < minEaten) {\r\n\t\t\t\t\t\t\tminEatenMax = minEaten;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tprev = curr;\r\n\t\t\t\t}\r\n\t\t\t\tprev = m[0];\r\n\t\t\t\tfor (int i = 1; i < N; i++) {\r\n\t\t\t\t\tint curr = m[i];\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (prev < minEatenMax) {\r\n\t\t\t\t\t\t\tresult2 += prev;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresult2 += minEatenMax;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tprev = curr;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + caseValue + \": \" + result1 + \" \" + result2);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1090"}
{"func": "package googlejam1.p092;\nimport java.io.*;\nimport java.util.*;\n\nclass Mushroom {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tfor (int t = 1; t <= T; t++) {\n\t\t\tint n = Integer.parseInt(br.readLine());\n\t\t\tint[] aa = new int[n];\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\taa[i] = Integer.parseInt(st.nextToken());\n\t\t\tint sum1 = 0;\n\t\t\tfor (int i = 1; i < n; i++)\n\t\t\t\tif (aa[i - 1] > aa[i])\n\t\t\t\t\tsum1 += aa[i - 1] - aa[i];\n\t\t\tint max = 0;\n\t\t\tfor (int i = 1; i < n; i++)\n\t\t\t\tif (aa[i - 1] - aa[i] > max)\n\t\t\t\t\tmax = aa[i - 1] - aa[i];\n\t\t\tint sum2 = 0;\n\t\t\tfor (int i = 1; i < n; i++)\n\t\t\t\tsum2 += Math.min(max, aa[i - 1]);\n\t\t\tpw.println(\"Case #\" + t + \": \" + sum1 + \" \" + sum2);\n\t\t}\n\t\tpw.close();\n\t}\n}\n", "idx": "1092"}
{"func": "package googlejam1.p093;\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemA {\r\n\t\t\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tFileWriter writer = new FileWriter(\"C:/Users/Max/Documents/Java Workspaces/Google Code Jam/Round 1A 2015/src/output.txt\");\t\t\r\n\t\ttry {\r\n\t\t\tBufferedReader br = new BufferedReader(new FileReader(\"C:/Users/Max/Documents/Java Workspaces/Google Code Jam/Round 1A 2015/src/input.txt\"));\r\n\t\t\tint numCases = Integer.parseInt(br.readLine());\r\n\t\t\tfor (int caseNum = 1; caseNum <= numCases; caseNum++) {\r\n\t\t\t\tString line = br.readLine();\r\n\t\t\t\tint n = Integer.parseInt(line);\r\n\t\t\t\tline = br.readLine();\r\n\t\t\t\tScanner sc = new Scanner(line);\r\n\t\t\t\tlong y = 0;\r\n\t\t\t\tlong maxDifference = 0;\r\n\t\t\t\tint last = Integer.parseInt(sc.next());\r\n\t\t\t\tArrayList<Integer> sizes = new ArrayList<Integer>();\r\n\t\t\t\tsizes.add(last);\r\n\t\t\t\twhile(sc.hasNext()){\r\n\t\t\t\t\tint next = Integer.parseInt(sc.next());\r\n\t\t\t\t\tsizes.add(next);\r\n\t\t\t\t\tif(next < last){\r\n\t\t\t\t\t\ty += (last - next);\r\n\t\t\t\t\t\tif(last - next > maxDifference){\r\n\t\t\t\t\t\t\tmaxDifference = last - next;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlast = next;\r\n\t\t\t\t}\r\n\t\t\t\tlong z = 0;\r\n\t\t\t\tfor(int i = 0; i < sizes.size() - 1; i++){\r\n\t\t\t\t\tif(sizes.get(i) < maxDifference){\r\n\t\t\t\t\t\tz += sizes.get(i);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tz += maxDifference;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\twriter.write(\"Case #\" + caseNum + \": \" + y + \" \" + z + \"\\n\");\r\n\t\t\t}\r\n\t\t\tbr.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\twriter.close();\r\n\t}\r\n}\r\n", "idx": "1093"}
{"func": "package googlejam1.p094;\nimport static java.lang.System.in;\nimport static java.lang.System.out;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class aMushroom {\n\tstatic final double EPS = 1e-10;\n\tstatic final double INF = 1 << 31;\n\tstatic final double PI = Math.PI;\n\n\tpublic static BufferedReader in;\n\tpublic static PrintWriter out;\n\n\tStringBuilder sb = new StringBuilder();\n\n\n\tpublic static void main(String[] args) throws IOException {\n\t\taMushroom r = new aMushroom();\n\t\taMushroom.in =new BufferedReader(new FileReader(\"in.txt\"));\n\t\taMushroom.out=new PrintWriter(new FileWriter(\"out.txt\"));\n\t\t\n\t\tScanner sc = new Scanner(aMushroom.in);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint T = sc.nextInt();\n\t\t\n\t\tfor (int t=1; t<=T; t++){\n\t\t\tint n = sc.nextInt();\n\t\t\tint [] m = new int[n];\n\t\t\tfor (int i=0; i<n; i++)\n\t\t\t\tm[i] = sc.nextInt();\n\t\t\tint sum1=0;\n\t\t\tint max = 0;\n\t\t\tfor (int i=1; i<n; i++)\n\t\t\t\tif (m[i]<m[i-1]) {\n\t\t\t\t\tsum1+=m[i-1] - m[i];\n\t\t\t\t\tmax = Math.max(max, m[i-1]- m[i]);\n\t\t\t\t}\n\t\t\tint sum2 = 0;\n\t\t\tfor (int i=0; i<n-1; i++)\n\t\t\t\tif (m[i]<max){\n\t\t\t\t\tsum2+=m[i];\n\t\t\t\t} else sum2+=max;\n\t\t\tsb.append(\"Case #\" + t + \": \");\n\t\t\tsb.append(sum1 + \" \" + sum2);\n\t\t\tsb.append(\"\\n\");\n\t\t}\n\t\taMushroom.out.print(sb);\n\t\tsc.close();\n\t\taMushroom.out.close();\n\t}\n}\n", "idx": "1094"}
{"func": "package googlejam1.p099;\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n\tScanner sc;\r\n\tPrintWriter pw;\r\n\tint N;\r\n\tint[] m;\r\n\t\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tString filePrefix = args.length>0?args[0]:\"A-large (1)\";\r\n\r\n\t\ttry {\r\n\t\t\tA r = new A();\n\t\t\tr.sc = new Scanner(new FileReader(filePrefix + \".in\"));\n\t\t\tr.pw = new PrintWriter(new FileWriter(filePrefix + \".out\"));\n\t\t\tint ntest = r.sc.nextInt();\n\t\t\tfor(int test=1; test<=ntest; test++) {\n\t\t\t\tScanner sc = r.sc;\n\t\t\t\tr.N = sc.nextInt();\n\t\t\t\tr.m = new int[r.N];\n\t\t\t\tfor(int i=0; i<r.N; i++)\n\t\t\t\t\tr.m[i] = sc.nextInt();\n\t\t\t\tr.pw.print(\"Case #\" + test + \": \");\n\t\t\t\tSystem.out.print(\"Case #\" + test + \": \");\n\t\t\t\tint ans1 = 0,ans2 = 0;\n\t\t\t\tint maxrate = 0;\n\t\t\t\tfor(int i=1; i<r.N; i++) {\n\t\t\t\t\tans1 += Math.max(r.m[i-1]-r.m[i], 0);\n\t\t\t\t\tmaxrate = Math.max(r.m[i-1]-r.m[i], maxrate);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int i=1; i<r.N; i++) {\n\t\t\t\t\tans2 += Math.min(r.m[i-1], maxrate);\n\t\t\t\t}\n\t\t\t\tObject s = ans1 + \" \" + ans2;\n\t\t\t\t\n\t\t\t\tr.pw.println(s);\n\t\t\t\tSystem.out.println(s);\n\t\t\t}\n\t\t\tSystem.out.println(\"Finished.\");\n\t\t\tr.sc.close();\n\t\t\tr.pw.close();\r\n\t\t} catch(Exception e) {\r\n\t\t\tSystem.err.println(e);\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "idx": "1099"}
{"func": "package googlejam1.p103;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\n\npublic class A {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        System.setIn(new FileInputStream(new File(\"A_large.in\")));\n        System.setOut(new PrintStream(new FileOutputStream(new File(\"A_large.out\"))));\n        Scanner in = new Scanner(System.in);\n\n        int T = in.nextInt();\n        for (int t = 1; t<=T;t++) {\n            int N = in.nextInt();\n            int[] m = new int[N];\n            for (int i = 0; i < N; i++ ) {\n                m[i] = in.nextInt();\n            }\n\n            int ans1 = 0;\n            int largestDecrease = 0;\n            for (int i = 0; i< N-1; i++ ) {\n                int dec =Math.max(0, m[i]-m[i+1]);\n                ans1 += dec;\n                largestDecrease = Math.max(largestDecrease, dec);\n            }\n\n            int ans2 = 0;\n            for (int i = 0; i < N-1; i++) {\n                ans2 += Math.min(m[i], largestDecrease);\n            }\n\n            System.out.printf(\"Case #%d: %d %d\", t, ans1, ans2);\n            System.out.println();\n\n        }\n    }\n}\n", "idx": "1103"}
{"func": "package googlejam1.p107;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\n\npublic class A {\n\n\tpublic static void main(String[] args) {\n\t\t\n\n\t\t// BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\tScanner s = new Scanner(System.in);\n\t\t\n\t\tint numCases = s.nextInt();\n\t\t\n\t\tfor(int numC = 0; numC < numCases; ++numC)\n\t\t{\n\t\t\tint n = s.nextInt();\n\t\t\t\n\t\t\tint[] numbers = new int[n];\n\t\t\t\n\t\t\tfor(int i = 0; i < n; ++i)\n\t\t\t{\n\t\t\t\tnumbers[i] = s.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tint firstMethod = 0;\n\t\t\tfor(int i = 1; i < n; ++i)\n\t\t\t{\n\t\t\t\tint diff = numbers[i-1] - numbers[i];\n\t\t\t\t\n\t\t\t\tif(diff > 0)\n\t\t\t\t{\n\t\t\t\t\tfirstMethod += diff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint curr = 0;\n\t\t\tint eaten = 0;\n\t\t\t\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tboolean valid = true;\n\t\t\t\teaten = 0;\n\t\t\t\tfor(int i = 1; i < n && valid; ++i)\n\t\t\t\t{\n\t\t\t\t\tint after = numbers[i-1] - curr;\n\t\t\t\t\t\n\t\t\t\t\teaten += curr;\n\t\t\t\t\tif(after < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\teaten += after;\n\t\t\t\t\t\tafter = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif(after > numbers[i])\n\t\t\t\t\t{\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t}\n\t\t\t\t\tint added = numbers[i] - after;\n\t\t\t\t}\n\t\t\t\tif(valid)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurr++;\n\t\t\t}\n\t\t\t\n\t\t\tint secondMethod = eaten;\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\");\n\t\t\tSystem.out.print(numC+1);\n\t\t\tSystem.out.print(\": \");\n\t\t\tSystem.out.print(firstMethod);\n\t\t\tSystem.out.print(' ');\n\t\t\tSystem.out.println(secondMethod);\n\t\t}\n\n\t}\n\n}\n", "idx": "1107"}
{"func": "package googlejam1.p109;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class R1A {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException, FileNotFoundException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t//Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"other/gcj2015/A-large.in\"))));\r\n\t\tPrintWriter ou = new PrintWriter(\"other/gcj2015/R1A.txt\");\r\n\t\t\r\n\t\tint res,rep,i,j,n,rate;\r\n\t\tlong ans1,ans2;\r\n\t\tint[] m = new int[10001];\r\n\t\t\r\n\t\t\r\n\t\tres = sc.nextInt();\r\n\t\tfor(rep=1;rep<=res;rep++){\r\n\t\t\t\r\n\t\t\tn = sc.nextInt();\r\n\t\t\tans1 = 0; rate = 0;\r\n\t\t\t\r\n\t\t\tfor(i=0;i<n;i++) {\r\n\t\t\t\tm[i] = sc.nextInt();\r\n\t\t\t\t\r\n\t\t\t\tif (i>0) {\r\n\t\t\t\t\tans1 += Math.max(0, m[i-1]-m[i]);\r\n\t\t\t\t\tif (m[i-1]-m[i]>rate) rate = m[i-1]-m[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tans2 = 0;\r\n\t\t\tfor(i=0;i<n-1;i++) {\r\n\t\t\t\tif (m[i]>=rate) ans2 += rate;\r\n\t\t\t\telse ans2 += m[i];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\",rep,ans1,ans2);\r\n\t\t\tou.printf(\"Case #%d: %d %d\\n\",rep,ans1,ans2);\r\n\t\t}\r\n\t\t\r\n\t\tou.close();\r\n\t}\r\n}\r\n", "idx": "1109"}
{"func": "package googlejam1.p110;\nimport java.io.*;\r\nimport java.util.*;\r\npublic class mushroom{\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tBufferedReader f= new BufferedReader(new FileReader(\"mushroom.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"mushroom.out\")));\r\n\t\tint nmnmnm = Integer.parseInt(f.readLine());\r\n\t\tfor(int nmnm=0; nmnm<nmnmnm; nmnm++){\r\n\t\t\tint n = Integer.parseInt(f.readLine());\r\n\t\t\tint[] a = new int[n];\r\n\t\t\tStringTokenizer st = new StringTokenizer(f.readLine());\r\n\t\t\ta[0] = Integer.parseInt(st.nextToken());\r\n\t\t\tint sum=0;\r\n\t\t\tint max =0;\r\n\t\t\tfor(int i=1; i<n; i++){\r\n\t\t\t\ta[i] = Integer.parseInt(st.nextToken());\r\n\t\t\t\tif(a[i]<a[i-1]){\r\n\t\t\t\t\tsum+=a[i-1]-a[i];\r\n\t\t\t\t}\r\n\t\t\t\tif(max<a[i-1]-a[i]){\r\n\t\t\t\t\tmax=a[i-1]-a[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.print(\"Case #\" + (nmnm+1) + \": \" + sum + \" \");\r\n\t\t\tsum=0;\r\n\t\t\tfor(int i=0; i<n-1; i++){\r\n\t\t\t\tif(a[i]<max){\r\n\t\t\t\t\tsum+=a[i];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tsum+=max;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.println(sum);\r\n\t\t}\r\n\t\tout.close();\r\n\t\tSystem.exit(0);\r\n\t}\r\n}", "idx": "1110"}
{"func": "package googlejam1.p112;\nimport java.io.*;\nimport java.util.Scanner;\n\n/**\n * Created by ankurgupta on 4/11/15.\n */\npublic class Problem1 {\n    \n    public static void main(String[] argv) throws IOException {\n        Scanner in = new Scanner(new FileReader(\"/Users/ankurgupta/Desktop/codeJam/A-large.in\"));\n        Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"/Users/ankurgupta/Desktop/codeJam/A-large.out\"), \"utf-8\"));\n        int T = in.nextInt();\n        int cases = 0;\n        while (T-- > 0) {\n            int N = in.nextInt();\n            int arr[] = new int[N];\n            for (int i = 0; i < N; i++) {\n                arr[i] = in.nextInt();\n            }\n            long ans1 = 0;\n            long maxDiff = Long.MIN_VALUE;\n            for (int i = 0; i < N - 1; i++) {\n                long temp = Math.max(0, arr[i] - arr[i + 1]);\n                ans1 += temp;\n                maxDiff = Math.max(maxDiff, temp);\n            }\n            long ans2 = 0;\n            long cur = 0;\n            for (int i = 0; i < N - 1; i++) {\n                cur = Math.max(0, arr[i] - maxDiff);\n                ans2 += Math.max(0, arr[i] - cur);\n            }\n            writer.write(\"Case #\" + ++cases + \": \" + ans1 + \" \" + ans2 + \"\\n\");\n        }\n        writer.close();\n    }\n\n}\n", "idx": "1112"}
{"func": "package googlejam1.p114;\nimport java.util.Scanner;\n\n/**\n * Created by poly on 4/18/15.\n */\npublic class MashroomMonster {\n    public static void main(String argv[]) {\n        Scanner scanner = new Scanner(System.in);\n        int T = scanner.nextInt();\n        for (int t = 0; t < T; t++) {\n            int n = scanner.nextInt();\n            int[] m = new int[n];\n            for (int i = 0; i < n; i++) {\n                m[i] = scanner.nextInt();\n            }\n            int res1 = 0;\n            int res2 = 0;\n            int maxd = 0;\n            for (int i = 0; i < n - 1; i++) {\n                int d = m[i] - m[i + 1];\n                if (d > 0) {\n                    res1 += d;\n                }\n                maxd = Math.max(maxd, d);\n            }\n            for (int i = 0; i < n - 1; i++) {\n                res2 += Math.min(m[i], maxd);\n            }\n            System.out.println(\"Case #\" + (t + 1) + \": \" + res1 + \" \" + res2);\n        }\n    }\n}\n", "idx": "1114"}
{"func": "package googlejam1.p115;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Scanner;\n\npublic class A {\n\n    private static final String INPUT = \"A-large.in\";\n    private static final String OUTPUT = \"A-large.out\";\n\n    public static void main(String[] args) {\n        try {\n            Scanner sc = new Scanner(Paths.get(INPUT));\n            StringBuilder sb = new StringBuilder();\n            int cases = sc.nextInt();\n            for (int c = 1; c < cases + 1; c++) {\n                int n = sc.nextInt();\n                int[] m = new int[n];\n                for (int i = 0; i < n; i++) {\n                    m[i] = sc.nextInt();\n                }\n\n                long answer1 = 0;\n                long answer2 = 0;\n                long speed = 0;\n\n                for (int i = 1; i < n; i++) {\n                    if (m[i] < m[i - 1]) {\n                        answer1 += m[i - 1] - m[i];\n                        speed = Math.max(speed, m[i - 1] - m[i]);\n                    }\n                }\n\n                for (int i = 1; i < n; i++) {\n                    answer2 += Math.min(m[i - 1], speed);\n                }\n\n                String line = \"Case #\" + c + \": \" + answer1 + \" \" + answer2;\n                System.out.println(line);\n                sb.append(line).append('\\n');\n            }\n            Files.write(Paths.get(OUTPUT), sb.toString().getBytes());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": "1115"}
{"func": "package googlejam1.p120;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class codeJamA\r\n{\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t//pancakes\r\n\t\tFile f = new File(\"test.txt\");\r\n\t\tScanner in = new Scanner(f);\r\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"testout.txt\"));\r\n\t\tint numCases = in.nextInt();\r\n\t\tin.nextLine();\r\n\r\n\t\t//problem specific\r\n\t\tint times;\r\n\t\t\r\n\t\tfor(int i = 0; i < numCases; i++){\r\n\t\t\ttimes = in.nextInt();\r\n\t\t\t//in.nextLine();\r\n\t\t\tint[] checks = new int[ times ];\r\n\t\t\tfor(int j = 0; j < times; j++ ){\t//for each interval\r\n\t\t\t\tchecks[j] = in.nextInt();\r\n\t\t\t}\r\n\t\t\t//now find first method result: is total of positive consecutive differences\r\n\t\t\tlong first = 0, second = 0;\r\n\t\t\tlong secondMax = 0;\r\n\t\t\tlong dif;\r\n\t\t\tfor(int j = 1; j < times; j++ ){ //compare each neighboring pair\r\n\t\t\t\tdif = checks[j - 1] - checks[j];\r\n\t\t\t\tif (dif > 0 ){ //ate some\r\n\t\t\t\t\tfirst += dif;\r\n\t\t\t\t\tsecondMax = Math.max(secondMax, dif); //take the maximum she could have ate. \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//second *= times; // per round\r\n\t\t\t//calculation for the second one. \r\n\t\t\tfor(int j = 0; j < times - 1; j++ ){ //for each time period\r\n\t\t\t\tsecond += Math.min( secondMax, checks[j] );\r\n\t\t\t}\r\n\t\t\tout.format(\"Case #%d: %s\\n\", i + 1, first + \" \" + second);\t\t\t\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "1120"}
{"func": "package googlejam1.p121;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Vector;\r\n\r\npublic class ProblemA {\r\n\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"LargeProblemA.out\"));\r\n\t\tint numTestCases = Integer.parseInt(br.readLine());\r\n\t\tfor (int i = 1; i <= numTestCases; i++){\r\n\t\t\tint arrsize = Integer.parseInt(br.readLine());\r\n\t\t\tString line = br.readLine();\r\n\t\t\tString[] list = line.split(\" \");\r\n\t\t\tInteger[] result = new Integer[list.length];\r\n\t\t\tint minEaten = 0;\r\n\t\t\tint minRate = 0;\r\n\t\t\tfor (int iii = 0; iii < arrsize; iii++) {\r\n\t\t\t\tresult[iii] = Integer.parseInt(list[iii]);\r\n\t\t\t\tif (iii > 0) {\r\n\t\t\t\t\tint rate = Math.max(0, result[iii-1] - result[iii]);\r\n\t\t\t\t\tminEaten += rate;\r\n\t\t\t\t\tminRate = Math.max(minRate, rate);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint totalEaten = 0;\r\n\t\t\tfor(int jjj = 0; jjj < arrsize-1; jjj++) {\r\n\t\t\t\ttotalEaten += Math.min(minRate, result[jjj]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tbw.write(\"Case #\" + i + \": \" + minEaten + \" \" + totalEaten + \"\\n\");\r\n\t\t}\r\n\t\tbr.close();\r\n\t\tbw.close();\r\n\t}\r\n}\r\n", "idx": "1121"}
{"func": "package googlejam1.p122;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class A {\n//\tstatic String file = \"A\";\n\tstatic String file = \"A-large\";\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tFileInputStream fis = new FileInputStream(file + \".in\");\n\t\tInputStreamReader isr = new InputStreamReader(fis);\n\t\tBufferedReader br = new BufferedReader(isr);\n\n\t\tFileOutputStream fos = new FileOutputStream(file + \".out\");\n\t\tOutputStreamWriter isw = new OutputStreamWriter(fos);\n\t\tBufferedWriter bw = new BufferedWriter(isw);\n\n\t\tString line = null;\n\t\tList<String> lines = new ArrayList<String>();\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\tlines.add(line);\n\t\t}\n\n\t\tint problemCount = Integer.parseInt(lines.get(0));\n\t\tint currentIndex = 1;\n\t\tfor (int i = 0; i < problemCount; i++) {\n\t\t\tString line1 = lines.get(currentIndex++);\n\t\t\tString line2 = lines.get(currentIndex++);\n\t\t\tString[] vals = line2.split(\" \");\n\t\t\tint[] ans = new int[vals.length];\n\t\t\tfor (int i4 = 0; i4 < vals.length; i4++) {\n\t\t\t\tans[i4] = Integer.valueOf(vals[i4]);\n\t\t\t}\n\t\t\tint[] mush = ans;\n\t\t\tlong[] min1 = new long[2];\n\t\t\t//\t\tSystem.out.println(Arrays.toString(mush));\n\t\t\t\t\t\n\t\t\t\t\tfor (int i2 = 0; i2 < mush.length - 1; i2++) {\n\t\t\t\t\t\tif (mush[i2+1] < mush[i2]) {\n\t\t\t\t\t\t\tmin1[0] += mush[i2] - mush[i2+1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tint rate = 0;\n\t\t\t\t\tfor (int i3 = 0; i3 < mush.length - 1; i3++) {\n\t\t\t\t\t\tif (mush[i3+1] < mush[i3]) {\n\t\t\t\t\t\t\trate = Math.max(rate, mush[i3] - mush[i3+1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (int i1 = 0; i1 < mush.length - 1; i1++) {\n\t\t\t\t\t\tmin1[1] += Math.min(mush[i1], rate);\n\t\t\t\t\t}\n\t\t\tlong[] min = min1;\n\t\t\tString r = \"Case #\" + (i + 1) + \": \" + min[0] + \" \" + min[1];\n\n//\t\t\tSystem.out.println(r);\n\t\t\tbw.write(r);\n\t\t\tbw.newLine();\n\t\t}\n\n\t\tif (bw != null)\n\t\t\tbw.close();\n\n\t\tif (br != null)\n\t\t\tbr.close();\n\t}\n}\n", "idx": "1122"}
{"func": "package googlejam1.p123;\nimport java.io.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class MushroomMonster {\n\tstatic int c;\n\n\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"in.in\"));\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"out.out\"));\n\t\tint t = Integer.parseInt(br.readLine());\n\t\tfor(c = 1; c <= t; c++){\n\t\t\tlong len = Integer.parseInt(br.readLine());\n\t\t\t// System.out.println(\"len\" + len);\n\t\t\tString line = br.readLine();\n\t\t\tString[] fields = line.split(\" \");\n\t\t\tlong prev = Integer.parseInt(fields[0]);\n\t\t\tlong meth1 = 0;\n\t\t\tlong meth2 = 0;\n\t\t\tlong rate = 0;\n\t\t\tfor(int i = 1; i < len; i++){\n\t\t\t\tlong curr = Integer.parseInt(fields[i]);\n\t\t\t\tif(prev > curr){\n\t\t\t\t\tmeth1 += (prev - curr);\n\t\t\t\t}\n\t\t\t\tif(prev - rate > curr){\n\t\t\t\t\trate = prev - curr;\n\t\t\t\t}\n\t\t\t\t// System.out.println(rate);\n\t\t\t\tprev = curr;\n\t\t\t}\n\t\t\tmeth2 = rate * (len - 1);\n\t\t\tfor(int i = 0; i < len - 1; i++){\n\t\t\t\tint num = Integer.parseInt(fields[i]);\n\t\t\t\tif(num - rate < 0){\n\t\t\t\t\tmeth2 += num - rate;\n\t\t\t\t}\n\t\t\t\t// System.out.println(num - rate);\n\t\t\t}\n\t\t\tbw.write(\"Case #\" + c + \": \" + meth1 + \" \" + meth2 + \"\\n\");\n\t\t}\n\t\tbr.close();\n\t\tbw.close();\n\t}\n\n\n}", "idx": "1123"}
{"func": "package googlejam1.p124;\n\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class ExoA {\n\tpublic static void main(final String[] args) {\n\n\t\tfinal String base = \"/home/jean/gcj2015/1a/ExoA/\";\n\t\tfinal String input = base + \"b1.in\";\n\t\tfinal String output = base + \"b1.out\";\n\n\t\ttry {\n\t\t\tfinal Scanner sc = new Scanner(new FileReader(input));\n\t\t\tfinal PrintWriter pw = new PrintWriter(output);\n\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tsc.nextLine();\n\t\t\tfor (int c = 0; c < n; c++) {\n\t\t\t\tSystem.out.println(\"Test case \" + (c + 1) + \"...\");\n\t\t\t\tpw.print(\"Case #\" + (c + 1) + \": \");\n\t\t\t\tfinal int N = sc.nextInt();\n\t\t\t\tint ns[] = new int[N];\n\t\t\t\tint t = 0;\n\t\t\t\tint m = 0;\n\t\t\t\tint t2 = 0;\n\t\t\t\tfor (int i = 0; i < ns.length; i++) {\n\t\t\t\t\tns[i] = sc.nextInt();\n\t\t\t\t\tif (i > 0 && ns[i - 1] > ns[i]) {\n\t\t\t\t\t\tt -= ns[i] - ns[i - 1];\n\t\t\t\t\t}\n\t\t\t\t\tif (i > 0 && ns[i - 1] - ns[i] > m) {\n\t\t\t\t\t\tm = ns[i - 1] - ns[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int i = 1; i < ns.length; i++) {\n\t\t\t\t\tif (ns[i] == 0) {\n\t\t\t\t\t\tt2 += ns[i - 1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tt2 += Math.min(ns[i - 1], m);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpw.print(t);\n\t\t\t\tpw.print(\" \");\n\t\t\t\tpw.print(t2);\n\t\t\t\tpw.println();\n\t\t\t}\n\t\t\tpw.println();\n\t\t\tpw.flush();\n\t\t\tpw.close();\n\t\t\tsc.close();\n\t\t} catch (final FileNotFoundException ex) {\n\t\t\tLogger.getLogger(ExoA.class.getName()).log(Level.SEVERE, null, ex);\n\t\t}\n\n\t}\n}\n", "idx": "1124"}
{"func": "package googlejam1.p126;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class MushroomMonster {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner scanner = null;\r\n\t\ttry {\r\n\t\t\tscanner = new Scanner(new File(\"input.txt\"));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\tSystem.out.println(\"Couldn't open input file.\\n\" + e.getMessage());\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tFileWriter writer = null;\r\n\t\ttry {\r\n\t\t\twriter = new FileWriter(new File(\"output.txt\"));\r\n\t\t} catch (IOException e) {\r\n\t\t\tSystem.out.println(\"Couldn't open/make output file.\"\r\n\t\t\t\t\t+ e.getMessage());\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\tint numTrials = scanner.nextInt();\r\n\t\tfor (int trial = 1; trial <= numTrials; trial++) {\r\n\t\t\ttry {\r\n\t\t\t\twriter.write(\"Case #\" + trial + \": \");\r\n\t\t\t\tint N = scanner.nextInt();\n\t\t\t\t\n\t\t\t\tint previous = scanner.nextInt();\n\t\t\t\tint sum = 0;\n\t\t\t\tint max = 0;\n\t\t\t\tint[] values = new int[N];\n\t\t\t\tvalues[0] = previous;\n\t\t\t\tfor (int i = 1; i < N; i++) {\n\t\t\t\t\tint current = scanner.nextInt();\n\t\t\t\t\tvalues[i] = current;\n\t\t\t\t\tint difference = previous - current;\n\t\t\t\t\tif (difference > 0) {\n\t\t\t\t\t\tmax = Math.max(difference, max);\n\t\t\t\t\t\tsum += difference;\n\t\t\t\t\t}\n\t\t\t\t\tprevious = current;\n\t\t\t\t}\n\t\t\t\tint sum2 = 0;\n\t\t\t\tfor (int i = 0; i < N-1; i++) {\n\t\t\t\t\tif (values[i] >= max)\n\t\t\t\t\t\tsum2 += max;\n\t\t\t\t\telse\n\t\t\t\t\t\tsum2 += values[i];\n\t\t\t\t}\n\t\t\t\twriter.write(sum + \" \" + sum2);\r\n\t\t\t\twriter.write(\"\\n\");\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tSystem.out.println(\"Error on trial #\" + trial + \"\\n\"\r\n\t\t\t\t\t\t+ e.getMessage());\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\ttry {\r\n\t\t\twriter.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tscanner.close();\r\n\t\tSystem.out.println(\"Completed Trials!\");\r\n\t}\r\n}\r\n", "idx": "1126"}
{"func": "package googlejam1.p127;\n\r\n\r\nimport static java.lang.Integer.parseInt;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Mushroom {\r\n\r\n\tprivate static final boolean USE_SMALL = true;\r\n\tprivate static final String INPUT_FILE;\r\n\tprivate static final String OUTPUT_FILE;\r\n\tstatic {\r\n\t\tString problem = \"mushroom\";\r\n\t\tif (USE_SMALL) {\r\n\t\t\tINPUT_FILE = problem + \"/A-small.in\";\r\n\t\t\tOUTPUT_FILE = problem + \"/small.out\";\r\n\t\t} else {\r\n\t\t\tINPUT_FILE = problem + \"/A-large.in\";\r\n\t\t\tOUTPUT_FILE = problem + \"/large.out\";\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(INPUT_FILE)));\r\n\t\tPrintWriter out = new PrintWriter(new FileOutputStream(OUTPUT_FILE));\r\n\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor (int CASE = 1; CASE <= T; CASE++) {\r\n\t\t\tStringTokenizer st = new StringTokenizer(in.readLine());\r\n\t\t\tint N = parseInt(st.nextToken());\r\n\t\t\tint[] array = new int[N];\r\n\t\t\tst = new StringTokenizer(in.readLine());\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tarray[i] = parseInt(st.nextToken());\r\n\t\t\t}\r\n\t\t\tint total1 = 0;\r\n\t\t\tfor (int i = 0; i < array.length - 1; i++) {\r\n\t\t\t\tif (array[i] - array[i + 1] > 0) {\r\n\t\t\t\t\ttotal1 += array[i] - array[i + 1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint max = 0;\r\n\t\t\tfor (int i = 0; i < array.length - 1; i++) {\r\n\t\t\t\tif (array[i] - array[i + 1] > max) {\r\n\t\t\t\t\tmax = array[i] - array[i + 1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint total2 = 0;\r\n\t\t\tfor (int i = 0; i < array.length - 1; i++) {\r\n\t\t\t\tif (array[i] > max) {\r\n\t\t\t\t\ttotal2 += max;\r\n\t\t\t\t} else\r\n\t\t\t\t\ttotal2 += array[i];\r\n\t\t\t}\r\n\r\n\t\t\tout.println(\"Case #\" + CASE + \": \" + total1 + \" \" + total2);\r\n\t\t\tout.flush();\r\n\t\t}\r\n\t\tout.close();\r\n\t\tin.close();\r\n\t}\r\n}", "idx": "1127"}
{"func": "package googlejam1.p032;\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner sc = new Scanner(new File(\"A.txt\"));\r\n\t\tPrintWriter out = new PrintWriter(new File(\"A.out\"));\r\n\t\tint cases = sc.nextInt();\r\n\t\tfor(int t=1;t<=cases;t++){\r\n\t\t\tlong ans1 = 0;\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tlong[] array = new long[N];\r\n\t\t\tfor(int a=0;a<N;a++)array[a]=sc.nextLong();\r\n\t\t\tlong largest = 0;\r\n\t\t\tlong increase = 0;\r\n\t\t\tfor(int a=1;a<N;a++){\r\n\t\t\t\tif(array[a-1]>array[a]){\r\n\t\t\t\t\tans1+=array[a-1]-array[a];\r\n\t\t\t\t\tlargest = Math.max(largest,array[a-1]-array[a]);\r\n\t\t\t\t\tincrease = Math.max(increase,array[a-1]-array[a]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlong ans2 = 0;\r\n\t\t\tlong cur = array[0];\r\n\t\t\tfor(int a=1;a<N;a++){\r\n\t\t\t\tans2 += Math.min(cur,increase);\r\n\t\t\t\tcur -= Math.min(cur,increase);\r\n\t\t\t\tcur = array[a];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tString answer = String.format(\"Case #%d: %d %d\", t,ans1,ans2);\r\n\t\t\tSystem.out.println(answer);\r\n\t\t\tout.println(answer);\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1032"}
{"func": "package googlejam1.p062;\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint T = sc.nextInt();\r\n\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\tint[] N = new int[sc.nextInt()];\r\n\t\t\tfor (int j = 0; j < N.length; j++) {\r\n\t\t\t\tN[j] = sc.nextInt();\r\n\t\t\t}\r\n\t\t\tint count = 0, max = 0, sum = 0;\r\n\t\t\tfor (int j = 1; j < N.length; j++) {\r\n\t\t\t\tcount += Math.max(0, N[j - 1] - N[j]);\r\n\t\t\t\tmax = Math.max(max, N[j - 1] - N[j]);\r\n\t\t\t}\r\n\t\t\tfor (int j = 0; j < N.length - 1; j++) {\r\n\t\t\t\tsum += Math.min(max, N[j]);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + i + \": \" + count + \" \" + sum);\r\n\t\t}\r\n\t\tsc.close();\r\n\t}\r\n}", "idx": "1062"}
{"func": "package googlejam1.p101;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n\r\n    static final String TYPE = \"A\";\r\n    static String inputFile;\r\n    static String outputFile;\r\n    static String keyFile;\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n\r\n        String root = \"data/CJ2015/r1A\";\r\n\r\n        // Test\r\n        inputFile = \"A-large\" + \".in\";\n\t\toutputFile = \"A-large\" + \".out\";\n\t\tkeyFile = \"A-large\" + \".key\";\r\n\r\n        Scanner in = new Scanner(new File(root, inputFile));\r\n        PrintWriter out = new PrintWriter(new File(root, outputFile));\r\n\r\n        int T = in.nextInt();\r\n\r\n        for (int i = 0; i < T; i++) {\r\n            int N = in.nextInt();\r\n            int[] m = new int[N];\r\n            for (int j = 0; j < N; j++) {\r\n                m[j] = in.nextInt();\r\n            }\r\n\r\n            int res1 = 0;\r\n            int rate = 0;\r\n            for (int j = 1; j < N; j++) {\r\n                if (m[j] < m[j - 1]) {\r\n                    int sub = m[j - 1] - m[j];\r\n                    res1 += sub;\r\n                    if (sub > rate) {\r\n                        rate = sub;\r\n                    }\r\n                }\r\n            }\r\n\r\n            int res2 = 0;\r\n            System.out.println(i + 1 + \": \" + rate);\r\n            int sum = 0;\r\n            for (int j = 0; j < N - 1; j++) {\r\n                // sum += m[j];\r\n                // if (sum >= rate) {\r\n                // sum = sum - rate;\r\n                // res2 += rate;\r\n                // } else {\r\n                // res2 += sum;\r\n                // sum = 0;\r\n                // }\r\n                if (m[j] > rate) {\r\n                    res2 += rate;\r\n                } else {\r\n                    res2 += m[j];\r\n                }\r\n            }\r\n            out.println(\"Case #\" + (i + 1) + \": \" + res1 + \" \" + res2);\r\n\r\n        }\r\n\r\n        in.close();\r\n        out.close();\r\n\r\n        // check(root);\r\n\r\n    }\r\n\r\n}", "idx": "1101"}
{"func": "package googlejam1.p128;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n\npublic class A {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\n//\t\tBufferedReader in = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n//\t\tBufferedReader in = new BufferedReader(new FileReader(\"a_test.in\"));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint T = Integer.parseInt(in.readLine());\n\t\tfor (int t = 1; t <= T; t++) {\n\t\t\tint n = Integer.parseInt(in.readLine());\n\t\t\tint arr[] = new int[n];\n\t\t\tint  i = 0;\n\t\t\tfor (String s : in.readLine().split(\" \")) {\n\t\t\t\tarr[i++] = Integer.parseInt(s);\n\t\t\t}\n\t\t\t\n\t\t\tint maxDiff = 0;\n\t\t\tfor (i = 1; i < n; i++) {\n\t\t\t\tmaxDiff = Math.max(maxDiff, arr[i - 1] - arr[i]);\n\t\t\t}\n\t\t\t\n\t\t\tlong first = 0;\n\t\t\tlong second = 0;\n\t\t\t\n\t\t\tfor (i = 1; i < n; i++) {\n\t\t\t\tfirst += Math.max(0, arr[i - 1] - arr[i]);\n\t\t\t}\n\t\t\tfor (i = 0; i < n - 1; i++) {\n\t\t\t\t\n\t\t\t\tsecond += Math.min(maxDiff, arr[i]);\n\t\t\t}\n\t\t\t\n\t\t\tpw.format(\"Case #%d: %d %d\\n\", t, first, second);\n\t\t\tpw.flush();\n\t\t}\n\t\tpw.close();\n\t\tin.close();\n\t}\n\n}\n", "idx": "1128"}
{"func": "package googlejam1.p158;\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n    public static void main(String[] args) throws Exception {\r\n        Scanner sc = new Scanner(System.in);\r\n        int T, t, N, i, cur, maxdif, s1, s2, r10;\r\n        double rate;\r\n        int m[];\r\n        T = sc.nextInt();\r\n        for (t = 1; t <= T; t++) {\r\n            N = sc.nextInt();\r\n            m = new int[N];\r\n            cur = 0;\r\n            maxdif = 0;\r\n            s1 = 0;\r\n            s2 = 0;\r\n            for(i = 0; i < N; i++) {\r\n                m[i] = sc.nextInt();\r\n                maxdif = Math.max(cur - m[i], maxdif);\r\n                s1 += Math.max(cur - m[i], 0);\r\n                cur = m[i];\r\n            }\r\n            rate = (double)maxdif / 10;\r\n            \r\n            r10 = (int)(rate*10);\r\n            cur = 0;\r\n            for(i = 0; i < N; i++) {\r\n                s2 += Math.min(r10,cur);\r\n                cur = m[i];\r\n            }\r\n                        \r\n            System.out.println(\"Case #\" + t + \": \" + s1 + \" \" + s2);\r\n        }\r\n        sc.close();\r\n    }\r\n}\r\n", "idx": "1158"}
{"func": "package googlejam1.p187;\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    InputStreamReader isr = new InputStreamReader(System.in);\n    BufferedReader br = new BufferedReader(isr);\n    int T = Integer.parseInt(br.readLine());\n    for (int t = 1; t <= T; t++) {\n      int n = Integer.parseInt(br.readLine());\n      StringTokenizer st = new StringTokenizer(br.readLine());\n      int[] m = new int[n];\n      for (int i = 0; i < n; i++) {\n        m[i] = Integer.parseInt(st.nextToken());\n      }\n      long y = 0, z = 0, max = 0;\n      for (int i = 0; i < n - 1; i++) {\n        if (m[i] > m[i + 1]) {\n          int d = m[i] - m[i + 1];\n          y += d;\n          if (d > max) {\n            max = d;\n          }\n        }\n      }\n      for (int i = 0; i < n - 1; i++) {\n        z += Math.min(m[i], max);\n      }\n      System.out.println(String.format(\"Case #%d: %d %d\", t, y, z));\n    }\n  }\n}", "idx": "1187"}
{"func": "package googlejam1.p212;\nimport java.util.*;\r\n\r\npublic class A\r\n{\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint test = 1, cases = Integer.parseInt(sc.nextLine());\r\n\r\n\t\tArrayList<Integer> mushrooms = new ArrayList<Integer>();\r\n\r\n\t\tint times;\r\n\t\tint last;\r\n\t\tint curr;\r\n\r\n\t\tint minEaten, minRate, rateEaten;\r\n\r\n\t\tint i;\r\n\r\n\t\twhile(test <= cases)\r\n\t\t{\r\n\t\t\tmushrooms.clear();\r\n\r\n\t\t\ttimes = sc.nextInt();\r\n\r\n\t\t\tlast = sc.nextInt();\r\n\t\t\tmushrooms.add(last);\r\n\r\n\t\t\tminEaten = 0;\r\n\t\t\tminRate = 0;\r\n\r\n\t\t\tfor(i = 1; i < times; i++)\r\n\t\t\t{\r\n\t\t\t\tcurr = sc.nextInt();\r\n\t\t\t\tmushrooms.add(curr);\r\n\r\n\t\t\t\tif(curr < last)\r\n\t\t\t\t{\r\n\t\t\t\t\tminEaten += last - curr;\r\n\t\t\t\t\tminRate = Math.max(last - curr, minRate);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlast = curr;\r\n\t\t\t}\r\n\r\n\t\t\trateEaten = 0;\r\n\r\n\t\t\tfor(i = 0; i < mushrooms.size() - 1; i++)\r\n\t\t\t{\r\n\t\t\t\tcurr = mushrooms.get(i);\r\n\r\n\t\t\t\tif(minRate > curr)\r\n\t\t\t\t\trateEaten += curr;\r\n\t\t\t\telse rateEaten += minRate;\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.println(\"Case #\" + test + \": \" + minEaten + \" \" + rateEaten);\r\n\r\n\t\t\ttest++;\r\n\t\t}\r\n\t}\r\n}", "idx": "1212"}
{"func": "package googlejam1.p240;\nimport java.io.File;\r\nimport java.io.PrintStream;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * @author Alexander Gulko\r\n */\r\npublic class A {\r\n    @SuppressWarnings(\"FieldCanBeLocal\")\r\n    private static int caseNumber;\r\n    private static Scanner scan;\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        Locale.setDefault(Locale.US);\r\n\r\n        String file = \"a\";\r\n\r\n        System.setOut(new PrintStream(file + \".out\"));\r\n\r\n        String inFile = file + \".in\";\r\n        scan = new Scanner(new File(inFile));\r\n\r\n        int cases = scan.nextInt();\r\n        for (caseNumber = 1; caseNumber <= cases; ++caseNumber) {\r\n            System.out.printf(\"Case #%s: \", caseNumber);\n\t\t\tA r = new A();\r\n            int n = A.scan.nextInt();\n\t\t\tint[] m = new int[n];\n\t\t\tfor (int i = 0; i < n; ++i) {\n\t\t\t    m[i] = A.scan.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tint res1 = 0;\n\t\t\tfor (int i = 1; i < n; ++i) {\n\t\t\t    res1 += Math.max(m[i - 1] - m[i], 0);\n\t\t\t}\n\t\t\t\n\t\t\tint res2 = 0;\n\t\t\tint max = 0;\n\t\t\tfor (int i = 1; i < n; ++i) {\n\t\t\t    int diff = Math.max(m[i - 1] - m[i], 0);\n\t\t\t    max = Math.max(max, diff);\n\t\t\t}\n\t\t\tfor (int i = 0; i < n - 1; ++i) {\n\t\t\t    res2 += Math.min(m[i], max);\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.printf(\"%d %d\\n\", res1, res2);\r\n            System.out.flush();\r\n        }\r\n\r\n        scan.close();\r\n    }\r\n}\r\n", "idx": "1240"}
{"func": "package googlejam1.p266;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class MushroomMonster {\r\n\r\n\tScanner in;\tpublic static void main(String[] args){\r\n\t\tMushroomMonster myClass = new MushroomMonster();\r\n\t\ttry {\t\t\tmyClass.in =  new Scanner(new BufferedReader(new FileReader(\"A-large.in\")));\n\t\t\t\tmyClass.writer = new FileWriter(\"the-file-name.txt\");\n\t\t\t\tint T = myClass.in.nextInt();\n\t\t\t\t\tfor(int i = 1; i <= T; i++){\n\t\t\t\t\tint N = myClass.in.nextInt();\n\t\t\t\t\t\n\t\t\t\t\tlong[] allMs = new long[N];\n\t\t\t\t\tlong maxRate = 0;\n\t\t\t\t\tlong diffTotal = 0;\n\t\t\t\t\tlong diff = 0;\n\t\t\t\t\tallMs[0] = myClass.in.nextInt();\n\t\t\t\t\tfor(int j = 1; j < N; j++){\n\t\t\t\t\t\tallMs[j] = myClass.in.nextInt();\n\t\t\t\t\t\tdiff = allMs[j-1] - allMs[j];\n\t\tif(diff > maxRate){\n\t\t\tmaxRate = diff;\n\t\t}\n\t\tif(diff > 0){\n\t\t\tdiffTotal += diff;\n\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlong method2 = 0;\n\t\t\t\t\tfor(int j = 1; j<allMs.length; j++){\n\t\t\t\t\t\tdiff = allMs[j-1] - allMs[j];\n\t\t\t\t\t\tif(allMs[j-1] < maxRate){\n\t\t\t\t\t\t\tmethod2 += allMs[j-1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tmethod2 += maxRate;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tStringBuilder s = new StringBuilder();\n\t\t\t\t\ts.append(\"Case #\");\n\t\t\t\t\ts.append(i);\n\t\t\t\t\ts.append(\": \");\n\t\ts.append(diffTotal);\n\t\ts.append(\" \");\n\t\ts.append(method2);\n\t\t\t\t\t\n\t\t\t\t\ts.append(\"\\n\");\n\t\t\t\t\t\n\t\t\tmyClass.writer.write(s.toString());\n\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\tmyClass.writer.close();\t\t\t\n\t\t\t\t}\n\t\t\t\t\tcatch (IOException e) {\n\t\t\t\t\t}\r\n\t}\r\n\tFileWriter writer;\r\n\t\r\n\t\r\n}\r\n", "idx": "1266"}
{"func": "package googlejam1.p288;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.StringTokenizer;\n\npublic class MushroomMonster {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"/home/e/Downloads/A-large.in\"));\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"/home/e/Documents/MushroomMonster.out\"));\n\t\tint times = Integer.parseInt(br.readLine());\n\t\tfor(int t = 1; t <= times; t++) {\n\t\t\tint[] mushrooms = new int[Integer.parseInt(br.readLine())];\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tfor(int i = 0;  i < mushrooms.length; i++) {\n\t\t\t\tmushrooms[i] = Integer.parseInt(st.nextToken());\n\t\t\t}\n\t\t\tint firstComputation = 0;\n\t\t\tfor(int i = 0; i < mushrooms.length-1; i++) {\n\t\t\t\tif(mushrooms[i+1] < mushrooms[i]) {\n\t\t\t\t\tfirstComputation += mushrooms[i] - mushrooms[i+1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tint secondComputation = 0;\n\t\t\tint largestGap = 0;\n\t\t\tfor(int i = 0; i < mushrooms.length-1; i++) {\n\t\t\t\tif(mushrooms[i] - mushrooms[i+1] > largestGap) {\n\t\t\t\t\tlargestGap = mushrooms[i]-mushrooms[i+1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0; i < mushrooms.length-1; i++) {\n\t\t\t\tif(mushrooms[i] > largestGap) {\n\t\t\t\t\tsecondComputation += largestGap;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsecondComputation += mushrooms[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tbw.write(\"Case #\" + t + \": \" + firstComputation + \" \" + secondComputation + \"\\n\");\n\t\t}\n\t\tbr.close();\n\t\tbw.close();\n\t}\n}\n", "idx": "1288"}
{"func": "package googlejam1.p321;\nimport java.util.Scanner;\n\npublic class a {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint T = in.nextInt();\n\t\tfor (int t = 1; t <= T; t++) {\n\t\t\t// TODO\n\n\t\t\tint m1 = 0;\n\t\t\tint m2 = 0;\n\t\t\tint max = 0;\n\t\t\t\n\t\t\tint n = in.nextInt();\n\t\t\tint[] interv = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tinterv[i] = in.nextInt();\n\t\t\t\t\n\t\t\t\tif (i > 0 && interv[i] < interv[i-1]) {\n\t\t\t\t\tint diff = (interv[i-1] - interv[i]);\n\t\t\t\t\tm1 += diff;\n\t\t\t\t\tmax = Math.max(max, diff);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i = 0; i < n-1; i++) {\n\t\t\t\tif (interv[i] < max) m2 += interv[i];\n\t\t\t\telse m2 += max;\n\t\t\t}\n\t\t\t\n\t\t\t \n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", t, m1, m2);\n\t\t}\n\t}\n}\n", "idx": "1321"}
{"func": "package googlejam1.p352;\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class Mushrooms {\r\n\tstatic PrintWriter writer;\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\twriter = new PrintWriter(\"out.txt\", \"UTF-8\");\r\n\t\tScanner sc = new Scanner(new File(\"in.txt\"));\r\n\t\tint T = sc.nextInt();\r\n\t\tfor (int t = 0; t < T; t++) {\r\n\t\t\t// -------------------------------------------------------------------------------------\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tint[] m = new int[N];\r\n\t\t\tfor (int n = 0; n < N; n++) {\r\n\t\t\t\tm[n] = sc.nextInt();\r\n\t\t\t}\r\n\r\n\t\t\t// method 1\r\n\t\t\tint max = Integer.MIN_VALUE;\r\n\t\t\tint method1 = 0;\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tif (m[i] > max) {\r\n\t\t\t\t\tmax = m[i];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmethod1 += max - m[i];\r\n\t\t\t\t\tmax = m[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmax = Integer.MIN_VALUE;\r\n\t\t\tfor (int i = 0; i < N - 1; i++) {\r\n\t\t\t\tint diff = m[i] - m[i + 1];\r\n\t\t\t\tif (diff > max)\r\n\t\t\t\t\tmax = diff;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint rate10 = max;\r\n\t\t\tint mushrooms =0;\r\n\t\t\tint cnt = 0;\r\n\t\t\t//System.out.println(rate10);\r\n\t\t\tfor (int i = 0; i < N-1 ; i++) {\r\n\t\t\t\t//System.out.println(\"$\"+mushrooms);\r\n\t\t\t\tmushrooms = m[i];\r\n\r\n\t\t\t\tif (rate10 >= mushrooms) {\r\n\t\t\t\t\tcnt += mushrooms;\r\n\t\t\t\t\tmushrooms = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcnt += rate10;\r\n\t\t\t\t\tmushrooms -= rate10;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\t//System.out.println(mushrooms);\r\n\t\t\tString s = \"Case #\" + (t + 1) + \": \" + method1+\" \"+cnt;\n\t\t\tSystem.out.println(s);\n\t\t\twriter.println(s);\r\n\t\t\t// -------------------------------------------------------------------------------------\r\n\t\t}\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1352"}
{"func": "package googlejam1.p372;\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemA {\t\r\n\r\n\tprivate static BufferedWriter writer;\r\n\tprivate static Scanner scanner;\r\n\t\r\n\tprivate static int n;\r\n\tprivate static int[] m;\r\n\r\n\tprivate static int a;\r\n\tprivate static int b;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tPath input = Paths.get(\"input.txt\");\r\n\t\tPath output = Paths.get(\"output.txt\");\r\n\t\tscanner = new Scanner(input);\r\n\t\twriter = Files.newBufferedWriter(output);\r\n\t\tint testCases = scanner.nextInt();\r\n\t\tfor (int i = 0; i < testCases; i++) {\r\n\t\t\tn = scanner.nextInt();\n\t\t\tm = new int[n];\n\t\t\tfor(int i3 = 0; i3< n;i3++) {\n\t\t\t\tm[i3] = scanner.nextInt(); \n\t\t\t}\n\t\t\ta = 0;\n\t\t\tfor(int i1 = 1; i1 < m.length; i1++) {\n\t\t\t\tif (m[i1] < m[i1-1]) {\n\t\t\t\t\ta += (-m[i1] + m[i1-1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tb = 0;\n\t\t\tint minIn10Secs =0;\n\t\t\tfor(int i1 = 0; i1 < m.length-1;i1++){\n\t\t\t\tint diff = m[i1+1] -m[i1];\n\t\t\t\tif (diff < 0)\n\t\t\t\tminIn10Secs = Math.max(minIn10Secs, -diff);\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i2 = 0; i2 < m.length -1; i2++) {\t\n\t\t\t\t\tb += Math.min(minIn10Secs, m[i2]);\n\t\t\t}\n\t\t\tString out = String.format(\"Case #%d: %d %d\", i + 1, a, b);\n\t\t\tSystem.err.println(out);\n\t\t\twriter.write(out);\n\t\t\twriter.newLine();\r\n\t\t}\r\n\t\twriter.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1372"}
{"func": "package googlejam1.p129;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\n\npublic class MainMushrooms {\n\n\tpublic static void main(String[] args) {\n\n\t\tFileInputStream file;\n\t\tint T;\n\t\tArrayList<TestMushrooms> tests;\n\n\t\ttry {\n\n//\t\t\tfile = new FileInputStream(\"input_Mushrooms\");\n//\t\t\tfile = new FileInputStream(\"A-small-attempt0.in\");\n\t\t\tfile = new FileInputStream(\"A-large.in\");\n\n\t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(file));\n\n\n\t\t\tString buff = in.readLine();\n\t\t\tT = Integer.parseInt(buff);\n\t\t\ttests = new ArrayList<TestMushrooms>();\n\n\t\t\tfor (int i=0; i<T; i++){\n\n\t\t\t\tint N;\n\t\t\t\tbuff = in.readLine();\n\t\t\t\tN = Integer.parseInt(buff);\n\n\t\t\t\tint[] s = new int[N];\n\t\t\t\tbuff = in.readLine();\n\t\t\t\tString[] data = buff.split(\" \");\t\t\t\t\n\t\t\t\tfor (int j=0; j<N; j++) {\n\t\t\t\t\ts[j] = Integer.parseInt(data[j]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttests.add(new TestMushrooms(N, s));\n\t\t\t}\n\n\t\t\tin.close();\n\n\n\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"output_Mushrooms\"));\n\n\t\t\tfor (int i=0; i<T; i++) {\n\t\t\t\tint ind = i+1;\n\t\t\t\tTestMushrooms res = tests.get(i);\n\t\t\t\tSystem.out.println(\"Result \"+ i + \" : \"+ res.getRes1() + \" \" + res.getRes2());\n\t\t\t\tbw.write(\"Case #\"+ind+\": \"+res.getRes1()+\" \"+res.getRes2()+\"\\n\");\n\t\t\t}\n\t\t\tbw.close();\n\n\n\n\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\t\n}\n", "idx": "1129"}
{"func": "package googlejam1.p131;\nimport java.util.Scanner;\n\npublic class A {\n    public static void main(String[] argv) {\n        Scanner sc = new Scanner(System.in);\n\n        int T = sc.nextInt();\n\n        for (int i = 0; i < T; i++) {\n            int N = sc.nextInt();\n\t\t\tint[] m = new int[N];\n\t\t\t\n\t\t\tfor (int i2 = 0; i2 < N; i2++) {\n\t\t\t    m[i2] = sc.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tlong diff_tot = 0;\n\t\t\tint diff_max = 0;\n\t\t\tint prev = m[0];\n\t\t\tfor (int i3 = 1; i3 < N; i3++) {\n\t\t\t    int diff = m[i3] - m[i3-1];\n\t\t\t\n\t\t\t    if (diff <= 0) {\n\t\t\t        diff_tot -= diff;\n\t\t\t        diff_max = Math.max(diff_max, -diff);\n\t\t\t    }\n\t\t\t\n\t\t\t    prev = m[i3];\n\t\t\t}\n\t\t\t\n\t\t\tlong e2_tot = 0;\n\t\t\tfor (int i1 = 0; i1 < N - 1; i1++) {\n\t\t\t    if (m[i1] >= diff_max) {\n\t\t\t        e2_tot += diff_max;\n\t\t\t    } else {\n\t\t\t        //if (m[i+1] == 0) {\n\t\t\t        e2_tot += m[i1];\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", i+1, diff_tot, e2_tot);\n        }\n    }\n}\n", "idx": "1131"}
{"func": "package googlejam1.p134;\nimport java.io.File;\r\nimport java.io.PrintStream;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tLocale.setDefault(Locale.US);\r\n\r\n\t\tScanner in = new Scanner(new File(\"problem.in\"));\r\n\t\tPrintStream out = new PrintStream(new File(\"problem.out\"));\r\n\r\n\t\tint T = in.nextInt();\r\n\t\tfor (int test = 1; test <= T; test++) {\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] m = new int[n];\r\n\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tm[i] = in.nextInt();\r\n\t\t\t}\r\n\r\n\t\t\tint min1 = 0;\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\tif (m[i] < m[i - 1]) {\r\n\t\t\t\t\tmin1 += m[i - 1] - m[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tint min2 = 0;\r\n\t\t\t\r\n\t\t\tint d = 0;\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\tif (m[i] < m[i - 1]) {\r\n\t\t\t\t\tif (m[i-1] - m[i] > d) {\r\n\t\t\t\t\t\td = m[i-1] - m[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (d > 0) {\r\n\t\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\t\tmin2 += Math.min(m[i-1], d);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tout.println(\"Case #\" + test + \": \" + min1 + \" \" + min2);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1134"}
{"func": "package googlejam1.p135;\n\n\nimport java.io.File;\nimport java.util.Scanner;\n\npublic class MushroomMaster {\n\n    private int n;\n    private long m[];\n\n    public MushroomMaster(Scanner sr) {\n        n = sr.nextInt();\n        m = new long[n];\n        for (int i = 0; i < n; ++i) {\n            m[i] = sr.nextInt();\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            Scanner sc = new Scanner(new File(\"src/p1/input2.txt\"));\n            long cases = Integer.valueOf(sc.nextLine());\n            for (long c = 0; c < cases; c++) {\n                System.out.print(\"Case #\" + (c + 1) + \": \");\n\t\t\t\tMushroomMaster r = new MushroomMaster(sc);\n\t\t\t\tlong ans[] = new long[2];\n\t\t\t\tlong maxDiff = 0;\n\t\t\t\tans[0] = 0;\n\t\t\t\tfor (int i = 1; i < r.m.length; ++i) {\n\t\t\t\t    if (r.m[i] < r.m[i - 1]) {\n\t\t\t\t        ans[0] += r.m[i - 1] - r.m[i];\n\t\t\t\t        maxDiff = (maxDiff < r.m[i - 1] - r.m[i]) ? r.m[i - 1] - r.m[i] : maxDiff;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tans[1] = 0;\n\t\t\t\tfor (int i = 0; i < r.m.length - 1; ++i) {\n\t\t\t\t    ans[1] += (maxDiff > r.m[i]) ? r.m[i] : maxDiff;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(ans[0] + \" \" + ans[1]);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}", "idx": "1135"}
{"func": "package googlejam1.p139;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nimport static java.lang.Math.max;\r\nimport static java.lang.Math.min;\r\n\r\npublic class Main {\r\n    /**\r\n     * author geshpaniec\r\n     * 23.10.2014\r\n     */\r\n\r\n    StringTokenizer in;\r\n    BufferedReader inb;\r\n    PrintWriter out;\r\n    static boolean local;\r\n    final String problemname = \"success\";\r\n    final static String _localArg=\"geshpaniec1\";\r\n    final static byte IO=3;\r\n        /* IO:\r\n         * 1 - standard I/O\r\n         * 2 - input.txt/output.txt\r\n         * 3 - problemname.in/problemname.out\r\n         */\r\n\r\n\r\n\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        local = false;\r\n        if (args.length == 1 && args[0].equals(_localArg))\r\n            local = true;\n\t\tMain r = new Main();\r\n        if (Main.local) {\n\t\t    r.inb = new BufferedReader(new FileReader(\"input.txt\"));\n\t\t    r.out = new PrintWriter(new OutputStreamWriter(System.out));\n\t\t} else {\n\t\t    switch (Main.IO){\n\t\t        case 1:\n\t\t            r.inb = new BufferedReader(new InputStreamReader(System.in));\n\t\t            r.out = new PrintWriter(new OutputStreamWriter(System.out));\n\t\t            break;\n\t\t        case 2:\n\t\t            r.inb = new BufferedReader(new FileReader(\"input.txt\"));\n\t\t            r.out = new PrintWriter(new FileWriter(\"output.txt\"));\n\t\t            break;\n\t\t        case 3:\n\t\t            r.inb = new BufferedReader(new FileReader(r.problemname+\".in\"));\n\t\t            r.out = new PrintWriter(new FileWriter(r.problemname+\".out\"));\n\t\t            break;\n\t\t    }\n\t\t}\n\t\tr.in = new StringTokenizer(\"\");\n\t\tdouble Time=System.nanoTime();\n\t\tint T = Integer.parseInt(r.next());\n\t\tA:for (int q = 1; q <= T; q++) {\n\t\t    int n=Integer.parseInt(r.next());\n\t\t\tint[] a1=new int[n];\n\t\t\tfor (int i1=0;i1<n;i1++)\n\t\t\t    a1[i1]=Integer.parseInt(r.next());\n\t\t    int[] a = a1;\n\t\t    long ans1=0,ans2 = 0;\n\t\t    int maxP=0;\n\t\t    for (int i = 1; i < n; i++) {\n\t\t        if (a[i-1]>a[i])\n\t\t            ans1+=a[i-1]-a[i];\n\t\t            maxP = max(maxP,a[i-1]-a[i]);\n\t\t    }\n\t\t    for (int i = 0; i < n-1; i++) {\n\t\t        if (a[i]>maxP){\n\t\t            ans2+=maxP;\n\t\t        }\n\t\t        else{\n\t\t            ans2+=a[i];\n\t\t        }\n\t\t    }\n\t\t    r.out.println(\"Case #\"+q+\": \"+ans1+\" \"+ans2);\n\t\t}\n\t\tif (Main.local){\n\t\t    Time=System.nanoTime()-Time;\n\t\t    r.out.println();\n\t\t    r.out.println(\" Time work: \"+Time/(1e9)+\" seconds\");\n\t\t}\n\t\tr.out.flush();\r\n    }\r\n\r\n    String next() throws Exception {\r\n        if (!in.hasMoreTokens())\r\n            in=new StringTokenizer(inb.readLine());\r\n        return in.nextToken();\r\n    }\r\n\r\n\r\n}", "idx": "1139"}
{"func": "package googlejam1.p141;\n\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class AMushroomMonster {\r\n    public static void main (String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int cases = sc.nextInt();\r\n        for (int t = 1; t <= cases; t++) {\r\n            int intervals = sc.nextInt();\r\n            int minEaten = 0;\r\n            int minConstant = 0;\r\n            int prevAmount = 0;\r\n            int[] measurements = new int[intervals];\r\n            for (int x = 0; x < intervals; x++) {\r\n                measurements[x] = sc.nextInt();\r\n            }\r\n            for (int amount : measurements) {\r\n                if (amount < prevAmount) {\r\n                    minEaten += prevAmount - amount;\r\n                    minConstant = Math.max(minConstant, prevAmount - amount);\r\n                }\r\n                prevAmount = amount;\r\n            }\r\n            int secondEaten = 0;\r\n            for (int x = 0; x < measurements.length - 1; x++) {\r\n                secondEaten += Math.min(measurements[x], minConstant);\r\n            }\r\n            System.out.printf(\"Case #%d: %d %d%n\", t, minEaten, secondEaten);\r\n        }\r\n        sc.close();\r\n    }\r\n}\r\n", "idx": "1141"}
{"func": "package googlejam1.p142;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tfinal boolean DEBUG = false;\r\n\tfinal boolean isSmall = false;\r\n\tfinal String PACKAGE = \"gcj2015/r1a\";\r\n\tfinal String PROBLEM = \"A\";\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tA r = new A();\n\t\tif(!r.DEBUG){\n\t\t\ttry {\n\t\t\t\tif(r.isSmall)System.setIn(new FileInputStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-small-attempt1.in\")));\n\t\t\t\telse System.setIn(new FileInputStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-large.in\")));\n\t\t\t\tif(r.isSmall)System.setOut(new PrintStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-small_out2.txt\")));\n\t\t\t\telse System.setOut(new PrintStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-large_out.txt\")));\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\tfor(int CASE=1;CASE<=T;CASE++){\n\t\t\tint n = sc.nextInt();\n\t\t\tint[] a = new int[n];\n\t\t\tfor(int i=0;i<n;i++)a[i]=sc.nextInt();\n\t\t\tint resY = 0, res = 1<<29;\n\t\t\tfor(int i=1;i<n;i++){\n\t\t\t\tif (a[i] < a[i-1]) resY += a[i-1]-a[i];\n\t\t\t}\n\t\t\tfor(int rate=0;rate<=10000;rate++){\n\t\t\t\tboolean f = true;\n\t\t\t\tint sum = 0, now = a[0];\n\t\t\t\tfor(int i=1;f&&i<n;i++){\n\t\t\t\t\tif (now <= rate) {\n\t\t\t\t\t\tsum += now;\n\t\t\t\t\t\tnow = a[i];\n\t\t\t\t\t} else if (now-rate <= a[i]){\n\t\t\t\t\t\tsum += rate; now = a[i];\n\t\t\t\t\t} else f=false;\n\t\t\t\t}\n\t\t\t\tif (f) {\n\t\t\t\t\tres = Math.min(res, sum); break;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+CASE+\": \"+resY+\" \"+res);\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1142"}
{"func": "package googlejam1.p143;\nimport java.util.*;\r\n\r\npublic class Main {\r\n\r\n  public static void main(String args[]) {\r\n    Main r = (new Main());\n\tScanner cin = new Scanner(System.in);\n\t\n\tint T = cin.nextInt();\n\tfor(int C=1; C<=T; ++C) {\n\t\n\t  int N = cin.nextInt();\n\t  int arr[] = new int[N];\n\t  for(int i=0; i<N; ++i) {\n\t    arr[i] = cin.nextInt();\n\t  }\n\t\n\t  int sum = 0;\n\t  int max = 0;\n\t  for(int i=1; i<N; ++i) {\n\t    int diff = Math.max(arr[i - 1] - arr[i], 0);\n\t    max = Math.max(max, diff);\n\t    sum += diff;\n\t  }\n\t\n\t  int res = 0;\n\t  for(int i=1; i<N; ++i) {\n\t    res += Math.min(arr[i - 1], max);\n\t  }\n\t\n\t  System.out.println(\"Case #\" + C + \": \" + sum + \" \" + res);\n\t\n\t}\r\n  }\r\n\r\n}\r\n", "idx": "1143"}
{"func": "package googlejam1.p148;\nimport java.util.*;\n\npublic class MushroomMonster {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int t = sc.nextInt();\n    int[] nums = new int[1000];\n    for (int i = 1; i <= t; i++) {\n      int n = sc.nextInt();\n      int maxGap = 0;\n      int sum1 = 0;\n      int sum2 = 0;\n      for (int j = 0; j < n; j++) {\n        nums[j] = sc.nextInt();\n        if (j > 0) {\n          maxGap = Math.max(maxGap, nums[j - 1] - nums[j]);\n          sum1 += Math.max(0, nums[j - 1] - nums[j]);\n        }\n      }\n      for (int j = 0; j < n - 1; j++) {\n        sum2 += Math.min(maxGap, nums[j]);\n      }\n      System.out.printf(\"Case #%d: %d %d\\n\", i, sum1, sum2);\n    }\n  }\n}\n", "idx": "1148"}
{"func": "package googlejam1.p150;\nimport java.util.Scanner;\r\n\r\npublic class Round1A15A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tint nCases = scanner.nextInt();\r\n\t\tfor(int z = 0; z < nCases; z++)\r\n\t\t{\r\n\t\t\tint nPeeks = scanner.nextInt();\r\n\t\t\tint total = 0;\r\n\t\t\tdouble maxRate = 0;\r\n\t\t\tint[] counts = new int[nPeeks];\r\n\t\t\tint prev = scanner.nextInt();\r\n\t\t\tcounts[0] = prev;\r\n\t\t\tfor(int i = 1; i < nPeeks; i++)\r\n\t\t\t{\r\n\t\t\t\tint cur = scanner.nextInt();\r\n\t\t\t\tif(prev > cur)\r\n\t\t\t\t{\r\n\t\t\t\t\tint diff = prev - cur;\r\n\t\t\t\t\ttotal += diff;\r\n\t\t\t\t\tmaxRate = Math.max(maxRate, diff / 10d);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcounts[i] = cur;\r\n\t\t\t\tprev = cur;\r\n\t\t\t}\r\n\t\t\tint total1 = 0;\r\n\t\t\tfor(int i = 1; i < nPeeks; i++)\r\n\t\t\t{\r\n\t\t\t\ttotal1 += Math.min(Math.ceil(maxRate * 10), counts[i - 1]);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + (z+1) + \": \" + total + \" \" + total1);\r\n\t\t}\r\n\t\tscanner.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1150"}
{"func": "package googlejam1.p152;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class mushroom {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader br = new BufferedReader(\r\n\t\t\t\tnew FileReader(\"mushroom.in\"));\r\n\t\t\t\t//new InputStreamReader(System.in));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(\r\n\t\t\t\tnew FileWriter(\"mushroom.out\")));\r\n\t\t\t\t//new OutputStreamWriter(System.out)));\r\n\t\tint t = Integer.parseInt(br.readLine());\r\n\t\tfor (int tc = 1; tc <= t; tc++) {\r\n\t\t\tint n = Integer.parseInt(br.readLine());\r\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\r\n\t\t\tint ans1 = 0;\r\n\t\t\tint maxDiff = 0;\r\n\t\t\tint prev = Integer.parseInt(st.nextToken());\r\n\t\t\tint[] ar = new int[n];\r\n\t\t\tar[0] = prev;\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\tint next = Integer.parseInt(st.nextToken());\r\n\t\t\t\tar[i] = next;\r\n\t\t\t\tif (next < prev) {\r\n\t\t\t\t\tans1 += prev - next;\r\n\t\t\t\t\tif (prev - next > maxDiff) {\r\n\t\t\t\t\t\tmaxDiff = prev - next;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tprev = next;\r\n\t\t\t}\r\n\t\t\tint ans2 = 0;\r\n\t\t\tfor (int i = 0; i < n - 1; i++) {\r\n\t\t\t\tif (ar[i] < maxDiff) {\r\n\t\t\t\t\tans2 += ar[i];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tans2 += maxDiff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.printf(\"Case #%d: %d %d\\n\", tc, ans1, ans2);\r\n\t\t}\r\n\t\tout.flush();\r\n\t\tSystem.exit(0);\r\n\t}\r\n\t\r\n}\r\n", "idx": "1152"}
{"func": "package googlejam1.p153;\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\tpublic static void main(String args[]){\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint T = in.nextInt();\r\n\t\tint z, N, i, j, k;\r\n\t\tint num[] = new int[1000];\r\n\t\tint answ1, answ2, max, min;\r\n\t\tboolean found;\r\n\t\tfor(z = 1; z <= T; z++){\r\n\t\t\tN = in.nextInt();\r\n\t\t\tansw1 = answ2 = max = min = 0;\r\n\t\t\tfor(i = 0; i < N; i++){\r\n\t\t\t\tnum[i] = in.nextInt();\r\n\t\t\t\tif(i > 0 && num[i-1] > num[i])\r\n\t\t\t\t\tmin = Math.max(min, num[i-1] - num[i]);\r\n\t\t\t\tmax = Math.max(max, num[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(i = 1; i < N; i++)\r\n\t\t\t\tif(num[i - 1] > num[i])\r\n\t\t\t\t\tansw1 += num[i - 1] - num[i]; \r\n\t\t\t\r\n\t\t\tfor(k = min; k <= max; k++){\r\n\t\t\t\tfound = true;\r\n\t\t\t\tansw2 = Math.min(num[0], k);\r\n\t\t\t\tfor(i = 1; i < N; i++){\r\n\t\t\t\t\tif(num[i - 1] - k > num[i]){\r\n\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(i != N - 1)\r\n\t\t\t\t\t\tansw2 += Math.min(k, num[i]); \r\n\t\t\t\t}\r\n\t\t\t\tif(found)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + z + \": \" + answ1 + \" \" + answ2);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1153"}
{"func": "package googlejam1.p154;\nimport static java.lang.Integer.parseInt;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.List;\nimport java.util.StringTokenizer;\n\npublic class A2015 {\n\n\n    public static void main(String[] args) throws IOException {\n        A2015 trans = new A2015();\n        Path path = Paths.get(\"inputs/\"+A2015.NAME + \".in\");\n\t\tList<String> lines = Files.readAllLines(path);\n\t\t\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"output/\"+A2015.NAME+\".out\"));\n\t\ttry {\n\t\t    try {\n\t\t        int count = parseInt(lines.remove(0));\n\t\t\n\t\t        for (int i=0;i<count;i++) {\n\t\t            String s[] = lines.get(2*i+1).split(\" \");\n\t\t\t\t\tint C = Integer.parseInt(lines.get(2*i).trim());\n\t\t\t\t\t\n\t\t\t\t\tint is[] = new int[C];\n\t\t\t\t\t\n\t\t\t\t\tfor (int i2 = 0; i2 < C; i2++) {\n\t\t\t\t\t    is[i2] = Integer.parseInt(s[i2]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tint prev = is[0];\n\t\t\t\t\tint maxv1 = 0;\n\t\t\t\t\t\n\t\t\t\t\tint mI = 0;\n\t\t\t\t\tfor (int i1 = 1; i1 < C; i1++) {\n\t\t\t\t\t    if (is[i1] < prev) {\n\t\t\t\t\t        maxv1 += prev - is[i1];\n\t\t\t\t\t        mI = Math.max(mI, prev - is[i1]);\n\t\t\t\t\t    }\n\t\t\t\t\t    prev = is[i1];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tint maxv2 = 0;\n\t\t\t\t\t\n\t\t\t\t\tfor (int i3 = 0; i3 < C - 1; i3++) {\n\t\t\t\t\t    maxv2 += Math.min(is[i3], mI);\n\t\t\t\t\t}\n\t\t\t\t\tString str = maxv1 + \" \" + maxv2;\n\t\t            out.write(\"Case #\"+(i + 1)+\": \"+str);\n\t\t            if (i<count-1)\n\t\t                out.write(System.getProperty(\"line.separator\"));\n\t\t            System.out.println(lines.get(i));\n\t\t            System.out.println(str);\n\t\t        }\n\t\t    } finally {\n\t\t        out.flush();\n\t\t        out.close();\n\t\t    }\n\t\t} catch (IOException ex) {\n\t\t    ex.printStackTrace();\n\t\t}\n    }\n//    private static final String ID = \"practice\";\n//    private static final String SIZE = \"small\";\n//    private static final String CODE = \"A\";\n\n    private static final String NAME = \"A-large\";//\"B-small-attempt3\";//CODE+\"-\"+SIZE+\"-\"+ID;\n\n}\n", "idx": "1154"}
{"func": "package googlejam1.p156;\nimport java.io.*;\nimport java.util.*;\n\npublic class A {\n\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader in = new BufferedReader(new FileReader(\"A.in\"));\n\t\tPrintStream out = new PrintStream(\"A.out\");\n\n\t\tint t = Integer.parseInt(in.readLine());\n\t\tfor(int i = 0; i < t; i++) {\n\t\t\tint n = Integer.parseInt(in.readLine());\n\t\t\tString[] arr = in.readLine().split(\" \");\n\t\t\tint[] a = new int[n];\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\ta[j] = Integer.parseInt(arr[j]);\n\t\t\t}\n\t\t\tint tot = 0;\n\t\t\tint max = 0;\n\t\t\tfor(int j = 0; j < n - 1; j++) {\n\t\t\t\tif(a[j] > a[j + 1]) {\n\t\t\t\t\ttot += a[j] - a[j + 1];\n\t\t\t\t}\n\t\t\t\tmax = Math.max(max, a[j] - a[j + 1]);\n\t\t\t}\n\t\t\tlong tot2 = Long.MAX_VALUE >> 1;\n\t\t\tfor(int j = 0; j <= 100000; j++) {\n\t\t\t\tboolean works = true;\n\t\t\t\tlong temptot = 0;\n\t\t\t\tfor(int k = 0; k < n - 1; k++) {\n\t\t\t\t\tif(a[k] <= j) {\n\t\t\t\t\t\ttemptot += a[k];\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttemptot += j;\n\t\t\t\t\t}\n\t\t\t\t\tif(j < a[k] - a[k + 1]) {\n\t\t\t\t\t\tworks = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(works) {\n\t\t\t\t\ttot2 = Math.min(tot2, temptot);\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println(\"Case #\" + (i + 1) + \": \" + tot + \" \" + tot2);\n\t\t}\n\t}\n}", "idx": "1156"}
{"func": "package googlejam1.p159;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class CodeJamMushroom{\r\n    public static void main(String[] args) throws Exception{\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        StringBuilder out = new StringBuilder();\r\n        int t = Integer.parseInt(br.readLine());\r\n        for(int i = 1; i <= t; i++){\r\n            int n = Integer.parseInt(br.readLine());\r\n            int[] m = new int[n];\r\n            StringTokenizer st = new StringTokenizer(br.readLine());\r\n            int f = 0;\r\n            int r = 0;\r\n            for(int j = 0; j < n; j++){\r\n                m[j] = Integer.parseInt(st.nextToken());\r\n                if(j != 0 && m[j] < m[j-1]){\r\n                    f += m[j-1] - m[j];\r\n                    r = Math.max(r,m[j-1]-m[j]);\r\n                }\r\n            }\r\n            int s = 0;\r\n            for(int j = 0; j < n-1; j++){\r\n                s += Math.min(r,m[j]);\r\n            }\r\n            out.append(String.format(\"Case #%d: %d %d\\n\",i,f,s));\r\n        }\r\n        System.out.print(out);\r\n    }\r\n}", "idx": "1159"}
{"func": "package googlejam1.p161;\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\nimport java.io.*;\r\n\r\npublic class ProblemA {\r\n\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tScanner in = new Scanner(new File(\"A-large.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new File(\"outputAlarge.txt\"));\r\n\t\tint t = in.nextInt();\r\n\t\tfor (int tnumber = 1; tnumber <= t; tnumber++)\r\n\t\t{\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint [] a = new int[n];\r\n\t\t\tint max = 0;\r\n\t\t\tfor (int i = 0; i < n; i++) a[i] = in.nextInt();\r\n\t\t\tint ans = 0;\r\n\t\t\tfor (int i = 1; i < n; i++) \r\n\t\t\t{\r\n\t\t\t\tif (a[i - 1] - a[i] > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tans += a[i - 1] - a[i];\r\n\t\t\t\t\tif (a[i - 1] - a[i] > max) max = a[i - 1] - a[i];\r\n\t\t\t\t}\r\n\t\t\t }\r\n\t\t\tint ans1 = 0;\r\n\t\t\t\r\n\t\t\tfor (int i = 1; i < n; i++)\r\n\t\t\t\tif (a[i - 1] < max) ans1 += a[i - 1]; else ans1 += max;\r\n\t\t\t\r\n\t\t\tout.println(\"Case #\" + tnumber + \": \" + ans + \" \" +  ans1);\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "1161"}
{"func": "package googlejam1.p162;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Mushroom {\n\n  public static void main(String[] args) {\n\n    BufferedReader reader = null;\n\ttry {\n\t  reader = new BufferedReader(new FileReader(args[0]));\n\t  int n = Integer.parseInt(reader.readLine());\n\t  for (int i = 1; i <= n; ++i) {\n\t    reader.readLine();\n\t\tMushroom r = new Mushroom();\n\t    List<Integer> intArray = new ArrayList<Integer>();\n\t\tfor (String s : reader.readLine().split(\" \")) {\n\t\t  intArray.add(Integer.parseInt(s));\n\t\t}\n\t\tint x = 0;\n\t\tint max = 0;\n\t\tfor (int i1 = 1; i1 < intArray.size(); ++i1) {\n\t\t  if (intArray.get(i1) < intArray.get(i1 - 1)) {\n\t\t    int d = intArray.get(i1 - 1) - intArray.get(i1);\n\t\t    x += d;\n\t\t    max = Math.max(max, d);\n\t\t  }\n\t\t}\n\t\tint y = 0;\n\t\tfor (int i2 = 1; i2 < intArray.size(); ++i2) {\n\t\t  y += Math.min(max, intArray.get(i2 - 1));\n\t\t}\n\t\tSystem.out.println(\"Case #\" + i + \": \" + x + \" \" + y);\n\t  }\n\t} catch (Exception e) {\n\t  e.printStackTrace();\n\t} finally {\n\t  if (reader != null) {\n\t    try {\n\t      reader.close();\n\t    } catch (IOException e) {\n\t      e.printStackTrace();\n\t    }\n\t  }\n\t}\n  }\n\n}", "idx": "1162"}
{"func": "package googlejam1.p164;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new FileReader(new File(\"A.in\")));\n\t\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(new File(\"A.out\"))));\n\t\t\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tfor (int t = 0; t < T; t++) {\n\t\t\tint N = Integer.parseInt(br.readLine());\n\t\t\tint[] M = new int[N];\n\t\t\tString[] str = br.readLine().split(\" \");\n\t\t\tfor (int i = 0; i < N; i++) M[i] = Integer.parseInt(str[i]);\n\t\t\tint first = 0, maxdiff = 0;\n\t\t\tfor (int i = 1; i < N; i++) {\n\t\t\t\tint diff = M[i-1]-M[i];\n\t\t\t\tif (diff > 0) {\n\t\t\t\t\tfirst += diff;\n\t\t\t\t\tmaxdiff = Math.max(maxdiff, diff);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint second = 0;\n\t\t\tfor (int i = 0; i < N-1; i++) second += Math.min(M[i], maxdiff);\n\t\t\t\n\t\t\tpw.println(\"Case #\"+(t+1)+\": \"+first+\" \"+second);\n\t\t\tpw.flush();\n\t\t}\n\n\t\tpw.close();\n\t\tbr.close();\n\t}\n}\n", "idx": "1164"}
{"func": "package googlejam1.p168;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.StringTokenizer;\r\n\r\n \r\npublic class Main {\r\n  \r\n  public static void main(String[] args) throws IOException {\r\n    \r\n    BufferedReader br = new BufferedReader(new FileReader(new File(\"A-large.in\")));\r\n    BufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"A-large.out\")));\r\n    \r\n    int testCases = Integer.parseInt(br.readLine());\r\n    \r\n    for (int i = 0; i < testCases; i++) {\r\n      \r\n      int size = Integer.parseInt(br.readLine());\r\n      \r\n      int[] input = new int[size];\r\n      \r\n      StringTokenizer st = new StringTokenizer(br.readLine());\r\n      \r\n      for (int j = 0; j < size; j++) {\r\n        input[j] = Integer.parseInt(st.nextToken());\r\n      }\n\tlong result1 = 0;\n\tlong result2 = 0;\n\tint difference, maxDifference = 0;\n\t\n\tfor (int i1 = 1; i1 < input.length; i1++) {\n\t  difference = input[i1-1] - input[i1];\n\t  maxDifference = Math.max(maxDifference, difference);\n\t  if (difference > 0) {\n\t    result1 += difference;\n\t  }\n\t}\n\t\n\t\n\tfor (int i2 = 0; i2 < input.length - 1; i2++) {\n\t  result2 += Math.min(input[i2], maxDifference);\n\t}\r\n      \r\n      String outString = String.valueOf(result1) + \" \" + String.valueOf(result2);\r\n      \r\n      bw.write(\"Case #\" + String.valueOf(i+1) + \": \" + outString + \"\\n\");\r\n    }\r\n    \r\n    br.close();\r\n    bw.close();    \r\n    \r\n  }\r\n\r\n}\r\n", "idx": "1168"}
{"func": "package googlejam1.p169;\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by benoi_000 on 4/16/2015.\r\n */\r\npublic class A {\r\n\r\n    public static void main(String args[]) throws FileNotFoundException {\r\n        final String defaultFile = A.class.getName()+\".in\";\r\n        final PrintStream out;\r\n        final InputStream in;\r\n        if (args.length==0) {\r\n            in = new FileInputStream(\"test/\"+defaultFile);\r\n            out =System.out;\r\n\r\n        } else {\r\n            in = new FileInputStream(\"resources/\"+args[0]);\r\n            out = new PrintStream(new FileOutputStream(\"result/\"+args[0]));\r\n        }\r\n        Scanner scanner = new Scanner(in);\r\n        int nbTest = scanner.nextInt();\r\n        for (int i=0;i<nbTest;i++) {\r\n            scanner.nextLine();\r\n            int nb =scanner.nextInt();\r\n            scanner.nextLine();\r\n            List<Integer> data = new ArrayList<Integer>(nb);\r\n            for(int j=0;j<nb;j++)\r\n                data.add(scanner.nextInt());\n\t\t\tint first =0;\n\t\t\tint rate =0;\n\t\t\tint second =0;\n\t\t\tfor (int i1=1;i1<data.size();i1++) {\n\t\t\t    int d =data.get(i1-1)-data.get(i1);\n\t\t\t    if (d>0) {\n\t\t\t        first+=d;\n\t\t\t        rate = Math.max(rate,d);\n\t\t\t    }\n\t\t\t}\n\t\t\tfor (int i2=0;i2<data.size()-1;i2++) {\n\t\t\t    second += Math.min(rate,data.get(i2));\n\t\t\t}\r\n\r\n            Object res = first+\" \"+second;\r\n            out.println(\"Case #\"+(i+1)+\": \"+res);\r\n        }\r\n\r\n    }\r\n}\r\n", "idx": "1169"}
{"func": "package googlejam1.p170;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Mushroom {\r\n\tpublic static void main(String[] args){\r\n\t\tMushroom t = new Mushroom();\r\n\t\tScanner scan;\n\t\ttry {\n\t\t\tscan = new Scanner(new File(\"input.txt\"));\n\t\t\tPrintStream p = new PrintStream(\"output.txt\");\n\t\t\tint num = scan.nextInt();\n\t\t\tfor(int i = 1; i <= num; i++){\n\t\t\t\tscan.nextLine();\n\t\t\t\tint intervals = scan.nextInt();\n\t\t\t\tint[] mushrooms = new int[intervals];\n\t\t\t\tfor (int j = 0; j < intervals; j++) {\n\t\t\t\t\tmushrooms[j] = scan.nextInt();\t\n\t\t\t\t}\n\t\t\n\t\t\t\t// Now all the mushroom intervals have been calculated\n\t\t\t\tint current = mushrooms[0];\n\t\t\t\t\n\t\t\t\tint total1 = 0; \n\t\t\t\t// Method 1:\n\t\t\t\t// Kaylin only eats when the number drops\n\t\t\t\tfor (int j = 1; j < intervals; j++) {\n\t\t\t\t\tif (mushrooms[j] < current) {\n\t\t\t\t\t\ttotal1 += (current - mushrooms[j]);\n\t\t\t\t\t}\n\t\t\t\t\tcurrent = mushrooms[j];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint[] drop = new int[intervals-1];\n\t\t\t\tfor (int j = 1; j < intervals; j++) {\n\t\t\t\t\tdrop[j-1] = mushrooms[j-1] - mushrooms[j];\n\t\t\t\t\tif (drop[j-1] < 0) {\n\t\t\t\t\t\tdrop[j-1] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tArrays.sort(drop);\n\t\t\t\t\n\t\t\t\tint total2 = 0;\n\t\t\t\tcurrent = mushrooms[0];\n\t\t\t\tint eatingRate = drop[drop.length-1];\n\t\t\t\tfor (int j = 1; j < intervals; j++) {\n\t\t\t\t\ttotal2 += Math.min(current, eatingRate);\n\t\t\t\t\t//System.out.println(Math.min(current, eatingRate));\n\t\t\t\t\tcurrent = mushrooms[j];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp.println(\"Case #\" + i + \": \" + total1 + \" \" + total2);\n\t\t\t\t//System.out.println(\"Case #\" + i + \": \" + total1 + \" \" + total2);\n\t\t\t}\n\t\t\tp.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\r\n\t}\r\n}\r\n\r\n", "idx": "1170"}
{"func": "package googlejam1.p172;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class CodeJam1A_1 {\n\t\n\tpublic static void main(String[] args) {\n\t\t// Template starts here\n\t\tBufferedReader br = null;\n\t\ttry {\n\t\t\tbr = new BufferedReader(new FileReader(\"input.txt\"));\n\t\t\tint numTestCase = Integer.valueOf(br.readLine());\n\t\t\tfor(int testCase=1; testCase<=numTestCase; testCase++)\n\t\t\t{\n\t\t\t\tSystem.out.print(\"Case #\" + testCase + \": \");\n\t\t\t\t\n\t\t\t\t// Read each test case\n\t\t\t\t// Int\n\t\t\t\tint numObservation = Integer.valueOf(br.readLine());\n\t\t\t\t// Array\n\t\t\t\tString[] observationStr = br.readLine().split(\" \");\n\t\t\t\tLong[] observation = new Long[numObservation];\n\t\t\t\tfor(int i=0; i<numObservation; i++)\n\t\t\t\t{\n\t\t\t\t\tobservation[i] = Long.valueOf(observationStr[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlong ans1 = 0;\n\t\t\t\tlong ans2 = 0;\n\t\t\t\tlong maxDiff = 0;\n\t\t\t\tfor(int i=0; i<numObservation-1; i++)\n\t\t\t\t{\n\t\t\t\t\tlong diff = observation[i] - observation[i+1];\n\t\t\t\t\tif(diff > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tans1 += diff;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(diff > maxDiff)\n\t\t\t\t\t{\n\t\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int i=0; i<numObservation-1; i++)\n\t\t\t\t{\n\t\t\t\t\tif(maxDiff > observation[i])\n\t\t\t\t\t{\n\t\t\t\t\t\tans2 += observation[i];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tans2 += maxDiff;\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Print output\n\t\t\t\tSystem.out.println(ans1 + \" \" + ans2);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// Template ends here\n\t}\n\t\n}\n", "idx": "1172"}
{"func": "package googlejam1.p174;\nimport java.util.*;\n\nclass A {\n\tpublic static void main (String [] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint numTests = sc.nextInt();\n\t\tfor (int test = 1; test <= numTests; test++) {\n\t\t\tint n = sc.nextInt();\n\t\t\tint[] arr = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = sc.nextInt();\n\t\t\t}\n\t\t\tint aSum = 0;\n\t\t\tint maxDrop = 0;\n\t\t\tfor (int i = 1; i < n; i++) {\n\t\t\t\tif (arr[i] < arr[i-1]) {\n\t\t\t\t\taSum+= arr[i-1] - arr[i];\n\t\t\t\t\tmaxDrop = Math.max(maxDrop, arr[i-1] - arr[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdouble rate = maxDrop / 10.0;\n\t\t\tdouble curr = arr[0];\n\t\t\tdouble bSum = 0;\n\t\t\tfor (int i = 0; i < (n-1) * 10; i++) {\n\t\t\t\tif (i % 10 == 0) {\n\t\t\t\t\tcurr = arr[i/10];\n\t\t\t\t}\n\t\t\t\tdouble newVal = Math.max(0, curr - rate);\n\t\t\t\tdouble delta = curr - newVal;\n\t\t\t\tcurr -= delta;\n\t\t\t\tbSum += delta;\n\t\t\t}\n\t\t\tlong l = Math.round(bSum);\n\t\t\tint intBSum = (int) l;\n\t\t\t// int bSum = 0;\n\t\t\t// int curr = arr[0] + maxDrop;\n\t\t\t// for (int i = 1; i < n; i++) {\n\t\t\t// \tSystem.out.println(curr-arr[i]);\n\t\t\t// \tbSum += curr - arr[i];\n\t\t\t// \tcurr = arr[i] + maxDrop;\n\t\t\t// }\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", test, aSum, intBSum);\n\t\t}\n\t}\n}", "idx": "1174"}
{"func": "package googlejam1.p176;\n\r\n\r\nimport java.io.File;\r\nimport java.util.Scanner;\r\n\r\npublic class MainA {\r\n\r\n\tstatic int t;\r\n\tstatic int count;\r\n\r\n\tstatic int[][] map;\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\t// \u554f\u984c\u306e\u8aad\u307f\u8fbc\u307f\r\n\t\tScanner sc = new Scanner(new File(\"src/in.txt\"));\r\n\r\n\t\tint T = sc.nextInt();\r\n\r\n\t\tfor (t=1; t<=T; t++) {\r\n\r\n\t\t\tint N = sc.nextInt();\r\n\r\n\t\t\tint[] m = new int[N];\r\n\t\t\tfor (int i=0; i<N; i++) {\r\n\t\t\t\tm[i] = sc.nextInt();\r\n\t\t\t}\r\n\r\n\t\t\tlong ans1 = 0;\n\t\t\tlong ans2 = 0;\n\t\t\t\n\t\t\tint[] d = new int[N-1];\n\t\t\t\n\t\t\tfor (int i=0; i<N-1; i++) {\n\t\t\t\td[i] = m[i+1]-m[i];\n\t\t\t}\n\t\t\t\n\t\t\tint min = 0;\n\t\t\tfor (int i=0; i<N-1; i++) {\n\t\t\t\t// ans1\u306e\u8a08\u7b97\n\t\t\t\tif (d[i] < 0) {\n\t\t\t\t\tans1 -= d[i];\n\t\t\t\t}\n\t\t\t\n\t\t\t\t// ans2\u306e\u8a08\u7b97\n\t\t\t\tif (d[i] < min) {\n\t\t\t\t\tmin = d[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tmin = -min;\n\t\t\tfor (int i=0; i<N-1; i++) {\n\t\t\t\t// ans2\u306e\u8a08\u7b97\n\t\t\t\tif (m[i] >= min) {\n\t\t\t\t\tans2 += min;\n\t\t\t\t} else {\n\t\t\t\t\tans2 += m[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + t + \": \" + (Object) ans1 + \" \" + (Object) ans2);\r\n\t\t}\r\n\t}\r\n}", "idx": "1176"}
{"func": "package googlejam1.p177;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nimport static java.lang.Math.*;\r\nimport static java.lang.Integer.*;\r\n\r\npublic class A {\r\n\tstatic Scanner sc = null;\r\n\tstatic BufferedReader br = null;\r\n\tstatic PrintWriter out = null;\r\n\tstatic PrintStream sysout = System.out;\r\n\tstatic Random rnd = new Random();\r\n\t\r\n\tint INF = Integer.MAX_VALUE / 10;\r\n\tdouble DF = 0.0000000001;\r\n\t\r\n\tlong b = 1;\r\n\tint N = 0;\r\n\tint M = 0;\r\n\t\r\n\r\n\t\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tFile file = new File(\"A-large.in\");\r\n\t\tif(file.exists()){\r\n\t\t\tSystem.setIn(new BufferedInputStream(new FileInputStream(file)));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tthrow new Exception(\"can't find a input file : \" + file.getAbsolutePath());\r\n\t\t}\r\n\t\t//sc =  new Scanner(System.in);\r\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tFileWriter fw = new FileWriter(new File(\"output.txt\"));\r\n\t\tout = new PrintWriter(fw);\r\n\t\t\r\n\t\tA b = new A();\r\n\t\tint T = 0;\r\n\t\tif(sc != null){\r\n\t\t\tT = sc.nextInt();\r\n\t\t}\r\n\t\telse{\r\n\t\t\tT = parseInt(br.readLine());\r\n\t\t}\r\n\t\tint t = 1;\r\n\t\twhile(t <= T){\r\n\t\t\tout.print(\"Case #\" + t + \": \");\r\n\t\t\tSystem.out.print(\"Case #\" + t + \": \");\r\n\t\t\tString s = A.br.readLine();\n\t\t\tint N = Integer.parseInt(s);\n\t\t\t\n\t\t\tint[] d = new int[N];\n\t\t\ts = A.br.readLine();\n\t\t\tString[] sp = s.split(\" \");\n\t\t\tfor(int i = 0; i < N; i++){\n\t\t\t\td[i] = Integer.parseInt(sp[i]);\n\t\t\t}\n\t\t\tint A1 = 0;\n\t\t\tint A2 = 0;\n\t\t\tfor(int i = 0; i < N-1; i++){\n\t\t\t\tif(d[i] > d[i+1]){\n\t\t\t\t\tA1 += d[i] - d[i+1];\n\t\t\t\t\tA2 = Math.max(d[i] - d[i+1], A2);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tlong ans = 0;\n\t\t\tfor(int i = 0; i < N-1; i++){\n\t\t\t\tif(d[i] < A2){\n\t\t\t\t\tans += d[i];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tans += A2;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString s1 = A1 + \" \" + ans;\n\t\t\tA.out.println(s1);\n\t\t\tSystem.out.println(s1);\r\n\t\t\tt++;\r\n\t\t}\r\n\t\tout.close();\r\n\t\tfw.close();\r\n\t}\r\n}\r\n", "idx": "1177"}
{"func": "package googlejam1.p178;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class Main\n{\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tBufferedReader br = Files.newBufferedReader(Paths.get(\"A-large.in\", args), Charset.defaultCharset());\n//\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tSystem.setOut(new PrintStream(Files.newOutputStream(Paths.get(\"output.out\"))));\n\n\t\tfinal int CASES = Integer.parseInt(br.readLine());\n\t\tString line;\n\n\t\tfor (int cs = 0; cs < CASES; cs++)\n\t\t{\n\t\t\tline = br.readLine();\n\t\t\t//final int A = Integer.parseInt(line.substring(0, space));\n\t\t\t//final int B = Integer.parseInt(line.substring(space + 1));\n\n\t\t\tfinal int N = Integer.parseInt(line);\n\t\t\tint[] arr = new int[N];\n\t\t\tint j = 0;\n\t\t\tint accumulator = -1;\n\t\t\tboolean sign = true; // can be surely done without this\n\t\t\tfor (char ch : br.readLine().toCharArray())\n\t\t\t\tif (ch == '-')\n\t\t\t\t{\n\t\t\t\t\taccumulator = 0;\n\t\t\t\t\tsign = false;\n\t\t\t\t}\n\t\t\t\telse if (ch < '0' || ch > '9')\n\t\t\t\t{\n\t\t\t\t\tif (accumulator != -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tarr[j] = sign ? accumulator : -accumulator;\n\t\t\t\t\t\taccumulator = -1;\n\t\t\t\t\t\tsign = true;\n\t\t\t\t\t\tj++;\n\t\t\t\t\t} // we found a new digit\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\taccumulator = accumulator == -1\n\t\t\t\t\t\t? (ch - '0')\n\t\t\t\t\t\t: accumulator * 10 + (ch - '0');\n\t\t\tif (accumulator != -1)\n\t\t\t\tarr[j++] = sign ? accumulator : -accumulator;\n\t\t\t\n\t\t\t\n\t\t\t\n\n\t\t\t//\t\tSystem.err.println(Arrays.toString(arr));\n\t\t\t\t\tint case1 = 0;\n\t\t\t\t\tint max = 0;\n\t\t\t\t\tfor(int i = 1; i < arr.length; i++) {\n\t\t\t\t\t\tint diff = arr[i - 1] - arr[i];\n\t\t\t\t\t\tif(diff > 0)\n\t\t\t\t\t\t\tcase1 += diff;\n\t\t\t\t\t\tif(diff > max)\n\t\t\t\t\t\t\tmax = diff;\n\t\t\t\t\t}\n\t\t\t//\t\tSystem.err.println(\"max \"+max);\n\t\t\t\t\t\n\t\t\t\t\tint case2 = 0;\n\t\t\t\t\tfor(int i = 0; i < arr.length - 1; i++)\n\t\t\t\t\t\tif(arr[i] < max)\n\t\t\t\t\t\t\tcase2 += arr[i];\n\t\t\t\t\telse\n\t\t\t\t\t\t\tcase2 += max;\n\t\t\t\t\t\n\t\t\t\t\tString msg = Integer.toString(case1) + ' ' + Integer.toString(case2);\n\t\t\t\t\tSystem.out.println(\"Case #\" + (cs + 1) + \": \" + msg);\n\t\t\t//br.readLine();\n\t\t}\n\t}\n}\n", "idx": "1178"}
{"func": "package googlejam1.p179;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class A {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n    \tScanner s = new Scanner(new FileReader(\"a.in\"));\r\n    \tPrintWriter printer = new PrintWriter(new FileWriter(\"a.out\"));\r\n    \tint t = s.nextInt();\r\n    \tfor(int i=0; i<t; i++) {\r\n    \t\tint n = s.nextInt();\r\n    \t\tint[] arr = new int[n];\r\n    \t\tint b = 0;\r\n    \t\tfor(int j=0; j<n; j++)\r\n    \t\t\tarr[j] = s.nextInt();\r\n    \t\tint a = 0;\r\n    \t\tfor(int j=0; j<n-1; j++)\r\n    \t\t\tif(arr[j]-arr[j+1] >= 0) a += arr[j]-arr[j+1];\r\n    \t\tint k = 0;\r\n    \t\tfor(int j=0; j<n-1; j++)\r\n    \t\t\tif(arr[j] > arr[j+1]) k = Math.max(k, arr[j]-arr[j+1]);\r\n    \t\tfor(int j=0; j<n-1; j++)\r\n    \t\t\tb += Math.min(arr[j], k);\r\n    \t\tSystem.out.println(a + \" \" + b);\r\n    \t\tprinter.println(\"Case #\" + (i+1) + \": \" + a + \" \" + b);\r\n    \t}\r\n    \tprinter.close();\r\n    }\r\n}\r\n", "idx": "1179"}
{"func": "package googlejam1.p186;\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString filename = \"A-large\";\r\n        Scanner scan = new Scanner(new FileReader(filename + \".in\"));\r\n        PrintWriter out = new PrintWriter(filename + \".out\");\r\n        int problems = scan.nextInt();\r\n        for (int count = 0; count < problems; count++) {\r\n            System.out.print(\"Case #\" + (count+1) + \": \");\r\n            out.print(\"Case #\" + (count+1) + \": \");\n\t\t\tA r = new A();\r\n            int resultA = 0;\n\t\t\tint resultB = 0;\n\t\t\tint n = scan.nextInt();\n\t\t\tint[] array = new int[n];\n\t\t\t\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarray[i] = scan.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tint maxDiff = 0;\n\t\t\tfor (int i = 1; i < n; i++) {\n\t\t\t\tint diff = array[i-1] - array[i];\n\t\t\t\tmaxDiff = Math.max(maxDiff, diff);\n\t\t\t\tif (array[i] < array[i-1]) {\n\t\t\t\t\tresultA += diff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i = 0; i < n-1; i++) {\n\t\t\t\tresultB += Math.min(array[i], maxDiff);\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(resultA + \" \" + resultB);\n\t\t\tout.println(resultA + \" \" + resultB);\n\t\t\t\n\t\t\tresultA = 0;\r\n        }\r\n        out.flush();\r\n        out.close();\r\n        scan.close();\r\n    }\r\n\t\r\n}", "idx": "1186"}
{"func": "package googlejam1.p192;\nimport java.util.Scanner;\r\n\r\npublic class a {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint cases = in.nextInt();\r\n\t\tint cn = 0;\r\n\r\n\t\twhile (cn++ < cases) {\r\n\t\t\tint times = in.nextInt();\r\n\r\n\t\t\tint[] input = new int[times];\r\n\t\t\tfor (int i = 0; i < input.length; i++) {\r\n\t\t\t\tinput[i] = in.nextInt();\r\n\t\t\t}\r\n\r\n\t\t\tint last = input[0];\r\n\t\t\tint wayOne = 0;\r\n\t\t\tfor (int i = 1; i < times; i++) {\r\n\t\t\t\tint next = input[i];\r\n\r\n\t\t\t\twayOne += Math.max(0, last - next);\r\n\t\t\t\t\r\n\t\t\t\tlast = next;\r\n\t\t\t}\r\n\r\n\t\t\tint wayTwo = 0;\r\n\t\t\tlast=input[0];\r\n\t\t\tint worst = 0;\r\n\t\t\tfor (int i = 1; i < input.length; i++) {\r\n\t\t\t\tint next=input[i];\r\n\t\t\t\tint minEaten = Math.max(0, last-next);\r\n//\t\t\t\tminEaten = (minEaten/10) + (minEaten%10==0 ? 0 : 1);\r\n\t\t\t\tworst = Math.max(worst, minEaten);\r\n\t\t\t\tlast=next;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < input.length-1; i++) {\r\n\t\t\t\twayTwo += Math.min(input[i], worst);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", cn, wayOne, wayTwo);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1192"}
{"func": "package googlejam1.p195;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Codejam {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t//System.setIn(new FileInputStream(\"input.txt\"));\r\n\t\tScanner in = null;\r\n\t\ttry {\r\n\t\t\tin = new Scanner(new File(\"input.txt\"));\r\n\t\t} catch (FileNotFoundException e1) {\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tSystem.setOut(new PrintStream(new File(\"output.txt\")));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t}\r\n\t\t\r\n\t\tint T = in.nextInt();\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint ar[] = new int[n];\r\n\t\t\tint ma = 0;\r\n\t\t\tint f = 0;\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tar[i] = in.nextInt();\r\n\t\t\t\tif (i > 0) {\r\n\t\t\t\t\tma = Math.max(ma, ar[i - 1] - ar[i]);\r\n\t\t\t\t\tif (ar[i] < ar[i-1]){\r\n\t\t\t\t\t\tf += ar[i - 1] - ar[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint s = 0;\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\tif (ar[i - 1] >= ma) {\r\n\t\t\t\t\ts += ma;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts += ar[i - 1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + t + \": \" + f + \" \" + s);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1195"}
{"func": "package googlejam1.p197;\nimport java.util.Scanner;\r\n\r\n\r\npublic class ProbA {\r\npublic static void main(String[] args)\r\n{\r\n\tScanner sc = new Scanner(System.in);\r\n\tint numcases = sc.nextInt();\r\n\tfor(int cas  = 1;cas <= numcases;cas++ )\r\n\t{\r\n\t\tSystem.out.print(\"Case #\"+cas+\": \");\r\n\t\t\r\n\t\tlong methone=0;\r\n\t\tint numticks = sc.nextInt();\r\n\t\tlong[] values = new long[numticks];\r\n\t\tfor(int i=0;i<numticks;i++)\r\n\t\t{\r\n\t\t\tvalues[i] = sc.nextInt();\r\n\t\t}\r\n\t\tlong maxdec=0;\r\n\t\tfor(int i=1;i<numticks;i++)\r\n\t\t{\r\n\t\t\tif(values[i] <values[i-1])\r\n\t\t\t{\r\n\t\t\t\tmethone+= values[i-1]-values[i];\r\n\t\t\t\tif(values[i-1] - values[i]>maxdec)\r\n\t\t\t\t{\r\n\t\t\t\t\tmaxdec = values[i-1] - values[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tint methtwo =0;\r\n\t\tfor(int i=0;i<numticks-1;i++)\r\n\t\t{\r\n\t\t\tif(values[i]>maxdec)\r\n\t\t\t{\r\n\t\t\t\tmethtwo+= maxdec;\r\n\t\t\t}else\r\n\t\t\t{\r\n\t\t\t\tmethtwo+= values[i];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\tSystem.out.println(methone+\" \"+methtwo);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n}\r\n}\r\n", "idx": "1197"}
{"func": "package googlejam1.p198;\n\r\n\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tstatic Scanner reader;\r\n\tstatic PrintWriter writer;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\treader = new Scanner(new FileReader(\"input\"));\r\n\t\twriter = new PrintWriter(new FileWriter(\"output\"));\r\n\t\tint nt = reader.nextInt();\r\n\t\tfor(int tc = 1; tc <= nt; tc++) {\r\n\t\t\tint n = reader.nextInt();\n\t\t\tint[] m = new int[n];\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t\tm[i] = reader.nextInt();\n\t\t\t}\n\t\t\tint min1 = 0;\n\t\t\tint maxDecrease = -1;\n\t\t\tfor(int i = 1; i < n; i++) {\n\t\t\t\tmin1 += Math.max(0, m[i - 1] - m[i]);\n\t\t\t\tmaxDecrease = Math.max(maxDecrease, Math.max(0, m[i - 1] - m[i]));\n\t\t\t}\n\t\t\tint min2 = 0;\n\t\t\tfor(int i = 0; i < n - 1; i++) {\n\t\t\t\tmin2 += Math.min(m[i], maxDecrease);\n\t\t\t\t\n\t\t\t}\n\t\t\twriter.println(\"Case #\" + tc + \": \" + min1 + \" \" + min2);\r\n\t\t}\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n}\r\n", "idx": "1198"}
{"func": "package googlejam1.p199;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\n\r\n\r\npublic class ProblemA {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\t//String filenameInput = \"A-sample.in\";\r\n\t\t//String filenameOutput = \"A-sample.out\";\r\n\t\t\r\n\t\t//String filenameInput = \"A-small-attempt0.in\";\r\n\t\t//String filenameOutput = \"A-small-attempt0.out\";\r\n\t\t\r\n\t\t\r\n\t\tString filenameInput = \"A-large.in\";\r\n\t\tString filenameOutput = \"A-large.out\";\r\n\r\n\t\tClass currentClass = ProblemA.class;\r\n\t\ttry {\r\n\r\n\t\t\tString path = \"src/\"\r\n\t\t\t\t\t+ currentClass.getPackage().getName().replace(\".\", \"/\");\r\n\t\t\tBufferedReader input = new BufferedReader(new FileReader(new File(\r\n\t\t\t\t\tpath + \"/\" + filenameInput)));\r\n\t\t\tBufferedWriter output = new BufferedWriter(new FileWriter(new File(\r\n\t\t\t\t\tpath + \"/\" + filenameOutput)));\r\n\t\t\tint numOfTestcases = Integer.parseInt(input.readLine());\r\n\t\t\t// System.out.println(\"Number of Testcases: \" + numOfTestcases);\r\n\t\t\tfor (int i = 0; i < numOfTestcases; i++) {\r\n\t\t\t\tSystem.out.println(\"Testnumber : \" + i);\r\n\t\t\t\tint minimum = 0;\r\n\t\t\t\tint constantSpeedMinimum = 0;\r\n\t\t\t\tint numberOfIntervals = Integer.parseInt(input.readLine());\r\n\t\t\t\tString[] inputStringArray = input.readLine().split(\" \");\r\n\t\t\t\tint[] numOfMushrooms = new int[numberOfIntervals];\r\n\t\t\t\tfor (int j=0;j<numberOfIntervals;j++) {\r\n\t\t\t\t\tnumOfMushrooms[j] = Integer.parseInt(inputStringArray[j]);\r\n\t\t\t\t}\r\n\t\t\t\tint speed = 0;\r\n\t\t\t\tfor(int j=0;j<numberOfIntervals-1;j++) {\r\n\t\t\t\t\tminimum += Math.max(0, numOfMushrooms[j]-numOfMushrooms[j+1]);\r\n\t\t\t\t\tspeed  = Math.max(speed, numOfMushrooms[j]-numOfMushrooms[j+1]);\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(speed);\r\n\t\t\t\tfor(int j=0;j<numberOfIntervals-1;j++) {\r\n\t\t\t\t\tconstantSpeedMinimum += Math.min(speed, numOfMushrooms[j]);\r\n\t\t\t\t\tSystem.out.println(constantSpeedMinimum +\" before \" + j);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tString outputString = \"Case #\"\r\n\t\t\t\t\t\t+ (i + 1)\r\n\t\t\t\t\t\t+ \": \"\r\n\t\t\t\t\t\t+ minimum + \" \" + constantSpeedMinimum;\r\n\t\t\t\tSystem.out.println(outputString);\r\n\r\n\t\t\t\tif (i + 1 != numOfTestcases) {\r\n\t\t\t\t\toutputString += \"\\n\";\r\n\t\t\t\t}\r\n\t\t\t\toutput.write(outputString);\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.flush();\r\n\t\t\toutput.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t} \r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1199"}
{"func": "package googlejam1.p200;\nimport java.util.*;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tA a = new A();\r\n\t\tScanner in = new Scanner(System.in);\n\t\tint cases = Integer.parseInt(in.nextLine());\n\t\tfor (int a1=0; a1<cases; a1++) {\n\t\t\tint num = Integer.parseInt(in.nextLine());\n\t\t\tString[] split = in.nextLine().split(\" \");\n\t\t\tint[] vals = new int[num];\n\t\t\tfor (int i=0; i<num; i++) {\n\t\t\t\tvals[i] = Integer.parseInt(split[i]);\n\t\t\t}\n\t\t\tint first = 0;\n\t\t\tint second = 0;\n\t\t\tint rate = 0;\n\t\t\tfor (int i=0; i<num-1; i++) {\n\t\t\t\tif (vals[i+1] < vals[i]) {\n\t\t\t\t\tfirst += vals[i] - vals[i+1];\n\t\t\t\t\trate = Math.max(rate,vals[i] - vals[i+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i=0; i<num-1; i++) {\n\t\t\t\tsecond += Math.min(vals[i],rate);\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + (a1+1) + \": \" + first + \" \" + second);\n\t\t}\r\n\t}\r\n}", "idx": "1200"}
{"func": "package googlejam1.p201;\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Mushrooms {\r\npublic static void main(String[] args) {\r\n\tScanner sc = new Scanner(System.in);\r\n\tint t =  sc.nextInt();\r\n\tStringBuilder out = new StringBuilder();\r\n\tfor ( int c = 1; c <= t; c++) {\r\n\t\tint n = sc.nextInt();\r\n\t\t\r\n\t\tList<Integer> list = new ArrayList<>();\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\tlist.add(sc.nextInt());\r\n\t\t}\r\n\t\t\r\n\t\t// first\r\n\t\tint eaten1 = 0;\r\n\t\tfor (int i = 0; i < list.size() -1; i++) {\r\n\t\t\tint diff = list.get(i) - list.get(i+1);\r\n\t\t\t\r\n\t\t\tif (diff > 0) {\r\n\t\t\t\teaten1 += diff;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// second\r\n\t\tint rate2 = 0;\r\n\t\tfor (int i = 0; i < list.size() -1; i++) {\r\n\t\t\tint diff = list.get(i) - list.get(i+1);\r\n\t\t\t\r\n\t\t\tif (diff > rate2) {\r\n\t\t\t\trate2 = diff;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tint eaten2 = 0;\r\n\t\tfor (int i = 0; i < list.size() -1; i++) {\r\n\t\t\tif (list.get(i) < rate2) {\r\n\t\t\t\teaten2 += list.get(i);\r\n\t\t\t} else {\r\n\t\t\t\teaten2 += rate2;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tout.append(\"Case #\").append(c).append(\": \").append(eaten1).append(\" \").append(eaten2).append(\"\\n\");\r\n\t}\r\n\tSystem.out.print(out);\r\n}\r\n}\r\n", "idx": "1201"}
{"func": "package googlejam1.p203;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class MushroomMonster {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\tStringTokenizer st;\r\n\t\tint T=Integer.parseInt(br.readLine());\r\n\t\tfor(int cn=1;cn<=T;cn++){\r\n\t\t\tint N=Integer.parseInt(br.readLine());\r\n\t\t\tint m[]=new int[N];\r\n\t\t\tst=new StringTokenizer(br.readLine());\r\n\t\t\tfor(int i=0;i<N;i++){\r\n\t\t\t\tm[i]=Integer.parseInt(st.nextToken());\r\n\t\t\t}\r\n\t\t\tint ans1=0, maxd=0;\r\n\t\t\tfor(int i=1;i<N;i++){\r\n\t\t\t\tint diff=Math.max(0,m[i-1]-m[i]);\r\n\t\t\t\tans1+=diff;\r\n\t\t\t\tmaxd=Math.max(maxd, diff);\r\n\t\t\t}\r\n\t\t\tint ans2=0;\r\n\t\t\tfor(int i=0;i<N-1;i++){\r\n\t\t\t\tint diff=Math.min(m[i],maxd);\r\n\t\t\t\tans2+=diff;\r\n\t\t\t}\r\n\r\n\t\t\tbw.append(\"Case #\"+cn+\": \"+ans1+\" \"+ans2+\"\\n\");\r\n\t\t}\r\n\t\tbw.flush();\r\n\t}\r\n\r\n}\r\n", "idx": "1203"}
{"func": "package googlejam1.p204;\nimport java.io.File;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\npublic class A {\n\tstatic final Boolean SAMPLE = false;\n\tstatic final String PROBLEM = \"A\";\n\tstatic final String INPUT = \"large\";\n\tstatic final String ID = \"0\";\n\tstatic final String PATH = \"/Users/wangkai/Documents/codejam-commandline-1.2-beta1/source/\";\n\n\tpublic static void main(String[] args) throws Throwable {\n\t\tScanner in = SAMPLE ? new Scanner(System.in) : new Scanner(new File(\n\t\t\t\tPATH + PROBLEM + \"-\" + INPUT + \"-\" + ID + \".in\"));\n\t\tPrintStream out = SAMPLE ? System.out : new PrintStream(PATH + PROBLEM\n\t\t\t\t+ \"-\" + INPUT + \"-\" + ID + \".out\");\n\n\t\tint test = in.nextInt();\n\t\tfor (int t = 1; t <= test; t++) {\n\t\t\tout.print(\"Case #\" + t + \": \");\n\n\t\t\tint N = in.nextInt();\n\t\t\tint[] mushrooms = new int[N];\n\t\t\tfor (int i = 0; i < mushrooms.length; i++) {\n\t\t\t\tmushrooms[i] = in.nextInt();\n\t\t\t}\n\n\t\t\tint minEat1 = 0;\n\t\t\tfor (int i = 0; i < mushrooms.length - 1; i++) {\n\t\t\t\tminEat1 += Math.max(0, mushrooms[i] - mushrooms[i + 1]);\n\t\t\t}\n\n\t\t\tint maxSingleEat = 0;\n\t\t\tfor (int i = 0; i < mushrooms.length - 1; i++) {\n\t\t\t\tmaxSingleEat = Math.max(maxSingleEat,\n\t\t\t\t\t\tMath.max(0, mushrooms[i] - mushrooms[i + 1]));\n\t\t\t}\n\n\t\t\tint minEat2 = 0;\n\t\t\tfor (int i = 1; i < mushrooms.length; i++) {\n\t\t\t\tminEat2 += Math.min(maxSingleEat, mushrooms[i - 1]);\n\t\t\t}\n\n\t\t\tout.println(minEat1 + \" \" + minEat2);\n\t\t}\n\n\t\tout.close();\n\t\tin.close();\n\n\t\tSystem.out.println(\"finish!\");\n\t}\n}\n", "idx": "1204"}
{"func": "package googlejam1.p205;\n\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n/*\r\n * To change this template, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n/**\r\n *\r\n * @author Ismael\r\n */\r\npublic class ProblemA {\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        FileReader f= new FileReader(\"C:\\\\Users\\\\Ismael\\\\Desktop\\\\inputA.txt\");\r\n        PrintWriter out =new PrintWriter(\"C:\\\\Users\\\\Ismael\\\\Desktop\\\\outputA.txt\");\r\n        Scanner in = new Scanner(f);\r\n        int cant= in.nextInt();\r\n        in.nextLine();\r\n        for (int i = 0; i < cant; i++) {\r\n            \r\n            int mus=in.nextInt();\r\n            int m[]=new int[mus];\r\n            for (int j = 0; j < mus; j++) {\r\n                m[j]=in.nextInt();\r\n                \r\n                \r\n                \r\n            }\r\n            int acum=0;\r\n            for (int j = 0; j < mus-1; j++) {\r\n                acum=acum+Math.min(0, m[j+1]-m[j]);\r\n                \r\n            }\r\n            acum=-acum;\r\n            \r\n            int rate=0;\r\n            for (int j = 0; j < mus-1; j++) {\r\n                if(rate<-(m[j+1]-m[j])){\r\n                    rate=-(m[j+1]-m[j]);\r\n                }\r\n              \r\n            }\r\n\r\n            int acum2=0;\r\n            for (int j = 0; j < mus-1; j++) {\r\n                if(m[j]>=rate){\r\n                    acum2=acum2+rate;\r\n                }else{\r\n                    acum2=acum2+m[j];\r\n                }\r\n            }\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            String res=acum+\" \"+acum2;\r\n            out.println(\"Case #\"+(i+1)+\": \"+res);\r\n            \r\n        }\r\n        in.close();\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "1205"}
{"func": "package googlejam1.p206;\nimport java.util.Scanner;\r\n\r\n\r\npublic class Mushrooms \r\n{\r\n\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint t= sc.nextInt();\r\n\t\tfor (int i=0;i<t;++i)\r\n\t\t{\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint []m = new int[n];\r\n\t\t\tfor (int j=0;j<n;++j)\r\n\t\t\t\tm[j] = sc.nextInt();\r\n\t\t\tint first = 0;\r\n\t\t\tlong second = 0;\r\n\t\t\tlong maxEaten = Integer.MIN_VALUE;\r\n\t\t\tfor (int j=1;j<n;++j)\r\n\t\t\t{\r\n\t\t\t\tif (m[j-1]-m[j] > maxEaten)\r\n\t\t\t\t\tmaxEaten = m[j-1] - m[j];\r\n\t\t\t\tif (m[j] < m[j-1])\r\n\t\t\t\t{\r\n\t\t\t\t\tfirst += m[j-1] - m[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (int j=0;j<n-1;++j)\r\n\t\t\t{\r\n\t\t\t\tif (m[j] > maxEaten)\r\n\t\t\t\t\tsecond += maxEaten;\r\n\t\t\t\telse second += m[j];\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+first+\" \"+second);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1206"}
{"func": "package googlejam1.p209;\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.Writer;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Round1A {\r\n\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\t\r\n\t\tScanner s = new Scanner(System.in);\r\n\t\ttry {\r\n\t\t\ts = new Scanner(new FileReader(\"input.txt\"));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\ts.close();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tWriter out = null;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tout = new BufferedWriter(new OutputStreamWriter(\r\n\t              new FileOutputStream(\"output.txt\"), \"utf-8\"));\r\n\t\t}\r\n\t\t\r\n\t\tcatch ( IOException e ) {\r\n            e.printStackTrace();\r\n        }\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tint t = s.nextInt();\r\n\t\t\r\n\r\n\t\t\r\n\t\tint n, res1, res2;\r\n\t\t\r\n\t\tfor(int i = 0; i < t; i++)\r\n\t\t{ \t\r\n\t\t\tSystem.out.println(\"Case #\" + (i+1));\r\n\t\t\t\r\n\t\t\tn = s.nextInt();\r\n\t\t\t\r\n\t\t\tint[] a = new int[n];\r\n\t\t\t\r\n\t\t\tfor(int j = 0; j < n; j++)\r\n\t\t\t\ta[j] = s.nextInt();\n\t\t\tint n1 = a.length, res = 0;\n\t\t\tfor(int i1 = 0; i1 < n1-1; i1++)\n\t\t\t\tif(a[i1] > a[i1+1])\n\t\t\t\t\tres += a[i1] - a[i1+1];\r\n\t\t\t\r\n\t\t\tres1 = res;\n\t\t\tint rate = 0;\n\t\t\t\n\t\t\tint n2 = a.length, res3 = 0;\n\t\t\tfor(int i1 = 0; i1 < n2-1; i1++)\n\t\t\t\tif(rate < (a[i1] - a[i1+1]))\n\t\t\t\t\trate = a[i1] - a[i1+1];\n\t\t\t\n\t\t\tfor(int i2 = 0; i2 < n2-1; i2++)\n\t\t\t\tres3 += Math.min(a[i2], rate);\r\n\t\t\tres2 = res3;\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tout.write(\"Case #\"+(i+1)+\": \"+ res1 +\" \"+ res2 + \"\\n\");\r\n\t\t\t}\r\n\t\t\tcatch ( IOException e ) {\r\n\t            e.printStackTrace();\r\n\t        }\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\ttry {\r\n\t\tout.close();\r\n\t\t}\r\n\t\tcatch ( IOException e ) {\r\n            e.printStackTrace();\r\n        }\r\n\t\t\r\n\t\ts.close();\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "1209"}
{"func": "package googlejam1.p210;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Mushroom Monster\r\n */\r\npublic class ProblemA {\r\n\r\n    private static final String ID = \"gcj2015round1A/A-large\";\r\n\r\n    private static Scanner input;\r\n    private static PrintWriter output;\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            input = new Scanner(new File(\"data/\" + ID + \".in\"));\r\n            output = new PrintWriter(new FileWriter(\"data/\" + ID + \".out\"));\r\n            long time = System.currentTimeMillis();\n\t\t\tint T = input.nextInt();\n\t\t\tfor (int t = 1; t <= T; t++) {\n\t\t\t    int min1 = 0, min2 = 0, largestDiff = 0;\n\t\t\t\n\t\t\t    int N = input.nextInt();\n\t\t\t    int[] m = new int[N];\n\t\t\t    for (int i = 0; i < N; i++) {\n\t\t\t        m[i] = input.nextInt();\n\t\t\t        if (i > 0) {\n\t\t\t            int diff = m[i - 1] - m[i];\n\t\t\t            if (diff > 0) {\n\t\t\t                min1 += diff;\n\t\t\t                if (diff > largestDiff) {\n\t\t\t                    largestDiff = diff;\n\t\t\t                }\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }\n\t\t\t\n\t\t\t    for (int i = 0; i < N - 1; i++) {\n\t\t\t        if (m[i] >= largestDiff) {\n\t\t\t            min2 += largestDiff;\n\t\t\t        } else {\n\t\t\t            min2 += m[i];\n\t\t\t        }\n\t\t\t    }\n\t\t\t\n\t\t\t    output.printf(\"Case #%d: %d %d\\n\", t, min1, min2);\n\t\t\t}\n\t\t\toutput.flush();\n\t\t\toutput.close();\n\t\t\tinput.close();\n\t\t\ttime = System.currentTimeMillis() - time;\n\t\t\tSystem.out.printf(\"[%s] finished in %d ms\\n\", ID, time);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace(System.out);\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "1210"}
{"func": "package googlejam1.p211;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\npublic class MushroomMonster {\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n//\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\tint cases = Integer.parseInt(br.readLine());\r\n\t\tfor(int i =0; i<cases; i++){\r\n\t\t\tint numTimes = Integer.parseInt(br.readLine());\r\n\t\t\tString[] nums = br.readLine().split(\" \");\r\n\t\t\tint[] shrooms = new int[numTimes];\r\n\t\t\tfor(int j = 0; j < numTimes; j++) {\r\n\t\t\t\tshrooms[j] = Integer.parseInt(nums[j]);\r\n\t\t\t}\r\n\t\t\tint maxDecrease = 0;\r\n\t\t\tint case1shrooms = 0;\r\n\t\t\tint case2shrooms = 0;\r\n\t\t\tfor(int j = 1; j < numTimes; j++) {\r\n\t\t\t\tint diff = shrooms[j-1]-shrooms[j];\r\n//\t\t\t\tSystem.out.println(diff);\r\n\t\t\t\tif(diff > 0) {\r\n\t\t\t\t\tcase1shrooms += diff;\r\n\t\t\t\t}\r\n\t\t\t\tif(diff > maxDecrease) {\r\n\t\t\t\t\tmaxDecrease = diff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n//\t\t\tSystem.out.println(maxDecrease);\r\n\t\t\tfor(int j = 0; j < numTimes-1; j++) {\r\n\t\t\t\tif(shrooms[j] < maxDecrease) {\r\n\t\t\t\t\tcase2shrooms += shrooms[j];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcase2shrooms += maxDecrease;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + (i+1) +  \": \" + case1shrooms + \" \" + case2shrooms);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1211"}
{"func": "package googlejam1.p214;\nimport java.util.Scanner;\n\npublic class pro1 {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\t\n\t\tint T= scanner.nextInt();\n\n\t\tfor( int t=0; t<T; t++){\n\t\t\tint N = scanner.nextInt();\n\t\t\t\n\t\t\tint[] num = new int[N];\n\t\t\tint[] subt = new int[N-1];\n\t\t\tnum[0] = scanner.nextInt();\n\t\t\tint max = 0;\n\t\t\tfor( int i=0; i<N-1; i++){\n\t\t\t\tnum[i+1] = scanner.nextInt();\n\t\t\t\tsubt[i] = num[i] - num[i+1];\n\t\t\t\tmax = Math.max(subt[i], max);\n\t\t\t}\n\n\t\t\tint ans1 = 0;\n\t\t\tfor( int i=0; i<N-1;i++){\n\t\t\t\tif( subt[i] > 0){\n\t\t\t\t\tans1 += subt[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint ans2 = 0;\n\t\t\tfor( int i=0; i<N-1;i++){\n\t\t\t\tif( num[i] < max){\n\t\t\t\t\tans2 += num[i];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tans2 += max;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\n\t\t\tSystem.out.println(\"Case #\"+(t+1)+\": \"+ans1+\" \"+ans2);\t\t\t\n\t\t\t\n\t\t}\n\t}\n}\n", "idx": "1214"}
{"func": "package googlejam1.p216;\nimport java.util.*;\nimport java.io.*;\n\npublic class A {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        A r = new A();\n\t\t//Scanner in = new Scanner(System.in);\n\t\tScanner in = new Scanner(new File(\"al.in\"));\n\t\tPrintWriter out = new PrintWriter(\"al.out\");\n\t\tint t = in.nextInt();\n\t\tfor (int test = 1; test <= t; test++) {\n\t\t    int n = in.nextInt();\n\t\t    int[] a = new int[n];\n\t\t    for (int i = 0; i < n; i++)\n\t\t        a[i] = in.nextInt();\n\t\t    int cnt1 = 0;\n\t\t    for (int i = 0; i < n - 1; i++)\n\t\t        if (a[i + 1] < a[i])\n\t\t            cnt1 += a[i] - a[i + 1];\n\t\t\n\t\t    int max = 0;\n\t\t    for (int i = 0; i < n - 1; i++)\n\t\t        if (a[i] > a[i + 1])\n\t\t            max = Math.max(max, a[i] - a[i + 1]);\n\t\t    int cnt2 = 0;\n\t\t    for (int i = 0; i < n - 1; i++)\n\t\t        cnt2 += Math.min(max, a[i]);\n\t\t    //System.out.println(\"Case #\" + test+ \": \" + cnt1 + \" \" + cnt2);\n\t\t    out.println(\"Case #\" + test+ \": \" + cnt1 + \" \" + cnt2);\n\t\t}\n\t\t\n\t\tout.close();\n    }\n}", "idx": "1216"}
{"func": "package googlejam1.p217;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader in = new  BufferedReader(new InputStreamReader(System.in));\r\n\t\t\r\n\t\tint t = Integer.parseInt(in.readLine());\r\n\t\t\r\n\t\tfor (int i = 1; i <= t; i++) {\r\n\t\t\t\r\n\t\t\tint n = Integer.parseInt(in.readLine());\r\n\t\t\tString[] next = in.readLine().split(\" \");\r\n\t\t\tint[] mushrooms = new int[n];\r\n\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\tmushrooms[j] = Integer.parseInt(next[j]);\r\n\t\t\t}\r\n\r\n\t\t\tint[] diffs = new int[n-1];\r\n\t\t\tfor (int j = 1; j < n; j++) {\r\n\t\t\t\tdiffs[j-1] = mushrooms[j] - mushrooms[j-1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint first = 0;\r\n\t\t\tint second = 0;\r\n\t\t\t\r\n\t\t\tint smallestD = 9999999;\r\n\t\t\tfor (int j = 0; j < n - 1; j++) {\r\n\t\t\t\tif (diffs[j] < 0) first += Math.abs(diffs[j]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < n - 1; j++) {\r\n\t\t\t\tsmallestD = Math.min(smallestD, diffs[j]);\r\n\t\t\t}\r\n\t\t\tsmallestD = Math.abs(smallestD);\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < n - 1; j++) { \r\n\t\t\t\tsecond += Math.min(mushrooms[j], smallestD);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.format(\"Case #%d: %d %d\\n\", i, first, second);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1217"}
{"func": "package googlejam1.p218;\nimport java.util.Scanner;\r\n\r\n\r\npublic class MushroomMonster {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner reader = new Scanner(System.in);\r\n\t\tint testCases = reader.nextInt();\r\n\t\tfor(int t = 0; t < testCases; t++){\r\n\t\t\tint size = reader.nextInt();\r\n\t\t\tint last = 0;\r\n\t\t\tint first = 0;\r\n\t\t\tint maxdif = 0;\r\n\t\t\tint[] stuff = new int[size];\r\n\t\t\tfor(int i = 0; i < size; i++){\r\n\t\t\t\tint buff = reader.nextInt();\r\n\t\t\t\tstuff[i] = buff;\r\n\t\t\t\tif(i == 0){\r\n\t\t\t\t\tlast = buff;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tint add = last - buff;\r\n\t\t\t\t\tif(add > 0){\r\n\t\t\t\t\t\tfirst += add;\r\n\t\t\t\t\t\tif(add > maxdif){\r\n\t\t\t\t\t\t\tmaxdif = add;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlast = buff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint second = 0;\r\n\t\t\tfor(int i = 0; i < size-1; i++){\r\n\t\t\t\tif(stuff[i] > maxdif){\r\n\t\t\t\t\tsecond += maxdif;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tsecond += stuff[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + (t+1) + \": \" + first + \" \" + second);\r\n\t\t}\r\n\t\treader.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1218"}
{"func": "package googlejam1.p221;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.util.HashSet;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by yc14rp1 on 4/17/2015.\r\n */\r\npublic class z1_1 {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FileWriter fw = new FileWriter(\"C:\\\\output.txt\");\r\n        BufferedWriter out = new BufferedWriter(fw);\r\n        //String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\z111.txt\";\r\n        //String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\A-small-attempt0 (1).in\";\r\n        //String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\A-generated.in\";\r\n        String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\A-large (1).in\";\r\n        Scanner scanner = new Scanner(new File(pathname));\r\n        int tn = scanner.nextInt();\r\n        scanner.nextLine();\r\n        for (int ti = 1; ti <= tn; ti++) {\r\n            int n = scanner.nextInt();\n\t\t\tint[] l21 = new int[n];\n\t\t\tfor (int i1=0;i1<n;i1++) {\n\t\t\t    l21[i1] = scanner.nextInt();\n\t\t\t}\r\n            int[] l2 = l21;\r\n            //String s1 = scanner.next();\r\n            //String s2 = scanner.next();\r\n            int s1 = 0;\r\n            int mx = 0;\r\n            for (int i=1;i<n;i++) {\r\n                if (l2[i]<l2[i-1]) {\r\n                    int delta = l2[i - 1] - l2[i];\r\n                    s1 += delta;\r\n                    if (delta>mx) {\r\n                        mx = delta;\r\n                    }\r\n                }\r\n            }\r\n            int mx2 = 0;\r\n            int cr=0;\r\n            for (int i=1;i<n;i++) {\r\n                cr = l2[i-1];\r\n                if (l2[i-1]>mx) {\r\n                    mx2+=mx;\r\n                } else {\r\n                    mx2 +=l2[i-1];\r\n                }\r\n            }\r\n            String s;\r\n            s = \"Case #\" + ti + \": \"+s1+\" \"+mx2;\r\n            System.out.println(s);\r\n            out.write(s);\r\n            out.write(\"\\n\");\r\n        }\r\n        out.close();\r\n    }\r\n\r\n}\r\n", "idx": "1221"}
{"func": "package googlejam1.p222;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.util.Scanner;\n\n\npublic class exo1 \n{\n\tpublic static void main(String[] args) \n\t{\n\t\n\t\ttry{\n\t\t\tFile f = new File (\"output_exo1_large\");\n\t\t\t//File f=new File(\"output_exo1_small\");\n\t\t\t//File f=new File(\"output_exo1_test\");\n\t\t\t\n\t\t\tFileWriter fw = new FileWriter (f);\n\t\t\t\n\t\t\t\n\t\t\tScanner scan = new Scanner(System.in);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tscan = new Scanner(new FileReader(\"A-large.in\"));\n\t\t\t\t//scan = new Scanner(new FileReader(\"A-small-attempt0.in\"));\n\t\t\t\t//scan = new Scanner(new FileReader(\"A-test.in\"));\n\t\t\t}\n\t\t\tcatch(FileNotFoundException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t\tscan.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint T=scan.nextInt();\n\t\t\tSystem.out.println(\"T=\"+T);\n\t\t\tint N;\n\t\t\t\n\t\t\tfor (int test=1; test<=T; test++)\n\t\t\t{\n\t\t\t\tN=scan.nextInt();\n\t\t\t\tint[] tab=new int[N];\n\t\t\t\tfor (int k=0; k<N; k++)\n\t\t\t\t{\n\t\t\t\t\ttab[k]=scan.nextInt();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//methode 1\n\t\t\t\tint rep1=0;\n\t\t\t\tint rep2=0;\n\t\t\t\tint maxdiff=0;\n\t\t\t\tint aux;\n\t\t\t\tfor (int k=0; k<N-1; k++)\n\t\t\t\t{\n\t\t\t\t\taux=tab[k]-tab[k+1];\n\t\t\t\t\tif (tab[k]>tab[k+1])\n\t\t\t\t\t{\n\t\t\t\t\t\trep1+=(tab[k]-tab[k+1]);\n\t\t\t\t\t}\n\t\t\t\t\tif (aux>maxdiff)\n\t\t\t\t\t{\n\t\t\t\t\t\tmaxdiff=aux;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int k=0; k<N-1; k++)\n\t\t\t\t{\n\t\t\t\t\tif (tab[k]<maxdiff)\n\t\t\t\t\t{\n\t\t\t\t\t\trep2+=tab[k];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trep2+=maxdiff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfw.write(\"Case #\"+test+\": \"+rep1+\" \"+rep2+\"\\n\");\n\t\t\t}\n\t\t\t\n\t\t\tfw.close();\n\t\t\tSystem.out.println(\"FINI!! exo1\");\n\t\t\t\n\t\t\t}catch(Exception e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t\tSystem.out.println(\"erreur \u00c3\u00a9criture solution\");\n\t\t\t}\n\n\t}\n\n}\n", "idx": "1222"}
{"func": "package googlejam1.p224;\nimport java.util.Scanner;\nimport java.io.FileNotFoundException;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\nclass A\n{\n   public static void main(String[] args) throws FileNotFoundException\n   {\n      File f = new File(\"input1.txt\");\n      Scanner s = new Scanner(f);\n\n      int numTests = s.nextInt();\n\n      for(int i = 0; i < numTests; i++)\n      {\n         int steps = s.nextInt();\n         int[] hist = new int[steps];\n         int firstMethod = 0;\n         int maxEaten = 0;\n         int secondMethod = 0;\n\n         for(int j = 0; j < steps; j++)\n         {\n            hist[j] = s.nextInt();\n            if(j > 0)\n            {\n            if(hist[j] < hist[j-1])\n            {\n               firstMethod += hist[j - 1] - hist[j];\n               if(hist[j - 1] - hist[j] > maxEaten)\n               {\n                  maxEaten = hist[j-1] - hist[j];\n               }\n            }\n         }\n         }\n\n         for(int j = 0; j < steps - 1; j++)\n         {\n            if(hist[j] < maxEaten)\n            {\n               secondMethod += hist[j];\n            }\n            else\n            {\n               secondMethod += maxEaten;\n            }\n         }\n\n         System.out.println(\"Case #\" + (i+1) + \": \" + firstMethod + \" \" + secondMethod);\n      }\n\n\n   }\n}", "idx": "1224"}
{"func": "package googlejam1.p226;\nimport java.util.*;\n\nclass Main {\n  public static void main(String[] arg) {\n    Scanner sc = new Scanner(System.in);\n    int tcc = sc.nextInt();\n    for (int tc = 1; tc <= tcc; ++tc) {\n      int n = sc.nextInt();\n      int[] arr = new int[n];\n      for (int i = 0; i < n; ++i) arr[i] = sc.nextInt();\n      int a = 0;\n      for (int i = 1; i < n; ++i) a += Math.max(0, arr[i-1] - arr[i]);\n      int br = 0;\n      for (int i = 1; i < n; ++i) br = Math.max(br, arr[i-1] - arr[i]);\n      int b = 0;\n      for (int i = 0; i < n - 1; ++i) b += Math.min(br, arr[i]);\n      System.out.printf(\"Case #%d: %d %d%n\", tc, a, b);\n    }\n  }\n}\n", "idx": "1226"}
{"func": "package googlejam1.p229;\nimport static java.util.stream.Collectors.*;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Stream;\n\npublic class Mushroom {\n  public static void main(String[] args) throws IOException {\n    try (Stream<String> lines = Files.lines(Paths.get(\"CodeJam/in/AA.in\"))) {\n      List<String> inputs = lines.collect(toList());\n      int count = Integer.parseInt(inputs.get(0));\n      for (int i = 0; i < count; i++) {\n        String[] repeat = inputs.get(i * 2 + 2).split(\"\\\\s\");\n        int[] nums = Arrays.stream(repeat).mapToInt(Integer::parseInt).toArray();\n\t\tint prev = 0;\n\t\tint s1 = 0;\n\t\tfor (int i1 = 0; i1 < nums.length; i1++) {\n\t\t  if (prev > nums[i1]) {\n\t\t    s1 += prev - nums[i1];\n\t\t  }\n\t\t  prev = nums[i1];\n\t\t}\n\t\tint max = 0;\n\t\tfor (int i3 = 0; i3 < nums.length - 1; i3++) {\n\t\t  int diff = nums[i3] - nums[i3 + 1];\n\t\t  if (diff > 0 && max < diff) {\n\t\t    max = diff;\n\t\t  }\n\t\t}\n\t\tint s2 = 0;\n\t\tfor (int i2 = 0; i2 < nums.length - 1; i2++) {\n\t\t  s2 += Math.min(max, nums[i2]);\n\t\t}\n\n        String result = s1 + \" \" + s2;\n        System.out.println(\"Case #\" + (i + 1) + \": \" + result);\n      }\n    }\n  }\n}\n", "idx": "1229"}
{"func": "package googlejam1.p230;\nimport java.util.*;\n\npublic class GC1AA_15{\n\tpublic static void main(String args[]){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\tfor(int ca = 1; ca <= T; ca++){\n\t\t\tint N = sc.nextInt();\n\t\t\tint arr[] = new int[N];\n\t\t\tfor(int i = 0; i < N ; i++)\n\t\t\t\tarr[i] = sc.nextInt();\n\n\t\t\tint a = 0;\n\t\t\tint b = 0;\n\n\t\t\tint max = 0;\n\t\t\tfor(int i = 0; i < N-1; i++){\n\t\t\t\tif(arr[i] > arr[i+1]){\n\t\t\t\t\ta += arr[i] - arr[i+1];\n\t\t\t\t\tmax = Math.max(max,arr[i] - arr[i+1]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor(int i = 0; i < N-1; i++)\n\t\t\t\tb += Math.min(max,arr[i]);\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\",ca,a,b);\n\t\t}\n\t}\n}", "idx": "1230"}
{"func": "package googlejam1.p231;\nimport java.io.*;\nimport java.util.*;\n\nclass Mushroom {\n  public static void main (String [] args) throws IOException {\n    BufferedReader f = new BufferedReader(new FileReader(\"A-large.in\"));\n    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"A-large.out\")));\n    StringTokenizer st = new StringTokenizer(f.readLine());\n    int num = Integer.parseInt(st.nextToken());\n    for(int i=0;i<num;i++){\n    \tst = new StringTokenizer(f.readLine());\n    \tint n = Integer.parseInt(st.nextToken());\n    \tst = new StringTokenizer(f.readLine());\n    \tint[] a = new int[n];\n    \tfor(int j=0;j<n;j++)\n    \t\ta[j] = Integer.parseInt(st.nextToken());\n    \tlong cnt1=0,cnt2=0,max=0;\n    \tfor(int j=0;j<n-1;j++){\n    \t\tmax = (max<a[j]-a[j+1])? a[j]-a[j+1]:max;\n    \t\tcnt1+=(a[j]-a[j+1]>0)?a[j]-a[j+1]:0;\n    \t}\n    \tfor(int j=0;j<n-1;j++){\n    \t\tcnt2+=(a[j]>=max)?max:a[j];\n    \t}\n    \tout.format(\"Case #%d: %d %d\\n\",i+1,cnt1,cnt2);\n    }\n    out.close();                                  // close the output file\n    System.exit(0);                               // don't omit this!\n  }\n}", "idx": "1231"}
{"func": "package googlejam1.p232;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * Created by xuchen on 4/17/15.\n */\npublic class MushroomMonster {\n    public static void main(String[] args) {\n\n        try {\n            Scanner scanner = new Scanner(new File(\"src/MushroomMonster/A-large.in\"));\n            PrintWriter writer = new PrintWriter(new File(\"src/MushroomMonster/result.txt\"));\n\n            int caseCnt = scanner.nextInt();\n\n            for (int i = 0; i < caseCnt; i++){\n\n                int mushRoomCnt = scanner.nextInt();\n                int firstCnt = 0;\n                int secondCnt = 0;\n\n                int firstNum = scanner.nextInt();\n\n                int[] nums = new int[mushRoomCnt];\n                nums[0] = firstNum;\n\n                int rate = 0;\n\n                for (int j = 1; j < mushRoomCnt; j++){\n\n                    int secondNum = scanner.nextInt();\n                    nums[j] = secondNum;\n\n                    if (firstNum >= secondNum) {\n                        firstCnt += firstNum - secondNum;\n                        rate = Math.max(firstNum - secondNum,rate);\n                    }\n\n                    firstNum = secondNum;\n                }\n\n                for (int j = 0; j < mushRoomCnt - 1; j++){\n                    secondCnt += Math.min(rate,nums[j]);\n                }\n\n                writer.println(\"Case #\" + (i + 1) + \": \" + firstCnt + \" \" + secondCnt);\n            }\n\n            writer.close();\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n", "idx": "1232"}
{"func": "package googlejam1.p234;\n// gengkev\r\n// This is the brute-force solution.\r\n// Useful for checking answers with other program, probably.\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class mushroommonster {\r\n\tprivate static final boolean useStandardInput = false;\r\n\tprivate static final String filename = \"round1A/A-large\";\r\n\tprivate static final boolean log = false;\r\n\r\n\t\r\n\r\n\r\n\t// ----------------------------------------------------------------------------------------------------------------\r\n\t// competition helper methods\r\n\r\n\tprivate static BufferedReader reader;\r\n\tprivate static BufferedWriter writer;\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tif (useStandardInput) {\r\n\t\t\treader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\twriter = new BufferedWriter(new StringWriter());\r\n\t\t} else {\r\n\t\t\treader = new BufferedReader(new FileReader(filename + \".in\"));\r\n\t\t\twriter = new BufferedWriter(new FileWriter(filename + \".out\"));\r\n\t\t}\r\n\t\tfinal int T = Integer.parseInt(reader.readLine());\n\t\t\n\t\tfor (int i = 1; i <= T; i++) {\n\t\t\tint N = Integer.parseInt(reader.readLine());\n\t\t\tString[] strings = reader.readLine().split(\"\\\\s\");\n\t\t\tint L = strings.length;\n\t\t\tint[] ints = new int[L];\n\t\t\tfor (int i3 = 0; i3 < L; i3++) {\n\t\t\t\tints[i3] = Integer.parseInt(strings[i3]);\n\t\t\t}\n\t\t\tint[] mushrooms = ints;\n\t\t\tint N1 = mushrooms.length;\n\t\t\tint total = 0;\n\t\t\tfor (int i1 = 1; i1 < N1; i1++) {\n\t\t\t\t// if mushrooms decrease\n\t\t\t\tif (mushrooms[i1] < mushrooms[i1-1]) {\n\t\t\t\t\tint diff = mushrooms[i1-1] - mushrooms[i1];\n\t\t\t\t\ttotal += diff;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint result1 = total;\n\t\t\tint N2 = mushrooms.length;\n\t\t\tint max = 0;\n\t\t\tfor (int i2 = 1; i2 < N2; i2++) {\n\t\t\t\t// if mushrooms decrease\n\t\t\t\tif (mushrooms[i2] < mushrooms[i2-1]) {\n\t\t\t\t\tint diff = mushrooms[i2-1] - mushrooms[i2];\n\t\t\t\t\tif (diff > max) max = diff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (log) System.out.println(\"max = \" + max);\n\t\t\t\n\t\t\tint total1 = 0;\n\t\t\tfor (int i1 = 1; i1 < N2; i1++) {\n\t\t\t\tint x = Math.min(mushrooms[i1-1], max);\n\t\t\t\ttotal1 += x;\n\t\t\t}\n\t\t\tint result2 = total1;\n\t\t\tString output = \"Case #\" + i + \": \" + String.valueOf(result1) + \" \" + String.valueOf(result2) + \"\\n\";\n\t\t\tSystem.out.print(\"OUT: \" + output);\n\t\t\tif (!useStandardInput) {\n\t\t\t\twriter.write(output);\n\t\t\t}\n\t\t}\r\n\t\treader.close();\r\n\t\twriter.close();\r\n\t\tif (!useStandardInput)\r\n\t\t\tSystem.out.println(\"FINISHED for file \" + filename);\r\n\t\tSystem.exit(0);\r\n\t}\r\n}\r\n", "idx": "1234"}
{"func": "package googlejam1.p238;\nimport java.util.*;\r\n\r\npublic class A {\r\npublic static void main(String [] args) {\r\n\tScanner scanner = new Scanner(System.in);\r\n\tint nCase = scanner.nextInt();\r\n\t\r\n\tfor (int nc = 1; nc <= nCase; nc++) {\r\n\t\tint N = scanner.nextInt();\r\n\t\tint[] m = new int[N];\r\n\t\tfor (int i = 0; i < N; i++)\r\n\t\t\tm[i] = scanner.nextInt();\r\n\t\t\r\n\t\tint y = 0;\r\n\t\t\r\n\t\tfor (int i = 1; i < N; i++) {\r\n\t\t\tif (m[i] < m[i-1])\r\n\t\t\t\ty += m[i-1] - m[i];\r\n\t\t}\r\n\t\t\r\n\t\tint z = 0;\r\n\t\tint max = 0;\r\n\t\t//System.out.print(\"max:\");\r\n\t\tfor (int i = 0; i < N-1; i++) {\r\n\t\t\tmax = Math.max(m[i] - m[i+1], max);\r\n\t\t\t//System.out.print(\" \"+max);\r\n\t\t}\r\n\t\t//System.out.println();\r\n\t\tfor (int i = 0; i < N-1; i++) {\r\n\t\t\tz += Math.min(m[i], max);\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(\"Case #\" + nc + \": \" + y + \" \" + z);\r\n\t}\r\n}\r\n}", "idx": "1238"}
{"func": "package googlejam1.p241;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Scanner;\r\nimport java.util.StringTokenizer;\r\n\r\nclass Main\r\n{\r\n\tstatic BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\tstatic Scanner sc = new Scanner(new InputStreamReader(System.in));\r\n\r\n\tpublic static void main (String[] args) throws java.lang.Exception {\r\n\t\tint T = Integer.parseInt(br.readLine());\r\n\t\tfor (int i=0; i<T; i++){\r\n\t\t\tint N = Integer.parseInt(br.readLine());\n\t\t\tint[] ms = new int[1000];\n\t\t\tStringTokenizer data = new StringTokenizer(br.readLine(), \" \");\n\t\t\tfor (int i3=0; i3<N; i3++) {\n\t\t\t\tms[i3] = Integer.parseInt(data.nextToken());\n\t\t\t}\n\t\t\t\n\t\t\tint ansY = 0;\n\t\t\tint angle = 0;\n\t\t\tfor (int i1=1; i1<N; i1++) {\n\t\t\t\tansY += Math.max(0, ms[i1-1] - ms[i1]);\n\t\t\t\tangle = Math.max(angle, ms[i1-1] - ms[i1]);\n\t\t\t}\n\t\t\t\n\t\t\tint ansZ = 0;\n\t\t\tfor (int i2=1; i2<N; i2++) {\n\t\t\t\tansZ += Math.min(ms[i2-1], angle);\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + ansY + \" \" + ansZ);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1241"}
{"func": "package googlejam1.p243;\n/**\n * Created by chris on 4/17/15.\n */\nimport java.util.*;\nimport java.io.*;\npublic class shroom {\n    public static void main(String[] args) throws Exception{\n        Scanner in = new Scanner(new File(\"A-large.in\"));\n        FileWriter out = new FileWriter(new File(\"aOut.txt\"));\n        int numcases = in.nextInt();\n        for(int casenum = 1; casenum  <= numcases; casenum++) {\n            int numtimes = in.nextInt();\n            int[] map =  new int[numtimes];\n            for(int i = 0; i < numtimes; i++) {\n                map[i] = in.nextInt();\n            }\n            int smallestRate = 0;\n            //method 1\n            int method1 = 0;\n            for(int i = 1; i < map.length; i++) {\n                if(map[i] < map[i - 1]) {\n                    method1 += map[i - 1] - map[i];\n                    smallestRate = Math.max(smallestRate, map[i-1] - map[i]);\n                }\n            }\n            System.out.println(\"method1: \"+method1);\n\n            //method2\n            int method2 = 0;\n            double rate = smallestRate;\n                for(int i = 0; i < map.length - 1; i++) {\n                    method2 += Math.min(map[i], rate);\n                }\n            System.out.println(\"method2: \"+method2);\n            out.write(\"Case #\"+casenum+\": \"+method1+\" \"+method2+\"\\n\");\n        }\n        out.close();\n    }\n}\n//23 90 40 0 100 9", "idx": "1243"}
{"func": "package googlejam1.p245;\n\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.Writer;\r\nimport java.util.Comparator;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by admin on 4/6/2015.\r\n */\r\npublic class A {\r\n\r\n    private Scanner scanner;\r\n    private Writer writer;\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        A a = new A();\r\n        a.scanner = new Scanner(new FileInputStream(\"src/cj/y2015/r1a/A-large.in\"));\n\t\ta.writer = new FileWriter(\"src/cj/y2015/r1a/A-large.out\", false);\n\t\tint t = a.scanner.nextInt();\n\t\tfor (int i=0; i<t; i++) {\n\t\t    int n = a.scanner.nextInt();\n\t\t    int[] mn = new int[n];\n\t\t    long eat1 = 0;\n\t\t    long eat2 = 0;\n\t\t    int max_d = 0;\n\t\t    for (int j=0; j<n; j++) {\n\t\t        mn[j] = a.scanner.nextInt();\n\t\t        if (j>0) {\n\t\t            if (mn[j]<mn[j-1]) {\n\t\t                eat1 += (mn[j-1]-mn[j]);\n\t\t                int tmp = mn[j-1]-mn[j];\n\t\t                if (tmp>max_d)\n\t\t                    max_d = tmp;\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    System.out.println(\"max_d=\" + max_d);\n\t\t    double r = ((double)max_d)/10;\n\t\t    // simulate\n\t\t    for (int j=0; j<n; j++) {\n\t\t        if (j>0) {\n\t\t            int prev = mn[j-1];\n\t\t            int cur = mn[j];\n\t\t            if (prev>(r*10)) {\n\t\t                eat2 += r*10;\n\t\t            } else {\n\t\t                eat2 += prev;\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t\n\t\t\n\t\t    a.writer.write(\"Case #\" +(i+1)+\": \"+eat1+\" \"+eat2+\"\\n\");\n\t\t    System.out.println(\"Case #\" + (i + 1) + \": \" + eat1 + \" \" + eat2);\n\t\t}\n\t\ta.scanner.close();\n\t\ta.writer.close();\r\n    }\r\n}\r\n", "idx": "1245"}
{"func": "package googlejam1.p249;\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class mushmonster {\r\n\r\n\r\n\t  public static void main (String [] args) throws IOException {\r\n\t    // Use BufferedReader rather than RandomAccessFile; it's much faster\r\n\t    BufferedReader f = new BufferedReader(new FileReader(\"A-large(1).in\"));\r\n\t                                                  // input file name goes above\r\n\t    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"mush.out.txt\")));\r\n\t    // Use StringTokenizer vs. readLine/split -- lots faster\r\n\t    StringTokenizer st = new StringTokenizer(f.readLine());\r\n\t\t\t\t\t\t\t  // Get line, break into tokens\r\n\t    \r\n\t   //enter program here\r\n\t    \r\n\t    String answer =\"\";\r\n\t    int numCases = Integer.parseInt(st.nextToken());\r\n\t    for (int i = 0; i<numCases;i++){\r\n\t\t   st = new StringTokenizer(f.readLine());\r\n\t\t   LinkedList<Integer> arr = new LinkedList();\r\n\t    \tint numStacks = Integer.parseInt(st.nextToken());\r\n\t    \tst = new StringTokenizer(f.readLine());\r\n\t    \tint totalDrop = 0;\r\n\t    \tint maxDrop = 0;\r\n\t    \tint lastNum = 0;\r\n\t    \tint newNum = 0;\r\n\t    \tfor (int j = 0;j<numStacks;j++){\r\n\t    \t\tlastNum = newNum;\r\n\t    \t\tnewNum = Integer.parseInt(st.nextToken());\r\n\t    \t\tarr.add(newNum);\r\n\t    \t\tif (lastNum-newNum>maxDrop){\r\n\t    \t\t\tmaxDrop = lastNum-newNum;\r\n\t    \t\t}\r\n\t    \t\tif (lastNum-newNum>0){\r\n\t    \t\t\ttotalDrop +=lastNum-newNum;\r\n\t    \t\t}\r\n\t    \t}\r\n\t    \t\r\n\t    \tint totMaxDrop =0;\r\n\t    \tfor (int j = 0; j<arr.size()-1;j++){\r\n\t    \t\tif (arr.get(j)-maxDrop<0){\r\n\t    \t\t\ttotMaxDrop+=arr.get(j);\r\n\t    \t\t}else{\r\n\t    \t\t\ttotMaxDrop+=maxDrop;\r\n\t    \t\t}\r\n\t    \t}\r\n\t    \t\r\n\t    \t\r\n\t    \t\r\n\t    \t\r\n\t    \tSystem.out.println(\"Case #\"+(i+1)+\": \"+totalDrop+\" \"+totMaxDrop);\r\n\t\t    out.println(\"Case #\"+(i+1)+\": \"+totalDrop+\" \"+totMaxDrop);\r\n\t    }\r\n\t    // answer output\r\n\r\n    \tout.close();\t    \r\n\t    System.exit(0);                               // don't omit this!\r\n\t  }\r\n\r\n}", "idx": "1249"}
{"func": "package googlejam1.p250;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class p1 \r\n{\r\n  public static void main (String[]args)throws IOException\r\n  {\r\n    Scanner s=new Scanner (new File(\"A-large (1).in\"));\r\n    PrintWriter out=new PrintWriter(new FileWriter(\"out.txt\"));\r\n    //Scanner s=new Scanner (new File(\"in.txt\"));\r\n    \r\n    int cases=s.nextInt();\r\n    for (int n=0;n<cases;n++)\r\n    {\r\n      int min1=0;\r\n      int min2=0;\r\n      int dif=0;\r\n      int k=s.nextInt();\r\n      int []plate=new int[k];\r\n      for (int x=0;x<k;x++)\r\n      {\r\n        plate[x]=s.nextInt();\r\n      }\r\n      for (int x=1;x<k;x++)\r\n      {\r\n        if (plate[x-1]>plate[x])\r\n        {\r\n          int temp=plate[x-1]-plate[x];\r\n          min1+=temp;\r\n          if (temp>dif)\r\n            dif=temp;\r\n        }\r\n      }\r\n      for (int x=0;x<k-1;x++)\r\n      {\r\n        min2+=Math.min(dif,plate[x]);\r\n      }\r\n      \r\n      \r\n      out.println (\"Case #\"+(n+1)+\": \"+min1+\" \"+min2);\r\n      //System.out.println (\"Case: #\"+(n+1)+\": \"+min1+\" \"+min2);\r\n    }\r\n    out.close();\r\n  }\r\n}", "idx": "1250"}
{"func": "package googlejam1.p255;\nimport java.util.StringTokenizer;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\npublic class Mushroom{\n\tstatic int[] arr = new int[1002];\n\tpublic static void main(String[] args) throws Exception{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint T = Integer.parseInt(br.readLine().trim());\n\t\tfor(int i = 1; i <= T; i++){\n\t\t\tint N = Integer.parseInt(br.readLine().trim());\n\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tint maxDiff = 0;\n\t\t\tint methodA = 0;\n\t\t\tfor(int j = 0; j < N; j++){\n\t\t\t\tarr[j] = Integer.parseInt(st.nextToken());\n\t\t\t\tif(j != 0 && arr[j] < arr[j-1]){\n\t\t\t\t\tmethodA += (arr[j-1] - arr[j]);\n\t\t\t\t\tif(arr[j-1] - arr[j] > maxDiff)\tmaxDiff = arr[j-1] - arr[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tint methodB = 0;\n\t\t\tif(maxDiff != 0){\n\t\t\t\tfor(int j = 0; j < N - 1; j++)\n\t\t\t\t\tmethodB += Math.min(arr[j], maxDiff);\n\t\t\t}\n\t\t\tsb.append(String.format(\"Case #%d: %d %d\\n\", i, methodA, methodB));\n\t\t}\n\n\t\tSystem.out.print(sb);\n\t\tbr.close();\n\t}\n\n\n\n}", "idx": "1255"}
{"func": "package googlejam1.p256;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n    private static final String PATTERN = \"CASE #%d: %s\";\r\n    private static final String PROBLEM = \"A\";\r\n\r\n    //private static final String NAME = PROBLEM + \".in\";\r\n    //private static final String NAME = PROBLEM+\"-small-attempt1.in\";\r\n    private static final String NAME = PROBLEM+\"-large.in\";\r\n    //private static final String OUT = PROBLEM + \".out\";\r\n    //private static final String OUT = PROBLEM+\"-small-attempt1.out\";\r\n    private static final String OUT = PROBLEM+\"-large.out\";\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Scanner sc = new Scanner(new File(NAME));\r\n        PrintWriter pw = new PrintWriter(OUT);\r\n        int testCount = sc.nextInt();\r\n        sc.nextLine();\r\n        for (int i = 0; i < testCount; i++) {\r\n            sc.nextLine();\n\t\t\tString[] temp = sc.nextLine().split(\" \");\n\t\t\tList<Integer> x = new ArrayList<>();\n\t\t\tfor (String s : temp) {\n\t\t\t    x.add(Integer.parseInt(s));\n\t\t\t}\n\t\t\tlong total0 = 0;\n\t\t\tlong total1 = 0;\n\t\t\tint maxMin = 0;\n\t\t\tint prev = x.get(0);\n\t\t\tfor (int i1 = 1; i1 < x.size(); i1++) {\n\t\t\t    Integer current = x.get(i1);\n\t\t\t    if (current < prev) {\n\t\t\t        total0 += prev - current;\n\t\t\t        maxMin = Math.max(maxMin, prev - current);\n\t\t\t    }\n\t\t\t    prev = current;\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i2 = 0; i2 < x.size() - 1; i2++) {\n\t\t\t    total1 += Math.min(maxMin, x.get(i2));\n\t\t\t}\n\t\t\tString sol = \"\" + total0 + \" \" + total1;\r\n            System.out.println(String.format(PATTERN, i + 1, sol));\r\n            pw.println(String.format(PATTERN, i + 1, sol));\r\n        }\r\n        pw.flush();\r\n        pw.close();\r\n    }\r\n}\r\n", "idx": "1256"}
{"func": "package googlejam1.p257;\nimport java.util.*;\npublic class cj_01 {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tint t=0;\n\t\twhile(t<n){\n\t\t\tt++;\n\t\t\tlong result=0;\n\t\t\tlong result2=0;\n\t\t\tlong maxDis=0;\n\t\t\tint n1=sc.nextInt();\n\t\t\tlong[] a=new long[n1];\n\t\t\tfor(int i=0;i<n1;i++)\n\t\t\t\ta[i]=sc.nextInt();\n\t\t\tfor(int i=1;i<n1;i++)\n\t\t\t\tif(a[i]<a[i-1])\n\t\t\t\t\tresult+=a[i-1]-a[i];\n\t\t\tfor(int i=0;i<n1-1;i++)\n\t\t\t\tmaxDis=Math.max(a[i]-a[i+1],maxDis);\n\t\t\tfor(int i=0;i<n1-1;i++)\n\t\t\t\tresult2+=Math.min(maxDis, a[i]);\n\t\t\tSystem.out.println(\"Case #\"+t+\": \"+result+\" \"+result2);\n\t\t}\n\t}\n\n}\n", "idx": "1257"}
{"func": "package googlejam1.p258;\n//Author Jon Keenan\nimport java.util.Scanner;\npublic class problem1{\n     \n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint numTestCases = sc.nextInt();\n\t\t\n\t\t//Variable declarations\n\t\tint N,m,a,b,c,d,temp;\n\t\tint[] arr;\n\t\t\n\t\t/*\n\n\t\ta = min amount from 1st method\n\n\t\tb = min amount from 2nd method\n\n\t\t*/\n\n\t\t\n\t\tfor (int i = 0; i < numTestCases; i++) {\n\t\t\t//Main working area//\t\t \n\t\t\tN = sc.nextInt();\n\t\t\tarr = new int[N];\n\t\t\t//Input//\n\t\t\tfor(int j = 0; j < N; j++) {\n\t\t\t\tarr[j] = sc.nextInt();\n\t\t\t}\n\t\t  \n\t\t\t//Calculate A\n\t\t\ta=0;\n\t\t\tfor(int j = 0; j < N-1; j++) {\n\t\t\t\td = arr[j] - arr[j+1];\t\t\t\n\t\t\t\tif(d > 0){\n\t\t\t\t\ta+=d;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\n\n\n\t\t\t//Calculate B\n\t\t\tb=0;\n\t\t\ttemp = 0;\n\t\t\tfor(int j = 0; j < N-1; j++) {\n\t\t\t\tc = arr[j] - arr[j+1];\n\n\n\t\t\t\tif(c > 0 && c > temp){\t\n\t\t\t\t\ttemp = c;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\n\t\t\tfor(int j = 0; j < N-1; j++) {\n\t\t\t\tc = arr[j];\n\n\t\t\t\t\n\t\t\t\tif(c >= temp){\t\n\t\t\t\t\tb += temp;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tb += c;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\n\n\t\t\t\n\n\n\t\t\t//Output//\n\t\t\tSystem.out.println(\"Case #\"+ (i+1) +\": \" + a + \" \" + b);\n\n\t\t}\n\t}\n}\n", "idx": "1258"}
{"func": "package googlejam1.p259;\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * Created by noMoon on 2015-04-17.\n */\npublic class Mushroom {\n\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"A-large.in.txt\");\n//        File file = new File(\"Mushroom.in\");\n        File outputFile = new File(\"Mushroom.out\");\n        BufferedWriter bw = new BufferedWriter(new FileWriter(outputFile));\n        BufferedReader br = new BufferedReader(new InputStreamReader(\n                new FileInputStream(file)));\n        int numberOfTestCases = Integer.valueOf(br.readLine());\n        int count = 0;\n        while (count++ < numberOfTestCases) {\n            int n=Integer.valueOf(br.readLine());\n            String[] params=br.readLine().split(\" \");\n            long a=0;\n            long rate=0;\n            int[] mushrooms=new int[n];\n            for (int i=0;i<n;i++){\n                mushrooms[i]=Integer.valueOf(params[i]);\n                if(i>0) {\n                    int minus = mushrooms[i - 1] - mushrooms[i];\n                    if (minus > 0) {\n                        a += minus;\n                    }\n                    if (rate < minus) {\n                        rate = minus;\n                    }\n                }\n            }\n            long b=0;\n            for (int i=0;i<n-1;i++){\n                if(mushrooms[i]>0){\n                    if(mushrooms[i]>rate){\n                        b+=rate;\n                    }else{\n                        b+=mushrooms[i];\n                    }\n                }\n            }\n\n\n            bw.write(\"Case #\" + String.valueOf(count) + \": \" + String.valueOf(a) + \" \" + String.valueOf(b));\n            bw.newLine();\n        }\n\n        bw.close();\n        br.close();\n    }\n}\n", "idx": "1259"}
{"func": "package googlejam1.p260;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Mushroom\r\n{\r\n\tpublic static int n;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tScanner sc = new Scanner(new File(\"Mushroom.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"Mushroom.out\")));\r\n\t\t\r\n\t\tn = sc.nextInt();\r\n\t\tfor (int i = 0; i < n; i++)\r\n\t\t{\r\n\t\t\tint size = sc.nextInt();\r\n\t\t\tArrayList<Integer> plate = new ArrayList<Integer>();\r\n\t\t\tfor (int j = 0; j < size; j++)\r\n\t\t\t{\r\n\t\t\t\tplate.add(sc.nextInt());\r\n\t\t\t}\n\t\t\t//get the first number and the max diff\n\t\t\tint num1 = 0;\n\t\t\tint max = 0;\n\t\t\tfor (int i2 = 0; i2 < plate.size() - 1; i2++)\n\t\t\t{\n\t\t\t\tint med = plate.get(i2) - plate.get(i2+1);\n\t\t\t\tif (med > 0) num1 += med;\n\t\t\t\tif (med > max) max = med;\n\t\t\t}\n\t\t\t\n\t\t\t//she eats at max per 10 seconds\n\t\t\t\n\t\t\t//get the second number\n\t\t\tint num2 = 0;\n\t\t\tfor (int i1 = 0; i1 < plate.size() - 1; i1++)\n\t\t\t{\n\t\t\t\tnum2 += Math.min(plate.get(i1), max);\n\t\t\t}\r\n\t\t\tString ans = \"\" + num1 + \" \" + num2;\r\n\t\t\tout.println(\"Case #\" + (i+1) + \": \" + ans);\r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t\tSystem.exit(0);\r\n\t}\r\n}", "idx": "1260"}
{"func": "package googlejam1.p261;\nimport java.util.*;\r\n\r\npublic class Main1A2New {\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\t\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\t\r\n\t\tint numCases = in.nextInt();\r\n\t\t\r\n\t\tfor(int Case = 0; Case < numCases; Case++){\r\n\t\t\t\r\n\t\t\tint times = in.nextInt();\r\n\t\t\tint[] mushs = new int [times];\r\n\t\t\tlong consumptionOne = 0;\r\n\t\t\tlong consumptionTwo = 0;\r\n\t\t\tlong maxRate = 0;\r\n\t\t\tfor(int i = 0; i < times; i++){\r\n\t\t\t\tmushs[i] = in.nextInt();\r\n\t\t\t\tif(i > 0 && mushs[i] < mushs[i-1]){\r\n\t\t\t\t\tconsumptionOne += mushs[i-1] - mushs[i];\r\n\t\t\t\t}\r\n\t\t\t\tif(i > 0 && (mushs[i-1] - mushs[i] > maxRate)){\r\n\t\t\t\t\tmaxRate = mushs[i-1] - mushs[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconsumptionTwo = maxRate*(times-1);\r\n\t\t\tfor(int i = 0; i < times - 1; i++){\r\n\t\t\t\tif (mushs[i] < maxRate){\r\n\t\t\t\t\tconsumptionTwo = consumptionTwo + mushs[i] - maxRate;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + (Case+1) + \": \" + consumptionOne + \" \" + consumptionTwo);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}", "idx": "1261"}
{"func": "package googlejam1.p262;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class Task1 {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tFile file = new File(\"D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/A-large.in\");\r\n\t\tPrintStream out = new PrintStream(new FileOutputStream(\"D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/A-large.out\"));\r\n\t\tSystem.setOut(out);\r\n\t\t\r\n\t\tScanner sc = new Scanner(file);\r\n\t\tint T = sc.nextInt();\r\n\t\tint[] result1 = new int[T];\r\n\t\tint[] result2 = new int[T];\r\n\t\t\r\n\t\tfor (int i = 0; i < T; ++i)\r\n\t\t{\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tresult2[1] = 0;\r\n\t\t\tresult2[i] = 0;\r\n\t\t\tint eatTempo = 0;\r\n\t\t\tint[] pieces = new int[N];\r\n\t\t\tpieces[0] = sc.nextInt();\r\n\t\t\tfor (int j = 1; j < N; ++j)\r\n\t\t\t{\r\n\t\t\t\tpieces[j] = sc.nextInt();\r\n\t\t\t\tresult1[i] += Math.max(0, pieces[j - 1] - pieces[j]);\r\n\t\t\t\teatTempo = Math.max(eatTempo, pieces[j - 1] - pieces[j]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < N - 1; ++j)\r\n\t\t\t\tresult2[i] += Math.min(eatTempo, pieces[j]);\r\n\t\t}\r\n\t\tsc.close();\r\n\t\t\r\n\t\tfor (int i = 0; i < T; ++i)\r\n\t\t\tSystem.out.println(String.format(\"Case #%d: %d %d\", i + 1, result1[i], result2[i]));\r\n\t}\r\n}\r\n\r\n\r\n/*\r\nProblem\r\n\r\n\r\n*/", "idx": "1262"}
{"func": "package googlejam1.p265;\n\n\nimport java.io.*;\nimport java.util.*;\n\npublic class P1 {\n\tpublic static final String filename = \"A-large\";\n\tpublic static Scanner in;\n\tpublic static PrintStream out;\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tin = new Scanner(new File(filename + \".in\"));\n\t\tout = new PrintStream(new FileOutputStream(filename + \".out\"));\n\t\t\n\t\tint num = Integer.parseInt(in.nextLine());\n\t\tfor (int i = 1; i <= num; i++) {\n\t\t\tString line = in.nextLine();\n\t\t\tint n = Integer.parseInt(line);\n\t\t\tint[] arr = new int[n];\n\t\t\tString[] ss = in.nextLine().split(\" \");\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tarr[j] = Integer.parseInt(ss[j]);\n\t\t\t}\n\t\t\tint sum = 0;\n\t\t\tfor (int i1 = 0; i1 < arr.length - 1; i1++) {\n\t\t\t\tif (arr[i1] > arr[i1 + 1])\n\t\t\t\t\tsum += arr[i1] - arr[i1 + 1];\n\t\t\t}\n\t\t\tint res1 = sum;\n\t\t\tint sum1 = 0;\n\t\t\tint rate = 0;\n\t\t\tfor (int i2 = 0; i2 < arr.length - 1; i2++) {\n\t\t\t\tif (arr[i2] - arr[i2 + 1] > rate)\n\t\t\t\t\trate = arr[i2] - arr[i2 + 1];\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i1 = 0; i1 < arr.length - 1; i1++) {\n\t\t\t\tif (arr[i1] >= rate) {\n\t\t\t\t\tsum1 += rate;\n\t\t\t\t\tarr[i1] -= rate;\n\t\t\t\t} else { // a[i] < rate\n\t\t\t\t\tsum1 += arr[i1];\n\t\t\t\t\tarr[i1] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint res2 = sum1;\n\t\t\tString s = \"Case #\" + i + \": \" + res1 + \" \" + res2;\n\t\t\tSystem.out.println(s);\n\t\t\tout.println(s);\n\t\t}\n\t\tin.close();\n\t\tout.close();\n\t}\n}\n", "idx": "1265"}
{"func": "package googlejam1.p267;\nimport java.util.*;\r\n\r\npublic class A\r\n{\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint t = in.nextInt();\r\n\t\tfor (int test = 1; test <= t; ++test)\r\n\t\t{\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] arr = new int[n];\r\n\t\t\tfor (int i = 0; i < arr.length; ++i)\r\n\t\t\t\tarr[i] = in.nextInt();\r\n\t\t\t\r\n\t\t\tlong totalWithChoice = 0;\r\n\t\t\tfor (int i = 1; i < arr.length; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (arr[i] < arr[i-1])\r\n\t\t\t\t\ttotalWithChoice += arr[i-1] - arr[i];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong totalWithConstant = 0;\r\n\t\t\tint maxChange = 0;\r\n\t\t\tfor (int i = 1; i < arr.length; ++i)\r\n\t\t\t\tmaxChange = Math.max(maxChange, arr[i-1] - arr[i]);\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < arr.length - 1; ++i)\r\n\t\t\t{\r\n\t\t\t\ttotalWithConstant += Math.min(arr[i], maxChange);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", test, totalWithChoice, totalWithConstant);\r\n\t\t}\r\n\t}\r\n}", "idx": "1267"}
{"func": "package googlejam1.p270;\n// Google Code Jam Round 1A 2015\r\n// Problem A. Mushroom Monster\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class MushroomMonster{\r\n\tstatic String filename = \"A-large\";\t// io filnename here\r\n    static String inname = filename + \".in\";    \r\n    static String outname = filename + \".out\";  \r\n    static int n;\r\n    public static void main(String[] args){\r\n        try{\r\n            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));\r\n        \t//Scanner in = new Scanner(System.in);\r\n            BufferedWriter out = new BufferedWriter(new FileWriter(outname));\r\n            int t = in.nextInt();\r\n            in.nextLine();\r\n            for (int cas = 1; cas <= t; cas++){\r\n            \tString ans = \"\";\r\n            \tint n = in.nextInt();\r\n            \tint[] m = new int[n];\r\n            \tfor(int i = 0; i < n; i++) m[i] = in.nextInt();\r\n            \tint min1 = 0;\r\n            \tint min2 = 0;\r\n            \tfor (int i = 0; i < n-1; i++)\r\n            \t\tif (m[i]-m[i+1] > 0) min1 += m[i]-m[i+1];\r\n            \tint minrate = m[0] - m[1];\r\n            \tfor (int i = 0; i < n-1; i++)\r\n            \t\tif (m[i]-m[i+1] > minrate) minrate = m[i]-m[i+1];\r\n            \tfor (int i = 0; i < n-1; i++)\r\n            \t\tmin2 += Math.min(minrate, m[i]);\r\n            \t\r\n            \tans = min1 + \" \" + min2;\r\n                System.out.print(\"Case #\" + cas + \": \" + ans + \"\\n\");\r\n                out.write(\"Case #\" + cas + \": \" + ans + \"\\n\");\r\n            }\r\n            in.close();\r\n            out.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}", "idx": "1270"}
{"func": "package googlejam1.p271;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class MushroomMonster {\n\n\tpublic static void main(String[] args) throws NumberFormatException,\n\t\t\tIOException {\n\t\tBufferedReader br = new BufferedReader(new FileReader(args[0]));\n\n\t\tint numCases = Integer.parseInt(br.readLine());\n\n\t\tfor (int i = 0; i < numCases; i++) {\n\t\t\tint intervals = Integer.parseInt(br.readLine());\n\t\t\t\n\t\t\tString[] sv = br.readLine().split(\" \");\n\t\t\t\n\t\t\tint[] iv = new int[intervals];\n\t\t\t\n\t\t\tfor (int j = 0; j < intervals; j++) {\n\t\t\t\tiv[j] = Integer.parseInt(sv[j]);\n\t\t\t}\n\t\t\t\n\t\t\tint y = 0, a = 0, max = 0, z = 0;\n\t\t\tfor (int j = 0; j < intervals - 1; j++) {\n\t\t\t\ty += (a = iv[j] - iv[j + 1]) > 0 ? a : 0;\n\t\t\t\tmax = a > max ? a : max;\n\t\t\t}\n\t\t\t\n\t\t\tfor (int j = 0; j < intervals - 1; j++) {\n\t\t\t\tz += (iv[j] < max) ? iv[j] : max;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + y + \" \" + z);\n\t\t}\n\n\t}\n\n}\n", "idx": "1271"}
{"func": "package googlejam1.p273;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class ProblemA {\r\n\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint cases = Integer.parseInt(br.readLine());\r\n\t\tfor(int c=1; c<=cases; c++){\r\n\t\t\tint tam = Integer.parseInt(br.readLine());\r\n\t\t\tString line = br.readLine();\r\n\t\t\tint intervals[] = new int [tam];\r\n\t\t\tStringTokenizer st = new StringTokenizer(line);\r\n\t\t\tfor(int i=0; i<tam; i++){\r\n\t\t\t\tintervals[i] = Integer.parseInt(st.nextToken());\r\n\t\t\t}\r\n\t\t\tint any, ratio;\r\n\t\t\tint maxDif;\r\n\t\t\tany = 0;\r\n\t\t\tmaxDif = 0;\r\n\t\t\tratio = 0;\r\n\t\t\tfor(int i=1; i<tam; i++){\r\n\t\t\t\tif (intervals[i] < intervals[i-1]){\r\n\t\t\t\t\tint diff = intervals[i-1] -intervals[i];\r\n\t\t\t\t\tany += diff;\r\n\t\t\t\t\tif(diff > maxDif)maxDif = diff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int i=0; i<tam-1; i++){\r\n\t\t\t\tratio += intervals[i] < maxDif ? intervals[i] : maxDif;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+c+\": \" + any + \" \" + ratio);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "1273"}
{"func": "package googlejam1.p275;\nimport java.util.Scanner;\n\n\npublic class Mushrooms {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for (int i = 0; i < t; i++) {\n        \t\n            int n = sc.nextInt();\n            int[] ar = new int[n];\n            for(int j=0; j<n; j++){\n            \tar[j] = sc.nextInt();\n            }\n\t\t\tlong sum = 0;\n\t\t\tfor(int i1=0; i1<ar.length-1;i1++){\n\t\t\t\tif(ar[i1]>ar[i1+1]){\n\t\t\t\t\tsum += ar[i1]-ar[i1+1];\n\t\t\t\t}\n\t\t\t}\n            long c1 = sum;\n\t\t\tint rate = 0;\n\t\t\tfor(int i2=0; i2<ar.length-1;i2++){\n\t\t\t\tif(ar[i2]>ar[i2+1]){\n\t\t\t\t\tif(ar[i2]-ar[i2+1] > rate){\n\t\t\t\t\t\trate = ar[i2]-ar[i2+1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlong sum1 = 0;\n\t\t\tfor(int i1=0; i1<ar.length-1;i1++){\n\t\t\t\t\tif(ar[i1] >= rate){\n\t\t\t\t\t\tsum1 += rate;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsum1 += ar[i1];\n\t\t\t\t\t}\n\t\t\t}\n            long c2 = sum1;\n            \n            System.out.println(\"Case #\"+(i+1)+\": \"+c1+\" \"+c2);\n\n        }\n    }\n\n}\n", "idx": "1275"}
{"func": "package googlejam1.p276;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\npublic class D {\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        final Scanner scanner = new Scanner(new File(\"C:\\\\Users\\\\Samuel\\\\Downloads\\\\input.txt\"));\r\n        Integer cases = Integer.parseInt(scanner.nextLine());\r\n        for (Integer i = 0; i < cases; i++) {\r\n            Integer readings = Integer.parseInt(scanner.nextLine());\r\n            String[] vals = (scanner.nextLine()).split(\" \");\r\n            ArrayList<Integer> values = new ArrayList<Integer>();\r\n            for (String v : vals) {\r\n                values.add(Integer.parseInt(v));\r\n            }\r\n            Integer maxDiff = 0;\r\n            Integer totalDiff = 0;\r\n            for (Integer j = 0; j < values.size() - 1; j++) {\r\n                Integer diff = values.get(j) - values.get(j + 1);\r\n                if (diff > maxDiff) {\r\n                    maxDiff = diff;\r\n                }\r\n                if (diff > 0) {\r\n                    totalDiff += diff;\r\n                }\r\n            }\r\n            Integer eaten = 0;\r\n            for (Integer j = 0; j < values.size() - 1; j++) {\r\n                if (values.get(j) < maxDiff) {\r\n                    eaten += values.get(j);\r\n                } else {\r\n                    eaten += maxDiff;\r\n                }\r\n            }\r\n            System.out.println(\"Case #\" + (i + 1) + \": \" + totalDiff + \" \" + eaten);\r\n        }\r\n    }\r\n}\r\n", "idx": "1276"}
{"func": "package googlejam1.p277;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.StringTokenizer;\r\n\r\n/**\r\n * Created by Sumedh on 11-04-2015.\r\n */\r\npublic class A {\r\n    public static void main(String[] args) {\r\n        try{\r\n            FileReader fr = new FileReader(\"E:/codejam/A-large.in\");\t\t\t//\r\n            BufferedReader br = new BufferedReader(fr);\r\n            FileWriter fw =new FileWriter(\"E:/codejam/out.txt\");\r\n            BufferedWriter bw = new BufferedWriter(fw);\r\n            int T = Integer.parseInt(br.readLine());\r\n            for(int x=0;x<T;x++){\r\n                int N = Integer.parseInt(br.readLine());\r\n                long first=0,second=0,diff=0,maxx_diff=0;\r\n                StringTokenizer st = new StringTokenizer(br.readLine());\r\n                int[] n = new int[N];\r\n                for(int i=0;i<N;i++){\r\n                    n[i] = Integer.parseInt(st.nextToken());\r\n                }\r\n                for(int i=0;i<N-1;i++){\r\n                    if(n[i]>n[i+1]) {\r\n                        diff = (n[i]- n[i+1]);\r\n                        first += diff;\r\n                        if(diff>maxx_diff){\r\n                            maxx_diff=diff;\r\n                        }\r\n                    }\r\n                }\r\n                for(int i=0;i<N-1;i++){\r\n                    if(n[i]>maxx_diff){\r\n                        second+=maxx_diff;\r\n                    }\r\n                    else{\r\n                        second+=n[i];\r\n                    }\r\n                }\r\n                String ans=\"Case #\" + (x+1)+\": \"+first+\" \"+second;\r\n                bw.write(ans);\r\n                bw.newLine();\r\n            }\r\n            bw.flush();\r\n            bw.close();\r\n        }catch(Exception e){e.printStackTrace();}\r\n    }\r\n}\r\n", "idx": "1277"}
{"func": "package googlejam1.p279;\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\nclass A {\r\n\r\n    private static final String BASE = \"C:\\\\cygwin\\\\home\\\\jsmith\\\\codejam\\\\2015\\\\Round1A\\\\A\\\\\";\r\n    //    private static final String PROBLEM = \"deceitful_test\";\r\n    private static final String PROBLEM = \"A-large\";\r\n\r\n    public static void main(String[] args) {\r\n        String input = BASE + PROBLEM + \".in\";\r\n        String output = BASE + PROBLEM + \".out\";\r\n\r\n        try {\r\n            Scanner sc = new Scanner(new FileReader(input));\r\n            PrintWriter pw = new PrintWriter(output);\r\n\r\n            int mumCases = sc.nextInt();\r\n            sc.nextLine();\r\n            for (int caseNumber = 0; caseNumber < mumCases; caseNumber++) {\r\n                System.out.println(\"Test case \" + (caseNumber + 1) + \"...\");\r\n                pw.print(\"Case #\" + (caseNumber + 1) + \": \");\r\n                final int N = sc.nextInt();\n\t\t\t\tint[] mushrooms = new int[N];\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t    mushrooms[i] = sc.nextInt();\n\t\t\t\t}\n\t\t\t\tint prev1 = mushrooms[0];\n\t\t\t\tint result1 = 0;\n\t\t\t\tfor (int i1 = 1; i1 < mushrooms.length; i1++) {\n\t\t\t\t    if (mushrooms[i1] < prev1) {\n\t\t\t\t        result1 += prev1 - mushrooms[i1];\n\t\t\t\t    }\n\t\t\t\t    prev1 = mushrooms[i1];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint method1 = result1;\n\t\t\t\t// find the largest difference between successive values.  This must be the min rate.\n\t\t\t\tint prev = mushrooms[0];\n\t\t\t\tint maxDiff = 0;\n\t\t\t\tfor (int i = 1; i < mushrooms.length; i++) {\n\t\t\t\t    if (mushrooms[i] < prev) {\n\t\t\t\t        int diff = prev - mushrooms[i];\n\t\t\t\t        if (diff > maxDiff) {\n\t\t\t\t            maxDiff = diff;\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t    prev = mushrooms[i];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// starting at the beginning, eat min(maxdiff, mushrooms) at each interval.\n\t\t\t\tint result = Math.min(maxDiff, mushrooms[0]);\n\t\t\t\tfor (int i = 1; i < mushrooms.length-1; i++) {\n\t\t\t\t    result += Math.min(maxDiff, mushrooms[i]);\n\t\t\t\t}\n\t\t\t\tint method2 = result;\n\t\t\t\t\n\t\t\t\tpw.print(method1 + \" \" + method2);\r\n                pw.println();\r\n            }\r\n            pw.println();\r\n            pw.flush();\r\n            pw.close();\r\n            sc.close();\r\n        } catch (FileNotFoundException ex) {\r\n            Logger.getLogger(A.class.getName()).log(Level.SEVERE, null, ex);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n", "idx": "1279"}
{"func": "package googlejam1.p280;\nimport java.io.*;\nimport java.util.*;\n\npublic class Solver {\n    static Scanner input;\n    static Writer  output;\n    public static void main(String args[]) {\n        if(args.length != 1){\n            System.out.println(\"Please specify the input file\");\n            return;\n        }\n\n\t\tString filename = args[0];\n\t\tFile f = new File(filename);\n\t\tBufferedReader br;\n\n        if (!f.exists()) {\n            System.out.println(\"Couldn't find file \"+filename);\n            return;\n        } else if (f.isDirectory()) {\n            System.out.println(filename+\" is a directory\");\n            return;\n        }\n\n        try {\n\t\t\tbr = new BufferedReader (new FileReader (f));\n\t\t\tinput = new Scanner(br);\n        } catch (IOException iox){\n\t\t    System.out.println(\"Problem reading \" + filename );\n        }\n\n        try {\n            output = new BufferedWriter(\n                        new OutputStreamWriter(\n                            new FileOutputStream(filename+\".out\"), \"utf-8\"));\n            int T = input.nextInt();\n\t\t\tfor(int caseNum=0; caseNum<T; caseNum++){\n\t\t\t    int N = input.nextInt();\n\t\t\t    long[] m = new long[N];\n\t\t\t\n\t\t\t    for (int i=0; i<N; i++) {\n\t\t\t        m[i] = input.nextInt();\n\t\t\t    }\n\t\t\t\n\t\t\t    long prev = m[0];\n\t\t\t    long maxDelta = 0;\n\t\t\t    long sumDelta = 0;\n\t\t\t    for(int i=1; i<N; i++){\n\t\t\t        long delta = m[i]-prev;\n\t\t\t        prev = m[i];\n\t\t\t        if(delta < 0){\n\t\t\t            maxDelta  = Math.max(maxDelta, Math.abs(delta));\n\t\t\t            sumDelta += Math.abs(delta);\n\t\t\t        }\n\t\t\t    }\n\t\t\t\n\t\t\t    long sumTwo = 0;\n\t\t\t    for(int i=0; i<N-1; i++){\n\t\t\t        sumTwo += Math.min(m[i],maxDelta);\n\t\t\t    }\n\t\t\t\n\t\t\t    output.write(\"Case #\"+(caseNum+1)+\": \");\n\t\t\t    output.write(\"\"+sumDelta);\n\t\t\t    output.write(\" \");\n\t\t\t    output.write(\"\"+sumTwo);\n\t\t\t    output.write(\"\\n\");\n\t\t\t}\n        } catch (IOException ex) {\n            System.out.println(\"Couldn't open an output file\");\n            return;\n        }\n\n        try{\n            output.close();\n            input.close();\n        } catch (IOException ex) {\n        }\n    }\n}\n\n", "idx": "1280"}
{"func": "package googlejam1.p281;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\n/**\n * @autor: julio\n */\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n\n        Scanner scanner = new Scanner(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"in.large\")));\n        int T = scanner.nextInt();\n        for(int t=0;t<T;t++) {\n            int N = scanner.nextInt();\n            int[] n = new int[N];\n\n            int C = 0;\n            int eat = 0;\n            int Bdelta = 0;\n            for(int i=0;i<N;i++) {\n                int C1 = scanner.nextInt();\n                n[i] = C1;\n                if(C1 < C) {\n                    int delta = (C - C1);\n                    eat += (C - C1);\n                    if(delta > Bdelta) {\n                        Bdelta = delta;\n                    }\n\n                }\n                C = C1;\n            }\n\n            int eat2 = 0;\n            int plate = 0;\n            for(int i=0;i<N-1;i++) {\n                plate = n[i];\n                if(plate >= Bdelta) {\n                    plate -= Bdelta;\n                    eat2+=Bdelta;\n                } else {\n                    eat2 += plate;\n                    plate = 0;\n                }\n\n            }\n\n            System.out.println(\"Case #\" + (t+1) + \": \" + (eat) + \" \" + eat2);\n        }\n    }\n\n}\n", "idx": "1281"}
{"func": "package googlejam1.p282;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\n\nclass Mushrooms {\n\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader in = new BufferedReader(new FileReader(args[0]));\n\t\tPrintWriter out = new PrintWriter(args[1]);\n\n\t\tint numberOfCases = Integer.parseInt(in.readLine());\n\t\tfor (int caseNumber = 1; caseNumber <= numberOfCases; caseNumber++) {\n\t\t\tint numIntervals = Integer.parseInt(in.readLine());\n\t\t\tString[] intervals = in.readLine().split(\" \");\n\n\t\t\tint firstComp = 0;\n\t\t\tint secondComp = 0;\n\t\t\tint minRate = 0;\n\n\t\t\tint lastInterval = Integer.parseInt(intervals[0]);\n\n\t\t\tfor (int i = 1; i < numIntervals; i++) {\n\t\t\t\tint thisInterval = Integer.parseInt(intervals[i]);\n\t\t\t\tint drop = lastInterval - thisInterval;\n\t\t\t\tif (drop > 0) firstComp += drop;\n\t\t\t\tminRate = Math.max(minRate, drop);\n\t\t\t\tlastInterval = thisInterval;\n \t\t\t}\n\n\t\t\tSystem.out.println(\"Min: \" + minRate);\n\n\t\t\tfor (int i = 0; i < numIntervals-1; i++) {\n\t\t\t\tint interval = Integer.parseInt(intervals[i]);\n\t\t\t\tint eaten = interval - Math.max(0, interval - minRate);\n\t\t\t\tSystem.out.println(eaten);\n\t\t\t\tsecondComp += eaten;\n\t\t\t}\n\n\t\t\tout.println(String.format(\"Case #%d: %d %d\", caseNumber, firstComp, secondComp));\n\t\t}\n\n\t\tin.close();\n\t\tout.close();\n\t}\n}", "idx": "1282"}
{"func": "package googlejam1.p284;\nimport java.util.*;\nimport java.io.*;\nimport java.math.BigInteger;\n\npublic class Mushroom{\n\n\t\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tMushroom solution = new Mushroom();\n\n\t\tScanner input = new Scanner( new File( \"A-large.in\"));\n\t\t//Scanner input = new Scanner( new File( \"DijkstraInput.txt\"));\n\t\t//Scanner input = new Scanner( new File( \"MissedCases.txt\"));\n\t\tPrintWriter writer = new PrintWriter( \"MushroomOutput.txt\");\n\t\tint numCases = Integer.parseInt( input.nextLine());\n\t\tfor ( int x = 0; x < numCases; x++)\n\t\t{\n\t\t\tint numPlates = Integer.parseInt(input.nextLine());\n\t\t\tString tempLine = input.nextLine(); \n\t\t\t\n\t\t\tArrayList<Integer> nums = new ArrayList<Integer>();\n\t\t\tStringTokenizer io = new StringTokenizer(tempLine);\n\t\t\twhile(io.hasMoreTokens())\n\t\t\t{\n\t\t\t\tnums.add(Integer.parseInt(io.nextToken()));\n\t\t\t}\n\t\t\tint firstAttempt = 0;\n\t\t\tint secondAttempt = 0;\n\t\t\tfor ( int i = 0; i < nums.size()-1; i++)\n\t\t\t{\n\t\t\t\tint first = nums.get(i);\n\t\t\t\tint second = nums.get(i+1);\n\t\t\t\t\n\t\t\t\tif ( (first - second) >= 0)\n\t\t\t\t{\n\t\t\t\t\tfirstAttempt = firstAttempt + (first- second);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tint maxDrop = 0;\n\t\t\tfor ( int i = 0; i < nums.size() - 1; i++)\n\t\t\t{\n\t\t\t\tint first = nums.get(i);\n\t\t\t\tint second = nums.get(i+1);\n\t\t\t\tint tempDrop = first-second;\n\t\t\t\tif ( tempDrop > maxDrop)\n\t\t\t\t{\n\t\t\t\t\tmaxDrop = tempDrop;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdouble rate = maxDrop/10;\n\t\t\tfor ( int i = 0; i < nums.size() - 1; i++)\n\t\t\t{\n\t\t\t\tint tempStack = nums.get(i);\n\t\t\t\tif ( tempStack >= maxDrop)\n\t\t\t\t{\n\t\t\t\t\tsecondAttempt+= maxDrop;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsecondAttempt += tempStack;\n\t\t\t\t}\n\t\t\t}\n\t\t\twriter.println(\"Case #\" + (x+1) + \": \" + firstAttempt + \" \" + secondAttempt);\n\t\t\n\t\t}\n\t\twriter.close();\n\n\t}\n\n\t\n\n\t\n\t\n\n\t\n}", "idx": "1284"}
{"func": "package googlejam1.p285;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\r\n        String line = stdin.readLine();\r\n        int T = Integer.parseInt(line);\r\n        \r\n        for (int t = 1; t <= T; t++) {\r\n            line = stdin.readLine();\r\n            int n = Integer.parseInt(line);\r\n            \r\n            line = stdin.readLine();\r\n            String[] prms = line.split(\" \");\r\n            \r\n            int ans1 = 0;\r\n            int mx = 0;\r\n            int[] m = new int[n];\r\n            m[0] = Integer.parseInt(prms[0]);\r\n            for (int i = 1; i < n; i++) {\r\n                m[i] = Integer.parseInt(prms[i]);\r\n                int d = m[i-1]-m[i];\r\n                mx = Math.max(mx, d);\r\n                if (d > 0) ans1 += d;\r\n            }\r\n            \r\n            int ans2 = 0;\r\n            for(int i = 0; i < n-1; i++) {\r\n                ans2 += Math.min(mx, m[i]);\r\n            }\r\n            \r\n            System.out.printf(\"Case #%d: %d %d\\n\", t, ans1, ans2);\r\n        }\r\n    }\r\n}\r\n", "idx": "1285"}
{"func": "package googlejam1.p287;\nimport java.io.*;\nimport java.math.BigInteger;\nimport java.util.*;\n\n/**\n * Created with IntelliJ IDEA.\n * User: gangien\n * Date: 4/10/15\n * Time: 7:26 PM\n * To change this template use File | Settings | File Templates.\n */\npublic class CodeJam {\n    public static void main(String [] args) throws Exception {\n        long start = System.currentTimeMillis();\n        String questionName = \"A-large\";\n\t\tBufferedReader r = new BufferedReader(new FileReader(questionName + \".in\"));\n\t\tPrintStream out = System.out;\n\t\tString file = questionName + \".out\";\n\t\tif(new File(file).exists()) {\n\t\t    throw new RuntimeException(new File(file).getAbsolutePath() + \" Already exists\");\n\t\t}\n\t\t\n\t\tFileOutputStream fos = new FileOutputStream(new File(file), true);\n\t\tPrintStream printStream = new PrintStream(fos);\n\t\tout = printStream;\n\t\tint count = Integer.parseInt(r.readLine());\n\t\t\n\t\tfor(int x = 0; x < count; x++) {\n\t\t    String answer = \"\";\n\t\t    int N = Integer.parseInt(r.readLine());\n\t\t\tString [] nums = r.readLine().split(\" \");\n\t\t\tint [] ret = new int[nums.length];\n\t\t\tfor(int x1 = 0; x1 < nums.length; x1++) {\n\t\t\t    ret[x1] = Integer.parseInt(nums[x1]);\n\t\t\t}\n\t\t    int [] m = ret;\n\t\t    int maxRate = 0;\n\t\t    int m2 = 0;\n\t\t    int m1 = 0;\n\t\t    for(int y = 0; y < m.length; y++) {\n\t\t        if(y != 0) {\n\t\t            maxRate = Math.max(maxRate, m[y-1] - m[y]);\n\t\t        }\n\t\t    }\n\t\t\n\t\t    for(int y = 0; y < m.length; y++) {\n\t\t        if(y != 0) {\n\t\t            int diff = m[y-1] - m[y];\n\t\t            if(m[y-1] > 0) {\n\t\t                if(m[y-1] >= maxRate) {\n\t\t                    m2 += maxRate;\n\t\t                } else if(m[y-1] < maxRate) {\n\t\t                    m2 += m[y-1];\n\t\t                }\n\t\t            }\n\t\t\n\t\t            if(diff >= 0) {\n\t\t                m1 += diff;\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t\n\t\t    answer = \"\" + m1 + \" \" + m2;\n\t\t\n\t\t    out.printf(\"Case #%d: \", x + 1);\n\t\t    out.print(answer);\n\t\t    out.println();\n\t\t}\n//        b();\n//        c();\n//        d();\n\n        long end = System.currentTimeMillis();\n\n        System.out.printf(\"Took: %d(ms)\\n\", (end - start));\n    }\n}\n", "idx": "1287"}
{"func": "package googlejam1.p289;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Q5 {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner s = new Scanner(System.in);\n\t\tint numberOfTestCases = Integer.parseInt(s.nextLine());\n\t\tArrayList<ArrayList<Integer>> trials = new ArrayList<>();\n\t\tfor (int i = 0; i < numberOfTestCases; i++) {\n\t\t\tArrayList<Integer> myCase = new ArrayList<>();\n\t\t\tint num = Integer.parseInt(s.nextLine());\n\t\t\tString str = s.nextLine();\n\t\t\tfor (int j = 1; j < num; j++) {\n\t\t\t\tmyCase.add(Integer.parseInt(str.substring(0, str.indexOf(\" \"))));\n\t\t\t\tstr = str.substring(str.indexOf(\" \") + 1);\n\t\t\t}\n\t\t\tmyCase.add(Integer.parseInt(str));\n\t\t\ttrials.add(myCase);\n\t\t}\n\t\ts.close();\n\n\t\tint counter = 1;\n\t\tfor (ArrayList<Integer> c : trials) {\n\t\t\t//m1\n\t\t\tint m1Sum = 0;\n\t\t\tfor (int i = 0; i < c.size() - 1; i++) {\n\t\t\t\tint prev = c.get(i);\n\t\t\t\tint now = c.get(i + 1);\n\t\t\t\tif (prev > now) {\n\t\t\t\t\tm1Sum += prev - now;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//m2\n\t\t\tint m2Sum = 0;\n\t\t\tint greatestDiff = 0;\n\t\t\tfor (int i = 0; i < c.size() - 1; i++) {\n\t\t\t\tint prev = c.get(i);\n\t\t\t\tint now = c.get(i + 1);\n\t\t\t\tif (prev - now > greatestDiff) {\n\t\t\t\t\tgreatestDiff = prev - now;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < c.size() - 1; i++) {\n\t\t\t\tif (c.get(i) < greatestDiff) {\n\t\t\t\t\tm2Sum += c.get(i);\n\t\t\t\t} else {\n\t\t\t\t\tm2Sum += greatestDiff;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + counter + \":\" + \" \" + m1Sum + \" \" + m2Sum);\n\t\t\tcounter++;\n\t\t}\n\t}\n\n}\n", "idx": "1289"}
{"func": "package googlejam1.p291;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n    int[] input;\r\n\r\n    static Scanner in;\r\n    static PrintStream out;\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        out = new PrintStream(\"out.txt\");\r\n        in = new Scanner(new File(args[0]));\r\n\r\n        int N = in.nextInt();\r\n        in.nextLine();\r\n\r\n        for (int i = 0; i < N; i++) {\r\n            int N1 = in.nextInt();\n\t\t\tint[] mushrooms = new int[N1];\n\t\t\t\n\t\t\tfor (int i1 = 0; i1 < N1; i1++) {\n\t\t\t    int number = in.nextInt();\n\t\t\t    mushrooms[i1] = number;\n\t\t\t}\n\t\t\tA r = new A(mushrooms);\n\t\t\tint firstSolution = 0;\n\t\t\tint secondSolution = 0;\n\t\t\tint bestRate = 0;\n\t\t\t\n\t\t\tfor (int i2 = 1; i2 < r.input.length; i2++) {\n\t\t\t    if (r.input[i2] < r.input[i2 - 1]) {\n\t\t\t        firstSolution += r.input[i2 - 1] - r.input[i2];\n\t\t\t        bestRate = Math.max(r.input[i2 - 1] - r.input[i2], bestRate);\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i1 = 0; i1 < r.input.length - 1; i1++) {\n\t\t\t    secondSolution += Math.min(bestRate, r.input[i1]);\n\t\t\t}\n\t\t\t\n\t\t\tint[] solution = new int[]{firstSolution, secondSolution};\n\t\t\t\n\t\t\tout.printf(\"Case #%d: %d %d\\n\", i + 1 , solution[0], solution[1]);\r\n        }\r\n    }\r\n\r\n    public A(int[] input) {\r\n        this.input = input;\r\n    }\r\n\r\n}", "idx": "1291"}
{"func": "package googlejam1.p292;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\n\r\npublic class Problem1 {\r\n    public static void main(String[] args) {\r\n\ttry {\r\n\t    BufferedReader reader = new BufferedReader(new FileReader(\"A-large.in\"));\n\t\tString line = null;\n\t\tList<String> lines1 = new ArrayList<String>();\n\t\twhile((line = reader.readLine()) != null) {\n\t\t    lines1.add(line);\n\t\t}\n\t\treader.close();\n\t\tList<String> lines = lines1;\n\t\tList<String> outputLines = new ArrayList<String>();\n\t\tint index = 0;\n\t\tint testCases = Integer.parseInt(lines.get(index++));\n\t\tfor(int t = 0; t < testCases; t++) {\n\t\t    String[] tokens = lines.get(index++).split(\" \");\n\t\t    int intervals = Integer.parseInt(tokens[0]);\n\t\t    String[] strs = lines.get(index++).split(\" \");\n\t\t    int[] pieces = new int[intervals];\n\t\t    for(int i = 0; i < strs.length; i++) {\n\t\t\tpieces[i] = Integer.parseInt(strs[i]);\n\t\t    }\n\t\t    int method1 = 0;\n\t\t    int max = 0;\n\t\t    int[] decays = new int[intervals]; \n\t\t    for(int i = 1; i < intervals; i++) {\n\t\t\tif(pieces[i] < pieces[i-1]) {\n\t\t\t    int decay = pieces[i-1] - pieces[i];\n\t\t\t    method1 += decay;\n\t\t\t    max = Math.max(max, decay);\n\t\t\t    decays[i] = decay;\n\t\t\t}\n\t\t    }\n\t\t    int method2 = 0;\n\t\t    for(int i = 1; i < intervals; i++) {\n\t\t\tint decay = Math.min(pieces[i-1], max);\n\t\t\tmethod2 += decay;\n\t\t    }\n\t\t    String testCaseOutput = \"Case #\" + (t+1) + \": \" + method1 + \" \" + method2;\n\t\t    System.out.println(testCaseOutput);\n\t\t    outputLines.add(testCaseOutput);\n\t\t}\n\t\tStringBuilder strValue = new StringBuilder(\"\");\n\t\tif (outputLines != null) {\n\t\t    int i = 0;\n\t\t    for (Object v : outputLines) {\n\t\t\tString value = v.toString();\n\t\t\tif (i == 0) {\n\t\t\t    strValue.append(value);\n\t\t\t} else {\n\t\t\t    strValue.append(\"\\n\");\n\t\t\t    strValue.append(value);\n\t\t\t}\n\t\t\ti++;\n\t\t    }\n\t\t}\n\t\tString output = strValue.toString();\n\t\tFileWriter writer = new FileWriter(\"A-large.in\".replace(\".in\", \".out\"));\n\t\twriter.write(output);\n\t\twriter.close();\r\n\t}catch(Exception ex) {\r\n\t    ex.printStackTrace();\r\n\t}\r\n    }\r\n\r\n\r\n}\r\n", "idx": "1292"}
{"func": "package googlejam1.p293;\nimport java.io.BufferedInputStream;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class TaskA {\r\n\r\n    public static void main(String[] args) {\r\n        long time = System.currentTimeMillis();\r\n        Scanner sc = new Scanner(new BufferedInputStream(System.in));\r\n        int t = sc.nextInt();\r\n        for (int i = 0; i < t; i++) {\r\n            int n = sc.nextInt();\n\t\t\tint[] result = new int[n];\n\t\t\tfor (int i1 = 0; i1 < n; i1++) {\n\t\t\t    result[i1] = sc.nextInt();\n\t\t\t}\r\n            int[] m = result;\r\n            int answer1 = 0;\r\n            for (int j = 1; j < n; j++) {\r\n                if (m[j] < m[j-1]) {\r\n                    answer1 += (m[j-1] - m[j]);\r\n                }\r\n            }\r\n            int answer2 = 0;\r\n            int maxSpeed = 0;\r\n            for (int j = 1; j < n; j++) {\r\n                if (m[j] < m[j-1] && m[j-1] - m[j] > maxSpeed) {\r\n                    maxSpeed = m[j-1] - m[j];\r\n                }\r\n            }\r\n            for (int j = 1; j < n; j++) {\r\n                if (m[j-1] > maxSpeed) {\r\n                    answer2 += maxSpeed;\r\n                }\r\n                else {\r\n                    answer2 += m[j-1];\r\n                }\r\n            }            \r\n            System.out.println(\"Case #\" + (i+1) + \": \" + answer1 + \" \" +answer2);\r\n        }\r\n        sc.close();\r\n        System.err.println(System.currentTimeMillis() - time);\r\n    }\r\n}\r\n", "idx": "1293"}
{"func": "package googlejam1.p294;\n\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\npublic class ProblemA {\n\n\tpublic static final int MAX = 1000;\n\t\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st;\n\t\tint T = Integer.parseInt(in.readLine());\n\t\tint N, j, r1, r2,d,max;\n\t\tint[] A = new int[MAX];\n\t\t\n\t\tfor (int i=1; i<=T; i++) {\n\t\t\tN = Integer.parseInt(in.readLine());\n\t\t\tst = new StringTokenizer(in.readLine());\n\t\t\tfor (j=0; j<N; j++) {\n\t\t\t\tA[j] = Integer.parseInt(st.nextToken());\n\t\t\t}\n\t\t\t\n\t\t\tmax = Integer.MIN_VALUE;\n\t\t\t// method 1\n\t\t\tr1 = 0;\n\t\t\tfor (j=1; j<N; j++) {\n\t\t\t\td = A[j] - A[j-1];\n\t\t\t\tif (d < 0) {\n\t\t\t\t\tr1 += Math.abs(d);\n\t\t\t\t}\n\t\t\t\tif (Math.abs(d) > max && d < 0) {\n\t\t\t\t\tmax = -d;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//System.out.println(max);\n\t\t\t// method 2\n\t\t\tmax = Math.max(0, max);\n\t\t\tr2 = 0;\n\t\t\tfor (j=0; j<N-1; j++) {\n\t\t\t\t/*d = A[j] - A[j-1];\n\t\t\t\tif (d < 0) {*/\n\t\t\t\t\tr2 += Math.min(A[j], max); \n\t\t\t\t//}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + i + \": \" + r1 + \" \" + r2);\n\t\t}\n\t}\n\n}\n", "idx": "1294"}
{"func": "package googlejam1.p295;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\npublic class MushroomMonster {\n    Scanner sc = new Scanner(getClass().getResourceAsStream(IN));\n    static final String FILENAME = \"A-large\";\n    static final String IN = FILENAME + \".in\";\n    static final String OUT = FILENAME + \".out\";\n    PrintStream out = System.out;\n\n    public static void main(String args[]) throws Exception {\n        MushroomMonster r = new MushroomMonster();\n\t\tr.out = new PrintStream(new FileOutputStream(MushroomMonster.OUT));\n\t\tint t = r.sc.nextInt();\n\t\tfor (int tc = 1; tc <= t; tc++) {\n\t\t    System.out.println(\"Test Case \" + tc + \"...\");\n\t\t    int N = r.sc.nextInt();\n\t\t    int[] mi = new int[N];\n\t\t    for(int i = 0; i < N; i++) {\n\t\t        mi[i] = r.sc.nextInt();\n\t\t    }\n\t\t    r.out.print(\"Case #\" + tc + \": \");\n\t\t    long eat1 = 0, eat2 = 0;\n\t\t\t\n\t\t\tlong maxDiff = 0;\n\t\t\t\n\t\t\tfor(int i = 1; i < mi.length; i++) {\n\t\t\t    int diff = mi[i - 1] - mi[i];\n\t\t\t    eat1 += Math.max(diff, 0);\n\t\t\t    maxDiff = Math.max(diff, maxDiff);\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i = 1; i < mi.length; i++) {\n\t\t\t    eat2 += Math.min(maxDiff, mi[i-1]);\n\t\t\t}\n\t\t\t\n\t\t\tr.out.print(eat1 + \" \");\n\t\t\tr.out.println(eat2);\n\t\t}\n\t\tr.sc.close();\n\t\tr.out.close();\n    }\n}\n", "idx": "1295"}
{"func": "package googlejam1.p296;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner sc = new Scanner(new File(\"C:\\\\Users\\\\Valentin\\\\workspace_luna\\\\CodeJam\\\\src\\\\A-large(1).in\"));\r\n\t\tSystem.setOut(new PrintStream(new File(\"C:\\\\Users\\\\Valentin\\\\workspace_luna\\\\CodeJam\\\\src\\\\test.out\")));\r\n\r\n\t\tint t = sc.nextInt();\r\n\t\tfor (int k = 0; k < t; k++) {\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tList<Integer> list = new ArrayList<>();\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tlist.add(sc.nextInt());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong normal = 0;\r\n\t\t\tlong special = 0;\r\n\t\t\t//normal\r\n\t\t\tint pred = list.get(0);\r\n\t\t\tfor (int i = 1; i < list.size(); i++) {\r\n\t\t\t\tif (pred > list.get(i)) {\r\n\t\t\t\t\tnormal += pred - list.get(i);\r\n\t\t\t\t}\r\n\t\t\t\tpred = list.get(i);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//special\r\n\t\t\tint max_diff = -1;\r\n\t\t\tpred = list.get(0);\r\n\t\t\tfor (int i = 1; i < list.size(); i++) {\r\n\t\t\t\tint curr = list.get(i);\r\n\t\t\t\tif (pred - curr > max_diff) {\r\n\t\t\t\t\tmax_diff = pred - curr;\r\n\t\t\t\t}\r\n\t\t\t\tpred = curr;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int i = 1; i < list.size(); i++) {\r\n\t\t\t\tint curr = list.get(i-1);\r\n\t\t\t\tspecial += Math.min(max_diff, curr);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + (k+1) + \": \" + normal + \" \" + special);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "1296"}
{"func": "package googlejam1.p300;\nimport java.util.*;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\r\n\t\tint t = sc.nextInt();\r\n\r\n\t\tfor (int caseNum = 1;  caseNum <= t; caseNum++) {\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint[] nums = new int[n];\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tnums[i] = sc.nextInt();\r\n\t\t\t}\r\n\t\t\tint sum1 = 0;\r\n\t\t\tint sum2 = 0;\r\n\t\t\tint maxDiff = 0;\r\n\r\n\t\t\tfor (int i = 0; i < n - 1; i++) {\r\n\t\t\t\tif (nums[i] > nums[i + 1]) {\r\n\t\t\t\t\tint diff = nums[i] - nums[i + 1];\r\n\t\t\t\t\tif (diff > maxDiff) { \r\n\t\t\t\t\t\tmaxDiff = diff;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsum1 += diff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (int i = 0; i < n - 1; i++) {\r\n\t\t\t\tif (nums[i] < maxDiff) {\r\n\t\t\t\t\tsum2 += nums[i];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsum2 += maxDiff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", caseNum, sum1, sum2);\r\n\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1300"}
{"func": "package googlejam1.p302;\nimport java.util.Scanner;\n\npublic class A {\n\n\tpublic static void main(String ... hi) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint cases = in.nextInt();\n\t\tfor(int n=1;n<=cases;n++){\n\t\t\t\n\t\t\tint count = in.nextInt();\n\t\t\tint[] m = new int[count];\n\t\t\tfor(int i=0;i<count;i++) m[i]=in.nextInt();\n\t\t\t\n\t\t\tint method1 = 0;\n\t\t\tfor(int i=1;i<count;i++){\n\t\t\t\tint d = m[i]-m[i-1];\n\t\t\t\tif(d<0){\n\t\t\t\t\tmethod1+=Math.abs(d);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint dif = 0;\n\t\t\tfor(int i=1;i<count;i++){\n\t\t\t\tint d = m[i]-m[i-1];\n\t\t\t\tif(d<0&&Math.abs(d)>dif){\n\t\t\t\t\tdif = Math.abs(d);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint method2 = 0;\n\t\t\tfor(int i=0;i<count-1;i++){\n\t\t\t\tif(dif>m[i]){\n\t\t\t\t\tmethod2+=m[i];\n\t\t\t\t}else{\n\t\t\t\t\tmethod2+=dif;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.printf(\"Case #%d: %s %s\\n\", n, method1, method2);\n\t\t}\n\t\tin.close();\n\t}\n\t\n}\n", "idx": "1302"}
{"func": "package googlejam1.p306;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\tfor (int t = 0; t < T; t++) {\n\t\t\tint N = sc.nextInt();\n\t\t\tint[] m = new int[N];\n\t\t\tfor (int i = 0; i < m.length; i++) {\n\t\t\t\tm[i] = sc.nextInt();\n\t\t\t}\n\n\t\t\tint first = 0;\n\t\t\tfor (int i = 1; i < m.length; i++) {\n\t\t\t\tif (m[i] <= m[i - 1]) {\n\t\t\t\t\tfirst += m[i - 1] - m[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint max = 0;\n\t\t\tfor (int i = 1; i < m.length; i++) {\n\t\t\t\tmax = Math.max(max, m[i - 1] - m[i]);\n\t\t\t}\n\t\t\tint second = 0;\n\t\t\tfor (int i = 0; i < m.length - 1; i++) {\n\t\t\t\tsecond += Math.min(max, m[i]);\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Case #\" + (t + 1) + \": \" + first + \" \" + second);\n\n\t\t}\n\t}\n}", "idx": "1306"}
{"func": "package googlejam1.p312;\n\r\n\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class MushroomMonster {\r\n\r\n\tpublic static void main(String[] args){\r\n\t\tString filePath = \"/files/mushroommonster.txt\";\r\n\t\tif(args.length > 0)\r\n\t\t\tfilePath = args[0];\r\n\t\t\r\n\t\tList<String> lines = new ArrayList<String>();\r\n\t\t\r\n\t\ttry {\r\n\t\t\tFiles.lines(Paths.get(filePath)).forEach(s -> lines.add(s));\r\n        } catch (IOException ex) {\r\n\r\n        }\r\n\t\t\r\n\t\tboolean findingNumberCases = true;\r\n\t\tboolean findingN = false;\r\n\t\tboolean readingCase = false;\r\n\t\t\r\n\t\tint numberCases = 0;\r\n\t\t\r\n\t\tCase[] cases = null;\r\n\t\t\r\n\t\tCase filling = null;\r\n\t\tint indexCaseFilling = 0;\r\n\t\t\r\n\t\tfor(String line : lines) {\r\n\t\t\tif(line == null || line.isEmpty())\r\n\t\t\t\tcontinue;\r\n\t\t\tif(findingNumberCases){\r\n\t\t\t\ttry{\r\n\t\t\t\t\tnumberCases = Integer.parseInt(line);\r\n\t\t\t\t\tcases = new Case[numberCases];\r\n\t\t\t\t\tfindingNumberCases = false;\r\n\t\t\t\t\tfindingN = true;\r\n\t\t\t\t}\r\n\t\t\t\tcatch(Exception exp){\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(findingN){\r\n\t\t\t\ttry{\r\n\t\t\t\t\tint n = Integer.parseInt(line);\r\n\t\t\t\t\tfindingN = false;\r\n\t\t\t\t\treadingCase = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfilling = new Case();\r\n\t\t\t\t\tfilling.N = n;\r\n\t\t\t\t\tfilling.mushroomsAtPlate = new int[n];\r\n\t\t\t\t\t\r\n\t\t\t\t\tcases[indexCaseFilling++] = filling;\r\n\t\t\t\t}\r\n\t\t\t\tcatch(Exception exp){\r\n\t\t\t\t\t\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\telse if(readingCase){\r\n\t\t\t\tString[] mushroomsAtPlates = line.split(\" \");\r\n\t\t\t\tint index = 0;\r\n\t\t\t\tfor (String mushroomsAtPlate : mushroomsAtPlates) {\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tint value = Integer.parseInt(mushroomsAtPlate);\r\n\t\t\t\t\t\tfilling.mushroomsAtPlate[index] = value;\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(Exception exp){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treadingCase = false;\r\n\t\t\t\tfindingN = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor(Case _case : cases) {\r\n\t\t\tint sumMethod1 = 0;\r\n\t\t\tint sumMethod2 = 0;\r\n\t\t\tint maxMethod2 = 0;\r\n\t\t\t\r\n\t\t\tint previous = _case.mushroomsAtPlate[0];\r\n\t\t\t\r\n\t\t\tfor(int i = 1; i < _case.mushroomsAtPlate.length; i++){\r\n\t\t\t\tint actual = _case.mushroomsAtPlate[i];\r\n\t\t\t\t\r\n\t\t\t\tint delta = previous - actual;\r\n\t\t\t\t\r\n\t\t\t\tsumMethod1 += delta > 0 ? delta : 0;\r\n\t\t\t\t\r\n\t\t\t\tif(previous > actual){\r\n\t\t\t\t\tint eated = previous - actual;\r\n\t\t\t\t\tif(eated > maxMethod2)\r\n\t\t\t\t\t\tmaxMethod2 = eated;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tprevious = actual;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int i = 0; i < _case.mushroomsAtPlate.length-1; i++){\r\n\t\t\t\tint actual = _case.mushroomsAtPlate[i];\r\n\t\t\t\tif(maxMethod2 > actual)\r\n\t\t\t\t\tsumMethod2 += actual;\r\n\t\t\t\telse\r\n\t\t\t\t\tsumMethod2 += maxMethod2;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t_case.Result = sumMethod1 + \" \" + sumMethod2;\r\n\t\t}\r\n\t\t\r\n\t\tfor(int i = 0; i < cases.length; i++){\r\n\t\t\tCase _case = cases[i];\r\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + _case.Result);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n", "idx": "1312"}
{"func": "package googlejam1.p313;\n\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Scanner;\n\npublic class A {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tint numberOfCase;\n\t\tScanner scanner = null;\n\t\tFileWriter fw;\n\t\tBufferedWriter bw;\n\n\t\ttry {\n\t\t\tFile file = new File(args[1]);\n\t\t\tif (!file.exists()) {\n\t\t\t\tfile.createNewFile();\n\t\t\t}\n\t\t\tfw = new FileWriter(file.getAbsoluteFile());\n\t\t\tbw = new BufferedWriter(fw);\n\t\t\tscanner = new Scanner(new File(args[0]));\n\t\t\tnumberOfCase = scanner.nextInt();\n\n\t\t\tfor (int i = 0; i < numberOfCase; i++) {\n\t\t\t\tint n = scanner.nextInt();\n\t\t\t\tint methodA = 0;\n\t\t\t\tint previousNumOfPieces = scanner.nextInt();\n\t\t\t\tint maxDiff = 0;\n\t\t\t\tint[] pieces = new int[n];\n\t\t\t\tpieces[0] = previousNumOfPieces;\n\t\t\t\tfor (int j = 1; j < n; j++) {\n\t\t\t\t\tint numOfPieces = scanner.nextInt();\n\t\t\t\t\tpieces[j] = numOfPieces;\n\t\t\t\t\tif (numOfPieces < previousNumOfPieces) {\n\t\t\t\t\t\tint diff = previousNumOfPieces - numOfPieces;\n\t\t\t\t\t\tmethodA = methodA + diff;\n\t\t\t\t\t\tif (diff > maxDiff)\n\t\t\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\t}\n\t\t\t\t\tpreviousNumOfPieces = numOfPieces;\n\t\t\t\t}\n\n\t\t\t\tfloat rate = ((float) maxDiff / 10);\n\t\t\t\tfloat methodB = 0;\n\t\t\t\tfor (int k = 0; k < n - 1; k++) {\n\t\t\t\t\tif (pieces[k] > (rate * 10)) {\n\t\t\t\t\t\tmethodB = methodB + (rate * 10);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmethodB = methodB + pieces[k];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tsb.append(\"Case #\" + (i + 1) + \": \" + methodA + \" \"\n\t\t\t\t\t\t+ Math.round(methodB));\n\t\t\t\tString msg = sb.toString().trim() + \"\\n\";\n\t\t\t\tSystem.out.print(msg);\n\t\t\t\tbw.write(msg);\n\t\t\t}\n\t\t\tbw.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tscanner.close();\n\t\t}\n\t}\n}\n", "idx": "1313"}
{"func": "package googlejam1.p314;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main\r\n{\r\n\tpublic static void main(String args[]) throws Exception\r\n\t{\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\t\r\n\t\tint cases = Integer.parseInt(br.readLine());\r\n\t\t\r\n\t\tfor(int i = 0; i < cases; i++)\r\n\t\t{\r\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \": \");\r\n\t\t\t\r\n\t\t\tint periods = Integer.parseInt(br.readLine());\r\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\r\n\t\t\t\r\n\t\t\tint[] mushrooms = new int[periods];\r\n\t\t\tfor(int j = 0; j < periods; j++)\r\n\t\t\t{\r\n\t\t\t\tmushrooms[j] = Integer.parseInt(st.nextToken());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint eaten = 0;\n\t\t\tint prev = mushrooms[0];\n\t\t\tfor(int i1 = 1; i1 < mushrooms.length; i1++)\n\t\t\t{\n\t\t\t\tif(mushrooms[i1] < prev)\n\t\t\t\t{\n\t\t\t\t\teaten += prev - mushrooms[i1];\n\t\t\t\t}\n\t\t\t\tprev = mushrooms[i1];\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.print(\"\" + eaten);\n\t\t\tint maxInPeriod = 0;\n\t\t\tint prev1 = mushrooms[0];\n\t\t\tfor(int i2 = 1; i2 < mushrooms.length; i2++)\n\t\t\t{\n\t\t\t\tif((prev1 - mushrooms[i2]) > maxInPeriod)\n\t\t\t\t{\n\t\t\t\t\tmaxInPeriod = prev1 - mushrooms[i2];\n\t\t\t\t}\n\t\t\t\tprev1 = mushrooms[i2];\n\t\t\t}\n\t\t\t\n\t\t\tint eaten1 = 0;\n\t\t\tprev1 = mushrooms[0];\n\t\t\tfor(int i1 = 1; i1 < mushrooms.length; i1++)\n\t\t\t{\n\t\t\t\tint potentiallyEaten = mushrooms[i1] - prev1;\n\t\t\t\tif(prev1 < maxInPeriod)\n\t\t\t\t{\n\t\t\t\t\teaten1 += prev1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\teaten1 += maxInPeriod;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tprev1 = mushrooms[i1];\n\t\t\t}\n\t\t\t\n\t\t\tint answer = maxInPeriod * (mushrooms.length-1);\n\t\t\tSystem.out.println(\" \" + eaten1);\r\n\t\t}\r\n\t}\r\n\r\n}\t\r\n", "idx": "1314"}
{"func": "package googlejam1.p316;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\npublic class q1 {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\r\n\t\tString inputLine;\r\n\t\ttry{\r\n\t\t\t// open input stream test.txt for reading purpose.\r\n\t\t\tBufferedReader br = new BufferedReader(new FileReader(\"C:/Users/vincent/Desktop/A-large.txt\"));\r\n\t\t\tFileWriter fw = new FileWriter(\"C:/Users/vincent/Desktop/output.txt\");\r\n\t\t\tinputLine = br.readLine();\r\n\r\n\t\t\tint testCaseNumber = 0;\r\n\r\n\t\t\tint[] inputData;\r\n\r\n\t\t\twhile ((inputLine = br.readLine()) != null) {\r\n\t\t\t\tdouble maxDiff = 0;\r\n\t\t\t\tint currentInPlate = 0;\r\n\t\t\t\tint timesWeCheck = 0;\r\n\r\n\t\t\t\ttestCaseNumber++;\r\n\r\n\t\t\t\ttimesWeCheck = Integer.parseInt(inputLine);\r\n\t\t\t\tinputData = new int[timesWeCheck];\r\n\r\n\t\t\t\tinputLine = br.readLine();\r\n\t\t\t\tString[] inputParts = inputLine.split(\" \");\r\n\t\t\t\tcurrentInPlate = Integer.parseInt(inputParts[0]);\r\n\t\t\t\tinputData[0] = currentInPlate;\r\n\r\n\t\t\t\tfor (int i = 1; i < timesWeCheck; i++) {\r\n\t\t\t\t\tint newInPlate = Integer.parseInt(inputParts[i]);\r\n\t\t\t\t\tint currentDiff = currentInPlate - newInPlate;\r\n\t\t\t\t\tif (currentDiff >= 0 && currentDiff > maxDiff) {\r\n\t\t\t\t\t\tmaxDiff = currentDiff;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcurrentInPlate = newInPlate;\r\n\t\t\t\t\tinputData[i] = newInPlate;\r\n\t\t\t\t}\n\t\t\t\tint answer1 = 0;\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < inputData.length-1; i++) {\n\t\t\t\t\tint currentOnPlate = inputData[i];\n\t\t\t\t\tint nextOnPlate = inputData[i+1];\n\t\t\t\t\tint diff = currentOnPlate - nextOnPlate;\n\t\t\t\t\tif (diff > 0) {\n\t\t\t\t\t\tanswer1 += diff;\n\t\t\t\t\t}\n\t\t\t\t}\r\n\r\n\t\t\t\tint answer = answer1;\n\t\t\t\tdouble rate = maxDiff/10;\n\t\t\t\tint answer3 = 0;\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < inputData.length-1; i++) {\n\t\t\t\t\tint currentOnPlate = inputData[i];\n\t\t\t\t\tif (currentOnPlate - inputData[i+1] >= 0) {\n\t\t\t\t\t\tif (currentOnPlate >= rate*10) {\n\t\t\t\t\t\t\tanswer3 += rate*10;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tanswer3 += currentOnPlate;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (currentOnPlate < rate*10) {\n\t\t\t\t\t\t\tanswer3 += currentOnPlate;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tanswer3 += rate*10;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\r\n\t\t\t\tint answer2 = answer3;\r\n\t\t\t\tString output = \"Case #\" + testCaseNumber + \": \" + answer + \" \" + answer2 + \"\\n\";\r\n\t\t\t\tfw.write(output);\r\n\t\t\t}\r\n\t\t\tfw.close();\r\n\t\t\tbr.close();\r\n\t\t}catch(Exception e){\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}", "idx": "1316"}
{"func": "package googlejam1.p323;\nimport java.util.*;\n\npublic class A {\n    static Scanner s;\n    public static void main(String[] args) {\n        s = new Scanner(System.in);\n        int t = s.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = s.nextInt();\n\t\t\tint[] arr = new int[n];\n\t\t\tfor (int i1 = 0; i1 < n; i1++) {\n\t\t\t    arr[i1] = s.nextInt();\n\t\t\t}\n\t\t\t// First Case\n\t\t\tint prev = arr[0];\n\t\t\tint first = 0;\n\t\t\tfor (int i3 = 1; i3 < n; i3++) {\n\t\t\t    if (arr[i3] < prev) {\n\t\t\t        first += prev - arr[i3];\n\t\t\t    }\n\t\t\t    prev = arr[i3];\n\t\t\t}\n\t\t\t\n\t\t\t// Second Case\n\t\t\tprev = arr[0];\n\t\t\tint max = 0;\n\t\t\tfor (int i2 = 1; i2 < n; i2++) {\n\t\t\t    if (arr[i2] < prev) {\n\t\t\t        if (max < prev - arr[i2]) {\n\t\t\t            max = prev - arr[i2];\n\t\t\t        }\n\t\t\t    }\n\t\t\t    prev = arr[i2];\n\t\t\t}\n\t\t\tint second = 0;\n\t\t\tfor (int i4 = 0; i4 < n-1; i4++) {\n\t\t\t    second += Math.min(max, arr[i4]);\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + first + \" \" + second);\n        }\n    }\n}\n", "idx": "1323"}
{"func": "package googlejam1.p324;\nimport java.io.File;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class code {\n  public static void main(String[] args) throws Exception {\n    Scanner s = new Scanner(new File(\"A-large.in\"));// \"Asample.in\"));\n    int input_size = s.nextInt();\n    for (int n = 0; n < input_size; n++) {\n      int test_size = s.nextInt();\n      int[] a = new int[test_size];\n      for (int x = 0; x < test_size; x++){\n        a[x] = s.nextInt();\n      }\n\tint result1 = 0;\n\tfor(int i = 0; i < a.length - 1; i ++){\n\t  if(a[i] > a[i + 1]){\n\t    result1 += a[i] - a[i + 1];\n\t  }\n\t}\n      int result = result1;\n\tint result3 = 0;\n\tint speed = 0;\n\tfor(int i = 0; i < a.length - 1; i++){\n\t  speed = Math.max(speed, a[i] - a[i +1]);\n\t}\n\tfor(int i = 0; i < a.length - 1; i++){\n\t  result3 += Math.min(a[i], speed);\n\t}\n      int result2 = result3;\n      System.out.println(\"Case #\" + (n + 1) + \": \" + result + \" \"+result2);\n    }\n  }\n}\n", "idx": "1324"}
{"func": "package googlejam1.p326;\nimport java.util.*;\nimport java.io.*;\n\npublic class Q1 {\n\n\tpublic static void main(String[] args) throws IOException{\n\t\t// TODO Auto-generated method stub\n\t\tFile file = new File(\"A-large.in\");\n\t\tScanner in = new Scanner(new BufferedReader(new FileReader(file)));\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"A-large.out.txt\")));\n\t\t// number of test cases\n\t\tint t = Integer.valueOf(in.nextLine());\n\t\tfor(int round = 1; round <= t; round++) {\n\t\t\tint N = Integer.valueOf(in.nextLine());\n\t\t\tString delim = \"[ ]\";\n\t\t\tString[] tokens = in.nextLine().split(delim);\n\t\t\tint[] input = new int[N];\n\t\t\tfor(int i = 0; i < N; i++) {\n\t\t\t\tinput[i] = Integer.valueOf(tokens[i]);\n\t\t\t}\n\t\t\tfor(int i: input) System.out.println(i);\n\t\t\t// TODO Auto-generated method stub\n\t\t\tint[] result1 = new int[2];\n\t\t\tint total = 0;\n\t\t\tfor(int i1 = 0; i1 < N-1; i1++) {\n\t\t\t\ttotal += Math.max(0, input[i1] - input[i1+1]);\n\t\t\t}\n\t\t\tresult1[0] = total;\n\t\t\ttotal = 0;\n\t\t\t// find min rate first\n\t\t\tint maxGap = 0;\n\t\t\tfor(int i2 = 0; i2 < N-1; i2++) {\n\t\t\t\tmaxGap = Math.max(maxGap, input[i2] - input[i2+1]);\n\t\t\t}\n\t\t\tif(maxGap == 0) result1[1] = 0;\n\t\t\telse {\n\t\t\t\tdouble rate = maxGap / 10.0;\n\t\t\t\tfor(int i3 = 1; i3 < N; i3++) {\n\t\t\t\t\ttotal += Math.min(maxGap, input[i3-1]);\n\t\t\t\t}\n\t\t\t\tresult1[1] = total;\n\t\t\t}\n\t\t\t\n\t\t\tint[] result = result1;\n\t\t\tout.println(\"Case #\" + round + \": \" + result[0] + \" \" + result[1]);\n\t\t}\n\t\t\n\t\tout.flush();\n\t\tout.close();\n\t\tin.close();\n\t}\n\n}\n", "idx": "1326"}
{"func": "package googlejam1.p327;\nimport java.util.*;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tint cases = input.nextInt();\r\n\t\tfor (int c = 0; c < cases; c++) {\r\n\t\t\tint n = input.nextInt();\r\n\t\t\tint[] m = new int[n];\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tm[i] = input.nextInt();\r\n\t\t\t}\r\n\t\t\tint minA = 0;\r\n\t\t\tint maxD = 0;\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\tint d = m[i-1] - m[i];\r\n\t\t\t\tif (d > 0) {\r\n\t\t\t\t\tminA += d;\r\n\t\t\t\t\tmaxD = Math.max(maxD, d);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint minB = 0;\r\n\t\t\tfor (int i = 0; i < n-1; i++) {\r\n\t\t\t\tminB += (m[i] < maxD ? m[i] : maxD);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(String.format(\"Case #%d: %d %d\", c+1, minA, minB));\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1327"}
{"func": "package googlejam1.p331;\n/**\n * Created by LaiQX on 04/17/15.\n */\nimport java.util.*;\nimport java.io.*;\npublic class MushroomMonster {\n    public static void main(String[] args) throws FileNotFoundException {\n\n//        String input = \"4\\n\" +\n//            \"4\\n\" +\n//            \"10 5 15 5\\n\" +\n//            \"2\\n\" +\n//            \"100 100\\n\" +\n//            \"8\\n\" +\n//            \"81 81 81 81 81 81 81 0\\n\" +\n//            \"6\\n\" +\n//            \"23 90 40 0 100 9\";\n\n        Scanner sc = new Scanner(System.in);\n        PrintWriter wr = new PrintWriter(\"output2\");\n        int T = Integer.parseInt(sc.nextLine());\n        for (int i = 0; i< T ; i++) {\n\n            StringBuilder ans = new StringBuilder();\n            ans.append(\"Case #\"+(i+1)+\": \");\n\n            int N = Integer.parseInt(sc.nextLine());\n            String[] ms = sc.nextLine().split(\" \");\n            int count_1 = 0;\n            int count_2 = 0;\n            int max = 0;\n            for (int j = 1; j<N; j++) {\n                int last = Integer.parseInt(ms[j-1]);\n                int curr = Integer.parseInt(ms[j]);\n                if (last>curr) {\n                    count_1 = count_1 + (last-curr);\n                    max = Math.max(max,last-curr);\n                }\n            }\n\n            for (int j = 0; j<N-1; j++) {\n                int curr = Integer.parseInt(ms[j]);\n                if (curr<max) {\n                    count_2 = count_2 + curr;\n                } else {\n                    count_2 = count_2 + max;\n                }\n            }\n\n            ans.append(count_1+\" \");\n            ans.append(count_2);\n\n            wr.println(ans);\n\n        }\n        wr.close();\n    }\n}\n", "idx": "1331"}
{"func": "package googlejam1.p332;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class Mushroom {\r\n\r\n\tprivate String folderName=\"C:/Data/workspaces/workspaces2015/cj/codejam/files\" ; \r\n\t\r\n\tprivate String fileName=\"A-large\" ;\r\n\t\r\n\tprivate String inputFileName=fileName+\".in\" ; \r\n\t\r\n\tprivate String outputFileName=fileName+\".out\" ; \r\n\t\r\n\tprivate BufferedReader reader ;\r\n\t\r\n\tprivate BufferedWriter writer ;\r\n\t\r\n\tprivate Integer nCases ;\r\n\t\r\n\tprivate Integer caseNumber ;\r\n\t\r\n\tprivate Integer n ;\r\n\t\r\n\tprivate int[] q ;\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tMushroom sc=new Mushroom() ;\r\n\t\t\tsc.reader=new BufferedReader(new FileReader(new File(sc.folderName,sc.inputFileName))) ;\r\n\t\t\tsc.nCases=new Integer(sc.reader.readLine()) ;\n\t\t\tSystem.out.println(\"nCases=\"+sc.nCases);\r\n\t\t\tsc.writer=new BufferedWriter(new FileWriter(new File(sc.folderName,sc.outputFileName))) ;\r\n\t\t\tfor (int i=1 ; i<=sc.nCases ; i++) {\n\t\t\t\tsc.caseNumber=i ;\n\t\t\t\tsc.n=new Integer(sc.reader.readLine()) ;\n\t\t\t\tsc.q=new int[sc.n] ;\n\t\t\t\tStringTokenizer st=new StringTokenizer(sc.reader.readLine(),\" \",false) ;\n\t\t\t\tfor (int i1=0 ; i1<sc.n ; i1++) {\n\t\t\t\t\tsc.q[i1]=new Integer(st.nextToken()) ;\n\t\t\t\t}\n\t\t\t\tint ans=0 ;\n\t\t\t\tfor (int i1=1 ; i1<sc.n ; i1++) {\n\t\t\t\t\tint diff=sc.q[i1-1]-sc.q[i1] ;\n\t\t\t\t\tif (diff>0) ans+=diff ;\n\t\t\t\t}\n\t\t\t\tint method1=ans ;\n\t\t\t\tint ans1=0 ;\n\t\t\t\tint max=0 ;\n\t\t\t\tfor (int i1=1 ; i1<sc.q.length ; i1++) {\n\t\t\t\t\tint diff=sc.q[i1-1]-sc.q[i1] ;\n\t\t\t\t\tif (diff>max) max=diff ;\n\t\t\t\t}\n\t\t\t\tfor (int i2=0 ; i2<(sc.q.length-1) ; i2++) {\n\t\t\t\t\tif (sc.q[i2]>max) {\n\t\t\t\t\t\tans1+=max ;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tans1+=sc.q[i2] ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint method2=ans1 ;\n\t\t\t\tString output=\"Case #\"+sc.caseNumber+\": \"+method1+\" \"+method2 ;\n\t\t\t\tsc.writer.write(output+\"\\n\") ;\n\t\t\t}\r\n\t\t\tsc.reader.close() ;\r\n\t\t\tsc.writer.flush() ;\n\t\t\tsc.writer.close() ;\r\n\t\t} catch (Exception exp) {\r\n\t\t\texp.printStackTrace() ;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "1332"}
{"func": "package googlejam1.p333;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class MushroomMonster\r\n{\r\n\r\n\tpublic static void main(String[] args) throws Exception\r\n\t{\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\tPrintWriter pw = new PrintWriter(\"A-large.out\");\r\n\t\t\r\n\t\tint t = Integer.parseInt(br.readLine());\r\n\t\t\r\n\t\tfor (int test = 0; test < t; test++)\r\n\t\t{\r\n\t\t\tint n = Integer.parseInt(br.readLine());\r\n\t\t\tint[] mushrooms = new int[n];\r\n\t\t\t\r\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t{\r\n\t\t\t\tmushrooms[i] = Integer.parseInt(st.nextToken());\r\n\t\t\t}\n\t\t\tint cur = 0;\n\t\t\tfor (int i = 1; i < mushrooms.length; i++)\n\t\t\t{\n\t\t\t\tcur += Math.max(0, mushrooms[i - 1] - mushrooms[i]);\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint m1 = cur;\n\t\t\tint maxDiff = 0;\n\t\t\tfor (int i = 1; i < mushrooms.length; i++)\n\t\t\t{\n\t\t\t\tmaxDiff = Math.max(maxDiff, mushrooms[i - 1] - mushrooms[i]);\n\t\t\t}\n\t\t\tint r = 0;\n\t\t\tfor (int i = 0; i < mushrooms.length - 1; i++)\n\t\t\t{\n\t\t\t\tr += Math.min(maxDiff, mushrooms[i]);\n\t\t\t}\r\n\t\t\tint m2 = r;\r\n\t\t\t\r\n\t\t\tpw.printf(\"Case #%d: %d %d%n\", test + 1, m1, m2);\r\n\t\t}\r\n\t\tbr.close();\r\n\t\tpw.close();\r\n\t}\r\n}", "idx": "1333"}
{"func": "package googlejam1.p334;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A{\r\n  public static void main (String[] args) throws Exception{\r\n    Scanner in = new Scanner (new FileReader(\"A-large.in\"));\r\n    PrintWriter out = new PrintWriter (\"A.out\");\r\n    int cases = in.nextInt();\r\n    for (int casenum = 1; casenum <= cases; casenum++){\r\n      int n = in.nextInt();\r\n      int[] mushrooms = new int[n];\r\n      for (int i = 0; i < n; i++){\r\n        mushrooms[i] = in.nextInt();\r\n      }\r\n      int maxDiff = 0;\r\n      int total = 0;\r\n      for (int i = 1; i < n; i++){\r\n        int diff = mushrooms[i-1] - mushrooms[i];\r\n        maxDiff = Math.max (maxDiff, diff);\r\n        total += Math.max(diff, 0);       \r\n      }\r\n      int constTotal = 0;\r\n      for (int i = 0; i < n-1; i++){\r\n        constTotal += Math.min(maxDiff,mushrooms[i]);\r\n      }\r\n      \r\n      out.println (\"Case #\" + casenum + \": \" + total + \" \" + constTotal);\r\n    }\r\n    out.close();\r\n    in.close();\r\n  }\r\n}", "idx": "1334"}
{"func": "package googlejam1.p335;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class prob1 {\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner in = new Scanner(new FileReader(\"input\"));\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"output\"));\n\t\t\n\t\tint cases = in.nextInt();\n\t\tfor (int a=0; a<cases; a++) {\n\t\t\tint number = in.nextInt();\n\t\t\tint mushrooms[] = new int[number];\n\t\t\tint num1 = 0;\n\t\t\tint maxRate = 0;\n\n\t\t\tfor (int b=0; b<number; b++) {\n\t\t\t\tmushrooms[b] = in.nextInt();\n\t\t\t\tif (b > 0) {\n\t\t\t\t\tif (mushrooms[b] < mushrooms[b-1]) {\n\t\t\t\t\t\tnum1 = num1 + (mushrooms[b-1] - mushrooms[b]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((mushrooms[b-1] - mushrooms[b]) > maxRate) {\n\t\t\t\t\t\tmaxRate = (mushrooms[b-1] - mushrooms[b]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint num2 = 0;\n\t\t\tfor (int b=0; b<number-1; b++) {\n\t\t\t\tif (mushrooms[b] > maxRate) {\n\t\t\t\t\tnum2 = num2 + maxRate;\n\t\t\t\t} else {\n\t\t\t\t\tnum2 = num2 + mushrooms[b];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//System.out.println(num2);\n\t\t\tout.print(\"Case #\" + (a+1) + \": \" + num1 + \" \" + num2 + \"\\n\");\n\t\t\t\n\t\t}\n\t\t\n\t\t// template output:\n\t\t// out.print(\"Case #\" + (a+1) + \": \" + time + \"\\n\");\n\t\t\n\t\tout.close();\n\t}\n}", "idx": "1335"}
{"func": "package googlejam1.p337;\nimport java.util.Scanner;\n\n\npublic class Solution {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint num = in.nextInt();\n\t\tin.nextLine();\n\t\tfor (int i = 0; i < num; ++i) {\n\t\t\tint currNum = in.nextInt();\n\t\t\tin.nextLine();\n\t\t\tint[] arr = new int[currNum];\n\t\t\tfor (int j = 0; j < currNum; ++j) arr[j] = in.nextInt();\n\t\t\tint first = 0;\n\t\t\tfor (int j = 1; j < currNum; ++j) {\n\t\t\t\tif (arr[j - 1] > arr[j]) first += arr[j - 1] - arr[j];\n\t\t\t}\n\t\t\tint second = 0;\n\t\t\tint speed = 0;\n\t\t\tfor (int j = 0; j < currNum - 1; ++j) speed = Math.max(speed, arr[j] - arr[j + 1]);\n\t\t\tfor (int j = 0; j < currNum - 1; ++j) {\n\t\t\t\tif (arr[j] <= speed) second += arr[j];\n\t\t\t\telse second += speed;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + first + \" \" + second);\n\t\t\tin.nextLine();\n\t\t}\n\t\tin.close();\n\n\t}\n\n}\n", "idx": "1337"}
{"func": "package googlejam1.p339;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Codejam_2014_1A_A {\r\n\r\n\tstatic BufferedReader br;\r\n\tstatic PrintWriter ps;\r\n\tstatic StringTokenizer st;\r\n\t\r\n\t\r\n\tpublic static void main (String[] args) throws IOException {\r\n\t\t//br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t//ps = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\r\n\t\tbr = new BufferedReader(new FileReader(\"test.txt\"));\r\n\t\tps = new PrintWriter(\"output.txt\");\r\n\t\r\n\t\tint t = Integer.parseInt(next());\r\n\t\t\r\n\t\tfor (int q = 1; q <= t; q++) {\r\n\t\t\tint n = Integer.parseInt(next());\r\n\t\t\tint[] a = new int[n];\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\ta[i] = Integer.parseInt(next());\r\n\t\t\tint min1 = 0;\r\n\t\t\tint maxDiff = 0;\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\tif (a[i] < a[i-1]) {\r\n\t\t\t\t\tmin1 += a[i-1] - a[i];\r\n\t\t\t\t\tmaxDiff = Math.max(maxDiff, a[i-1] - a[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint min2 = 0;\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\tif (maxDiff >= a[i-1])\r\n\t\t\t\t\tmin2 += a[i-1];\r\n\t\t\t\telse\r\n\t\t\t\t\tmin2 += maxDiff;\r\n\t\t\t}\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", q, min1, min2);\r\n\t\t}\r\n\t}\r\n\tstatic String next () throws IOException {\r\n\t\twhile (st == null || !st.hasMoreTokens())\r\n\t\t\tst = new StringTokenizer(br.readLine().trim());\r\n\t\treturn st.nextToken();\r\n\t}\r\n}", "idx": "1339"}
{"func": "package googlejam1.p344;\nimport java.util.*;\r\n\r\npublic class R1A_A {\r\n\tint n;\r\n\tint[] m;\r\n\t\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tR1A_A r = new R1A_A();\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint t = sc.nextInt();\n\t\tfor(int test=1;test<=t;test++){\n\t\t\tr.n = sc.nextInt();\n\t\t\t\n\t\t\tr.m = new int[r.n];\n\t\t\tfor(int i=0;i<r.n;i++) r.m[i] = sc.nextInt();\n\t\t\t\n\t\t\tint ans1 = 0;\n\t\t\tint difmax = 0;\n\t\t\tfor(int i=0;i<r.n-1;i++){\n\t\t\t\tint dif = r.m[i]-r.m[i+1];\n\t\t\t\tif(dif>0){\n\t\t\t\t\tans1 += dif;\n\t\t\t\t\tdifmax = Math.max(dif, difmax);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint ans2 = 0;\n\t\t\tfor(int i=0;i<r.n-1;i++){\n\t\t\t\tif(r.m[i]-difmax>0) ans2 += difmax;\n\t\t\t\telse ans2 += r.m[i];\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"case #\" + test + \": \" + ans1 + \" \" + ans2);\n\t\t}\n\t\tsc.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1344"}
{"func": "package googlejam1.p347;\n\r\n\r\nimport java.util.Scanner;\r\n\r\nimport static java.lang.Integer.parseInt;\r\nimport static java.lang.Long.parseLong;\r\nimport static java.lang.Double.parseDouble;\r\nimport static java.lang.Float.parseFloat;\r\n\r\npublic class Mushroom {\r\n\tpublic static Scanner s = new Scanner(System.in);\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint n = parseInt(s.nextLine());\r\n\t\t\r\n\t\tfor (int i=1 ; i<=n ; i++) {\r\n\t\t\tSystem.out.print(\"Case #\" + i + \": \");\r\n\t\t\tSystem.err.println(i+\"/\"+n);\r\n\t\t\t\r\n\t\t\tint N = s.nextInt();\n\t\t\t\n\t\t\tlong kfirst = 0;\n\t\t\tlong ksecond = 0;\n\t\t\t\n\t\t\tint m[] = new int[N];\n\t\t\tfor (int i2=0 ; i2<N ; i2++) {\n\t\t\t\tm[i2] = s.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tint rate = 0;\n\t\t\t\n\t\t\tfor (int i3=1 ; i3<N ; i3++) {\n\t\t\t\tint dif = m[i3] - m[i3-1];\n\t\t\t\t\n\t\t\t\tif (dif < 0) {\n\t\t\t\t\tkfirst += -dif;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (-dif > rate) {\n\t\t\t\t\trate = -dif;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i1=1 ; i1<N ; i1++) {\n\t\t\t\tksecond += Math.min(rate, m[i1-1]);\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(kfirst + \" \" + ksecond);\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "idx": "1347"}
{"func": "package googlejam1.p350;\nimport java.io.*;\r\npublic class A1_A {\r\n\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tBufferedReader in=new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint tc=Integer.parseInt(in.readLine());\r\n\t\tfor(int i=1;i<=tc;++i){\r\n\t\t\tint size=Integer.parseInt(in.readLine());\r\n\t\t\tString[] ar=in.readLine().split(\" \");\r\n\t\t\tint[] arr=new int[size];\r\n\t\t\tfor(int j=0;j<size;++j){\r\n\t\t\t\tarr[j]=Integer.parseInt(ar[j]);\r\n\t\t\t}\r\n\t\t\tint met1=0,maxdiff=0,temp=0,met2=0;\r\n\t\t\tfor(int j=1;j<size;++j){\r\n\t\t\t\ttemp=arr[j-1]-arr[j];\r\n\t\t\t\tif(temp>maxdiff)\r\n\t\t\t\t\tmaxdiff=temp;\r\n\t\t\t\tif(temp>0)\r\n\t\t\t\t\tmet1+=temp;\r\n\t\t\t}\r\n\t\t\tfor(int j=0;j<size-1;++j){\r\n\t\t\t\tmet2+=Math.min(arr[j], maxdiff);\r\n\t\t\t}\t\t\tSystem.out.println(met1+\" \"+met2);\r\n\t\t}\r\n\t\tin.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1350"}
{"func": "package googlejam1.p353;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass A {\r\n    public static void main(String args[]) throws Exception {\r\n        //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n        PrintWriter pw = new PrintWriter(\"A.txt\");\r\n        int n = Integer.parseInt(br.readLine());\r\n        String line;\r\n\r\n        for (int q = 1; q <= n; q++) {\r\n            line = br.readLine()+\" \"+br.readLine();\r\n            Scanner sc=new Scanner(line);\r\n            int N = sc.nextInt();\r\n            int ar[]=new int[N];\r\n            for(int i=0;i<N;i++)\r\n                ar[i]=sc.nextInt();\r\n\r\n            double rate=0;\r\n            for(int i=1;i<N;i++)\r\n                if(ar[i]<ar[i-1] && ar[i-1]-ar[i]>rate)\r\n                    rate=ar[i-1]-ar[i];\r\n\r\n            System.out.println(rate/=10);\r\n            int a=0;\r\n            double b=0,bval;\r\n            bval=ar[0];\r\n            for(int i=1;i<N;i++){\r\n                if(ar[i-1]>ar[i]) {\r\n                    a += -ar[i] + ar[i - 1];\r\n                    //aval = ar[i];\r\n                }\r\n                if (bval >= rate*10) {\r\n                    b += rate*10;\r\n                    bval -= rate*10;\r\n                }\r\n                else {\r\n                    b += bval;\r\n                    bval = 0;\r\n                }\r\n                bval = ar[i];\r\n            }\r\n            //if(rate!=0)\r\n            //    b+=bval;\r\n            //a+=aval;\r\n\r\n            System.out.println(q+\"> \"+a+\" \"+(int)b);\r\n            pw.println(\"Case #\" + q + \": \" + a + \" \" + (int)b);\r\n        }\r\n        pw.close();\r\n    }\r\n}\r\n", "idx": "1353"}
{"func": "package googlejam1.p354;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tFile file = new File(\"A-large.in\");\r\n\t\tScanner stdin = new Scanner(file);\r\n\t\tint numCases = stdin.nextInt();\r\n\t\tfor(int i = 1; i<=numCases; i++){\r\n\t\t\tint numSessions = stdin.nextInt();\r\n\t\t\tint m1Sum = 0;\r\n\t\t\tint previous = 0;\r\n\t\t\tint bigDiff = 0;\r\n\t\t\tint[] mushrooms = new int[numSessions];\r\n\t\t\tfor(int k = 0; k<numSessions; k++){\r\n\t\t\t\tint current = stdin.nextInt();\r\n\t\t\t\tmushrooms[k] = current;\r\n\t\t\t\tif(current<previous){\r\n\t\t\t\t\tif(previous-current>bigDiff){\r\n\t\t\t\t\t\tbigDiff = previous-current;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tm1Sum += previous-current;\r\n\t\t\t\t}\r\n\t\t\t\tprevious = current;\r\n\t\t\t}\r\n\t\t\tint m2Sum = 0;\r\n\t\t\tfor(int k=0; k<numSessions-1; k++){\r\n\t\t\t\tint current = mushrooms[k];\r\n\t\t\t\tif(current>bigDiff){\r\n\t\t\t\t\tm2Sum += bigDiff;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tm2Sum += current;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+i+\": \"+m1Sum+\" \"+m2Sum);\r\n\t\t}\r\n\t}\r\n}", "idx": "1354"}
{"func": "package googlejam1.p355;\n\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\n\npublic class A {\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        Scanner sc = new Scanner(new File(\"A-large.in\"));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"out.txt\")));\n        //Scanner sc = new Scanner(System.in);\n        //Scanner sc = new Scanner(new File(\"a.txt\"));\n        int T  = sc.nextInt();\n        for (int i = 0; i < T; i++) {\n            int N = sc.nextInt();\n            int arr[] = new int [N];\n            int met1 = 0;\n            \n            float maxdif = 0;\n            for (int j = 0; j < N; j++) {\n                int n = sc.nextInt();\n                arr[j] = n;\n                \n                if(j != 0 && arr[j] < arr[j-1]){\n                    met1 += arr[j-1] - arr[j];\n                    if(arr[j-1] - arr[j] > maxdif){\n                        maxdif = arr[j-1] - arr[j];\n                    }\n                }\n            }\n            maxdif = maxdif/10.0f;\n            int met2 = 0;\n            if(maxdif!=0){\n                for (int j = 0; j < arr.length-1; j++) {\n                    if(arr[j] < (maxdif*10)){\n                        met2 += arr[j];\n                    }else{\n                        met2 += maxdif*10;\n                    }\n                }\n            }\n            \n            System.out.println(\"Case #\" + (i+1) + \": \" + met1 + \" \" + met2);\n            bw.write(\"Case #\" + (i+1) + \": \" + met1 + \" \" + met2);\n            bw.newLine();\n            \n        }\n        bw.close();\n    }\n}\n", "idx": "1355"}
{"func": "package googlejam1.p356;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\npublic class ASecondRound {\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint T = Integer.parseInt(br.readLine());\r\n\t\tfor (int cases = 1; cases <= T; cases++) {\r\n\t\t\tint n = Integer.parseInt(br.readLine());\r\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\r\n\t\t\tint[] nums = new int[n];\r\n\t\t\tfor (int i = 0; i < n; i++) \r\n\t\t\t\tnums[i] = Integer.parseInt(st.nextToken());\r\n\t\t\tint ans1 = 0, ans2 = 0;\r\n\t\t\tfor (int i = 1; i < nums.length; i++) \r\n\t\t\t\tif(nums[i] < nums[i-1]) ans1 += nums[i-1] - nums[i];\r\n\t\t\tdouble rate = 0;\r\n\t\t\tfor (int i = nums.length-1; i > 0; i--) \r\n\t\t\t\trate = Math.max(rate, nums[i-1] - nums[i]);\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < nums.length-1; i++) {\r\n\t\t\t\tif(nums[i] > rate) ans2 += rate;\r\n\t\t\t\telse ans2 += nums[i];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + cases + \": \" + ans1 + \" \" + ans2);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1356"}
{"func": "package googlejam1.p357;\n/* Filename: A.java\r\n * Author: Mushiyo\r\n */\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\t//Scanner input = new Scanner(System.in);\r\n\t\tScanner input = new Scanner(new File(\"A-large.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new File(\"A.out\"));\r\n\r\n\t\twhile (input.hasNext()) {\r\n\t\t\tint T = input.nextInt();\r\n\r\n\t\t\tfor (int caseNum = 1; caseNum <= T; ++caseNum) {\r\n\t\t\t\tint N = input.nextInt();\r\n\t\t\t\tint[] mushroom = new int[N];\r\n\r\n\t\t\t\tfor (int i = 0; i < mushroom.length; ++i) {\r\n\t\t\t\t\tmushroom[i] = input.nextInt();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint method1 = 0;\r\n\t\t\t\tint rate = 0;\r\n\r\n\t\t\t\tfor (int i = 1; i < mushroom.length; ++i) {\r\n\t\t\t\t\tif (mushroom[i] < mushroom[i - 1]) {\r\n\t\t\t\t\t\tmethod1 += mushroom[i - 1] - mushroom[i];\r\n\t\t\t\t\t\trate = Math.max(rate, mushroom[i - 1] - mushroom[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint method2 = 0;\r\n\t\t\t\tfor (int i = 0; i < mushroom.length - 1; ++i) {\r\n\r\n\t\t\t\t\tif (mushroom[i] <= rate) {\r\n\t\t\t\t\t\tmethod2 += mushroom[i];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmethod2 += rate;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//out.printf(\"rate: %d\\n\", rate);\r\n\t\t\t\tout.printf(\"Case #%d: %d %d\\n\", caseNum, method1, method2);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tinput.close();\r\n\t\tout.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1357"}
{"func": "package googlejam1.p359;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n\npublic class Mushroom {\n\tpublic static void main(String args[]) throws NumberFormatException, IOException\n\t{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"input.txt\")));\n\t\t\n\t    int test_no = Integer.parseInt(br.readLine());\n\t    \n\t    BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\t\n\t\n\t    for(int i = 1; i <= test_no; i++)\n\t    {\n\t    \tint stringlength = Integer.parseInt(br.readLine());\n\t    \t\n\t    \tString[] data = br.readLine().split(\" \");\n\t    \t\n\t    \tint count_second = 0;\n\t    \tint largest_diff = 0;\n\t    \tfor(int j = 0; j < stringlength -1; j++)\n\t    \t{\n\t    \t\tint left = Integer.parseInt(data[j]);\n\t    \t\tint right = Integer.parseInt(data[j+1]);\n\t    \t\tint difference = right - left;\n\t    \t\tif(difference <= 0)\n\t    \t\t\tcount_second -= difference;\n\t    \t\tif(-difference >= largest_diff)\n\t    \t\t\tlargest_diff = -difference;\n\t    \t\t\n\t    \t}\n\t    \t\n\t    \tint count_second2 = 0;\n\t    \tfor(int j = 0; j < stringlength -1; j++)\n\t    \t{\n\t    \t\tint left = Integer.parseInt(data[j]);\n\t    \t\tint right = Integer.parseInt(data[j+1]);\n\t    \t\tif(left <= largest_diff)\n\t    \t\t\tcount_second2 += left;\n\t    \t\telse\n\t    \t\t\tcount_second2 += largest_diff;\n\t    \t\t\n\t    \t\t\n\t    \t}\n\t    \tSystem.out.println(count_second);\n\t    \tSystem.out.println(count_second2);\n\t    \tout.write(\"Case #\");\n\t    \tout.write(String.valueOf(i));\n\t    \tout.write(\": \");\n\t    \tout.write(String.valueOf(count_second));\n\t    \tout.write(String.valueOf(\" \"));\n\t    \tout.write(String.valueOf(count_second2));\n\t    \tout.write(\"\\n\");\n\t    }\n\t    br.close();\n\t    out.close();\n\t    \n\t    \n\t}\n\n\n}\n", "idx": "1359"}
{"func": "package googlejam1.p360;\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class CodeJamR1A2015A {\n    public static Scanner in;\n    public static PrintWriter out;\n\n    public static void main(String[] args) throws FileNotFoundException {\n        in = new Scanner(new File(\"input.txt\"));\n        out = new PrintWriter(new BufferedOutputStream(new FileOutputStream(\n                new File(\"output.txt\"))));\n        int totalCases = in.nextInt();\n        in.nextLine();\n        for (int i = 1; i <= totalCases; i++) {\n\t\t\tint n = in.nextInt();\n\t\t\tint oldM=0;\n\t\t\tint sum1=0;\n\t\t\tint sum2=0;\n\t\t\tint mostDiff=0;\n\t\t\tint[] a = new int[n];\n\t\t\ta[0] = in.nextInt();\n\t\t\toldM=a[0];\n\t\t\tfor (int i2=1; i2<n-1; i2++){\n\t\t\t    a[i2] = in.nextInt();\n\t\t\t    if (a[i2]<oldM) sum1+=(oldM-a[i2]);\n\t\t\t    if ((oldM-a[i2])>mostDiff) mostDiff=(oldM-a[i2]);\n\t\t\t    oldM=a[i2];\n\t\t\t}\n\t\t\tint m = in.nextInt();\n\t\t\tif (m<oldM) sum1 += (oldM - m);\n\t\t\tif ((oldM-m)>mostDiff) mostDiff=(oldM-m);\n\t\t\tfor (int i1=0;i1<n-1;i1++){\n\t\t\t    if (a[i1]<mostDiff) sum2+=a[i1];\n\t\t\t    else sum2+=mostDiff;\n\t\t\t}\n\t\t\tout.println(\"Case #\" + i + \": \"+ sum1+\" \"+sum2);\n\t\t}\n        out.close();\n        System.err.println(\"Completed\");\n    }\n}", "idx": "1360"}
{"func": "package googlejam1.p363;\nimport java.util.Scanner;\nclass t {\n  public static void main(String[] args) {\n    int t, c;\n    Scanner sc = new Scanner(System.in);\n    t = sc.nextInt();\n    for (c = 1; c <= t; c++) {\n      int n = sc.nextInt();\n      int[] s = new int[n];\n      for (int i = 0; i < n; i++) {\n        s[i] = sc.nextInt();\n      }\n      int total = 0, total1 = 0, maxDiff = 0;\n      for (int i = 1; i < n; i++) {\n        if (s[i-1] > s[i]) {\n          int diff = s[i-1] - s[i];\n          total += diff;\n          maxDiff = Math.max(diff, maxDiff);\n        }\n      }\n      for (int i = 0; i < n-1; i++) {\n        total1 += Math.min(maxDiff, s[i]);\n      }\n      System.out.printf(\"Case #%d: %d %d\\n\", c, total, total1);\n    }\n  }\n}\n", "idx": "1363"}
{"func": "package googlejam1.p364;\nimport java.util.*;\nimport java.io.*;\nimport java.lang.Math;\nimport java.math.*;\n\npublic class Q1{\n\tpublic static void main(String args[]){\n\t\tFile f = new File(args[0]);\n\t\ttry{\n\t\t\tScanner s = new Scanner(f);\n\t\t\tint time = Integer.parseInt(s.next());\n\t\t\tPrintWriter writer = new PrintWriter(\"output.txt\", \"UTF-8\");\n\t\t\tfor(int in = 1; in <= time; in++) {\n\t\t\t\tint timeslots = Integer.parseInt(s.next());\n\t\t\t\tint[] mushrooms = new int[timeslots];\n\t\t\t\tfor(int m = 0; m < timeslots; m ++){\n\t\t\t\t\tmushrooms[m] = Integer.parseInt(s.next());\n\t\t\t\t}\n\t\t\t\tint eat = 0;\n\t\t\t\tint prev = mushrooms[0];\n\t\t\t\tfor(int i : mushrooms){\n\t\t\t\t\tif(i >= prev){\n\t\t\t\t\t\tprev = i;\n\t\t\t\t\t} else {\n\t\t\t\t\t\teat += (prev - i);\n\t\t\t\t\t\tprev = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint m1 = eat;\n\t\t\t\tint interval = 0;\n\t\t\t\tint eat1 = 0;\n\t\t\t\tint prev1 = mushrooms[0];\n\t\t\t\tfor(int i2 = 1; i2<mushrooms.length;i2++){\n\t\t\t\t\tif(mushrooms[i2] < prev1){\n\t\t\t\t\t\tif(prev1 - mushrooms[i2] > interval){\n\t\t\t\t\t\t\tinterval = prev1 - mushrooms[i2];\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t\tprev1 = mushrooms[i2];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int i1 = 0; i1 < mushrooms.length - 1; i1++){\n\t\t\t\t\tif(mushrooms[i1] <= interval){\n\t\t\t\t\t\teat1 += mushrooms[i1]; // eat up;\n\t\t\t\t\t} else {\n\t\t\t\t\t\teat1 += interval;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint m2 = eat1;\n\t\t\t\tSystem.out.println(\"Finished: \" + in);\n\t\t\t\twriter.println(\"Case #\" + in + \": \" + m1 + \" \" + m2);\n\t\t\t}\n\t\t\twriter.close();\n\t\t}catch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "1364"}
{"func": "package googlejam1.p367;\nimport java.io.*;\r\nimport java.util.Scanner;\r\n\r\npublic class A\r\n{\r\n\r\n\tstatic int N;\r\n\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tString fileName = \"A-large\";\r\n\t\tScanner in = new Scanner(new File(fileName + \".in\"));\r\n\t\tPrintWriter out = new PrintWriter(new FileWriter(fileName + \".out\"));\r\n\r\n\t\tint noOfCases = in.nextInt();\r\n\t\tfor (int caseNo = 1; caseNo <= noOfCases; caseNo++)\r\n\t\t{\r\n\t\t\tN = in.nextInt();\r\n\t\t\tint[] mushrooms = new int[N];\r\n\t\t\tfor (int i = 0; i < N; i++)\r\n\t\t\t\tmushrooms[i] = in.nextInt();\r\n\r\n\t\t\tint first = 0;\r\n\t\t\tint second = 0;\r\n\r\n\t\t\tint rate = 0;\r\n\r\n\t\t\tfor (int i = 1; i < N; i++)\r\n\t\t\t{\r\n\t\t\t\tint diff = mushrooms[i-1] - mushrooms[i];\r\n\t\t\t\tif (diff > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\trate = Math.max(rate, diff);\r\n\t\t\t\t\tfirst += diff;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < N - 1; i++)\r\n\t\t\t{\r\n\t\t\t\tsecond += Math.min(rate, mushrooms[i]);\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d%n\", caseNo, first, second);\r\n\t\t\tout.printf(\"Case #%d: %d %d%n\", caseNo, first, second);\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1367"}
{"func": "package googlejam1.p368;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Scanner;\n\n\npublic class Mashroom {\n\tpublic static void main(String[] args) throws IOException {\n\t\tPath fFilePath = Paths.get(args[0]);\n\t\ttry (Scanner scanner = new Scanner(fFilePath,\n\t\t\t\tStandardCharsets.UTF_8.name())) {\n\t\t\tint count = 0;\n\t\t\tint platesCount;\n\t\t\twhile (scanner.hasNextLine()) {\n\t\t\t\tif (count == 0) {\n\t\t\t\t\tscanner.nextLine();\n\t\t\t\t} else {\n\t\t\t\t\tplatesCount = Integer.valueOf(scanner.nextLine());\n\t\t\t\t\tString plateLine = scanner.nextLine();\n\t\t\t\t\tint[] cakes = new int[platesCount];\n\t\t\t\t\tScanner scanner1 = new Scanner(plateLine);\n\t\t\t\t\tscanner1.useDelimiter(\" \");\n\t\t\t\t\tint index = 0;\n\t\t\t\t\twhile(scanner1.hasNext()){\n\t\t\t\t\t\tString count3 = scanner1.next();\n\t\t\t\t\t\tcakes[index] = Integer.valueOf(count3);\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t}\n\t\t\t\t\tint[] mashrooms = cakes;\n\t\t\t\t\tint count1 = 0;\n\t\t\t\t\tfor(int i = 0; i < mashrooms.length - 1; i++) {\n\t\t\t\t\t\tif(mashrooms[i] > mashrooms[i+1]) {\n\t\t\t\t\t\t\tcount1 += mashrooms[i] - mashrooms[i+1];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t\tint any = count1;\n\t\t\t\t\tint count2 = 0;\n\t\t\t\t\t//\t\tdouble time = mashrooms[0] / 10;\n\t\t\t\t\t\t\tint max = 0;\n\t\t\t\t\t\t\tfor(int i = 0; i < mashrooms.length - 1; i++) {\n\t\t\t\t\t\t\t\tmax = Math.max(max, mashrooms[i] - mashrooms[i+1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t//\t\tdouble time = max / 10;\n\t\t\t\t\t\t\tfor(int i = 0; i < mashrooms.length - 1; i++) {\n\t\t\t\t\t//\t\t\tint d =\n\t\t\t\t\t\t\t\tif(max < mashrooms[i]) {\n\t\t\t\t\t\t\t\t\tcount2 += max;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcount2 += mashrooms[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\tint constant = count2;\n\t\t\t\t\tSystem.out.println(\"Case #\" + count + \": \" + any + \" \" + constant);\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n}\n", "idx": "1368"}
{"func": "package googlejam1.p369;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Mushrooms {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner in = new Scanner (new File(\"b.in\"));\r\n\t\t//Scanner in = new Scanner (System.in);\r\n\t\tint cases = in.nextInt();\r\n\t\tfor (int caseNo = 1; caseNo <= cases; caseNo++)\r\n\t\t{\r\n\t\t\tint size = in.nextInt();\r\n\t\t\tint []pieces = new int[size];\r\n\t\t\tfor (int i = 0; i < size; i++)\r\n\t\t\t{\r\n\t\t\t\tpieces[i] = in.nextInt();\r\n\t\t\t}\n\t\t\tint count = 0;\n\t\t\tint base = pieces[0];\n\t\t\tfor (int i = 1; i < pieces.length; i++)\n\t\t\t{\n\t\t\t\tint curr = pieces[i];\n\t\t\t\tif (curr < base)\n\t\t\t\t\tcount += (base - curr);\n\t\t\t\tbase = curr;\n\t\t\t}\r\n\t\t\tint res1 = count;\n\t\t\tint max= 0;\n\t\t\tint base1 = pieces[0];\n\t\t\tfor (int i = 1; i < pieces.length; i++)\n\t\t\t{\n\t\t\t\tint curr = pieces[i];\n\t\t\t\tif (curr < base1)\n\t\t\t\t{\n\t\t\t\t\tint diff = (base1 - curr);\n\t\t\t\t\tif (diff > max)\n\t\t\t\t\t\tmax = diff;\n\t\t\t\t}\n\t\t\t\tbase1 = curr;\n\t\t\t}\n\t\t\tint rate = max/10;\n\t\t\tint count1 = 0;\n\t\t\tbase1 = pieces[0];\n\t\t\tint eaten = max;\n\t\t\tfor (int i = 0; i < pieces.length-1; i++)\n\t\t\t{\n\t\t\t\tint curr = pieces[i];\n\t\t\t\tif (curr < eaten)\n\t\t\t\t\tcount1 += curr;\n\t\t\t\telse\n\t\t\t\t\tcount1 += max;\n\t\t\t\t//System.out.println(\"Eaten =  \" + count);\n\t\t\t\tbase1 = curr;\n\t\t\t}\r\n\t\t\tint res2 = count1;\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + caseNo + \": \" + res1 + \" \" + res2);\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "1369"}
{"func": "package googlejam1.p370;\nimport java.util.Scanner;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintWriter;\r\n\r\npublic class A{\r\n\tpublic static void main(String args[]){\r\n\t\tString inputFileName = \"A-large.in\";\r\n\t\tString outputFileName = \"A-large.out\";\r\n\t\ttry{\r\n\t\t\tScanner scan = new Scanner(new FileInputStream(inputFileName));\r\n\t\t\tPrintWriter printer = new PrintWriter(new FileOutputStream(outputFileName));\r\n\t\t\tint T = scan.nextInt();\r\n\t\t\tscan.nextLine();\r\n\t\t\tfor(int t = 0; t < T; t++){\r\n\t\t\t\tint N = scan.nextInt();\r\n\t\t\t\tint[] counts = new int[N];\r\n\t\t\t\tfor(int i = 0; i < N; i++){\r\n\t\t\t\t\tcounts[i] = scan.nextInt();\r\n\t\t\t\t}\r\n\t\t\t\tint count1 = 0;\r\n\t\t\t\tint maxDiff = 0;\r\n\t\t\t\tfor(int i = 0; i < N -1; i++){\r\n\t\t\t\t\tint diff = Math.max(0,counts[i] - counts[i+1]); \r\n\t\t\t\t\tcount1 += diff;\r\n\t\t\t\t\tif(maxDiff < diff)\r\n\t\t\t\t\t\tmaxDiff = diff;\r\n\t\t\t\t}\r\n\t\t\t\tint count2 = 0;\r\n\t\t\t\tfor(int i = 0; i < N -1; i++){\r\n\t\t\t\t\tcount2 += Math.min(counts[i],maxDiff);\r\n\t\t\t\t}\r\n\t\t\t\tprinter.println(\"Case #\"+(t+1)+\": \"+count1+\" \"+count2);\r\n\t\t\t}\r\n\t\t\tprinter.close();\r\n\t\t}catch(Exception e){\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}", "idx": "1370"}
{"func": "package googlejam1.p371;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Scanner;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\npublic class MushroomMonster {\r\n\t\r\n\tstatic final String CASE_PREFIX = \"Case #\";\r\n    static final String COLON = \":\";\r\n    static final String BLANK_SPACE = \" \";\r\n    static final String COLON_SPACE = COLON+BLANK_SPACE;\r\n    \r\n    /**\r\n\t * \r\n\t * Declare any static variable over here\r\n\t */\r\n\t\r\n    public static void main(String[] args) {\r\n    \t\r\n    \tString root_path = \"C:/Vijay/Workspaces/GoogleCodeJam/\";\r\n        String fileName=root_path+\"inputFiles/2015/MushroomMonster/A-large\";\r\n        \r\n        try (Scanner reader = new Scanner(new BufferedReader(new FileReader(fileName+\".in\")));\n\t\t\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName+\"_out.txt\"), \"utf-8\"))\t){\n\t\t\n\t\t    //String inputLine = reader.readLine();\n\t\t    int T = reader.nextInt();\n\t\t    for(int caseNumber=1;caseNumber<=T;caseNumber++){\n\t\t    \tint N = reader.nextInt();\n\t\t        int[] mush = new int[N];\n\t\t        for(int i=0;i<N;i++){\n\t\t        \tmush[i] = reader.nextInt();\n\t\t        }\n\t\t\t\tint result = 0;\n\t\t\t\tint a = mush[0];\n\t\t\t\tfor(int i=1;i<mush.length;i++){\n\t\t\t\t\tint b = mush[i];\n\t\t\t\t\tif(b<a){\n\t\t\t\t\t\tresult+=a-b;\n\t\t\t\t\t}\n\t\t\t\t\ta=b;\n\t\t\t\t}\n\t\t        \n\t\t        int result1 = result;\n\t\t\t\tint result3 = 0;\n\t\t\t\tint rate = 0;\n\t\t\t\tint a1 = mush[0];\n\t\t\t\tfor(int i=1;i<mush.length;i++){\n\t\t\t\t\tint b=mush[i];\n\t\t\t\t\tif(b<a1){\n\t\t\t\t\t\tint temp = a1-b;\n\t\t\t\t\t\tif(rate<temp)\n\t\t\t\t\t\t\trate=temp;\n\t\t\t\t\t}\n\t\t\t\t\ta1=b;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.println(\"Rate-->\"+rate);\n\t\t\t\t\n\t\t\t\tfor(int i=0;i<mush.length-1;i++){\n\t\t\t\t\ta1=mush[i];\n\t\t\t\t\tint tem = a1-rate;\n\t\t\t\t\tif(tem>=0)\n\t\t\t\t\t\tresult3+=rate;\n\t\t\t\t\telse{\n\t\t\t\t\t\tresult3+=rate+tem;\n\t\t\t\t\t\ttem=0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t        int result2 = result3;\n\t\t        \n\t\t        \n\t\t        // write output\n\t\t        writer.write(CASE_PREFIX+caseNumber+COLON_SPACE+result1+BLANK_SPACE+result2);\n\t\t        writer.newLine();\n\t\t    }\n\t\t    \n\t\t} catch (IOException ex) {\n\t\t    Logger.getLogger(MushroomMonster.class.getName()).log(Level.SEVERE, null, ex);\n\t\t}\r\n        System.out.println(\"Done executing\");\r\n     }\r\n    \r\n  \r\n    \r\n}\r\n\r\n", "idx": "1371"}
{"func": "package googlejam1.p373;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.LinkedList;\nimport java.util.Queue;\n \n \npublic class Main {\n\t\n\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter file = new PrintWriter(\"output.txt\");\n\t\t\n\t\tint t = Integer.parseInt(in.readLine());\n\t\tfor(int i = 0; i < t; ++i){\n\t\t\tint n = Integer.parseInt(in.readLine());\n\t\t\tString line[] = in.readLine().split(\" \");\n\t\t\tint [] mush = new int [n];\n\t\t\tint wayOne = 0;\n\t\t\tint old = Integer.parseInt(line[0]);\n\t\t\tdouble gap = 0;\n\t\t\tfor(int j = 0; j < n; ++j){\n\t\t\t\tif(j!=0){\n\t\t\t\t\told = mush[j-1];\n\t\t\t\t}\n\t\t\t\tmush[j] = Integer.parseInt(line[j]);\n\t\t\t\tif(old-mush[j]>0){\n\t\t\t\t\twayOne+=old-mush[j];\n\t\t\t\t\tif(old-mush[j]>gap)gap=old-mush[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint wayTwo = 0;\n\t\t\tdouble rate = gap;\n\t\t\tdouble leftover = 0;\n\t\t\tfor(int j = 0; j < n-1; ++j){\n\t\t\t\t\n\t\t\t\tint amount = (int)(rate+leftover);\n\t\t\t\tleftover = rate+leftover-amount;\n\t\t\t\tif(rate > mush[j])wayTwo+=mush[j];\n\t\t\t\telse wayTwo += amount;\n\t\t\t}\n\t\t\t\n\t\t\n\t\t\t\n\t\t\t\n\t\t\tfile.println(\"Case #\"+(i+1)+\": \"+wayOne+\" \"+wayTwo);\n\t\t}\n\t\tfile.close();\n\t\tin.close();\n\t}\n}; ", "idx": "1373"}
{"func": "package googlejam1.p374;\nimport java.util.Scanner;\r\n\r\npublic class Mush {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint T = in.nextInt();\r\n\r\n\t\tfor (int i = 0; i < T; i++) {\r\n\t\t\tint N = in.nextInt();\n\t\t\tint[] mush = new int[N];\n\t\t\tfor (int i1 = 0; i1 < N; i1++) {\n\t\t\t\tmush[i1] = in.nextInt();\n\t\t\t}\n\t\t\tint firstOutput = 0;\n\t\t\tfor (int i2 = 0; i2 < N - 1; i2++) {\n\t\t\t\tint diff = mush[i2] - mush[i2+1];\n\t\t\t\tif (diff > 0) {\n\t\t\t\t\tfirstOutput += diff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint secondOutput = 0;\n\t\t\tint maxDiff = 0;\n\t\t\tfor (int i3 = 0; i3 < N - 1; i3++) {\n\t\t\t\tint diff = mush[i3] - mush[i3+1];\n\t\t\t\tif (diff > maxDiff) {\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i4 = 0; i4 < N - 1; i4++) {\n\t\t\t\tif (mush[i4] > maxDiff) {\n\t\t\t\t\tsecondOutput += maxDiff;\n\t\t\t\t} else {\n\t\t\t\t\tsecondOutput += mush[i4];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + firstOutput + \" \" + secondOutput);\r\n\t\t}\r\n\t\tin.close();\r\n\r\n\t}\r\n\r\n}", "idx": "1374"}
{"func": "package googlejam1.p375;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class MushroomMonster {\r\n\r\n\tprivate static final String FILES_PATH = \"E:\\\\DL\\\\gcj\\\\2015\\\\round1A\\\\\";\r\n\tprivate static final String IN_EXT = \".in\";\r\n\tprivate static final String OUT_EXT = \".out\";\r\n\t\r\n\tprivate static final String FILE_NAME = \"A-large\";\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t\r\n\t\t Scanner in = new Scanner(new File(FILES_PATH + FILE_NAME + IN_EXT));\r\n\t\t FileWriter fw = new FileWriter(new File(FILES_PATH + FILE_NAME + OUT_EXT));\r\n\t\t \r\n\t\t int nbTests = in.nextInt();\r\n\t\t in.nextLine();\r\n\t\t \r\n\t\t int nbEtapes, rate, nbM1, nbM2;\r\n\t\t int[] tab;\r\n\t\t \r\n\t\t for(int i = 0; i < nbTests; i++) {\r\n\t\t\t \r\n\t\t\t nbEtapes = in.nextInt();\r\n\t\t\t in.nextLine();\r\n\t\t\t \r\n\t\t\t tab = new int[nbEtapes];\r\n\t\t\t nbM1 = 0;\r\n\t\t\t nbM2 = 0;\r\n\t\t\t \r\n\t\t\t rate = 0;\r\n\t\t\t \r\n\t\t\t for(int j = 0; j < nbEtapes; j++) {\r\n\t\t\t\t tab[j] = in.nextInt();\r\n\t\t\t }\r\n\t\t\t \r\n\t\t\t for(int j = 0; j < nbEtapes - 1; j++) {\r\n\t\t\t\t rate = Math.max(rate, tab[j] - tab[j + 1]);\r\n\t\t\t }\r\n\t\t\t \r\n\t\t\t for(int j = 1; j < nbEtapes; j++) {\r\n\t\t\t\t if(tab[j] < tab[j - 1]) {\r\n\t\t\t\t\t nbM1 += tab[j - 1] - tab[j];\r\n\t\t\t\t }\r\n\t\t\t\t nbM2 += Math.min(rate, tab[j - 1]);\r\n\t\t\t }\r\n\t\t\t \r\n\t\t\t fw.write(\"Case #\" + (i+1) + \": \" + nbM1 + \" \" + nbM2 + \"\\n\");\r\n\t\t\t in.nextLine();\r\n\t\t }\r\n\t\t\r\n\t\t fw.close();\r\n\t\t in.close();\r\n\t\t \r\n\t}\r\n\t\r\n}\r\n", "idx": "1375"}
{"func": "package googlejam1.p376;\n\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class MushroomMonster {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint testCases = in.nextInt();\r\n\t\tint testCaseNumber = 1;\r\n\t\twhile(testCaseNumber <= testCases){\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tint[] array = new int[N];\r\n\t\t\tfor(int i=0; i<N; i++){\r\n\t\t\t\tarray[i] = in.nextInt();\r\n\t\t\t}\n\t\t\tint minDonuts = 0;\n\t\t\tfor(int i1=1; i1<N; i1++){\n\t\t\t\tif(array[i1] < array[i1-1]){\n\t\t\t\t\tminDonuts = minDonuts + array[i1-1] - array[i1];\n\t\t\t\t}\n\t\t\t}\r\n\t\t\tint donuts1 = minDonuts;\n\t\t\tint maxDifference = -1;\n\t\t\tfor(int i=1; i<N; i++){\n\t\t\t\tif(array[i] <= array[i-1]){\n\t\t\t\t\tif(array[i-1]-array[i] > maxDifference){\n\t\t\t\t\t\tmaxDifference = array[i-1]-array[i];\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint donutRate = maxDifference;\n\t\t\tint minDonutsEaten = 0;\n\t\t\tfor(int i=0; i<N-1; i++){\n\t\t\t\tif(array[i] < donutRate){\n\t\t\t\t\tminDonutsEaten = minDonutsEaten + array[i];\n\t\t\t\t}else{\n\t\t\t\t\tminDonutsEaten = minDonutsEaten + donutRate;\n\t\t\t\t}\n\t\t\t}\r\n\t\t\tint donuts2 = minDonutsEaten;\r\n\t\t\tSystem.out.println(\"Case #\"+testCaseNumber+\": \"+donuts1+\" \"+donuts2);\r\n\t\t\ttestCaseNumber++;\r\n\t\t}\r\n\t\tin.close();\r\n\t}\r\n}\r\n", "idx": "1376"}
{"func": "package googlejam1.p377;\nimport java.io.*;\nimport java.util.*;\nclass GoogleCodeJam_p1\n{\n    static int a[]=new int [1000];\n    static int N;\n    static int maxDif = 0;\n    public static void main(String[]args)throws IOException\n    {\n        BufferedReader br = new BufferedReader(new FileReader(\"E:\\\\input.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"E:\\\\output.txt\"));\n        int T = Integer.parseInt(br.readLine());\n        for(int i=1;i<=T;i++)\n        {\n            pw.print(\"Case #\"+i+\": \");\n            N = Integer.parseInt(br.readLine());\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            for(int j=0;j<N;j++)\n            a[j]= Integer.parseInt(st.nextToken());\n\t\t\tint ans=0;\n\t\t\tint i1=0,j=1;\n\t\t\twhile(j<=N-1)\n\t\t\t{\n\t\t\t    if(a[j] < a[i1])\n\t\t\t    {\n\t\t\t        ans+=a[i1]-a[j];\n\t\t\t        maxDif = Math.max(maxDif,a[i1]-a[j]);\n\t\t\t    }\n\t\t\t    i1++;\n\t\t\t    j++;\n\t\t\t}\n            int x = ans;\n\t\t\tint ans1 = 0;\n\t\t\tfor(int i2=0;i2<N-1;i2++)\n\t\t\t{\n\t\t\t    ans1+=Math.min(a[i2],maxDif);\n\t\t\t}\n            int y = ans1;\n            pw.println(x+\" \"+y);\n            maxDif=0;\n        }\n        pw.close();\n    }\n}", "idx": "1377"}
{"func": "package googlejam1.p378;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\npublic class shrooms\r\n{\r\n\tpublic static void main(String [] args) throws Exception\r\n\t{\r\n\t\tScanner inScan = new Scanner(System.in);\r\n\t\tSystem.out.println(\"Enter the filename\");\r\n\t\tString filename = inScan.nextLine();\r\n\t\tBufferedReader b = new BufferedReader(new FileReader(filename));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"out.txt\")));\r\n\r\n\t\tint numExamples = Integer.parseInt(b.readLine());\r\n\t\tfor(int i = 0; i < numExamples; i++)\r\n\t\t{\r\n\t\t\tint numIntervals = Integer.parseInt(b.readLine());\r\n\t\t\tint [] mushrooms = new int [numIntervals];\r\n\t\t\tString [] stuff = b.readLine().split(\" \");\r\n\t\t\tfor(int j = 0; j < numIntervals; j++)\r\n\t\t\t{\r\n\t\t\t\tmushrooms[j] = Integer.parseInt(stuff[j]);\r\n\t\t\t}\r\n\t\t\t//First method\r\n\t\t\tBigInteger sumOne = new BigInteger(\"0\");;\r\n\t\t\tint bigIndex = -1;\r\n\t\t\tint bigDiff = -1;\r\n\t\t\tfor(int j = 0; j < numIntervals-1; j++)\r\n\t\t\t{\r\n\t\t\t\tif(mushrooms[j] > mushrooms[j+1])\r\n\t\t\t\t{\r\n\t\t\t\t\tint diff = mushrooms[j] - mushrooms[j+1];\r\n\t\t\t\t\tsumOne = sumOne.add(new BigInteger(Integer.toString(diff)));\r\n\t\t\t\t\tif(diff > bigDiff)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbigDiff = diff;\r\n\t\t\t\t\t\tbigIndex = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tBigInteger sumTwo = new BigInteger(\"0\");\r\n\t\t\tif(bigDiff > -1)\r\n\t\t\t{\r\n\t\t\t\tfor(int j = 0; j < numIntervals-1;j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(mushrooms[j] >= bigDiff)\r\n\t\t\t\t\t\tsumTwo = sumTwo.add(new BigInteger(Integer.toString(bigDiff)));\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tsumTwo = sumTwo.add(new BigInteger(Integer.toString(mushrooms[j])));\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//Code goes here********\r\n\t\t\tout.print(\"Case #\" + (i+1) + \": \" +  sumOne.toString() + \" \" + sumTwo.toString());\r\n\t\t\tif(i != numExamples-1)\r\n\t\t\t\tout.println();\r\n\t\t\tout.flush();\r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t}\r\n\t\r\n\t\r\n}", "idx": "1378"}
{"func": "package googlejam1.p380;\n\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Scanner;\n\npublic class MushroomMonster {\n\tstatic String PATH = \"data/gcj2015/1a/\", PROBLEM = \"A\", SIZE = \"large\",\n\t\t\tATTEMPT = \"0\";\n\n\tpublic static void main(String[] args) throws NumberFormatException,\n\t\t\tIOException {\n\t\tString filename = PATH + PROBLEM + \"-\" + SIZE;\n\t\tif (SIZE.equals(\"small\"))\n\t\t\tfilename += \"-attempt\" + ATTEMPT;\n\t\tScanner sc = new Scanner(new File(filename + \".in\"));\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(PATH + PROBLEM\n\t\t\t\t+ \"-\" + SIZE + \"-attempt\" + ATTEMPT + \".out\"));\n\t\tint T = sc.nextInt();\n\t\tsc.nextLine();\n\t\tfor (int t = 0; t < T; t++) {\n\t\t\tint N = sc.nextInt();\n\t\t\tint[] m = new int[N];\n\t\t\tfor (int n = 0; n < N; n++) {\n\t\t\t\tm[n] = sc.nextInt();\n\t\t\t}\n\t\t\t// Strategy 1\n\t\t\tlong s1 = 0;\n\t\t\tfor (int n = 0; n < N - 1; n++) {\n\t\t\t\tif (m[n] > m[n + 1])\n\t\t\t\t\ts1 += m[n] - m[n + 1];\n\t\t\t}\n\t\t\t// Strategy 2\n\t\t\t// First find the max decrease\n\t\t\tint maxDiff = 0;\n\t\t\tfor (int n = 0; n < N - 1; n++) {\n\t\t\t\tif (m[n] - m[n + 1] > maxDiff)\n\t\t\t\t\tmaxDiff = m[n] - m[n + 1];\n\t\t\t}\n\t\t\t// Then try eating\n\t\t\tlong s2 = 0;\n\t\t\tfor (int n = 0; n < N - 1; n++) {\n\t\t\t\tif (m[n] > maxDiff) {\n\t\t\t\t\t// eat only max\n\t\t\t\t\ts2 += maxDiff;\n\t\t\t\t} else {\n\t\t\t\t\t// eat the remaining\n\t\t\t\t\ts2 += m[n];\n\t\t\t\t}\n\t\t\t}\n\t\t\tbw.write(\"Case #\" + (t + 1) + \": \" + s1 + \" \" + s2);\n\t\t\tbw.newLine();\n\t\t}\n\t\tsc.close();\n\t\tbw.close();\n\t}\n}\n", "idx": "1380"}
{"func": "package googlejam1.p382;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\n\npublic class Mushroom {\n\t public static void main(String ... orange) throws Exception\n\t    {\n\t        Scanner input = new Scanner(System.in);\n\t        int numCases = input.nextInt();\n\t        for (int n = 0; n < numCases; n++)\n\t        {\n\t            int N = input.nextInt();\n\t            int[] ps = new int[N];\n\t            for (int i = 0; i < N; i++)\n\t                ps[i] = input.nextInt();\n\n\t            int maxDiff = -1; int sum1= 0,sum2=0;\n\t            for(int i=0; i< (N-1);i++){\n\t            \tint diff = ps[i]- ps[i+1];\n\t            \tif(diff > 0) sum1 += diff;\n\t            \tif(diff > maxDiff) maxDiff = diff;\t\n\t            }\n\t            \n\t            for(int i=0; i< (N-1);i++){\n\t            \tif(ps[i] < maxDiff) sum2+=ps[i];\n\t            \telse sum2+= maxDiff;\n\t            }\n\t            \n\t            System.out.printf(\"Case #%d: %d %d\\n\", n + 1, sum1,sum2);\n\t        }\n\t    }\n\n}\n", "idx": "1382"}
{"func": "package googlejam1.p384;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class Problem_A {\n\n\tpublic static void main(String[] args) {\n\t\tString inFile = \"//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound1//inin.txt\";\n\t\tString outFile = \"//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound1//result.txt\";\n\t\tint n = 0;\n\t\tString line;\n\t\ttry {\n\t\t\tFileReader fileReader = new FileReader(inFile);\n\t\t\tBufferedReader br = new BufferedReader(fileReader);\n\t\t\tFileWriter fileWriter = new FileWriter(outFile);\n\t\t\tBufferedWriter bw = new BufferedWriter(fileWriter);\n\t\t\tline = br.readLine();\n\t\t\tn = Integer.parseInt(line);\n\t\t\tfor(int i = 0; i < n ; i++){\n\t\t\t\tline = br.readLine();\n\t\t\t\tint N = Integer.parseInt(line);\n\t\t\t\tint[] M = new int[N];\n\t\t\t\tline = br.readLine();\n\t\t\t\tString[] parts = line.split(\" \");\n\t\t\t\tfor(int j = 0; j < N; j++){\n\t\t\t\t\tM[j] = Integer.parseInt(parts[j]);\n\t\t\t\t}\n\t\t\t\tint result = 0;\n\t\t\t\tfor(int i1 = 0; i1 < N-1; i1++){\n\t\t\t\t\tif(M[i1] > M[i1+1]){\n\t\t\t\t\t\tresult += M[i1] - M[i1+1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\tint result1 = result;\n\t\t\t\tint max = 0; \n\t\t\t\tint result3 = 0;\n\t\t\t\tfor(int i2 = 0; i2 < N-1; i2++){\n\t\t\t\t\tif(M[i2] > M[i2+1]){\n\t\t\t\t\t\tint dif = M[i2]- M[i2+1];\n\t\t\t\t\t\tif(max < dif) max = dif;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int i1 = 0; i1 < N-1; i1++){\n\t\t\t\t\tif(M[i1] >= max) result3 += max;\n\t\t\t\t\telse result3 += M[i1];\n\t\t\t\t}\n\t\t\t\tint result2 = result3;\n\t\t\t\tbw.write(\"Case #\" + (i+1) + \": \" + result1 + \" \"+ result2 +\"\\n\");\n\t\t\t\t\n\t\t\t}\n\t\t\tbr.close();\n\t\t\tbw.close();\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\n\t}\n}\n\n", "idx": "1384"}
{"func": "package googlejam1.p386;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class ProblemA {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\tlong startTime=System.currentTimeMillis();//Start time\r\n\t\ttry {\r\n\t\t\tBufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"A-large.out\"));\r\n\t\t\tString line = null;\r\n\t\t\tline = in.readLine();\r\n\t\t\t\r\n\t\t\tint T = Integer.parseInt(line);\r\n\t\t\tfor(int i=0;i<T;i++){\r\n\t\t\t\tline = in.readLine();\r\n\t\t\t\tint N = Integer.parseInt(line);\r\n\t\t\t\tline = in.readLine();\r\n\t\t\t\tString [] tokens = line.split(\" \");\t\t\t\t\r\n\t\t\t\tint [] V = new int [N];\r\n\t\t\t\tfor (int k=0;k<N;k++){\r\n\t\t\t\t\tV[k]= Integer.parseInt(tokens[k]);\r\n\t\t\t\t}\r\n\t\t\t\tint a=0,b=0,max=0;\r\n\t\t\t\tfor (int k=0;k<N-1;k++){\r\n\t\t\t\t\tif (V[k]>V[k+1]){\r\n\t\t\t\t\t\ta=a+V[k]-V[k+1];\r\n\t\t\t\t\t\tif (V[k]-V[k+1]>max){\r\n\t\t\t\t\t\t\tmax=V[k]-V[k+1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int k=0;k<N-1;k++){\r\n\t\t\t\t\tif (V[k]>=max){\r\n\t\t\t\t\t\tb=b+max;\r\n\t\t\t\t\t} else{\r\n\t\t\t\t\t\tb=b+V[k];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(\"Case #\" + (i+1) +\": \" + a + \" \" + b);\t\r\n\t\t\t\tout.write(\"Case #\" + (i+1) +\": \" + a + \" \" + b + \"\\n\");\r\n\t\t\t}\r\n\t\t\tin.close();\t\r\n\t\t\tout.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\tSystem.out.println(\"File not found\");\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\tSystem.out.println(\"IOException\");\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tlong endTime=System.currentTimeMillis();//End time\r\n\t\tSystem.out.println(\"Running time is \"+(endTime-startTime)+\"ms\");\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1386"}
{"func": "package googlejam1.p389;\n\r\n\r\nimport java.io.BufferedInputStream;\r\nimport java.io.BufferedOutputStream;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic abstract class MainA {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\t// Open input and output files. (stdin and stdout are not used because\r\n\t\t// of the lack of support for using a file as stdin in Eclipse.)\r\n\t\tInputStream inStream = new FileInputStream(\r\n\t\t\t\"input/A-large.in\");\r\n\t\tOutputStream outStream = new FileOutputStream(\r\n\t\t\t\"output/A-large-out.txt\");\r\n\t\t\r\n\t\tScanner in = new Scanner(new BufferedInputStream(inStream));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedOutputStream(outStream));\r\n\t\t\r\n\t\tint numCases = in.nextInt();\r\n\t\tfor (int caseIdx = 1; caseIdx <= numCases; caseIdx++) {\r\n\t\t\t\r\n\t\t\tint numSamples = in.nextInt();\r\n\t\t\tint[] samples = new int[numSamples];\r\n\t\t\tfor (int i = 0; i < numSamples; i++) {\r\n\t\t\t\tsamples[i] = in.nextInt();\r\n\t\t\t}\n\t\t\tint decreaseSum = 0;\n\t\t\tint maxDecrease = 0;\n\t\t\t\n\t\t\tfor (int i = 0; i < samples.length - 1; i++) {\n\t\t\t\tint decrease = samples[i] - samples[i+1];\n\t\t\t\tif (decrease > 0) {\n\t\t\t\t\tdecreaseSum += decrease;\n\t\t\t\t\tmaxDecrease = Math.max(decrease, maxDecrease);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tdouble minRate = maxDecrease / 10.0;\n\t\t\tint time = (samples.length - 1) * 10;\n\t\t\t\n\t\t\tdouble minEaten1 = 0;\n\t\t\tfor (int i = 0; i < samples.length - 1; i++) {\n\t\t\t\tminEaten1 += Math.min(minRate * 10, samples[i]);\n\t\t\t}\n\t\t\t\n\t\t\tint result0 = decreaseSum;\n\t\t\tint result1 = (int) Math.floor(minEaten1);\r\n\t\t\t\r\n\t\t\t// Solve this test case;\r\n\t\t\tint[] result = new int[] { result0, result1 };\r\n\t\t\t\r\n\t\t\t// Print the result.\r\n\t\t\tString resultStr = String.format(\"%s %s\", result[0], result[1]);\r\n\t\t\tString fullResultStr = String.format(\"Case #%s: %s\", caseIdx,\r\n\t\t\t\tresultStr);\r\n\t\t\tout.println(fullResultStr);\r\n\t\t\tSystem.out.println(fullResultStr);\r\n\t\t}\r\n\t\t\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "1389"}
{"func": "package googlejam1.p390;\n\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\npublic class MushroomMonster {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tFile input = new File(\"A-large.in\");\r\n\t\tScanner sc = new Scanner(input);\r\n\t\tint numCases = sc.nextInt();\r\n\t\tfor (int i = 1; i <= numCases; i++) {\r\n\t\t\tint numM = sc.nextInt();\r\n\t\t\tint localMax = 0;\r\n\t\t\tint count1 = 0;\r\n\t\t\tArrayList<Integer> diffList = new ArrayList<Integer>();\r\n\t\t\tArrayList<Integer> numList = new ArrayList<Integer>();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor (int j = 1; j <= numM; j++){\r\n\t\t\t\tint nextNum = sc.nextInt();\r\n\t\t\t\tnumList.add(nextNum);\r\n\t\t\t\tint difference = localMax-nextNum;\r\n\t\t\t\tdiffList.add(difference);\r\n\t\t\t\tif (localMax >= nextNum){\r\n\t\t\t\t\tcount1 += difference;\r\n\t\t\t\t}\r\n\t\t\t\tlocalMax = nextNum;\r\n\t\t\t}\r\n\t\t\tint maxDiff = Collections.max(diffList);\r\n\t\t\tint total = 0;\r\n\t\t\tfor (int k = 0; k < numList.size()-1; k++){\r\n\t\t\t\tif (numList.get(k) > maxDiff)\r\n\t\t\t\t\ttotal += maxDiff;\r\n\t\t\t\telse\r\n\t\t\t\t\ttotal += numList.get(k);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\"+i + \": \" + count1 + \" \" + total);\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t}\r\n\t\tsc.close();\r\n\t}\r\n}\r\n", "idx": "1390"}
{"func": "package googlejam1.p391;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\n\n\npublic class problem1 {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t//int[] array = {23,90, 40, 0, 100, 9};\n\t\t//int[] array = {10,5,15,5};\n\t\tint[] array = {100,100};\n\n\t\t//int[] array = {81,81, 81 ,81 ,81 ,81 ,81 ,0};\n\t\tint min;/*\n\t\tmin = getMin1(array);\n\t\tSystem.out.println(min);\n\t\tmin = getMin2(array);\n\t\tSystem.out.println(min);*/\n\t\ttry (Writer writer = new BufferedWriter(new OutputStreamWriter(\n\t              new FileOutputStream(\"/home/danza/Downloads/output1L.txt\"), \"utf-8\"))) {\n\t  // writer.write(\"something\");\n\t\t\n\t\tint j=1;\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"/home/danza/Downloads/A-large (1).in\"));\n\t    try {\n\t        StringBuilder sb = new StringBuilder();\n\t        String line = br.readLine();\n\t        while (line != null) {\n\t            sb.append(line);\n\t            sb.append(System.lineSeparator());\n\t            int len = Integer.parseInt(br.readLine());\n\t            line = br.readLine();\n\t            int[] arr = new int[len];\n\t            String[] sarray = line.split(\" \");\n\t            for(int i=0;i<len;i++){\n\t            \tarr[i] = Integer.parseInt(sarray[i]);\n\t            }\n\t\t\t\tint min4 = 0;\n\t\t\t\tfor(int i1=1;i1<arr.length;i1++){\n\t\t\t\t\tif(arr[i1]<arr[i1-1]){\n\t\t\t\t\t\tint temp1 = Math.abs(arr[i1]-arr[i1-1]);\n\t\t\t\t\t\tmin4+=temp1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t            int min1 = min4;\n\t    \t\tSystem.out.println(min1);\n\t\t\t\tint maxDiff = 0;\n\t\t\t\tfor(int i=1;i<arr.length;i++){\n\t\t\t\t\tif(arr[i]<arr[i-1]){\n\t\t\t\t\t\tint temp = Math.abs(arr[i]-arr[i-1]);\n\t\t\t\t\t\tif(temp>maxDiff)\n\t\t\t\t\t\t\tmaxDiff = temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint min3=0;\n\t\t\t\t\n\t\t\t\tfor(int i=0;i<arr.length-1;i++){\n\t\t\t\t\t//int temp = Math.abs(array[i]-array[i-1]);\n\t\t\t\t\tif(arr[i]>=maxDiff){\n\t\t\t\t\t\tmin3+=maxDiff;\n\t\t\t\t\t} \n\t\t\t\t\telse\n\t\t\t\t\t\tmin3+=arr[i];\n\t\t\t\t\n\t\t\t\t}\n\t    \t\tint min2 = min3;\n\t    \t\tSystem.out.println(min2);\n\t    \t\twriter.write(\"Case #\"+(j++)+\": \"+min1+\" \"+min2+\"\\n\");\n\t        }\n\t        String everything = sb.toString();\n\t    }catch(Exception e){\n\t    \t\n\t    }\n\t    finally {\n\t        br.close();\n\t    }\n\t\t}\n\t}\n}\n", "idx": "1391"}
{"func": "package googlejam1.p392;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\tpublic static void main(String [] args) throws IOException {\r\n\t\tScanner input = new Scanner(new File(\"A-large.in\"));\r\n\t\tPrintWriter write = new PrintWriter(\"A-large.out\");\r\n\t\tint cases = input.nextInt();\r\n\t\tfor(int i = 1; i <= cases; i++) {\r\n\t\t\tint steps = input.nextInt();\r\n\t\t\tint[] values = new int[steps];\r\n\t\t\tfor(int j = 0; j < values.length; j++)\r\n\t\t\t\tvalues[j] = input.nextInt();\r\n\t\t\tint maxDist = 0;\r\n\t\t\tint decrTotal = 0;\r\n\t\t\tfor(int j = 1; j < values.length; j++) {\r\n\t\t\t\tint increase = values[j] - values[j-1];\r\n\t\t\t\tif(increase < 0) {\r\n\t\t\t\t\tif(maxDist < -increase)\r\n\t\t\t\t\t\tmaxDist = -increase;\r\n\t\t\t\t\tdecrTotal -= increase;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint secCount = 0;\r\n\t\t\tfor(int j = 0; j < values.length-1; j++) {\r\n\t\t\t\tsecCount += Math.min(values[j], maxDist);\r\n\t\t\t}\r\n\t\t\twrite.printf(\"Case #%d: %d %d%n\", i, decrTotal, secCount);\r\n\t\t}\r\n\t\twrite.close();\r\n\t}\r\n}\r\n", "idx": "1392"}
{"func": "package googlejam1.p394;\nimport java.util.*;\n\npublic class A\n{\n    public static void main (String [] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int noCase = sc.nextInt();\n        for(int ind =1; ind<=noCase; ind++)\n        {\n            int M = sc.nextInt();\n            long [] arr = new long[M];\n            for(int i=0; i<M; i++)\n                arr[i] = sc.nextLong();\n\t\t\tlong soln = 0L;\n\t\t\tfor(int i=0; i<arr.length-1; i++)\n\t\t\t    if(arr[i]>arr[i+1])\n\t\t\t        soln+=arr[i]-arr[i+1];\n            long m1 = soln;\n\t\t\tlong soln1 = 0L;\n\t\t\tlong maxD = 0L;\n\t\t\tfor(int i=0; i<arr.length-1; i++)\n\t\t\t    maxD = Math.max(arr[i]-arr[i+1], maxD);\n\t\t\tfor(int i=0; i<arr.length-1; i++)\n\t\t\t    soln1+=Math.min(maxD, arr[i]);\n            long m2 = soln1;\n            System.out.printf(\"Case #%d: %d %d\\n\", ind, m1, m2);\n        }\n    }\n\n}\n", "idx": "1394"}
{"func": "package googlejam1.p395;\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class MushroomMonster {\r\n\tstatic {\r\n\r\n\t\ttry {\r\n\t\t\tString input = \"A-large.in\";\r\n\t\t\tString output = input.substring(0, input.lastIndexOf('.')) + \".out\";\r\n\t\t\tSystem.setIn(new FileInputStream(input));\r\n\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(output), true));\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tSystem.exit(0);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttry (Scanner input = new Scanner(System.in)) {\r\n\t\t\tint T = input.nextInt();\r\n\t\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\t\tint N = input.nextInt();\r\n\t\t\t\tint m[] = new int[N];\r\n\t\t\t\tint x1 = 0, x2 = 0;\r\n\t\t\t\tint offset = 0;\r\n\t\t\t\tm[0] = input.nextInt();\r\n\t\t\t\tfor (int i = 1; i < N; i++) {\r\n\t\t\t\t\tm[i] = input.nextInt();\r\n\t\t\t\t\tif (m[i] < m[i - 1])\r\n\t\t\t\t\t\tx1 += m[i - 1] - m[i];\r\n\t\t\t\t\toffset = Math.max(m[i - 1] - m[i], offset);\r\n\t\t\t\t}\r\n\t\t\t\tif (offset > 0)\r\n\t\t\t\t\tfor (int i = 0; i < N - 1; i++) {\r\n\t\t\t\t\t\tx2 += Math.min(m[i], offset);\r\n\t\t\t\t\t}\r\n\t\t\t\tSystem.out.printf(\"Case #%d: %d %d\", t, x1, x2);\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1395"}
{"func": "package googlejam1.p396;\n\n\nimport java.io.*;\nimport java.util.*;\n\npublic class playground {\n\t\n\tpublic static void main(String[] args) throws IOException{\n\t\tplayground r = new playground();\n\t\tFile file = new File(\"A-large.in\");\n\t\tFile outFile = new File(\"A-large.out\");\n\t\t//File file = new File(\"F:\\\\A-large-practice.in\");\n\t\t//File outFile = new File(\"F:\\\\A-large-practice.out\");\n\t\tBufferedReader br = new BufferedReader(new FileReader(file));\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\n\t\tint testCases = Integer.parseInt(br.readLine());\n\t\tfor(int t=1;t<=testCases;t++){\n\t\t    br.readLine();\n\t\t    String[] s=br.readLine().split(\" \");\n\t\t\tint[] igr=new int[s.length];\n\t\t\tfor(int i=0;i<s.length;i++){\n\t\t\t\tigr[i]=Integer.parseInt(s[i]);\n\t\t\t}\n\t\t    int[] pieces=igr;\n\t\t\tint sum=0;\n\t\t\tfor(int i=1;i<pieces.length;i++){\n\t\t\t\tif(pieces[i]>=pieces[i-1]){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tsum+=pieces[i-1]-pieces[i];\n\t\t\t\t}\n\t\t\t}\n\t\t    int solution1=sum;\n\t\t\tint sum1=0;\n\t\t\tint max=0;\n\t\t\tfor(int i=0;i<pieces.length-1;i++){\n\t\t\t\tmax=(int)Math.max(pieces[i]-pieces[i+1],max);\n\t\t\t}\n\t\t\tfor(int i=0;i<pieces.length-1;i++){\n\t\t\t\tsum1+=(int)Math.min(max, pieces[i]);\n\t\t\t}\n\t\t    int solution2=sum1;\n\t\t    bw.write(\"Case #\" + t +\": \"+solution1+\" \"+solution2+\"\\r\");\n\t\t}\n\t\tbr.close();\n\t\tbw.close();\n//\t\tint[] a={80,37, 90, 66, 60, 97, 57, 84, 87};\n//\t\tSystem.out.println(solve2(a));\n//\t\tint num=2;\n//\t\tint[] a={9,8};\n//\t\tSystem.out.println(solve(2,a));\n\t}\n}\n", "idx": "1396"}
{"func": "package googlejam1.p397;\nimport java.util.Scanner;\r\npublic class Mushroom {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner S = new Scanner(System.in);\r\n\t\tint numCases = S.nextInt();\n\t\t\n\t\tfor(int i=1; i<=numCases; i++)\n\t\t{\n\t\t\tcase1 = 0;\n\t\t\tcase2 = 0;\n\t\t\tmaxDiff = 0;\n\t\t\tint n = S.nextInt();\n\t\t\tint[] arr = new int[n];\n\t\t\tfor(int i1=0; i1<n; i1++){\n\t\t\t\tarr[i1] = S.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tfor(int k=0; k<(n-1); k++){\n\t\t\t\tint current = arr[k];\n\t\t\t\tint next = arr[k+1];\n\t\t\t\tmaxDiff = Math.max(maxDiff,  current - next);\n\t\t\t\tif(current > next){\n\t\t\t\t\tcase1 += current - next;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int k=0; k<(n-1); k++){\n\t\t\t\tint current = arr[k];\n\t\t\t\tif(current >= maxDiff){\n\t\t\t\t\tcase2 += maxDiff;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcase2 += current;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\", i, case1, case2);\n\t\t\tif(i!=numCases)\n\t\t\t\t\n\t\t\t\tSystem.out.println();\n\t\t}\r\n\t}\r\n\tpublic static int case1;\r\n\tpublic static int case2;\r\n\tpublic static int maxDiff;\r\n \r\n \r\n}", "idx": "1397"}
{"func": "package googlejam1.p401;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class P1 {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner scan = new Scanner(new File(\"in.txt\"));\r\n\t\tPrintWriter w = new PrintWriter(\"out.txt\");\r\n\r\n\t\tint cases = Integer.parseInt(scan.nextLine());\r\n\r\n\t\tfor (int i = 0; i < cases; i++) {\r\n\t\t\tint ans1 = 0;\r\n\t\t\tint ans2 = 0;\r\n\r\n\t\t\tint n = scan.nextInt();\r\n\t\t\tint[] nums = new int[n];\r\n\r\n\t\t\tint largestDrop = 0;\r\n\r\n\t\t\tint last = nums[0] = scan.nextInt();\r\n\r\n\t\t\tfor (int j = 1; j < n; j++) {\r\n\t\t\t\tnums[j] = scan.nextInt();\r\n\t\t\t\tif (nums[j] < last) {\r\n\t\t\t\t\tint drop = last - nums[j];\r\n\t\t\t\t\tlargestDrop = Math.max(drop, largestDrop);\r\n\t\t\t\t\tans1 += drop;\r\n\t\t\t\t}\r\n\t\t\t\tlast = nums[j];\r\n\t\t\t}\r\n\r\n\t\t\tif (largestDrop > 0) {\r\n\t\t\t\tfor (int j = 0; j < n-1; j++) {\r\n\t\t\t\t\tans2 += Math.min(largestDrop, nums[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tw.print(\"Case #\");\r\n\t\t\tw.print(i+1);\r\n\t\t\tw.print(\": \");\r\n\t\t\tw.print(ans1);\r\n\t\t\tw.print(\" \");\r\n\t\t\tw.print(ans2);\r\n\t\t\tw.println();\r\n\t\t}\r\n\r\n\t\tscan.close();\r\n\t\tw.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1401"}
{"func": "package googlejam1.p402;\n\n\n\nimport java.util.*;\nimport java.util.regex.*;\nimport java.io.*;\nimport java.math.*;\nimport java.text.*;\n\npublic class a {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(a.class.getResourceAsStream(\"a-l.in\"));\n        System.setOut(new PrintStream(\"a-l.txt\"));\n        //Scanner in = new Scanner(System.in);\n        int testcases, testcase = 1;\n        testcases = in.nextInt();\n        while (testcase <= testcases) {\n            int ans1 = 0, ans2 = 0;\n            double rate = 0.0;\n            int n = in.nextInt();\n            int[] m = new int[n];\n            for(int i = 0; i < n; i++) {\n                m[i] = in.nextInt();\n            }\n            for(int i = 1; i < n; i++) {\n                if(m[i - 1] > m[i]) {\n                    ans1 += (m[i - 1] - m[i]);\n                    rate = Math.max(rate, (m[i - 1] - m[i]) / 10.0);\n                }\n            }\n            if(rate != 0) {\n                int eat = (int)(rate * 10);\n                for(int i = 0; i < n - 1; i++) {\n                    if(eat >= m[i]) {\n                        ans2 += m[i];\n                    } else {\n                        ans2 += eat;\n                    }\n                }\n            }\n            \n            System.out.println(\"Case #\" + testcase + \": \" + ans1 + \" \" + ans2);\n            testcase++;\n        }\n    }\n\n}\n", "idx": "1402"}
{"func": "package googlejam1.p403;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.util.StringTokenizer;\n\npublic class Welcome {\n\tpublic static void main(String[] args) throws Exception {\n\t\tFileInputStream fis = null;\n\t\tBufferedReader reader = null;\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"/home/luong/Downloads/\"+args[0]+\".out\", true)));\n\n\t\tString s;\n\t\tfis = new FileInputStream(\"/home/luong/Downloads/\"+args[0]+\".in\");\n\t\treader = new BufferedReader(new InputStreamReader(fis));\n\t\ts = reader.readLine();\n\t\tint nbLoop = Integer.parseInt(s);\n\t\tfor (int i = 1; i <= nbLoop; i++){\n\t\t\tString ch =\"\";\n\t\t\tint n = Integer.parseInt(reader.readLine());\n\t\t\tint[] m = new int[n];\n\t\t\tStringTokenizer st = new StringTokenizer(reader.readLine());\n\t\t\tfor(int j=0; j<n; j++){\n\t\t\t\tm[j] = Integer.parseInt(st.nextToken());\n\t\t\t}\n\t\t\tint y = 0;\n\t\t\tint z = 0;\n\t\t\tint v = 0;\n\t\t\tfor(int j=1; j<n; j++){\n\t\t\t\tif(m[j]<m[j-1]){\n\t\t\t\t\ty += m[j-1] - m[j];\n\t\t\t\t\tv = Math.max(v, m[j-1] - m[j]); \n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int j=1; j<n; j++){\n\t\t\t\tz += Math.min(m[j-1], v);\n\t\t\t}\n\t\t\t// TODO Code goes here\n\t\t\tbw.write(\"Case #\"+i+\": \"+y+\" \"+z);\n\t\t\tbw.newLine();\n\t\t}\n\t\treader.close();\n\t\tfis.close();\n\t\tbw.close();\n\t}\n}", "idx": "1403"}
{"func": "package googlejam1.p407;\n\nimport java.util.*;\nimport java.io.*;\n\npublic class C {\n\tpublic static void main(String[] args) throws IOException {\n\t\tString inFile = \"//Users//user//Documents//workspace//Runnables//src//codejam//y2014//qualification//copy//A-large (1).in\";\n\t\t//\t\tString outFile = \"//Users//user//Documents//workspace//Runnables//src//codejam//Outputs\";\n\t\t\n\t\t\t\tScanner in = new Scanner(new FileReader(inFile));\n\t\t//\t\tFileWriter out = new FileWriter(outFile);\n\t\t\t\tint totalRounds = in.nextInt();\n\t\t\t\tfor (int round = 1; round <= totalRounds; round++) {\n\t\t\t\t\t// FORMATTING HERE\n\t\t\t\t\tint len = in.nextInt();\n\t\t\t\t\tint[] arr = new int[len];\n\t\t\t\t\tfor (int i = 0; i < len; i++) {\n\t\t\t\t\t\tarr[i] = in.nextInt();\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.format(\"Case #%d: \", round);\n\t\t\t\t\tint y = 0;\n\t\t\t\t\tint z = 0;\n\t\t\t\t\tint speed = 0;\n\t\t\t\t\tint len1 = arr.length;\n\t\t\t\t\tfor (int i = 0; i < len1 - 1; i++) {\n\t\t\t\t\t\tif(arr[i+1] < arr[i]) {\n\t\t\t\t\t\t\tint diff = arr[i] - arr[i+1];\n\t\t\t\t\t\t\ty += diff;\n\t\t\t\t\t\t\t// for method 2\n\t\t\t\t\t\t\tif (diff > speed) speed = diff;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//method 2\n\t\t\t\t\tfor(int i = 0; i < len1 - 1; i++) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tint ate = Math.min(speed, arr[i]);\n\t\t\t\t\t\t//System.out.println(\"mins: \" + speed + \" \" + arr[i] + \"===> \" + ate);\n\t\t\t\t\t\tz += ate;\n\t\t\t\t\t\t//System.out.println(\"ate: \" + ate);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSystem.out.println(y + \" \" + z);\n\t\t\t\t}\n\t\t\t\tin.close();\n\t\t//\t\tout.close();\n\t}\n}\n", "idx": "1407"}
{"func": "package googlejam1.p409;\nimport java.util.*;\r\npublic class gcjround1_1\r\n{\r\n\tstatic Scanner sc=new Scanner (System.in);\r\n\tpublic static void main (String[]args)\r\n\t{\r\n\t\t//String newLine=\"\"+(char)13;\r\n\t\t//sc.useDelimiter(newLine);\r\n\r\n\t\tint T=sc.nextInt();\r\n\t\tfor (int i=0;i<T;i++)\r\n\t\t{\r\n\t\t\tint N=sc.nextInt();\n\t\t\tint curr=0;\n\t\t\tint next=sc.nextInt();\n\t\t\tint[]a=new int[N];\n\t\t\t\ta[0]=next;\n\t\t\tint max=0;\n\t\t\tint meth1max=0;\n\t\t\tfor (int i1=1;i1<N;i1++)\n\t\t\t{\n\t\t\t\t curr=next;\n\t\t\t\t next=sc.nextInt();\n\t\t\t\t a[i1]=next;\n\t\t\t\tif (curr-next>max)\n\t\t\t\t\tmax=curr-next;\n\t\t\t\tif (curr-next>0)\n\t\t\t\t\tmeth1max+=curr-next;\n\t\t\t}\n\t\t\tint sum=0;\n\t\t\tfor (int i2=0;i2<N-1;i2++)\n\t\t\t{\n\t\t\t\tif (a[i2]>max)\n\t\t\t\t\tsum+=max;\n\t\t\t\telse\n\t\t\t\t\tsum+=a[i2];\n\t\t\t}\n\t\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+meth1max+\" \"+sum);\r\n\t\t\t//number of recorded times\r\n\r\n\t\t\t//System.out.println(\"Case #\"+(i+1)+\": \"+f(N));\r\n\t\t}\r\n\t}\r\n}", "idx": "1409"}
{"func": "package googlejam1.p410;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\npublic class Mushrooms {\r\n\t\r\n\tstatic final String filename = \"A-large (2).in\";\r\n\t\r\n\tstatic Scanner seer;\r\n\tstatic int T;\r\n\tstatic int n;\r\n\tstatic int i;\r\n\tstatic ArrayList<Integer> numlist;\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\t//seer = new Scanner(System.in);\r\n\t\tseer = new Scanner(new File(filename));\r\n\t\tT = seer.nextInt();\r\n\t\tfor(i = 0; i < T; i++){\r\n\t\t\tn = seer.nextInt();\r\n\t\t\tint sumdifs = 0;\r\n\t\t\tint maxdif = 0;\r\n\t\t\tint last = 0;\r\n\t\t\tint curr = 0;\r\n\t\t\tnumlist = new ArrayList<Integer>();\r\n\t\t\tfor(int j = 0; j < n; j++){\r\n\t\t\t\tcurr = seer.nextInt();\r\n\t\t\t\tnumlist.add(curr);\r\n\t\t\t\tif(last > curr){\r\n\t\t\t\t\tint currdif = last-curr;\r\n\t\t\t\t\tsumdifs += last-curr;\r\n\t\t\t\t\tif(maxdif < currdif)\r\n\t\t\t\t\t\tmaxdif = currdif;\r\n\t\t\t\t}\r\n\t\t\t\tlast = curr;\r\n\t\t\t}\r\n\t\t\tint sum2 = 0;\r\n\t\t\tfor(int ind = 0; ind < n-1; ind++){\r\n\t\t\t\tsum2 += (int) Math.min(numlist.get(ind), maxdif);\r\n\t\t\t}\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\",i+1,sumdifs,sum2);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "1410"}
{"func": "package googlejam1.p411;\n\r\nimport java.util.Scanner;\r\npublic class MushroomMonster {\r\n \r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tint numCases = input.nextInt();\n\t\tfor(int i=1; i<=numCases; i++){\n\t\t\tcase1 = 0;\n\t\t\tcase2 = 0;\n\t\t\tmaxDiff = 0;\n\t\t\tint n = input.nextInt();\n\t\t\tint[] arr = new int[n];\n\t\t\tfor(int i1=0; i1<n; i1++){\n\t\t\t\tarr[i1] = input.nextInt();\n\t\t\t}\n\t\t\t// Case 1\n\t\t\tfor(int k=0; k<(n-1); k++){\n\t\t\t\tint current = arr[k];\n\t\t\t\tint next = arr[k+1];\n\t\t\t\tmaxDiff = Math.max(maxDiff,  current - next);\n\t\t\t\tif(current > next){\n\t\t\t\t\tcase1 += current - next;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Case 2\n\t\t\tfor(int k=0; k<(n-1); k++){\n\t\t\t\tint current = arr[k];\n\t\t\t\tif(current >= maxDiff){\n\t\t\t\t\tcase2 += maxDiff;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcase2 += current;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\", i, case1, case2);\n\t\t\tif(i!=numCases)\n\t\t\t\tSystem.out.println();\n\t\t}\r\n \r\n\t}\r\n \r\n \r\n\tpublic static int case1;\r\n\tpublic static int case2;\r\n\tpublic static int maxDiff;\r\n \r\n \r\n}", "idx": "1411"}
{"func": "package googlejam1.p413;\n\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Mush {\n\n\tpublic static void main(String...args) {\n\t\t\n\t\t\n\t\t\n\t\tScanner reader = new Scanner(System.in);\n\t\tint caseCount = Integer.parseInt(reader.nextLine());\n\t\t\n\t\n\t\t//for each use case\n\t\tfor(int caseId = 0; caseId < caseCount; caseId++) {\n\t\t\t\n\t\t\tint first = 0;\n\t\t\tint second = 0;\n\t\t\t\n\t\t\t\n\t\t\tint count = Integer.parseInt(reader.nextLine());\n\t\t\t\n\t\t\tArrayList<Integer> T = new ArrayList<Integer>();\n\t\t\t\n\t\t\tint last = 0;\n\t\t\tint lowest = 0;\n\t\t\tfor(int i = 0; i < count; i++) {\n\t\t\t\t\n\t\t\t\tint cur = reader.nextInt();\n\t\t\t\tint diff = cur - last;\n\t\t\t\t\n\t\t\t\tT.add(cur);\n\t\t\t\t\n\t\t\t\tif(diff < 0) {\n\t\t\t\t\t\n\t\t\t\t\tfirst += Math.abs(diff);\n\t\t\t\t\t\n\t\t\t\t\tif(diff < lowest) {\n\t\t\t\t\t\tlowest = diff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlast = cur;\n\t\t\t}\n\t\t\t\n\t\t\tint highest = Math.abs(lowest);\n\t\t\tlast = 0;\n\t\t\tfor(int i = 0; i < (count - 1); i++) {\n\t\t\t\t\n\t\t\t\tint cur = T.get(i);\n\t\t\t\tsecond += (cur > highest) ? highest : cur;\n\t\t\t\t\n\t\t\t\tlast = cur;\n\t\t\t}\n//\t\t\t\n//\t\t\tif(last != 0 && diff != 0) {\n//\t\t\t\tsecond = second - last;\n//\t\t\t}\n\t\t\t\n\t\t\tif(first < 0 || second < 0) {\n\t\t\t\tSystem.err.println(\"Case #\"+ (caseId + 1));\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\"+ (caseId + 1) + \": \"+ first + \" \" + second);\n\t\t\treader.nextLine();\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n\t\n\t\n}\n", "idx": "1413"}
{"func": "package googlejam1.p415;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A{\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\r\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"out.txt\"));\r\n\r\n\t\tint N = Integer.parseInt(br.readLine());\r\n\r\n\t\tfor(int p = 0; p < N; p++) {\r\n\t\t\tint n = Integer.parseInt(br.readLine());\r\n\t\t\tString[] s = br.readLine().split(\" \");\r\n\t\t\tint[] v = new int[n];\r\n\t\t\tfor(int i = 0; i < n; i++) v[i] = Integer.parseInt(s[i]);\r\n\r\n\t\t\tint ret1 = 0;\r\n\t\t\tint maxslope = 0;\r\n\r\n\t\t\tfor(int i = 1; i < n; i++) {\r\n\t\t\t\tint d = v[i-1] - v[i];\r\n\t\t\t\tif(d > 0) {\r\n\t\t\t\t\tmaxslope = Math.max(maxslope, d);\r\n\t\t\t\t\tret1 += d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tint ret2 = 0;\r\n\t\t\tfor(int i = 0; i < n-1; i++) {\r\n\t\t\t\tret2 += Math.min(maxslope, v[i]);\r\n\t\t\t}\r\n\r\n\t\t\tpw.println(\"Case #\" + (p+1) + \": \" + ret1 + \" \" + ret2);\r\n\t\t}\r\n\r\n\r\n\t\tpw.flush();\r\n\t\tpw.close();\r\n\r\n\t}\r\n}", "idx": "1415"}
{"func": "package googlejam1.p416;\n\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\n// Using the Google Guava library.\r\npublic class A {\r\n\r\n\tpublic static void main(String [] args) throws IOException {\r\n\t\tString inputFile = \"src/A-large-0.in\";\r\n\t\tScanner in = new Scanner(new File(inputFile));\r\n\t\tPrintStream out = new PrintStream(inputFile.substring(0, inputFile.length()-2)+\"out\");\r\n\t\tint cases = in.nextInt();\r\n\t\tfor (int cs = 1; cs <= cases; cs++) {\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint [] m = new int[n];\r\n\t\t\tfor (int i = 0; i<n; i++) {\r\n\t\t\t    m[i] = in.nextInt();\r\n\t\t\t}\r\n\t\t\tlong y = 0, z = 0, maxDiff = 0;\r\n\t\t\tfor (int i = 1; i<n; i++) {\r\n\t\t\t    int diff = Math.max(m[i-1] - m[i], 0);\r\n                y += diff;\r\n                maxDiff = Math.max(maxDiff, diff);\r\n\t\t\t}\r\n            for (int i = 0; i<n-1; i++) {\r\n                z += Math.min(maxDiff, m[i]);\r\n            }\r\n\t\t\tString ans = \"Case #\"+cs+\": \"+y+\" \"+z;\r\n\t\t\tout.println(ans);\r\n\t\t\tSystem.out.println(ans);\r\n\t\t}\r\n\t\tout.close();\r\n\t\tin.close();\r\n\t}\r\n}\r\n", "idx": "1416"}
{"func": "package googlejam1.p420;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class A {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\tBufferedReader inFile = new BufferedReader (new FileReader (\"A-large.in\"));\r\n\tPrintWriter outFile = new PrintWriter (new File (\"a.out\"));\r\n\tStringTokenizer tok = new StringTokenizer(inFile.readLine());\r\n\tint T = Integer.parseInt(tok.nextToken());\r\n\tfor (int t = 1 ; t <= T; t ++){\r\n\t    tok = new StringTokenizer(inFile.readLine());\r\n\t    int N = Integer.parseInt(tok.nextToken());\r\n\t    \r\n\t    tok = new StringTokenizer(inFile.readLine());\r\n\t    int [] m = new int [N];\r\n\t    for (int i = 0; i < N; i++){\r\n\t\tm[i] = Integer.parseInt(tok.nextToken());\r\n\t    }\r\n\t    \r\n\t    int y = 0;\r\n\t    for (int i = 1; i < N; i++){\r\n\t\tif (m[i] < m[i-1]){\r\n\t\t    y += m[i - 1] - m[i];\r\n\t\t}\r\n\t    }\r\n\t    \r\n\t    int z = 0;\r\n\t    int r = 0;\r\n\t    for (int i = 1; i < N; i++){\r\n\t\tif (m[i] < m[i-1]){\r\n\t\t    if (m[i-1] - m[i] > r){\r\n\t\t\tr = m[i-1] - m[i];\r\n\t\t    }\r\n\t\t}\r\n\t    }\r\n\t    \r\n\t    for (int i = 0; i < N - 1; i++){\r\n\t\tif (m[i] > r){\r\n\t\t    z += r;\r\n\t\t} else {\r\n\t\t    z += m[i];\r\n\t\t}\r\n\t    }\r\n\t    \r\n\t    outFile.printf(\"Case #%d: %d %d %n\",t, y, z);\r\n\t}\r\n\tinFile.close();\r\n\toutFile.close();\r\n    }\r\n\r\n}\r\n", "idx": "1420"}
{"func": "package googlejam1.p422;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class P1 {\r\n\tpublic static void main (String[] args) throws FileNotFoundException {\r\n//\t\tScanner sc = new Scanner (System.in);\r\n//\t\tPrintStream op = System.out;\r\n\t\tScanner sc = new Scanner (new FileInputStream (\"D:\\\\Internet\\\\A-large.in\"));\r\n\t\tPrintStream op = new PrintStream (\"D:\\\\Dropbox\\\\SRMs\\\\GCJ151A\\\\src\\\\A-large-output.txt\");\r\n\t\tint T = sc.nextInt();\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint[] m = new int [n];\r\n\t\t\tint y = 0, max = 0;\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tm[i] = sc.nextInt();\r\n\t\t\t\tif (i > 0 && m[i] < m[i - 1]) {\r\n\t\t\t\t\ty += m[i - 1] - m[i];\r\n\t\t\t\t\tmax = Math.max(max, m[i - 1] - m[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint z = 0;\r\n\t\t\tfor (int i = 1; i < n; i++)\r\n\t\t\t\tz += Math.min(max, m[i - 1]);\r\n\t\t\top.println(\"Case #\" + t + \": \" + y + \" \" + z);\r\n\t\t}\r\n\t\tsc.close();\r\n\t\top.close();\r\n\t}\r\n}", "idx": "1422"}
{"func": "package googlejam1.p424;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\r\n\t\t\t\t\"A-large.in\"));\r\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"A_out1.txt\"));\r\n\t\t\r\n\t\tint cases = Integer.parseInt(br.readLine());\r\n\t\t\r\n\t\tfor(int n = 1; n <= cases; n++) {\r\n\t\t\t\r\n\t\t\tint intervals = Integer.parseInt(br.readLine());\r\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine(), \" \");\r\n\t\t\tint[] mushrooms = new int[intervals];\r\n\t\t\tfor(int i = 0; i < intervals; i++)\r\n\t\t\t\tmushrooms[i] = Integer.parseInt(st.nextToken());\r\n\t\t\t\r\n\t\t\tint maxDiff = 0;\r\n\t\t\tfor(int i = 0; i < intervals-1; i++) {\r\n\t\t\t\tint diff = mushrooms[i] - mushrooms[i+1];\r\n\t\t\t\tmaxDiff = maxDiff > diff ? maxDiff : diff;\r\n\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\tint sumSecond = 0;\r\n\t\t\tfor(int i = 0; i < intervals-1; i++) {\r\n\t\t\t\tif(mushrooms[i] > maxDiff)\r\n\t\t\t\t\tsumSecond += maxDiff;\r\n\t\t\t\telse \r\n\t\t\t\t\tsumSecond += mushrooms[i];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint sumFirst = 0;\r\n\t\t\tfor(int i = 0; i < intervals-1; i++) {\r\n\t\t\t\tint diff = mushrooms[i] - mushrooms[i+1];\r\n\t\t\t\tif(diff > 0)\r\n\t\t\t\t\tsumFirst += diff;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpw.printf(\"Case #%d: %d %d\\n\", n, sumFirst, sumSecond);\r\n\t\t}\r\n\t\t\r\n\t\tpw.close();\r\n\t}\r\n}\r\n", "idx": "1424"}
{"func": "package googlejam1.p425;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class R1Q1 {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner input = new Scanner(new File(\"in.txt\"));\r\n\t\tPrintWriter output = new PrintWriter(new File(\"out.txt\"));\r\n\t\tint count = input.nextInt();\r\n\t\tint round;\r\n\t\tint[] mushrooms;\r\n\t\tint minMethodOne;\r\n\t\tint minMethodTwo;\r\n\t\tfor(int i = 0; i<count; i++)\r\n\t\t{\r\n\t\t\tround = input.nextInt();\r\n\t\t\tmushrooms = new int[round];\r\n\t\t\tfor(int x = 0; x<round; x++)\r\n\t\t\t\tmushrooms[x] = input.nextInt();\n\t\t\tint min1 = 0;\n\t\t\tfor(int a1 = 0; a1<mushrooms.length-1; a1++)\n\t\t\t{\n\t\t\t\tif(mushrooms[a1] > mushrooms[a1+1])\n\t\t\t\t\tmin1+= mushrooms[a1] - mushrooms[a1+1];\n\t\t\t}\r\n\t\t\t\r\n\t\t\tminMethodOne = min1;\n\t\t\tint max = 0;\n\t\t\tint min = 0;\n\t\t\tfor(int a = 0; a<mushrooms.length-1; a++)\n\t\t\t{\n\t\t\t\tif(mushrooms[a] - mushrooms[a+1] > max)\n\t\t\t\t\tmax = mushrooms[a] - mushrooms[a+1];\n\t\t\t}\n\t\t\tfor(int b = 0; b<mushrooms.length-1; b++)\n\t\t\t{\n\t\t\t\tif(mushrooms[b] < max)\n\t\t\t\t\tmin+= mushrooms[b];\n\t\t\t\telse\n\t\t\t\t\tmin+=max;\n\t\t\t}\r\n\t\t\tminMethodTwo = min;\r\n\t\t\toutput.write(\"Case #\" + (i+1) + \": \" + minMethodOne + \" \" + minMethodTwo + \"\\n\");\r\n\t\t}\r\n\t\toutput.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1425"}
{"func": "package googlejam1.p426;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class Round1ATaskAMushroomMonster {\r\n\r\n\t\r\n\tpublic static void main(String args[] ) throws Exception {\r\n\t\t\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"input2.in\"));\r\n\t\tPrintWriter w = new PrintWriter(new BufferedWriter(new FileWriter(\"output2.out\")));\r\n\t\t\r\n\t\t//BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t    //PrintWriter w = new PrintWriter(System.out);\r\n\t        \r\n\t    int T = Integer.parseInt(br.readLine());\r\n\t    \r\n\t    for(int t=1;t<=T;t++) {\r\n\t    \tStringTokenizer st1 = new StringTokenizer(br.readLine());\r\n\t    \tint n = Integer.parseInt(st1.nextToken());\r\n\t    \t\r\n\t    \tStringTokenizer st2 = new StringTokenizer(br.readLine());\r\n\t    \tint m[] = new int[n];\r\n\t    \tfor(int i=0;i<n;i++)\r\n\t    \t\tm[i] = Integer.parseInt(st2.nextToken());\r\n\t    \t\r\n\t    \tint y = 0;\r\n\t    \tfor(int i=1;i<n;i++)\r\n\t    \t\ty += Math.max(0, m[i-1] - m[i]);\r\n\t    \t\r\n\t    \tint z = 0;\r\n\t    \tint rateMax = 0;\r\n\t    \tfor(int i=1;i<n;i++){\r\n\t    \t\tif(m[i] < m[i-1])\r\n\t    \t\t\trateMax = Math.max(rateMax,m[i-1] - m[i]);\r\n\t    \t}\r\n\t    \t\r\n\t    \tfor(int i=0;i<n-1;i++)\r\n\t    \t\tz += Math.min(rateMax, m[i]);\r\n\t    \t\r\n\t        w.println(\"Case #\" + t + \": \" + y + \" \" + z);\r\n\t    }\r\n\t        \r\n\t    w.close();\r\n\t        \r\n\t}\r\n}\r\n", "idx": "1426"}
{"func": "package googlejam1.p428;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Mushroom {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader f = new BufferedReader(new FileReader(\"mushroom.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"C:/Users/David/Desktop/mushroom.txt\"));\r\n\t\tStringTokenizer t = new StringTokenizer(f.readLine());\r\n\t\tint testCases = Integer.parseInt(t.nextToken());\r\n\t\tfor (int i = 1; i <= testCases; i++)\r\n\t\t{\r\n\t\t\tt = new StringTokenizer(f.readLine());\r\n\t\t\tint N = Integer.parseInt(t.nextToken());\r\n\t\t\tint[] M = new int[N];\r\n\t\t\tt = new StringTokenizer(f.readLine());\r\n\t\t\tfor (int j = 0; j < N; j++)\r\n\t\t\t\tM[j] = Integer.parseInt(t.nextToken());\r\n\t\t\t\r\n\t\t\t//Method 1\r\n\t\t\tint method1 = 0;\r\n\t\t\tfor (int j = 1; j < N; j++)\r\n\t\t\t\tif (M[j] < M[j-1]) method1 += M[j-1] - M[j];\r\n\t\t\t\r\n\t\t\t//method 2\r\n\t\t\tint delta_X_Per_Ten = 0;\r\n\t\t\tfor (int j = 1; j < N; j++)\r\n\t\t\t\tif (M[j] < M[j-1] && M[j-1] - M[j] > delta_X_Per_Ten)\r\n\t\t\t\t\tdelta_X_Per_Ten=M[j-1] - M[j];\r\n\t\t\t\r\n\t\t\tint method2 = 0;\r\n\t\t\tfor (int j = 0; j < N - 1; j++)\r\n\t\t\t\tmethod2 += Math.min(delta_X_Per_Ten, M[j]);\r\n\t\t\t\r\n\t\t\tString ans = \"Case #\" + i + \": \" + method1 + \" \" + method2;\r\n\t\t\tout.println(ans);\r\n\t\t}\r\n\r\n\t\tout.close(); f.close(); System.exit(0);\r\n\t}\r\n\r\n}\r\n\r\n", "idx": "1428"}
{"func": "package googlejam1.p429;\n\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class MushroomMonster {\n    public static void main(String[] args) throws Exception {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int cases = Integer.parseInt(in.readLine());\n        for (int i = 0; i < cases; i++) {\n            in.readLine();\n            String[] nums = in.readLine().split(\" \");\n            int[] ints = new int[nums.length];\n            \n            int sum1 = 0;\n            int sum2 = 0;\n            int maxdiff = 0;\n            for (int j = 0; j < nums.length; j++) {\n                ints[j] = Integer.parseInt(nums[j]);\n                \n                if (j > 0) {\n                    if (ints[j - 1] > ints[j]) {\n                        sum1 += ints[j - 1] - ints[j];\n                    }\n                    \n                    maxdiff = Math.max(maxdiff, ints[j - 1] - ints[j]);\n                }\n            }\n            for (int j = 0; j < nums.length - 1; j++) {\n                if (ints[j] > maxdiff) {\n                    sum2 += maxdiff;\n                } else {\n                    sum2 += ints[j];\n                }\n            }\n            \n            System.out.println(\"Case #\" + (i + 1) + \": \" + sum1 + \" \" + sum2);\n        }\n        \n    }\n}\n", "idx": "1429"}
{"func": "package googlejam1.p431;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\n\r\n\r\npublic class Mushroom {\r\n\t\r\n    public static void main( String[] args ) throws Exception {\r\n\t    \tBufferedReader in = new BufferedReader(new FileReader(\"in.txt\"));\r\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\r\n\t\t\tString line = in.readLine();\r\n\t\t\tint t = new Integer(line);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor (int caseNum=1; caseNum<=t; caseNum++) {\r\n\t\t\t\tline = in.readLine();\r\n\t\t\t\tint n = new Integer(line);\r\n\t\t\t\tline = in.readLine();\r\n\t\t\t\tString[] sa = line.split(\" \");\r\n\t\t\t\tint[] m = new int[n];\r\n\t\t\t\tint rate =0;\r\n\t\t\t\tint totalDecrease=0;\r\n\t\t\t\tm[0] = new Integer(sa[0]);\r\n\t\t\t\t\r\n\t\t\t\tfor (int j=1; j<n; j++) {\r\n\t\t\t\t\tm[j] = new Integer(sa[j]);\r\n\t\t\t\t\tif ((m[j-1]-m[j])>rate) rate=m[j-1]-m[j];\r\n\t\t\t\t\tif ((m[j-1]>m[j])) totalDecrease+=m[j-1]-m[j];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tint total2=0;\r\n\t\t\t\tfor (int j=0; j<n-1; j++) {\r\n\t\t\t\t\tif (m[j]>rate) total2+=rate;\r\n\t\t\t\t\telse total2+=m[j];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tout.write(\"Case #\"+caseNum+\": \"+totalDecrease+\" \"+total2+\"\\n\");\r\n\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tin.close();\r\n\t\t\tout.flush();\r\n\t\t\tout.close();\r\n\r\n\t\t}\r\n\r\n\r\n}\r\n", "idx": "1431"}
{"func": "package googlejam1.p433;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created with IntelliJ IDEA.\r\n * User: WANG\r\n * Date: 4/17/15\r\n * Time: 5:48 PM\r\n * To change this template use File | Settings | File Templates.\r\n */\r\npublic class r11 {\r\n    public static void main(String[] args) {\r\n        try {\r\n\r\n            Scanner input=new Scanner(new File(args[0]));\r\n            PrintWriter output=new PrintWriter(args[1]) ;\r\n            int casenumber = input.nextInt();\r\n            for(int i=0;i<casenumber;i++){\r\n                int len = input.nextInt(), method1=0,method2=0,maxrate=0;\r\n                int[] mushrooms = new int[len];\r\n                mushrooms[0]= input.nextInt();\r\n                for(int j=1;j<len;j++){\r\n                    mushrooms[j]=    input.nextInt();\r\n                    if( mushrooms[j]< mushrooms[j-1]){\r\n                        method1+=   mushrooms[j-1]- mushrooms[j];\r\n                        maxrate = Math.max(maxrate,mushrooms[j-1]- mushrooms[j]) ;\r\n                    }\r\n                }\r\n                for(int j=1;j<len;j++){\r\n\r\n                        method2+=  Math.min(maxrate,mushrooms[j-1]) ;\r\n\r\n\r\n                }\r\n                output.println(\"Case #\"+(i+1)+\": \"+method1 + \" \"+ method2);\r\n            }\r\n            output.flush();\r\n        }catch(FileNotFoundException e){}\r\n\r\n    }\r\n}\r\n", "idx": "1433"}
{"func": "package googlejam1.p434;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class MushroomMonster {\r\n\r\n\t/**\r\n\t * @param args\r\n\t * @throws FileNotFoundException \r\n\t */\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner in = new Scanner(new File(\"A-large.in\"));//C-small-practice.in\r\n\t\tPrintWriter out = new PrintWriter(\"out.txt\");\r\n\t\tint T = in.nextInt();\r\n\t\tfor(int i=1;i<=T;i++){\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tint[] num = new int[N];\r\n\t\t\tfor(int j=0;j<N;j++){\r\n\t\t\t\tnum[j] = in.nextInt();\r\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\tfor(int i1=1;i1<num.length;i1++){\n\t\t\t\tif(num[i1]<num[i1-1]){\n\t\t\t\t\tres+=num[i1-1]-num[i1];\n\t\t\t\t}\n\t\t\t}\r\n\t\t\tint res1 = res;\n\t\t\tint res3 = 0;\n\t\t\tint speed=0;\n\t\t\tfor(int i2=1;i2<num.length;i2++){\n\t\t\t\tspeed=Math.max(speed, num[i2-1]-num[i2]);\n\t\t\t}\n\t\t\tfor(int i1=1;i1<num.length;i1++){\n\t\t\t\tres3+=Math.min(speed, num[i1-1]);\n\t\t\t}\r\n\t\t\tint res2 = res3;\r\n\t\t\tout.println(\"Case #\"+i+\": \"+res1+\" \"+res2);\r\n\t\t}\r\n\t\tout.close();\r\n\t\tin.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1434"}
{"func": "package googlejam1.p435;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class A {\r\npublic static void main(String args[]) throws Exception\r\n{\r\n\tScanner in = new Scanner(new File(\"A.in\"));\r\n\tint count = 1;\r\n\tint numcases = in.nextInt();\r\n\twhile(numcases-->0)\r\n\t{\r\n\t\tint numint = in.nextInt();\r\n\t\tint[] vals = new int[numint];\r\n\t\tfor(int i=0;i<numint;i++)\r\n\t\t\tvals[i]=in.nextInt();\r\n\t\t\r\n\t\tint onesum = 0;\r\n\t\tfor(int i=0; i<vals.length-1;i++)\r\n\t\t{\r\n\t\t\tif(vals[i]>vals[i+1])\r\n\t\t\t\tonesum+=vals[i]-vals[i+1];\r\n\t\t}\r\n\t\t\r\n\t\tint maxdiff = 0;\r\n\t\tfor(int i=0;i<vals.length-1;i++)\r\n\t\t{\r\n\t\t\tif(vals[i]>vals[i+1])\r\n\t\t\t\tif(maxdiff<vals[i]-vals[i+1])\r\n\t\t\t\t\tmaxdiff=vals[i]-vals[i+1];\r\n\t\t}\r\n\t\t\r\n\t\tint twosum = 0;\r\n\t\tfor(int i=0;i<vals.length-1;i++)\r\n\t\t{\r\n\t\t\tif(maxdiff>vals[i])\r\n\t\t\t\ttwosum+=vals[i];\r\n\t\t\telse\r\n\t\t\t\ttwosum+=maxdiff;\r\n\t\t}\r\n\t\tSystem.out.println(\"Case #\" + count + \": \"+onesum+\" \"+twosum);\r\n\t\tcount++;\r\n\t}\r\n\t\r\n}\r\n}\r\n", "idx": "1435"}
{"func": "package googlejam1.p436;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class A {\r\n\tstatic public void main(String[] args)throws Exception{\r\n//\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"input.in\"));\r\n\t\tPrintWriter out = new PrintWriter(\"output.txt\");\r\n\t\tint t = Integer.parseInt(br.readLine());\r\n\t\tfor(int z=1;z<=t;z++){\r\n\t\t\tint n = Integer.parseInt(br.readLine());\r\n\t\t\tString[] in = br.readLine().split(\" \");\r\n\t\t\tint[] arr = new int[n];\r\n\t\t\tlong max=-1;\r\n\t\t\tarr[0]=Integer.parseInt(in[0]);\r\n\t\t\tlong y=0,x=0;\r\n\t\t\tfor(int i=1;i<n;i++){\r\n\t\t\t\tarr[i]=Integer.parseInt(in[i]);\r\n\t\t\t\tif(arr[i]<=arr[i-1]){\r\n\t\t\t\t\ty+=arr[i-1]-arr[i];\r\n\t\t\t\t\tif(arr[i-1]-arr[i]>max)\r\n\t\t\t\t\t\tmax=arr[i-1]-arr[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int i=0;i<n-1;i++){\r\n\t\t\t\tx+=Math.min(max,arr[i]);\r\n\t\t\t}\r\n\t\t\tout.println(\"Case #\"+z+\": \"+y+\" \"+x);\r\n\t\t}\r\n\t\t\r\n\t\tbr.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "1436"}
{"func": "package googlejam1.p438;\nimport java.io.*;\r\n\r\n/**\r\n * Created by danie_000 on 4/17/2015.\r\n */\r\npublic class Mushroom {\r\n\r\n    public static void main (String[] args) {\r\n        BufferedReader br;\r\n        BufferedWriter bw;\r\n        try {\r\n            br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n            bw = new BufferedWriter(new FileWriter(\"A-large.out\"));\r\n            int t = Integer.parseInt(br.readLine());\r\n            for (int iii = 1; iii <= t; iii++) {\r\n                bw.write(\"Case #\" + iii + \": \");\r\n                int n = Integer.parseInt(br.readLine());\r\n                String[] splits = br.readLine().split(\" \");\r\n\r\n                int[] mushrooms = new int[n];\r\n                for (int jjj = 0; jjj < n; jjj++) {\r\n                    mushrooms[jjj] = Integer.parseInt(splits[jjj]);\r\n                }\r\n                int previous = mushrooms[0];\r\n                int case1 = 0;\r\n                int case2 = 0;\r\n                int max = 0;\r\n                for (int jjj = 1; jjj < n; jjj++) {\r\n                    int current = mushrooms[jjj];\r\n                    if (current < previous) {\r\n                        int temp = previous - current;\r\n                        case1 += temp;\r\n                        if (temp > max) {\r\n                            max = temp;\r\n                        }\r\n                    }\r\n                    previous = current;\r\n                }\r\n\r\n                for (int jjj = 0; jjj < n - 1; jjj++) {\r\n                    int current = mushrooms[jjj];\r\n                    if (current > max) {\r\n                        case2 += max;\r\n                    } else {\r\n                        case2 += current;\r\n                    }\r\n                }\r\n                bw.write(case1 + \" \" + case2);\r\n                bw.newLine();\r\n            }\r\n            bw.close();\r\n        }catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "1438"}
{"func": "package googlejam1.p439;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class ProbA {\r\n\r\n\t/**\r\n\t * Assumes input/output file names passed on command line\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tBufferedReader brIn = new BufferedReader(new FileReader(args[0]));\n\t\tBufferedWriter bwOut = new BufferedWriter(new FileWriter(args[1]));\n\t\t\n\t\tString sLine; \n\t\tint ca=1;\n\t\tbrIn.readLine(); // skip first line\n\t\twhile((sLine = brIn.readLine())!=null) {\n\t\t\tint N = Integer.parseInt(sLine);\n\t\t\tint [] m = new int[N];\n\t\t\tsLine = brIn.readLine();\n\t\t\tString [] fields = sLine.split(\" \");\n\t\t\tint totalDec = 0;\n\t\t\tint maxDec = 0;\n\t\t\tint prev = 0;\n\t\t\tfor(int i=0; i<m.length; i++) {\n\t\t\t\tm[i] = Integer.parseInt(fields[i]);\n\t\t\t\tif(i!=0) {\n\t\t\t\t\tint dec = prev - m[i];\n\t\t\t\t\tif(dec > maxDec)\n\t\t\t\t\t\tmaxDec = dec;\n\t\t\t\t\tif(dec > 0) {\n\t\t\t\t\t\ttotalDec += dec; \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprev = m[i];\n\t\t\t}\n\t\t\tint rateEst = 0;\n\t\t\tfor(int i=0; i<m.length-1; i++) {\n\t\t\t\trateEst += Math.min(maxDec, m[i]);\n\t\t\t}\n\t\t\tString msg = totalDec + \" \" + rateEst;\n\t\t\tbwOut.write(\"Case #\" + ca + \": \" + msg + \"\\r\\n\");\n\t\t\tca++;\n\t\t}\n\t\tbrIn.close();\n\t\tbwOut.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1439"}
{"func": "package googlejam1.p441;\n\nimport java.util.Scanner;\n\n/**\n * Created by misanand on 4/18/15.\n */\npublic class MushroomMonster {\n    public static void main(String [] args) {\n        Scanner scanner = new Scanner(System.in);\n        int T = scanner.nextInt();\n        for (int tt =1; tt <=T;tt++) {\n            int N = scanner.nextInt();\n            int [] a  = new int[N];\n            for (int i=0;i<N;i++) a[i] = scanner.nextInt();\n            int f = 0;\n            int s = 0;\n            int max = 0;\n            for (int i=1;i<N;i++) {\n                int v = a[i -1] - a[i];\n                if (v > 0) f+=v;\n                max = Math.max(max,v);\n            }\n            for (int i=0;i<N-1;i++) {\n                int min = Math.min(a[i],max);\n                s +=min;\n            }\n            System.out.println(\"Case #\"+tt+\": \"+f+\" \"+s);\n        }\n\n    }\n}\n", "idx": "1441"}
{"func": "package googlejam1.p443;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"C:/Users/Nejc/Desktop/input.in\"));\r\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"C:/Users/Nejc/Desktop/output.txt\")));\r\n\t\tbyte T=Byte.parseByte(br.readLine());\r\n\t\tfor(byte t=0; t<T; t++){\r\n\t\t\tint y=0;\r\n\t\t\tint z=0;\r\n\t\t\tint N=Integer.parseInt(br.readLine());\r\n\t\t\tString[]split=br.readLine().split(\" \");\r\n\t\t\tint[]m=new int[N];\r\n\t\t\tfor(int i=0; i<N; i++)\r\n\t\t\t\tm[i]=Integer.parseInt(split[i]);\r\n\t\t\tint max=0;\r\n\t\t\tfor(int i=1; i<N; i++){\r\n\t\t\t\tif(m[i]<m[i-1]){\r\n\t\t\t\t\tint eaten = m[i-1]-m[i];\r\n\t\t\t\t\ty+=eaten;\r\n\t\t\t\t\tif(eaten>max)max=eaten;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int i=1; i<N; i++){\r\n\t\t\t\tif(m[i-1]<max)z+=m[i-1];\r\n\t\t\t\telse z+=max;\r\n\t\t\t}\r\n\t\t\tbw.write(\"Case #\"+(t+1)+\": \"+y+\" \"+z);\r\n\t\t\tbw.newLine();\r\n\t\t}\r\n\t\tbr.close();\r\n\t\tbw.close();\r\n\t\tSystem.out.println(\"done\");\r\n\t}\r\n}\r\n", "idx": "1443"}
{"func": "package googlejam1.p444;\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\tpublic static PrintWriter out = null;\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tFileReader fr = null;\r\n\t\ttry {\r\n\t\t\tfr = new FileReader(\"test\");\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tBufferedReader br = new BufferedReader(fr);\r\n\t\tScanner in = new Scanner(br);\r\n\r\n\t\ttry {\r\n\t\t\tout = new PrintWriter(\"output.txt\", \"UTF-8\");\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\tint t = Integer.parseInt(in.nextLine());\n\t\t\n\t\t\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\t//String[] dataR = in.nextLine().split(\" \");\n\t\t\t//TODO: Edit data for each case\n\t\t\t//===============================\n\t\t\tint intervals= Integer.parseInt(in.nextLine());\n\t\t\tString[] dataR = in.nextLine().split(\" \");\n\t\t\tint[] data= new int[dataR.length];\n\t\t\tfor(int j=0;j<dataR.length;j++){\n\t\t\t\tdata[j]=Integer.parseInt(dataR[j]);\n\t\t\t}\n\t\t\t\n\t\t\t//===============================\n\t\t\tout.print(\"Case #\" + (i + 1) + \": \");\n\t\t\t// TODO Auto-generated method stub\n\t\t\tint count1 =0;\n\t\t\tfor(int i3=1;i3<data.length;i3++){\n\t\t\t\tif(data[i3-1]>data[i3]){\n\t\t\t\t\tcount1+=data[i3-1]-data[i3];\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.print(count1+\" \");\n\t\t\tint max=0;\n\t\t\tint count=0;\n\t\t\tfor(int i1=1;i1<data.length;i1++){\n\t\t\t\tif(data[i1-1]-data[i1]>max){\n\t\t\t\t\tmax=data[i1-1]-data[i1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount=max*(data.length-1);\n\t\t\tfor(int i2=0;i2<data.length-1;i2++){\n\t\t\t\tif(data[i2]<max){\n\t\t\t\t\tcount-=max-data[i2];\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println(count);\n\t\t}\r\n\r\n\t\tout.close();\r\n\t}\r\n\r\n\r\n\r\n\r\n}\r\n", "idx": "1444"}
{"func": "package googlejam1.p445;\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n    public static void main(String[] args) throws Exception {\r\n        PrintWriter writer = new PrintWriter(new FileOutputStream(\"A.out\"));\r\n        Scanner scanner = new Scanner(new FileInputStream(\"A.in\"));\r\n        //PrintWriter writer = new PrintWriter(System.out);\r\n        //Scanner scanner = new Scanner(System.in);\r\n\r\n        int T = scanner.nextInt();\r\n        for (int t = 1; t <= T; t++) {\r\n            int N = scanner.nextInt();\r\n            int[] m = new int[N];\r\n            for (int i = 0; i < N; i++) {\r\n                m[i] = scanner.nextInt();\r\n            }\r\n            int s1 = 0;\r\n            int maxDiff = 0;\r\n            for (int i = 1; i < N; i++) {\r\n                if (m[i-1] > m[i]) {\r\n                    int diff = m[i-1] - m[i];\r\n                    s1 += diff;\r\n                    if (diff > maxDiff) {\r\n                        maxDiff = diff;\r\n                    }\r\n                }\r\n            }\r\n            int s2 = 0;\r\n            for (int i = 0; i < N-1; i++) {\r\n                if (m[i] < maxDiff) {\r\n                    s2 += m[i];\r\n                } else {\r\n                    s2 += maxDiff;\r\n                }\r\n            }\r\n            writer.println(String.format(\"Case #%d: %d %s\", t, s1, s2));\r\n        }\r\n        scanner.close();\r\n        writer.close();\r\n    }\r\n}\r\n", "idx": "1445"}
{"func": "package googlejam1.p447;\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by Xenophon on 4/17/2015.\r\n */\r\npublic class P1 {\r\n    static String filename = \"./src/A-large.in\";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        try (Scanner s = new Scanner(new FileReader(filename));\r\n             FileWriter writer = new FileWriter(new File(filename.substring(0, filename.length() - 2) + \"out\"))) {\r\n\r\n            int T = Integer.valueOf(s.nextLine());\r\n\r\n            for (int i = 0 ; i < T ; i++) {\r\n                // Eat a line\r\n                s.nextLine();\r\n\r\n                String[] intStrings = s.nextLine().split(\" \");\r\n                int[] ints = new int[intStrings.length];\r\n                for (int inti = 0 ; inti < intStrings.length ; inti++) {\r\n                    ints[inti] = Integer.valueOf(intStrings[inti]);\r\n                }\n\t\t\t\tint result = 0;\n\t\t\t\tint last = 0;\n\t\t\t\tfor (int i1 : ints) {\n\t\t\t\t    if (i1 < last)\n\t\t\t\t        result += last - i1;\n\t\t\t\t    last = i1;\n\t\t\t\t}\r\n\r\n                int min1 = result;\n\t\t\t\tint max = 0;\n\t\t\t\tint last1 = 0;\n\t\t\t\tfor (int i3 : ints) {\n\t\t\t\t    if (i3 < last1 && (max < (last1 - i3))) {\n\t\t\t\t        max = last1 - i3;\n\t\t\t\t    }\n\t\t\t\t    last1 = i3;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint result1 = 0;\n\t\t\t\tfor (int i2 = 0 ; i2 < ints.length - 1; i2++) {\n\t\t\t\t    int plate = ints[i2];\n\t\t\t\t    int eatenThisTime = Math.min(plate, max);\n\t\t\t\t    result1 += eatenThisTime;\n\t\t\t\t}\r\n                int min2 = result1;\r\n\r\n                writer.write(\"Case #\" + (i + 1) + \": \" + min1 + \" \" + min2 + \"\\n\");\r\n                System.out.println(\"Case #\" + (i + 1) + \": \" + + min1 + \" \" + min2);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "idx": "1447"}
{"func": "package googlejam1.p448;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n *\n * @author Brian\n */\npublic class A\n{\n\n    private BufferedReader reader;\n    private BufferedWriter writer;\n\n    public static void main(String[] args)\n    {\n        A a = new A(args[0]);\n        int numberOfTests = 0;\n\t\t\n\t\ttry\n\t\t{\n\t\t    numberOfTests = Integer.parseInt(a.reader.readLine());\n\t\t}\n\t\tcatch (NumberFormatException | IOException e)\n\t\t{\n\t\t    System.err.println(\"Failed to read line\");\n\t\t    e.printStackTrace();\n\t\t    System.exit(-1);\n\t\t}\n\t\t\n\t\tfor (int testCase = 1; testCase <= numberOfTests; testCase++)\n\t\t{\n\t\t    try\n\t\t    {\n\t\t        a.reader.readLine();\n\t\t\n\t\t        List<Integer> mushrooms = new ArrayList<>();\n\t\t        int maxRate = 0;\n\t\t        int lastMush = 0;\n\t\t\n\t\t        for (String mushroom : a.reader.readLine().split(\"\\\\s\"))\n\t\t        {\n\t\t            int mush = Integer.parseInt(mushroom);\n\t\t\n\t\t            mushrooms.add(mush);\n\t\t\n\t\t            if (lastMush - mush > maxRate)\n\t\t            {\n\t\t                maxRate = lastMush - mush;\n\t\t            }\n\t\t\n\t\t            lastMush = mush;\n\t\t        }\n\t\t\t\tint methodA = 0;\n\t\t\t\tint methodB = 0;\n\t\t\t\t\n\t\t\t\tfor (int i = 1; i < mushrooms.size(); i++)\n\t\t\t\t{\n\t\t\t\t    if (mushrooms.get(i) < mushrooms.get(i - 1))\n\t\t\t\t    {\n\t\t\t\t        methodA += mushrooms.get(i - 1) - mushrooms.get(i);\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    methodB += Math.min(maxRate, mushrooms.get(i - 1));\n\t\t\t\t}\n\t\t\n\t\t        String response = methodA + \" \" + methodB;\n\t\t\n\t\t        a.writer.write(\"Case #\" + testCase + \": \" + response + \"\\n\");\n\t\t    }\n\t\t    catch (IOException e)\n\t\t    {\n\t\t        e.printStackTrace();\n\t\t        System.exit(-1);\n\t\t    }\n\t\t}\n\t\t\n\t\ttry\n\t\t{\n\t\t    a.reader.close();\n\t\t    a.writer.flush();\n\t\t    a.writer.close();\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t    e.printStackTrace();\n\t\t}\n    }\n\n    public A(String filename)\n    {\n        File file = new File(filename);\n        try\n        {\n            reader = new BufferedReader(new FileReader(file));\n            writer = new BufferedWriter(new FileWriter(file + \".out\"));\n        }\n        catch (IOException e)\n        {\n            System.err.println(\"Failed to open FileReader\");\n            e.printStackTrace();\n            System.exit(-1);\n        }\n    }\n}\n", "idx": "1448"}
{"func": "package googlejam1.p449;\n\r\n\r\nimport java.io.*;\r\nimport java.util.Scanner;\r\nimport java.util.logging.Level;\r\nimport java.util.logging.Logger;\r\n\r\n/**\r\n *\r\n * @author greg\r\n */\r\npublic class GCJQualA {\r\n\r\n    public static void main(String[] args) {\r\n        GCJQualA g = new GCJQualA();\r\n        Scanner br = null;\n\t\t        BufferedWriter bw;\n\t\t\n\t\t        try {\n\t\t            br = new Scanner(new File(\"src/gcj20151a/A-small-practice.in\"));\n\t\t            bw = new BufferedWriter(new FileWriter(\"src/gcj20151a/A-small-output.txt\"));\n\t\t//            bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\t\t\n\t\t            int numTests = br.nextInt();\n\t\t            for (int i = 0; i < numTests; i++) {\n\t\t                int N = br.nextInt();\n\t\t\n\t\t                int[] m = new int[N];\n\t\t                \n\t\t                for (int j = 0; j < N; j++) {\n\t\t                    m[j] = br.nextInt();\n\t\t                }\n\t\t\t\t\t\tint total = 0;\n\t\t\t\t\t\tint prev = 0;\n\t\t\t\t\t\tfor (int i1 = 0; i1 < N; i1++) {\n\t\t\t\t\t\t    int n = m[i1];\n\t\t\t\t\t\t    \n\t\t\t\t\t\t    if ( n < prev ) {\n\t\t\t\t\t\t        // Then she ate some\n\t\t\t\t\t\t        total += (prev-n);\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t        \n\t\t\t\t\t\t    prev = n;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint a = total;\n\t\t\t\t\t\tint total1 = 0;\n\t\t\t\t\t\tint rate = 0;\n\t\t\t\t\t\tint prev1 = 0;\n\t\t\t\t\t\tfor (int i1 = 0; i1 < N; i1++) {\n\t\t\t\t\t\t    int n = m[i1];\n\t\t\t\t\t\t    int periodRate = prev1 - n;\n\t\t\t\t\t\t    if ( periodRate < 0 ) {\n\t\t\t\t\t\t        periodRate = 0;\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    if ( periodRate > rate ) {\n\t\t\t\t\t\t        rate = periodRate;\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    prev1 = n;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// prev is now the remaining on the plate that she didn't eat.\n\t\t\t\t\t\t// total what was available per interval ( can't eat more than what's there)\n\t\t\t\t\t\tfor (int i2 = 0; i2 < N-1; i2++) {\n\t\t\t\t\t\t    int n = m[i2];\n\t\t\t\t\t\t    total1 += (n > rate)?rate:n;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint b = total1;\n\t\t                \n\t\t                String answer = a + \" \" + b;\n\t\t\n\t\t                bw.write(\"Case #\" + (i + 1) + \": \");\n\t\t                System.out.println(\"Case #\" + (i + 1) + \": \");\n\t\t                bw.write(answer);\n\t\t                System.out.println(answer);\n\t\t                bw.newLine();\n\t\t            }\n\t\t            bw.close();\n\t\t        } catch (IOException ex) {\n\t\t            Logger.getLogger(g.getClass().getName()).log(Level.SEVERE, null, ex);\n\t\t        } finally {\n\t\t            try {\n\t\t                if (br != null) {\n\t\t                    br.close();\n\t\t                }\n\t\t            } catch (Exception ex) {\n\t\t                Logger.getLogger(g.getClass().getName()).log(Level.SEVERE, null, ex);\n\t\t            }\n\t\t        }\r\n    }\r\n}\r\n", "idx": "1449"}
{"func": "package googlejam1.p450;\nimport java.util.Scanner;\r\n\r\n\r\npublic class Main_Round1A_2015_A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\r\n\t\tint t = sc.nextInt();\r\n\t\tfor (int casei = 1; casei <= t; casei++) {\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint[] m = new int[n];\r\n\t\t\tm[0] = sc.nextInt();\r\n\r\n\t\t\tint sum = 0;\r\n\t\t\tint max = 0;\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\tm[i] = sc.nextInt();\r\n\t\t\t\tint diff = Math.max(0, m[i - 1] - m[i]);\r\n\t\t\t\tmax = Math.max(max, diff);\r\n\t\t\t\tsum += diff;\r\n\t\t\t}\r\n\r\n\t\t\tint ret = 0;\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\tret += Math.min(m[i- 1], max);\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", casei, sum, ret);\r\n\t\t}\r\n\r\n\t\tsc.close();\r\n\t}\r\n}\r\n", "idx": "1450"}
{"func": "package googlejam1.p451;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Problem1 {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tScanner scanner = new Scanner(new FileReader(\"A-large.in\"));\n\t        int T = scanner.nextInt();\n\t        int[] Ns = new int[T];\n\t        ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();\n\t        for(int i=0; i<T; i++) {\n\t        \tNs[i] = scanner.nextInt(); \n\t        \tArrayList<Integer> subList = new ArrayList<Integer>();\n\t        \tfor(int j=0; j< Ns[i]; j++) {\n\t        \t\tint current = scanner.nextInt();\n\t        \t\tsubList.add(current);\n\t        \t}\n\t        \tlist.add(subList);\n\t        }  \n\t        PrintWriter out = new PrintWriter(new FileWriter(\"output1.txt\"));        \n\t        for(int i=0; i<T; i++) {\n\t        \tif(Ns[i] <= 1) {\n\t        \t\tout.println(\"Case #\" + (i+1) + \": 0 0\" );\n\t        \t\tcontinue;\n\t        \t}\n\t        \tArrayList<Integer> subList = list.get(i);\n\t        \tint maxGap = 0;\n\t        \tint sumGap = 0;\n\t        \tint secondSum = 0;\n\t        \tfor(int j=0; j<subList.size()-1; j++) {\n\t        \t\tif(subList.get(j) > subList.get(j+1)) {\n\t        \t\t\tsumGap += subList.get(j) - subList.get(j+1);\n\t        \t\t\tmaxGap = Math.max(maxGap, subList.get(j) - subList.get(j+1));\n\t        \t\t}\n\t        \t}\n\t        \tfor(int j=0; j<subList.size()-1; j++) {\n\t        \t\tif(subList.get(j) > maxGap) {\n\t        \t\t\tsecondSum += maxGap;\n\t        \t\t} else {\n\t        \t\t\tsecondSum += subList.get(j);\n\t        \t\t}\n\t        \t}\n\t        \tout.println(\"Case #\" + (i+1) + \": \" + sumGap + \" \" + secondSum);\n\t        }\n\t        out.close();\t       \n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "1451"}
{"func": "package googlejam1.p453;\n\r\n\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n    public static void main(String[] args) {\r\n        try {\r\n            Scanner in = new Scanner(new FileReader(\"A-large.in\"));\r\n            PrintWriter out = new PrintWriter(new FileWriter(\"outA.txt\"));\r\n\r\n            int cases = in.nextInt();\r\n            in.nextLine();\r\n            \r\n            for(int i = 0; i < cases; i ++){\r\n            \tint n = in.nextInt();\r\n            \tint[] a = new int[n];\r\n \r\n            \tfor(int j = 0; j < a.length; j ++){\r\n            \t\ta[j] = in.nextInt();\r\n            \t}\r\n            \tA aa = new A();\n\t\t\t\tint total = 0;\n\t\t\t\tfor(int i1 = 1; i1 < a.length; i1 ++){\n\t\t\t\t\tif(a[i1 - 1] > a[i1]){\n\t\t\t\t\t\ttotal += (a[i1 - 1] - a[i1]);\n\t\t\t\t\t}\n\t\t\t\t}\r\n            \tint total1 = total;\n\t\t\t\tint total3 = 0, rate = 0;\n\t\t\t\tfor(int i1 = 1; i1 < a.length; i1 ++){\n\t\t\t\t\tif(a[i1 - 1] > a[i1] && (a[i1 - 1] - a[i1] > rate)){\n\t\t\t\t\t\trate = a[i1 - 1] - a[i1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int i2 = 0; i2 < a.length - 1; i2 ++){\n\t\t\t\t\tif(a[i2] < rate){\n\t\t\t\t\t\ttotal3 += a[i2];\n\t\t\t\t\t}else{\n\t\t\t\t\t\ttotal3 += rate;\n\t\t\t\t\t}\n\t\t\t\t}\r\n            \tint total2 = total3;\r\n            \tout.println(\"Case #\" + (i + 1) + \": \" + total1 + \" \" + total2);\r\n            }\r\n            in.close();\r\n            out.close();\r\n        }catch(Exception e){\r\n        \te.printStackTrace();\r\n        }\r\n    }\r\n}", "idx": "1453"}
{"func": "package googlejam1.p454;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n\tpublic static void main (String[]args)throws IOException{\r\n\t\tBufferedReader x=new BufferedReader(new FileReader(\"Alarge.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"Alarge.out\")));\r\n\t\tint t=Integer.parseInt(x.readLine());\r\n\t\tfor (int cases=1; cases<=t; cases++){\r\n\t\t\tint n=Integer.parseInt(x.readLine());\r\n\t\t\tint[]s=new int[n];\r\n\t\t\tStringTokenizer st=new StringTokenizer(x.readLine());\r\n\t\t\tfor (int i=0; i<n; i++){\r\n\t\t\t\ts[i]=Integer.parseInt(st.nextToken());\r\n\t\t\t}\r\n\t\t\tint maxgap=-1;\r\n\t\t\tfor (int i=1; i<n; i++){\r\n\t\t\t\tif (s[i-1]-s[i]>maxgap)maxgap=s[i-1]-s[i];\r\n\t\t\t}\r\n\t\t\tint sum1=0;\r\n\t\t\tfor (int i=1; i<n; i++){\r\n\t\t\t\tif (s[i]<s[i-1])sum1+=s[i-1]-s[i];\r\n\t\t\t}\r\n\t\t\tint sum2=0;\r\n\t\t\tfor (int i=0; i<n-1; i++){\r\n\t\t\t\tsum2+=Math.min(maxgap,s[i]);\r\n\t\t\t}\r\n\t\t\tout.println(\"Case #\"+cases+\": \"+sum1+\" \"+sum2);\r\n\t\t}\r\n\t\tout.close();\r\n\t\tSystem.exit(0);\r\n\t}\r\n}", "idx": "1454"}
{"func": "package googlejam1.p457;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class ProblemA {\n  \n  public static void main(String[] args) {\n    try {\n      File input = new File(System.getProperty(\"inputFile\"));\n\n      FileReader fr = new FileReader(input);\n\t\t\tBufferedReader br = new BufferedReader(fr);\n\t\t\tStringBuilder output1 = new StringBuilder();\n\t\t\tInteger cases = Integer.valueOf(br.readLine());\n\t\t\tfor(int i = 1; i <= cases; i++) {\n\t\t\t\t\tint n = Integer.parseInt(br.readLine());\n\t\t\t  String caseInput = br.readLine();\n\t\t\t  String[] split = caseInput.split(\" \");\n\t\t\t\t\tint[] mushrooms = new int[split.length];\n\t\t\t\t\tfor (int j = 0; j < mushrooms.length; j++) {\n\t\t\t\t\t\tmushrooms[j] = Integer.parseInt(split[j]);\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tint method1 = 0;\n\t\t\t\t\tint maxDiff = 0;\n\t\t\t\t\tfor (int j = 1; j < mushrooms.length; j++) {\n\t\t\t\t\t\tif (mushrooms[j] < mushrooms[j-1]) {\n\t\t\t\t\t\t\tint diff = mushrooms[j-1] - mushrooms[j];\n\t\t\t\t\t\t\tmethod1 += diff;\n\t\t\t\t\t\t\tif (diff > maxDiff) {\n\t\t\t\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tint method2 = 0;\n\t\t\t\t\tfor (int j = 1; j < mushrooms.length; j++) {\n\t\t\t\t\t\tif (mushrooms[j-1] < maxDiff) {\n\t\t\t\t\t\t\tmethod2 += mushrooms[j-1];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethod2 += maxDiff;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\n\t\t\t  output1.append(String.format(\"Case #%d: %d %d\", i, method1, method2));\n\t\t\t  if (i != cases) {\n\t\t\t    output1.append(\"\\n\");\n\t\t\t  }\n\t\t\t}\n\n      String result = output1.toString();\n    \n      File output = new File(System.getProperty(\"outputFile\"));\n      FileWriter fw = new FileWriter(output);\n\t\t\tBufferedWriter bw = new BufferedWriter(fw);\n      bw.write(result);\n      bw.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n}\n", "idx": "1457"}
{"func": "package googlejam1.p459;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n/**@author Jun Yoon <junviolin@gmail.com>*/\r\npublic class CodeJam2015Round1AA {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String output = \"\";\r\n        Scanner input = new Scanner(new FileReader(\"./A-large.in\"));\r\n        \r\n        int numCases = input.nextInt();\r\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\r\n            int N = input.nextInt();\r\n            long[] Ms = new long[N];\r\n            long[] diffs = new long[N - 1];\r\n            for (int i = 0; i < N; i++) {\r\n                Ms[i] = input.nextInt();\r\n            }\r\n            for (int i = 0; i < N - 1; i++) {\r\n                diffs[i] = Ms[i] - Ms[i + 1];\r\n            }\r\n            long y = 0, maxZ = 0, z = 0;\r\n            for (long diff : diffs) {\r\n                if (diff > 0) {\r\n                    y += diff;\r\n                }\r\n                if (maxZ < diff) {\r\n                    maxZ = diff;\r\n                }\r\n            }\r\n            for (int i = 0; i < N - 1; i++) {\r\n                if (Ms[i] <= maxZ)\r\n                    z += Ms[i];\r\n                else\r\n                    z += maxZ;\r\n            }\r\n            output += String.format(\"Case #%d: %d %d\\n\", caseNum, y, z);\r\n        }\r\n        \r\n        input.close();\r\n        try (BufferedWriter bw = new BufferedWriter(new FileWriter(\"./A-large.out\"))) {\r\n            bw.write(output);\r\n        }\r\n    }\r\n}\r\n", "idx": "1459"}
{"func": "package googlejam1.p460;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.PriorityQueue;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Problem1 {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner s = null;\r\n\t\tScanner lineScan = null;\r\n\t\tint size;\r\n\t\tint currentSize;\r\n\t\tString line;\r\n\t\tFile output = new File(\"output.txt\");\r\n\t\tPrintWriter printer = new PrintWriter(output);\r\n\t\ts = new Scanner(new BufferedReader(new FileReader(\"A-large.in\")));\r\n\t\tsize = s.nextInt();\r\n\t\ts.nextLine();\r\n\t\tfor (int i = 0; i < size; i++) {\r\n\t\t\tcurrentSize = s.nextInt();\r\n\t\t\ts.nextLine();\r\n\t\t\tint[] plateValues = new int[currentSize];\r\n\t\t\tline = s.nextLine();\r\n\t\t\tlineScan = new Scanner(line);\r\n\t\t\tint j = 0;\r\n\t\t\twhile (lineScan.hasNextInt()) {\r\n\t\t\t\tplateValues[j] = lineScan.nextInt();\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\tint firstMethod = 0;\r\n\t\t\tint fastestRate = 0;\r\n\t\t\tfor (int m = 1; m < currentSize; m++) {\r\n\t\t\t\tif (plateValues[m] < plateValues[m - 1]) {\r\n\t\t\t\t\tfirstMethod += plateValues[m - 1] - plateValues[m];\r\n\t\t\t\t\tfastestRate = Math.max(fastestRate, plateValues[m - 1] - plateValues[m]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint secondMethod = 0;\r\n\t\t\tfor (int m = 0; m < currentSize - 1; m++) {\r\n\t\t\t\tif (plateValues[m] > fastestRate) {\r\n\t\t\t\t\tsecondMethod += fastestRate;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsecondMethod += plateValues[m];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tprinter.print(\"Case #\" + (i + 1) + \": \");\r\n\t\t\tprinter.println(firstMethod + \" \" + secondMethod);\r\n\t\t}\r\n\t\tprinter.close ();   \r\n\t}\r\n}\r\n", "idx": "1460"}
{"func": "package googlejam1.p466;\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class Main {\n    private static StreamTokenizer in;\n    private static Scanner ins;\n    private static PrintWriter out;\n\n    public static void main(String[] args) {\n\n        try {\n            in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n            ins = new Scanner(System.in);\n            out = new PrintWriter(System.out);\n            try {\n                if (System.getProperty(\"xDx\") != null) {\n                    in = new StreamTokenizer(new BufferedReader(new FileReader(\"input.txt\")));\n                    ins = new Scanner(new FileReader(\"input.txt\"));\n                    out = new PrintWriter(new FileWriter(\"output.txt\"));\n                }\n            } catch (Exception e) {\n                in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n                ins = new Scanner(System.in);\n                out = new PrintWriter(System.out);\n            }\n\t\t\tMain r = new Main();\n\t\t\tMain.in.nextToken();\n            int t = (int) Main.in.nval;\n\t\t\tfor (int k = 0; k < t; k++) {\n\t\t\t    Main.in.nextToken();\n\t\t\t\tint n = (int) Main.in.nval;\n\t\t\t    int y = 0;\n\t\t\t    int z = 0;\n\t\t\t    int speed = 0;\n\t\t\t    int[] a = new int[n];\n\t\t\t    for (int i = 0; i < n; i++) {\n\t\t\t        Main.in.nextToken();\n\t\t\t\t\ta[i] = (int) Main.in.nval;\n\t\t\t        if(i > 0) {\n\t\t\t            y += Math.max(a[i - 1] - a[i], 0);\n\t\t\t            speed = Math.max(speed, a[i - 1] - a[i]);\n\t\t\t        }\n\t\t\t    }\n\t\t\t\n\t\t\t    for (int i = 0; i < n - 1; i++) {\n\t\t\t        z += Math.min(a[i], speed);\n\t\t\t    }\n\t\t\t\n\t\t\t    Main.out.printf(\"Case #%d: %d %d\\n\", k + 1, y, z);\n\t\t\t}\n            out.close();\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n", "idx": "1466"}
{"func": "package googlejam1.p467;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class P1\r\n{\r\n  public static void main (String[] args) throws Exception\r\n  {\r\n    Scanner in = new Scanner(new File(\"A-large.in\"));\r\n    //Scanner in = new Scanner(System.in);\r\n    PrintWriter out = new PrintWriter(new FileWriter(\"out.txt\"));\r\n    int n = in.nextInt();\r\n    for(int t =0; t<n; t++)\r\n    {\r\n      int num = in.nextInt();\r\n      int[] intervals = new int[num];\r\n      for (int x =0; x< num; x++)\r\n        intervals[x] = in.nextInt();\r\n      int last = intervals[0];\r\n      int ans1 = 0;\r\n      for (int x =1; x< num; x++)\r\n      {\r\n        if (intervals[x] < last) ans1+= (last-intervals[x]);\r\n        last = intervals[x];\r\n      }\r\n      \r\n      int largest = 0;\r\n      last = intervals[0];\r\n      for (int x =1; x< num; x++)\r\n      {\r\n        if (intervals[x] < last) largest = Math.max(last-intervals[x],largest);\r\n        last = intervals[x];\r\n      }\r\n      System.out.println(largest);\r\n      last = intervals[0];\r\n      int ans2 = 0;\r\n      for (int x =1; x<num;x++)\r\n      {\r\n        if (intervals[x]>=0) ans2+=Math.min(largest,last);\r\n        last = intervals[x];\r\n      }\r\n      \r\n      // second part. constant eating speed\r\n      \r\n      String ans = \"\"+ans1+\" \" + ans2;\r\n      out.println(\"Case #\" + (t+1) + \": \" + ans);\r\n      System.out.println(\"Case #\" + (t+1) + \": \" + ans);\r\n    }\r\n    in.close();\r\n    out.close();\r\n  }\r\n}", "idx": "1467"}
{"func": "package googlejam1.p468;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\n\npublic class Mushroom {\n\n    public static void main(String[] args) throws Exception {\n        Mushroom m = new Mushroom();\n        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(input.readLine());\n        for (int i = 0; i < n; i++) {\n            int a = Integer.parseInt(input.readLine());\n            int[] p = new int[a];\n            String[] ss = input.readLine().split(\"\\\\s\");\n            for (int j = 0; j < ss.length; j++) {\n                p[j] = Integer.parseInt(ss[j]);\n            }\n\t\t\tint[] r = new int[2];\n\t\t\tint a1 = 0;\n\t\t\tint b = 0;\n\t\t\tfor (int i1 = 1; i1 < p.length; ++i1) {\n\t\t\t    if (p[i1 - 1] > p[i1]) {\n\t\t\t        a1 += p[i1 - 1] - p[i1];\n\t\t\t        b = Math.max(p[i1 - 1] - p[i1], b);\n\t\t\t    }\n\t\t\t}\n\t\t\tr[0] = a1;\n\t\t\ta1 = 0;\n\t\t\tfor (int i2 = 1; i2 < p.length; ++i2) {\n\t\t\t    if (b < p[i2 - 1]) {\n\t\t\t        a1 += b;\n\t\t\t    } else {\n\t\t\t        a1 += p[i2 - 1];\n\t\t\t    }\n\t\t\t}\n\t\t\tr[1] = a1;\n            int[] answer = r;\n            System.out.println(\"Case #\" + (i + 1) + \": \" + answer[0] + \" \" + answer[1]);\n        }\n    }\n}\n", "idx": "1468"}
{"func": "package googlejam1.p469;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.util.*;\n\npublic class PbA {\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tString input = \"pbA-small\";\n\t\t\tBufferedReader inputStream = new BufferedReader(new FileReader(input+\".in\"));\n\t\t\tFileWriter f = new FileWriter(input+\".out\");\n\t\t\tString l = inputStream.readLine();\n\t\t\tint nbCases = Integer.parseInt(l);\n\t\t\tfor (int caseNb = 1; caseNb<=nbCases; caseNb++){\n\t\t\t\tSystem.out.println(\"case \"+caseNb);\n\t\t\t\tl = inputStream.readLine();\n\t\t\t\tint N = Integer.parseInt(l);\n\t\t\t\tl = inputStream.readLine();\n\t\t\t\tString[] pos = l.split(\" \");\n\t\t\t\tint[] m=new int[N];\n\t\t\t\tint pb1=0;\n\t\t\t\tm[0]=Integer.parseInt(pos[0]);\n\t\t\t\tint speed=0;\n\t\t\t\tint pb2=0;\n\t\t\t\tfor(int i=1;i<N;++i){\n\t\t\t\t\tm[i]=Integer.parseInt(pos[i]);\n\t\t\t\t\tif(m[i]<m[i-1]){\n\t\t\t\t\t\tpb1+=m[i-1]-m[i];\n\t\t\t\t\t}\n\t\t\t\t\tif((m[i-1]-m[i])>speed){\n\t\t\t\t\t\tspeed=m[i-1]-m[i];\n\t\t\t\t\t}\n\t\t\t\t}\n//\t\t\t\tSystem.out.println(speed);\n\t\t\t\tfor(int i=0;i<N-1;++i){\n\t\t\t\t\tif(m[i]>speed){\n\t\t\t\t\t\tpb2+=speed;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tpb2+=m[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tf.write(\"Case #\"+caseNb+\": \" + pb1 + \" \" + pb2 + \"\\n\");\t\n//\t\t\t\tSystem.out.println(\"Case #\"+caseNb+\": \" + pb1 + \" \" + pb2 + \"\\n\");\n\t\t\t}\n\t\t\tf.close();\n\t\t}catch (Exception e){e.printStackTrace();}\n\t}\n\n}\n", "idx": "1469"}
{"func": "package googlejam1.p474;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n\npublic class ProblemA {\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t// TODO READER\t\t\n\t\t//BufferedReader br= new BufferedReader(new FileReader(\"bum.in\"));\n\t\t//BufferedReader br= new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n\t\tBufferedReader br= new BufferedReader(new FileReader(\"A-large.in\"));\n\t\tPrintWriter pw = new PrintWriter(\"ProblemA.txt\", \"UTF-8\");\n\t\tint T=Integer.parseInt(br.readLine());\n\t\t\n\t\tfor(int i = 0; i < T; i++){\n\t\t\tint L = Integer.parseInt(br.readLine());\n\t\t\tString[] tab =br.readLine().split(\" \");\n\t\t\tint[] arr = new int[tab.length];\n\t\t\tfor(int j=0;j<tab.length;j++){\n\t\t\t\tarr[j]=Integer.parseInt(tab[j]);\n\t\t\t}\n\t\t\t\n\n\t\t\tint x=0;\n\t\t\tint y=0;\n\t\t\tint previous = 0;\n\t\t\tint max=0;\n\t\t\tfor(int m:arr){\n\t\t\t\tif(m<previous)x+=previous-m;\n\t\t\t\tif(max<previous-m)max=previous-m;\n\t\t\t\tprevious=m;\n\t\t\t}\n\t\t\tSystem.out.println(max);\n\t\t\t//if(max%10!=0)max=((max/10)+1)*10;\n\t\t\tfor(int j=0;j<arr.length-1;j++){\n\t\t\t\tint m=arr[j];\n\t\t\t\tif(max<m)y+=max;\n\t\t\t\telse y+=m;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\"+(i+1)+\": \"+x+\" \"+y+\"\\n\");\n\t\t\tpw.write(\"Case #\"+(i+1)+\": \"+x+\" \"+y+\"\\n\");\n\n\t\t}\n\t\tpw.close();\n\t}\n}\n", "idx": "1474"}
{"func": "package googlejam1.p475;\n\r\n\r\nimport java.io.*;\r\n\r\n/**\r\n * Created by The Networks on 4/11/2015.\r\n */\r\npublic class mainClass {\r\n\r\n    public static void main(String[] args)\r\n    {\r\n        BufferedReader cin =  new BufferedReader(new InputStreamReader(System.in));\r\n\r\n        String file = null;\r\n        try {\r\n            System.out.print(\"Filename: \");\r\n            file = cin.readLine();\r\n\r\n            BufferedReader reader = new BufferedReader(new InputStreamReader(mainClass.class.getResourceAsStream(file)));\r\n            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"output.txt\")));\r\n\r\n            String line = reader.readLine();\r\n            int testCases = Integer.parseInt(line);\r\n\r\n            for( int i = 0; i < testCases; i++)\r\n            {\r\n                //waste line\r\n                reader.readLine();\r\n\r\n                line = reader.readLine();\r\n\r\n                Solution obj_Solution = new Solution();\r\n                String result = obj_Solution.solve(line)+\"\";\r\n                writer.append(\"Case #\" + (i + 1)).append(\": \").append(result);\r\n                writer.newLine();\r\n                System.out.println(\"Case #\" + (i + 1)+\": \"+line);\r\n                System.out.println(result);\r\n            }\r\n\r\n            writer.close();\r\n\r\n        } catch (IOException x) {\r\n            System.err.format(\"IOException: %s%n\", x);\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "1475"}
{"func": "package googlejam1.p476;\nimport java.util.Scanner;\n\n\npublic class Pr11 {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner s = new Scanner(System.in);\n\t\tint T = s.nextInt();\n\t\tint N, max, inc;\n\t\tlong min1, min2;\n\t\tint[] m;\n\t\tfor(int t=1; t<=T; t++){\n\t\t\tN = s.nextInt();\n\t\t\tm = new int[N];\n\t\t\tmax = 0;\n\t\t\tmin1 = 0;\n\t\t\tmin2 = 0;\n\t\t\tfor(int i=0; i<N; i++){\n\t\t\t\tm[i] = s.nextInt();\n\t\t\t\tif(i>0){\n\t\t\t\t\tif(m[i-1]>m[i]){\n\t\t\t\t\t\tmin1 = min1 + m[i-1] - m[i];\n\t\t\t\t\t\tif((m[i-1]-m[i])>max) max = m[i-1] - m[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(max == 0) System.out.println(\"Case #\"+t+\": \"+min1+\" 0\");\n\t\t\telse{\n\t\t\t\tif((max%10) == 0) inc = max/10;\n\t\t\t\telse inc = max/10 +1;\n\t\t\t\tfor(int i=1; i<N; i++){\n\t\t\t\t\tif(max>m[i-1]) min2 += m[i-1];\n\t\t\t\t\telse min2 += max;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"Case #\"+t+\": \"+min1+\" \"+min2);\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "idx": "1476"}
{"func": "package googlejam1.p477;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class ProblemA {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\t\t\r\n\t\tScanner sc = new Scanner(new File(\"ProblemA.txt.in\"));\r\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"ProblemA.txt.out\")));\r\n\t\t\r\n\t\tint T = sc.nextInt();\r\n\t\tsc.nextLine();\r\n\t\t\r\n\t\tfor(int i=0;i<T;i++) {\r\n            int n = sc.nextInt();\r\n            int m[] = new int[n];\r\n            int minMethodA = 0;\r\n            int minMethodB = 0;\r\n            int maxDiff =0;\r\n            for(int idx=0;idx<n;idx++) {\r\n                m[idx] = sc.nextInt();\r\n                if(idx !=0) {\r\n                    if (m[idx] < m[idx-1]) {\r\n                        minMethodA += (m[idx-1] - m[idx]);\r\n                    }\r\n                    if((m[idx-1] - m[idx]) > maxDiff) {\r\n                        maxDiff = (m[idx-1] - m[idx]);\r\n                    }\r\n                }\r\n            }\r\n            for(int idx=0;idx<n-1;idx++) {\r\n                if(m[idx] <= maxDiff) {\r\n                    minMethodB += m[idx];\r\n                } else {\r\n                    minMethodB += maxDiff;\r\n                }\r\n            }\r\n            \r\n\t\t    bw.write(\"Case #\" + (i+1) +\": \" + minMethodA + \" \" + minMethodB +\"\\n\");\r\n\t\t}\r\n\t\tbw.close();\r\n        sc.close();\r\n\t}\r\n}", "idx": "1477"}
{"func": "package googlejam1.p478;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\npublic class A {\r\n\tpublic static void main(String[] args){\r\n\t\ttry{\r\n\t\t\tScanner sc = new Scanner(new File(\"A-large.in\"));\r\n\t\t\t//Scanner sc = new Scanner(System.in);\r\n\t\t\t@SuppressWarnings(\"unused\")\r\n\t\t\tFile file = new File (\"A-large.out\");\r\n\t\t    PrintWriter pw = new PrintWriter (\"A-large.out\");\r\n\t\t\tint numCase = sc.nextInt();\r\n\t\t\tfor (int zz =0; zz < numCase; zz++){\r\n\t\t\t\tint numRound = sc.nextInt();\r\n\t\t\t\tint[] table = new int[numRound];\r\n\t\t\t\tint minEaten = 0;\r\n\t\t\t\tint minEatenConstant = 0;\r\n\t\t\t\tint maxConstant = -1;\r\n\r\n\t\t\t\tfor(int i = 0; i < numRound; i++){\r\n\t\t\t\t\ttable[i] = sc.nextInt();\r\n\t\t\t\t\tif(i > 0){\r\n\t\t\t\t\t\tif(table[i-1] >= table[i]){\r\n\t\t\t\t\t\t\tint eaten = table[i-1] - table[i];\r\n\t\t\t\t\t\t\tminEaten += eaten;\r\n\t\t\t\t\t\t\tif(maxConstant < eaten){\r\n\t\t\t\t\t\t\t\tmaxConstant = eaten;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(int i = 0 ; i < numRound - 1; i++){\r\n\t\t\t\t\t// eat the whole plate or maxConstant except the last plate\r\n\t\t\t\t\tminEatenConstant += Math.min(maxConstant, table[i]);\r\n\t\t\t\t}\r\n\t\t\t\tpw.printf(\"Case #%d: %d %d\\n\", (zz+1), minEaten, minEatenConstant);\r\n\t\t\t\t//System.out.printf(\"Case #%d: %d %d\\n\", (zz+1), minEaten, minEatenConstant);\r\n\t\t\t}\r\n\t\t\tsc.close();\r\n\t\t\tpw.close();\r\n\t\t}\r\n\t\tcatch(Exception e){}\r\n\t}\r\n}\r\n", "idx": "1478"}
{"func": "package googlejam1.p479;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n\npublic class CodeJam2015Round1A {\n\t\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tFile f = new File(\"input.txt\");\n\t\tFileInputStream fis = new FileInputStream(f);\n\t\t\n\t\t//Construct BufferedReader from InputStreamReader\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(fis));\n\t\t\n\t\tArrayList<String> stringRows = new ArrayList<>();\n\t\tString line;\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\tstringRows.add(line);\n\t\t}\n\t\tbr.close();\n\t\trows = stringRows;\n\t\tint totProblems = Integer.parseInt(rows.get(curRow++));\n\t\tfor (int curProblem = 1; curProblem <= totProblems; curProblem++) {\n\t\t\tint numTimes = Integer.parseInt(rows.get(curRow++));\n\t\t\tString[] mushroomCountsStrs = rows.get(curRow++).split(\" \");\n\t\t\tList<Integer> mushCounts = new ArrayList<>();\n\t\t\tfor (String count : mushroomCountsStrs) {\n\t\t\t\tmushCounts.add(Integer.parseInt(count));\n\t\t\t}\n\t\t\tint totEaten = 0;\n\t\t\tInteger lastCount = null;\n\t\t\tfor (Integer mushCount : mushCounts) {\n\t\t\t\tif (lastCount != null) {\n\t\t\t\t\tif (lastCount > mushCount) {\n\t\t\t\t\t\ttotEaten += lastCount - mushCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlastCount = mushCount;\n\t\t\t}\n\t\t\tint anyRateSol = totEaten;\n\t\t\tint minRate = 0;\n\t\t\tInteger lastCount1 = null;\n\t\t\tfor (Integer mushCount2 : mushCounts) {\n\t\t\t\tif (lastCount1 != null) {\n\t\t\t\t\tif (lastCount1 > mushCount2) {\n\t\t\t\t\t\tminRate = Math.max(minRate, lastCount1 - mushCount2) ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlastCount1 = mushCount2;\n\t\t\t}\n\t\t\t\n\t\t\tint totEaten1 = 0;\n\t\t\tlastCount1 = null;\n\t\t\tfor (Integer mushCount1 : mushCounts) {\n\t\t\t\tif (lastCount1 != null) {\n\t\t\t\t\ttotEaten1 += Math.min(lastCount1, minRate);\n\t\t\t\t}\n\t\t\t\tlastCount1 = mushCount1;\n\t\t\t}\n\t\t\tint constRateSol = totEaten1;\n\t\t\t\n        \tSystem.out.println(\"Case #\" + curProblem +\": \" + anyRateSol + \" \" + constRateSol);\n\t\t}\n\t}\n\t\n\tprivate static int curRow = 0;\n\tprivate static ArrayList<String> rows;\n\n}\n", "idx": "1479"}
{"func": "package googlejam1.p482;\nimport java.util.*;\n\nclass A{\n\npublic static void main(String[] args){\n\n\tScanner sc = new Scanner(System.in);\n\tint kase = sc.nextInt();\n\tfor(int k = 1; k<=kase; k++){\n\t\tint N =sc.nextInt();\n\t\tint[] mush = new int[N];\n\t\tint max = 0;\n\t\tint p1 = 0;\n\t\tfor (int i = 0; i<N; i++){\n\t\t\tmush[i] = sc.nextInt();\n\t\t\tif(i>0 && max < mush[i-1]-mush[i]) max = mush[i-1]-mush[i];\n\t\t\tif(i>0 && (mush[i-1]-mush[i])>0) p1+= mush[i-1]-mush[i];\n\t\t}\n\t\tint p2 = 0;\n\t\tfor (int i = 0; i<N-1; i++){\n\t\t\tif(mush[i]<max) p2+= mush[i];\n\t\t\telse p2+= max;\n\t\t}\n\t\tSystem.out.println(\"Case #\"+k+\": \"+p1+\" \"+p2);\n\t}\n}\n}\n\n", "idx": "1482"}
{"func": "package googlejam1.p483;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Scanner sc = new Scanner(new File(\"A-small.in\"));\r\n        int cases = sc.nextInt();\r\n        for (int i=1;i<=cases ;i++){\r\n            int N = sc.nextInt();\r\n            int m[] = new int[N];\r\n            String temp = sc.nextLine().trim();\r\n\r\n            for (int j=0;j<N;j++){\r\n                m[j] = sc.nextInt();\r\n            }\r\n\r\n            //First method\r\n            int prev=0;\r\n            long first=0;\r\n            for (int m0 : m){\r\n                first += Math.max(prev-m0,0);\r\n                prev=m0;\r\n            }\r\n\r\n            //Second method\r\n            long second=0;\r\n            int min_eat_per_turn=0;\r\n            prev=0;\r\n            for (int m0 : m){\r\n                min_eat_per_turn = Math.max(min_eat_per_turn,prev-m0);\r\n                prev=m0;\r\n            }\r\n            for (int m0 : Arrays.copyOf(m,N-1)){\r\n                second += Math.min(m0,min_eat_per_turn);\r\n            }\r\n\r\n\r\n            System.out.println(\"Case #\"+i+\": \"+first+\" \"+second);\r\n        }\r\n    }\r\n}\r\n", "idx": "1483"}
{"func": "package googlejam1.p484;\n\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\n\npublic class App {\n\tpublic static final String INPUT_FILE_NAME = \"input.txt\";\n\tpublic static final String OUTPUT_FILE_NAME = \"output.txt\";\n\t\n\tpublic static void main(String[] args) {\n\t\tlong beginTime = System.currentTimeMillis();\n\t\t\n\t\ttry {\n\t\t\tString inputName = INPUT_FILE_NAME;\n\t\t\tString outputName = OUTPUT_FILE_NAME;\n\t\t\n\t\t\tif (args.length > 0)\n\t\t\t\tinputName = args[0];\n\t\t\n\t\t\tif (args.length > 1)\n\t\t\t\toutputName = args[1];\n\t\t\n\t\t\ttry (BufferedReader reader = new BufferedReader(new FileReader(new File(inputName)))) {\n\t\t\t\ttry (PrintWriter writer = new PrintWriter(outputName)) {\n\t\t\t\t\tint nCases = Integer.parseInt(reader.readLine());\n\t\t\t\t\n\t\t\t\t\tfor (int nCase = 0; nCase < nCases; ++nCase) {\n\t\t\t\t\t\tint n = Integer.parseInt(reader.readLine());\n\t\t\t\t\t\tString[] data = reader.readLine().split(\" \");\n\t\t\t\t\t\t\n\t\t\t\t\t\tint counter1= 0;\n\t\t\t\t\t\tint counter2= 0;\n\t\t\t\t\t\tint prev = 0;\n\t\t\t\t\t\tint pace = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (int i = 0; i < n; ++i) {\n\t\t\t\t\t\t\tint mushrums = Integer.parseInt(data[i]);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (prev > mushrums) {\n\t\t\t\t\t\t\t\tcounter1 += prev - mushrums;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (pace < (prev - mushrums)) \n\t\t\t\t\t\t\t\t\tpace = prev - mushrums;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprev = mushrums;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tfor (int i = 0; i < n-1; ++i) {\n\t\t\t\t\t\t\tint mushrums = Integer.parseInt(data[i]);\n\t\t\t\t\t\t\tif (mushrums > pace)\n\t\t\t\t\t\t\t\tcounter2 += pace;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tcounter2 += mushrums;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tString out = \"Case #\" + (nCase + 1) + \": \" + counter1 + \" \" + counter2;\n\t\t\t\t\t\tSystem.out.println(out);\n\t\t\t\t\t\twriter.println(out);\n\t\t\t\t\t\t//writer.println(\"Case #\" + (nCase + 1) + \": \" + (richardWon ? \"RICHARD\" : \"GABRIEL\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} \n\t\t\n\t\tlong endTime = System.currentTimeMillis();\n\t\t\n\t\tSystem.out.println(String.format(\"Done. Spend %d ms\", endTime - beginTime));\n\t}\n}\n", "idx": "1484"}
{"func": "package googlejam1.p485;\n\n\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport static java.lang.Math.max;\nimport static java.lang.Math.min;\n\n/**\n * Created by adarsh.sharma on 18/04/15.\n */\npublic class AMushroomMonster {\n    public static void main(String[] args) {\n        Scanner scanner = null;\n        PrintWriter out = null;\n        try {\n            String inputFile = \"/Users/adarsh.sharma/Documents/coding/java/src/com/google/code/jam/OneA/A-large.in\";\n            scanner = new Scanner(new FileReader(inputFile));\n            String outFile = \"/Users/adarsh.sharma/Documents/coding/java/src/com/google/code/jam/OneA/A-large.out\";\n            out = new PrintWriter(outFile);\n//            scanner = new Scanner(new InputStreamReader(System.in));\n//            out = new PrintWriter(System.out);\n\n            int T = scanner.nextInt();\n            for (int t = 1; t <= T; t++) {\n                int N = scanner.nextInt();\n                List<Integer> A = new ArrayList<Integer>();\n                for (int n = 0; n < N; n++) {\n                    A.add(scanner.nextInt());\n                }\n\n                int X = 0;\n                for(int n=1; n<N; n++){\n                    X +=max(A.get(n-1)-A.get(n),0);\n                }\n\n                int minRate = 0;\n                for(int n=1; n<N; n++){\n                    minRate = max(A.get(n-1)-A.get(n),minRate);\n                }\n\n                int Y = 0;\n                for(int n=1; n<N; n++){\n                    Y+=min(A.get(n-1),minRate);\n                }\n\n                out.println(\"Case #\" + t + \": \" + X + \" \" + Y);\n//                out.flush();\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            scanner.close();\n            out.close();\n        }\n    }\n\n}\n", "idx": "1485"}
{"func": "package googlejam1.p489;\n\n\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.HashSet;\nimport java.util.Scanner;\n\n/**\n * Created by Zhenyi Luo on 15-4-17.\n */\npublic class A {\n    final static String PROBLEM_NAME = \"A-small-attempt0\";\n    final static String WORK_DIR = \"/Users/cecilia/Downloads/\" + PROBLEM_NAME;\n\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + \".in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \".out\"));\n        int caseCnt = sc.nextInt();\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\n            System.out.println(\"Processing test case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n\t\t\tA r = new A();\n            int N = sc.nextInt();\n\t\t\tint[] a = new int[N];\n\t\t\tfor(int i = 0; i < N; i++){\n\t\t\t    a[i] = sc.nextInt();\n\t\t\t}\n\t\t\tlong ret1 = 0;\n\t\t\tlong ret2 = 0;\n\t\t\tint max = 0;\n\t\t\tfor(int i = 1; i < N; i++){\n\t\t\t    if(a[i] < a[i-1]){\n\t\t\t        int dif = a[i-1] - a[i];\n\t\t\t        max = Math.max(max, dif);\n\t\t\t        ret1 += dif;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i = 0; i < N-1; i++){\n\t\t\t    ret2 += Math.min(a[i], max);\n\t\t\t}\n\t\t\tpw.println(ret1 + \" \" + ret2);\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}\n", "idx": "1489"}
{"func": "package googlejam1.p491;\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner k = new Scanner(System.in);\r\n\t\tint T = k.nextInt();\r\n\t\tSystem.out.println();\r\n\t\tfor(int i = 0; i < T; i++)\r\n\t\t{\r\n\t\t\tint N = k.nextInt();\r\n\t\t\tk.nextLine();\r\n\t\t\tString input = k.nextLine();\r\n\t\t\tScanner sc = new Scanner(input);\r\n\t\t\tint m1 = sc.nextInt();\r\n\t\t\tint answer1 = 0;\r\n\t\t\tint answer2 = 0;\r\n\t\t\tint max = 0;\r\n\t\t\tfor(int j = 1; j < N; j++)\r\n\t\t\t{\r\n\t\t\t\tint m0 = m1;\r\n\t\t\t\tm1 = sc.nextInt();\r\n\t\t\t\tif(m0 - m1 > 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tanswer1+=m0-m1;\r\n\t\t\t\t\tif(m0-m1 > max)\r\n\t\t\t\t\t\tmax = m0-m1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tsc = new Scanner(input);\r\n\t\t\tfor(int j = 0; j < N-1; j++)\r\n\t\t\t{\r\n\t\t\t\tint m = sc.nextInt();\r\n\t\t\t\tanswer2 += Math.min(m, max);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+answer1 + \" \" + answer2);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1491"}
{"func": "package googlejam1.p492;\nimport java.util.*;\nimport java.io.*;\n\npublic class Solution\n{\n\tstatic String filename = \"A-large\";\n\tstatic Scanner input;\n\n    public static void main(String ... orange) throws Exception\n    {\n\t\tFile file = new File(filename + \".in\");\n        input = new Scanner(file);\n\t    PrintWriter writer = new PrintWriter(filename + \".out\", \"UTF-8\");\n\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++)\n        {\n        \t// Solve each test case\n        \tint N = input.nextInt();\n\t\t\tint room[] = new int[N];\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\troom[i] = input.nextInt(); \n\t\t\t}\n\t\t\t\n\t\t\t// Method 1\n\t\t\tint eat1 = 0;\n\t\t\tfor (int i = 1; i < room.length; i++) {\n\t\t\t\tif (room[i] < room[i-1]) {\n\t\t\t\t\teat1 += room[i-1] - room[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Method 2\n\t\t\tint eat2 = 0;\n\t\t\tint fastestEatRate = 0;\n\t\t\tfor (int i = 1; i < room.length; i++) {\n\t\t\t\tif (room[i-1] - room[i] > fastestEatRate) {\n\t\t\t\t\tfastestEatRate = room[i-1] - room[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i = 0; i < room.length-1; i++) {\n\t\t\t\tif (room[i] < fastestEatRate) {\n\t\t\t\t\teat2 += room[i];\n\t\t\t\t} else {\n\t\t\t\t\teat2 += fastestEatRate;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString solution = \"\" + eat1 + \" \" + eat2;\n            \n            writer.printf(\"Case #%d: %s\\n\", n + 1, solution);\n            System.out.printf(\"Case #%d: %s\\n\", n + 1, solution);\n        }\n        \n        writer.close();\n        input.close();\n    }\n}\n", "idx": "1492"}
{"func": "package googlejam1.p494;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class MushroomMonster {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\n\n\t\tArrayList<Integer> arraylist = new ArrayList<Integer>();\n\t\tint[] array;\n\n\n\t\tScanner sc = new Scanner(new File(\"MushroomMonster.in\"));\n\t\t//PrintWriter pw = new PrintWriter(\"StandingOvation.out\");\n\t\tPrintWriter pw = new PrintWriter(new File(\"MushroomMonster.out\"));\n\t\t//PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(\"StandingOvation.out\")));\n\n\t\tint trials = sc.nextInt();\n\n\t\tfor(int i = 0; i<trials;i++){\n\t\t\tint size = sc.nextInt();\n\t\t\tarray = new int[size];\n\n\t\t\tfor(int j=0; j<size; j++){\n\t\t\t\tarray[j] = sc.nextInt();\n\t\t\t\t//System.out.println(\"\" + array[j]);\n\n\t\t\t}\n\t\t\tint answer1 = 0;\n\t\t\tint difference = 0;\n\t\t\tint answer2 = 0;\n\n\t\t\tfor(int k=0; k<size-1; k++){\n\t\t\t\tif(array[k] > array[k+1]) {\n\t\t\t\t\tanswer1 += array[k] - array[k+1]; \n\t\t\t\t\tif(array[k] - array[k+1] > difference) difference = array[k] - array[k+1];\n\t\t\t\t}\n\t\t\t\t//if(array[k] < array[k+1]) ;\n\n\t\t\t}\n\t\t\t\n\t\t\tfor(int x=0; x<size-1; x++){\n\t\t\t\tif(array[x] >= difference) answer2 += difference;\n\t\t\t\telse answer2 += array[x];\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\n\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + answer1 + \" \" + answer2);\n\t\t\tpw.println(\"Case #\" + (i+1) + \": \" + answer1 + \" \" + answer2);\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\tpw.close();\n\t\tsc.close();\n\t}\n\n\n\n}\n", "idx": "1494"}
{"func": "package googlejam1.p496;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Mushroom {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n        Scanner in = new Scanner(new File(\"input.in\"));\r\n        PrintWriter out = new PrintWriter(\"output.txt\");\r\n        int T = in.nextInt();\r\n        int[] se=new int[2];\r\n        for (int i = 0; i < T; i++) {\r\n        \tMushroom r = new Mushroom();\n\t\t\tint N=in.nextInt();\n\t\t\tint[] plate=new int[N];\n\t\t\tfor(int i1=0;i1<N;i1++){\n\t\t\t\tplate[i1]=in.nextInt();\n\t\t\t}\n\t\t\tint[] eat=new int[N-1];\n\t\t\tint max=0;\n\t\t\tint sum1=0;\n\t\t\tfor(int i2=0;i2<N-1;i2++){\n\t\t\t\teat[i2]=plate[i2]-plate[i2+1];\n\t\t\t\tif(eat[i2]>max) max=eat[i2];\n\t\t\t\tif(eat[i2]>0) sum1=sum1+eat[i2];\n\t\t\t}\n\t\t\tint sum2=0;\n\t\t\tfor(int i3=0;i3<N-1;i3++){\n\t\t\t\tif(plate[i3]>max) sum2=sum2+max;\n\t\t\t\telse sum2=sum2+plate[i3];\n\t\t\t}\n\t\t\tint[] result=new int[2];\n\t\t\tresult[0]=sum1;\n\t\t\tresult[1]=sum2;\n\t\t\tse=result;\r\n            String s = \"Case #\" + (i + 1) + \": \" + se[0]+ \" \" + se[1];\r\n            out.println(s);\r\n            System.out.println(s);\r\n        }\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "1496"}
{"func": "package googlejam1.p497;\n\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Scanner;\n\nimport static java.lang.String.format;\n\n/**\n * @author Oleg Tsal-Tsalko\n */\npublic class MushroomMonster {\n\n    public static final String IN = \"src/main/resources/codejam/round1a2015/mushroom/A-large.in-2.txt\";\n    public static final String OUT = \"src/main/resources/codejam/round1a2015/mushroom/A-large.out-2.txt\";\n\n    public static void main(String[] args) throws IOException {\n        FileWriter fw = new FileWriter(OUT);\n        Scanner scanner = new Scanner(new File(IN));\n        int T = scanner.nextInt();\n        for (int i = 0; i < T; i++) {\n            int N = scanner.nextInt();\n            int[] mushroomsLeft = new int[N];\n            for (int j = 0; j < N; j++) {\n                mushroomsLeft[j] = scanner.nextInt();\n            }\n\t\t\tint accum = 0;\n\t\t\tfor (int i1 = 0; i1 < mushroomsLeft.length - 1; i1++) {\n\t\t\t    int diff = mushroomsLeft[i1] - mushroomsLeft[i1 + 1];\n\t\t\t    if (diff > 0) accum += diff;\n\t\t\t}\n            int eaten1 = accum;\n\t\t\tint accum1 = 0;\n\t\t\tint maxInterval = 0;\n\t\t\tfor (int i1 = 0; i1 < mushroomsLeft.length - 1; i1++) {\n\t\t\t    int diff = mushroomsLeft[i1] - mushroomsLeft[i1 + 1];\n\t\t\t    if (diff > maxInterval) maxInterval = diff;\n\t\t\t}\n\t\t\tfor (int i2 = 0; i2 < mushroomsLeft.length - 1; i2++) {\n\t\t\t    accum1 += Math.min(mushroomsLeft[i2], maxInterval);\n\t\t\t}\n            int eaten2 = accum1;\n            fw.write(format(\"Case #%d: %d %d\", i + 1, eaten1, eaten2) + \"\\n\");\n        }\n        scanner.close();\n        fw.close();\n    }\n\n}\n", "idx": "1497"}
{"func": "package googlejam1.p498;\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\n\n\npublic class MushroomMonster {\n\n\tpublic static void main(String[] args)  throws IOException{\n\t\t// TODO Auto-generated method stub\n//\t\tString inputFile = \"input.txt\";\n//\t\tString inputFile = \"A-small-attempt0 (1).in\";\n\t\tString inputFile = \"A-large (1).in\";\n//\t\tString inputFile = \"C-large.in\";\n\t\tString outputFile = \"output.txt\";\n\t\tFileInputStream fstream = new FileInputStream(inputFile);\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(fstream));\n\n\t\tPrintWriter writer = new PrintWriter(outputFile, \"UTF-8\"); //result\n\t\t\n\t\tString strLine;\n\t\tstrLine = br.readLine();\n\t\tint T = Integer.parseInt(strLine);\n\t\tSystem.out.println(\"T=\" + T);\n\t\tfor( int i = 0;i<T;i++){\n\t\t\tint N;\n\t\t\tstrLine = br.readLine();\n\t\t\tN = Integer.parseInt(strLine);\n\t\t\t\n\t\t\tint[] c = new int[N];\n\t\t\tstrLine = br.readLine();\n\t\t\tString[] strArray = strLine.split(\" \");\n//\t\t\tSystem.out.println(\"N = \" + N);\n//\t\t\tSystem.out.println(Arrays.toString(strArray));\n\t\t\tfor(int j =0;j<N;j++){\n\t\t\t\tc[j] = Integer.parseInt(strArray[j]);\n\t\t\t}\n\t\t\tint n = c.length;\n\t\t\tint r = 0;\n\t\t\tfor (int i1 =0;i1<n-1;i1++){\n\t\t\t\tr = r +  Math.max(0, c[i1] - c[i1+1]);\n\t\t\t}\n\t\t\t\n//\t\t\tSystem.out.println(Arrays.toString(c));\n\t\t\tint y = r;\n\t\t\tint n1 = c.length;\n\t\t\tint minCount = -1; // \u6700\u5c0f\u901f\u5ea6\n\t\t\tint e = 0;\n\t\t\tfor (int i2 =0;i2<n1-1;i2++){\n\t\t\t\t e = Math.max(0, c[i2] - c[i2+1]);\n\t\t\t\t if(e > minCount){\n\t\t\t\t\t minCount = e;\n\t\t\t\t }\n\t\t\t}\n\t\t\tint r1 = 0;\n\t\t\tfor (int i1 =0;i1<n1-1;i1++){\n\t\t\t\t if(c[i1] <= minCount){\n\t\t\t\t\t r1 = r1 + c[i1];\n\t\t\t\t }else{\n\t\t\t\t\t r1 = r1 + minCount;\n\t\t\t\t }\n\t\t\t}\n\t\t\tint z = r1;\n\t\t\tString result_str;\n\t\t\tresult_str =\"Case #\"+(i+1)+\": \" + y + \" \" + z; \n\t\t\t \n\t\t\twriter.println(result_str);\n\t\t\tSystem.out.println(result_str);\n\t\t}\n\t\n\t\t//Close the input stream\n\t\tbr.close();\n\t\twriter.close();\n\t}\n\n}\n", "idx": "1498"}
{"func": "package googlejam1.p501;\n/**\n * Google Code Jam\n *\n * ***** Competition ********\n * ***** Problem ********\n */\n\nimport java.io.*;\nimport java.util.*;\n\n\npublic class AQ1\n{\n    static Scanner sc = new Scanner(System.in);\n    \n    public static void main(String[] parms)\n    {\n        int numProbs;\n\t\t\n\t\tnumProbs = sc.nextInt();\n\t\t\n\t\tfor (int i=1; i<=numProbs; i++)\n\t\t{\n\t\t    System.out.format(\"Case #%d: \", i);\n\t\t\tint numTrials = sc.nextInt();\n\t\t\t\n\t\t\tint[] t = new int[numTrials];\n\t\t\tfor (int i3=0; i3<numTrials; i3++)\n\t\t\t{\n\t\t\t    t[i3]=sc.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\t//method 1\n\t\t\tint total = 0;\n\t\t\tfor (int i4=0; i4<(numTrials-1); i4++)\n\t\t\t{\n\t\t\t    if (t[i4] > t[i4+1]) total += t[i4]-t[i4+1];\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.print(total + \" \");\n\t\t\t\n\t\t\t//method 2\n\t\t\tint diff = 0;\n\t\t\tint nextDiff = 0;\n\t\t\tfor (int i2=0; i2<(numTrials-1); i2++)\n\t\t\t{\n\t\t\t    nextDiff = t[i2] - t[i2+1];\n\t\t\t    if (nextDiff > diff) diff = nextDiff;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\ttotal = 0;\n\t\t\tfor (int i1=0; i1<(numTrials-1); i1++)\n\t\t\t{\n\t\t\t    if (t[i1] < diff) total += t[i1];\n\t\t\t    else total += diff;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.print(total);\n\t\t    System.out.println();\n\t\t}\n        \n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "idx": "1501"}
{"func": "package googlejam1.p502;\nimport java.io.BufferedReader;\nimport java.io.PrintWriter;\nimport java.util.*;\nimport java.io.*;\n\npublic class A {\n\n\tstatic BufferedReader in;\n\tstatic PrintWriter out;\n\tstatic StringTokenizer tok;\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tFile inf = new File (\"/Users/Kang/Documents/workspace/CodeJamRound1/src/A.in\");\n\t\tFile outf = new File(\"/Users/Kang/Documents/workspace/CodeJamRound1/src/A.out\");\n\t\tin = new BufferedReader(new FileReader(inf));\n\t\tout = new PrintWriter(outf);\n\t\tint cases = Integer.parseInt(in.readLine());\n\t\tfor (int i = 0; i < cases; i++) {\n\t\t\ttok = new StringTokenizer(in.readLine());\n\t\t\tint method1 = 0;\n\t\t\tint method2 = 0;\n\t\t\tint len = Integer.parseInt(tok.nextToken());\n\t\t\ttok = new StringTokenizer(in.readLine());\n\t\t\tint[] mushrooms = new int[len];\n\t\t\tint max = 0;\n\t\t\tfor (int j = 0; j < len; j++) {\n\t\t\t\tmushrooms[j] = Integer.parseInt(tok.nextToken());\n\t\t\t}\n\t\t\tfor (int j = 1; j < len; j++) {\n\t\t\t\tif (mushrooms[j] < mushrooms[j-1]) method1 += mushrooms[j-1] - mushrooms[j];\n\t\t\t\tmax = Math.max(max, mushrooms[j-1] - mushrooms[j]);\n\t\t\t}\n\t\t\tfor (int j = 0; j < len-1; j++) {\n\t\t\t\tmethod2 += Math.min(max, mushrooms[j]);\n\t\t\t}\n\t\t\tmethod2 = method2;\n\t\t\tout.print(\"Case #\" + \"\" + (i+1) + \": \" + method1 + \" \" + method2 + \"\\n\");\n\t\t}\n\t\tin.close();\n\t\tout.close();\n\t}\n}\n", "idx": "1502"}
{"func": "package googlejam1.p504;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\n\r\n\r\npublic class Mushroom {\r\n\r\n\tpublic Mushroom() {\r\n\t\t// TODO Auto-generated constructor stub\r\n\t}\r\n\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tBufferedReader input = new BufferedReader(new FileReader(new File(\"input.in\")));\r\n\t\tBufferedWriter output = new BufferedWriter(new FileWriter(new File(\"output.txt\")));\r\n\t\t\r\n\t\tString line = null;\r\n\t\t\r\n\t\tline = input.readLine();\r\n\t\tint num_of_cases = Integer.parseInt(line);\r\n\t\t\r\n\t\t\r\n\t\tfor(int i=0;i<num_of_cases;i++) {\r\n\t\t\tline = input.readLine();\r\n\t\t\tint plate_num = Integer.parseInt(line);\r\n\t\t\tint[] plates = new int[plate_num];\r\n\t\t\t\r\n\t\t\tline = input.readLine();\r\n\t\t\tString[] splited = line.split(\"\\\\s+\");\r\n\t\t\tfor(int j=0;j<plate_num;j++) {\r\n\t\t\t\tplates[j] = Integer.parseInt(splited[j]);\r\n\t\t\t}\r\n\r\n\t\t\t//1st situation\r\n\t\t\tint total_1 = 0;\r\n\t\t\tfor(int j=0;j<plate_num-1;j++) {\r\n\t\t\t\tif(plates[j]>plates[j+1]) {\r\n\t\t\t\t\ttotal_1+=plates[j]-plates[j+1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//2nd situation\r\n\t\t\tint total_2 = 0;\r\n\t\t\tint[] diff = new int[plate_num-1];\r\n\t\t\tint max_diff=0;\r\n\t\t\tfor(int j=0;j<plate_num-1;j++) {\r\n\t\t\t\tif(plates[j]>plates[j+1]) {\r\n\t\t\t\t\tdiff[j] = plates[j]-plates[j+1];\r\n\t\t\t\t\tif(max_diff<diff[j]) {\r\n\t\t\t\t\t\tmax_diff=diff[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int j=0;j<plate_num-1;j++) {\r\n\t\t\t\tif(plates[j]<max_diff) {\r\n\t\t\t\t\ttotal_2+=plates[j];\r\n\t\t\t\t}else {\r\n\t\t\t\t\ttotal_2+=max_diff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t\toutput.write(\"Case #\"+(i+1)+\": \"+total_1+\" \"+total_2+\"\\n\");\r\n\t\t}\r\n\t\tinput.close();\r\n\t\toutput.close();\r\n\t}\r\n\t\r\n}\r\n", "idx": "1504"}
{"func": "package googlejam1.p505;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\npublic class MushroomMonster {\r\n\r\n\tpublic static void main (String [] args) throws IOException {\r\n\t\tString root = \"A-large\";\r\n\t\tString fileName = \"C:\\\\Users\\\\Aaron\\\\Downloads\\\\\" + root + \".in\";\r\n\t\tBufferedReader reader = new BufferedReader (new FileReader(new File(fileName)));\r\n\t\tint nTestCases = Integer.parseInt(reader.readLine());\r\n\t\tArrayList<String> out = new ArrayList<String>();\r\n\t\tfor (int t = 0; t < nTestCases; t++) {\r\n\t\t\tint numWatches = Integer.parseInt(reader.readLine());\r\n\t\t\tString[] parts = reader.readLine().split(\" \");\r\n\t\t\tint[] eat = new int[parts.length];\r\n\t\t\tfor (int i = 0; i < parts.length; i++) eat[i] = Integer.parseInt(parts[i]);\n\t\t\t// Eat as much as she wants\n\t\t\tint numEaten1 = 0;\n\t\t\tfor (int i1 = 1; i1 < eat.length; i1++) {\n\t\t\t\tnumEaten1 += Math.max(0, eat[i1 - 1] - eat[i1]);\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint y = numEaten1;\n\t\t\t//10 second intervals.  Biggest rate of change?\n\t\t\tint numEaten = 0;\n\t\t\tint maxRate = 0;\n\t\t\tfor (int i = 1; i < eat.length; i++) {\n\t\t\t\tint rate = (eat[i - 1] - eat[i]);\n\t\t\t\tmaxRate = Math.max(maxRate, rate);\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Max rate: \" + maxRate);\n\t\t\t\n\t\t\tfor (int i = 0; i < eat.length; i++) {\n\t\t\t\tnumEaten += maxRate;\n\t\t\t\tif (eat[i] < maxRate) {\n\t\t\t\t\tnumEaten -= maxRate - eat[i];\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tnumEaten -= Math.min(maxRate, eat[eat.length - 1]);\n\t\t\tnumEaten = Math.max(0, numEaten);\r\n\t\t\tint z = numEaten;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Input: \" + Arrays.toString(eat));\r\n\t\t\tSystem.out.println(\"Answer: \" + y + \" \" + z);\r\n\t\t\tSystem.out.println(\"-----------------\");\r\n\t\t\tout.add(\"Case #\" + (t+1) + \": \" + y + \" \" + z);\r\n\t\t}\r\n\t\t\r\n\t\tPrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\Aaron\\\\Downloads\\\\\"+ root + \"-SOL.out\")));\r\n\t\tfor (String s : out) {\r\n\t\t\twriter.write(s + \"\\n\");\r\n\t\t}\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n}\r\n", "idx": "1505"}
{"func": "package googlejam1.p506;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\npublic class Mushroom {\r\n\r\n\tpublic static void main (String [] args) throws IOException{\r\n\r\n\t\t//Timing\r\n\t\t//long s = System.currentTimeMillis ();\r\n\r\n\t\t//Set up the reader and printer\r\n\t\tBufferedReader in = new BufferedReader (new FileReader (\"A-large.in\"));\r\n\t\tPrintWriter out = new PrintWriter (new BufferedWriter (new FileWriter (\"OUT.txt\")));\r\n\t\tint noCases = Integer.parseInt(in.readLine());\r\n\t\t\r\n\t\t//Solve the cases\r\n\t\tfor (int caseNo = 1; caseNo <= noCases; caseNo++){\r\n\t\t\t\r\n\t\t\tint n = Integer.parseInt(in.readLine());\r\n\t\t\tString [] data = in.readLine().split(\" \");\r\n\t\t\tint [] m = new int [n];\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\tm[i] = Integer.parseInt(data[i]);\r\n\t\t\t\r\n\t\t\t//Get min at any rate\r\n\t\t\tint min1 = 0;\r\n\t\t\tfor (int i = 1; i < n; i++)\r\n\t\t\t\tif (m[i]-m[i-1] < 0)\r\n\t\t\t\t\tmin1 += m[i-1]-m[i];\r\n\t\t\t\r\n\t\t\t//Get min at constant rate\r\n\t\t\tint maxDifference = 0;\r\n\t\t\tfor (int i = 1; i < n; i++)\r\n\t\t\t\tmaxDifference = Math.max(maxDifference, m[i-1] - m[i]);\r\n\t\t\t\r\n\t\t\tint min2 = 0;\r\n\t\t\tfor (int i = 0; i < n-1; i++)\r\n\t\t\t{\r\n\t\t\t\tif (m[i] < maxDifference)\r\n\t\t\t\t\tmin2+=m[i];\r\n\t\t\t\telse\r\n\t\t\t\t\tmin2+=maxDifference;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString answer = String.format(\"%d %d\", min1, min2);\r\n\t\t\tout.println(String.format(\"Case #%d: %s\", caseNo, answer));\r\n\t\t\tout.flush();//So I can see how my program is doing\r\n\t\t}\r\n\r\n\t\t//Close the files\r\n\t\tin.close();\r\n\t\tout.close();\r\n\r\n\t\t//Timing\r\n\t\t//long e = System.currentTimeMillis();\r\n\t\t//System.out.println((e - s) / 1000.0);\r\n\r\n\t\t//Terminate the program\r\n\t\tSystem.exit(0);\r\n\r\n\t} //Main method\r\n}\r\n", "idx": "1506"}
{"func": "package googlejam1.p507;\n\r\n\r\nimport java.io.File;\r\nimport java.util.Scanner;\r\n\r\npublic class Mushrooms {\r\n\r\n//   String inputFile = \"./input/sample.txt\";\r\n   String inputFile = \"./input/A-large (1).in\";\r\n   \r\n   \r\n\r\n   \r\n   public static void main(String[] args) {\r\n      Mushrooms mt = new Mushrooms();\r\n\r\n      try {\r\n         Scanner s = new Scanner(new File(mt.inputFile));\n\t\t\n\t\t  int t = s.nextInt();\n\t\t\n\t\t  for(int tc = 1; tc <= t; tc++) {\n\t\t\tSystem.out.print(\"Case #\" + tc + \": \");\n\t\t\t\n\t\t\t  int N = s.nextInt();\n\t\t\t  int[] m = new int[N];\n\t\t\t\n\t\t\t  for(int i = 0; i < N; i++) {\n\t\t\t     m[i] = s.nextInt();\n\t\t\t  }\n\t\t\t\n\t\t\t  int bd = 0;\n\t\t\t\n\t\t\t  for(int i = 0; i < N-1; i++) {\n\t\t\t     if ((m[i] - m[i+1]) > bd) {\n\t\t\t        bd = m[i] - m[i+1]; \n\t\t\t     }\n\t\t\t  }\n\t\t\t\n\t\t\t  int m1 = 0;\n\t\t\t  int m2 = 0;\n\t\t\t\n\t\t\t  for(int i = 0; i < N-1; i++) {\n\t\t\t     if ((m[i] - m[i+1]) > 0) {\n\t\t\t        m1 += m[i] - m[i+1];\n\t\t\t     }\n\t\t\t        \n\t\t\t     if (m[i] >= bd) {\n\t\t\t        m2 += bd;\n\t\t\t     }\n\t\t\t     else {\n\t\t\t        m2 += m[i];\n\t\t\t     }\n\t\t\t  }\n\t\t\t\n\t\t\t  System.out.println(m1 + \" \" + m2);\n\t\t}         \r\n      } catch (Exception e) {\r\n         e.printStackTrace();\r\n      }\r\n\r\n   }\r\n}\r\n", "idx": "1507"}
{"func": "package googlejam1.p510;\n\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class R1A2015A {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = null;\n\t\t\n\t\ttry {\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t\t\n\t\t\tint testCaseNum = Integer.parseInt(in.readLine());\n\t\t\t\n\t\t\tfor(int i=1; i<=testCaseNum; i++) {\n\t\t\t\tint n = Integer.parseInt(in.readLine());\n\t\t\t\tString[] m_str = in.readLine().split(\" \");\n\t\t\t\tint[] m = new int[n];\n\t\t\t\tfor(int j=0; j<n; j++) {\n\t\t\t\t\tm[j] = Integer.parseInt(m_str[j]);\n\t\t\t\t}\n\t\t\t\tint sumconsumption = 0;\n\t\t\t\tint maxconsumption = 0;\n\t\t\t\tfor(int j=1; j<n; j++) {\n\t\t\t\t\tint consumption = Math.max(m[j-1] - m[j], 0);\n\t\t\t\t\tsumconsumption += consumption;\n\t\t\t\t\tmaxconsumption = Math.max(maxconsumption, consumption);\n\t\t\t\t}\n\t\t\t\tlong z = 0;\n\t\t\t\tfor(int j=0; j<n-1; j++) {\n\t\t\t\t\tz += Math.min(maxconsumption, m[j]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.print(\"Case #\" + i + \": \");\n\t\t\t\tSystem.out.print(sumconsumption);\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t\tSystem.out.print(z);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t\tcatch(IOException ioe) {\n\t\t\tthrow ioe;\n\t\t}\n\t\tfinally {\n\t\t\tif(in != null) {\n\t\t\t\tin.close();\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n", "idx": "1510"}
{"func": "package googlejam1.p511;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\npublic class Mushroom{\r\n\tint testNum, n, answer1, answer2, maxGap;\r\n\tint[] myList;\r\n\tboolean activate;\r\n\tpublic static void main(String[] args){\r\n\t\ttry{\r\n\t\t\tMushroom myMushroom = new Mushroom();\r\n\t\t\tint i, j, testcase;\n\t\t\tInteger myInt;\n\t\t\ttry{\n\t\t\t\tScanner fin = new Scanner(new File(\"A-large.in\"));\n\t\t\t\tBufferedWriter fout = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"out.txt\")));\n\t\t\t\tmyMushroom.testNum = fin.nextInt();\n\t\t\t\tfor (testcase = 1; testcase <= myMushroom.testNum; testcase++){\n\t\t\t\t\tmyMushroom.n = fin.nextInt();\n\t\t\t\t\tmyMushroom.myList = new int[myMushroom.n];\n\t\t\t\t\tmyMushroom.activate = false;\n\t\t\t\t\tmyMushroom.maxGap = 0;\n\t\t\t\t\tfor (i = 0; i < myMushroom.n; i++){\n\t\t\t\t\t\tmyMushroom.myList[i] = fin.nextInt();\n\t\t\t\t\t\tif (i > 0 && myMushroom.myList[i] < myMushroom.myList[i-1]){\n\t\t\t\t\t\t\tmyMushroom.activate = true;\n\t\t\t\t\t\t\tif (myMushroom.myList[i-1] - myMushroom.myList[i] > myMushroom.maxGap)\n\t\t\t\t\t\t\t\tmyMushroom.maxGap = myMushroom.myList[i-1] - myMushroom.myList[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmyMushroom.answer1 = myMushroom.answer2 = 0;\n\t\t\t\t\tif (!myMushroom.activate){\n\t\t\t\t\t\tmyMushroom.answer1 = myMushroom.answer2 = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (i = 1; i < myMushroom.n; i++){\n\t\t\t\t\t\t\tif (myMushroom.myList[i-1] > myMushroom.myList[i]){\n\t\t\t\t\t\t\t\tmyMushroom.answer1 += (myMushroom.myList[i-1] - myMushroom.myList[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (myMushroom.myList[i-1] < myMushroom.maxGap){\n\t\t\t\t\t\t\t\tmyMushroom.answer2 += myMushroom.myList[i-1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmyMushroom.answer2 += myMushroom.maxGap;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmyInt = testcase;\n\t\t\t\t\tfout.write(\"Case #\"+myInt.toString()+\": \");\n\t\t\t\t\tmyInt = myMushroom.answer1;\n\t\t\t\t\tfout.write(myInt.toString()+\" \");\n\t\t\t\t\tmyInt = myMushroom.answer2;\n\t\t\t\t\tfout.write(myInt.toString());\n\t\t\t\t\tfout.newLine();\n\t\t\t\t}\n\t\t\t\tfin.close();\n\t\t\t\tfout.close();\n\t\t\t}catch (Exception e){\n\t\t\t\t\n\t\t\t}\r\n\t\t}catch (Exception e){\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}", "idx": "1511"}
{"func": "package googlejam1.p513;\nimport java.util.*;\r\n\r\npublic class MushroomMonster {\r\n  public static void main(String []args) {\r\n    Scanner in = new Scanner(System.in);\r\n    final int T = in.nextInt();\r\n    for (int i = 1; i <= T; i++) {\r\n      final int N = in.nextInt();\r\n      int []m = new int[N];\r\n      int prev = m[0] = in.nextInt();\r\n      int accDec = 0;\r\n      int maxDec = 0;\r\n      for (int j = 1; j < N; j++) {\r\n        int cur = m[j] = in.nextInt();\r\n        if (cur < prev) {\r\n          accDec += (prev - cur);\r\n          maxDec = Math.max(maxDec, prev - cur);\r\n        }\r\n        prev = cur;\r\n      }\r\n      int acc2Dec = 0;\r\n      for (int j = 0; j < N - 1; j++) {\r\n        acc2Dec += Math.min(maxDec, m[j]);\r\n      }\r\n      System.out.println(\"Case #\" + i + \": \" + accDec + \" \" + acc2Dec);\r\n    }\r\n    in.close();\r\n  }\r\n}", "idx": "1513"}
{"func": "package googlejam1.p515;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class ProblemASmall {\n\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\t\n\t\t\n//\t\tFile inf = new File(\"input.txt\");\n//\t\tFile inf = new File(\"A-small-attempt0.in\");\n\t\tFile inf = new File(\"A-large.in\");\n\t\tFile outf = new File(\"output.txt\");\n\t\tScanner scanner = new Scanner(inf);\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(outf));\n\t\tint caseNum = scanner.nextInt();\n\t\tfor (int i = 1; i <= caseNum; i++) {\n\t\t\tString outStr = \"Case #\" + i + \": \";\n\t\t\t// TODO Auto-generated method stub\n//\t\t\tint ans1 = 0;\n//\t\t\tint ans2 = 0;\n\t\t\tint N = scanner.nextInt();\n\t\t\tint[] list = new int [N];\n\t\t\tfor (int j = 0; j < list.length; j++) {\n\t\t\t\tlist[j] = scanner.nextInt();\n\t\t\t}\n\t\t\tBigInteger ans = new BigInteger(\"0\");\n\t\t\tfor (int i1 = 1; i1 < list.length; i1++) {\n\t\t\t\tif (list[i1] < list[i1-1]) {\n\t\t\t\t\tint num = list[i1-1] - list[i1];\n\t\t\t\t\tans = ans.add(new BigInteger(Integer.toString(num)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tBigInteger ans1 = ans;\n\t\t\tint maxInter = 0;\n\t\t\tfor (int i1 = 1; i1 < list.length; i1++) {\n\t\t\t\tif (list[i1] < list[i1-1] && list[i1-1] - list[i1] > maxInter) {\n\t\t\t\t\tmaxInter = list[i1-1] - list[i1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tBigInteger ans3 = new BigInteger(\"0\");\n\t\t\tfor (int i2 = 0; i2 < list.length-1; i2++) {\n\t\t\t\tint num = (list[i2]  < maxInter) ? list[i2] : maxInter;\n\t\t\t\tans3 = ans3.add(new BigInteger(Integer.toString(num)));\n\t\t\t\t\n\t\t\t}\n\t\t\tBigInteger ans2 = ans3;\n\t\t\toutStr += ans1 + \" \" + ans2;\n\t\t\tSystem.out.println(outStr);\n\t\t\tout.write(outStr + \"\\n\");\n\t\t}\n//\t\tin.close();\n\t\tscanner.close();\n\t\tout.close();\n\t}\n\n}\n", "idx": "1515"}
{"func": "package googlejam1.p517;\nimport java.util.Scanner;\r\n\r\npublic class MushroomMonster\r\n{\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint T = in.nextInt();\r\n\t\tfor (int tc = 1; tc <= T; tc++)\r\n\t\t{\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] a = new int[n];\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\ta[i] = in.nextInt();\r\n\t\t\tint r1 = 0, r2 = 0, maxd = 0;\r\n\t\t\tfor (int i = 0; i + 1 < n; i++)\r\n\t\t\t\tr1 += Math.max(0, a[i] - a[i + 1]);\r\n\t\t\tfor (int i = 0; i + 1 < n; i++)\r\n\t\t\t\tmaxd = Math.max(maxd, a[i] - a[i + 1]);\r\n\t\t\tfor (int i = 0; i + 1 < n; i++)\r\n\t\t\t\tr2 += Math.min(a[i], maxd);\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", tc, r1, r2);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1517"}
{"func": "package googlejam1.p518;\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tString filename = \"A-large.in\";\r\n\t\tString output = \"output.txt\";\r\n\t\tScanner scanner = null;\r\n\t\tPrintWriter printer = null;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tscanner = new Scanner(new FileReader(filename));\r\n\t\t\tprinter = new PrintWriter(new FileWriter(output));\r\n\t\t\t\r\n\t\t\tint tests = scanner.nextInt();\r\n\t\t\tfor (int test = 1; test <= tests; test++) {\r\n\t\t\t\t\r\n\t\t\t\t// Input\r\n\t\t\t\tint N = scanner.nextInt();\r\n\t\t\t\tint ini = scanner.nextInt();\r\n\t\t\t\tint[] obs = new int[N - 1];\r\n\t\t\t\tfor (int i = 0; i < N - 1; i++) {\r\n\t\t\t\t\tobs[i] = scanner.nextInt();\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tint a = 0;\r\n\t\t\t\tint b = 0;\r\n\t\t\t\t\r\n\t\t\t\tint running = ini;\r\n\t\t\t\tfor(int ob : obs) {\r\n\t\t\t\t\tif(ob < running) \r\n\t\t\t\t\t\ta += (running - ob);\r\n\t\t\t\t\trunning = ob;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tint max = 0;\r\n\t\t\t\tint runningb = ini;\r\n\t\t\t\tfor (int ob : obs) {\r\n\t\t\t\t\tmax = Math.max(max, runningb - ob);\r\n\t\t\t\t\trunningb = ob;\r\n\t\t\t\t}\r\n\t\t\t\trunningb = ini;\r\n\t\t\t\tfor (int i = 0; i < obs.length; i++) {\r\n\t\t\t\t\tint ob = obs[i];\r\n\t\t\t\t\tb += Math.min(max, runningb);\r\n\t\t\t\t\trunningb = ob;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//System.out.println(String.format(\"Case #%d: %d %d\", test, a, b));\r\n\t\t\t\tprinter.println(String.format(\"Case #%d: %d %d\", test, a, b));\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\tSystem.out.println(filename + \" not found.\");\r\n\t\t} catch(IOException e) {\r\n\t\t\tSystem.out.println(e.getMessage());\r\n\t\t} finally {\r\n\t\t\tif (scanner != null) {\r\n\t\t\t\tscanner.close();\r\n\t\t\t}\r\n\t\t\tif (printer != null) {\r\n\t\t\t\tprinter.flush();\r\n\t\t\t\tprinter.close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1518"}
{"func": "package googlejam1.p519;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\npublic class A {\n\n    Scanner             sc       = new Scanner(getClass().getResourceAsStream(IN));\n    static final String FILENAME = \"A-large\";\n    static final String IN       = FILENAME + \".in\";\n    static final String OUT      = FILENAME + \".out\";\n    PrintStream         out      = System.out;\n\n    public static void main(String args[]) throws Exception {\n        A r = new A();\n\t\tint t = r.sc.nextInt();\n\t\tfor (int i = 1; i <= t; i++) {\n\t\t    r.out.print(\"Case #\" + i + \": \");\n\t\t    int ans1 = 0, ans2 = 0;\n\t\t\tint n = r.sc.nextInt();\n\t\t\tint[] arr = new int[n];\n\t\t\tint maxDistance = 0;\n\t\t\tfor(int i1 = 0; i1 < arr.length; i1++) {\n\t\t\t    arr[i1] = r.sc.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i2 = 1; i2 < arr.length; i2++){\n\t\t\t    if (arr[i2-1] > arr[i2])\n\t\t\t    {\n\t\t\t        int distance = arr[i2-1] - arr[i2];\n\t\t\t\n\t\t\t        ans1 += distance;\n\t\t\t        if (distance > maxDistance) maxDistance = distance;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i3 = 0; i3 < arr.length-1; i3++){\n\t\t\t    ans2 += arr[i3] < maxDistance ? arr[i3] : maxDistance;\n\t\t\t}\n\t\t\t\n\t\t\t//ans2 = maxDistance * (arr.length - 1);\n\t\t\t\n\t\t\tr.out.println(ans1+\" \"+ans2);\n\t\t}\n\t\tr.sc.close();\n\t\tr.out.close();\n    }\n}", "idx": "1519"}
{"func": "package googlejam1.p523;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Mushroom\r\n{\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException\r\n\t{\r\n\t\tScanner in = new Scanner (new File (\"A-large.in\"));\r\n\t\tPrintWriter out = new PrintWriter (\"mushroomoutput\");\r\n\t\tint T = in.nextInt();\r\n\t\tfor (int test = 1; test<=T; test++)\r\n\t\t{\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tint [] m = new int [N];\r\n\t\t\tfor (int i=0; i<N; i++)\r\n\t\t\t{\r\n\t\t\t\tm[i]=in.nextInt();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong x=0;\r\n\t\t\tfor (int i=0; i<=N-2; i++)\r\n\t\t\t{\r\n\t\t\t\tif (m[i]>m[i+1])\r\n\t\t\t\t\tx+=m[i]-m[i+1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint maxIndex=0;\r\n\t\t\tfor (int i=1; i<=N-2; i++)\r\n\t\t\t{\r\n\t\t\t\tif (m[i]-m[i+1]>m[maxIndex]-m[maxIndex+1])\r\n\t\t\t\t\tmaxIndex=i;\r\n\t\t\t}\r\n\t\t\tint value = m[maxIndex]-m[maxIndex+1];\r\n\t\t\tlong y=0;\r\n\t\t\tif (value<=0)\r\n\t\t\t\ty=0;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor (int i=0; i<=N-2; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (m[i]>=value)\r\n\t\t\t\t\t\ty+=value;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\ty+=m[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.println(\"Case #\"+test+\": \"+x+\" \"+y);\r\n\t\t\t\r\n\t\t}\r\n\t\tout.close();\r\n\t\tin.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1523"}
{"func": "package googlejam1.p524;\nimport java.util.Scanner;\r\nimport java.util.HashMap;\r\nimport java.io.*;\r\n\r\npublic class Mushroom {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        Scanner scanner = new Scanner(System.in);\r\n        PrintWriter out = new PrintWriter(\"mushroom.out\");\r\n        \r\n        int numCases = Integer.parseInt(scanner.nextLine());\r\n        \r\n        for (int curCase = 1; curCase <= numCases; curCase++) {\r\n            int numIntervals = Integer.parseInt(scanner.nextLine());\r\n            \r\n            String[] intervalStr = scanner.nextLine().split(\" \");\r\n            int[] intervals = new int[numIntervals];\r\n            for (int i = 0; i < numIntervals; i++) {\r\n                intervals[i] = Integer.parseInt(intervalStr[i]);\r\n            }\r\n            \r\n            int minEatFree = 0;\r\n            int minEatConstant = 0;\r\n            \r\n            int maxDrop = 0;\r\n            \r\n            for (int i = 1; i < numIntervals; i++) {\r\n                int difference = intervals[i-1] - intervals[i];\r\n                minEatFree += Math.max(0, difference);\r\n                \r\n                maxDrop = Math.max(maxDrop, difference);\r\n            }\r\n            \r\n            for (int i = 0; i < numIntervals-1; i++) {\r\n                if (intervals[i] < maxDrop) {\r\n                    minEatConstant += intervals[i];\r\n                }\r\n                else {\r\n                    minEatConstant += maxDrop;\r\n                }\r\n            }\r\n            \r\n            out.println(\"Case #\" + curCase + \": \" + minEatFree + \" \" + minEatConstant);\r\n        }\r\n        scanner.close();\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "1524"}
{"func": "package googlejam1.p525;\nimport java.util.*;\nimport java.io.*;\npublic class A {\n\tpublic static void main(String... args) throws Exception{\n\t\t//System.out.println(Arrays.toString(args));\n\t\t//System.out.println(Arrays.toString(args));\n\t\tScanner sinput = new Scanner(new File(\"A-large.in\"));\n\t\t//Scanner input = new Scanner(new File(args[0]));\n\t\t//Scanner input = new Scanner(System.in);\n\t\tint numCases = sinput.nextInt();\n\t\t//System.out.printf(\"num=%d\\n\",numCases);\n\t\t//Scanner sinput = new Scanner(System.in);\n\t\tSystem.setOut(new PrintStream(\"alarge.out\"));//System.out.print\u306e\u51fa\u529b\u5148\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u3048\u308b\n\t\tfor (int n = 0; n < numCases; n++) {\n\t\t\tint N = sinput.nextInt();\n\t\t\t//System.out.printf(\"N=%d\\n\",N);\n\t\t\tint[] ps = new int[N];\n\t\t\tfor (int i = 0; i < N; i++){\n\t\t\t\tps[i] = sinput.nextInt();\n\t\t\t\t//System.out.printf(\"ps[i]=%d\\n\",ps[i]);\n\t\t\t}\n\t\t\tint a=0;\n\t\t\tint b=0;\n\t\t\tint dif=0;\n\t\t\tfor(int i=1;i<N;i++){\n\t\t\t\tif(dif<ps[i-1]-ps[i]) dif=ps[i-1]-ps[i];\t\n\t\t\t}\n\t\t\tfor(int i=1;i<N;i++){\n\t\t\t\tif(ps[i]<ps[i-1]) a+=ps[i-1]-ps[i];\n\t\t\t\tif(ps[i-1]<dif) b+=ps[i-1];\n\t\t\t\telse b+=dif;\n\t\t\t}\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", n + 1, a,b);\n\t\t}\n\t}\n}\n", "idx": "1525"}
{"func": "package googlejam1.p526;\nimport java.util.Scanner;\r\n\r\npublic class MushroomMonster {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        MushroomMonster algorithm = new MushroomMonster();\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        String testCaseNumber = scanner.nextLine();\r\n\r\n        int TEST_CASE_NUMBER = Integer.parseInt(testCaseNumber);\r\n\r\n        for (int testNumber = 1; testNumber <= TEST_CASE_NUMBER; testNumber++) {\r\n\r\n            String maxLine = scanner.nextLine();\n\t\t\t\n\t\t\tInteger max = Integer.parseInt(maxLine);\n\t\t\tString mushroomsLine = scanner.nextLine();\n\t\t\tString[] mushroomsString = mushroomsLine.split(\" \");\n\t\t\tint[] mushrooms = new int[max];\n\t\t\t\n\t\t\tfor (int i = 0; i < max; i++) {\n\t\t\t    mushrooms[i] = Integer.parseInt(mushroomsString[i]);\n\t\t\t}\n\t\t\t\n\t\t\tint firstMethod = 0;\n\t\t\t// first method\n\t\t\tfor (int i = 0; i < max - 1; i++) {\n\t\t\t    int temp = mushrooms[i] - mushrooms[i + 1];\n\t\t\t    if (temp > 0) {\n\t\t\t        firstMethod += temp;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\t// second method\n\t\t\tint eatenPerSecond = 0;\n\t\t\tfor (int i = 0; i < max - 1; i++) {\n\t\t\t    int temp = mushrooms[i] - mushrooms[i + 1];\n\t\t\t    if (temp > eatenPerSecond) {\n\t\t\t        eatenPerSecond = temp;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tint secondMethod = 0;\n\t\t\tfor (int i = 0; i < max - 1; i++) {\n\t\t\t    if (mushrooms[i] - eatenPerSecond >= 0) {\n\t\t\t        secondMethod += eatenPerSecond;\n\t\t\t    } else {\n\t\t\t        secondMethod += mushrooms[i];\n\t\t\t    }\n\t\t\t}\n\t\t\tString answer = String.valueOf(firstMethod + \" \" + secondMethod);\r\n\r\n            System.out.println(\"Case #\" + testNumber + \": \" + answer);\r\n        }\r\n\r\n        scanner.close();\r\n    }\r\n}\r\n", "idx": "1526"}
{"func": "package googlejam1.p528;\nimport java.io.*;\r\nimport java.awt.*;\r\nimport java.util.*;\r\npublic class ProblemA\r\n{\r\n  public static void main (String [] args) throws Exception\r\n  {\r\n    Scanner in = new Scanner (new FileReader (\"A-large.in\"));\r\n    PrintWriter out = new PrintWriter (new FileWriter (\"out.txt\"));\r\n    int cases = in.nextInt ();\r\n    in.nextLine();\r\n    for (int x = 0; x < cases; x++)\r\n    {\r\n      int intervals = in.nextInt();\r\n      int [] mushrooms = new int [intervals];\r\n      for (int m = 0; m < intervals; m++)\r\n      {\r\n        mushrooms [m] = in.nextInt();\r\n      }\r\n      int minMush1 = 0;\r\n      for (int m = 1; m < intervals; m++)\r\n      {\r\n        if (mushrooms [m] < mushrooms [m-1])\r\n        {\r\n          minMush1 += (mushrooms [m-1]- mushrooms [m]);\r\n        }\r\n      }\r\n      int minMush2 = 0;\r\n      int maxDiff = 0;\r\n      for (int m = 1; m < intervals; m++)\r\n      {\r\n        if ((mushrooms [m-1] - mushrooms [m]) > maxDiff)\r\n        {\r\n          maxDiff = mushrooms [m-1] - mushrooms [m];\r\n        }\r\n      }\r\n      for (int m = 0; m < intervals - 1; m++)\r\n      {\r\n        if (mushrooms [m] >= maxDiff)\r\n          minMush2 += maxDiff;\r\n        else\r\n          minMush2 += mushrooms [m];\r\n      }\r\n      out.println (\"Case #\" + (x+1) + \": \" + minMush1 + \" \" + minMush2);\r\n    }\r\n    out.close();\r\n  }\r\n}", "idx": "1528"}
{"func": "package googlejam1.p529;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemA {\r\n\tpublic static void main(String[] args){\r\n\t\ttry {\n\t\t\tString input = \"C:\\\\Users\\\\Qin\\\\Desktop\\\\A-large.in\";\n\t\t\tString output = \"C:\\\\Users\\\\Qin\\\\Desktop\\\\A-large.out\";\n\t\t\tFileInputStream fis= new FileInputStream(input);\n\t\t\tFileWriter fw = new FileWriter(output);\n\t\t\tScanner sc = new Scanner(fis);\n\t\t\t\n\t\t\tint num = sc.nextInt();\n\t\t\tSystem.out.println(num);\n\t\t\tfor(int i = 0; i < num; i++){\n\t\t\t\tint N = sc.nextInt();\n\t\t\t\tint[] M = new int[N];\n\t\t\t\tint m = 0, y = 0, z = 0;\n\t\t\t\tint max = 0;\n\t\t\t\t\n\t\t\t\tfor(int j = 0; j < N; j++)\n\t\t\t\t\tM[j] = sc.nextInt();\n\t\t\n\t\t\t\tfor(int j = 1; j < N; j++){\n\t\t\t\t\tif(M[j - 1] > M[j]){\n\t\t\t\t\t\tif((M[j - 1] - M[j]) > max)\n\t\t\t\t\t\t\tmax = M[j - 1] - M[j];\n\t\t\t\t\t\ty = y + (M[j - 1] - M[j]);\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int j = 0; j < N - 1; j++){\n\t\t\t\t\tif(M[j] <= max){\n\t\t\t\t\t\tz = z + M[j];\n\t\t\t\t\t}else{\n\t\t\t\t\t\tz = z + max;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfw.write(\"Case #\" + (i + 1) + \": \" + y + \" \" + z + \"\\r\\n\");\n\t\t\t\t\n\t\t\t}\n\t\t\tfis.close();\n\t\t\tfw.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\r\n\t}\r\n\t\r\n\r\n}\r\n", "idx": "1529"}
{"func": "package googlejam1.p530;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\npublic class A {\n\tprivate static final String FILE_NAME = \"A-large\";\n\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tScanner in = new Scanner(new File(FILE_NAME + \".in\"));\n\t\tPrintStream out = new PrintStream(new File(FILE_NAME + \".out\"));\n\t\tint loopNum = in.nextInt();\n\n\t\tfor (int caseNum = 1; caseNum <= loopNum; caseNum++) {\n\t\t\tout.print(\"Case #\" + caseNum + \": \");\n\t\t\tint n = in.nextInt();\n\t\t\tint method1 = 0, method2 = 0;\n\t\t\tint max = 0;\n\t\t\tint[] arr = new int[n];\n\t\t\tarr[0] = in.nextInt();\n\t\t\tfor (int i = 1; i < n; ++i) {\n\t\t\t\tarr[i] = in.nextInt();\n\t\t\t\tint diff = Math.max(0, arr[i - 1] - arr[i]);\n\t\t\t\tmethod1 += diff;\n\t\t\t\tmax = Math.max(max, diff);\n\t\t\t}\n\t\t\tfor (int i = 0; i < n - 1; ++i) {\n\t\t\t\tmethod2 += Math.min(arr[i], max);\n\t\t\t}\n\t\t\tout.print(method1 + \" \" + method2);\n\t\t\tout.println();\n\t\t}\n\n\t\tin.close();\n\t\tout.close();\n\t}\n}\n", "idx": "1530"}
{"func": "package googlejam1.p533;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class mushrooms {\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Scanner in = new Scanner(new File(\"A-large (1).in\"));\r\n\r\n        int t = in.nextInt();\r\n\r\n        for (int caseNum = 1; caseNum <= t; caseNum++) {\r\n            int intervals = in.nextInt();\r\n            int method1 = 0, method2 = 0;\r\n\r\n            int[] mushrooms = new int[intervals];\r\n\r\n            for (int i = 0; i < intervals; i++) {\r\n                mushrooms[i] = in.nextInt();\r\n            }\n\t\t\tint rate = Integer.MIN_VALUE;\n\t\t\t\n\t\t\tfor (int i1 = 1; i1 < mushrooms.length; i1 ++) {\n\t\t\t    rate = Math.max(rate, mushrooms[i1 - 1] - mushrooms[i1]);\n\t\t\t}\r\n\r\n            int maxRate = rate;\r\n\r\n            for (int i = 1; i < intervals; i++) {\r\n                method1 += Math.max(0, mushrooms[i - 1] - mushrooms[i]);\r\n                method2 += Math.min(maxRate, mushrooms[i - 1]);\r\n            }\r\n\r\n            System.out.println(\"Case #\" + caseNum + \": \" + method1 + \" \" + method2);\r\n        }\r\n    }\r\n}\r\n", "idx": "1533"}
{"func": "package googlejam1.p536;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\n\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\n\r\npublic class Main {\r\n\r\n\tstatic StringBuilder out;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader in = new BufferedReader(new FileReader(\"input.in\"));\r\n\t\tout = new StringBuilder();\r\n\t\tLong start = System.currentTimeMillis();\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\t\r\n\t\tfor(int t=0; t<T; t++)\r\n\t\t{\r\n\t\t\tint N = Integer.parseInt(in.readLine());\r\n\t\t\tString[] line = in.readLine().split(\" \");\r\n\t\t\tint[] nums = new int[N];\r\n\t\t\tfor(int n=0; n<N; n++)\r\n\t\t\t{\r\n\t\t\t\tnums[n] = Integer.parseInt(line[n]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint sumA = 0;\r\n\t\t\tint sumB = 0;\r\n\t\t\tint maxGap = 0;\r\n\t\t\tint[] gaps = new int[N];\r\n\t\t\t\r\n\t\t\tfor(int n=1; n<N; n++)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tgaps[n] = nums[n-1]-nums[n];\r\n\t\t\t\t\r\n\t\t\t\tif(nums[n]< nums[n-1])\r\n\t\t\t\t{\r\n\t\t\t\t\t//handle first case\r\n\t\t\t\t\tsumA+= gaps[n];\r\n\t\t\t\t}\r\n\t\t\t\t//prep for second case\r\n\t\t\t\t \r\n\t\t\t\tif(gaps[n] > maxGap)\r\n\t\t\t\t{\r\n\t\t\t\t\tmaxGap = gaps[n]; \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int n=0; n<N-1; n++)\r\n\t\t\t{\r\n\t\t\t\tsumB += Math.min(maxGap, nums[n]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tout.append(\"Case #\");\r\n\t\t\tout.append((t+1));\r\n\t\t\tout.append(\": \");\r\n\t\t\tout.append(sumA);\r\n\t\t\tout.append(\" \");\r\n\t\t\tout.append(sumB);\r\n\t\t\tout.append(\"\\r\\n\");\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tBufferedWriter fOut = new BufferedWriter(new FileWriter(\"output.txt\"));\r\n\t\tfOut.write(out.toString());\r\n\t\tfOut.close();\r\n\t\tLong end = System.currentTimeMillis();\r\n\t\tSystem.out.println(\"Time: \" + (end-start));\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1536"}
{"func": "package googlejam1.p538;\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tScanner in = new Scanner(new File(\"A.in\"));\r\n\t\tFileWriter out = new FileWriter(\"aout.txt\");\r\n\t\t\r\n\t\tint T = in.nextInt();\r\n\t\t\r\n\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tint[] m = new int[N];\r\n\t\t\tint min1 = 0;\r\n\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\tm[j] = in.nextInt();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int j = 1; j < N; j++) {\r\n\t\t\t\tmin1 += (m[j] < m[j-1]) ? m[j - 1] - m[j] : 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint minRate = 0;\r\n\t\t\tfor (int j = 1; j < N; j++) {\r\n\t\t\t\tminRate = Math.max(minRate, m[j-1] - m[j]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint min2 = 0;\r\n\t\t\tfor (int j = 0; j < N - 1; j++) {\r\n\t\t\t\tmin2 += Math.min(m[j], minRate);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tout.write(\"Case #\" + i + \": \" + min1 + \" \" + min2 + \"\\n\");\r\n\t\t\tSystem.out.print(\"Case #\" + i + \": \" + min1 + \" \" + minRate + \"\\n\");\r\n\t\t\tSystem.out.print(\"Case #\" + i + \": \" + min1 + \" \" + min2 + \"\\n\");\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1538"}
{"func": "package googlejam1.p544;\nimport java.io.*;\nimport java.util.*;\n\npublic class a {\n\tpublic static void main(String[] args) {\n        final String inputFile = \"A-large\";\n        Scanner sc = null;\n        PrintWriter pw = null;\n        \n        try {\n            int n = 0;\n            int plates = 0;\n            String[] vals;\n            \n            sc = new Scanner(new FileReader(inputFile + \".in\"));\n            pw = new PrintWriter(new FileWriter(inputFile + \".out\"));\n            n = Integer.parseInt(sc.nextLine());\n            \n            for(int id = 1; id <= n; id++){\n                \n                plates = Integer.parseInt(sc.nextLine());\n                \n                vals = sc.nextLine().split(\" \");\n                \n                int a,b = 0;\n                int minA = 0;\n                int minDiff = 0;\n                int diff = 0;\n                \n                for(String s : vals) {\n                    a = b;\n                    b = Integer.parseInt(s);\n                    if(b < a) {\n                        diff = a-b;\n                        minA += diff;\n                        if(diff > minDiff) {\n                            minDiff = diff;\n                        }\n                    }\n                }\n                b = 0;\n                int minB = 0;\n                for(String s : vals) {\n                    b = Integer.parseInt(s);\n                    if(b < minDiff) {\n                        minB += b;\n                    }\n                    else {\n                        minB += minDiff;\n                    }\n                }\n                if(b < minDiff)\n                    minB -= b;\n                else\n                    minB -= minDiff;\n                \n                pw.print(\"Case #\" + id + \": \" + minA + \" \" + minB);\n                \n                pw.print(\"\");\n                \n                pw.println();\n            }\n        }\n        catch (Exception e) {\n\t\t\tSystem.out.println(\"Invalid Arguments!\");\n\t\t}\n        finally {\n            if (pw != null) { \n                pw.flush();\n                pw.close(); \n            } \n            if (sc != null) {\n                sc.close();\n            }\n        } \n\t}\n}", "idx": "1544"}
{"func": "package googlejam1.p545;\nimport java.util.*;\nimport java.io.*;\n\npublic class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(\n                        System.in\n                        )));\n        int T = sc.nextInt();\n        for (int t = 1; t <= T; t++) {\n            int N = sc.nextInt();\n            int[] m = new int[N];\n            for (int i = 0; i < N; i++) {\n                m[i] = sc.nextInt();\n            }\n\n            int rate = 0;\n            for (int i = 1; i < N; i++) {\n                int diff = m[i-1] - m[i];\n                if (diff > rate) {\n                    rate = diff;\n                }\n            }\n\n            int c1 = 0, c2 = (m[0] < rate) ? m[0] : rate;\n\n            for (int i = 1; i < N; i++) {\n                if (m[i] < m[i-1]) {\n                    c1 += m[i-1] - m[i];\n                }\n                if (i < N - 1) c2 += (m[i] < rate) ? m[i] : rate;\n            }\n\n            System.out.printf(\"Case #%d: %d %d\\n\", t, c1, c2);\n        }\n    }\n}\n", "idx": "1545"}
{"func": "package googlejam1.p546;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\n\r\npublic class MushroomMonster {\r\n\tpublic static void main(String[] args) {\r\n\t\tString fileAddress = \"C:\\\\Users\\\\di\\\\Documents\\\\googleCodeJam\\\\A-large.in\";\r\n\t\ttry {\r\n\t\t\tFileInputStream fstream = new FileInputStream(fileAddress);\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(fstream));\n\t\t\t\n\t\t\tPrintWriter writer = new PrintWriter(\"C:\\\\Users\\\\di\\\\Documents\\\\googleCodeJam\\\\A-output-2.txt\", \"UTF-8\");\n\t\t\t\n\t\t\tString strLine;\n\t\t\tint i = 0;\n\t\t\twhile ((strLine = br.readLine()) != null) {\n\t\t\t\tString[] strs = strLine.split(\" \");\n\t\t\t\tif(strs.length < 2) continue;\n\t\t\t\t\n\t\t\t\ti++;\n\t\t\t\tint res_m1 = 0;\n\t\t\t\tint res_m2 = 0;\n\t\t\t\tint max_diff = 0;\n\t\t\t\tfor(int j=0; j<strs.length-1; j++) {\n\t\t\t\t\tint pre = Integer.parseInt(strs[j]);\n\t\t\t\t\tint nex = Integer.parseInt(strs[j+1]);\n\t\t\t\t\t\n\t\t\t\t\tif(nex < pre) {\n\t\t\t\t\t\tint diff = pre - nex;\n\t\t\t\t\t\tres_m1 += diff;\n\t\t\t\t\t\tif(diff > max_diff) max_diff = diff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int j=0; j<strs.length-1; j++) {\n\t\t\t\t\tint cur = Integer.parseInt(strs[j]);\n\t\t\t\t\tif(cur > max_diff) res_m2 += max_diff;\n\t\t\t\t\telse res_m2 += cur;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twriter.println(\"Case #\" + i + \": \" + res_m1 + \" \" + res_m2);\n\t\t\t}\n\t\t\t\n\t\t\twriter.close();\n\t\t\tbr.close();\n\t\t\tfstream.close();\r\n\t\t} catch (Exception e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "idx": "1546"}
{"func": "package googlejam1.p553;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileWriter;\r\nimport java.io.InputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Mushroom {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\tArrayList<String> TestCases;\r\n\t\t\r\n\t\tTestCases = new ArrayList<String>();\r\n\t\t\r\n\t\tString fileName = \"C:\\\\dev\\\\projects\\\\R1_Mushroom\\\\src\\\\gcj\\\\Example.txt\";\r\n\t\t\r\n\t\ttry \r\n\t\t{\r\n\t\t\tInputStream in = new FileInputStream(new File(fileName));\r\n\t\t\tScanner reader = new Scanner(in);\r\n\t        \r\n\r\n\t        int cntTests = reader.nextInt();\r\n\t        \r\n\t        for (int i = 0; i<cntTests; i++) \r\n\t        {\r\n\t        \tint n = reader.nextInt();\r\n\t        \tArrayList<Integer> moments = new ArrayList<Integer> ();\r\n\t        \tint max = -1;\r\n\t        \tfor (int j = 0; j < n; j++) {\r\n\t        \t\tmoments.add(reader.nextInt());\r\n\t        \t\t\r\n\t        \t}\r\n\t        \t\r\n\t        \tlong total_eaten1 = 0;\r\n\t        \tint max_max = moments.get(0);\r\n\t        \t\r\n\t        \tfor (int j = 0; j < n-1; j++) {\r\n\t        \t\tint eaten_at_moment = moments.get(j) - moments.get(j+1);\r\n\t        \t\t\r\n\t        \t\tif (eaten_at_moment > 0) {\r\n\t        \t\t\ttotal_eaten1 = total_eaten1 + eaten_at_moment;\r\n\t        \t\t}\r\n\t        \t\t\r\n\t        \t\tif (eaten_at_moment > max) {\r\n\t        \t\t\tmax = eaten_at_moment;\r\n\t        \t\t}\r\n\t        \t\t\r\n\t        \t}\r\n\t\t        \r\n\t        \t\r\n\t        \tlong total_eaten2 = 0;\r\n\t        \t\r\n\t        \t//if (max > max_max) max = max_max;\r\n\t        \t\r\n\t        \tfor (int j = 0; j < n-1; j++) {\r\n\t        \t\t\r\n\t        \t\t\r\n\t        \t\tif (moments.get(j) < max) {\r\n\t        \t\t\ttotal_eaten2 = total_eaten2 + moments.get(j);\r\n\t        \t\t} else {\r\n\t        \t\t\ttotal_eaten2 = total_eaten2 + max;\r\n\t        \t\t}\r\n\t        \t\t\r\n\t        \t\t\r\n\t        \t}\r\n\t        \t\r\n\t        \tTestCases.add(total_eaten1 + \" \" + total_eaten2);\r\n\t        }\r\n\t         \r\n\t        reader.close();\r\n\t\t} catch (Exception ex)\t{\r\n\t\t\tSystem.out.print(ex.getMessage());\r\n\t\t}\r\n\t\t\r\n\t\tString outFileName = \"C:\\\\dev\\\\projects\\\\R1_Mushroom\\\\src\\\\gcj\\\\output.txt\";\n\t\ttry { \n\t\tFile file = new File(outFileName);\n\t\tBufferedWriter output = new BufferedWriter(new FileWriter(file));\n\t\tfor (int i =0; i < TestCases.size(); i++) {\n\t\t\toutput.write(\"Case #\" + (i+1) + \": \" + TestCases.get(i) + \"\\r\\n\");\n\t\t}\n\t\t\n\t\toutput.close();\n\t\t} catch ( Exception e ) {\n\t\t\te.printStackTrace();\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1553"}
{"func": "package googlejam1.p554;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\n/**\r\n * Created by cheto on 4/17/2015.\r\n */\r\npublic class Mushroom {\r\n    public static void main(String[] args) throws Exception {\r\n        BufferedReader reader = new BufferedReader(new FileReader(args[0]));\r\n        BufferedWriter writer = new BufferedWriter(new FileWriter(args[0].substring(0, args[0].length() - 2) + \"out\"));\r\n        int testCases = Integer.parseInt(reader.readLine());\r\n        System.out.println(\"Test cases: \" + testCases);\r\n        for (int test = 0; test < testCases; test++) {\r\n            int n = Integer.parseInt(reader.readLine());\r\n            String[] splitLine = reader.readLine().split(\" \");\r\n            int case1 = 0;\r\n            int case2 = 0;\r\n            int maxEat = 0;\r\n            for (int i = 0; i < n - 1; i++) {\r\n                if (Integer.parseInt(splitLine[i]) > Integer.parseInt(splitLine[i + 1])) {\r\n                    int eat = Integer.parseInt(splitLine[i]) - Integer.parseInt(splitLine[i + 1]);\r\n                    case1 += eat;\r\n                    maxEat = maxEat < eat ? eat : maxEat;\r\n                }\r\n            }\r\n\r\n            for (int i = 0; i < n - 1; i++) {\r\n                if (Integer.parseInt(splitLine[i]) < maxEat) {\r\n                    case2 += Integer.parseInt(splitLine[i]);\r\n                }else{\r\n                    case2 += maxEat;\r\n                }\r\n            }\r\n            writer.write(\"Case #\"+(test+1)+\": \"+case1+\" \"+case2+\"\\n\");\r\n            System.out.println(\"Case #\" + (test + 1) + \": \" + case1 + \" \" + case2+\"\\n\");\r\n        }\r\n        reader.close();\r\n        writer.flush();\r\n        writer.close();\r\n    }\r\n}\r\n", "idx": "1554"}
{"func": "package googlejam1.p556;\n\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tFileReader in = new FileReader(\"in.in\");\n\t\tFile out = new File(\"out.out\");\n\t\tBufferedReader reader = new BufferedReader(in);\n\t\tPrintWriter writer = new PrintWriter(out);\n\t\t\n\t\tint test = Integer.parseInt(reader.readLine());\n\t\t\n\t\tfor(int i=1; i<=test; i++){\n\t\t\tint n = Integer.parseInt(reader.readLine());\n\t\t\tString[] data = reader.readLine().split(\"\\\\s\");\n\t\t\t\n\t\t\tint t = Integer.parseInt(data[0]);\n\t\t\tint min1 = 0;\n\t\t\tint min2 = 0;\n\t\t\t\n\t\t\tint maxDif = 0;\n\t\t\tint[] numbers = new int[n];\n\t\t\tnumbers[0] = t;\n\t\t\tfor(int j=1; j<n; j++){\n\t\t\t\tint temp = Integer.parseInt(data[j]);\n\t\t\t\tnumbers[j] = temp;\n\t\t\t\t\n\t\t\t\tif(t > temp)\n\t\t\t\t\tmin1 +=  t - temp;\n\t\t\t\t\n\t\t\t\tif(t - temp > maxDif)\n\t\t\t\t\tmaxDif = t - temp;\n\t\t\t\t\n\t\t\t\tt = temp;\n\t\t\t}\n\t\t\t\n\t\t\tif(numbers[0] > maxDif)\n\t\t\t\tmin2 = maxDif;\n\t\t\telse\n\t\t\t\tmin2 = numbers[0];\n\t\t\t\n\t\t\tfor(int j=1; j<n-1; j++){\n\t\t\t\tif(numbers[j] > maxDif)\n\t\t\t\t\tmin2+=maxDif;\n\t\t\t\telse\n\t\t\t\t\tmin2+=numbers[j];\n\t\t\t}\n\t\t\n\t\t\n\t\t\twriter.print(\"Case #\");\n\t\t\twriter.print(i);\n\t\t\twriter.print(\": \");\n\t\t\twriter.print(min1);\n\t\t\twriter.print(\" \");\n\t\t\twriter.println(min2);\n\t\t}\n\t\n\t\treader.close();\n\t\twriter.close();\n\n\t}\n\n}\n", "idx": "1556"}
{"func": "package googlejam1.p557;\nimport java.io.BufferedReader;\r\nimport java.io.DataInputStream;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\n\r\npublic class chain {\r\n   static String s1;\r\n\t public static void main(String[] args) throws IOException {\r\n   \t File infile=new File(\"small.txt\");\r\n\t FileInputStream fis=new FileInputStream(infile);\r\n\t DataInputStream inp=new DataInputStream(fis);\r\n\r\n\t PrintWriter out=new PrintWriter(\"output.txt\");\r\n        int t = Integer.parseInt(inp.readLine().trim());\r\n         int i=0;\r\n         long sum1=0,sum2=0;\r\n         for(i=1;i<=t;i++){\r\n        \t int max=0;\r\n        \t sum1=0;\r\n        \t sum2=0;\r\n        \tint y= Integer.parseInt(inp.readLine().trim());\r\n        String  s[]=inp.readLine().split(\" \");\r\n       int a[]=new int[y];\r\n       int j=0;\r\n       for(j=0;j<y;j++){\r\n    \t   a[j]=Integer.parseInt(s[j]);\r\n       }\r\n      for(j=0;j<y-1;j++){\r\n    \t  if(a[j]>a[j+1]){\r\n    \t\t  sum1=sum1+(a[j]-a[j+1]);\r\n    \t  }\r\n    \t  if(a[j]-a[j+1]>max)\r\n    \t\t  max=a[j]-a[j+1];\r\n      }\r\n      for(j=0;j<y-1;j++){\r\n    \t  if(a[j]>max)\r\n    \t\t  sum2=sum2+max;\r\n    \t  else\r\n    \t\t  sum2=sum2+a[j];\r\n      }\r\n        out.print(\"Case #\"+i+\": \"+sum1+\" \"+sum2);\r\n        out.println(\"\");\r\n     \r\n    }\r\n         inp.close();\r\n         out.close();}\r\n \r\n\r\n    static BufferedReader br = new BufferedReader(new InputStreamReader(\r\n            System.in));\r\n    private static String s[], w, q;\r\n\r\n}", "idx": "1557"}
{"func": "package googlejam1.p558;\nimport java.util.*;\nimport java.io.*;\npublic class Gcj {\n  private int T;\n  private BufferedReader buff;\n  private int[] mashrooms;\n  final static private boolean IS_DEBUG=false;\n\n  Gcj(){\n    buff=new BufferedReader(new InputStreamReader(System.in));\n    try{\n      T=Integer.parseInt(buff.readLine());\n    }\n    catch(Exception e){\n      System.err.println(e);\n    }\n  }\n\n  public static final void main(final String[] args) {\n    Gcj r = new Gcj();\n\tfor(int i=0; i<r.T; i++){\n\t  System.out.print(String.format(\"Case #%d: \", i+1));\n\t  try{\n\t  // INIT VARIABLES HERE\n\t  r.mashrooms=new int[Integer.parseInt(r.buff.readLine())];\n\t  String[] line=r.buff.readLine().split(\" \");\n\t  for(int i1=0; i1<r.mashrooms.length; i1++) r.mashrooms[i1]=Integer.parseInt(line[i1]);\n\t  if(Gcj.IS_DEBUG){\n\t  System.err.println(\"\\n\"+\"debug: \"+\"show args\");\n\t  System.err.format(\"       \"+\"mashrooms=%s\\n\", Arrays.toString(r.mashrooms));\n\t}\n\t}\n\tcatch(Exception e){\n\t  System.err.println(e);\n\t}\n\t  int res=0;\n\tfor(int i2=0; i2<r.mashrooms.length-1; i2++)\n\t  if(r.mashrooms[i2]>r.mashrooms[i2+1]) res+=r.mashrooms[i2]-r.mashrooms[i2+1];\n\tSystem.out.print(res+\" \");\n\tint res1=0;\n\tint rate=0;\n\tfor(int i1=0; i1<r.mashrooms.length-1; i1++){\n\t  int diff=r.mashrooms[i1]-r.mashrooms[i1+1];\n\t  if(diff>rate) rate=diff;\n\t}\n\t// System.out.println(\"rate=\"+rate);\n\tfor(int i3=0; i3<r.mashrooms.length-1; i3++){\n\t  res1+=(r.mashrooms[i3]>rate)?rate:r.mashrooms[i3];\n\t}\n\tSystem.out.println(res1);\n\t}\n    return;\n  }\n}\n", "idx": "1558"}
{"func": "package googlejam1.p560;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class MushroomMonster {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner in = new Scanner(new File(\"src/in.txt\"));\r\n\t\tPrintWriter out = new PrintWriter(\"out.txt\");\r\n\r\n\t\tint t = in.nextInt();\r\n\r\n\t\tfor (int tc = 1; tc <= t; tc++) {\r\n\t\t\tint n = in.nextInt();\r\n\r\n\t\t\tint[] m = new int[n];\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tm[i] = in.nextInt();\r\n\t\t\t}\r\n\r\n\t\t\tint y = 0;\r\n\t\t\tint dif = 0;\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\tif (m[i] < m[i - 1]) {\r\n\t\t\t\t\ty += Math.abs(m[i] - m[i - 1]);\r\n\t\t\t\t\tif (Math.abs(m[i] - m[i-1]) > dif) {\r\n\t\t\t\t\t\tdif = Math.abs(m[i] - m[i-1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tdouble rate = (double) dif / (double) 10;\r\n\t\t\t\r\n\t\t\tint z = 0;\r\n\t\t\tfor (int i = 0; i < n-1; i++) {\r\n\t\t\t\tz += Math.min(m[i], rate * 10);\r\n\t\t\t}\r\n\r\n\t\t\tout.println(\"Case #\" + tc + \": \" + y + \" \" + z);\r\n\t\t}\r\n\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "1560"}
{"func": "package googlejam1.p562;\n\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class FirstProb {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\ttry (Scanner scanner = new Scanner(\n\t\t\t\tnew File(\"/Users/bbaker/Documents/practice/round1A2015/a/A-large.in\"));\n\t\t\t\tWriter writer = new BufferedWriter(new OutputStreamWriter(\n\t\t\t\t\t\tnew FileOutputStream(\"/Users/bbaker/Documents/practice/round1A2015/a/A-large.out\"), \"utf-8\"))) {\n\t\t\tint t = scanner.nextInt();\n\t\t\tfor (int i = 1; i <= t; ++i) {\n\t\t\t\tint n = scanner.nextInt();\n\t\t\t\t\n\t\t\t\tArrayList<Long> mushrooms = new ArrayList<>(n);\n\t\t\t\tfor (int j = 0; j < n; ++j) {\n\t\t\t\t\tmushrooms.add(scanner.nextLong());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlong y = 0;\n\t\t\t\tlong prev = mushrooms.get(0);\n\t\t\t\tfor (int j = 1; j < n; ++j) {\n\t\t\t\t\tlong current = mushrooms.get(j);\n\t\t\t\t\tlong diff = prev - current;\n\t\t\t\t\tif (diff > 0) {\n\t\t\t\t\t\ty += diff;\n\t\t\t\t\t}\n\t\t\t\t\tprev = current;\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\tprev = mushrooms.get(0);\n\t\t\t\tlong maxDiff = 0;\n\t\t\t\tfor (int j = 1; j < n; ++j) {\n\t\t\t\t\tlong current = mushrooms.get(j);\n\t\t\t\t\tlong diff = prev - current;\n\t\t\t\t\tif (diff > maxDiff) {\n\t\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\t}\n\t\t\t\t\tprev = current;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlong z = 0;\n\t\t\t\tfor (int j = 0; j < n - 1; ++j) {\n\t\t\t\t\tlong current = mushrooms.get(j);\n\t\t\t\t\tlong diff = current - maxDiff;\n\t\t\t\t\tif (diff  >= 0) {\n\t\t\t\t\t\tz += maxDiff;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz += (maxDiff - Math.abs(diff));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twriter.write(\"Case #\" + i + \": \" + y + \" \" + z + \"\\n\");\n\t\t\t}\n\t\t}\n\t}\n}\n", "idx": "1562"}
{"func": "package googlejam1.p563;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.ArrayList;\r\n\r\npublic class Mushrooms {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// IO\r\n\t\tBufferedReader br = new BufferedReader(\r\n\t\t\t\tnew FileReader(new File(args[0])));\r\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\r\n\t\t\t\tnew FileOutputStream(new File(args[1]))));\r\n\r\n\t\t// Solve\r\n\t\tint testCases = Integer.parseInt(br.readLine());\r\n\t\t\r\n\t\tfor (int i = 0; i < testCases; ++i) {\r\n\t\t\tint totalTime = Integer.parseInt(br.readLine());\r\n\t\t\tString[] mushroormNumbers = br.readLine().split(\"\\\\s+\");\r\n\r\n\t\t\tint[] coockiesNumbers = new int[totalTime];\r\n\t\t\t\r\n\t\t\tint totalEaten = 0;\r\n\t\t\t\r\n\t\t\tdouble maxRate = 0;\r\n\t\t\tint current = Integer.parseInt(mushroormNumbers[0]);\r\n\t\t\tcoockiesNumbers[0] = current;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor (int time = 1; time < totalTime; ++time) {\r\n\t\t\t\tint newNum = Integer.parseInt(mushroormNumbers[time]);\r\n\t\t\t\tcoockiesNumbers[time] = newNum;\r\n\t\t\t\tif (current > newNum) {\r\n\t\t\t\t\ttotalEaten += current - newNum;\r\n\t\t\t\t\tmaxRate = new Double(Math.max(maxRate, (current - newNum) / 10.0));\r\n\t\t\t\t}\r\n\t\t\t\tcurrent = newNum;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tdouble totalEatenB = 0;\r\n\t\t\tcurrent = coockiesNumbers[0];\r\n\t\t\tfor (int time = 1; time < totalTime; ++time) {\r\n\t\t\t\tint newNum =  coockiesNumbers[time];\r\n\t\t\t\ttotalEatenB += Math.min(maxRate * 10, current);\r\n\t\t\t\tcurrent = newNum;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twriter.append(\"Case #\" + (i + 1) + \": \" + totalEaten + \" \" + new Double(totalEatenB).intValue() + \"\\n\");\r\n\t\t}\r\n\r\n\t\twriter.close();\r\n\t\tbr.close();\r\n\t}\r\n}\r\n", "idx": "1563"}
{"func": "package googlejam1.p566;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class ProblemA {\n\t\n\tprivate static String inputFilePath = \"/home/chiwang/Downloads/CodeJam/A-large.in\";\n\tprivate static String outputFilePath = \"/home/chiwang/Downloads/CodeJam/Solution/\";\n\tprivate static BufferedReader br;\n\tprivate static BufferedWriter bw;\n\t\n\tprivate static int[] plate;\n\tprivate static int N;\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\t// Initialisation\n\t\ttry {\n\t\t\toutputFilePath += inputFilePath.substring(inputFilePath.lastIndexOf(\"/\") + 1, inputFilePath.length() - 3) + \".out\";\n\t\t\t\n\t\t\tbr = new BufferedReader(new FileReader(inputFilePath));\n\t\t\tbw = new BufferedWriter(new FileWriter(outputFilePath));\n\t\t\t\n\t\t\tfinal int T = Integer.parseInt(br.readLine());\n\t\t\t\n\t\t\tfor (int caseNum = 1; caseNum <= T; caseNum++) {\t\t\n\t\t\t\t/*\n\t\t\t\t * Fill in the implementation details\n\t\t\t\t */\n\t\t\t\tint N = Integer.parseInt(br.readLine());\n\t\t\t\tplate = new int[N];\n\t\t\t\tString[] parts = br.readLine().split(\" \");\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t\tplate[i] = Integer.parseInt(parts[i]);\n\t\t\t\t}\n\t\t\t\tlong eaten = 0;\n\t\t\t\tint prev = plate[0];\n\t\t\t\tfor (int i = 1; i < plate.length; i++) {\n\t\t\t\t\tif (prev > plate[i]) {\n\t\t\t\t\t\teaten += (prev - plate[i]);\n\t\t\t\t\t}\n\t\t\t\t\tprev = plate[i];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlong m1 = eaten;\n\t\t\t\tlong eaten1 = 0;\n\t\t\t\t\n\t\t\t\tint biggestDiff = 0;\n\t\t\t\tint prev1 = plate[0];\n\t\t\t\tfor (int i = 1; i < plate.length; i++) {\n\t\t\t\t\tif (prev1 - plate[i] > biggestDiff) {\n\t\t\t\t\t\tbiggestDiff = prev1 - plate[i];\n\t\t\t\t\t}\n\t\t\t\t\tprev1 = plate[i];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < plate.length -1; i++) {\n\t\t\t\t\tif (plate[i] > 0) {\n\t\t\t\t\t\teaten1 += Math.min(biggestDiff, plate[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlong m2 = eaten1;\n\t\t\t\t\n\t\t\t\tString result = String.format(\"Case #%d: %d %d%n\", caseNum, m1 , m2);\n\t\t\t\tbw.write(result);\n\t\t\t\tSystem.out.println(result);\n\t\t\t}\t\t\n\t\t\t\n\t\t} catch (IOException ioe) {\n\t\t\tioe.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (br != null)\n\t\t\t\t\tbr.close();\n\t\t\t\tif (bw != null)\n\t\t\t\t\tbw.close();\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(\"========================================\");\n\t\tSystem.out.println(\"Done! :)\");\n\t}\n\n}\n\n", "idx": "1566"}
{"func": "package googlejam1.p568;\nimport java.io.FileInputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class Question1 {\r\n\tstatic Scanner s;\r\n\r\n\tpublic static void main(String args[]) {\r\n\t\ttry {\n\t\t\tSystem.setIn(new FileInputStream(\"C:\\\\Users\\\\Karthik\\\\Desktop\\\\\"\n\t\t\t\t+ \"file1.in\"));\n\t\t\tSystem.setOut(new PrintStream(\n\t\t\t\t\"C:\\\\Users\\\\Karthik\\\\Desktop\\\\out1.txt\"));\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"ERROR READING FILE\");\n\t\t} // Must be in desktop\r\n\t\ts = new Scanner(System.in);\r\n\t\tint test_cases;\r\n\t\ttest_cases = s.nextInt();\r\n\t\tint[] ar;\r\n\t\tfor (int looper = 1; looper <= test_cases; looper++) {\r\n\t\t\tint n;\r\n\t\t\tn=s.nextInt();\r\n\t\t\tar=new int[n];\r\n\t\t\tfor(int j=0;j<n;j++)\r\n\t\t\t\tar[j]=s.nextInt();\n\t\t\tint n1=ar.length;\n\t\t\tint diff=0;\n\t\t\tfor(int i1=0;i1<n1-1;i1++)\n\t\t\t{\n\t\t\t\tif(ar[i1]>ar[i1+1])diff=diff+(ar[i1]-ar[i1+1]);\n\t\t\t}\r\n\t\t\tint value1=diff;\n\t\t\tint n3=ar.length;\n\t\t\tint max1=ar[0];\n\t\t\tfor(int i3=1;i3<n3;i3++)if(ar[i3]>max1)max1=ar[i3];\n\t\t\tint max=max1;\n\t\t\tint n2=ar.length;\n\t\t\tint minval=n2*max;\n\t\t\tint maxdiff=0;\n\t\t\tfor(int i2=0;i2<n2-1;i2++)\n\t\t\t{\n\t\t\t\tif(ar[i2]-ar[i2+1]>maxdiff)maxdiff=ar[i2]-ar[i2+1];\n\t\t\t}\n\t\t\tint curval=0;\n\t\t\tfor(int i1=0;i1<n2-1;i1++)\n\t\t\t{\n\t\t\t\tif(ar[i1]>maxdiff)curval=curval+maxdiff;\n\t\t\t\telse curval=curval+ar[i1];\n\t\t\t}\r\n\t\t\tint value2=curval;\r\n\t\t\t// DO STUFF\r\n\t\t\t// Output will be in output\r\n\t\t\tint output = 0;\r\n\t\t\t// Waste a line if reading string after int/double\r\n\t\t\tint i=10000*1000;\r\n\t\t\tSystem.out.println(\"Case #\" + looper + \": \" + value1+\" \"+value2);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1568"}
{"func": "package googlejam1.p569;\nimport java.util.*;\nimport java.io.*;\n\npublic class Solution {\n\tpublic static void main(String[] args) {\n\t\tFile file = new File(\"A-large.in\");\n\t\ttry {\n\t\t\tScanner sc = new Scanner(file);\n\n\t\t\tint numOfTests = sc.nextInt();\n\n\t\t\tfor (int i = 1; i < numOfTests + 1; i++) {\n\t\t\t\tint numOfPlates = sc.nextInt();\n\t\t\t\tint[] arr = new int[numOfPlates];\n\n\t\t\t\tfor (int j = 0; j < arr.length; j++) {\n\t\t\t\t\tarr[j] = sc.nextInt();\n\t\t\t\t}\n\n\t\t\t\tint method1 = 0;\n\n\t\t\t\tfor (int j = 0; j < arr.length - 1; j++) {\n\t\t\t\t\tif (arr[j+1] < arr[j]) {\n\t\t\t\t\t\tmethod1 += (arr[j] - arr[j+1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tint method2 = 0;\n\n\t\t\t\tint slope = Integer.MIN_VALUE;\n\n\t\t\t\tfor (int j = 0; j < arr.length - 1; j++) {\n\t\t\t\t\tif ((arr[j] - arr[j + 1]) > slope) {\n\t\t\t\t\t\tslope = arr[j] - arr[j+1];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (int j = 0; j < arr.length -1; j++) {\n\t\t\t\t\tif (arr[j] <= slope) {\n\t\t\t\t\t\tmethod2 += arr[j];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmethod2 += slope;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Case #\" + i + \": \" + method1 + \" \" + method2);\n\t\t\t}\n\t\t} \n\t\tcatch (Exception e) {\n\n\t\t}\n\t}\n}", "idx": "1569"}
{"func": "package googlejam1.p571;\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * CodeJam 2015: Round1-A\r\n * Problem A.\r\n * User: Mitesh, 4/17/15 @ 5:59 PM\r\n */\r\npublic class Problem1A {\r\n    private static final boolean DEBUG = false;\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Problem1A prog = new Problem1A();\r\n\r\n        Scanner in = new Scanner(new FileReader(args[0]));\r\n        final int cntCases = in.nextInt();\r\n        in.nextLine();\r\n\r\n        for (int caseNum = 1; caseNum <= cntCases && in.hasNextLine(); caseNum++) {\r\n            in.nextLine();\n\t\t\tString[] vals1 = in.nextLine().split(\"\\\\s+\");\n\t\t\tint[] arr = new int[vals1.length];\n\t\t\tfor (int i1 = 0; i1 < vals1.length; i1++) {\n\t\t\t    arr[i1] = Integer.valueOf(vals1[i1]);\n\t\t\t} //discard!\r\n            final int[] vals = arr;\n\t\t\tint sum1 = 0;\n\t\t\tint prev1 = vals[0];\n\t\t\tfor (int i1 = 1; i1 < vals.length; i1++) {\n\t\t\t    int cur1 = vals[i1];\n\t\t\t    if (cur1 < prev1) {\n\t\t\t        sum1 += (prev1 - cur1);\n\t\t\t    }\n\t\t\t    prev1 = cur1;\n\t\t\t}\r\n\r\n            int ans1 = sum1;\n\t\t\tint maxDiff = 0;\n\t\t\t        int prev = vals[0];\n\t\t\t        for (int i = 1; i < vals.length; i++) {\n\t\t\t            int cur = vals[i];\n\t\t\t            if (cur < prev) {\n\t\t\t                maxDiff = Math.max(maxDiff, (prev-cur));\n\t\t\t            }\n\t\t\t            prev = cur;\n\t\t\t        }\n\t\t\t\n\t\t\t        int sum = 0;\n\t\t\t        prev = vals[0];\n\t\t\t        for (int i = 1; i < vals.length; i++) {\n\t\t\t            int cur = vals[i];\n\t\t\t//            int left = prev - maxDiff;\n\t\t\t            sum += Math.min(prev, maxDiff);\n\t\t\t            //assert that the #remaining <= current amount.\n\t\t\t            prev = cur;\n\t\t\t        }\r\n            int ans2 = sum;\r\n            System.out.println(\"Case #\" + caseNum + \": \" + ans1 + \" \" + ans2);\r\n        }\r\n    }\r\n}\r\n", "idx": "1571"}
{"func": "package googlejam1.p572;\n\r\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.LineNumberReader;\r\nimport java.io.PrintWriter;\r\n\r\npublic class R1aA {\r\npublic static void main(String args[]) throws Exception {\r\n\t\t\r\n\t\tString inFile = \"A-large.in\";// path to input file \r\n\t\tString outFile =  \"outputA.txt\";\r\n\t\t\r\n\t\tLineNumberReader lin = new LineNumberReader(new InputStreamReader(new FileInputStream(inFile)));\r\n\t\tPrintWriter out = new PrintWriter(new File(outFile));\r\n\t\tint NCASE = Integer.parseInt(lin.readLine());\r\n\t\tfor(int CASE = 1; CASE <= NCASE; CASE++) {\r\n\t\t\tout.print(\"Case #\" + CASE + \": \");\r\n\t\t\tString l = lin.readLine();\r\n\t\t\tint N=Integer.parseInt(l);\r\n\t\t\tString l2 = lin.readLine();\r\n\t\t\tString  [] parts = l2.split(\" \");\r\n\t\t\tint [] m= new int[N];\r\n\t\t\tfor (int i=0; i<N; i++){\r\n\t\t\t\tm[i] = Integer.parseInt(parts[i]);\r\n\t\t\t}\r\n\t\t\tint y=0;\r\n\t\t\tint z=0;\r\n\t\t\tint max=0;\r\n\r\n\t\t\tfor (int i=0; i<N-1; i++){\r\n\t\t\t\tif (m[i]-m[i+1]>=0){\r\n\t\t\t\t\ty=y+m[i]-m[i+1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int i=0; i<N-1; i++){\r\n\t\t\t\tif (m[i]-m[i+1]>=max){\r\n\t\t\t\t\tmax=m[i]-m[i+1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (int i=0; i<N-1; i++){\r\n\t\t\t\tif (m[i]>=max){\r\n\t\t\t\t\tz=z+max;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tz=z+m[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.println(y +\" \"+z); \r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tlin.close();\r\n\t\tout.close();\r\n\t\r\n\t\t}\t\t\r\n}\r\n\r\n", "idx": "1572"}
{"func": "package googlejam1.p573;\nimport java.util.Scanner;\r\n\r\n\r\npublic class MushroomMonster {\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint T = in.nextInt();\r\n\t\t\r\n\t\tfor(int zz = 1; zz <= T;zz++){\r\n\r\n\t\t\tint N = in.nextInt();\r\n\t\t\t\r\n\t\t\tint[] marr = new int[N]; \r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tmarr[i] = in.nextInt();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint m1 = 0;\r\n\t\t\tint m2 = 0;\r\n\t\t\t\r\n\t\t\tint prev = 0;\r\n\t\t\tint minRate = 0;\r\n\t\t\tfor (int i =0; i < N; i++){\r\n\t\t\t\tif (prev > marr[i]) {\r\n\t\t\t\t\tm1 += (prev - marr[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ((prev - marr[i]) > minRate) {\r\n\t\t\t\t\t\tminRate = prev - marr[i];\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tprev = marr[i];\r\n\t\t\t}\r\n\t\t\t\r\n//\t\t\tSystem.out.println(\"minRate: \" + minRate);\r\n\t\t\t\r\n\t\t\tfor (int i =0; i < N - 1; i++){\t\t\t\t\r\n\t\t\t\tm2+= (marr[i]>minRate)? minRate : marr[i];\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tSystem.out.format(\"Case #%d: %d %d\\n\", zz, m1, m2);\r\n\t\t}\t\t\r\n\t}\r\n}\r\n", "idx": "1573"}
{"func": "package googlejam1.p574;\nimport java.util.*;\nimport java.io.*;\n\npublic class MushroomMonster {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner input = new Scanner(new File(\"A-large.in.txt\"));\n        PrintWriter output = new PrintWriter(new File(\"output.txt\"));\n        int numberOfCases = input.nextInt();\n        for(int i=0;i<numberOfCases;i++) {\n            int numberOfMushroomCases = input.nextInt();\n            int mushrooms[] = new int[numberOfMushroomCases];\n            for(int j=0;j<numberOfMushroomCases;j++) {\n                mushrooms[j] = input.nextInt();\n            }\n            int first = 0;\n            for(int j=1;j<numberOfMushroomCases;j++) {\n                if(mushrooms[j]<mushrooms[j-1]) {\n                    first+=mushrooms[j-1]-mushrooms[j];\n                }\n            }\n            int biggestDifference = 0;\n            for(int j=1;j<numberOfMushroomCases;j++) {\n                if(mushrooms[j-1]-mushrooms[j]>biggestDifference) {\n                    biggestDifference = mushrooms[j-1]-mushrooms[j];\n                }\n            }\n            int mushroomsPerTenSeconds = biggestDifference;\n            System.out.println(biggestDifference/10.0 + \" \" + Math.ceil(biggestDifference/10.0) + \" \" + mushroomsPerTenSeconds);\n            int second = 0;\n            for(int j=0;j<numberOfMushroomCases-1;j++) {\n                if(mushrooms[j]<=mushroomsPerTenSeconds) {\n                    second+=mushrooms[j];\n                }\n                else {\n                    second+=mushroomsPerTenSeconds;\n                }\n            }\n            output.println(\"Case #\" + (i+1) + \": \" + first + \" \" + second);\n        }\n        input.close();\n        output.close();\n    }\n}", "idx": "1574"}
{"func": "package googlejam1.p577;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tint caseCount = input.nextInt();\r\n\r\n\t\tfor (int caseNo = 1; caseNo <= caseCount; caseNo++) {\r\n\t\t\tint N = input.nextInt();\r\n\t\t\tint cs1 = 0;\r\n\t\t\tint cr2 = 0;\r\n\t\t\tint cs2 = 0;\r\n\t\t\tint ary[] = new int[1000];\r\n\r\n\t\t\tint prev = input.nextInt();\r\n\t\t\tary[0] = prev;\r\n\r\n\t\t\tfor (int i = 1; i < N; i++) {\r\n\t\t\t\tint nw = input.nextInt();\r\n\t\t\t\tary[i] = nw;\r\n\t\t\t\t// System.out.println(\"nw \" + nw);\r\n\t\t\t\tif (prev > nw) {\r\n\t\t\t\t\tcs1 = cs1 + (prev - nw);\r\n\t\t\t\t\tif (cr2 < (prev - nw)) {\r\n\t\t\t\t\t\tcr2 = (prev - nw);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tprev = nw;\r\n\t\t\t\t// System.out.println(\"cs1 \" + cs1);\r\n\t\t\t}\r\n\r\n\t\t\tfor (int j = 0; j < N - 1; j++) {\r\n\t\t\t\tif (ary[j] > cr2) {\r\n\t\t\t\t\tcs2 = cs2 + cr2;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcs2 = cs2 + ary[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.println(\"Case #\" + caseNo + \": \" + cs1 + \" \" + cs2);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1577"}
{"func": "package googlejam1.p578;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.util.StringTokenizer;\nimport java.util.Arrays;\n\npublic class Mushroom {\n\n\tpublic static void main(String[] args) throws FileNotFoundException, IOException {\n\t\t//Input output files\n\t\tString inPath = args[0];\n\t\tString outPath = args[1];\n\n\t\tFile inFile = new File(inPath);\n\t\tBufferedReader br = new BufferedReader(new FileReader(inFile));\n\n\t\tFile outFile = new File(outPath);\n\t\tFileWriter fw = new FileWriter(outPath);\n\t\tBufferedWriter bw = new BufferedWriter(fw);\n\n\t\tStringTokenizer st = null;\n\n\t\t//Variables \n\t\tint caseNumber = Integer.parseInt(br.readLine());\n\n\t\t//For each case\n\t\tfor (int i = 0; i < caseNumber; i ++) {\n\n\t\t\tint numberOfInput = Integer.parseInt(br.readLine());\n\t\t\tst = new StringTokenizer(br.readLine(), \" \");\n\t\t\tint minX = 0;\n\t\t\tint minY = 0;\n\t\t\tint maxSpeed = 0;\n\t\t\tint[] input = new int[numberOfInput];\n\n\t\t\t//Read Itemes\n\t\t\tfor (int n = 0; n < numberOfInput; n ++) {\n\t\t\t\tinput[n] = Integer.parseInt(st.nextToken());\n\t\t\t}\n\n\t\t\tfor (int m = 0; m < numberOfInput - 1; m ++) {\n\t\t\t\t\tint diff = input[m] - input[m+1];\n\t\t\t\t\tif (diff > 0)\n\t\t\t\t\t\tminX += diff;\n\t\t\t\t\tif (diff > maxSpeed)\n\t\t\t\t\t\tmaxSpeed = diff;\n\t\t\t}\n\n\t\t\tfor (int p = 0; p < numberOfInput - 1; p ++) {\n\t\t\t\tif (input[p] < maxSpeed)\n\t\t\t\t\tminY += input[p];\n\t\t\t\telse\n\t\t\t\t\tminY += maxSpeed;\n\t\t\t}\n\n\n\t\t\t//Write the result in the output file\n\t\t\tbw.write(\"Case #\" + (i + 1) + \": \" + minX + \" \" + minY);\n\t\t\tbw.newLine();\n\t\t}\n\n\t\tbw.close();\n\t}\n}", "idx": "1578"}
{"func": "package googlejam1.p579;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class Mushrooms{\r\n\tpublic static void main(String args[]) throws IOException{\r\n\t\tString outFileName = \"C:\\\\1A\\\\mushroom_large_out.out\";\n\t\tFile file = new File(outFileName);\n\t\tif(!file.exists()){\n\t\t\tfile.createNewFile();\n\t\t}\n\t\tFileWriter fw = new FileWriter(file.getAbsoluteFile());\n\t\tBufferedWriter bw = new BufferedWriter(fw);\n\t\t\n\t\t\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"C:\\\\1A\\\\A-large.in\"));\n\t\tString testCasesNumber;\n\t\ttry {\n\t\t\ttestCasesNumber = br.readLine();\n\t\t\tint testCases = Integer.parseInt(testCasesNumber);\n\t\t\tint caseNumber = 1;\n\t\t\twhile(caseNumber<=testCases){\n\t\t\t\t\n\t\t\t\tint n = Integer.parseInt(br.readLine());\n\t\t\t\tString tokens[] = br.readLine().split(\" \");\n\t\t\t\tint size = tokens.length;\n\t\t\t\tif(size != n){\n\t\t\t\t\tthrow new IOException();\n\t\t\t\t}\n\t\t\t\tint mushrooms1[] = new int[size];\n\t\t\t\tint i1=0;\n\t\t\t\tfor(String token : tokens){\n\t\t\t\t\tmushrooms1[i1++] = Integer.parseInt(token);\n\t\t\t\t}\n\t\t\t\tint mushrooms[] = mushrooms1;\n\t\t\t\t\n\t\t\t\t//\tint size = a.length;\n\t\t\t\tint maxDiff = 0;\n\t\t\t\tint y = 0;\n\t\t\t\t\n\t\t\t\tfor(int i = 1 ; i<n;i++){\n\t\t\t\t\tint diff = mushrooms[i-1] -mushrooms[i];\n\t\t\t\t\tif((diff > 0 )){\n\t\t\t\t\t\ty = y + diff;\n\t\t\t\t\t}\n\t\t\t\t\tif(diff > maxDiff){\n\t\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint z= 0 ;\n\t\t\t\tfor(int i=0 ; i< n-1; i++){\n\t\t\t\t\tint toAdd = (mushrooms[i] < maxDiff)?mushrooms[i]:maxDiff;\n\t\t\t\t\tz=z+toAdd;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbw.write(\"Case #\"+caseNumber+\": \"+y+\" \"+z);\n\t\t\t\tbw.write(\"\\n\");\n\t\t\t\t\n\t\t\t\tcaseNumber++;\n\t\t\t}\n\t\t\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tbw.close();\r\n\t\tSystem.exit(0);\r\n\r\n\t}\r\n\r\n}", "idx": "1579"}
{"func": "package googlejam1.p583;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class ProblemAMushroomMonster {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tfinal BufferedReader reader = new BufferedReader(new FileReader(\"files/com/google/code/codejam2015/r1a/A-large.in\"));\r\n\t\tfinal BufferedWriter writer = new BufferedWriter(new FileWriter(\"files/com/google/code/codejam2015/r1a/A-large.out\"));\r\n\r\n\t\tfinal int T = Integer.parseInt(reader.readLine());\r\n\t\tfor (int t = 0; t < T; t++) {\r\n\r\n\t\t\tfinal int N = Integer.parseInt(reader.readLine());\r\n\t\t\tfinal String[] line = reader.readLine().split(\" \");\r\n\t\t\tfinal int[] m = new int[N];\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < line.length; i++) {\r\n\t\t\t\tm[i] = Integer.parseInt(line[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint y = 0;\r\n\t\t\tint maxDiff = 0;\r\n\t\t\tfor (int i = 0; i < m.length - 1; i++) {\r\n\t\t\t\tif (m[i] > m[i + 1]) {\r\n\t\t\t\t\tfinal int diff = m[i] - m[i + 1];\r\n\t\t\t\t\ty += diff;\r\n\t\t\t\t\tif (diff > maxDiff) {\r\n\t\t\t\t\t\tmaxDiff = diff;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint z = 0;\r\n\t\t\tif (maxDiff > 0) {\r\n\t\t\t\tfor (int i = 0; i < m.length - 1; i++) {\r\n\t\t\t\t\tif (m[i] > maxDiff) {\r\n\t\t\t\t\t\tz += maxDiff;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tz += m[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString result = \"Case #\" + (t + 1) + \": \" + y + \" \" + z;\r\n\t\t\tSystem.out.print(result + \"\\n\");\r\n\t\t\twriter.write(result + \"\\n\");\r\n\t\t}\r\n\t\t\r\n\t\treader.close();\r\n\t\twriter.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1583"}
{"func": "package googlejam1.p585;\nimport java.util.*;\n\nclass Main{\n\n    int[] mash;\n\n    public static void main(String[] args){\n        Main r = new Main();\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint t = sc.nextInt();\n\t\tfor(int i=0; i<t; i++){\n\t\t    int n = sc.nextInt();\n\t\t    r.mash = new int[n];\n\t\t    for(int j=0; j<n; j++) r.mash[j] = sc.nextInt();\n\t\t\tint res = 0;\n\t\t\tfor(int i1=1; i1<r.mash.length; i1++){\n\t\t\t    if(r.mash[i1-1]>r.mash[i1]) res += r.mash[i1-1] - r.mash[i1];\n\t\t\t}\n\t\t\n\t\t    int ans1 = res;\n\t\t\tint rate = 0;\n\t\t\tfor(int i1=1; i1<r.mash.length; i1++){\n\t\t\t    rate = Math.max(rate, r.mash[i1-1] - r.mash[i1]);\n\t\t\t}\n\t\t\t\n\t\t\tint first = 0;\n\t\t\tint res1 = 0;\n\t\t\tfor(int i2=0; i2<r.mash.length-1; i2++){\n\t\t\t    res1 += Math.min(rate, r.mash[i2]);\n\t\t\t}\n\t\t    int ans2 = res1;\n\t\t    System.out.printf(\"Case #%d: %d %d\\n\", i+1, ans1, ans2);\n\t\t}\n    }\n}\n", "idx": "1585"}
{"func": "package googlejam1.p586;\n\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class TaskA {\r\n\t\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\t//System.setIn(new FileInputStream(\"C:\\\\Users\\\\Grzegorz\\\\workspace_juno\\\\CodeJam2015\\\\src\\\\pl\\\\gg\\\\codejam2015\\\\round1\\\\taskA\\\\A-large.in\"));\r\n\t\t//System.setOut(new PrintStream(new FileOutputStream(\"C:\\\\Users\\\\Grzegorz\\\\workspace_juno\\\\CodeJam2015\\\\src\\\\pl\\\\gg\\\\codejam2015\\\\round1\\\\taskA\\\\A-large.out\")));\r\n\t\t\r\n\t\ttry (Scanner in = new Scanner(System.in)) {\r\n\t\t\t\r\n\t\t\tint cases = in.nextInt();\r\n\t\t\tfor (int i = 0; i < cases; i++) {\r\n\t\t\t\tint nSeconds = in.nextInt();\r\n\t\t\t\tList<Integer> seconds = new ArrayList<>(nSeconds);\r\n\t\t\t\t\r\n\t\t\t\tfor (int j = 0; j < nSeconds; j++) {\r\n\t\t\t\t\tint second = in.nextInt();\r\n\t\t\t\t\tseconds.add(second);\r\n\t\t\t\t}\n\t\t\t\tint res = 0;\n\t\t\t\t\n\t\t\t\tfor (int i1 = 1; i1 < seconds.size(); i1++) {\n\t\t\t\t\tif (seconds.get(i1 - 1) > seconds.get(i1)) {\n\t\t\t\t\t\tres += seconds.get(i1 - 1) - seconds.get(i1);\n\t\t\t\t\t}\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tint res1 = res;\n\t\t\t\tint maxD = 0;\n\t\t\t\t\n\t\t\t\tfor (int i1 = 1; i1 < seconds.size(); i1++) {\n\t\t\t\t\tif (seconds.get(i1 - 1) - seconds.get(i1) > maxD) {\n\t\t\t\t\t\tmaxD = seconds.get(i1 - 1) - seconds.get(i1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint res3 = 0;\n\t\t\t\t\n\t\t\t\tfor (int i2 = 0; i2 < seconds.size() - 1; i2++) {\n\t\t\t\t\tif (seconds.get(i2) > maxD) {\n\t\t\t\t\t\tres3 += maxD;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres3 += seconds.get(i2);\n\t\t\t\t\t}\n\t\t\t\t}\r\n\t\t\t\tint res2 = res3;\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + res1 + \" \" + res2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1586"}
{"func": "package googlejam1.p591;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\t\r\npublic static void main(String[] args){\r\n\t\t\r\n\r\n\t\ttry {\r\n\t\t\tScanner in = new Scanner(new File(args[0]));\r\n\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter( new File(\"A-output.txt\"),false));\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tint T = in.nextInt();\r\n\t\t\t\r\n\t\t\tfor(int i=0;i<T;i++){\r\n\t\t\t\t\r\n\t\t\t\tint totNum = in.nextInt();\r\n\t\t\t\tint[] musStates = new int[totNum];\r\n\t\t\t\t\r\n\t\t\t\tint methodA = 0 ;\r\n\t\t\t\tint methodB = 0 ;\r\n\t\t\t\tint maxDiff = 0 ;\r\n\t\t\t\tmusStates[0] = in.nextInt();\r\n\t\t\t\t\r\n\t\t\t\tfor(int j=1;j<totNum;j++){\r\n\t\t\t\t\tmusStates[j] = in.nextInt();\r\n\t\t\t\t\t\r\n\t\t\t\t\tint di = musStates[j] - musStates[j-1] ;\r\n\t\t\t\t\tif(di<0){\r\n\t\t\t\t\t\tdi = Math.abs(di);\r\n\t\t\t\t\t\tmethodA += di ;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(maxDiff < di ){\r\n\t\t\t\t\t\t\tmaxDiff = di ;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor(int j=0;j<totNum-1;j++){\r\n\t\t\t\t\tif(musStates[j]<maxDiff){\r\n\t\t\t\t\t\tmethodB += musStates[j];\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tmethodB += maxDiff ;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \" + methodA + \" \" + methodB);\r\n\t\t\t\tbw.write(\"Case #\"+(i+1)+\": \" + methodA + \" \" + methodB );\r\n\t\t\t\tbw.newLine();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(in!=null)in.close();\r\n\t\t\tif(bw!=null)bw.close();\r\n\t\t\t\r\n\t\t\t\r\n\t\t}catch(Exception ex){\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\t\t\t\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "1591"}
{"func": "package googlejam1.p593;\n\r\n\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class Mushrooms {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tString folder = \"round1a/\";\r\n\t\tString fileInPath = folder + \"A-large.in\"; \r\n\t\tString fileOutPath = folder + \"mushrooms.txt\";\r\n\t\t\r\n\t\tScanner sc = new Scanner(new FileReader(fileInPath));\r\n\t\tFileWriter fOut = new FileWriter(fileOutPath);\r\n\t\t\r\n\t\tint numCases = sc.nextInt();\r\n\t\tfor (int caseNo=1; caseNo <= numCases; caseNo++){\r\n\t\t\tint numTimes = sc.nextInt();\r\n\t\t\tint eaten1 = 0;\r\n\t\t\tint eaten2 = 0;\r\n\t\t\tint[] mushrooms = new int[numTimes];\r\n\t\t\tfor (int i = 0; i < numTimes; i++) { //gather data\r\n\t\t\t\tmushrooms[i] = sc.nextInt();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint diff = 0;\r\n\t\t\tint eatRate = 0;\r\n\t\t\tfor (int i = 1; i < numTimes; i++) {\r\n\t\t\t\tdiff = mushrooms[i-1] - mushrooms[i];\r\n\t\t\t\tif (diff > 0) {\r\n\t\t\t\t\teaten1 += diff; \r\n\t\t\t\t} \r\n\t\t\t\tif (diff > eatRate) {\r\n\t\t\t\t\teatRate = diff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// now eaten1 is done and we have the eating rate\r\n\t\t\tfor (int i = 0; i < numTimes - 1; i++) {\r\n\t\t\t\tint leftover = mushrooms[i] - eatRate;\r\n\t\t\t\tif (leftover > 0) {\r\n\t\t\t\t\teaten2 += eatRate;\r\n\t\t\t\t} else {\r\n\t\t\t\t\teaten2 += mushrooms[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfOut.write(\"Case #\" + caseNo + \": \" + eaten1 + \" \" + eaten2 + '\\r' + '\\n');\r\n\t\t\tif (caseNo % 10 == 0) {\r\n\t\t\t\tSystem.out.println(\"Case \" + caseNo + \" done\");\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\t\t\r\n\t\tsc.close();\r\n\t\tfOut.close();\r\n\t\tSystem.out.println(\"Done!\");\r\n\t}\r\n}\r\n", "idx": "1593"}
{"func": "package googlejam1.p594;\nimport java.io.*;\nimport java.util.*;\n\npublic class OneA {\n    public static void main(String[] args) throws IOException {\n\tBufferedReader r = new BufferedReader(new FileReader(args[0]));\n\tint T = Integer.parseInt(r.readLine());\n\tfor (int i=0; i < T; i++) {\n\t    r.readLine();\n\t    String[] split = r.readLine().split(\" \");\n\t    int[] input = new int[split.length];\n\t    for (int j=0; j < split.length; j++)\n\t\tinput[j] = Integer.parseInt(split[j]);\n\t\tint total = 0;\n\t\tfor (int i1=0; i1 < input.length-1; i1++)\n\t\t    if (input[i1+1]<input[i1])\n\t\t\ttotal += input[i1]-input[i1+1];\n\t    int res1 = total;\n\t\tint minRate = 0;\n\t\tfor (int i2=0; i2 < input.length-1; i2++)\n\t\t    if (input[i2+1]<input[i2])\n\t\t\tminRate = Math.max(minRate, input[i2]-input[i2+1]);\n\t\tint minEaten = 0;\n\t\tfor (int i1=0; i1 < input.length-1; i1++)\n\t\t    if (input[i1] < minRate)\n\t\t\tminEaten += input[i1];\n\t\t    else\n\t\t\tminEaten += minRate;\n\t    int res2 = minEaten;\n\t    System.out.println(\"Case #\"+(i+1)+\": \"+res1 + \" \"+ res2);\n\t}\n    }\n}\n", "idx": "1594"}
{"func": "package googlejam1.p595;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n//writer.print(\"Case #\"+(i+1)+\": \");\r\n//writer.close();\r\nclass jam3{\r\n\tpublic static void main(String [] abb){\r\n\t\ttry{\r\n\t\t\tScanner in = new Scanner(new File(\"safia.in\"));\r\n\t\t\tPrintWriter writer = new PrintWriter(\"out2.in\", \"UTF-8\");\r\n\t\t\t\r\n\t\t\tint testcase = in.nextInt();\r\n\t\t\tint tab [][] = new int[5][5];\r\n\t\t\t\r\n\t\t\tfor(int p=0;p<testcase;p++){\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint inp[] = new int[n];\r\n\t\t\tint max=0;\r\n\t\t\tfor(int i=0;i<n;i++){\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tinp[i]=in.nextInt();\r\n\t\t\t\tif(i!=0){\r\n\t\t\t\t\tmax=Math.max(max,(inp[i-1]-inp[i]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(max);\r\n\t\t\t\tint out1=0;\r\n\t\t\t\tint out2=0;\r\n\t\t\t\t\r\n\t\t\tfor(int j=0;j<n-1;j++){\r\n\t\t\t\tif(inp[j+1]<inp[j]){\r\n\t\t\t\t\tout1=inp[j]-inp[j+1]+out1;\r\n\t\t\t\t}\r\n\t\t\t\tif(inp[j]<max){\r\n\t\t\t\t\tout2=out2+inp[j];\r\n\t\t\t\t}else{\r\n\t\t\t\t\tout2=out2+max;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\twriter.println(\"Case #\"+(p+1)+\": \"+out1+\" \"+out2);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\twriter.close();\r\n\t\t}catch(IOException e){\r\n\t\t\t\r\n\t\t\t}\r\n\t}\r\n}", "idx": "1595"}
{"func": "package googlejam1.p596;\n\nimport java.util.*;\nimport java.io.*;\n\npublic class Mushroom {\n\n\tpublic static void main (String[] args) throws IOException {\n\t\tBufferedReader instr = new BufferedReader(new InputStreamReader(System.in));\n\t\tString oneLine;\n\t\tint counter = 0;\n\t\twhile ((oneLine = instr.readLine()) != null) {\n\t\t\tif (counter == 0) {\n\t\t\t\tcounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (counter%2 == 1) {\n\t\t\t\tcounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tString[] input = oneLine.split(\"\\\\s+\");\n\t\t\tList<Integer> mushroom_list1 = new ArrayList<Integer>();\n\t\t\tfor (int i1 = 0; i1 < input.length; i1++) {\n\t\t\t\tint temp = Integer.parseInt(input[i1]);\n\t\t\t\tmushroom_list1.add(temp);\n\t\t\t}\n\t\t\tList<Integer> mushroom_list = mushroom_list1;\n\t\t\tint sum = 0;\n\t\t\tint len = mushroom_list.size();\n\t\t\tfor (int i = 1; i < len; i++) {\n\t\t\t\tint diff = mushroom_list.get(i-1) - mushroom_list.get(i);\n\t\t\t\tif (diff > 0) {\n\t\t\t\t\tsum = sum + diff; \n\t\t\t\t}\n\t\t\t}\n\t\t\tint first_sol = sum;\n\t\t\tint largest_diff = 0;\n\t\t\tint len1 = mushroom_list.size();\n\t\t\tfor (int i = 1; i < len1; i++) {\n\t\t\t\tint diff = mushroom_list.get(i-1) - mushroom_list.get(i);\n\t\t\t\tif (diff > largest_diff) {\n\t\t\t\t\tlargest_diff = diff;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint sum1 = 0;\n\t\t\tfor (int i = 0; i < len1 - 1; i++) {\n\t\t\t\tint num = mushroom_list.get(i);\n\t\t\t\tif (num > largest_diff) {\n\t\t\t\t\tsum1 += largest_diff;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsum1 += num;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint second_sol = sum1;\n\t\t\tSystem.out.println(\"Case #\" + counter/2 + \": \" + first_sol + \" \" + second_sol);\n\t\t\tcounter++;\n\t\t}\n\t}\n}", "idx": "1596"}
{"func": "package googlejam1.p597;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class MushroomMonster {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader f= new BufferedReader(new FileReader(\"mushroom.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"mushroom.out\")));\r\n\t\t\r\n\t\tint T = Integer.parseInt(f.readLine());\r\n\t\t\r\n\t\tfor ( int test=1; test <= T; test++ ) {\r\n\t\t\tint N = Integer.parseInt(f.readLine());\r\n\t\t\tStringTokenizer st = new StringTokenizer(f.readLine());\r\n\t\t\tint[] mushroomPieces = new int[N];\r\n\t\t\tfor ( int i=0; i < N; i++ ) {\r\n\t\t\t\tmushroomPieces[i] = Integer.parseInt(st.nextToken());\r\n\t\t\t}\n\t\t\t// use method one\n\t\t\tint numEaten = 0;\n\t\t\tfor ( int i=0; i < N-1; i++ ) {\n\t\t\t\tint numPieces1 = mushroomPieces[i];\n\t\t\t\tint numPieces2 = mushroomPieces[i+1];\n\t\t\t\tif ( numPieces2 < numPieces1 ) {\n\t\t\t\t\tnumEaten += numPieces1 - numPieces2;\n\t\t\t\t}\n\t\t\t}\r\n\t\t\tint numEaten1 = numEaten;\n\t\t\tint largestDiff = 0;\n\t\t\tfor ( int i=0; i < N-1; i++ ) {\n\t\t\t\tint numPieces1 = mushroomPieces[i];\n\t\t\t\tint numPieces2 = mushroomPieces[i+1];\n\t\t\t\tlargestDiff = Math.max(largestDiff, numPieces1 - numPieces2);\n\t\t\t}\n\t\t\tint numEaten3 = 0;\n\t\t\tfor ( int i=0; i < N-1; i++ ) {\n\t\t\t\tint numPieces = mushroomPieces[i];\n\t\t\t\tnumEaten3 += Math.min(largestDiff, numPieces);\n\t\t\t}\r\n\t\t\tint numEaten2 = numEaten3;\r\n\t\t\tout.println(String.format(\"Case #%d: %d %d\",test, numEaten1, numEaten2));\r\n\t\t}\r\n\t\t\r\n\t\tf.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "1597"}
{"func": "package googlejam1.p598;\n/*\r\nID: abhi1\r\nLANG: JAVA\r\nTASK: gift1\r\n*/\r\n\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\nimport java.io.*;\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\n\r\n\r\npublic class mushroommonster {\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"test1.out\"));\r\n\t\t\tBufferedReader br = new BufferedReader(new FileReader(\"test.in\"));\r\n\t\t\t\r\n\t\t\tint T = Integer.parseInt(br.readLine());\t\r\n\t\t\t\r\n\t\t\tfor(int i = 1; i <= T; i++)\r\n\t\t\t{\r\n\t\t\t\tbr.readLine();\r\n\t\t\t\tString[] temp = br.readLine().split(\" \");\r\n\t\t\t\tint[] nums = new int[temp.length];\r\n\t\t\t\tfor(int j = 0 ; j < temp.length; j++)\r\n\t\t\t\t\tnums[j] = Integer.parseInt(temp[j]);\r\n\t\t\t\t\r\n\t\t\t\tint maxDiff = -1;\r\n\t\t\t\tfor(int j = 0; j < temp.length - 1; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(nums[j] - nums[j + 1] > maxDiff)\r\n\t\t\t\t\t\tmaxDiff = nums[j] - nums[j + 1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//double minRate = ((double) maxDiff)/10;\r\n\t\t\t\tint z = 0;\r\n\t\t\t\tfor(int j = 0; j < nums.length - 1; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (nums[j] - maxDiff <= 0)\r\n\t\t\t\t\t\tz += nums[j];\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tz += maxDiff;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tint y = 0;\r\n\t\t\t\tfor(int j = 0; j < nums.length - 1; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (nums[j + 1] < nums[j])\r\n\t\t\t\t\t\ty += (nums[j] - nums[j + 1]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tbw.write(\"Case #\" + i + \": \" + y + \" \" + z);\r\n\t\t\t\tbw.newLine();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tbw.close();\r\n\t\t\tbr.close();\r\n\t\t\t\r\n\t\t}\r\n\t\tcatch (Exception ex) \r\n\t\t{\r\n\t\t\tSystem.out.println(ex.getMessage());\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1598"}
{"func": "package googlejam1.p599;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\nimport java.text.*;\r\npublic class Main\r\n{\r\npublic static void main(String[] args)throws java.lang.Exception\r\n{\r\nBufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\r\nPrintWriter out=new PrintWriter(\"output.txt\");\r\nint t,x1,n,i,v1,v2,ans1,ans2,diff;\r\n\r\n\r\nt=Integer.parseInt(in.readLine());\r\n \r\n \r\nfor(x1=0;x1<t;x1++)\r\n{\r\nn=Integer.parseInt(in.readLine());\r\n\r\nStringTokenizer st1=new StringTokenizer(in.readLine());\r\n\r\nint[] a=new int[n];\r\n\r\nfor(i=0;i<n;i++)\r\n{\r\na[i]=Integer.parseInt(st1.nextToken());\r\n}\r\n\r\nv1=a[0];\r\n\r\nans1=0;\r\ndiff=0;\r\n\r\nfor(i=1;i<n;i++)\r\n{\r\nv2=a[i];\r\n\r\nif(v2<v1)\r\n\t{\r\n\tans1+=(v1-v2);\r\n\tdiff=Math.max(diff,v1-v2);\r\n\t}\r\n\r\nv1=a[i];\r\n}\r\n\r\nans2=0;\r\n\r\nfor(i=0;i<n-1;i++)\r\n{\r\nans2+=Math.min(a[i],diff);\r\n}\r\n\r\nout.println(\"Case #\"+(x1+1)+\": \"+ans1+\" \"+ans2);\r\n\r\n}\r\n\r\nout.flush();\r\nout.close();\r\n}\r\n}    ", "idx": "1599"}
{"func": "package googlejam1.p601;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class Mushroom {\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tBufferedReader in = new BufferedReader(new FileReader(\"A-large (1).in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"submission.out\")));\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor(int i = 0; i < T; i++){\r\n\t\t\tint ans1 = 0, ans2 = 0, N = Integer.parseInt(in.readLine()); int[] nums = new int[N], diff = new int[N-1];\r\n\t\t\tStringTokenizer s = new StringTokenizer(in.readLine());\r\n\t\t\tfor(int j = 0; j < N; j++){nums[j] = Integer.parseInt(s.nextToken());}\r\n\t\t\tfor(int j = 0; j < N-1; j++)\r\n\t\t\t\tif(nums[j+1] < nums[j])\r\n\t\t\t\t\tans1 += nums[j]-nums[j+1];\r\n\t\t\tfor(int j = 0; j < N-1; j++)\r\n\t\t\t\tdiff[j] = nums[j] - nums[j+1];\r\n\t\t\tint max = 0;\r\n\t\t\tfor(int j = 0; j < N-1; j++)\r\n\t\t\t\tif(diff[j] > max)\r\n\t\t\t\t\tmax = diff[j];\r\n\t\t\tfor(int j = 0; j < N-1; j++){\r\n\t\t\t\tif(nums[j] < max){ans2 += nums[j];}\r\n\t\t\t\telse{ans2 += max;}\r\n\t\t\t}\r\n\t\t\tout.println(\"Case #\" + (i + 1) + \": \" + ans1 + \" \" + ans2);\r\n\t\t}\r\n\t\tout.close();\r\n\t\tSystem.exit(0);\r\n\t}\r\n}\r\n", "idx": "1601"}
{"func": "package googlejam1.p602;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\nimport java.util.Vector;\r\n\r\npublic class Main {\r\n\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = null;\r\n\t\ttry {\r\n\t\t\tin = new Scanner(new File(\"A-large.in\"));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t\tSystem.exit(-1);\r\n\t\t}\r\n\t\t\r\n\t\tPrintWriter out = null;\r\n\t\ttry {\r\n\t\t\tout = new PrintWriter(\"out.txt\");\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t\tSystem.exit(-1);\r\n\t\t}\r\n\t\t\r\n\t\tint nTests = in.nextInt();\r\n\t\t\r\n\t\tfor(int testsCount = 0;testsCount<nTests;++testsCount) {\t\t\t\r\n\t\t\tint n = in.nextInt();\r\n\r\n\t\t\tint m1=0,m2=0;\r\n\t\t\tint[] v = new int[1024];\r\n\t\t\tint maxd = -1;\r\n\t\t\tfor(int i=0;i<n;i++) {\r\n\t\t\t\tv[i] = in.nextInt();\r\n\t\t\t\t\r\n\t\t\t\tif (i>0) {\r\n\t\t\t\t\tint d = v[i-1]-v[i];\r\n\t\t\t\t\tif (v[i-1]>v[i]) {\r\n\t\t\t\t\t\tm1+=d;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (d > maxd) {\r\n\t\t\t\t\t\tmaxd = d;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tfor(int i=0;i<n-1;i++) {\r\n\t\t\t\tif (v[i]<maxd) {\r\n\t\t\t\t\tm2+=v[i];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tm2+=maxd;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.println(\"Case #\" + (testsCount + 1) + \": \" + m1 + \" \" + m2);\r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1602"}
{"func": "package googlejam1.p605;\n\n\nimport java.util.Scanner;\n\npublic class A {\n\n\tpublic static void main(String[] args) {\n\n\t\tA a = new A();\n\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint T = sc.nextInt();\n\n\t\tfor (int t = 0; t < T; t++) {\n\n\t\t\tint N = sc.nextInt();\n\t\t\tint[] mushrooms = new int[N];\n\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tmushrooms[i] = sc.nextInt();\n\t\t\t}\n\t\t\tint ret = 0;\n\t\t\tfor (int i = 1; i < N; i++) {\n\t\t\t\tint diff = Math.max(0, mushrooms[i - 1] - mushrooms[i]);\n\t\t\t\tret += diff;\n\t\t\t}\n\n\t\t\tString y = Integer.toString(ret);\n\t\t\tint rate = 0;\n\t\t\tfor (int i = 1; i < N; i++) {\n\t\t\t\trate = Math.max(rate, mushrooms[i - 1] - mushrooms[i]);\n\t\t\t}\n\t\t\t\n\t\t\tint ret1 = 0;\n\t\t\tfor (int i = 0; i < N - 1; i++) {\n\t\t\t\tint diff = Math.min(rate, mushrooms[i]);\n\t\t\t\tret1 += diff;\n\t\t\t}\n\t\t\tString z = Integer.toString(ret1);\n\t\t\tSystem.out.format(\"Case #%d: %s %s\", t + 1, y, z);\n\t\t\tSystem.out.println();\n\t\t}\n\n\t\tsc.close();\n\n\t}\n}", "idx": "1605"}
{"func": "package googlejam1.p606;\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.stream.Stream;\n\npublic class Mushroom {\n\n    public static void main(String[] args) throws IOException {\n        Mushroom r = new Mushroom();\n\t\tFileInputStream fstream = new FileInputStream(\"Mushroom.txt\");\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(fstream));\n\t\t\n\t\tString strLine;\n\t\tString totalTestCases  = br.readLine();\n\t\tint lineNo = 1;\n\t\twhile ((strLine = br.readLine()) != null)   {\n\t\t    if(lineNo %2 == 0) {\n\t\t        String[] tokens = strLine.split(\" \");\n\t\t        int[] input = Stream.of(tokens).mapToInt(Integer::parseInt).toArray();\n\t\t        int strategy1 = 0;\n\t\t        int strategy2 = 0;\n\t\t\n\t\t        int maxDifference = 0 ;\n\t\t        for(int i=0;i< input.length-1;i++) {\n\t\t            if(input[i] > input[i+1]) {\n\t\t                if(maxDifference < (input[i]- input[i+1])) {\n\t\t                    maxDifference = input[i]- input[i+1];\n\t\t                }\n\t\t                strategy1 += input[i] - input[i+1];\n\t\t            }\n\t\t        }\n\t\t        for(int i=0;i< input.length-1;i++) {\n\t\t                if(input[i] < maxDifference) {\n\t\t                    strategy2 += input[i];\n\t\t                } else {\n\t\t                    strategy2 += maxDifference;\n\t\t                }\n\t\t        }\n\t\t\n\t\t\n\t\t        System.out.println(String.format(\"Case #%d: %d %d\", Mushroom.inputLines++, strategy1, strategy2));\n\t\t    }\n\t\t    lineNo++;\n\t\t\n\t\t}\n\t\t\n\t\tbr.close();\n    }\n    static int inputLines = 1;\n}\n", "idx": "1606"}
{"func": "package googlejam1.p609;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner sc = new Scanner(new File(\"A-large.in\"));\r\n\t\tBufferedWriter w = new BufferedWriter(new FileWriter(\"out.txt\"));\r\n\t\tif (sc.hasNextInt()) {\r\n\t\t\tint testNumber = sc.nextInt();\r\n\t\t\tfor (int i = 1; i <= testNumber; i++) {\r\n\t\t\t\tint input = sc.nextInt();\r\n\t\t\t\tint one = 0;\r\n\t\t\t\tint two = 0;\r\n\t\t\t\tint max = 0;\r\n\t\t\t\tint[] array = new int[input];\r\n\t\t\t\tfor (int j = 0; j < input; j++) {\r\n\t\t\t\t\tarray[j] = sc.nextInt();\r\n\t\t\t\t\tif (j != 0 && (array[j-1] - array[j]) >max) {\r\n\t\t\t\t\t\tmax = array[j-1]-array[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int j = 0; j < input-1; j++) {\r\n\t\t\t\t\tif (array[j] > array[j+1]) {\r\n\t\t\t\t\t\tone += array[j]-array[j+1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (max >= array[j]) {\r\n\t\t\t\t\t\ttwo += array[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (max < array[j]) {\r\n\t\t\t\t\t\ttwo += max;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n//\t\t\t\tSystem.out.println(\"Case #\"+i+\": \"+one+\" \"+two);\r\n\t\t\t\tw.write(\"Case #\"+i+\": \"+one+\" \"+two+\"\\n\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tsc.close();\r\n\t\tw.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1609"}
{"func": "package googlejam1.p613;\nimport java.io.*;\nimport java.util.LinkedList;\n\n/**\n * Created by ldfrank533 on 15/4/18.\n */\npublic class MushroomMonster {\n    public static void main(String[] args) {\n        LinkedList<String> s=new LinkedList<String>();\n\n\n        try {\n            String encoding=\"GBK\";\n            File file=new File(\"/Users/ldfrank533/b.txt\");\n            if(file.isFile() && file.exists()){ //\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\n                InputStreamReader read = new InputStreamReader(\n                        new FileInputStream(file),encoding);//\u8003\u8651\u5230\u7f16\u7801\u683c\u5f0f\n                BufferedReader bufferedReader = new BufferedReader(read);\n                String lineTxt = null;\n                while((lineTxt = bufferedReader.readLine()) != null){\n                    s.add(lineTxt);\n                }\n                read.close();\n            }\n        } catch (Exception e) {\n            System.out.println(\"\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u51fa\u9519\");\n            e.printStackTrace();\n        }\n\n\n        int trial=Integer.valueOf(s.get(0));\n        String[] raw=new String[trial*2+1];\n        // int[][] resf=new int[trial][0];\n\n        for (int i=0;i<s.size();i++){\n            raw[i]=s.get(i);\n        }\n\n        for(String x:raw){\n            System.out.println(x);\n        }\n\n        System.out.println(\"--------------------------------------------------------------------\");\n        int[] intervals=new int[trial];\n        int[][] data=new int[trial][0];\n        for(int i=0;i<trial;i++){\n            intervals[i]=Integer.valueOf(raw[2*i+1]);\n\t\t\tString[] numbers = raw[2*i+2].split(\"\\\\s+\");\n\t\t\tint[] ints = new int[numbers.length];\n\t\t\tfor (int i1 = 0; i1 < ints.length; i1++)\n\t\t\t    ints[i1] = Integer.parseInt(numbers[i1]);\n            data[i]=ints;\n        }\n//        for(int i:data[data.length-1]){\n//            System.out.println(i);\n//        }\n        int[][] res=new int[trial][2];\n        for(int i=0;i<trial;i++){\n            int[] in = data[i];\n\t\t\tint res1=0;\n\t\t\tfor(int i1=0;i1<in.length-1;i1++){\n\t\t\t    if(in[i1]>in[i1+1]){\n\t\t\t        res1+=in[i1]-in[i1+1];\n\t\t\t    }\n\t\t\t}\n\t\t\tres[i][0]=res1;\n\t\t\tint[] in1 = data[i];\n\t\t\tint maxdif=0;\n\t\t\tint res2=0;\n\t\t\tfor(int i2=0;i2<in1.length-1;i2++){\n\t\t\t    if(in1[i2]>in1[i2+1]){\n\t\t\t        if(in1[i2]-in1[i2+1]>maxdif){\n\t\t\t            maxdif=in1[i2]-in1[i2+1];\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\tfor(int i1=0;i1<in1.length-1;i1++){\n\t\t\t    if(in1[i1]<maxdif){\n\t\t\t       res2+=in1[i1];\n\t\t\t    }\n\t\t\t    else{\n\t\t\t        res2+=maxdif;\n\t\t\t    }\n\t\t\t}\n            res[i][1]=res2;\n        }\n\n\n        try {\n\n\n            String path = \"/Users/ldfrank533/Mushroom0.txt\";//\u6587\u4ef6\u4fdd\u5b58\u8def\u5f84\u3001\u540d\u5b57\n            File file = new File(path);\n            BufferedWriter ow = new BufferedWriter(new FileWriter(file));\n\n            for(int i=0;i<trial;i++){\n\n                String temp=\"Case \"+\"#\"+String.valueOf(i+1)+\": \"+res[i][0]+\" \"+res[i][1];\n\n                ow.write(temp);\n\n                ow.newLine();\n            }\n\n            ow.close();\n            System.out.println(\"Finished Writing\");\n\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n}\n", "idx": "1613"}
{"func": "package googlejam1.p616;\nimport java.util.Scanner;\n\n\npublic class Jam2015_1AC {\n\tint\tret1;\n\tint\tret2;\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner\tscanIn\t= new Scanner(System.in);\n\t\t\n\t\tint T\t= scanIn.nextInt();\n\t\t\n\t\tfor(int i=0; i<T; ++i) {\n\t\t\tJam2015_1AC\tinst\t= new Jam2015_1AC();\n\t\t\tint\t\tn\t\t= scanIn.nextInt();\n\t\t\t\n\t\t\tint[]\tpList\t= new int[n];\n\n\t\t\tfor(int j=0; j<n; ++j)\n\t\t\t\tpList[j]\t= scanIn.nextInt();\n\t\t\tint[]\tret\t= new int[n-1];\n\t\t\t\n\t\t\tfor(int i1=0; i1<n-1; ++i1)\n\t\t\t\tret[i1]\t= pList[i1+1] - pList[i1];\n\t\t\t\n\t\t\tint[]\ttmp\t= ret;\n\t\t\tint\tret1\t= 0;\n\t\t\tfor(int item: tmp) {\n\t\t\t\tret1 += (item < 0) ? -item: 0;\n\t\t\t}\n\t\t\t\n\t\t\tinst.ret1\t= ret1;\n\t\t\tint\tspeed\t= 0;\n\t\t\tfor(int item2: tmp) {\n\t\t\t\tspeed = (speed > item2) ? item2: speed;\n\t\t\t}\n\t\t\tspeed\t= -speed;\n\t\t\t\n\t\t\tint\tret2\t= 0;\n\t\t\tfor(int i1=0; i1<n-1; ++i1) {\n\t\t\t\tint item1\t= pList[i1];\n\t\t\t\tint\ttmp1\t= speed;\n\t\t\t\tret2\t+= (item1 < tmp1) ? item1: tmp1;\n\t\t\t}\n\t\t\tinst.ret2\t= ret2;\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + inst.ret1 + \" \" + inst.ret2);\n\t\t}\n\t\t\n\t\tscanIn.close();\n\t}\n}\n", "idx": "1616"}
{"func": "package googlejam1.p620;\nimport java.util.*;\nimport java.io.*;\n\npublic class MushroomMonster {\n    public static void main(String[] args) throws Exception {\n        if (args.length == 0) {\n            throw new IllegalArgumentException(\"Require input file name\");\n        }\n        Scanner sc = new Scanner(new FileReader(args[0]));\n        String outFilename = args[0].replaceFirst(\"[.][^.]+$\", \"\").concat(\".out\");\n        PrintWriter pw = new PrintWriter(new FileWriter(outFilename));\n        int caseCnt = sc.nextInt();\n        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {\n            pw.print(\"Case #\" + (caseNum + 1) + \": \");\n\t\t\tMushroomMonster r = new MushroomMonster();\n            /**\n\t\t\t * for integer:\n\t\t\t *     x = sc.nextInt();\n\t\t\t * for long:\n\t\t\t *     x = sc.nextLong();\n\t\t\t * for double:\n\t\t\t *     x = Double.parseDouble(sc.next());\n\t\t\t * for charArray:\n\t\t\t *     x = sc.next().toCharArray();\n\t\t\t **/\n\t\t\tint N = sc.nextInt();\n\t\t\tint[] m = new int[N];\n\t\t\tint counter1 = 0;\n\t\t\tint counter2 = 0;\n\t\t\tdouble max_rate = 0.0;\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t    m[i] = sc.nextInt();\n\t\t\t    if (i > 0) {\n\t\t\t        if (m[i] < m[i-1]) {\n\t\t\t            int delta = m[i-1] - m[i];\n\t\t\t            counter1 += delta;\n\t\t\t            double rate = delta/10.0;\n\t\t\t            if (rate > max_rate) {\n\t\t\t                max_rate = rate;\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\tfor (int i = 1; i < N; i++) {\n\t\t\t    counter2 += Math.min(m[i-1], (int)(10*max_rate));\n\t\t\t}\n\t\t\tpw.printf(\"%d %d\\n\", counter1, counter2);\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}", "idx": "1620"}
{"func": "package googlejam1.p622;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws Exception{\r\n        Scanner scan = new Scanner(System.in);\r\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\aschonfe\\\\Desktop\\\\tmp.out\"));\r\n        String firstLine = scan.nextLine();\r\n        Boolean isFile = !Character.isDigit(firstLine.charAt(0));\r\n        int T;\r\n        if(isFile){\r\n            scan = new Scanner(new FileReader(firstLine));\r\n            T = scan.nextInt();\r\n        }else{\r\n            T = Integer.parseInt(firstLine);\r\n        }\r\n        for(int t=1;t<=T;t++){\r\n            int N = scan.nextInt();\r\n            int[] m = new int[N];\r\n            \r\n            for(int n=0;n<N;n++){\r\n            \tm[n] = scan.nextInt();\r\n            }\r\n            \r\n            //method 1\r\n            int method1 = 0;\r\n            int prev = m[0];\r\n            for(int n=0;n<N;n++){\r\n            \tif(m[n] > prev){\r\n            \t\tprev = m[n];\r\n            \t}else{\r\n            \t\tmethod1 += prev - m[n];\r\n            \t\tprev = m[n];\r\n            \t}\r\n            }\r\n            \r\n            //method 2\r\n            int rate = 0;\r\n            for(int n=1;n<N;n++){\r\n            \tif((m[n-1] - m[n]) > rate){\r\n            \t\trate = m[n-1] - m[n];\r\n            \t}\r\n            }\r\n            int method2 = 0;\r\n            for(int n=0;n<N-1;n++){\r\n            \tif(m[n] > rate){\r\n            \t\tmethod2 += rate;\r\n            \t}else{\r\n            \t\tmethod2 += m[n];\r\n            \t}\r\n            }\r\n\r\n            System.out.printf(\"Case #%d: %d %d%n\", t, method1, method2);\r\n            out.write(String.format(\"Case #%d: %d %d%n\", t, method1, method2));\r\n        }\r\n        if(isFile){\r\n            scan.close();\r\n        }\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "1622"}
{"func": "package googlejam1.p624;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class MushroomMonster {\r\n\r\n\tpublic static void main(String[] args)throws IOException {\r\n\t\tScanner in = new Scanner(new File(\"in.in\"));\r\n\t\tPrintWriter writer = new PrintWriter(new File(\"out.out\"));\r\n\t\tint t = in.nextInt();\r\n\t\tfor (int i = 1; i <=t;i++) {\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] m = new int[n];\r\n\t\t\tint first = 0;\r\n\t\t\tint second = 0;\r\n\t\t\tfor (int j = 0; j < n; j++)\r\n\t\t\t\tm[j] = in.nextInt();\r\n\t\t\tfirst = 0;\r\n\t\t\tint left;\r\n\t\t\tfor (int j = 1; j < n; j++) {\r\n\t\t\t\tif (m[j] > m[j-1]) continue;\r\n\t\t\t\tfirst += Math.abs(m[j] - m[j-1]);\r\n\t\t\t}\r\n\t\t\tsecond = 0;\r\n\t\t\tleft = m[0];\r\n\t\t\tdouble rate = 0;\r\n\t\t\tfor (int j = 1; j < n ;j++)\r\n\t\t\t\tif (m[j] < m[j-1])\r\n\t\t\t\trate = Math.max(rate, (double)(m[j-1] - m[j]) / 10);\r\n\t\t\tfor (int j = 1; j < n ;j++ ) {\r\n\t\t\t\tsecond += Math.min(rate * 10 , left);\r\n\t\t\t\tleft -= Math.min(rate*10, left);\r\n\t\t\t\tleft += m[j] - left;\r\n\t\t\t}\r\n\t\t\twriter.println(\"Case #\"+i+\": \"+first + \" \"+second);\r\n\t\t}\r\n\t\t\r\n\t\tin.close();\r\n\t\twriter.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1624"}
{"func": "package googlejam1.p627;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class question_3 {\n\tpublic static void main(String[] args){\n\t\tScanner scanner;\n\t\ttry {\n\t\t\tscanner = new Scanner(new File(\"A-large.in\"));\n\t\t\tint noofTests = scanner.nextInt();\n\t\t\t\n\t\t\t\n\t\t\tint i=0;\n\t\t\t\n\t\t\twhile(i<noofTests){\n\t\t\t\tArrayList no =  new ArrayList();\t\n\t\t\t\tint temptwo=0;\n\t\t\tint noOfEaten = scanner.nextInt();\n\t\t\tfor(int j=0;j<noOfEaten;j++){\n\t\t\t\tno.add(scanner.nextInt());\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t\tint sum=0;\n\t\t\tfor(int j=0;j<no.size();j++){\n\t\t\t\tsum+=(int) no.get(j);\n\t\t\t}\n\t\t\tint tmp= (int) no.get(0);\n\t\t\tint sumTmp=0;\n\t\t\tfor(int j=1;j<no.size();j++){\n\t\t\t\tif(tmp > (int) no.get(j))\n\t\t\t\t\tsumTmp  += tmp -(int) no.get(j);\n\t\t\t\ttmp = (int) no.get(j);\n\t\t\t}\n\t\t\t\n\t\t\tint rateSum=0;\n\t\t\t\tint rate = (int)no.get(noOfEaten-2) - (int)no.get(noOfEaten-1);\n\t\t\t\tint tmpdiff=0;\n\t\t\t\tint diff=0;\n\t\t\t\tfor(int j=0;j<no.size()-1;j++){\t\t\t\t\t\n\t\t\t\t\tif((int)no.get(j) > (int)no.get(j+1)){\n\t\t\t\t\t\ttmpdiff = (int)no.get(j) - (int)no.get(j+1);\n\t\t\t\t\t}\n\t\t\t\t\tif(tmpdiff > diff){\n\t\t\t\t\t\tdiff = tmpdiff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int j=0;j<no.size()-1;j++){\n\t\t\t\t\tif((int)no.get(j) > diff){\n\t\t\t\t\t\trateSum += diff;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\trateSum+=(int)no.get(j);\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttemptwo = sum - ((int)no.get(noOfEaten-1)*2) ;\n\t\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+sumTmp + \" \" + rateSum);\n\t\t\t\t\n\t\t\t\ti++;\n\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "1627"}
{"func": "package googlejam1.p628;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class R1Q1 {\r\n\tprivate static Reader in;\r\n\tprivate static PrintWriter out;\r\n\tpublic static final String NAME = \"R1\\\\A\\\\A-large\";\r\n\t\r\n\tprivate static Map<String, String> m = new HashMap<String, String>();\r\n\r\n\tpublic static void main(String[] args) throws IOException {\t\r\n\t\t\r\n\t\tout = new PrintWriter(new BufferedWriter(new FileWriter(NAME + \".out\")));\r\n\t\tFile file = new File(NAME+\".in\");\r\n\t\t\r\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(file))) {\r\n\t\t    int T = Integer.parseInt(br.readLine());\r\n\t\t    for(int i=0; i<T; i++){\r\n\t\t    \tint N = Integer.parseInt(br.readLine());\r\n\t\t    \tint result1 = 0;\r\n\t\t    \tint result2 = 0;\r\n\t\t    \tString[] list = br.readLine().split(\" \");\r\n\t\t    \tint last = Integer.parseInt(list[N-1]);\r\n\t\t    \t\r\n\t\t    \tint result2_max = 0;\r\n\t\t    \tfor(int j=N-2; j>=0; j--){\r\n\t\t    \t\tint first = Integer.parseInt(list[j]);\r\n\t\t    \t\tif(last < first){\r\n\t\t    \t\t\tresult1 += first-last;\r\n\t\t    \t\t\tif(result2_max < first-last){\r\n\t\t    \t\t\t\tresult2_max = first-last;\r\n\t\t    \t\t\t}\r\n\t\t    \t\t}\r\n\t\t    \t\tlast = first;\r\n\t\t    \t}\r\n\t\t    \t\r\n\t\t    \tSystem.out.println(result2_max);\r\n\t\t    \t\r\n\t\t    \tfor(int j=N-2; j>=0; j--){\r\n\t\t    \t\tint thisD = Integer.parseInt(list[j]);\r\n\t\t    \t\tif(thisD < result2_max){\r\n\t\t    \t\t\tresult2 += thisD;\r\n\t\t    \t\t}else{\r\n\t\t    \t\t\tresult2 += result2_max;\r\n\t\t    \t\t}\r\n\t\t    \t}\r\n\t\t    \t\r\n\t\t    \tout.println(\"Case #\" + (i+1) + \": \" + result1 + \" \" + result2);\r\n\t\t    }\r\n\t\t    \r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t    System.exit(0);\r\n\t\t\r\n\t}\r\n\t\r\n}", "idx": "1628"}
{"func": "package googlejam1.p629;\n//package codechef;\nimport java.io.*;\n\nclass CodeJAM {\n\n    public static void main(String[] args) throws java.lang.Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine()), n, x, c, r, arr[];\n        String s[], ss;\n        for (int bv = 1; bv <= t; bv++) {\n            n = Integer.parseInt(br.readLine());\n            s = br.readLine().split(\" \");\n            arr = new int[n];\n            for (int i = 0; i < n; i++) {\n                arr[i] = Integer.parseInt(s[i]);\n            }\n            int max = 0;\n            for (int i = 1; i < n; i++) {\n                if ((arr[i-1] - arr[i]) > max) {\n                    max = arr[i -1] - arr[i];\n                }\n            }\n            long ans = 0;\n            for (int i = 0; i < n - 1; i++) {\n                if (arr[i] <= max) {\n                    ans = ans + (long)arr[i];\n                } else {\n                    ans += (long)max;\n                }\n            }\n            long ans1 = 0;\n            for (int i = 1; i < n; i++) {\n                if (arr[i - 1] > arr[i]) {\n                    ans1 += (long)(arr[i - 1] - arr[i]);\n                }\n            }\n            System.out.println(\"Case #\"+bv+\": \"+ans1+\" \"+ans);\n        }\n    }\n}\n", "idx": "1629"}
{"func": "package googlejam1.p631;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n\r\npublic class mushrooms {\r\n\t\r\n\tpublic static void main (String args[]) throws IOException\r\n\t{\r\n\t\tBufferedReader cin  = new BufferedReader(new FileReader(\"c:\\\\input.txt\"));\r\n\t\t//BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tPrintWriter cout = new PrintWriter(\"c:\\\\users\\\\johng_000\\\\desktop\\\\output.txt\");\r\n\t\tStringTokenizer st = new StringTokenizer(cin.readLine());\r\n\t\tint T = Integer.parseInt(st.nextToken());\r\n\t\tfor (int count = 0; count < T; count++)\r\n\t\t{\r\n\t\t\tst = new StringTokenizer (cin.readLine());\r\n\t\t\tint N = Integer.parseInt(st.nextToken());\r\n\t\t\tint [] mu = new int [N];\r\n\t\t\tst = new StringTokenizer (cin.readLine());\r\n\t\t\tfor (int i = 0; i < N; i++)\r\n\t\t\t{\r\n\t\t\t\tmu[i] = Integer.parseInt(st.nextToken());\r\n\t\t\t}\r\n\t\t\tlong firstMethod = 0;\r\n\t\t\tlong secondMethod = 0;\r\n\t\t\tlong max = mu[0] - mu[1];\r\n\t\t\tfor (int i = 2; i < N; i++)\r\n\t\t\t{\r\n\t\t\t\tif (mu[i-1] - mu[i] > max)\r\n\t\t\t\t\tmax = mu[i-1] - mu[i];\r\n\t\t\t}\r\n\t\t\tfor (int i = 1; i < N; i++)\r\n\t\t\t{\r\n\t\t\t\tif (mu[i-1] > mu[i])\r\n\t\t\t\t\tfirstMethod += mu[i-1] - mu[i];\t\t\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < N-1; i++)\r\n\t\t\t{\r\n\t\t\t\tif (mu[i] > max)\r\n\t\t\t\t\tsecondMethod += max;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tsecondMethod += mu[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcout.println(\"Case #\" + (count + 1) +\": \" + firstMethod + \" \" + secondMethod);\r\n\t\t}\r\n\t\tcout.close();\r\n\t}\r\n}\r\n", "idx": "1631"}
{"func": "package googlejam1.p634;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Iterator;\n\n\npublic class Test {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t\tBufferedReader in;\n\t\tPrintWriter out;\n\t\ttry {\n\t\t\t\n\t\t\tin = new BufferedReader(new FileReader(\"/home/devesh/Downloads/A-large (1).in\"));\n\t\t\tout = new PrintWriter(new FileWriter(\"/home/devesh/Code_jam/output.txt\")); \n\t\t \n\t\t\t\n\t\t\t\n\t\tint T = Integer.parseInt(in.readLine()); \n\t\tArrayList<Integer> list;\n\t\tint count=0,cnt=0,s;\n\t\tString str;\n\t\tString arr[];\n\t\t\n\t\t\n\t\tfor(int i=1; i<=T ; i++)\n\t\t{\n\t\t\t// Case 1\n\t\t\tint N = Integer.parseInt(in.readLine());\n\t\t\tString S = in.readLine();\n\t\t\tString inpt[] = S.split(\" \");\n\t\t\tint[] inp = new int [N];\n\t\t\tint sum1 = 0,sum2=0,maxdiff=0;\n\t\t\tfor (int n=0; n < N ; n++)\n\t\t\t{\n\t\t\t\tinp[n] = Integer.parseInt(inpt[n]);\n\t\t\t\tif(n>0 && inp[n-1] > inp[n])\n\t\t\t\t{\n\t\t\t\t\tsum1= sum1 + inp[n-1] - inp[n];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int n=1; n < N ; n++)\n\t\t\t{\n\t\t\t\tif(inp[n-1] > inp[n] && maxdiff < inp[n-1] - inp[n] )\n\t\t\t\t\tmaxdiff = inp[n-1] - inp[n];\n\t\t\t}\n\t\t\t//System.out.println(maxdiff);\n\t\t\tfor (int n=0; n < N-1 ; n++)\n\t\t\t{\n\t\t\t\tif(maxdiff > inp[n])\n\t\t\t\t\tsum2  = sum2 + inp[n];\n\t\t\t\telse\n\t\t\t\t\tsum2 = sum2 + maxdiff;\n\t\t\t}\n\t\t\t\n\t\t\tout.println(\"Case #\"+i+\": \"+sum1 + \" \"+ sum2);\n\t\t\tSystem.out.println(sum1);\n\t\t\tSystem.out.println(sum2);\n\t\t\t\n\t\t}\n\t\t \n\t\tout.close();\n\t\t\n\t\tin.close();\n\t\t\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\n\t}\n\n\t\n}\n", "idx": "1634"}
{"func": "package googlejam1.p638;\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.io.BufferedOutputStream;\nimport java.io.FileOutputStream;\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\nimport java.util.Set;\nimport java.util.TreeSet;\n\n\npublic class MushrooMonster {\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t\n\t\t//System.setIn(new FileInputStream(\"a-l.in\"));\n\t\t//System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(\"a_l.out\")), true));\n\t\t\t\t\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tint totalCaseNumber = Integer.parseInt( reader.readLine() );\n\t\tfor(int caseNo=1 ; caseNo<=totalCaseNumber ; caseNo++ ) {\n\t\t\tString line = reader.readLine();\n\t\t\tline = reader.readLine();\n\t\t\tString[] parts = line.split(\" \");\n\n\t\t\tint[] m = new int[parts.length];\n\t\t\tfor(int i=0 ; i<parts.length ; i++ ) {\n\t\t\t\tm[i] = Integer.parseInt(parts[i]);\n\t\t\t}\n\t\t\t\n\t\t\tint res1 = 0, res2 = 0, largeDiff = 0;\n\t\t\tfor(int i=1 ; i<m.length ; i++ ) {\n\t\t\t\tif( m[i] < m[i-1]) {\n\t\t\t\t\tint diff = m[i-1] - m[i];\n\t\t\t\t\tres1 += diff;\n\t\t\t\t\tlargeDiff = Math.max(largeDiff, diff);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//int rate = largeDiff % 10 == 0 ? largeDiff/10 : (largeDiff/10) + 1;\n\t\t\t//int maxEat = rate * 10;\n\t\t\tfor(int i=0 ; i<m.length - 1 ; i++ ) {\n\t\t\t\tif( m[i] <= largeDiff ) {\n\t\t\t\t\tres2 += m[i];\n\t\t\t\t} else {\n\t\t\t\t\tres2 += largeDiff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + caseNo + \": \" + res1 + \" \" + res2);\n\t\t}\n\t\treader.close();\n\t}\n}\n", "idx": "1638"}
{"func": "package googlejam1.p639;\nimport java.util.*;\nimport java.io.*;\n\nimport static java.lang.System.*;\npublic class MushMonster {\n\n\tpublic static void main(String[] args) throws IOException{\n\t\tFileReader fr=new FileReader(\"in.txt\");\n\t\tBufferedReader textReader =new BufferedReader(fr);\n\t\tint num = Integer.parseInt(textReader.readLine());\n\t\tfor(int k=0;k<num;k++)\n\t\t{\n//keep\t\n\t\tint\tcount=Integer.parseInt(textReader.readLine());\n\t\tString read = textReader.readLine();\n\t\tint meth1;\n\t\tint meth2;\n\t\tint shroom1=0;\n\t\tint shroom2=0;\n\t\tString[] str=read.split(\" \");\n\t\tint[] intr=new int[str.length];\n\t\tfor(int l=0;l<str.length;l++)\n\t\t{\n\t\t\tintr[l]=Integer.parseInt(str[l]);\n\t\t}\n\t\tint[] intrd=new int[str.length-1];\n\t\tfor(int m=0;m<str.length-1;m++)\n\t\t{\n\t\t\tintrd[m]=intr[m]-intr[m+1];\n\t\t}\n\t\tArrays.sort(intrd);\n\t\tint max=intrd[intrd.length-1];\n\t\t//out.println(max);\n\t\tfor(int j=0; j<count; j++)\n\t\t{\t\n\t\t\t//out.println(count);\n\t\t\tif(j<count-1&&intr[j]>intr[j+1])\n\t\t\t\tshroom1+=intr[j]-intr[j+1];\n\t\t\tif(intr[j]>max&&j<count-1)\n\t\t\t\tshroom2+=max;\n\t\t\telse if(j<count-1)\n\t\t\t\tshroom2+=intr[j];\n\t\t\t//out.println(shroom2);\n\t\t\t\n\t\t}\n\t\t\n\t\tout.println(\"Case #\"+(k+1)+\": \"+shroom1+\" \"+shroom2);\n//keep\t    \n\t\t}\n\t\ttextReader.close();\n\t}\n\n}\n", "idx": "1639"}
{"func": "package googlejam1.p640;\nimport java.util.Scanner;\r\n\r\n/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n/**\r\n *\r\n * @author Vishal\r\n */\r\npublic class MyMushroom {\r\n    public static void main(String args[]){\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        for(int k=1;k<=t;k++){\r\n            int n = sc.nextInt();\r\n            int a[] = new int[n];\r\n            int i=0;\r\n            for(i=0;i<n;i++){\r\n                a[i] = sc.nextInt();\r\n            }\r\n            int max = 0;\r\n            int total2=0;\r\n            int total1=0;\r\n            int diff;\r\n            for(i=0;i<n-1;i++){\r\n                diff=a[i]-a[i+1];\r\n                if(diff>max)\r\n                    max = diff;\r\n\r\n            }\r\n            for(i=0;i<n-1;i++){\r\n                if(a[i]>a[i+1])\r\n                    total1+=a[i]-a[i+1];\r\n\r\n            }\r\n            for(i=0;i<n-1;i++){\r\n                if(a[i]<max)\r\n                    total2+=a[i];\r\n                else\r\n                    total2+=max;\r\n            }\r\n            System.out.println(\"Case #\"+k+\": \"+total1+\" \"+total2);\r\n\r\n        }\r\n    }\r\n}\r\n", "idx": "1640"}
{"func": "package googlejam1.p641;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class prblmA {\r\n    final static String PROBLEM_NAME = \"prblmA\";\r\n    final static String WORK_DIR = \"F:\\\\GCJ\\\\\" + PROBLEM_NAME + \"\\\\\";\r\n\r\n    public static void main(String[] args) throws Exception {\r\n         //Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-small-attempt0.in\"));\r\n         Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-large.in\"));\r\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\r\n        int caseCnt = sc.nextInt();\r\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\r\n           // System.out.println(\"Processing test case \" + (caseNum + 1));\r\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n\t\t\tprblmA r = new prblmA();\r\n            int N= sc.nextInt();\n\t\t\tint m[] = new int[N];\n\t\t\t for(int i=0;i<N;i++)\n\t\t\t    m[i]=sc.nextInt();\n\t\t\t int c1=0,c2=0;\n\t\t\tint d=0;\n\t\t\tfor(int i=1;i<N;i++)\n\t\t\t{\n\t\t\t\tif(m[i]<m[i-1])\n\t\t\t\t{\n\t\t\t\t\tc1+=m[i-1]-m[i]; \n\t\t\t\t\tif((m[i-1]-m[i])>d)\n\t\t\t\t\t{d=m[i-1]-m[i];}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<N-1;i++)\n\t\t\t{\n\t\t\t\tc2+=Math.min(m[i],d);\n\t\t\t}\n\t\t\t           \n\t\t\t pw.println(c1+\" \"+c2);\r\n        }\r\n        pw.flush();\r\n        pw.close();\r\n        sc.close();\r\n    }\r\n}\r\n", "idx": "1641"}
{"func": "package googlejam1.p642;\n\n\nimport java.math.*;\nimport java.io.*;\nimport java.util.*;\nimport javax.swing.*;\n\n\n@SuppressWarnings(\"unused\")\npublic class CodeJamR1 {\n\tprivate static String in;\n\tprivate static String out;\n\tpublic static void main(String[] args) throws IOException{\n\n\n\t\tBufferedReader inputStream = new BufferedReader(new FileReader(\"in.txt\"));\n\t\tBufferedWriter outputStream = new BufferedWriter(new FileWriter(\"out.txt\"));\n\t\tin = inputStream.readLine();\n\t\tint testCaseNum = Integer.parseInt(in);\n\t\tfor(int i = 0; i < testCaseNum; i++){\n\t\t    in = inputStream.readLine();\n\t\t    int size = Integer.parseInt(in);\n\t\t    int[] array = new int[size];\n\t\t    in = inputStream.readLine();\n\t\t    String[] split = in.split(\" \");\n\t\t    int last = 0;\n\t\t    int count1 = 0;\n\t\t    double rate = 0;\n\t\t    for(int j = 0; j < (size-1); j++){\n\t\t        if( Integer.parseInt(split[j]) - Integer.parseInt(split[j+1]) > 0 ) {\n\t\t            count1 += Integer.parseInt(split[j]) - Integer.parseInt(split[j+1]);\n\t\t        }\n\t\t        if( ( Integer.parseInt(split[j]) - Integer.parseInt(split[j+1]) > rate ) ) {\n\t\t            rate = Integer.parseInt(split[j]) - Integer.parseInt(split[j+1]);\n\t\t        }\n\t\t    }\n\t\t    int count2 = 0;\n\t\t    for(int j = 0; j < (size-1); j++){\n\t\t        if( Integer.parseInt(split[j]) < rate )\n\t\t            count2 += Integer.parseInt(split[j]);\n\t\t        else\n\t\t            count2 += rate;\n\t\t    }\n\t\t   outputStream.write(\"Case #\" + (i+1) + \": \" + count1 + \" \" + (int)count2);\n\t\t   outputStream.newLine();\n\t\t   }\n\t\tinputStream.close();\n\t\toutputStream.close();\n\n\n\t}\n} //END COMPETITION CLASS\n", "idx": "1642"}
{"func": "package googlejam1.p645;\n\r\n\r\nimport java.io.File;\r\nimport java.util.Scanner;\r\n\r\npublic class A\r\n{\r\n\r\n\t//public static String fileName = \"res/r1a-A-sample.in\";\r\n\t//public static String fileName = \"res/r1a-A-small-attempt0.in\";\r\n\t//public static String fileName = \"res/r1a-A-small-attempt1.in\";\r\n\tpublic static String fileName = \"res/r1a-A-large.in\";\r\n\t\t\t\r\n\t\r\n\tpublic static void main(String[] args) throws Exception\r\n\t{\r\n\t\tScanner scanner = new Scanner(new File(fileName));\r\n\t\t\r\n\t\tint T = scanner.nextInt();\r\n\t\tfor (int i = 0; i < T; i++)\r\n\t\t{\r\n\t\t\tint N = scanner.nextInt();\r\n\t\t\tint[] in = new int[N];\r\n\t\t\tfor (int j = 0; j < N; j++)\r\n\t\t\t{\r\n\t\t\t\tin[j] = scanner.nextInt();\r\n\t\t\t}\n\t\t\tlong out = 0;\n\t\t\tint start = 0;\t\t\n\t\t\tfor (int i1 = 0; i1 < in.length; i1++)\n\t\t\t{\n\t\t\t\tif (in[i1] > start)\n\t\t\t\t{\n\t\t\t\t\tstart = in[i1];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tout += (start - in[i1]);\n\t\t\t\t\tstart = in[i1];\n\t\t\t\t}\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong y = out;\n\t\t\t// max difference is at least 1 rate\n\t\t\tint maxDiff = 0;\n\t\t\tlong out1 = 0;\n\t\t\tfor (int i2 = 0; i2 < in.length - 1; i2++)\n\t\t\t{\n\t\t\t\tif ( (in[i2] - in[i2+1] > maxDiff))\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = (in[i2] - in[i2+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlong rate = maxDiff;\n\t\t\tfor (int i1 = 0; i1 < in.length - 1; i1 ++)\n\t\t\t{\n\t\t\t\tout1 += Math.min(rate, in[i1]);\n\t\t\t}\r\n\t\t\tlong z = out1;\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + y + \" \" + z);\r\n\t\t}\r\n\t\t\r\n\t\tscanner.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1645"}
{"func": "package googlejam1.p648;\n\nimport java.util.Scanner;\n\n/**\n *\n * @author aboRagab\n */\npublic class MushroomMonster2 {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int i = 1; i <= T; i++) {\n            int N = in.nextInt();\n            int[] intervals = new int[N];\n            for (int j = 0; j < N; j++) {\n                intervals[j] = in.nextInt();\n            }\n            // method 1\n\t\t\tint eat1 = 0;\n\t\t\tfor (int i2 = 0; i2 < intervals.length - 1; i2++) {\n\t\t\t    if (intervals[i2] > intervals[i2 + 1]) {\n\t\t\t        eat1 += intervals[i2] - intervals[i2 + 1];\n\t\t\t    }\n\t\t\t}\n\t\t\t// method 2\n\t\t\t// get the bigest can be eaten\n\t\t\tint eat2 = 0, maxEaten = 0;\n\t\t\tfor (int i3 = 0; i3 < intervals.length - 1; i3++) {\n\t\t\t    if (intervals[i3] - intervals[i3 + 1] > maxEaten) {\n\t\t\t        maxEaten = intervals[i3] - intervals[i3 + 1];\n\t\t\t    }\n\t\t\t}\n\t\t\t// now eat and count\n\t\t\tfor (int i1 = 0; i1 < intervals.length - 1; i1++) {\n\t\t\t    if (intervals[i1] <= maxEaten) {\n\t\t\t        eat2 += intervals[i1];\n\t\t\t    } else {\n\t\t\t        eat2 += maxEaten;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\t// output\n\t\t\tSystem.out.println(\"Case #\" + i + \": \" + eat1 + \" \" + eat2);\n        }\n    }\n}\n", "idx": "1648"}
{"func": "package googlejam1.p651;\n/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n//package codejam;\r\n\r\n/**\r\n *\r\n * @author Saalim\r\n */\r\nclass ushroom {\r\n    public static void main(String[] args) throws java.io.IOException {\r\n        java.io.BufferedReader br =  new java.io.BufferedReader(new java.io.InputStreamReader(System.in));\r\n        int t = Integer.parseInt(br.readLine());\r\n        for (int i = 0; i < t; i++) {\r\n            int n = Integer.parseInt(br.readLine());\r\n            int arr[] = new int[n];\r\n            int diff=0;\r\n            String s[] = br.readLine().split(\" \");\r\n            for (int j = 0; j < n; j++) {\r\n                arr[j] = Integer.parseInt(s[j]);\r\n            }\r\n            int max=0;\r\n            for (int j = 1; j < n; j++) {\r\n                if(arr[j]<arr[j-1]){\r\n                    diff+=arr[j-1]-arr[j];\r\n                    if((arr[j-1]-arr[j])>max){\r\n                        max=arr[j-1]-arr[j];\r\n                    }\r\n                }\r\n            }\r\n//            int r = max/10;\r\n////            if(max%10!=0){\r\n////                r++;\r\n////            }\r\n//            r=r*10;\r\n            int diff2=0;\r\n            for (int j = 0; j < n-1; j++) {\r\n                if(arr[j]<=max){\r\n                    diff2=diff2+arr[j];\r\n                }else{\r\n                    diff2=diff2+max;\r\n                }\r\n            }\r\n            System.out.println(\"Case #\"+(i+1)+\":\"+\" \"+diff+\" \"+diff2);\r\n        }\r\n    }\r\n}\r\n", "idx": "1651"}
{"func": "package googlejam1.p652;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * Created by Xinan on 18/4/15.\n */\npublic class MushroomMonster {\n\n    public static void main(String[] args) {\n        if (args.length < 1) {\n            System.out.println(\"Missing input!\");\n        } else {\n            try (Scanner sc = new Scanner(new File(args[0]))) {\n                int numCases = sc.nextInt();\n                for (int i = 1; i <= numCases; i++) {\n                    int inputLength = sc.nextInt();\n                    ArrayList<Integer> input = new ArrayList<Integer>();\n                    for (int j = 0; j < inputLength; j++) {\n                        input.add(sc.nextInt());\n                    }\n\t\t\t\t\tint total1 = 0;\n\t\t\t\t\tint max = 0;\n\t\t\t\t\tint previous1 = input.get(0);\n\t\t\t\t\tint diff, current1;\n\t\t\t\t\tfor (int i2 = 1; i2 < input.size(); i2++) {\n\t\t\t\t\t    current1 = input.get(i2);\n\t\t\t\t\t    diff = previous1 - current1;\n\t\t\t\t\t    if (diff > max) {\n\t\t\t\t\t        max = diff;\n\t\t\t\t\t    }\n\t\t\t\t\t    previous1 = current1;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i1 = 0; i1 < input.size() - 1; i1++) {\n\t\t\t\t\t    current1 = input.get(i1);\n\t\t\t\t\t    total1 += current1 < max ? current1 : max;\n\t\t\t\t\t}\n                    int result2 = total1;\n\t\t\t\t\tint total = 0;\n\t\t\t\t\tint previous = input.remove(0);\n\t\t\t\t\tint current;\n\t\t\t\t\twhile (!input.isEmpty()) {\n\t\t\t\t\t    current = input.remove(0);\n\t\t\t\t\t    if (current < previous) {\n\t\t\t\t\t        total += previous - current;\n\t\t\t\t\t    }\n\t\t\t\t\t    previous = current;\n\t\t\t\t\t}\n                    int result1 = total;\n                    System.out.printf(\"Case #%d: %d %d\\n\", i, result1, result2);\n                }\n            } catch (FileNotFoundException e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n}\n", "idx": "1652"}
{"func": "package googlejam1.p654;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n    public static Scanner in;\r\n    public static PrintWriter out;\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n\tin = new Scanner(new BufferedInputStream(new FileInputStream(new File(\r\n\t\t\"input.txt\"))));\r\n\tout = new PrintWriter(new BufferedOutputStream(new FileOutputStream(\r\n\t\tnew File(\"output.txt\"))));\r\n\tint nCases = in.nextInt();\r\n\tin.nextLine();\r\n\tfor (int CASE = 1; CASE <= nCases; CASE++) {\r\n\t    out.print(\"Case #\" + CASE + \": \");\r\n\t    int m = in.nextInt();\n\t\tint[] a = new int[m];\n\t\tint maxD = 0;\n\t\tfor (int i = 0; i < m; i++)\n\t\t    a[i] = in.nextInt();\n\t\tlong r1 = 0, r2 = 0;\n\t\tfor (int i = 0; i < m - 1; i++) {\n\t\t    maxD = Math.max(maxD, a[i] - a[i + 1]);\n\t\t}\n\t\tfor (int i = 1; i < m; i++) {\n\t\t    if (a[i] < a[i - 1])\n\t\t\tr1 += a[i - 1] - a[i];\n\t\t}\n\t\tfor (int i = 0; i < m - 1; i++)\n\t\t    if (a[i] < maxD)\n\t\t\tr2 += a[i];\n\t\t    else\n\t\t\tr2 += maxD;\n\t\tout.println(r1 + \" \" + r2);\r\n\t}\r\n\tout.close();\r\n\tSystem.err.println(\"Done\");\r\n    }\r\n}\r\n", "idx": "1654"}
{"func": "package googlejam1.p655;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\n\r\n\r\npublic class MushroomMonster {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tString inputFile = \"src/MushroomMonster.in\";\r\n\t\tString outputFile = \"src/MushroomMonster.out\";\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(new File(inputFile)));\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(new File(outputFile)));\n\t\tString line = br.readLine();\n\t\tint N = Integer.parseInt(line);\n\t\tint id = 1;\n\t\tfor (int i = 0; i < N; ++i) {\n\t\t\tint D = Integer.parseInt(br.readLine());\n\t\t\tString[] lineSplit = br.readLine().split(\" \");\n\t\t\tint[] arr = new int[D];\n\t\t\tfor (int j = 0; j < D; ++j) {\n\t\t\t\tarr[j] = (Integer.parseInt(lineSplit[j]));\n\t\t\t}\n\t\t\tint sum = 0;\n\t\t\tfor (int i1 = 1; i1 < arr.length; i1++) \n\t\t\t\tif (arr[i1] < arr[i1-1]) sum += (arr[i1-1] - arr[i1]);\n\t\t\tint sum1 = sum;\n\t\t\tint diff = 0;\n\t\t\tfor (int i1 = 1; i1 < arr.length; ++i1)\n\t\t\t\tif (arr[i1-1] - arr[i1] > diff) diff = (arr[i1-1] - arr[i1]);\n\t\t\tSystem.out.println(diff);\n\t\t\tint sum3 = 0;\n\t\t\tfor (int i2 = 1; i2 < arr.length; ++i2) {\n\t\t\t\tint eat = (arr[i2-1] < diff? arr[i2-1] : diff);\n\t\t\t\tsum3 += eat;\n\t\t\t}\n\t\t\tint sum2 = sum3;\n\t\t\tpw.println(\"Case #\"+id+\": \"+sum1 + \" \" + sum2);\n\t\t\tid++;\n\t\t}\n\t\tbr.close();\n\t\tpw.close();\r\n\t}\r\n\t\r\n}\r\n", "idx": "1655"}
{"func": "package googlejam1.p656;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class mush\n{\n\tpublic static void main (String [] args) throws IOException\n\t{\n\t\tBufferedReader br = new BufferedReader (new FileReader (\"A-large.in\"));\n\t\tPrintWriter pw = new PrintWriter(new BufferedWriter (new FileWriter (\"mush.out\")));\n\t\t\n      int t = Integer.parseInt (br.readLine ());\n\t\tfor(int i=0; i<t; i++) {\n         int n = Integer.parseInt (br.readLine ());\n         int anum[] = new int[n];\n         StringTokenizer st = new StringTokenizer(br.readLine(), \" \");\n         for(int j=0; j<n; j++)\n            anum[j] = Integer.parseInt (st.nextToken());\n         int eat1=0;\n         for(int j=0; j<n-1; j++) {\n            if(anum[j]>anum[j+1])\n               eat1+=anum[j]-anum[j+1];\n         }\n         int max=0;\n         for(int j=0; j<n-1; j++) {\n            if(anum[j]-anum[j+1] > max)\n               max = anum[j]-anum[j+1];\n         }\n         int eat2=0;\n         for(int j=0; j<n-1; j++) {\n            if(anum[j] < max)\n               eat2 += anum[j];\n            else\n               eat2+=max;\n         }\n         pw.println(\"Case #\" + (i+1) + \": \" + eat1 + \" \" + eat2);\n      }\n      br.close();\n      pw.close();\n\t}\n}\n", "idx": "1656"}
{"func": "package googlejam1.p660;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class ASmall {\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\n\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(\"A-large.out\"));\n\t\t\n\t\tString line = in.readLine();\n\t\tint n = Integer.parseInt(line);\n\t\tfor(int i=0; i<n; i++){\n\t\t\tline = in.readLine();\n\t\t\tline = in.readLine();\n\t\t\tString[] arr = line.split(\" \");\n\t\t\tint[] m = new int[arr.length];\n\t\t\tm[0] = Integer.parseInt(arr[0]);\n\t\t\tlong min = 0;\n\t\t\tlong minDiff = 0;\n\t\t\tfor(int y=1; y<m.length; y++){\n\t\t\t\tm[y] = Integer.parseInt(arr[y]);\n\t\t\t\tif(m[y] < m[y-1]){\n\t\t\t\t\tmin = min + (m[y-1] - m[y]);\n\t\t\t\t}\n\t\t\t\tif(m[y-1] - m[y] > minDiff){\n\t\t\t\t\tminDiff = m[y-1] - m[y];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlong min2 = 0;\n\t\t\tfor(int y=0; y<m.length-1; y++){\n\t\t\t\tif(m[y] < minDiff){\n\t\t\t\t\tmin2 = min2 + m[y];\n\t\t\t\t}else{\n\t\t\t\t\tmin2 = min2 + minDiff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+min+\" \"+min2+\"\\n\");\n\t\t\twriter.write(\"Case #\"+(i+1)+\": \"+min+\" \"+min2+\"\\n\");\n\t\t}\n\t\tin.close();\n\t\twriter.close();\n\t}\n}\n", "idx": "1660"}
{"func": "package googlejam1.p663;\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemA {\r\n\t\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tPrintWriter print;\r\n\t\ttry {\r\n\t\t\tprint = new PrintWriter(\"outputPrA\");\r\n\t\t\tStringBuilder outputString = new StringBuilder();\r\n\t\t\t\r\n\t\t\tint testCases = Integer.parseInt(in.nextLine());\r\n\t\t\tfor (int i = 0; i < testCases; i++) {\r\n\t\t\t\tString numberOfInputs = in.nextLine();\r\n\t\t\t\tString numberOfMushroomsString = in.nextLine();\n\t\t\t\tString[] mushroomInputs = numberOfMushroomsString.split(\"\\\\s\");\n\t\t\t\tInteger minNoEaten = 0;\n\t\t\t\tfor (int i3 = 0; i3 < Integer.parseInt(numberOfInputs)-1; i3++) {\n\t\t\t\t\tif(Integer.parseInt(mushroomInputs[i3+1]) < Integer.parseInt(mushroomInputs[i3])){\n\t\t\t\t\t\tminNoEaten+=(Integer.parseInt(mushroomInputs[i3])-Integer.parseInt(mushroomInputs[i3+1]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString firstMethod = \"\"+minNoEaten;\n\t\t\t\tInteger numberOfInputs1 = Integer.parseInt(numberOfInputs);\n\t\t\t\tint rate = 0;\n\t\t\t\tfor (int i2 = 0; i2 < numberOfInputs1-1; i2++) {\n\t\t\t\t\tif(Integer.parseInt(mushroomInputs[i2+1]) < Integer.parseInt(mushroomInputs[i2]) && rate < (Integer.parseInt(mushroomInputs[i2])- Integer.parseInt(mushroomInputs[i2+1])) ){\n\t\t\t\t\t\trate = (Integer.parseInt(mushroomInputs[i2])- Integer.parseInt(mushroomInputs[i2+1]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tInteger numberMinEaten=0,numberOfPancakesLeft=0;\n\t\t\t\tfor (int i1 = 0; i1 < numberOfInputs1-1; i1++) {\n\t\t\t\t\tif(Integer.parseInt(mushroomInputs[i1+1]) < Integer.parseInt(mushroomInputs[i1])){\n\t\t\t\t\t\tnumberMinEaten += Math.min(Integer.parseInt(mushroomInputs[i1]), rate);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnumberMinEaten += Math.min(Integer.parseInt(mushroomInputs[i1]), rate);\n\t\t\t\t\t\tnumberOfPancakesLeft += Math.abs(Integer.parseInt(mushroomInputs[i1])-rate);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString secondMethod = \"\"+numberMinEaten;\r\n\t\t\t\tString outputLine = firstMethod+\" \"+secondMethod;\r\n\t\t\t\toutputString.append(\"Case #\"+(i+1)+\": \"+outputLine+\"\\n\");\r\n\t\t\t}\r\n\t\t\tSystem.out.println(outputString);\r\n\t\t\tprint.write(new String(outputString));\r\n\t\t\tprint.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\tSystem.out.println(\"Error Reading the file\");\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n}\r\n", "idx": "1663"}
{"func": "package googlejam1.p667;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\n\r\npublic class MushroomMonster {\r\n\r\n\t/**\r\n\t * @param args\r\n\t * @throws Exception\r\n\t */\r\n\tpublic static void main(String[] args) throws Exception {\r\n\r\n\t\tFileReader fileReader = new FileReader(\"C:/Users/Lakjeewa/Desktop/A-large.in\");\r\n\r\n\t\tBufferedReader br = new BufferedReader(fileReader);\r\n\r\n\t\tString line = br.readLine();\r\n\r\n\t\tint cases = Integer.parseInt(line);\r\n\t\t\r\n\t\tPrintWriter writer = new PrintWriter(\r\n\t\t\t\t\"C:/Users/Lakjeewa/Desktop/A.out\", \"UTF-8\");\r\n\r\n\t\tfor (int i = 0; i < cases; i++) {\r\n\r\n\t\t\tint N = Integer.parseInt(br.readLine());\r\n\r\n\t\t\tString[] array = br.readLine().split(\" \");\r\n\t\t\tint[] nums = new int[N];\r\n\r\n\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\tnums[j] = Integer.parseInt(array[j]);\r\n\t\t\t}\r\n\r\n\t\t\tint min = 0;\r\n\t\t\tint maxDif = 0;\r\n\r\n\r\n\r\n\t\t\tfor (int j = 0; j < N - 1; j++) {\r\n\r\n\t\t\t\tint diff = nums[j] - nums[j + 1];\r\n\r\n\t\t\t\tif (diff > 0) {\r\n\t\t\t\t\tmin = min + diff;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(maxDif < diff){\r\n\t\t\t\t\tmaxDif = diff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tint total = 0;\r\n\t\t\t//double rate = maxDif * 1.0 / 10;\r\n\t\t\t\r\n\t\t\tint eaten = 0;\r\n\r\n\t\t\tfor (int j = 0; j < N-1; j++) {\r\n\t\t\t\t\r\n\t\t\t\tint v = nums[j] - maxDif;\r\n\t\t\t\tif(v > 0){\r\n\t\t\t\t\teaten = eaten + maxDif;\r\n\t\t\t\t}else{\r\n\t\t\t\t\teaten = eaten + nums[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\r\n\t\t\t//System.out.println(\"Case #\" + (i + 1) + \": \" + min + \" \" + eaten);\r\n\t\t\twriter.println(\"Case #\" + (i + 1) + \": \" + min + \" \" + eaten);\r\n\t\t}\r\n\r\n\t\tbr.close();\r\n\t\twriter.close();\r\n\t}\r\n}\r\n", "idx": "1667"}
{"func": "package googlejam1.p670;\n\n\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\nimport javax.swing.plaf.basic.BasicInternalFrameTitlePane.MaximizeAction;\n\npublic class Main {\n\n    Scanner             sc       = new Scanner(getClass().getResourceAsStream(IN));\n    static final String FILENAME = \"A-large\";\n    static final String IN       = FILENAME + \".in\";\n    static final String OUT      = FILENAME + \".out\";\n    PrintStream         out      = System.out;\n\n    public static void main(String args[]) throws Exception {\n        Main r = new Main();\n\t\tr.out = new PrintStream(new FileOutputStream(Main.OUT));\n\t\tint t = r.sc.nextInt();\n\t\t\n\t\tfor (int i = 1; i <= t; i++) \n\t\t{\n\t\t    r.out.print(\"Case #\" + i + \": \");\n\t\t    int met1 = 0;\n\t\t\tint met2 = 0;\n\t\t\t\n\t\t\t\n\t\t\tint nInter = r.sc.nextInt();\n\t\t\t//int[] diferencias = new int[nInter-1];\n\t\t\tint[] hongos = new int[nInter];\n\t\t\t\n\t\t\tif(nInter>0)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tint first = r.sc.nextInt();\n\t\t\t\thongos[0] = first;\n\t\t\t    int second = 0;\n\t\t\t    \n\t\t\t    int maxDifer = 0;\n\t\t\t    int difer = 0;\n\t\t\t    \n\t\t\t\n\t\t\t    for (int i1 = 0; i1 < nInter-1; i1++) \n\t\t\t    {\n\t\t\t\t\tsecond = r.sc.nextInt();\n\t\t\t\t\thongos[i1+1] = second;\n\t\t\t\t\t\n\t\t\t\t\tif(second < first)\n\t\t\t\t\t{\n\t\t\t\t\t\tdifer = (first - second);\n\t\t\t\t\t\t//diferencias[i] = difer;\n\t\t\t\t\t\t\n\t\t\t\t\t\tmet1 += difer;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(difer > maxDifer)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxDifer = difer;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfirst = second;\n\t\t\t\t}\n\t\t\t    \n\t\t\t    for (int i2 = 0; i2 < nInter-1; i2++) \n\t\t\t    {\n\t\t\t\t\tif(hongos[i2] < maxDifer)\n\t\t\t\t\t{\n\t\t\t\t\t\tmet2+=hongos[i2];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmet2+=maxDifer;\n\t\t\t\t\t}\n\t\t\t\t\t//out.println(diferencias[i]);\n\t\t\t\t}\n\t\t\t    \n\t\t\t    //out.println(maxDifer);\n\t\t\t\n\t\t\t}\n\t\t\tr.out.println(met1 + \" \" + met2);\n\t\t}\n\t\t\n\t\tr.sc.close();\n\t\tr.out.close();\n    }\n\n}", "idx": "1670"}
{"func": "package googlejam1.p671;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class A\r\n{\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tString FILE = \"files/A-large\";\r\n\t\tBufferedReader in = new BufferedReader(new FileReader(FILE + \".in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter\r\n\t\t\t\t(new FileWriter(FILE + \".out\")));\r\n\r\n\t\tStringTokenizer st;\r\n\t\tint testCases = Integer.parseInt(in.readLine());\r\n\t\tfor (int test = 1; test <= testCases; test++)\r\n\t\t{\r\n\t\t\tint N = Integer.parseInt(in.readLine());\r\n\t\t\tint[] m = new int[N];\r\n\r\n\t\t\tst = new StringTokenizer(in.readLine());\r\n\t\t\tm[0] = Integer.parseInt(st.nextToken());\r\n\t\t\tlong x = 0, y = 0;\r\n\r\n\t\t\tint jump = 0;\r\n\r\n\t\t\tint current = m[0];\r\n\t\t\tfor (int i = 1; i < N; i++)\r\n\t\t\t{\r\n\t\t\t\tm[i] = Integer.parseInt(st.nextToken());\r\n\t\t\t\tif (m[i] < current)\r\n\t\t\t\t{\r\n\t\t\t\t\ty += current - m[i];\r\n\r\n\t\t\t\t\tint diff = current - m[i];\r\n\t\t\t\t\tif (diff > jump)\r\n\t\t\t\t\t\tjump = diff;\r\n\t\t\t\t}\r\n\t\t\t\tcurrent = m[i];\r\n\t\t\t}\r\n\r\n\t\t\tfor (int i = 0; i < N - 1; i++)\r\n\t\t\t\tif (m[i] < jump)\r\n\t\t\t\t\tx += m[i];\r\n\t\t\t\telse\r\n\t\t\t\t\tx += jump;\r\n\r\n\t\t\tout.printf(\"Case #%d: %d %d%n\", test, y, x);\r\n\t\t}\r\n\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "1671"}
{"func": "package googlejam1.p672;\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Round1AA \r\n{\r\n\tprivate int[] stages;\r\n\tprivate String result;\r\n\t\r\n\tpublic static void main(String[] args)throws Exception \r\n\t{\r\n\t\tScanner sc = new Scanner(new FileInputStream(args[0]));\r\n\t\tPrintWriter writer = new PrintWriter(new FileOutputStream(args[1]));\r\n\t\t\r\n\t\t//Scanner sc = new Scanner(System.in);\r\n\t\t//PrintWriter writer = new PrintWriter(System.out);\r\n\t\t\r\n\t\tint numberOftestCases = sc.nextInt();\r\n\t\t\r\n\t\tfor(int i=0; i<numberOftestCases ; i++)\r\n\t\t{\r\n\t\t\tRound1AA round1aa = new Round1AA();\r\n\t\t\tint count = sc.nextInt();\n\t\t\tround1aa.stages = new int[count];\n\t\t\tfor(int i2=0;i2<count;i2++)\n\t\t\t{\n\t\t\t\tround1aa.stages[i2]= sc.nextInt();\n\t\t\t}\r\n\t\t\t//sratagy1\n\t\t\tint strategy1 = 0;\n\t\t\tint maxSpeed = 0;\n\t\t\tint intOldData = -1; \n\t\t\tfor(int d : round1aa.stages)\n\t\t\t{\n\t\t\t\tif(intOldData != -1)\n\t\t\t\t{\n\t\t\t\t\tif(intOldData > d)\n\t\t\t\t\t{\n\t\t\t\t\t\tint speed = intOldData - d;\n\t\t\t\t\t\tstrategy1 += speed;\n\t\t\t\t\t\tif(maxSpeed < speed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxSpeed = speed;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tintOldData = d;\n\t\t\t\t\n\t\t\t}\n\t\t\tint strategy2 = 0;\n\t\t\t\n\t\t\tfor(int i1=0;i1<(round1aa.stages.length-1);i1++)\n\t\t\t{\n\t\t\t\tint d=round1aa.stages[i1];\n\t\t\t\tif(d < maxSpeed)\n\t\t\t\t{\n\t\t\t\t\tstrategy2 += d;\n\t\t\t\t}else\n\t\t\t\t{\n\t\t\t\t\tstrategy2 += maxSpeed;\n\t\t\t\t}\n\t\t\t}\n\t\t\tround1aa.result = \"\"+strategy1+\" \"+strategy2;\r\n\t\t\twriter.println(\"Case #\"+(i+1)+\": \"+round1aa.result);\n\t\t\twriter.flush();\r\n\t\t}\r\n\t\tsc.close();\r\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t\r\n\r\n}\r\n", "idx": "1672"}
{"func": "package googlejam1.p673;\nimport java.util.*;\r\nimport java.lang.Math;\r\n\r\npublic class A1{\r\n\r\n  public static void main(String[] args){\r\n\tScanner inp=new Scanner(System.in);\r\n    int t=inp.nextInt();\r\n    for(int i=0;i<t;i++){\r\n    \tint n=inp.nextInt();\r\n    \tint[] arr=new int[n];\r\n    \tfor(int j=0;j<n;j++){\r\n    \t\tarr[j]=inp.nextInt();\r\n    \t}\r\n    \tint sum1=0;\r\n    \tint sum2=0;\r\n    \tfor(int k=0;k<n-1;k++){\r\n    \t\t\r\n    \t\tint y=(arr[k]-arr[k+1]>0)? arr[k]-arr[k+1]:0;\r\n    \t\tsum1+=y;\r\n    \t\r\n    \t}\r\n    \tint v=0;\r\n    \tfor(int h=0;h<n-1;h++){\r\n    \t\tv=Math.max(v,arr[h]-arr[h+1]);\r\n    \t}\r\n    \tfor(int d=0;d<n-1;d++){\r\n    \t\tint x=(arr[d]<=v)?arr[d]:v;\r\n    \t\tsum2+=x;\r\n    \t}\r\n\r\n    \tSystem.out.println(\"Case #\"+(i+1)+\": \"+sum1+\" \"+sum2);\r\n    }\r\n}\r\n}", "idx": "1673"}
{"func": "package googlejam1.p675;\nimport java.util.Scanner;\r\n\r\n\r\npublic class Mushroom {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\t\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tint T = input.nextInt();\r\n\t\tfor(int i = 1; i<= T; i++) {\r\n\t\t\tint N = input.nextInt();\r\n\t\t\tint[] m = new int[N];\r\n\t\t\tfor(int j = 0; j<N; j++) {\r\n\t\t\t\tm[j] = input.nextInt();\r\n\t\t\t}\r\n\t\t\tlong Meth1 = 0;\r\n\t\t\tfor(int k =0; k<N-1; k++) {\r\n\t\t\t\tif(m[k]-m[k+1] > 0) {\r\n\t\t\t\t\tMeth1 += m[k]-m[k+1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong Meth2 = 0;\r\n\t\t\tlong constRate = m[N-2] - m[N-1];\r\n\t\t\t\r\n\t\t\tfor(int l = 0; l<N-1; l++) {\r\n\t\t\t\tif(m[l] <= constRate) {\r\n\t\t\t\t\tMeth2 += m[l];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tMeth2 += constRate;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\",i,Meth1,Meth2);\r\n\t\t\t\r\n\t\t}\r\n\t\tinput.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1675"}
{"func": "package googlejam1.p679;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class MushroomMonster \r\n{\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tScanner sc = new Scanner (new File(\"MushroomMonster.in\"));\r\n\t\tBufferedWriter fw = new BufferedWriter(new FileWriter(new File(\"MushroomMonster.out\")));\r\n\t\tint T = sc.nextInt();\r\n\t\tsc.nextLine();\r\n\t\tfor (int caseNum = 1; caseNum <= T; caseNum++)\r\n\t\t{\r\n\t\t\tint x = sc.nextInt();\r\n\t\t\tArrayList<Integer> timeIntervals = new ArrayList<Integer>();\r\n\t\t\tfor(int i = 0; i<x; i++)\r\n\t\t\t\ttimeIntervals.add(sc.nextInt());\r\n\t\t\tint finalCase1Amount = 0;\r\n\t\t\tint previous = timeIntervals.get(0);\r\n\t\t\tint next = 0;\r\n\t\t\tint maximumDifference = 0;\r\n\t\t\tint difference = 0;\r\n\t\t\tfor (int i=1; i<timeIntervals.size(); i++)\r\n\t\t\t{\r\n\t\t\t\tnext = timeIntervals.get(i);\r\n\t\t\t\t\r\n\t\t\t\tdifference = previous-next;\r\n\t\t\t\tif (difference>0)\r\n\t\t\t\t{\r\n\t\t\t\t\tfinalCase1Amount+=difference;\r\n\t\t\t\t\tif (difference>maximumDifference)\r\n\t\t\t\t\t\tmaximumDifference = difference;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tprevious = timeIntervals.get(i);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\tint finalCase2Amount = 0;\r\n\t\t\tint total = 0;\r\n\t\t\t\r\n\t\t\tfor (int i=0; i<timeIntervals.size()-1; i++)\r\n\t\t\t{\r\n\t\t\t\ttotal = timeIntervals.get(i);\t\t\t\t\t\r\n\t\t\t\tif (total-maximumDifference<=0)\r\n\t\t\t\t{\r\n\t\t\t\t\tfinalCase2Amount+=total;\r\n\t\t\t\t\ttotal = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfinalCase2Amount+=maximumDifference;\r\n\t\t\t\t\ttotal -= maximumDifference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfw.write(\"Case #\"+caseNum+\": \"+finalCase1Amount+\" \"+finalCase2Amount+\"\\n\");\r\n\t\t}\r\n\t\tfw.flush();\r\n\t\tfw.close();\r\n\t\tsc.close();\r\n\t}\r\n}\r\n", "idx": "1679"}
{"func": "package googlejam1.p680;\n\nimport java.util.Scanner;\n\n/**\n *\n * @author aboRagab\n */\npublic class MushroomMonster2 {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int i = 1; i <= T; i++) {\n            int N = in.nextInt();\n            int[] intervals = new int[N];\n            for (int j = 0; j < N; j++) {\n                intervals[j] = in.nextInt();\n            }\n             int eat1 = 0;\n        for (int j = 0; j < intervals.length - 1; j++) {\n            if (intervals[j] > intervals[j + 1]) {\n                eat1 += intervals[j] - intervals[j + 1];\n            }\n        }\n       \n        int eat2 = 0, maxEaten = 0;\n        for (int j = 0; j < intervals.length - 1; j++) {\n            if (intervals[j] - intervals[j + 1] > maxEaten) {\n                maxEaten = intervals[j] - intervals[j + 1];\n            }\n        }\n        \n        for (int j = 0; j < intervals.length - 1; j++) {\n            if (intervals[j] <= maxEaten) {\n                eat2 += intervals[j];\n            } else {\n                eat2 += maxEaten;\n            }\n        }\n\n       \n        System.out.println(\"Case #\" + (i) + \": \" + eat1 + \" \" + eat2);\n        }\n    }\n\n\n}\n", "idx": "1680"}
{"func": "package googlejam1.p682;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\npublic class Run {\n\tpublic static final String fileIn = \"textFiles/mushrooms/A-large.in.txt\";\n\tpublic static final String fileOut = \"textFiles/mushrooms/large-out.txt\";\n\t\n\tpublic static void main(String[] args) \n\t\t\tthrows FileNotFoundException, IOException {\n\t\tPrintWriter writer = new PrintWriter(fileOut, \"UTF-8\");\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(fileIn))) {\n\t\t\tint numIn = Integer.parseInt(br.readLine());\n\t\t\tfor (int i = 0; i < numIn; i++) {\n\t\t\t\tint time = Integer.parseInt(br.readLine());\n\t\t\t\tString[] numListString = br.readLine().split(\" \");\n\t\t\t\tint[] intList = new int[time];\n\t\t\t\tint curr = Integer.parseInt(numListString[0]);\n\t\t\t\tintList[0] = curr;\n\t\t\t\tint case1Sum = 0;\n\t\t\t\tint case2NegMax = 0;\n\t\t\t\tfor (int j = 1; j < time; j++) {\n\t\t\t\t\tint next = Integer.parseInt(numListString[j]);\n\t\t\t\t\tintList[j] = next;\n\t\t\t\t\tint diff = next - curr;\n\t\t\t\t\tif (diff < 0) {\n\t\t\t\t\t\tcase1Sum += -diff;\n\t\t\t\t\t\tif (-diff > case2NegMax) {\n\t\t\t\t\t\t\tcase2NegMax = -diff;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcurr = next;\n\t\t\t\t}\n\t\t\t\tint case1 = case1Sum;\n\t\t\t\tint case2Sum = 0;\n\t\t\t\tfor (int j = 0; j < time - 1; j++) {\n\t\t\t\t\tcurr = intList[j];\n\t\t\t\t\tint next = intList[j+1];\n\t\t\t\t\tint diff = next - curr;\n\t\t\t\t\tif (curr < case2NegMax) {\n\t\t\t\t\t\tcase2Sum += curr;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcase2Sum += case2NegMax;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twriter.println(\"Case #\" + (i+1) + \": \" + case1 + \" \" + case2Sum);\n\t\t\t}\n\t\t}\n\t\twriter.close();\n\t}\n}\n", "idx": "1682"}
{"func": "package googlejam1.p684;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\n\r\npublic class A {\r\n\tpublic static void main( String[] args ) throws Exception {\r\n\t\tFileReader fr = new FileReader( \"a.txt\" );\r\n\t\tBufferedReader br = new BufferedReader( fr );\r\n\r\n\t\tint cases = Integer.parseInt( br.readLine() );\r\n\r\n\t\tfor (int c = 1; c <= cases; c++) {\r\n\t\t\tint n = Integer.parseInt( br.readLine() );\r\n\t\t\tint[] m = new int[n];\r\n\t\t\t\r\n\t\t\tint counter = 0;\r\n\t\t\tfor(String s : br.readLine().split(\" \")) {\r\n\t\t\t\tm[counter++] = Integer.parseInt(s);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint method1 = 0;\r\n\t\t\tint maxInterval = 0;\r\n\t\t\tfor(int i = 0; i < m.length - 1; i++) {\r\n\t\t\t\tif(m[i] > m[i+1]) {\r\n\t\t\t\t\tint interval = m[i] - m[i+1];\r\n\t\t\t\t\tmethod1 += interval;\r\n\t\t\t\t\tif(interval > maxInterval) maxInterval = interval;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint method2 = 0;\r\n\t\t\tfor(int i = 0; i < m.length - 1; i++) {\r\n\t\t\t\tmethod2 += Math.min(m[i], maxInterval);\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", c, method1, method2);\r\n\t\t}\r\n\r\n\t\tfr.close();\r\n\t}\r\n}\r\n", "idx": "1684"}
{"func": "package googlejam1.p685;\nimport java.io.*;\nimport java.util.Scanner;\n\n\npublic class problemA {\n\n    public static void main(String[] args) {\n        String results = \"\";\n\n        Scanner input = null;\n        try {\n            input = new Scanner(new File(\"/home/lasantha/Downloads/A-large.in\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n\n\n        int T = 0, N = 0;\n\n        int y = 0;\n        int z = 0;\n        int rate = 0;\n\n        int temprate = 0;\n\n        T = input.nextInt();\n\n        for (int i = 0; i < T; i++) {\n\n            N = input.nextInt();\n\n            int[] data = new int[N];\n\n            for (int j = 0; j < N; j++) {\n                data[j] = input.nextInt();\n            }\n\n            y = 0;\n            z = 0;\n            rate = 0;\n            temprate = 0;\n\n            for (int j = 0; j < N - 1; j++) {\n                if (data[j] > data[j + 1]) {\n                    y += data[j] - data[j + 1];\n\n                    temprate = (data[j] - data[j + 1]);\n\n                    if (temprate > rate) {\n                        rate = temprate;\n                    }\n\n                }\n\n            }\n\n            for (int j = 0; j < N - 1; j++) {\n                if (data[j]-rate  <0) {\n                    z += data[j];\n                } else {\n                    z += rate;\n                }\n            }\n\n\n\n            results += \"Case #\" + (i + 1) + \": \" + y + \" \" + z + \"\\n\";\n\n        }\n\n        System.out.println(results);\n        BufferedWriter writer = null;\n\t\ttry {\n\t\t    writer = new BufferedWriter(new FileWriter(\"output.txt\"));\n\t\t    writer.write(results);\n\t\t    writer.close();\n\t\t    System.out.println(\"Done\");\n\t\t} catch (IOException e) {\n\t\t}\n\n    }\n\n\n}", "idx": "1685"}
{"func": "package googlejam1.p686;\n// Template by fikr\r\n// Google Code Jam Round 1A 2015\r\n// Problem ...........\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Jamur{\r\n    static String filename = \"A-large\";\t// io filnename here\r\n    static String inname = filename + \".in\";    \r\n    static String outname = filename + \".out\";  \r\n    static int n;\r\n    public static void main(String[] args){\r\n        try{\r\n            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));\r\n            //Scanner in = new Scanner(System.in);\r\n            BufferedWriter out = new BufferedWriter(new FileWriter(outname));\r\n            int t = in.nextInt();\r\n            in.nextLine();\r\n            for (int cas = 1; cas <= t; cas++){\r\n                int kurang = 0;\r\n                int temp[] = new int[10000];\r\n                int satu = 0;\r\n                int dua = 0;\r\n                int best = 0;\r\n                int rep = in.nextInt();\r\n                kurang = in.nextInt();\r\n                int first = kurang;\r\n                for (int i = 0; i < rep-1;i++){\r\n                    temp[i] = in.nextInt();\r\n                    int tempor = kurang - temp[i];\r\n                    if (tempor > best) best = tempor;\r\n                    kurang = temp[i];\r\n                    //System.out.println(\"tempor \" + tempor);\r\n                    if (tempor >= 0) satu += tempor;\r\n                }\r\n                if (first < best) dua += first;\r\n                    else dua += best;\r\n                for (int i = 0; i < rep-2;i++){\r\n                    if (temp[i] < best) dua += temp[i];\r\n                    else dua += best;\r\n                }\r\n                //System.out.print(\"Case #\" + cas + \": \" + satu + \" \" + dua + \"\\n\");\r\n                out.write(\"Case #\" + cas + \": \" + satu + \" \" + dua + \"\\n\");\r\n            }\r\n            in.close();\r\n            out.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}", "idx": "1686"}
{"func": "package googlejam1.p687;\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    static Scanner stdin = new Scanner(System.in);    \n    \n    public static void main(String[] args) {\n        int cases = stdin.nextInt();\n        for (int i = 0; i < cases; i++) {\n            Main mt = new Main();\n            mt.n = Main.stdin.nextInt();\n\t\t\tmt.m = new Integer[mt.n];\n\t\t\tfor (int i1 = 0; i1 < mt.n; i1++) {\n\t\t\t    mt.m[i1] = Main.stdin.nextInt();\n\t\t\t}\n            Integer eaten=0;\n\t\t\tfor (int i1 = 1; i1 < mt.n; i1++) {\n\t\t\t    if (mt.m[i1]<mt.m[i1-1]){\n\t\t\t        eaten += mt.m[i1-1]-mt.m[i1];\n\t\t\t    }\n\t\t\t    \n\t\t\t}\n\t\t\tmt.solution = eaten.toString();\n\t\t\tInteger eaten1 = 0;\n\t\t\tInteger max=0;\n\t\t\tfor (int i1 = 1; i1 < mt.n; i1++) {\n\t\t\t    if (mt.m[i1-1]-mt.m[i1]>max){\n\t\t\t        max=mt.m[i1-1]-mt.m[i1];\n\t\t\t    }\n\t\t\t}\n\t\t\tfor (int i2 = 1; i2 < mt.n; i2++) {\n\t\t\t    if (mt.m[i2-1]>max){\n\t\t\t        eaten1 = eaten1 + max;\n\t\t\t    }else{\n\t\t\t        eaten1 = eaten1 + mt.m[i2-1];\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tmt.solution = mt.solution + \" \" + eaten1.toString();\n            System.out.println(\"Case #\"+(1+i)+\": \"+mt.solution);\n        }\n    }    \n\n\n    Integer n;\n    Integer[] m;\n    String solution;\n    \n}\n", "idx": "1687"}
{"func": "package googlejam1.p688;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Scanner;\n\n\npublic class Prob1 {\n\n\tpublic static void main(String[] args) \n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\tint T = in.nextInt();\n\t\tString line = in.nextLine();\n\n\t\tfor (int t = 0; t < T; t++) \n\t\t{\n\t\t\tline = in.nextLine();\n\t\t\tString[] sN = line.split(\" \");\n\t\t\tint N = Integer.parseInt(sN[0]);\n\t\t\t\n\t\t\tline = in.nextLine();\n\t\t\tString[] ss = line.split(\" \");\n\t\t\t\n\t\t\tint[] Num = new int[N]; \n\t\t\tfor(int i = 0; i<N; i++)\n\t\t\t{\n\t\t\t\tNum[i] = Integer.parseInt(ss[i]);\n\t\t\t}\n\t\t\t\n\t\t\tint min1 = 0;\n\t\t\tfor(int i = 0; i<N-1; i++)\n\t\t\t{\n\t\t\t\tif(Num[i+1]<Num[i])\n\t\t\t\t\tmin1 +=Num[i]-Num[i+1];\n\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tint min2 = 0;\n\t\t\tArrayList<Double> diff = new ArrayList<Double>();\n\t\t\tfor(int i = 0; i<N-1; i++)\n\t\t\t{\n\t\t\t\tdouble temp = Num[i]-Num[i+1];\n\t\t\t\tdiff.add(temp);\n\t\t\t}\n\t\t\t\n\t\t\tdouble max_diff = Collections.max(diff);\n\t\t\t\n\t\t\tfor(int i = 0; i<N-1; i++)\n\t\t\t{\n\t\t\t\tif(Num[i+1]>Num[i])\n\t\t\t\t{\n\t\t\t\t\tif(Num[i]<=max_diff)\n\t\t\t\t\t\tmin2 += Num[i];\n\t\t\t\t\telse\n\t\t\t\t\t\tmin2 += max_diff;\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tif(Num[i]<max_diff )\n\t\t\t\t\t\tmin2+= Num[i];\n\t\t\t\t\telse \n\t\t\t\t\t\tmin2+= max_diff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\n\t\t    System.out.printf(\"Case #%d: \", t + 1);\n\t\t\tSystem.out.println(min1 + \" \"+ min2);\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}\n", "idx": "1688"}
{"func": "package googlejam1.p689;\nimport java.io.*;\r\nimport java.math.*;\r\n \r\n class Main {\r\n public static void main (String [] args) throws  IOException\r\n    {\t\r\n    //\tBufferedReader b = new BufferedReader(new InputStreamReader(System.in));\r\n    \tBufferedReader b = new BufferedReader(new FileReader(\"in.txt\"));\r\n    \tPrintWriter out = new PrintWriter(\"System.out\");\r\n    \tlong test = Long.parseLong(b.readLine());\r\n    \tfor(long i=0;i<test;i++){\r\n    \t\tint size = Integer.parseInt(b.readLine());\r\n    \t\tString s = b.readLine();\r\n    \t\tString st[]= s.split(\"\\\\s+\");\r\n    \t\tLong array[]= new Long[size];\r\n    \t\tfor(int k=0;k<size;k++){\r\n    \t\tarray[(int)k]=Long.parseLong(st[k]);\r\n    \t//\tSystem.out.println(array[k]);\r\n    \t\r\n    \t\t\r\n    \t\t}\r\n    \t\tlong ans=0;\r\n    \t\tfor(int k=0;k<size-1;k++){\r\n    \t\t\tif(array[k]-array[k+1]>0){\r\n    \t\t\t\tans=ans+(array[k]-array[k+1]);\r\n    \t\t\t\t//System.out.println(ans);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\tlong constant=0;\r\n    \t\tlong max=0;\r\n    \t\tfor(int k=0;k<size-1;k++){\r\n    \t\t\tif(array[k]-array[k+1]>0){\r\n    \t\t\t\tif((array[k]-array[k+1])>max){\r\n    \t\t\t\t\tmax=(array[k]-array[k+1]);\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t\r\n    \t\tlong ans2=0;\r\n    \t\tfor(int k=0;k<size-1;k++){\r\n    \t\t\t\r\n    \t\t\t\tif(array[k]>max){\r\n    \t\t\t\t\tans2=ans2+max;\t\r\n    \t\t\t\t}\r\n    \t\t\t\telse{\r\n    \t\t\t\t\tans2= ans2+(array[k]);\r\n    \t\t\t\t\t\r\n    \t\t\t\t}\r\n    \t\t\t\r\n    \t\t}\r\n    \t\t\r\n    \t\tout.println(\"Case #\"+(i+1)+\": \"+ans+\" \"+ans2);\r\n    \t\r\n    \t\t\r\n    \t}\r\n        out.flush();\r\n       \r\n    }\r\n}", "idx": "1689"}
{"func": "package googlejam1.p690;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tprivate static final String INPUT = \"A-large.in\";\r\n\tprivate static final String OUTPUT = \"A-large.out\";\r\n\r\n\tprivate Scanner scanner;\r\n\tprivate BufferedWriter writer;\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tA r = new A();\n\t\tr.scanner = new Scanner(new File(A.INPUT));\n\t\tr.writer = new BufferedWriter(new FileWriter(A.OUTPUT));\n\t\tint n = r.scanner.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint n1 = r.scanner.nextInt();\n\t\t\tint[] m = new int[n1];\n\t\t\tfor (int i1 = 0; i1 < n1; i1++) {\n\t\t\t\tm[i1] = r.scanner.nextInt();\n\t\t\t}\n\t\t\tlong sum = 0;\n\t\t\tfor (int i1 = 1; i1 <m.length; i1++) {\n\t\t\t\tif (m[i1] < m[i1-1]) {\n\t\t\t\t\t//less mushrooms, she ate some\n\t\t\t\t\tsum+= m[i1-1] - m[i1];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlong first = sum;\n\t\t\tlong sum1 = 0;\n\t\t\tint maxDif = Integer.MIN_VALUE;\n\t\t\tfor (int i1 = 1; i1 < m.length; i1++) {\n\t\t\t\tmaxDif = Math.max(maxDif, m[i1-1] - m[i1]);\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i2 = 0; i2 < m.length -1; i2++) {\n\t\t\t\tsum1 += Math.min(m[i2], maxDif);\n\t\t\t}\n\t\t\tlong second = sum1;\n\t\t\t\n\t\t\tString line = \"Case #\" + (i+1) + \": \" + first + \" \" + second;\n\t\t\tr.writer.write(line + \"\\n\");\n\t\t\tSystem.out.println(line);\n\t\t}\n\t\tr.scanner.close();\n\t\tr.writer.close();\r\n\t}\r\n}\r\n", "idx": "1690"}
{"func": "package googlejam1.p691;\n\r\n\r\nimport java.io.*;\r\n\r\npublic class DriverA {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tint numCases;\r\n\t\t\r\n\t\tFile in = new File(\"A-large.in\");\r\n\t\tFileWriter out = new FileWriter(\"output\");\r\n\t\tBufferedReader reader = new BufferedReader(new FileReader(in));\r\n\t\tBufferedWriter writer = new BufferedWriter(out);\r\n\t\t\r\n\t\tnumCases = Integer.parseInt(reader.readLine());\r\n\t\t\r\n\t\tfor (int i = 0; i < numCases; i++)\r\n\t\t{\r\n\t\t\tint numInter = Integer.parseInt(reader.readLine());\r\n\t\t\tString[] intervals_String = reader.readLine().split(\" \");\r\n\t\t\tint[] intervals = new int[numInter];\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < numInter; j++)\r\n\t\t\t{\r\n\t\t\t\tintervals[j] = Integer.parseInt(intervals_String[j]);\r\n\t\t\t}\n\t\t\tint total = 0;\n\t\t\tint[] operate = new int[intervals.length];\n\t\t\t// reverse\n\t\t\tfor (int i1 = 1; i1 <= intervals.length; i1++)\n\t\t\t{\n\t\t\t\toperate[intervals.length - i1] = intervals[i1 - 1];\n\t\t\t}\n\t\t\t\n\t\t\tfor (int j = 0, k = 1; k < operate.length; j++, k++)\n\t\t\t{\n\t\t\t\tif(operate[j] < operate[k])\n\t\t\t\t{\n\t\t\t\t\ttotal += (operate[k] - operate[j]);\n\t\t\t\t}\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// All done here\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tfor (int j = 0; j < numInter; j++)\r\n\t\t\t{\r\n\t\t\t\tSystem.out.print(intervals[j] + \" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\t*/\r\n\t\t\t\r\n\t\t\tint x = total;\n\t\t\tint total1 = 0;\n\t\t\tint maxDif = 0;\n\t\t\t// find max difference\n\t\t\tfor(int j = 0, k = 1; k < intervals.length; j++, k++)\n\t\t\t{\n\t\t\t\tif((intervals[j] - intervals[k]) > maxDif)\n\t\t\t\t{\n\t\t\t\t\tmaxDif = (intervals[j] - intervals[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int h = 0; h < intervals.length - 1; h++)\n\t\t\t{\n\t\t\t\tif(maxDif > intervals[h])\n\t\t\t\t{\n\t\t\t\t\ttotal1 += intervals[h];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttotal1 += maxDif;\n\t\t\t\t}\n\t\t\t}\r\n\t\t\tint y = total1;\r\n\t\t\tSystem.out.println(x + \" \" + y);\r\n\t\t\twriter.write(\"Case #\" + (i + 1) + \": \" + x + \" \" + y + \"\\n\");\r\n\t\t}\r\n\t\treader.close();\r\n\t\twriter.close();\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n while (keepGoing)\r\n\t\t{\r\n\t\t\tfor (int k = 0; k < intervals.length; k++)\r\n\t\t\t{\r\n\t\t\t\tif\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif((intervals[intervals.length - 2] - intervals[intervals.length - 1]) % rate < 10 * rate)\r\n\t\t\t{\r\n\t\t\t\tfor(int i = 0; i < intervals.length - 1; i++)\r\n\t\t\t\t\tif((10 * rate) > intervals[i])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttotal += intervals[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttotal += (rate * 10);\r\n\t\t\t\t\t}\r\n\t\t\t\tkeepGoing = false;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\trate++;\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t*/\r\n", "idx": "1691"}
{"func": "package googlejam1.p692;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\n\npublic class mushroomEater {\n\tprivate static Scanner sc;\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tsc = new Scanner(new File(\"/Users/mac/Desktop/A-large.in\"));\n\t\tPrintStream out = new PrintStream(new FileOutputStream(\"/Users/mac/Desktop/output.txt\"));\n\t\tSystem.setOut(out);\n\t\tint cases = Integer.parseInt(sc.nextLine());\n\t\tfor (int i=1;i<=cases; i++){\n\t\t\tint N=sc.nextInt();\n\t\t\tint[] arr = new int[N];\n\t\t\tfor(int j=0;j<N;j++){\n\t\t\t\tarr[j] = sc.nextInt();\n\t\t\t}\n\t\t\tint ans =0;\n\t\t\tfor(int i1=1;i1<arr.length;i1++){\n\t\t\t\t\n\t\t\t\tif(arr[i1]<arr[i1-1]){\n\t\t\t\t\tans = ans + (arr[i1-1]-arr[i1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint mineater = ans;\n\t\t\tint n=arr.length;\n\t\t\tint rate = 0;\n\t\t\tfor(int i2=n-1;i2>0;i2--){\n\t\t\t\tint temp = arr[i2-1]-arr[i2];\n\t\t\t\t//System.out.println(rate);\n\t\t\t\tif (temp>=0 && temp>rate)\n\t\t\t\t\trate=temp;\n\t\t\t}\n\t\t\t\n\t\t\tint ans1 = 0;\n\t\t\tfor (int i1=0;i1<n-1;i1++){\n\t\t\t\t\n\t\t\t\tif (arr[i1]<rate)\n\t\t\t\t\tans1 = ans1 +arr[i1];\n\t\t\t\telse\n\t\t\t\t\tans1 = ans1 + rate;\n\t\t\t}\n\t\t\tint constant = ans1;\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + i + \": \" + mineater +\" \"+ constant);\n\t\t}\n\t\n\t}\n\t\n}\n", "idx": "1692"}
{"func": "package googlejam1.p693;\nimport java.util.Scanner;\r\n\r\n\r\npublic class codjamr11 {\r\n\tpublic static void main(String args[]){\r\n\t\tScanner s=new Scanner(System.in);\r\n\t\tint t=s.nextInt();\r\n\t\tfor(int k=0;k<t;k++){\r\n\t\t\tint n=s.nextInt(),ans1=0,ans2=0,max=0;\r\n\t\t\tint a[]=new int[n];\r\n\r\n\t\t\tfor(int i=0;i<n;i++){\r\n\t\t\t\ta[i]=s.nextInt();\r\n\r\n\t\t\t}\r\n\t\t\tfor(int i=0;i<n;i++){\r\n\t\t\t\tif(i<n-1 && (a[i]-a[i+1])>max)\r\n\t\t\t\t\tmax=a[i]-a[i+1];\r\n\t\t\t}\r\n\t\t\t//\tSystem.out.println(max);\r\n\t\t\tfor(int i=0;i<n-1;i++){\r\n\t\t\t\tif(a[i+1]<a[i]){\r\n\t\t\t\t\tans1+=a[i]-a[i+1];\r\n\t\t\t\t}\r\n\t\t\t\tans2+=Math.min(a[i],max);\r\n\t\t\t}\r\n\t\t\t//ans2-=a[n-1];\r\n\t\t\tSystem.out.println(\"Case #\"+(k+1)+\": \"+ans1+\" \"+ans2);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1693"}
{"func": "package googlejam1.p694;\nimport java.io.BufferedReader;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\nclass A {\r\n\t\r\n\tstatic BufferedReader br;\r\n\tstatic PrintWriter pw;\r\n\tstatic StringTokenizer st;\r\n\t\r\n\tpublic static void main(String[] args)throws IOException {\r\n\t\tbr=new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\tpw=new PrintWriter(new FileOutputStream(\"output_A.in\"));\r\n\t\tint t=Integer.parseInt(br.readLine());\n\t\tfor(int j=1;j<=t;j++) {\n\t\t\tint n=Integer.parseInt(br.readLine());\n\t\t\tst=new StringTokenizer(br.readLine());\n\t\t\tint[] arr=new int[n];\n\t\t\tint ans=0, ans1=0, diff=Integer.MIN_VALUE;\n\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\tarr[i]=Integer.parseInt(st.nextToken());\n\t\t\t}\n\t\t\tfor(int i=0;i<n-1;i++) {\n\t\t\t\tdiff=arr[i]-arr[i+1]>diff?arr[i]-arr[i+1]:diff;\n\t\t\t}\n\t\t\t//pw.println(diff);\n\t\t\tfor(int i=0;i<n-1;i++) {\n\t\t\t\tif(arr[i]<diff)\n\t\t\t\t\tans1+=arr[i];\n\t\t\t\telse\n\t\t\t\t\tans1+=diff;\n\t\t\t\tif(arr[i+1]<arr[i])\n\t\t\t\t\tans+=arr[i]-arr[i+1];\n\t\t\t}\n\t\t\tpw.println(\"Case #\"+j+\": \"+ans+\" \"+ans1);\n\t\t}\r\n\t\tpw.flush();\r\n\t}\r\n}", "idx": "1694"}
{"func": "package googlejam1.p696;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class Q4 {\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tString prefix = \"Case #%d: %d %d\";\r\n\t\t\r\n\t\tString num = \"A\";\r\n//\t\tint time = 0;\r\n//\t\tString file = \"E:\\\\downloads\\\\\" + num + \"-small-attempt\" + time;\r\n//\t\tString file = \"C-small-attempt1\" + time;\r\n\t\t\r\n//\t\tString file = \"E:\\\\downloads\\\\\" + num + \"-large\";\r\n\t\tString file = num + \"-large\";\r\n\t\t\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(file + \".in\"));\r\n\t\tPrintWriter pw = new PrintWriter(file + \".out\");\r\n\t\t\r\n\t\tint t = Integer.parseInt(br.readLine());\r\n\t\tfor (int i = 1; i <= t; i++) {\r\n\t\t\tint ans1 = 0;\r\n\t\t\tint ans2 = 0;\r\n\t\t\tint n = Integer.parseInt(br.readLine());\r\n\t\t\tint[] datas = new int[n];\r\n\t\t\tString[] raw = br.readLine().split(\" \");\r\n\t\t\tfor (int j = 0; j < datas.length; j++)\r\n\t\t\t\tdatas[j] = Integer.parseInt(raw[j]);\r\n\r\n\t\t\t//1\r\n\t\t\tfor (int j = 0; j < datas.length - 1; j++) {\r\n\t\t\t\tint f = datas[j];\r\n\t\t\t\tint s = datas[j + 1];\r\n\t\t\t\t\r\n\t\t\t\tif (s < f)\r\n\t\t\t\t\tans1 += (f - s);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//2\r\n\t\t\tint max = Integer.MIN_VALUE;\r\n\t\t\tfor (int j = 0; j < datas.length - 1; j++) {\r\n\t\t\t\tint f = datas[j];\r\n\t\t\t\tint s = datas[j + 1];\r\n\t\t\t\t\r\n\t\t\t\tint c = f - s;\r\n\t\t\t\tif (c > max)\r\n\t\t\t\t\tmax = c;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < datas.length - 1; j++) {\r\n\t\t\t\tif (datas[j] < max)\r\n\t\t\t\t\tans2 += datas[j];\r\n\t\t\t\telse\r\n\t\t\t\t\tans2 += max;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpw.println(String.format(prefix, i, ans1, ans2));\r\n\t\t}\r\n\t\t\r\n\t\tbr.close();\r\n\t\tpw.close();\r\n\t}\r\n}\r\n", "idx": "1696"}
{"func": "package googlejam1.p697;\nimport java.io.*;\nimport java.util.*;\nimport static java.util.Arrays.*;\n\npublic class AL {\n    static final boolean _PRACTICE = !true;\n    static final boolean _SAMPLE = !true;\n    static final boolean _SMALL = !true;\n    static final String _PROBLEM = \"A\";\n\n    public static void main(String... args) throws IOException {\n        if (!_SAMPLE) {\n            if (_SMALL) {\n                int i = 0;\n                while (new File(_PROBLEM + \"-small\"\n\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\").exists())\n                    i++;\n                i--;\n                boolean test = false;\n                if (new File(_PROBLEM + \"-small\"\n\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\").exists()) {\n                    System.err.println(\"overwrite?(y/n)\");\n                    char c = (char) System.in.read();\n                    test = c != 'y';\n                }\n                if (test) {\n                    System.setIn(new FileInputStream(_PROBLEM + \"-small\"\n\t\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\"));\n                    System.setOut(new PrintStream(_PROBLEM + \"-small-test.out\"));\n\t\t\t\t\tAL r = new AL();\n                    Scanner sc = new Scanner(System.in);\n\t\t\t\t\tint testCase = sc.nextInt();\n\t\t\t\t\t\n\t\t\t\t\tfor (int k = 1; k <= testCase; k++) {\n\t\t\t\t\t    System.out.printf(\"Case #%d: \", k);\n\t\t\t\t\t    System.err.printf(\"Case #%d: \", k);\n\t\t\t\t\t\n\t\t\t\t\t    int n = sc.nextInt();\n\t\t\t\t\t    \n\t\t\t\t\t    int[] mush = new int[n];\n\t\t\t\t\t    for (int i1 = 0; i1 < n; i1++) {\n\t\t\t\t\t    \tmush[i1] = sc.nextInt();\n\t\t\t\t\t    }\n\t\t\t\t\t    \n\t\t\t\t\t    int first = 0;\n\t\t\t\t\t    int second = 0;\n\t\t\t\t\t    \n\t\t\t\t\t    for (int i4 = 0; i4 < n - 1; i4++) {\n\t\t\t\t\t    \tint diff = mush[i4] - mush[i4 + 1];\n\t\t\t\t\t    \tif (diff > 0) {\n\t\t\t\t\t    \t\tfirst += diff;\n\t\t\t\t\t    \t}\n\t\t\t\t\t    }\n\t\t\t\t\t    \n\t\t\t\t\t    int[] diff = new int[n - 1];\n\t\t\t\t\t    for (int i3 = 0; i3 < n - 1; i3++) {\n\t\t\t\t\t    \tdiff[i3] = mush[i3] - mush[i3 + 1];\n\t\t\t\t\t    }\n\t\t\t\t\t    int max = 0;\n\t\t\t\t\t    for (int i5 = 0; i5 < n - 1; i5++) {\n\t\t\t\t\t    \tmax = Math.max(max, diff[i5]);\n\t\t\t\t\t    }\n\t\t\t\t\t\n\t\t\t\t\t    for (int i2 = 0; i2 < n - 1; i2++) {\n\t\t\t\t\t    \tsecond += Math.min(max, mush[i2]);\n\t\t\t\t\t    }\n\t\t\t\t\t    \n\t\t\t\t\t    System.out.printf(\"%d %d\", first, second);\n\t\t\t\t\t    System.err.printf(\"%d %d\", first, second);\n\t\t\t\t\t    \n\t\t\t\t\t    System.out.println();\n\t\t\t\t\t    System.err.println();\n\t\t\t\t\t    \n\t\t\t\t\t}\n\t\t\t\t\tsc.close();\n                    FileReader f1 = new FileReader(_PROBLEM + \"-small-test.out\");\n                    FileReader f2 = new FileReader(_PROBLEM + \"-small\"\n\t\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\");\n                    BufferedReader br1 = new BufferedReader(f1);\n                    BufferedReader br2 = new BufferedReader(f2);\n                    for (int j = 1;; j++) {\n                        String s1 = br1.readLine();\n                        String s2 = br2.readLine();\n                        if (s1 == null && s2 == null) {\n                            System.err.println(\"OK!\");\n                            break;\n                        }\n                        if (s1 == null || s2 == null || !s1.equals(s2)) {\n                            System.err.println(\"failed at line \" + j);\n                            System.err.println(\"expected \" + s2);\n                            System.err.println(\"but \" + s1);\n                            break;\n                        }\n                    }\n                    br1.close();\n                    br2.close();\n                } else {\n                    System.setIn(new FileInputStream(_PROBLEM + \"-small\"\n\t\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\"));\n                    System.setOut(new PrintStream(_PROBLEM + \"-small\"\n\t\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\"));\n\t\t\t\t\tAL r = new AL();\n                    Scanner sc = new Scanner(System.in);\n\t\t\t\t\tint testCase = sc.nextInt();\n\t\t\t\t\t\n\t\t\t\t\tfor (int k = 1; k <= testCase; k++) {\n\t\t\t\t\t    System.out.printf(\"Case #%d: \", k);\n\t\t\t\t\t    System.err.printf(\"Case #%d: \", k);\n\t\t\t\t\t\n\t\t\t\t\t    int n = sc.nextInt();\n\t\t\t\t\t    \n\t\t\t\t\t    int[] mush = new int[n];\n\t\t\t\t\t    for (int i1 = 0; i1 < n; i1++) {\n\t\t\t\t\t    \tmush[i1] = sc.nextInt();\n\t\t\t\t\t    }\n\t\t\t\t\t    \n\t\t\t\t\t    int first = 0;\n\t\t\t\t\t    int second = 0;\n\t\t\t\t\t    \n\t\t\t\t\t    for (int i4 = 0; i4 < n - 1; i4++) {\n\t\t\t\t\t    \tint diff = mush[i4] - mush[i4 + 1];\n\t\t\t\t\t    \tif (diff > 0) {\n\t\t\t\t\t    \t\tfirst += diff;\n\t\t\t\t\t    \t}\n\t\t\t\t\t    }\n\t\t\t\t\t    \n\t\t\t\t\t    int[] diff = new int[n - 1];\n\t\t\t\t\t    for (int i3 = 0; i3 < n - 1; i3++) {\n\t\t\t\t\t    \tdiff[i3] = mush[i3] - mush[i3 + 1];\n\t\t\t\t\t    }\n\t\t\t\t\t    int max = 0;\n\t\t\t\t\t    for (int i5 = 0; i5 < n - 1; i5++) {\n\t\t\t\t\t    \tmax = Math.max(max, diff[i5]);\n\t\t\t\t\t    }\n\t\t\t\t\t\n\t\t\t\t\t    for (int i2 = 0; i2 < n - 1; i2++) {\n\t\t\t\t\t    \tsecond += Math.min(max, mush[i2]);\n\t\t\t\t\t    }\n\t\t\t\t\t    \n\t\t\t\t\t    System.out.printf(\"%d %d\", first, second);\n\t\t\t\t\t    System.err.printf(\"%d %d\", first, second);\n\t\t\t\t\t    \n\t\t\t\t\t    System.out.println();\n\t\t\t\t\t    System.err.println();\n\t\t\t\t\t    \n\t\t\t\t\t}\n\t\t\t\t\tsc.close();\n                }\n            } else {\n                System.setIn(new FileInputStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".in\"));\n                System.setOut(new PrintStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".out\"));\n\t\t\t\tAL r = new AL();\n                Scanner sc = new Scanner(System.in);\n\t\t\t\tint testCase = sc.nextInt();\n\t\t\t\t\n\t\t\t\tfor (int k = 1; k <= testCase; k++) {\n\t\t\t\t    System.out.printf(\"Case #%d: \", k);\n\t\t\t\t    System.err.printf(\"Case #%d: \", k);\n\t\t\t\t\n\t\t\t\t    int n = sc.nextInt();\n\t\t\t\t    \n\t\t\t\t    int[] mush = new int[n];\n\t\t\t\t    for (int i = 0; i < n; i++) {\n\t\t\t\t    \tmush[i] = sc.nextInt();\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t    int first = 0;\n\t\t\t\t    int second = 0;\n\t\t\t\t    \n\t\t\t\t    for (int i = 0; i < n - 1; i++) {\n\t\t\t\t    \tint diff = mush[i] - mush[i + 1];\n\t\t\t\t    \tif (diff > 0) {\n\t\t\t\t    \t\tfirst += diff;\n\t\t\t\t    \t}\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t    int[] diff = new int[n - 1];\n\t\t\t\t    for (int i = 0; i < n - 1; i++) {\n\t\t\t\t    \tdiff[i] = mush[i] - mush[i + 1];\n\t\t\t\t    }\n\t\t\t\t    int max = 0;\n\t\t\t\t    for (int i = 0; i < n - 1; i++) {\n\t\t\t\t    \tmax = Math.max(max, diff[i]);\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    for (int i = 0; i < n - 1; i++) {\n\t\t\t\t    \tsecond += Math.min(max, mush[i]);\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t    System.out.printf(\"%d %d\", first, second);\n\t\t\t\t    System.err.printf(\"%d %d\", first, second);\n\t\t\t\t    \n\t\t\t\t    System.out.println();\n\t\t\t\t    System.err.println();\n\t\t\t\t    \n\t\t\t\t}\n\t\t\t\tsc.close();\n            }\n        } else {\n\t\t\tAL r = new AL();\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tint testCase = sc.nextInt();\n\t\t\t\n\t\t\tfor (int k = 1; k <= testCase; k++) {\n\t\t\t    System.out.printf(\"Case #%d: \", k);\n\t\t\t    System.err.printf(\"Case #%d: \", k);\n\t\t\t\n\t\t\t    int n = sc.nextInt();\n\t\t\t    \n\t\t\t    int[] mush = new int[n];\n\t\t\t    for (int i = 0; i < n; i++) {\n\t\t\t    \tmush[i] = sc.nextInt();\n\t\t\t    }\n\t\t\t    \n\t\t\t    int first = 0;\n\t\t\t    int second = 0;\n\t\t\t    \n\t\t\t    for (int i = 0; i < n - 1; i++) {\n\t\t\t    \tint diff = mush[i] - mush[i + 1];\n\t\t\t    \tif (diff > 0) {\n\t\t\t    \t\tfirst += diff;\n\t\t\t    \t}\n\t\t\t    }\n\t\t\t    \n\t\t\t    int[] diff = new int[n - 1];\n\t\t\t    for (int i = 0; i < n - 1; i++) {\n\t\t\t    \tdiff[i] = mush[i] - mush[i + 1];\n\t\t\t    }\n\t\t\t    int max = 0;\n\t\t\t    for (int i = 0; i < n - 1; i++) {\n\t\t\t    \tmax = Math.max(max, diff[i]);\n\t\t\t    }\n\t\t\t\n\t\t\t    for (int i = 0; i < n - 1; i++) {\n\t\t\t    \tsecond += Math.min(max, mush[i]);\n\t\t\t    }\n\t\t\t    \n\t\t\t    System.out.printf(\"%d %d\", first, second);\n\t\t\t    System.err.printf(\"%d %d\", first, second);\n\t\t\t    \n\t\t\t    System.out.println();\n\t\t\t    System.err.println();\n\t\t\t    \n\t\t\t}\n\t\t\tsc.close();\n\t\t}\n    }\n}\n", "idx": "1697"}
{"func": "package googlejam1.p699;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.io.*;\npublic class HelloGoogleJava {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tString encoding = \"UTF-8\";\n\t\tBufferedReader reader = null;\n\t\tString filename= \"/Users/dhsingh/Downloads/inputA.txt\";\n\t\tString objectFile= \"/Users/dhsingh/Downloads/output_A.txt\";\n\t\tString contentss=\"\";\n\t\tBufferedWriter bw;\n\t\tbw = new BufferedWriter(new FileWriter(objectFile));\n\t\ttry {\n\t\t    reader = new BufferedReader(new InputStreamReader(new FileInputStream(filename), encoding));\n\t\t    String line = reader.readLine();\n\t\t    int T= Integer.parseInt(line);\n\t\t    String[]parsed;\n\t\t    int sum=0;\n\t\t    int first,second;\n\t\t    int diff;\n\t\t    for (int ii=1; ii<=T;ii++) {\n\t\t    \tsum=0;\n\t\t    \tline = reader.readLine();\n\t\t    \tline = reader.readLine();\n\t\t\t\tparsed= line.split(\" \");\n\t\t\t\tfirst=0;\n\t\t\t\tdiff=Integer.parseInt(parsed[0])-Integer.parseInt(parsed[1]);\n\t\t\t\tfor(int i=0;i<parsed.length-1;i++){\n\t\t\t\t\tfirst+=Integer.parseInt(parsed[i])-Integer.parseInt(parsed[i+1])>0?Integer.parseInt(parsed[i])-Integer.parseInt(parsed[i+1]):0;\n\t\t\t\t}\n\t\t\t\tfor(int i=0;i<parsed.length-1;i++)\n\t\t\t\t{\t\n\t\t\t\t\tdiff=Integer.parseInt(parsed[i])-Integer.parseInt(parsed[i+1])>diff?Integer.parseInt(parsed[i])-Integer.parseInt(parsed[i+1]):diff;\n\t\t\t\t}\t\n\t\t\t\tsecond=0;\n\t\t\t\tfor(int i=0;i<parsed.length-1;i++)\n\t\t\t\t{\t\n\t\t\t\t\tsecond+=Integer.parseInt(parsed[i])-Integer.parseInt(parsed[i+1])<diff?(Integer.parseInt(parsed[i])>diff?diff:Integer.parseInt(parsed[i])):diff;\n\t\t\t\t}\n\t\t\t\tcontentss+=\"Case #\"+ii+\": \"+first+\" \"+second+\"\\n\";\n\t\t    }\n\t\t    \n\t\t    \n\t\t\tbw.write(contentss);\n\t\t\t\n\t\t}\n\t\tfinally{\n\t\t\treader.close();\n\t\t\tbw.close();\n\t\t}\n//\t\tBB();\n\t}\n\n\n}\n", "idx": "1699"}
{"func": "package googlejam1.p700;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\n/**\n * Created by anhsu on 4/17/15.\n */\npublic class MushroomMonster {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new FileReader(\"resources/googleCodeJam2015/round1a/mushroomMonster/A-large.in\"));\n        PrintWriter writer = new PrintWriter(\"resources/googleCodeJam2015/round1a/mushroomMonster/A-large.out\", \"UTF-8\");\n\n        int numofTestCases = Integer.valueOf(br.readLine());\n        int[] answer1 = new int[numofTestCases];\n        for (int i = 0; i < numofTestCases; i++) {\n            String testCase = br.readLine();\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int totalA = 0;\n            int currentNumMushroom = Integer.parseInt(st.nextToken());\n            while (st.hasMoreTokens()) {\n                int nextMushroom = Integer.parseInt(st.nextToken());\n                if (nextMushroom < currentNumMushroom) {\n                    totalA += currentNumMushroom - nextMushroom;\n                }\n                currentNumMushroom = nextMushroom;\n            }\n\n            answer1[i] = totalA;\n        }\n\n        br = new BufferedReader(new FileReader(\"resources/googleCodeJam2015/round1a/mushroomMonster/A-large.in\"));\n        numofTestCases = Integer.valueOf(br.readLine());\n        for (int i = 0; i < numofTestCases; i++) {\n            String testCase = br.readLine();\n            String[] array = br.readLine().split(\"\\\\s+\");\n\n            int maxDiff = 0;\n            for (int j = 0; j < array.length - 1; j++) {\n                if ((Integer.parseInt(array[j]) - Integer.parseInt(array[j + 1])) > maxDiff) {\n                    maxDiff = Integer.parseInt(array[j]) - Integer.parseInt(array[j + 1]);\n                }\n            }\n            int rate = maxDiff;\n\n            int answer2 = 0;\n            for (int j = 0; j < array.length - 1; j++) {\n                answer2 += Math.min(rate, Integer.parseInt(array[j]));\n            }\n\n            int testCaseNumber = i + 1;\n            writer.println(\"Case #\" + testCaseNumber + \": \" + answer1[testCaseNumber - 1] + \" \" + answer2);\n        }\n        writer.close();\n        br.close();\n    }\n}\n", "idx": "1700"}
{"func": "package googlejam1.p702;\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class First {\r\n\tpublic static int[] tabela;\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tPrintWriter pr = new PrintWriter(\"neki.txt\");\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\t//pr.print(\"hello\");\r\n\t\tint T = sc.nextInt();\r\n\t\tfor (int i = 0; i < T; i++) {\r\n\t\t\tpr.print(\"Case #\" + (i+1) + \": \");\r\n\t\t\tint st = sc.nextInt();\r\n\t\t\ttabela = new int[st];\r\n\t\t\tfor (int j = 0; j < st; j++) {\r\n\t\t\t\ttabela[j] = sc.nextInt();\r\n\t\t\t}\n\t\t\tint hrana = 0;\n\t\t\tint trenutni = tabela[0];\n\t\t\tfor (int i1 = 1; i1 < tabela.length; i1++) {\n\t\t\t\tif(trenutni > tabela[i1]){\n\t\t\t\t\thrana += trenutni -tabela[i1];\n\t\t\t\t}\n\t\t\t\ttrenutni = tabela[i1];\n\t\t\t}\r\n\t\t\tint a = hrana;\n\t\t\tint max = 0;\n\t\t\tfor (int i1 = 0; i1 < tabela.length-1; i1++) {\n\t\t\t\tint c = tabela[i1] - tabela[i1+1];\n\t\t\t\tif(c > max){\n\t\t\t\t\tmax= c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint hrana1 = 0;\n\t\t\tfor (int i2 = 1; i2 < tabela.length; i2++) {\n\t\t\t\tif(tabela[i2-1] <= max ){\n\t\t\t\t\thrana1 += tabela[i2-1];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\thrana1 += max;\n\t\t\t}\r\n\t\t\tint b = hrana1;\r\n\t\t\tpr.println(a + \" \" + b);\r\n\t\t\t\r\n\t\t}\r\n\t\tsc.close();\r\n\t\tpr.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1702"}
{"func": "package googlejam1.p703;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class ABC{\r\n\tpublic static void main(String args[]) throws Exception{\r\n\t\t\r\n\t\tBufferedReader bf=new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint t=Integer.parseInt(bf.readLine());\r\n\t\tint inc=1;\r\n\t\twhile(t-->0){\r\n\t\t\tint n=Integer.parseInt(bf.readLine());\r\n\t\t\tString str=bf.readLine();\r\n\t\t\tString s[]=str.split(\"\\\\s+\");\r\n\t\t\tlong com1=0,com2=0;\r\n\t\t\tfor(int i=1;i<s.length;i++){\r\n\t\t\t\tint p=Integer.parseInt(s[i-1])-Integer.parseInt(s[i]);\r\n\t\t\t\tif(p>0){\r\n\t\t\t\t\tcom1=com1+p;\r\n\t\t\t\t}\r\n\t\t\t\tif(i==(s.length-1)){\r\n\t\t\t\t\tif(p>0)\r\n\t\t\t\t\t\tcom2=com2+p;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tcom2=com2+Integer.parseInt(s[i-1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\"+inc+\": \"+com1+\" \"+com2);\r\n\t\t\tinc++;\r\n\t\t}\r\n\t}\r\n\r\n}", "idx": "1703"}
{"func": "package googlejam1.p706;\n\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class MushRoom {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n\r\n        long t = sc.nextLong();\r\n\r\n        int i = 1;\r\n\r\n        while (i <= t) {\r\n            int numEle = sc.nextInt();\r\n\r\n            int arr[] = new int[numEle];\r\n            long sum1 = 0, sum2 = 0;\r\n\r\n            arr[0] = sc.nextInt();\r\n            int maxRate = -1;\r\n            for (int j = 1; j < numEle; j++) {\r\n                arr[j] = sc.nextInt();\r\n\r\n                if (arr[j - 1] - arr[j] >= 0) {\r\n                    sum1 += arr[j - 1] - arr[j];\r\n                    maxRate = Math.max(maxRate, arr[j - 1] - arr[j]);\r\n                    \r\n                }\r\n                //else{\r\n                   // maxRate = Math.max(maxRate, arr[j-1]);\r\n                //}\r\n               // System.out.println(maxRate);\r\n               \r\n            }\r\n            \r\n            for(int k =0; k<numEle -1 ; k++){\r\n                if(arr[k]<=maxRate){\r\n                    sum2 += arr[k];\r\n                }else{\r\n                    sum2 += maxRate;\r\n                }\r\n            }\r\n\r\n            System.out.println(\"Case #\" + i + \": \" + sum1 + \" \" + sum2);\r\n            i++;\r\n        }\r\n    }\r\n}\r\n", "idx": "1706"}
{"func": "package googlejam1.p710;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.math.BigInteger;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class A {\r\n\r\n    \r\n\r\n    // *************************************************************************************\r\n    // *********************************** FRAMEWORK\r\n    // ***************************************\r\n    // *************************************************************************************\r\n\r\n    public static BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\r\n    public static boolean isStandardInput = false;\r\n\r\n    public static File input;\r\n    public static FileReader inputReader;\r\n    public static BufferedReader in;\r\n\r\n    public static File output;\r\n    public static FileWriter outputWriter;\r\n    public static BufferedWriter out;\r\n\r\n    public static StringTokenizer st;\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        isStandardInput = true;\r\n        output = new File(\"test.out\");\n\t\toutputWriter = new FileWriter(output);\n\t\tout = new BufferedWriter(outputWriter);\r\n        isStandardInput = false;\n\t\tinput = new File(\"A-large\" + \".in\");\n\t\tinputReader = new FileReader(input);\n\t\tin = new BufferedReader(inputReader);\n\t\toutput = new File(\"A-large\" + \".out\");\n\t\toutputWriter = new FileWriter(output);\n\t\tout = new BufferedWriter(outputWriter);\n\t\t\n\t\tint T = Integer.parseInt(TOKEN());\n\t\t\n\t\tfor (int i = 0; i < T; i++) {\n\t\t    int N = Integer.parseInt(TOKEN());\n\t\t    int[] m = new int[N];\n\t\t    for(int k = 0; k<N; k++){\n\t\t        m[k] = Integer.parseInt(TOKEN());\n\t\t    }\n\t\t    int first = 0;\n\t\t    int second = 0;\n\t\t    int rate = 0;\n\t\t    for (int k = 1; k < N; k++) {\n\t\t        if (m[k - 1] - m[k] > 0) {\n\t\t            first += m[k - 1] - m[k];\n\t\t            rate = Math.max(rate, m[k - 1] - m[k]);\n\t\t        }\n\t\t    }\n\t\t    for (int k = 0; k < N - 1; k++) {\n\t\t        second += Math.min(rate, m[k]);\n\t\t    }\n\t\t\tString line = \"Case #\" + (i + 1) + \": \" + first + \" \" + second;\n\t\t    out.write(line);\n\t\t\tout.write(\"\\n\");\n\t\t\tSystem.out.println(line);\n\t\t}\r\n        if (in != null)\n\t\t    in.close();\n\t\tif (inputReader != null)\n\t\t    inputReader.close();\n\t\t\n\t\tif (out != null)\n\t\t    out.flush();\n\t\tif (out != null)\n\t\t    out.close();\n\t\tif (outputWriter != null)\n\t\t    outputWriter.close();\r\n    }\r\n\r\n    \r\n\r\n    // **************** PRINT METHODS ****************\r\n\r\n    \r\n\r\n    // **************** INPUT DECLARATION ****************\r\n\r\n    \r\n\r\n    // **************** INPUT READING ****************\r\n\r\n    static String TOKEN() throws IOException {\r\n        while (st == null || !st.hasMoreTokens())\r\n            st = new StringTokenizer(isStandardInput ? stdin.readLine() : in.readLine());\r\n        return st.nextToken();\r\n    }\r\n}\r\n", "idx": "1710"}
{"func": "package googlejam1.p711;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Q1 {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tFile f = new File(\"A-large.in\");\r\n\t\tPrintWriter out = new PrintWriter(\"out.txt\");\r\n\t\tScanner s = new Scanner(f);\r\n\t\tint T = s.nextInt();\r\n//\t\ts.nextLine();\r\n\t\tint iter = 0;\r\n\t\twhile(T > 0) {\r\n\t\t\tT--;\r\n\t\t\titer++;\r\n\t\t\tint N = s.nextInt();\r\n\t\t\tint N_i = N;\r\n\t\t\tint[] in = new int[N];\r\n\t\t\tint i = 0;\r\n\t\t\twhile(N_i > 0) {\r\n\t\t\t\tN_i--;\r\n\t\t\t\tin[i++] = s.nextInt();\r\n\t\t\t}\r\n\t\t\tint m1 = 0;\r\n\t\t\tfor(int j = 1; j < N; j++) {\r\n\t\t\t\tif(in[j] < in[j-1]) {\r\n\t\t\t\t\tSystem.out.println(m1);\r\n\t\t\t\t\tm1 += in[j-1] - in[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint max = 0;\r\n\t\t\tint diff = 0;\r\n\t\t\tfor(int j = 0; j < N-1; j++) {\r\n\t\t\t\tdiff = in[j] - in[j+1];\r\n\t\t\t\tif(diff > max) {\r\n\t\t\t\t\tmax = diff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint m2 = 0;\r\n\t\t\tfor(int j = 0; j < N-1; j++) {\r\n\t\t\t\tif(in[j] <= max) {\r\n\t\t\t\t\tm2 += in[j];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tm2 += max;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.println(\"Case #\" + iter + \": \" + m1 + \" \" + m2);\r\n\r\n\t\t}\r\n\t\ts.close();\r\n\t\tout.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1711"}
{"func": "package googlejam1.p712;\n\r\nimport java.io.*;\r\nimport java.util.Arrays;\r\nimport java.util.HashSet;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString output = \"\";\r\n\t\t\r\n\t\tString pathname = \"D:\\\\Documents\\\\Downloads\\\\A-l.in\"; // \ufffd\ufffd\ufffd\ufffd\u00b7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u00b7\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0523\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u01fe\ufffd\ufffd\ufffd\u00b7\ufffd\ufffd\ufffd\ufffd\u0434\ufffd\ufffd\ufffd\u013c\ufffd\u02b1\ufffd\ufffd\u02be\ufffd\ufffd\ufffd\u00b7\ufffd\ufffd\r\n\t\tFile filename = new File(pathname); // \u04aa\ufffd\ufffd\u0221\ufffd\ufffd\ufffd\ufffd\u00b7\ufffd\ufffd\ufffd\ufffdinput\ufffd\ufffdtxt\ufffd\u013c\ufffd\r\n\t\tInputStreamReader reader = new InputStreamReader(new FileInputStream(\r\n\t\t\t\tfilename)); // \ufffd\ufffd\ufffd\ufffd\u04bb\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdreader\r\n\t\tBufferedReader sc = new BufferedReader(reader); // \ufffd\ufffd\ufffd\ufffd\u04bb\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u013c\ufffd\ufffd\ufffd\ufffd\ufffd\u05ea\ufffd\u027c\ufffd\ufffd\ufffd\ufffd\ufffd\u0736\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\n\r\n\t\tint total = Integer.parseInt(sc.readLine());\r\n\t\t//total=2;\r\n\t\tint starting = 1;\r\n\t\t//Syste\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000m.out.println(total);\r\n\t\tint[] arr = new int[total];\r\n\t\tfor (int i = 0; i < total; i++) {\r\n\t\t\tint n = Integer.parseInt(sc.readLine());\r\n\t\t\tString r1 = sc.readLine();\r\n\t\t\tString[] a1 = r1.split(\" \");\r\n\t\t\t//pl(n);\r\n\t\t\tint totalSum=0;\r\n\t\t\tint before=Integer.parseInt(a1[0]);\r\n\t\t\tfor( int k=1;k<n;k++){\r\n\t\t\t\tint mm = Integer.parseInt(a1[k]);\r\n\t\t\t\t//pl(\"before: \"+before+\", mm:\"+mm);\r\n\t\t\t\tif(mm<=before){\r\n\t\t\t\t\ttotalSum+=(before-mm);\r\n\t\t\t\t}else{\r\n\t\t\t\t\t//totalSum+=before;\r\n\t\t\t\t}\r\n\t\t\t\tbefore = mm;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//second method \r\n\t\t\tint totalSum2=0;\r\n\t\t\tint before2=Integer.parseInt(a1[0]);\r\n\t\t\tint findMax2=0;\r\n\t\t\t\r\n\t\t\tfor( int k=1;k<n;k++){\r\n\t\t\t\tint mm = Integer.parseInt(a1[k]);\r\n\t\t\t\tint difference=  before2-mm;\r\n\t\t\t\t//pl(\"before: \"+before2+\", mm:\"+mm);\r\n\t\t\t\tif(difference>findMax2){\r\n\t\t\t\t\tfindMax2=difference;\r\n\t\t\t\t}else{\r\n\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tbefore2 = mm;\r\n\r\n\t\t\t}\r\n\t\t\tbefore2=Integer.parseInt(a1[0]);\r\n\t\t\tfor( int k=1;k<n;k++){\r\n\t\t\t\tint mm = Integer.parseInt(a1[k]);\r\n\t\t\t\t//pl(\"before: \"+before+\", mm:\"+mm);\r\n\t\t\t\tint difference=  before2-mm;\r\n\t\t\t\t//p(\"[ difference  \"+difference+\"]\");\r\n\t\t\t\t\r\n\t\t\t\tif(before2<findMax2){\r\n\t\t\t\t\ttotalSum2+=before2;\r\n\t\t\t\t\t//p(\"+\"+findMax2);\r\n\t\t\t\t}else{\r\n\t\t\t\t\ttotalSum2+=findMax2;\r\n\t\t\t\t\t//p(\"+\"+findMax2);\r\n\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tbefore2 = mm;\r\n\r\n\t\t\t}\r\n\t\t\t//pl(\"findMax is \"+findMax2);\r\n\r\n\t\t\t//pl(\"totalSum:\"+totalSum);\r\n\t\t\t//pl(\"totalSum2:\"+totalSum2);\r\n\r\n\t\t\t//pl(\"\");\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t//pl(r1);\r\n\t\t\toutput+=\"Case #\"+(i+1)+\": \"+totalSum+\" \"+totalSum2+\"\\n\";\r\n\t\t\t//arr[i]=needTobeAdded;\r\n\t\t\t//System.out.println();\r\n\t\t}\r\n\r\n\t\t\r\n\t\tWriter writer = null;\r\n\r\n\t\ttry {\r\n\t\t\twriter = new BufferedWriter(new OutputStreamWriter(\r\n\t\t\t\t\tnew FileOutputStream(\"generatedNumber.txt\"), \"utf-8\"));\r\n\t\t\twriter.write(output);\r\n\r\n\t\t} catch (IOException ex) {\r\n\t\t\t// report\r\n\t\t} finally {\r\n\t\t\ttry {\r\n\t\t\t\twriter.close();\r\n\t\t\t} catch (Exception ex) {\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}\r\n", "idx": "1712"}
{"func": "package googlejam1.p713;\n\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Mushroom {\n\n\n\t\tList<ArrayList<Integer>> cases = new ArrayList<ArrayList<Integer>>();\n\t\tList<Integer> method1List = new ArrayList<Integer>();\n\t\tList<Integer> method2List = new ArrayList<Integer>();\n\t\t\n\t\tpublic static void main(String[] args)\n\t\t{\n\t\t\tMushroom so = new Mushroom();\n\t\t\t\n\t\t\tScanner scanner;\n\t\t\ttry {\n\t\t\t\tscanner = new Scanner(new File(\"A-large.in\"));\n\t\t\t\n\t\t\t\tint testCases = scanner.nextInt();\n\t\t\t\n\t\t\t\t//System.out.println(\"testCases: \"+ testCases);\n\t\t\t\tscanner.nextLine();\n\t\t\t\tfor(int i=0; i<testCases; ++i)\n\t\t\t\t{\n\t\t\t\n\t\t\t\t\tso.cases.add(new ArrayList<Integer>());\n\t\t\t\t\tint plateNum = scanner.nextInt();\n\t\t\t\n\t\t\t\t\tfor(int j = 0; j < plateNum; ++j){\n\t\t\t\t\t\t\n\t\t\t\t\t\tso.cases.get(i).add(scanner.nextInt());\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t//so.readFile(\"test1.in\");\n\t\t\t\n\t\t\tfor(ArrayList<Integer> testCase : so.cases)\n\t\t\t{\n\t\t\t\tint size = testCase.size();\n\t\t\t\tint method1 = 0;\n\t\t\t\tint method2 = 0;\n\t\t\t\tint method2Rate = 0;\n\t\t\t\t\n\t\t\t\tfor(int i2 = 1; i2 < size; ++i2){\n\t\t\t\t\tif(testCase.get(i2-1) - testCase.get(i2) > method2Rate) \n\t\t\t\t\t\tmethod2Rate = testCase.get(i2-1) - testCase.get(i2);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int i1 = 1; i1 < size; ++i1){\n\t\t\t\t\tif(testCase.get(i1-1)>testCase.get(i1)){\n\t\t\t\t\t\tmethod1 += testCase.get(i1-1) - testCase.get(i1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//if(i<size-1)\n\t\t\t\t\tmethod2 += Math.abs(method2Rate > testCase.get(i1-1) ? testCase.get(i1-1) : method2Rate);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tso.method1List.add(method1);\n\t\t\t\tso.method2List.add(method2);\n\t\t\t\t\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tPrintWriter writer;\n\t\t\ttry {\n\t\t\t\twriter = new PrintWriter(\"A-large.out\");\n\t\t\t\t\n\t\t\t\tint counter = 0;\n\t\t\t\tfor(int i=0; i<so.method1List.size();++i)\n\t\t\t\t{\n\t\t\t\t\twriter.print(\"Case #\" + (++counter) + \": \" + so.method1List.get(i) +\" \"+ so.method2List.get(i));\n\t\t\t\t\tif(counter<so.method1List.size())\n\t\t\t\t\t{\n\t\t\t\t\t\twriter.println();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twriter.close();\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n}\n", "idx": "1713"}
{"func": "package googlejam1.p714;\n\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\npublic class A {\n\tstatic BufferedReader in;\n\tstatic PrintWriter out;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tin = new BufferedReader(new FileReader(new File(\n\t\t\t\t\"/Users/yfo/Downloads/a2.in\")));\n\t\tout = new PrintWriter(new FileWriter(new File(\n\t\t\t\t\"/Users/yfo/Downloads/a2.out.in\")));\n\n\t\tint T = Integer.parseInt(in.readLine());\n\t\tfor (int t = 0; t < T; t++) {\n\t\t\t\n\t\t\tint N = Integer.parseInt(in.readLine());\n\t\t\tString[] tok = in.readLine().split(\" \");\n\t\t\tint[] res = new int[tok.length];\n\t\t\tfor (int i1 = 0; i1 < tok.length; i1++) {\n\t\t\t\tres[i1] = Integer.parseInt(tok[i1]);\n\t\t\t}\n\t\t\tint[] m = res;\n\t\t\t\n\t\t\tlong first = 0;\n\t\t\tfor (int i=1;i<N;i++) {\n\t\t\t\tif (m[i]<m[i-1]) first += m[i-1] - m[i];\n\t\t\t}\n\t\t\t\n\t\t\tlong max = 0;\n\t\t\tfor (int i=0;i<N-1;i++) {\n\t\t\t\tif (m[i]>m[i+1]) {\n\t\t\t\t\tmax = Math.max(max, m[i]-m[i+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tlong second = 0;\n\t\t\tfor (int i=0;i<N-1;i++) {\n\t\t\t\tif (i!=N-1) {\n\t\t\t\t\tsecond += Math.min(max, m[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tout.println(\"Case #\" + (t + 1) + \": \" + first + \" \"+second);\n\t\t}\n\n\t\tin.close();\n\t\tout.close();\n\t}\n}\n", "idx": "1714"}
{"func": "package googlejam1.p717;\nimport java.io.*;\r\nimport java.util.*;\r\npublic class ProbA\r\n{\r\n    static Scanner sc;\r\n    static PrintWriter pw;\r\n    public static void main(String args[])throws IOException\r\n    {\r\n        sc=new Scanner(new File(\"input/A-large.in\")); //For Scanning input file\r\n        pw=new PrintWriter(new File(\"output/A-large.out\"));//For writing output file\r\n        int T=sc.nextInt();//no. of cases\r\n\r\n        for(int x=1 ;x<=T; x++)\r\n        {\r\n            int N=sc.nextInt();\r\n            int pc[]=new int[N];\r\n            int y=0,z=0,rate=0;\r\n            for(int i=0;i<N;i++)\r\n            {\r\n                pc[i]=sc.nextInt();\r\n                if(i!=0)\r\n                {\r\n                    if(pc[i]<pc[i-1])\r\n                    y+=pc[i-1]-pc[i];\r\n                    \r\n                    if((pc[i-1]-pc[i])>rate)\r\n                    rate=pc[i-1]-pc[i];\r\n                }\r\n            }\r\n            for(int i=0;i<(N-1);i++)\r\n            {\r\n                if(pc[i]<rate)\r\n                z+=pc[i];\r\n                else\r\n                z+=rate;\r\n            }\r\n            pw.println(\"Case #\"+x+\": \"+y+\" \"+z);\r\n        }\r\n        sc.close();\r\n        pw.close();\r\n    }\r\n}\r\n", "idx": "1717"}
{"func": "package googlejam1.p720;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Mushrooms {\r\n\tprivate static int[]mushrooms;\r\n\tpublic static void main(String[]args) throws Exception\r\n\t{\r\n\t\tPrintWriter o=new PrintWriter(new File(\"mushroomsout2.txt\"));\r\n\t\tScanner scan=new Scanner(new File(\"A-large (2).in\"));\r\n\t\tint n=Integer.parseInt(scan.nextLine());\r\n\t\tfor(int i=1;i<=n;i++)\r\n\t\t{\r\n\t\t\tint size=Integer.parseInt(scan.nextLine());\r\n\t\t\tmushrooms=new int[size];\r\n\t\t\tString[] sa=scan.nextLine().split(\" \");\r\n\t\t\tfor(int j=0;j<size;j++)\r\n\t\t\t\tmushrooms[j]=Integer.parseInt(sa[j]);\r\n\t\t\tArrayList<Integer>diffs=new ArrayList<Integer>();\r\n\t\t\tfor(int j=0;j<size-1;j++)\r\n\t\t\t\tdiffs.add(mushrooms[j]-mushrooms[j+1]);\r\n\t\t\tCollections.sort(diffs,Collections.reverseOrder());\r\n\t\t\tint count=0;\r\n\t\t\tfor(int j:diffs)\r\n\t\t\t\tif(j>0)\r\n\t\t\t\t\tcount+=j;\r\n\t\t\tint count2=0;\r\n\t\t\tfor(int j=0;j<size-1;j++)\r\n\t\t\t{\r\n\t\t\t\tif(mushrooms[j]-diffs.get(0)>=0)\r\n\t\t\t\t\tcount2+=diffs.get(0);\r\n\t\t\t\telse\r\n\t\t\t\t\tcount2+=mushrooms[j];\r\n\t\t\t}\r\n\t\t\to.println(\"Case #\"+i+\": \"+count+\" \"+count2);\r\n\t\t}\r\n\t\to.close();\r\n\t}\r\n}\r\n", "idx": "1720"}
{"func": "package googlejam1.p723;\nimport java.util.*;\nimport java.io.*;\n\npublic class GCJTemplate {\n    \n    public static void main(String[] args) {\n        String filePath = new File(\"\").getAbsolutePath();\n        String readFilePath = filePath.concat(\"/src/text.in\");\n        String writeFilePath= filePath.concat(\"/src/text.out\");\n\n        File inFile = new File(readFilePath);\n        \n        FileWriter write = null;\n        try {write = new FileWriter(writeFilePath);} catch (IOException ex) {}\n        PrintWriter print_line = new PrintWriter(write);\n        \n        Scanner inLine = null;\n        try {inLine = new Scanner(inFile);} catch (FileNotFoundException ex) {}\n        \n        int testCases = inLine.nextInt();\n        \n        //if using nextLine;\n        //inLine.nextLine();\n        \n        for(int i = 0; i < testCases; i++){\n            //String line = inLine.nextLine();\n            //System.out.println(line);\n            int ans1 = 0;\n            int ans2 = 0;\n            \n            int numNums = inLine.nextInt();\n            \n            int[] numbers = new int[numNums];\n            \n            for(int j = 0; j < numNums; j++){\n                numbers[j] = inLine.nextInt();\n            }\n            \n            for(int j = 1; j < numNums; j++){\n                if(numbers[j-1]-numbers[j] > 0){\n                    ans1+=numbers[j-1]-numbers[j];\n                }\n            }\n            \n            int maxDiff = 0;\n            for(int j = 1; j < numNums; j++){\n                if(numbers[j-1]-numbers[j] > maxDiff)\n                    maxDiff = numbers[j-1]-numbers[j];\n            }\n            \n            for(int j = 1; j < numNums; j++){\n                if(numbers[j-1] > maxDiff)\n                    ans2+=maxDiff;\n                else\n                    ans2+=numbers[j-1];\n            }\n            \n            //answer is string\n            //print_line.printf(\"Case #%d: %s\",i+1,\"ans\");\n            \n            //answer is int\n            print_line.printf(\"Case #%d: %d %d\",i+1,ans1,ans2);\n            if(i < testCases-1)\n                print_line.println();\n        }\n        \n        print_line.close();\n    }\n    \n}\n", "idx": "1723"}
{"func": "package googlejam1.p724;\n\n\nimport java.util.Scanner;\n\n/**\n * Created by jestinepaul on 18/4/15.\n */\npublic class MushroomMonster {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int numOfCases = scanner.nextInt();\n\n        for (int i = 0; i < numOfCases; i++) {\n\n            int numIntervals = scanner.nextInt();\n\n            int[] numMushrooms = new int[numIntervals];\n\n            for (int j = 0; j < numIntervals; j++) {\n                numMushrooms[j] = scanner.nextInt();\n            }\n\n            int x = 0;\n            int maxDrop = 0;\n            for (int j = 0; j < numIntervals - 1; j++) {\n                if (numMushrooms[j+1] < numMushrooms[j]) {\n                    x = x + numMushrooms[j] - numMushrooms[j + 1];\n                    if ((numMushrooms[j] - numMushrooms[j + 1]) > maxDrop)\n                        maxDrop = numMushrooms[j] - numMushrooms[j + 1];\n                }\n            }\n\n            int y = 0;\n            for (int j = 0; j < numIntervals - 1; j++) {\n                    if (numMushrooms[j] < maxDrop)\n                        y = y + numMushrooms[j];\n                    else\n                        y = y + maxDrop;\n                }\n\n\n            System.out.println(\"Case #\" + (i + 1) + \": \" + x + \" \" + y);\n\n\n\n\n        }\n    }\n\n}\n", "idx": "1724"}
{"func": "package googlejam1.p726;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\nimport java.util.Vector;\n\npublic class Main {\n\n\tpublic static void main(String args[]) {\n\t\tScanner s = null;\n\t\tPrintWriter out = null;\n\n\t\ttry {\n\t\t\tString inputFilename;\n\t\t\tif (args.length > 0) {\n\t\t\t\tinputFilename = args[0];\n\t\t\t} else {\n\t\t\t\tSystem.out.print(\"Input file name: \");\n\t\t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(\n\t\t\t\t\t\tSystem.in));\n\t\t\t\tinputFilename = in.readLine();\n\t\t\t}\n\n\t\t\tFile f = new File(\"data/\" + inputFilename);\n\t\t\tString outputFilename = inputFilename.replaceFirst(\"(\\\\.in)?$\",\n\t\t\t\t\t\".out\");\n\n\t\t\ts = new Scanner(new FileReader(f));\n\t\t\tout = new PrintWriter(new FileWriter(\"data/\" + outputFilename));\n\t\t\tint testCases = s.nextInt();\n\t\t\tfor (int t = 1; t <= testCases; ++t) {\n\t\t\t\tint sampleCount = s.nextInt();\n\t\t\t\tVector<Integer> samples = new Vector<Integer>(sampleCount);\n\t\t\t\tfor (int i = 0; i < sampleCount; ++i) {\n\t\t\t\t\tsamples.add(s.nextInt());\n\t\t\t\t}\n\t\t\t\tint result = 0;\n\t\t\t\tfor (int i = 1; i < samples.size(); ++i) {\n\t\t\t\t\tint diff = samples.elementAt(i - 1) - samples.elementAt(i);\n\t\t\t\t\tif (diff > 0) {\n\t\t\t\t\t\tresult += diff;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tint method1 = result;\n\t\t\t\tint maxDown = 0;\n\t\t\t\tfor (int i = 1; i < samples.size(); ++i) {\n\t\t\t\t\tint diff = samples.elementAt(i - 1) - samples.elementAt(i);\n\t\t\t\t\tif (diff > maxDown) {\n\t\t\t\t\t\tmaxDown = diff;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint result1 = 0;\n\t\t\t\tfor (int i = 1; i < samples.size(); ++i) {\n\t\t\t\t\tif (samples.elementAt(i) == 0) {\n\t\t\t\t\t\tresult1 += samples.elementAt(i - 1);\n\t\t\t\t\t} else if (samples.elementAt(i - 1) < maxDown) {\n\t\t\t\t\t\tresult1 += samples.elementAt(i - 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult1 += maxDown;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint method2 = result1;\n\n\t\t\t\tout.println(\"Case #\" + t + \": \" + method1 + \" \" + method2);\n\t\t\t}\n\n\t\t\tout.close();\n\t\t\ts.close();\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(e);\n\t\t} finally {\n\t\t\tif (null != out)\n\t\t\t\tout.close();\n\t\t\tif (null != s)\n\t\t\t\ts.close();\n\t\t}\n\t}\n}\n", "idx": "1726"}
{"func": "package googlejam1.p727;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Mushroom {\r\n\t\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tFile file = new File(\"C:/Users/puneet/Desktop/test.txt\");\r\n\t\tScanner in = new Scanner(file);\r\n\t\tint total = in.nextInt();\r\n\t\t\r\n\t\tfor(int i=1;i<=total;i++){\r\n\t\t\tint mCount = in.nextInt();\r\n\t\t\tint arr[] = new int[mCount];\r\n\t\t\t\r\n\t\t\tfor(int j=0;j<mCount;j++){\r\n\t\t\t\tarr[j] = in.nextInt();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint min1 = 0;\r\n\t\t\tint min2 = 0;\r\n\t\t\t\r\n\t\t\tint curr = 0;\r\n\t\t\tint maxDiff = 0;\r\n\t\t\tfor(int a=1;a<mCount;a++){\r\n\t\t\t\tif(arr[a]<arr[a-1]){\r\n\t\t\t\t\tmin1+=(arr[a-1]-arr[a]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((arr[a-1]-arr[a])>maxDiff)\r\n\t\t\t\t\tmaxDiff = arr[a-1]-arr[a];\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int b=0;b<(mCount-1);b++){\r\n\t\t\t\t\r\n\t\t\t\tif(arr[b]>maxDiff)\r\n\t\t\t\t\tmin2=min2+maxDiff;\r\n\t\t\t\telse\r\n\t\t\t\t\tmin2=min2+arr[b];\r\n\t\t\t}\r\n\t\t\t//System.out.println(maxDiff);\r\n\t\t\tSystem.out.println(\"Case #\"+i+\": \"+ min1+\" \"+min2);\r\n\r\n\t}\r\n\t}\r\n}\r\n", "idx": "1727"}
{"func": "package googlejam1.p728;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class Main {\r\npublic static void main(String [] args)throws Exception{\r\n\tBufferedReader br=new BufferedReader(new FileReader(\"C:/users/abhishek/Desktop/input.txt\"));\r\n\tFileWriter f=new FileWriter(\"C:/users/abhishek/Desktop/output.txt\");\r\n\tString newLine=System.getProperty(\"line.separator\");\r\n\tint t=Integer.parseInt(br.readLine());\r\n\tfor(int test=1;test<=t;test++){\r\n\tint n=Integer.parseInt(br.readLine());\r\n\tint array[]=new int[n];\r\n\tStringTokenizer st=new StringTokenizer(br.readLine());\r\n\tfor(int i=0;i<n;i++)array[i]=Integer.parseInt(st.nextToken());\r\n\tint ans=0;\r\n\tfor(int i=0;i<n-1;i++){\r\n\t\tif(array[i] <= array[i+1])continue;\r\n\t\telse ans+=array[i]-array[i+1];\r\n\t}\r\n\tint min=-1;\r\n\tfor(int i=0;i<n-1;i++){\r\n\t\tif(array[i] >= array[i+1])min=Math.max(min,array[i]-array[i+1]);\r\n\t}\r\n\tif(min <= 0){\r\n\t f.write(\"Case #\" + test + \": \" + ans + \" \" + \"0\" + newLine);\r\n\t continue;\r\n\t}\r\n\tint temp=0;\r\n\tfor(int i=0;i<n-1;i++){\r\n\t\ttemp+=Math.min(array[i],min);\r\n\t}\r\n\tf.write(\"Case #\" + test + \": \" + ans + \" \" +temp + newLine);\r\n\t}\r\n\tf.close();\r\n}\r\n}", "idx": "1728"}
{"func": "package googlejam1.p731;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\n\r\npublic class Mushrooms {\r\n  public static void main(String[]args) throws Exception {\r\n    Scanner scanz = new Scanner(new FileReader(\"A-large.in\"));\r\n    PrintWriter printz = new PrintWriter(new FileWriter(\"out.txt\"));\r\n    int total = scanz.nextInt();\r\n    int[]shrooms;\r\n    int first;\r\n    int second;\r\n    for (int x = 0; x < total; x++) {\r\n      shrooms = new int [scanz.nextInt()];\r\n      for (int z = 0; z < shrooms.length; z++) {\r\n        shrooms[z] = scanz.nextInt();\r\n      }\n\tint eaten = 0;\n\tfor (int z = 1; z < shrooms.length; z++) {\n\t  if (shrooms[z] < shrooms[z-1]) \n\t    eaten += shrooms[z-1] - shrooms[z];\n\t}\r\n      first = eaten;\n\tint eaten1 = 0;\n\tint rate = 0;\n\tfor (int z = 1; z < shrooms.length; z++) {\n\t  if ((shrooms[z-1] - shrooms[z]) > rate) \n\t    rate = (shrooms[z-1] - shrooms[z]);\n\t}\n\t//System.out.println(rate);\n\tfor (int z = 0; z < shrooms.length-1; z++) {\n\t  if (rate >= shrooms[z])\n\t    eaten1 += shrooms[z];\n\t  else\n\t    eaten1 += rate;\n\t}\r\n      second = eaten1;\r\n      printz.println(\"Case #\" + (x+1) + \": \" + first + \" \" + second);\r\n      \r\n    }\r\n    printz.close();\r\n  }\r\n}", "idx": "1731"}
{"func": "package googlejam1.p733;\n\n\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * Created by robert on 18.04.15.\n */\npublic class Shrooms {\n\n    public static void main (String [] args)throws Exception{\n        Scanner input = new Scanner(new FileReader(\"A-large.in\"));\n        int numCases = input.nextInt();\n        String out = \"\";\n        for (int i = 0; i < numCases; i++) { //loop through cases\n            int looks = input.nextInt();\n            int m1=0,m2=0, spr = 0;//spr = shrooms per round\n            int [] shrooms = new int[looks];\n            for (int j = 0; j < looks; j++) { //loop through looks\n\n                shrooms[j]=input.nextInt();\n                if (j>0) {\n                    if (shrooms[j-1] > shrooms[j]) {\n                        m1 += shrooms[j-1] - shrooms[j];\n                        if (shrooms[j-1] - shrooms[j] > spr) {\n                            spr=shrooms[j-1]-shrooms[j];\n                        }\n                    }\n                }\n            }\n            for (int j=0;j < looks-1;j++) {\n                if (shrooms[j]-spr>=0){\n                    m2+=spr;\n                }else {\n                    m2+=shrooms[j];\n                }\n            }\n            out+=\"Case #\"+(i + 1)+\": \"+m1+\" \"+m2+\"\\n\";\n        }\n        //System.out.println(out);\n        //writing\n\t\ttry {\n\t\t    FileWriter fw = new FileWriter (\"Solution.out\");\n\t\t    BufferedWriter bw = new BufferedWriter (fw);\n\t\t    PrintWriter fileOut = new PrintWriter (bw);\n\t\t    fileOut.println (out);\n\t\t    fileOut.close();\n\t\t    System.out.println(\"the file \" + \"Solution.out\" + \" is created!\");\n\t\t}\n\t\tcatch (Exception e){\n\t\t    System.out.println(e.toString());\n\t\t}\n    }\n\n\n}\n", "idx": "1733"}
{"func": "package googlejam1.p737;\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner scan = new Scanner(new FileReader(\"A-large.in\"));\r\n\t\t//Scanner scan = new Scanner(System.in);\r\n\t\tPrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));\r\n\t\t//PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(\"A.txt\")));\r\n\t\tint t = scan.nextInt();\r\n\t\tfor (int q = 1; q <= t; q++) {\r\n\t\t\tint n = scan.nextInt();\r\n\t\t\tint[] arr = new int[n];\r\n\t\t\tint ans1 = 0;\r\n\t\t\tint max = 0;\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tarr[i] = scan.nextInt();\r\n\t\t\t\tif (i != 0 && (arr[i - 1] > arr[i])) {\r\n\t\t\t\t\tans1 = ans1 + arr[i - 1] - arr[i];\r\n\t\t\t\t\tmax = Math.max(max, arr[i - 1] - arr[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint ans2 = 0;\r\n\t\t\tfor (int i = 0; i < n - 1; i++) {\r\n\t\t\t\t//pw.println(i + \" \" + arr[i] + \" \" + left + \" \" + ans2);\r\n\t\t\t\tif (arr[i] > max) {\r\n\t\t\t\t\tans2 = ans2 + max;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tans2 = ans2 + arr[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpw.write(\"Case #\" + q + \": \" + ans1 + \" \" + ans2 + \"\\n\");\r\n\t\t}\r\n\t\tpw.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1737"}
{"func": "package googlejam1.p738;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class A1 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner sc;\r\n\t\ttry {\r\n\t\t\tsc = new Scanner (new File(\r\n\t\t\t\t\t\"D://Java WS//GoogleCodeJam//src//A-large.in\"));\r\n\t\t\tFile outputA1Large = new File(\r\n\t\t\t\t\t\"D://Java WS//GoogleCodeJam//src//A1Large.txt\");\r\n\t\t\tPrintWriter pw = new PrintWriter(outputA1Large);\r\n\t\t\t\t\t\r\n\t\tint testCases = sc.nextInt();\r\n\t\tfor (int cases = 0; cases<testCases; cases++)\r\n\t\t{\r\n\t\t\tint arrSize = sc.nextInt();\r\n\t\t\tint arr[] = new int[arrSize];\r\n\t\t\tfor(int i=0; i<arrSize;i++)\r\n\t\t\t{\r\n\t\t\t\tarr[i]= sc.nextInt();\r\n\t\t\t}\r\n\t\t\tint sum=0;\r\n\t\t\tint sum2 =0;\r\n\t\t\tint maxDiff = 0;\r\n\t\t\tfor(int i=1; i<arrSize;i++)\r\n\t\t\t{\r\n\t\t\t\tif(arr[i-1]>arr[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tint diff = arr[i-1] - arr[i];\r\n\t\t\t\t\tsum += diff;\r\n\t\t\t\t\tif(diff>maxDiff)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmaxDiff = diff;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int i=0; i<arrSize-1;i++)\r\n\t\t\t{\r\n\t\t\t\tif(arr[i]<=maxDiff)\r\n\t\t\t\t\tsum2 += arr[i];\r\n\t\t\t\telse\r\n\t\t\t\t\tsum2 += maxDiff;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", cases+1, sum, sum2);\r\n\t\t\tpw.println(\"Case #\"+(cases+1)+\": \"+sum+\" \"+ sum2);\r\n\r\n\t\t}\r\n\t\t\r\n\t\tpw.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1738"}
{"func": "package googlejam1.p743;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Mushroom {\n\n\tpublic static void main(String[] args) {\n\t\tfinal long startTime = System.currentTimeMillis();\n\t\tBufferedReader reader = null;\n\t\tBufferedWriter writer = null;\n\t\ttry {\n\t\t\treader = new BufferedReader(new FileReader(\"./input/A-large-mushroom.in\"));\n\t\t\twriter = new BufferedWriter(new FileWriter(\"./output/mushroom-large.out\", false));\n\t\t\tfinal int caseCount = Integer.parseInt(reader.readLine().toString());\n\t\t\tSystem.out.println(\"Case count: \" + caseCount);\n\t\t\tfor (int k = 0; k < caseCount; k++) {\n\t\t\t\tfinal int size = Integer.parseInt(reader.readLine());\n\t\t\t\tfinal int[] shrooms = new int[size];\n\t\t\t\tfinal String[] shroomsStr = reader.readLine().split(\" \");\n\t\t\t\tint rate = 0;\n\t\t\t\tfor (int i = 0; i < size - 1; i++) {\n\t\t\t\t\tshrooms[i] = Integer.parseInt(shroomsStr[i]);\n\t\t\t\t\tshrooms[i + 1] = Integer.parseInt(shroomsStr[i + 1]);\n\t\t\t\t\tfinal int r = shrooms[i] - shrooms[i + 1];\n\t\t\t\t\tif (r > rate) {\n\t\t\t\t\t\trate = r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint y = 0, z = 0;\n\t\t\t\tfor (int i = 0; i < size - 1; i++) {\n\t\t\t\t\tfinal int curr = shrooms[i];\n\t\t\t\t\tfinal int next = shrooms[i + 1];\n\t\t\t\t\tfinal int diff = curr - next;\n\t\t\t\t\tif (diff > 0) {\n\t\t\t\t\t\ty += diff;\n\t\t\t\t\t}\n\t\t\t\t\tif (rate > 0) {\n\t\t\t\t\t\tz += Math.min(curr, rate);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(Arrays.toString(shrooms) + \": \" + y + \" \" + z);\n\t\t\t\twriter.write(\"Case #\" + (k + 1) + \": \" + y + \" \" + z + \"\\n\");\n\t\t\t}\n\t\t\treader.close();\n\t\t\twriter.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (final IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"Finished in: \" + (int) (System.currentTimeMillis() - startTime) / 1000 + \"s\");\n\t}\n\n}\n", "idx": "1743"}
{"func": "package googlejam1.p745;\n\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\n\r\npublic class F {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner s=new Scanner(new InputStreamReader(System.in));\r\n\t\tint T=s.nextInt();\r\n\t\ts.nextLine();\r\n\t\t\r\n\t\tfor(int i=0;i<T;i++)\r\n\t\t{\r\n\t\t\tint m=s.nextInt();\r\n\t\t\ts.nextLine();\r\n\t\t\tint[] ints=new int[m];\r\n\t\t\tint max=0;\r\n\t\t\tint smax=0;\r\n\t\t\tfor(int j=0;j<m;j++)\r\n\t\t\t{\r\n\t\t\t\tints[j]=s.nextInt();\r\n\t\t\t}\r\n\r\n\t\t\tint rate=0;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor(int k=0;k<m-1;k++)\r\n\t\t\t{\r\n\t\t\t\tif(ints[k+1]<ints[k])\r\n\t\t\t\t{\r\n\t\t\t\t\tmax=ints[k];\r\n\t\t\t\t\tsmax=ints[k+1];\r\n\t\t\t\t\tif(rate<(max-smax))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trate=max-smax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(rate<0)\r\n\t\t\t\trate=0;\r\n\t\t\r\n\t\t\tint count2=0;\r\n\t\t\t//System.out.println(\"rate\"+rate);\r\n\t\t\tfor(int k=0;k<m-1;k++)\r\n\t\t\t{\r\n\t\t\t\t//int gap=ints[k]-ints[k+1];\r\n\t\t\t\t//if(gap>0)\r\n\t\t\t\t//{\r\n\t\t\t\t\r\n\t\t\t\t\tint b=0;\r\n\t\t\t\t\tif(ints[k]>=0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\tif(ints[k]>rate)\r\n\t\t\t\t\t\t\tb+=rate;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tb+=ints[k];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tcount2+=b;\r\n\t\t\t\t\t//System.out.println(\"b>\"+b);\r\n\t\t\t\t//}\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t\ts.nextLine();\r\n\t\t\t\r\n\t\t\t//1\r\n\t\t\tint count=0;\r\n\t\t\tfor(int k=m-1;k>0;k--)\r\n\t\t\t{\r\n\t\t\t\tint a=0;\r\n\t\t\t\tif((ints[k-1]-ints[k])>0)\r\n\t\t\t\t\ta=(ints[k-1]-ints[k]);\r\n\t\t\t\tcount+=a;\r\n\t\t\t\t//System.out.println(a);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\r\n//\t\tSystem.out.println(smax+\",\"+max);\r\n\t\t\r\n\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+count+\" \"+count2);\r\n\t\t}\r\n\t\t}\r\n\r\n}\r\n", "idx": "1745"}
{"func": "package googlejam1.p746;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nimport static java.lang.Math.*;\r\nimport static java.util.Arrays.*;\r\n\r\npublic class MM {\r\n\tpublic static void main(String[] args) throws IOException {\r\n    String        pb        = \"MM\";\r\n    Scanner       sc        = new Scanner(new FileReader(new File(pb+\".in\")));\r\n    PrintWriter   out       = new PrintWriter(new File(pb+\".out\"));\r\n\t\tStringBuilder resultat  = new StringBuilder(\"\");\r\n\t\tlong time = System.currentTimeMillis();\r\n\t\t\r\n\t\t//TEST CASES----------------------------------------------------\r\n\t\tint TC = sc.nextInt();\r\n    for (int tc = 1; tc <= TC; tc++) {\r\n      if(tc!=1) resultat.append(\"\\n\");\r\n      resultat.append(\"Case #\"+tc+\": \");\r\n    \r\n      //READ----------------------------------------------------\r\n      int N = sc.nextInt();\r\n      \r\n      long[] v = new long[N];\r\n      long R = 0;\r\n      long S1 = 0;\r\n      v[0] = sc.nextLong();\r\n      for (int i = 1; i < N; i++){   \r\n        v[i] = sc.nextLong();\r\n        if(v[i]<v[i-1])\r\n          S1 += v[i-1] - v[i];\r\n        \r\n        if(v[i-1] - v[i]>R)\r\n          R = v[i-1] - v[i];\r\n      }\r\n\t\t\t\r\n\t\t\t//SOLVE----------------------------------------------------\r\n\t\t\tlong res = 0;\r\n\t\t\tlong S2 = 0;\r\n\t\t\tfor (int i = 0; i < N-1; i++){   \r\n        S2 += min(v[i],R);\r\n      }\r\n\t\t\t\r\n      //PRINT--------------------------------------------------\r\n\t\t\tSystem.out.println(S1+\" \"+S2);\r\n\t\t\tresultat.append(S1+\" \"+S2);\r\n\t\t\tSystem.out.println(\"Finished testcase \" + tc + \", time = \" + (System.currentTimeMillis() - time));\r\n\t\t}\r\n\t\t\r\n    //CLOSE----------------------------------------------------\r\n\t\tout.print(resultat);\r\n\t\tout.close(); sc.close();\r\n\t}\r\n\r\n\r\n}", "idx": "1746"}
{"func": "package googlejam1.p748;\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\n/* \r\n4\r\n4\r\n10 5 15 5\r\n2\r\n100 100\r\n8\r\n81 81 81 81 81 81 81 0\r\n6\r\n23 90 40 0 100 9\r\n */\r\npublic class MushroomMonster {\r\n//\tstatic private final String INPUT = \"./input.txt\";\r\n//\tstatic private final String OUTPUT = \"./output.txt\";\r\n\tstatic private final String INPUT = \"./A-large.in\";\r\n\tstatic private final String OUTPUT = \"./A-large.out\";\r\n\t\r\n\tpublic static void main(String args[]) {\r\n\t\t// open I/O files\r\n\t\tFileInputStream instream = null;\r\n\t\tPrintStream outstream = null;\r\n\r\n\t\ttry {\r\n\t\t\tinstream = new FileInputStream(INPUT);\r\n\t\t\toutstream = new PrintStream(new FileOutputStream(OUTPUT));\r\n\t\t\tSystem.setIn(instream);\r\n\t\t\tSystem.setOut(outstream);\r\n\t\t} catch (Exception e) {\r\n\t\t\tSystem.err.println(\"Error Occurred.\");\r\n\t\t\te.printStackTrace();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint T = in.nextInt();\r\n\r\n\t\tfor (int t = 1; t <= T; ++t) {\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tint arr [] = new int[N];\r\n\t\t\tList<Integer> arr_dif = new ArrayList<Integer>();\r\n\t\t\tint m1,m2;\r\n\t\t\tint max;\r\n\t\t\tint sum1 = 0, sum2 = 0;\r\n\t\t\t\r\n\t\t\tarr[0] = in.nextInt();\r\n\t\t\tfor (int i = 1; i < N; i++) {\r\n\t\t\t\tarr[i] = in.nextInt();\r\n\t\t\t\tarr_dif.add(arr[i-1] - arr[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tmax = Collections.max(arr_dif);\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < N-1; i++) {\r\n\t\t\t\tm1 = arr[i];\r\n\t\t\t\tm2 = arr[i+1];\r\n\t\t\t\t\r\n\t\t\t\tif(m1 > m2)\r\n\t\t\t\t\tsum1 += m1-m2;\r\n\t\t\t\t\r\n\t\t\t\tif(m1 <= max)\r\n\t\t\t\t\tsum2 += m1;\r\n\t\t\t\telse\r\n\t\t\t\t\tsum2 += max;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + t + \": \" + sum1 + \" \" + sum2);\r\n\t\t}\r\n\r\n\t\tin.close();\r\n\t\treturn;\r\n\t}\r\n}\r\n", "idx": "1748"}
{"func": "package googlejam1.p749;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class Mushrooms {\n\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tScanner in = new Scanner(new File(\"in\"));\n\t\tPrintWriter out = new PrintWriter(\"out\");\n\t\tint T = in.nextInt();\n\t\t\n\t\tfor (int r = 1; r <= T;r++) {\n\t\t\tint n = in.nextInt();\n\t\t\tint prev = 0;\n\t\t\tint curr = 0;\n\t\t\tint f = 0;\n\t\t\tint s = 0;\n\t\t\tint[] arr = new int[n];\n\t\t\tint maxDiff = 0;\n\t\t\tfor (int i = 0;i < n;i++) {\n\t\t\t\tprev = curr;\n\t\t\t\tcurr = in.nextInt();\n\n\t\t\t\tint diff = prev - curr;\n\t\t\t\tif (maxDiff < diff)\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\n\t\t\t\tif (prev > curr) {\n\t\t\t\t\tf += diff;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tarr[i] = curr;\n\t\t\t\t\n\t\t\t\tprev = curr;\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i = 0; i < arr.length-1;i++) {\n//\t\t\t\tSystem.out.println(s);\n\t\t\t\ts += maxDiff > arr[i] ? arr[i] : maxDiff;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + r + \": \" + f + \" \" + s);\n\t\t\tout.println(\"Case #\" + r + \": \" + f + \" \" + s);\n\t\t}\n\t\t\n\t\tout.close();\n\t\tin.close();\n\t}\n\n}\n", "idx": "1749"}
{"func": "package googlejam1.p751;\nimport java.util.Scanner;\n\n/**\n * Created by david on 18/04/15.\n */\npublic class MushroomMonster {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int numTestCases = scanner.nextInt();\n        int numTimes;\n        int[] mushrooms;\n        int maxMushroomsForCase2;\n        long mushroomsCase1;\n        long mushroomsCase2;\n\n        for (int casesIterator = 0; casesIterator < numTestCases; casesIterator++) {\n            numTimes = scanner.nextInt();\n            mushrooms = new int[numTimes];\n            maxMushroomsForCase2 = 0;\n            mushroomsCase1 = 0;\n            mushroomsCase2 = 0;\n\n            mushrooms[0] = scanner.nextInt();\n            for (int timesIterator = 1; timesIterator < numTimes; timesIterator++) {\n                mushrooms[timesIterator] = scanner.nextInt();\n                if (mushrooms[timesIterator] < mushrooms[timesIterator - 1]) {\n                    mushroomsCase1 += mushrooms[timesIterator - 1] - mushrooms[timesIterator];\n                    maxMushroomsForCase2 = Math.max(maxMushroomsForCase2, mushrooms[timesIterator - 1] - mushrooms[timesIterator]);\n                }\n            }\n\n            for (int timesIterator = 0; timesIterator < numTimes - 1; timesIterator++) {\n                mushroomsCase2 += Math.min(mushrooms[timesIterator], maxMushroomsForCase2);\n            }\n\n            System.out.println(\"Case #\" + (casesIterator + 1) + \": \" + mushroomsCase1 + \" \" + mushroomsCase2);\n        }\n    }\n}\n", "idx": "1751"}
{"func": "package googlejam1.p752;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class Monstor {\n\n\tpublic static void main(String[] args) {\n\t\tMonstor r = new Monstor();\n\t\tFile inputFile = new File(\"/Users/aganavin/Desktop/A-large.in\");\n\t\t\t\tBufferedReader br = null;\n\t\t\t\tStringBuilder output = new StringBuilder();\n\t\t\t\ttry {\n\t\t\t\t\t // String buffer for storing the output\n\t\t\t\t\tbr = new BufferedReader(new FileReader(inputFile));\n\t\t\t\t\tint numTests = Integer.parseInt(br.readLine());\n\t\t\t\t\tint test;\n\t\t\t\t\tString [] testSplit;\n\t\t\t\t\tint [] mush;\n\t\t\t\t\t\n\t\t\t\t\t// Loop through each test\n\t\t\t\t\tfor (int testCounter = 0; testCounter < numTests; ++testCounter) {\n\t\t\t\t\t\ttest=Integer.parseInt(br.readLine());\n\t\t\t\t\t\t\n\t\t\t\t\t\ttestSplit=(br.readLine()).split(\" \");\n\t\t\t\t\t\tmush= new int[test];\n\t\t\t\t\t\tfor(int s=0;s<test;s++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmush[s]=Integer.parseInt(testSplit[s]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint out1=0,out2=0;\n\t\t\t\t\t\tint currentDiff=0,maxDiff=0;\n\t\t\t\t\t\tout1=0;\n\t\t\t\t\t\tfor(int s=test-1;s>0;s--)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(mush[s]<mush[s-1])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentDiff=mush[s-1]-mush[s];\n\t\t\t\t\t\t\t\tout1+=currentDiff;\n\t\t\t\t\t\t\t\tmaxDiff=(maxDiff<currentDiff)?currentDiff:maxDiff;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(int s=test-1;s>0;s--)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(mush[s-1]<maxDiff)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tout2+=mush[s-1];\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tout2+=maxDiff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tSystem.out.println(\"Case #\"+(testCounter+1)+\": \"+out1+\" \"+out2);\n\t\t//\t\t\t\tSystem.out.println(\"Done\");\n\t\t\t\t\t\toutput.append(\"Case #\").append((testCounter+1)).append(\": \").append(out1+\" \"+out2);\n\t\t\t\t\t\toutput.append(\"\\n\");\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t//\t\t\tSystem.out.println(e);\n\t\t\t\t}\n\t\t\t\tFile outputFile = new File(\"/Users/aganavin/Desktop/output1.out\");\n\t\t\t\tBufferedWriter writer = null;\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t    writer = new BufferedWriter( new FileWriter(outputFile ));\n\t\t\t\t    writer.write( output.toString());\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\tcatch ( IOException e)\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t    try\n\t\t\t\t    {\n\t\t\t\t        if ( writer != null)\n\t\t\t\t        writer.close( );\n\t\t\t\t    }\n\t\t\t\t    catch ( IOException e)\n\t\t\t\t    {\n\t\t\t\t    }\n\t\t\t\t}\n\n\t}\n}\n", "idx": "1752"}
{"func": "package googlejam1.p753;\n\n\nimport java.util.Scanner;\n\n/**\n * Created by wing on 4/17/15.\n */\npublic class Mushroom {\n    public static Scanner input = new Scanner(System.in);\n    public static void main(String[] args){\n\n        int numInput = input.nextInt();\n\n        for(int e = 1; e<=numInput ; e++){\n            int numIn = input.nextInt();\n            int[] numMashroom = new int[numIn];\n\n            for(int i = 0; i<numIn;i++){\n                numMashroom[i]=input.nextInt();\n            }\n\n            int case1 = 0;\n            int case2max = 0;\n            int case2 = 0;\n            for(int i = 0; i<numIn -1 ; i++){\n                if(numMashroom[i]>numMashroom[i+1]){\n                    case1 += (numMashroom[i]-numMashroom[i+1]);\n                }\n            }\n\n            for(int i = 0; i<numIn-1;i++){\n                if (case2max<(numMashroom[i]-numMashroom[i+1])){\n                    case2max = numMashroom[i]-numMashroom[i+1];\n                }\n            }\n\n            for(int i = 0; i <numIn-1;i++){\n                if(numMashroom[i]<case2max){\n                    case2+=numMashroom[i];\n                }else{\n                    case2+=case2max;\n                }\n\n            }\n\n\n            System.out.println(\"Case #\"+e+\": \"+case1+\" \"+case2);\n\n        }\n\n    }\n}\n", "idx": "1753"}
{"func": "package googlejam1.p754;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\n\npublic class MushroomMonster {\n\tpublic static void main(String[] args) throws FileNotFoundException {\n//\t\tScanner scanner = new Scanner(new FileInputStream(\"A-small-attempt0.in\"));\n//\t\tScanner scanner = new Scanner(new FileInputStream(\"MM_input.txt\"));\n\t\tScanner scanner = new Scanner(new FileInputStream(args[0]));\n\t\tscanner.nextLine();\n\t\tint c = 1;\n\t\twhile (scanner.hasNext()) {//at most 100\n\t\t\tint answer1 = 0;\n\t\t\tint answer2 = 0;\n\t\t\tscanner.nextLine();\n\t\t\tStringTokenizer tokens = new StringTokenizer(scanner.nextLine());\n\t\t\tArrayList<Integer> listMushroom = new ArrayList<Integer>();\n\t\t\twhile (tokens.hasMoreElements()) { //at most 1000\n\t\t\t\tlistMushroom.add(Integer.parseInt(tokens.nextToken()));\n\t\t\t}\n\t\t\tfor (int i = 1; i < listMushroom.size(); i++) {\n\t\t\t\tif(listMushroom.get(i-1)>listMushroom.get(i)){\n\t\t\t\t\tanswer1+=listMushroom.get(i-1)-listMushroom.get(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint d = listMushroom.get(0)-listMushroom.get(1);\n\t\t\tint least = (d>0)?d:0;\n\t\t\tint most = 10000;//listMushroom.get(0);\n\t\t\tboolean finish = false;\n\t\t\tfor (int e = least; e<=most&&!finish; e++){\n\t\t\t\tanswer2=0;\n//\t\t\t\tSystem.out.println(e);\n\t\t\t\tfor (int i = 1; i < listMushroom.size()&& !finish; i++) {\n\t\t\t\t\tint a = (e>listMushroom.get(i-1))?listMushroom.get(i-1):e;\n\t\t\t\t\tif(i==listMushroom.size()-1\n\t\t\t\t\t\t\t&&(listMushroom.get(i-1)-e)<=listMushroom.get(i)){\n\t\t\t\t\t\tfinish=true;\n\t\t\t\t\t}\n\t\t\t\t\tif(listMushroom.get(i-1)-a>listMushroom.get(i)){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tanswer2+=a;\n//\t\t\t\t\tSystem.out.print(a+\" \");\n\t\t\t\t}\n//\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+c+\": \"+answer1+\" \"+answer2);\n//\t\t\tSystem.out.println(finish);\n\t\t\t++c;\n\t\t}\n\t\tscanner.close();\n\t}\n}\n", "idx": "1754"}
{"func": "package googlejam1.p760;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class A {\n  public static void main(String[] args) throws IOException {\n    BufferedReader br = new BufferedReader(new FileReader(args[0]));\n    BufferedWriter bw = new BufferedWriter(new FileWriter(args[1]));\n    String line = br.readLine();\n    int testCase = 1;\n    while ((line = br.readLine()) != null) {\n      if (line.length() == 0 || (line = br.readLine()) == null) {\n        break;\n      }\n      String[] mushroomStrings = line.split(\" \");\n      int method1 = 0, method2 = 0;\n      int lastNumber = Integer.parseInt(mushroomStrings[0]);\n      int maxDiff = 0;\n      for (int i = 1; i < mushroomStrings.length; i++) {\n        int mushroomNumber = Integer.parseInt(mushroomStrings[i]);\n        if (mushroomNumber < lastNumber) {\n          method1 += lastNumber - mushroomNumber;\n          maxDiff = Math.max(maxDiff, lastNumber - mushroomNumber);\n        }\n        lastNumber = mushroomNumber;\n      }\n      for (int i = 1; i < mushroomStrings.length; i++) {\n        int mushroomNumber = Integer.parseInt(mushroomStrings[i - 1]);\n        method2 += Math.min(mushroomNumber, maxDiff);\n      }\n      bw.write(\"Case #\" + testCase++ + \": \" + method1 + \" \"\n          + method2 + \"\\n\");\n    }\n    br.close();\n    bw.close();\n\n  }\n}\n", "idx": "1760"}
{"func": "package googlejam1.p762;\nimport java.io.FileReader;\nimport java.util.Scanner;\n\n/**\n * Created by Max Muth on 17. April 2015\n * kontakt@maxi-muth.de\n */\npublic class Round1A {\n\n    public static void main(String[] args) throws Exception {\n\n//        Scanner scanner = new Scanner(System.in);\n        Scanner scanner = new Scanner(new FileReader(\"input.txt\"));\n        int numCases = scanner.nextInt();\n\n        for (int n = 0; n < numCases; n++) { // Loop through cases\n            int N = scanner.nextInt(); // Length of the current case\n\n            int eaten1 = 0, eaten2 = 0, prev = 0;\n            int[] numbers = new int[N];\n            int spr = 0; // ShroomsPerRound for method2\n            for (int i = 0; i < N; i++) { // Loop current case\n                int k = scanner.nextInt();\n                // Method One, 10 5 15 5\n                eaten1 += prev - k > 0 ? (prev - k) : 0;\n                // Fill array for method2\n                numbers[i] = k;\n                spr = prev - k > spr ? prev - k : spr;\n\n                prev = k;\n            }\n\n            // Method2\n            for (int i = 0; i < N - 1; i++) {\n                eaten2 += numbers[i] - spr >= 0 ? spr : numbers[i];\n            }\n\n            System.out.printf(\"Case #%d: %d %d\\n\", n + 1, eaten1, eaten2);\n        }\n\n\n        scanner.close();\n    }\n}\n\n", "idx": "1762"}
{"func": "package googlejam1.p763;\nimport java.io.FileInputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Mushroom {\r\n\tpublic static void main(String args[]){\r\n\t\ttry{\r\n\t\t\tSystem.setIn(new FileInputStream(\"C:\\\\Users\\\\Kumar BN\\\\Desktop\\\\A-large.in\"));\r\n\t\t\tSystem.setOut(new PrintStream(\"C:\\\\Users\\\\Kumar BN\\\\Desktop\\\\outputmushrromlarge.txt\"));\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tSystem.out.print(\"asdasd\");\r\n\t\t}\r\n\t\tint t;\r\n\t\tScanner in=new Scanner(System.in);\r\n\t\tt=in.nextInt();\r\n\t\tfor(int i=0;i<t;i++){\r\n\t\t\tint n,max=0;\r\n\t\t\tn=in.nextInt();\r\n\t\t\tint a[]=new int[n];\r\n\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\ta[j]=in.nextInt();\r\n\t\t\t\tif(max<a[j])\r\n\t\t\t\t\tmax=a[j];\r\n\t\t\t}\r\n\t\t\tint sum=0;\r\n\t\t\tfor(int j=0;j<n-1;j++){\r\n\t\t\t\tif(a[j]>a[j+1]){\r\n\t\t\t\t\tsum=sum+(a[j]-a[j+1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint minimum=0;int sum1=0,mushrooms=0,runningsum=0;\r\n\t\t\t/*for(int k=1;k<max;k++){\r\n\t\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\t\tmushrooms=0;\r\n\t\t\t\t\tfor(int clock=0;clock<10;clock++){\r\n\t\t\t\t\t\tmushrooms=mushrooms+1*k;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(mushrooms<=a[j])\r\n\t\t\t\t\t\trunningsum=runningsum+mushrooms;\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tif(minimum>runningsum)\r\n\t\t\t\t\t\t\tminimum=runningsum;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t\trunningsum=0;\r\n\t\t\t}*/\r\n\t\t\tint maxdifference=0;int difference;\r\n\t\t\tfor(int k=0;k<n-1;k++){\r\n\t\t\t\tif(a[k]>a[k+1]){\r\n\t\t\t\tdifference=a[k]-a[k+1];\r\n\t\t\t\t//System.out.println(\"Difference=\"+difference);\r\n\t\t\t\tif(Math.abs(difference)>maxdifference)\r\n\t\t\t\t\tmaxdifference=difference;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//System.out.println(\"Max difference=\"+maxdifference);\r\n\t\t\t/*if(maxdifference<0){\r\n\t\t\t\tint rate=-(maxdifference);\r\n\t\t\t\tfor(int k=0;k<n;k++){\r\n\t\t\t\t\tif((rate)>=a[k])\r\n\t\t\t\t\t\trunningsum=runningsum+a[k];\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\trunningsum=runningsum+rate;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tminimum=runningsum;\r\n\t\t\t\trunningsum=0;\r\n\t\t\t}\r\n\t\t\t}*/\r\n\t\t\t//else{\r\n\t\t\t\tint rate=Math.abs(maxdifference);\r\n\t\t\t\t//System.out.println(\"The rate is\"+rate);\r\n\t\t\t\tfor(int k=0;k<n-1;k++){\r\n\t\t\t\t\tif((rate)>=a[k])\r\n\t\t\t\t\t\trunningsum=runningsum+a[k];\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\trunningsum=runningsum+(rate);\r\n\t\t\t\t\t\t//break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminimum=runningsum;\r\n\t\t\trunningsum=0;\r\n\t\t//}\r\n\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+sum+\" \"+minimum);\r\n\t}\r\n}\r\n}\r\n", "idx": "1763"}
{"func": "package googlejam1.p764;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n *\r\n * @author Chathura\r\n */\r\npublic class Solution {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException, IOException {\r\n\r\n        Scanner input = new Scanner(new File(\"in.in\"));\r\n        ArrayList<String> answeres = new ArrayList<>();\r\n        int T = 0, N = 0;\r\n\r\n        int y = 0;\r\n        int z = 0;\r\n        int rate = 0;\r\n\r\n        int temprate = 0;\r\n\r\n        T = input.nextInt();\r\n\r\n        for (int i = 0; i < T; i++) {\r\n\r\n            N = input.nextInt();\r\n\r\n            int[] data = new int[N];\r\n\r\n            for (int j = 0; j < N; j++) {\r\n                data[j] = input.nextInt();\r\n            }\r\n\r\n            y = 0;\r\n            z = 0;\r\n            rate = 0;\r\n            temprate = 0;\r\n\r\n            for (int j = 0; j < N - 1; j++) {\r\n                if (data[j] > data[j + 1]) {\r\n                    y += data[j] - data[j + 1];\r\n\r\n                    temprate = (data[j] - data[j + 1]);\r\n\r\n                    if (temprate > rate) {\r\n                        rate = temprate;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            for (int j = 0; j < N - 1; j++) {\r\n                if (data[j]-rate  <0) {\r\n                    z += data[j];\r\n                } else {\r\n                    z += rate;\r\n                }\r\n            }\r\n\r\n            answeres.add(y+\" \"+z);\r\n\r\n\r\n\r\n        }\r\n\r\n        String out = \"\";\r\n        for (int i = 0; i < T; i++) {\r\n            out += \"Case #\" + (i + 1) + \": \";\r\n            out += answeres.get(i);\r\n            out += \"\\r\\n\";\r\n        }\r\n        System.out.println(out);\r\n        File outF = new File(\"out.out\");\r\n        FileWriter fw = new FileWriter(outF);\r\n        fw.write(out);\r\n        fw.flush();//*/\r\n\r\n    }\r\n\r\n}\r\n", "idx": "1764"}
{"func": "package googlejam1.p766;\n\nimport java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int N = scan.nextInt();\n            int[] m = new int[N];\n            for(int j = 0; j < N; j++) {\n                m[j] = scan.nextInt();\n            }\n            int strategyA = 0;\n\t\t\tint strategyB = 0;\n\t\t\tint rate1 = 0;\n\t\t\tfor (int i2 = 1; i2 < m.length; i2++) {\n\t\t\t    rate1 = Math.max(rate1, m[i2-1] > m[i2] ? m[i2-1] - m[i2] : 0);\n\t\t\t}\n\t\t\tint rate = rate1;\n\t\t\tfor (int i1 = 1; i1 < m.length; i1++) {\n\t\t\t    strategyA += m[i1-1] > m[i1] ? m[i1-1] - m[i1] : 0;\n\t\t\t\tint prev = m[i1-1];\n\t\t\t    strategyB += prev - rate > 0 ? rate : prev;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + i + \": \" + strategyA + \" \" + strategyB);\n        }\n    }\n}\n", "idx": "1766"}
{"func": "package googlejam1.p768;\nimport java.util.Scanner;\r\n\r\n\r\npublic class A1 {\r\n\t public static void main(String[] args) throws Exception\r\n\t {\r\n\t        Scanner sc = new Scanner(System.in);\r\n\t        int T = sc.nextInt();\r\n\t        for(int t=1;t<=T;t++){\r\n\t        \tint N = sc.nextInt();\r\n\t        \tint[] mushrooms = new int[N];\r\n\t        \tint[] diff = new int[N-1];\r\n\t        \tlong total1=0;\r\n\t        \tlong total2=0;\r\n\t        \tint max =0;\r\n\t        \tmushrooms[0]=sc.nextInt();\r\n\t        \tfor(int n=1;n<N;n++){\r\n\t        \t\tmushrooms[n]=sc.nextInt();\r\n\t        \t\tdiff[n-1]=mushrooms[n-1]-mushrooms[n];\r\n\t        \t\ttotal1+=Math.max(diff[n-1],0);\r\n\t        \t\tif(diff[n-1]>max){\r\n\t        \t\t\tmax=diff[n-1];\r\n\t        \t\t}\r\n\t        \t}\r\n\t        \t\r\n\t        \t//int c=0;\r\n\t        \tdouble c = (double)max/10;\r\n\t        \t//System.out.println(c);\r\n\t        \tboolean check=true;\r\n\t        \t//for(c=0;c<=10000;c++){\r\n\t        \t\ttotal2=0;\r\n\t        \t\tcheck=true;\r\n\t        \t\tfor(int i=1;i<N;i++){\r\n\t        \t\t\tif(mushrooms[i]==0){\t        \t\t\t\t\r\n\t        \t\t\t\tif(mushrooms[i-1] > c*10){\r\n\t        \t\t\t\t\tcheck=false;\r\n\t        \t\t\t\t\tbreak;\r\n\t        \t\t\t\t}else{\r\n\t        \t\t\t\t\ttotal2=total2+ mushrooms[i-1];\r\n\t        \t\t\t\t}\r\n\t        \t\t\t}else{\r\n\t        \t\t\t\tif(mushrooms[i-1]-mushrooms[i]>10*c){\r\n\t        \t\t\t\t\tcheck=false;\r\n\t        \t\t\t\t\tbreak;\r\n\t        \t\t\t\t}else{\r\n\t        \t\t\t\t\tif(10*c>=mushrooms[i-1]){        \t\t\t\t\t\t\r\n\t        \t\t\t\t\t\t\r\n\t        \t\t\t\t\t\ttotal2=total2+mushrooms[i-1];\r\n\t        \t\t\t\t\t}else{\r\n\t        \t\t\t\t\t\ttotal2=(long) (total2+(int)10*c);\r\n\t        \t\t\t\t\t}\r\n\t        \t\t\t\t}\r\n\t        \t\t\t}\r\n\t        \t\t}\r\n\t        \t\t//if(check==true){\r\n\t        \t\t\t//System.out.println(c);\r\n\t        \t\t\tSystem.out.println(\"Case #\"+t+\": \"+total1+\" \" +(total2));\r\n\t        \t\t\t//break;\r\n\t        \t\t//}\r\n\t        \t//}\r\n\t        \t//System.out.println(c);\r\n\t        \t//if(check==false)\r\n\t        \t//System.out.println(\"Case #\"+t+\": \"+total1+\" \"+total2);\r\n\t        \t\r\n\t        }\r\n\t        \r\n\t }\r\n}\r\n", "idx": "1768"}
{"func": "package googlejam1.p769;\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class First {\r\n\r\n\r\n    private static final String WORK_DIR = \"C:\\\\users\\\\eamudha\\\\codejam\\\\qualification\\\\first\\\\\";\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        First first = new First();\r\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + \"input.txt\"));\r\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\r\n        int caseCnt = sc.nextInt();\r\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\r\n            System.out.println(\"Processing test case \" + (caseNum + 1));\r\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\r\n            int n = sc.nextInt();\n\t\t\tint[] input = new int[n];\n\t\t\tlong min = 0;\n\t\t\tlong constant = 0;\n\t\t\tint constantSpeed = Integer.MIN_VALUE;\n\t\t\tinput[0] = sc.nextInt();\n\t\t\tfor (int i = 1; i < n; i++) {\n\t\t\t    input[i] = sc.nextInt();\n\t\t\t    if (input[i] < input[i-1]) {\n\t\t\t        int diff = input[i-1] - input[i];\n\t\t\t        min += diff;\n\t\t\t        if (diff > constantSpeed) {\n\t\t\t            constantSpeed = diff;\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\tint validConstantSpeed = input[n-2] - input[n-1];\n\t\t\tif (constantSpeed == Integer.MIN_VALUE) {\n\t\t\t    constantSpeed = input[n-2] - input[n-1];\n\t\t\t} else {\n\t\t\t    if (validConstantSpeed > 0 && validConstantSpeed > constantSpeed) {\n\t\t\t        constantSpeed = validConstantSpeed;\n\t\t\t    }\n\t\t\t}\n\t\t\tif (constantSpeed > 0) {\n\t\t\t    for (int i = 0; i < n-1; i++) {\n\t\t\t        if (input[i] > constantSpeed) {\n\t\t\t            constant += constantSpeed;\n\t\t\t        } else {\n\t\t\t            constant += input[i];\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\tpw.printf(\"%d %d\\n\", min, constant);\r\n        }\r\n        pw.flush();\r\n        pw.close();\r\n        sc.close();\r\n    }\r\n}\r\n", "idx": "1769"}
{"func": "package googlejam1.p770;\nimport java.io.*;\nimport java.util.StringTokenizer;\n\n/**\n * Created by Canon on 2015-04-17.\n */\npublic class Mushroom {\n\n    public static void main(String[] args) throws IOException{\n        String filename = args[0];\n        //String filename = \"A-input.in.txt\";\n        BufferedReader in = new BufferedReader(new FileReader(filename));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"A-ans.txt\")));\n        StringTokenizer st = new StringTokenizer(in.readLine());\n        int numCase = Integer.valueOf(st.nextToken());\n        for(int c = 1;c<=numCase; c++) {\n            st = new StringTokenizer(in.readLine());\n            int N = Integer.valueOf(st.nextToken());\n            st = new StringTokenizer(in.readLine());\n            int[] input = new int[N];\n            for(int i = 0;i<N;i++) {\n                input[i] = Integer.valueOf(st.nextToken());\n            }\n\t\t\tint largestGap = 0;\n\t\t\tlong sum1 = 0;\n\t\t\tfor (int i = 1; i < input.length; i++) {\n\t\t\t    if (input[i - 1] > input[i]) {\n\t\t\t        int gap = input[i - 1] - input[i];\n\t\t\t        if (gap > largestGap) {\n\t\t\t            largestGap = gap;\n\t\t\t        }\n\t\t\t        sum1 += gap;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tlong sum2 = 0;\n\t\t\tfor (int j = 0; j < input.length - 1; j++) {\n\t\t\t    if (input[j] < largestGap) {\n\t\t\t        sum2 += input[j];\n\t\t\t    } else {\n\t\t\t        sum2 += largestGap;\n\t\t\t    }\n\t\t\t}\n            long[] solution = new long[]{sum1,sum2};\n            out.println(\"Case #\"+c+\": \"+solution[0]+\" \"+solution[1]);\n        }\n        out.close();\n        in.close();\n\n    }\n}\n\n\n", "idx": "1770"}
{"func": "package googlejam1.p772;\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * @author Yaroslav\r\n * @since 17-Apr-15\r\n */\r\npublic class ProblemAMushroomMonster {\r\n\r\n    /**3\r\n     * Usage: java ProblemAMushroomMonster < fileIn.txt > fileOut.txt\r\n     *\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Scanner scanner = new Scanner(System.in);\r\n        byte testCount = scanner.nextByte();\r\n\r\n        for (byte t = 0; t < testCount; t++) {\r\n            // read and transform inputs\r\n            int N = scanner.nextInt();\r\n\r\n            int[] shrooms = new int[N];\r\n            for (int i = 0; i < N; i++) {\r\n                shrooms[i] = scanner.nextInt();\r\n            }\r\n\r\n\r\n            // Strategy 1\r\n            int counter1 = 0;\r\n            int maxInterval = -1;\r\n            int currInterval = 0;\r\n            int previousNumber = shrooms[0];\r\n            int currentNumber = 0;\r\n            for (int i = 1; i < shrooms.length; i++) {\r\n                currentNumber = shrooms[i];\r\n                currInterval = Math.max(0, previousNumber - currentNumber);\r\n                //System.out.println(\"currInterval = \" + currInterval);\r\n                // strategy 1\r\n                counter1 += currInterval;\r\n                //System.out.println(\"counter1 = \" + counter1);\r\n                // for strategy 2\r\n                maxInterval = Math.max(maxInterval, currInterval);\r\n                previousNumber = currentNumber;\r\n            }\r\n\r\n            //System.out.println(\"maxInterval = \" + maxInterval);\r\n\r\n            // Strategy 2\r\n            int counter2 = Math.min(maxInterval, shrooms[0]);\r\n            for (int i = 1; i < shrooms.length-1; i++) {\r\n                int minEaten = Math.min(maxInterval, shrooms[i]);\r\n                // System.out.println(\"eating \" + minEaten);\r\n                counter2 += minEaten;\r\n\r\n            }\r\n\r\n            System.out.println(\"Case #\" + (t + 1) + \": \" + counter1 + \" \" + counter2);\r\n        }\r\n    }\r\n}", "idx": "1772"}
{"func": "package googlejam1.p773;\nimport java.util.*;\r\n\r\npublic class probA\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        Scanner input = new Scanner(System.in);\r\n        int test = input.nextInt();\r\n        for(int i = 1; i <= test; i++)\r\n        {\r\n            int size = input.nextInt();\r\n            List<Integer> list = new ArrayList<Integer>();\r\n            for(int j = 0; j < size; j++)\r\n            {\r\n                list.add(input.nextInt());\r\n            }\n\t\t\tint amount = 0;\n\t\t\tint current = list.get(0);\n\t\t\tfor(int i1 = 1; i1 < list.size(); i1++)\n\t\t\t{\n\t\t\t    if(current > list.get(i1))\n\t\t\t        amount += current - list.get(i1);\n\t\t\t    current = list.get(i1);\n\t\t\t}\r\n\r\n            int one = amount;\n\t\t\tint per = 0;\n\t\t\tint amount1 = 0;\n\t\t\t\n\t\t\tfor(int i2 = 1; i2 < list.size(); i2++)\n\t\t\t{\n\t\t\t    int drop = list.get(i2-1) - list.get(i2);\n\t\t\t    if(drop > per)\n\t\t\t    {\n\t\t\t        per = drop;\n\t\t\t    }    \n\t\t\t}\n\t\t\t\n\t\t\tfor(int i1 = 0; i1 < list.size()-1; i1++)\n\t\t\t{\n\t\t\t    amount1 += list.get(i1) > per ? per : list.get(i1);\n\t\t\t}\r\n            int two = amount1;\r\n\r\n            System.out.println(\"Case #\"+i+\": \"+one+\" \"+two);\r\n        }\r\n    }\r\n}\r\n", "idx": "1773"}
{"func": "package googlejam1.p418;\nimport java.io.*;\r\nimport java.util.*;\r\npublic class Jam1AA{\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tBufferedReader f = new BufferedReader( new FileReader(\"g.in\"));\r\n\t\tPrintWriter out = new PrintWriter( new BufferedWriter( new FileWriter(\"gJamout.txt\")));\r\n\t\t//Scanner f = new Scanner(System.in);\t\r\n\t\tint t = Integer.parseInt(f.readLine());\r\n\t\tfor(int iii = 1; iii <= t; iii++){\r\n\t\t\tint num = Integer.parseInt(f.readLine());\r\n\t\t\tString[] cur = f.readLine().split(\" \");\t\r\n\t\t\tint[] te = new int[num];\r\n\t\t\tfor(int i = 0; i < num; i++){\r\n\t\t\t\tte[i] = Integer.parseInt(cur[i]);\r\n\t\t\t}\r\n\t\t\tint res1 = 0;\r\n\t\t\tfor(int i = 1; i < num; i++){\r\n\t\t\t\tif(te[i] < te[i - 1]){\r\n\t\t\t\t\tres1 += te[i - 1] - te[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint res2 = 0; int md = 0;\r\n\t\t\tfor(int i = 1; i < num; i++){\r\n\t\t\t\tmd = Math.max(md, te[i - 1] - te[i]);\r\n\t\t\t}\r\n\t\t\tfor(int i = 0; i < num - 1; i++){\r\n\t\t\t\tres2 += Math.min(md, te[i]);\r\n\t\t\t}\r\n\t\t\tout.println(\"Case #\" + iii + \": \" + res1 + \" \" + res2);\r\n\t\t}\r\n\t\tout.close();\r\n\t\tSystem.exit(0);\r\n\t}\r\n}", "idx": "1418"}
{"func": "package googlejam1.p440;\n// Code by PepeOfMath\n//\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class Problem1 {\n\n    public static void main(String[] args) throws FileNotFoundException {\n\n        //hard code the file location\n        //open file\n        //get number of test cases\n        File f = new File(\"A-large.in\");\n        Scanner s = new Scanner(f);\n        String line = s.nextLine();\n        int T = Integer.parseInt(line);\n\n        //open output file\n        File f2 = new File(\"largeresult.txt\");\n        PrintWriter p = new PrintWriter(f2);\n\n        for (int i = 1; i <= T; i++) {\n            int num = Integer.parseInt(s.nextLine());\n            String nums = s.nextLine();\n            int[] vals = new int[num];\n            Scanner scan = new Scanner(nums);\n            for (int j = 0; j < num; j++) {\n                vals[j] = scan.nextInt();\n            }\n            \n            //Calculate for method1\n            int count = 0;\n            for (int j = 0; j < num-1; j++) {\n                if(vals[j] - vals[j+1] > 0) {\n                    count += vals[j] - vals[j+1];\n                }\n            }\n            \n            //Calculate for method2\n            int count2 = 0;\n            int maxrate = 0;\n            for (int j = 0; j < num-1; j++) {\n                if (vals[j] - vals[j+1] > maxrate) {\n                    maxrate = vals[j] - vals[j+1];\n                }\n            }\n            \n            for (int j = 0; j < num - 1; j++) {\n                count2 += Math.min(maxrate, vals[j]);\n            }\n            \n            p.println(\"Case #\" + i + \": \" + count + \" \" + count2);\n            \n        }\n\n\n\n        p.close();\n        s.close();\n    }\n\n}   \n", "idx": "1440"}
{"func": "package googlejam1.p461;\nimport java.io.*;\nimport java.util.*;\n\nclass F\n{\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\tint nData = in.nextInt();\n\t\tin.nextLine();\n\t\t\n\t\tfor (int asdf = 0; asdf < nData; asdf++)\n\t\t{\n\t\t\t//solve the problem\n\t\t\tint size = in.nextInt();\n\t\t\tint[] items = new int[size];\n\t\t\t\n\t\t\tfor (int i = 0; i < size; i++)\n\t\t\t{\n\t\t\t\tint num = in.nextInt();\n\t\t\t\titems[i] = num;\n\t\t\t}\n\t\t\t\n\t\t\tint prev = -1;\n\t\t\tint total1 = 0;\n\t\t\t\n\t\t\t//method one\n\t\t\tfor (int i = 0; i < size; i++)\n\t\t\t{\n\t\t\t\tint num = items[i];\n\t\t\t\tint minEaten = prev - num;\n\t\t\t\t\n\t\t\t\tif ((prev != -1) && (minEaten > 0))\n\t\t\t\t{\n\t\t\t\t\ttotal1 += minEaten;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tprev = num;\n\t\t\t}\n\t\t\t\n\t\t\t//method 2\n\t\t\tint rate = -1;\n\t\t\tint total2 = 0;\n\t\t\t\n\t\t\t//find the rate of eating\n\t\t\tfor (int i = 1; i < size; i++)\n\t\t\t{\n\t\t\t\tint minEaten = items[i-1] - items[i];\n\t\t\t\t\n\t\t\t\tif ((rate == -1) || (minEaten > rate))\n\t\t\t\t{\n\t\t\t\t\trate = minEaten;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//find the amount eaten\n\t\t\tfor (int i = 1; i < size; i++)\n\t\t\t{\n\t\t\t\tif (items[i-1] < rate)\n\t\t\t\t{\n\t\t\t\t\ttotal2 += items[i-1];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttotal2 += rate;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + (asdf+1) + \": \" + total1 + \" \" + total2);\n\t\t}\n\t}\n}", "idx": "1461"}
{"func": "package googlejam1.p487;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Mooshroom\r\n{\r\n  public static void main (String [] args) throws IOException\r\n  {\r\n    BufferedReader input = new BufferedReader (new FileReader (\"A-large.in\"));\r\n    PrintWriter output = new PrintWriter (new FileWriter (\"output.txt\"));\r\n    int count = Integer.parseInt (input.readLine ());\r\n    for (int counter = 1; counter <= count; counter ++)\r\n    {\r\n      int numberOfVars = Integer.parseInt (input.readLine ());\r\n      String [] vars = input.readLine ().split (\" \");\r\n      int [] variables = new int [numberOfVars];\r\n      for (int x = 0; x < numberOfVars; x ++)\r\n        variables [x] = Integer.parseInt (vars [x]);\r\n      int totalFirst = 0;\r\n      for (int x = 1; x < numberOfVars; x ++)\r\n      {\r\n        if (variables [x - 1] > variables [x])\r\n          totalFirst += variables [x-1] - variables [x]; //prev minus current\r\n      }\r\n      \r\n      int totalSecond = 0;\r\n      int largestDiff = 0;\r\n      for (int x = 1; x < numberOfVars; x ++)\r\n      {\r\n        if (variables [x - 1] > variables [x])\r\n        {\r\n          if (largestDiff < variables [x - 1] - variables [x])\r\n            largestDiff = variables [x - 1] - variables [x];\r\n        }\r\n      }\r\n      int firstVal = variables [0];\r\n      for (int x = 1; x < numberOfVars; x ++) //largest diff = 10\r\n      {\r\n        if (variables [x-1] - largestDiff < 0)\r\n        {\r\n          totalSecond += variables [x-1];\r\n        }\r\n        else\r\n          totalSecond += largestDiff;\r\n        \r\n      }\r\n      \r\n      \r\n      \r\n      output.println (\"Case #\" + counter + \": \"+totalFirst + \" \" + totalSecond);\r\n    }\r\n    output.close ();\r\n  }\r\n}", "idx": "1487"}
{"func": "package googlejam1.p509;\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\n\npublic class Solution {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tint cases = Integer.parseInt(br.readLine().trim());\n\t\t\tint inputs;\n\t\t\tString[] data;\n\t\t\tint[] mushrooms;\n\t\t\tint max1,max2,previous,current,tempdiff;\n\t\t\tint rate;\n\t\t\tfor (int i = 1; i <= cases; i++) {\n\t\t\t\tinputs = Integer.parseInt(br.readLine().trim());\n\t\t\t\tdata = br.readLine().trim().split(\" \");\n\t\t\t\tmax1=0;\n\t\t\t\tmax2=0;\n\t\t\t\tprevious=Integer.parseInt(data[0]);\n\t\t\t\tcurrent=-1;\n\t\t\t\tmushrooms = new int[inputs];\n\t\t\t\tfor (int j = 1; j<inputs; j++) {\n\t\t\t\t\tcurrent=Integer.parseInt(data[j]);\n\t\t\t\t\ttempdiff=0;\n\t\t\t\t\tif (current < previous) {\n\t\t\t\t\t\ttempdiff = previous - current;\n\t\t\t\t\t}\n\t\t\t\t\tmax1 += tempdiff;\n\t\t\t\t\tif (tempdiff > max2) {\n\t\t\t\t\t\tmax2 = tempdiff;\n\t\t\t\t\t}\n\t\t\t\t\tmushrooms[j-1]=previous;\n\t\t\t\t\tprevious = current;\n\t\t\t\t}\n\t\t\t\tmushrooms[inputs-1] = previous;\n\n\t\t\t\trate = max2;\n\t\t\t\tmax2=0;\n\n\t\t\t\tfor (int j = 0; j < inputs-1; j++) {\n\t\t\t\t\tif (mushrooms[j] < rate) {\n\t\t\t\t\t\tmax2+=mushrooms[j];\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmax2+=rate;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Case #\"+i+\": \"+max1+\" \"+max2);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "idx": "1509"}
{"func": "package googlejam1.p531;\nimport java.io.*;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        BufferedReader in = null;\r\n        BufferedWriter out = null;\r\n        try {\r\n            in = new BufferedReader(new InputStreamReader(new FileInputStream(\"A-large.in\")));\r\n            out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"A-large.out\")));\r\n            int testCount = Integer.parseInt(in.readLine());\r\n            for (int t = 1; t <= testCount; t++) {\r\n                in.readLine();\r\n                String[] v = in.readLine().split(\" \");\r\n                long[] mushrooms = new long[v.length];\r\n                for (int i = 0; i < v.length; i++) {\r\n                    mushrooms[i] = Long.parseLong(v[i]);\r\n                }\r\n                long first = 0;\r\n                for (int i = 0; i < mushrooms.length - 1; i++) {\r\n                    if (mushrooms[i] > mushrooms[i + 1]) {\r\n                        first += mushrooms[i] - mushrooms[i + 1];\r\n                    }\r\n                }\r\n                long speed = 0;\r\n                for (int i = 0; i < mushrooms.length - 1; i++) {\r\n                    if (mushrooms[i + 1] < mushrooms[i]) {\r\n                        speed = Math.max(speed, (mushrooms[i] - mushrooms[i + 1]));\r\n                    }\r\n                }\r\n                long second = 0;\r\n                if (speed != 0) {\r\n                    for (int i = 1; i < mushrooms.length; i++) {\r\n                        second += Math.min(mushrooms[i - 1], speed);\r\n                    }\r\n                }\r\n                out.write(\"Case #\" + t + \": \" + first + \" \" + second);\r\n                out.newLine();\r\n            }\r\n        } finally {\r\n            if (in != null) {\r\n                try {\r\n                    in.close();\r\n                } catch (IOException ignored) {\r\n                }\r\n            }\r\n            if (out != null) {\r\n                try {\r\n                    out.close();\r\n                } catch (IOException ignored) {\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "idx": "1531"}
{"func": "package googlejam1.p565;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class SolverMush {\r\n\tstatic PrintWriter writer;\r\n\r\n\tpublic static void main(String[] args) throws NumberFormatException,\r\n\tIOException {\r\n\t\twriter = new PrintWriter(\"output\");\r\n\t\tScanner sc = new Scanner(new File(\"input\"));\n\t\tint nbTest = sc.nextInt();\n\t\tfor (int i = 1; i <= nbTest; i++) {\n\t\t\tint N = sc.nextInt();\n\t\t\tint[] m = new int[N];\n\t\t\tint res1 = 0, res2 = 0;\n\t\t\tint biggestDif = 0;\n\t\t\tint last = sc.nextInt();\n\t\t\tm[0] = last;\n\t\t\tfor (int j = 1; j < N; j++) {\n\t\t\t\tm[j] = sc.nextInt();\n\t\t\t\tint diff = last - m[j];\n\t\t\t\tif (diff > 0) {\n\t\t\t\t\tres1 += diff;\n\t\t\t\t}\n\t\t\t\tif (diff > biggestDif) {\n\t\t\t\t\tbiggestDif = diff;\n\t\t\t\t}\n\t\t\t\tlast = m[j];\n\t\t\t}\n\t\t\tfor (int j = 0; j < N - 1; j++) {\n\t\t\t\tres2 += Math.min(biggestDif, m[j]);\n\t\t\t}\n\t\t\n\t\t\tSolverMush.writer.println(\"Case #\" + i + \": \" + res1 + \" \" + res2);\n\t\t}\r\n\t\twriter.flush();\r\n\t}\r\n\r\n}\r\n", "idx": "1565"}
{"func": "package googlejam1.p592;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\n\npublic class MyOne {\n\t\tpublic static String INPUT_FILE_NAME=\"/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/input.txt\";\n\t\tpublic static String OUTPUT_FILE_NAME=\"/Users/utsavpatel/Documents/workspace/algo/CodeJam2015/src/output.txt\";\n\t\n\t\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\n\t\tBufferedReader reader = new BufferedReader(new FileReader(new File(INPUT_FILE_NAME)));\n\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE_NAME)));\n\t\tint testCases = Integer.parseInt(reader.readLine());\n\t\tfor(int index=1;index<=testCases;index++){\n\t\t\tString result=\"\";\n\t\t\treader.readLine();\n\t\t\tString str[] = reader.readLine().split(\" \");\n\t\t\t\n\t\t\tint max = Integer.MIN_VALUE;\n\t\t\tint result1 = 0;\n\t\t\tint result2 = 0;\n\t\t\tfor(int i = 0; i<str.length-1;i++){\n\t\t\t\tint i2=Integer.parseInt(str[i+1]);\n\t\t\t\tint i1 = Integer.parseInt(str[i]);\n\t\t\t\tif((i2-i1)<0) result1+=-(i2-i1);\n\t\t\t\tif(-(i2-i1)>max) max = -(i2-i1);\n\t\t\t}\n\t\t\tfor(int i = 0; i<str.length-1;i++){\n\t\t\t\tint i1 = Integer.parseInt(str[i]);\n\t\t\t\tif(i1>=max) result2 = result2+max;\n\t\t\t\telse if(i1<max) result2 = result2+i1;\n\t\t\t}\n\t\t\twriter.write(\"Case #\"+index+\": \"+result1+\" \"+result2+\"\\n\");\n\t\t}\n\t\treader.close();\n\t\twriter.close();\n\n\t}\n\n}\n", "idx": "1592"}
{"func": "package googlejam1.p619;\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\t\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\r\n\t\tint T = sc.nextInt();\r\n\t\r\n\t\tfor(int z=1; z<=T;z++)\r\n\t\t{\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tint[] arr = new int[N];\r\n\t\t\tfor(int i=0;i<N;i++)\r\n\t\t\t\tarr[i] = sc.nextInt();\r\n\t\t\t\r\n\t\t\tint count1 = 0;\r\n\t\t\tint count2 = 0;\r\n\t\t\t\r\n\t\t\tint i = 0;\r\n\t\t\twhile(i<N-1)\r\n\t\t\t{\r\n\t\t\t\tif(arr[i]<arr[i+1])\r\n\t\t\t\t\ti++;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tcount1 += arr[i]-arr[i+1];\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint max = arr[0]-arr[1];\r\n\t\t\tfor(int j=1;j<N-1;j++)\r\n\t\t\t\tif(max < arr[j]-arr[j+1])\r\n\t\t\t\t\tmax = arr[j]-arr[j+1];\r\n\t\t\tfor(int k=0;k<N-1;k++)\r\n\t\t\t{\r\n\t\t\t\tif(arr[k]-max <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tcount2 += arr[k];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tcount2 += max;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + z + \": \" + count1 + \" \" + count2);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n}\r\n", "idx": "1619"}
{"func": "package googlejam1.p647;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.InputStreamReader;\n\npublic class Result {\n  /**\n   * @param args\n   */\n  public static void main( String[] args ) {\n    try {\n      FileInputStream fstream = new FileInputStream( \"/home/milan/codeJam2015/r1a/A/A-large.in\" );\n      DataInputStream in = new DataInputStream( fstream );\n      BufferedReader br = new BufferedReader( new InputStreamReader( in ) );\n      int T = Integer.valueOf( br.readLine() );\n      int i = 1;\n      int plates = 0;\n      while( i <= T ) {\n        plates = Integer.valueOf( br.readLine() );\n        String[] strArray = new String[plates];\n        strArray = br.readLine().split( \" \" );\n        int[] mushrooms = new int[plates];\n        for( int j = 0; j < strArray.length; j++ ) {\n          mushrooms[j] = Integer.parseInt( strArray[j] );\n        }\n        int s1 = 0;\n        int max = 0;\n        int diff;\n        for( int k = plates - 1; 0 < k; k-- ) {\n          diff = mushrooms[k - 1] - mushrooms[k];\n          if( 0 < diff ) {\n            s1 += diff;\n            if( max < diff )\n              max = diff;\n          }\n        }\n        int s2 = 0;\n        for( int j = 0; j < plates - 1; j++ ) {\n          if( mushrooms[j] < max )\n            s2 += mushrooms[j];\n          else\n            s2 += max;\n        }\n        //System.out.println( \"Case #\" + i + \": s1 \" + s1 + \" \" + s2 );\n        try {\n\t\t  BufferedWriter bw = new BufferedWriter( new FileWriter( new File( \"/home/milan/codeJam2015/r1a/A/A-large.out\" ), true ) );\n\t\t  bw.write( \"Case #\" + i + \": \" + s1 + \" \" + s2 );\n\t\t  bw.newLine();\n\t\t  bw.close();\n\t\t}\n\t\tcatch( Exception e ) {\n\t\t  System.err.println( \"Error: \" + e.getMessage() );\n\t\t}\n        i++;\n      }\n      br.close();\n    }\n    catch( Exception e ) {//Catch exception if any\n      System.err.println( \"Error: \" + e.getMessage() );\n    }\n  }\n}\n", "idx": "1647"}
{"func": "package googlejam1.p676;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\n\r\npublic class MashroomMonster {\r\n\tpublic static void main(String[] args) {\r\n\t\tMashroomMonster mM = new MashroomMonster();\r\n\t\ttry{\n\t\t\tBufferedReader br=new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n\t\t\tBufferedWriter out=new BufferedWriter(new FileWriter(\"output.txt\"));\n\t\t\tString s;\n\t\t\t\n\t\t\tif((s=br.readLine())!=null){\n\t\t\t\tint noLines = Integer.parseInt(s);\n\t\t\t\tif(noLines!=0){\n\t\t\t\t\tfor (int index = 0; index < noLines; index++) {\n\t\t\t\t\t\tif ((s = br.readLine()) != null) {\n\t\t\t\t\t\t\tString outputString = \"Case #\" + (index + 1) + \": \";\n\t\t\t\t\t\t\tString[] tokenizer = s.trim().split(\" \");\n\t\t\t\t\t\t\tif (tokenizer.length == 1) {\n\t\t\t\t\t\t\t\tif ((s = br.readLine()) != null) {\n\t\t\t\t\t\t\t\t\ttokenizer = s.trim().split(\" \");\n\t\t\t\t\t\t\t\t\tint[] inputArr = new int[tokenizer.length];\n\t\t\t\t\t\t\t\t\tfor (int j = 0; j < tokenizer.length; j++) {\n\t\t\t\t\t\t\t\t\t\tinputArr[j] = Integer.parseInt(tokenizer[j]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tint retrnNumber = 0;\n\t\t\t\t\t\t\t\t\tfor(int i=1;i<inputArr.length;i++){\n\t\t\t\t\t\t\t\t\t\tif(inputArr[i-1]>inputArr[i]){\n\t\t\t\t\t\t\t\t\t\t\tretrnNumber+= inputArr[i-1]-inputArr[i];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tint output1 = retrnNumber;\n\t\t\t\t\t\t\t\t\tint maxDifference=0;\n\t\t\t\t\t\t\t\t\tfor(int i=1;i<inputArr.length;i++){\n\t\t\t\t\t\t\t\t\t\tif(inputArr[i-1]>inputArr[i] && inputArr[i-1]-inputArr[i] > maxDifference){\n\t\t\t\t\t\t\t\t\t\t\tmaxDifference = inputArr[i-1]-inputArr[i];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tint eatCount=0;\n\t\t\t\t\t\t\t\t\tfor(int i=0;i<inputArr.length-1;i++){\n\t\t\t\t\t\t\t\t\t\tif(inputArr[i]<maxDifference)\n\t\t\t\t\t\t\t\t\t\t\teatCount += inputArr[i];\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\teatCount += maxDifference;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tint output2 = eatCount;\n\t\t\t\t\t\t\t\t\toutputString += output1 + \" \" + output2;\n\t\t\t\t\t\t\t\t\tSystem.out.println(outputString);\n\t\t\t\t\t\t\t\t\tout.write(outputString);\n\t\t\t\t\t\t\t\t\tout.newLine();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.close();\n\t\t}\n\t\tcatch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "1676"}
{"func": "package googlejam1.p695;\n\r\n\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.Scanner;\r\n\r\npublic class b {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner s = new Scanner(System.in);\r\n\t\tPrintWriter writer;\r\n\t\ttry {\r\n\t\t\twriter = new PrintWriter(\"out.txt\", \"UTF-8\");\r\n\t\t\r\n\t\t\tint t = Integer.parseInt(s.nextLine());\r\n\t\t\t\r\n\t\t\tfor (int i = 1; i <= t; ++i){\r\n\t\t\t\t// solve\r\n\r\n\t\t\t\tint n = Integer.valueOf(s.nextLine());\r\n\t\t\t\tString[] times = s.nextLine().split(\" \");\r\n\t\t\t\tint r1 = 0;\r\n\t\t\t\tint max_rate = 0;\r\n\t\t\t\tfor(int j = 1; j < n; j++) {\r\n\t\t\t\t\tint x = Integer.valueOf(times[j-1]);\r\n\t\t\t\t\tint y = Integer.valueOf(times[j]);\r\n\r\n\t\t\t\t\tif(x > y) {\r\n\t\t\t\t\t\tr1 += x - y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(x - y > max_rate) {\r\n\t\t\t\t\t\tmax_rate = x-y;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tint r2 = 0;\r\n\t\t\t\tfor(int j = 0; j < n-1; j++) {\r\n\t\t\t\t\tint x = Integer.valueOf(times[j]);\r\n\t\t\t\t\tr2 += x>max_rate? max_rate: x;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tString result = r1 + \" \" + r2;\r\n\r\n\t\t\t\tSystem.out.println(\"Case #\" + i + \": \" + result);\r\n\t\t\t\twriter.println(\"Case #\" + i + \": \" + result);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ts.close();\r\n\t\t\twriter.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1695"}
{"func": "package googlejam1.p721;\nimport java.io.*;\r\nimport java.util.*;\r\n/**\r\n *   G Page solution\r\n *   Standing Mushroom Monster - Round 1A, 2015\r\n */\r\npublic class Mushroom\r\n{\r\n    public static void main(String[] args)  throws IOException\r\n    {\r\n        Mushroom x = new Mushroom();\r\n        //Scanner f = new Scanner(new File(\"A-sample.in\"));\n\t\t//Scanner f = new Scanner(new File(\"A-small.in\"));\n\t\tScanner f = new Scanner(new File(\"A-large.in\"));\n\t\tint[] samples;\n\t\tint numCases = f.nextInt();\n\t\tfor(int i=0; i<numCases; i++)\n\t\t{\n\t\t    int ans1 = 0;\n\t\t    int ans2 = 0;\n\t\t    int numSamples = f.nextInt();\n\t\t    samples = new int[numSamples];\n\t\t    for(int j=0; j<numSamples; j++)\n\t\t    {\n\t\t        samples[j] = f.nextInt();\n\t\t    }\n\t\t    \n\t\t    // method 1\n\t\t    // find decrease between time samples & accumulate\n\t\t    for(int a1=0; a1<numSamples-1; a1++)\n\t\t    {\n\t\t        int temp = samples[a1] - samples[a1+1];\n\t\t        ans1 += (temp < 0 ? 0 : temp);\n\t\t    }\n\t\t    \n\t\t    // method 2\n\t\t    // find max delta between sample amounts\n\t\t    int max = 0;\n\t\t    for(int a2=0; a2<numSamples-1; a2++)\n\t\t    {\n\t\t        int temp = samples[a2] - samples[a2+1];\n\t\t        max = Integer.max(temp, max);\n\t\t    }\n\t\t    // accumulate smaller of max delta and current num on plate\n\t\t    for(int a2=0; a2<numSamples-1; a2++)\n\t\t    {\n\t\t        int amtThisTime = Integer.min(samples[a2], max);\n\t\t        ans2 += amtThisTime;\n\t\t    }\n\t\t    \n\t\t    System.out.printf(\"Case #%d: %d %d\\n\", i+1, ans1, ans2);\n\t\t}\r\n    }\r\n\r\n    public Mushroom()\r\n    {\r\n    }\r\n}\r\n", "idx": "1721"}
{"func": "package googlejam1.p750;\n\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class second {\n\tint num = 0;\n\tArrayList<int[]> result = new ArrayList<int[]>();\n\tArrayList<ArrayList<Integer>> content = new ArrayList<ArrayList<Integer>>();\n\tpublic static void main(String args[]) throws Exception{\n\t\tsecond a = new second();\n\t\tFile file = new File(\"/Users/apple/Desktop/A-large.in\");\n\t\tBufferedReader reader = new BufferedReader(new FileReader(file));\n\t\tString temp1 = null;\n\t\tint line = 0;\n\t\twhile((temp1 = reader.readLine()) != null){\n\t\t\tif(line == 0){\n\t\t\t\ta.num = Integer.valueOf(temp1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(line % 2 == 1){ \n\t\t\t\t\tline ++;\n\t\t\t\t\tcontinue;}\n\t\t\t\tString[] now1 = temp1.split(\" \");\n\t\t\t\tArrayList<Integer> cur1 = new ArrayList<Integer>();\n\t\t\t\tfor(int i1 = 0; i1 < now1.length; i1 ++){\n\t\t\t\t\tcur1.add(Integer.valueOf(now1[i1]));\n\t\t\t\t}\n\t\t\t\ta.content.add(cur1);\n\t\t\t}\n\t\t\tline ++;\n\t\t}\n\t\treader.close();\n\t\tfor(int i = 0; i < a.num; i ++){\n\t\t\tArrayList<Integer> now = a.content.get(i);\t\n\t\t\tif(now.size() == 0){\n\t\t\t\tSystem.out.println(\"in\");\n\t\t\t\tint[] cur = new int[2];\n\t\t\t\ta.result.add(cur);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint sum1 = 0;\n\t\t\tint sum2 = 0;\n\t\t\tint max = 0;\n\t\t\tfor(int j = 0; j < now.size() - 1; j ++){\n\t\t\t\tif(now.get(j) > now.get(j + 1)){\n\t\t\t\t\tmax = Math.max(max, now.get(j) - now.get(j + 1));\n\t\t\t\t\tsum1 = sum1 + now.get(j) - now.get(j + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int j = 0; j < now.size() - 1; j ++){\n\t\t\t\tsum2 = sum2 + Math.min(max, now.get(j));\n\t\t\t}\n\t\t\tint[] temp = new int[2];\n\t\t\ttemp[0] = sum1;\n\t\t\ttemp[1] = sum2;\n\t\t\ta.result.add(temp);\n\t\t}\n\t\tFileWriter writer = new FileWriter(\"/Users/apple/Desktop/output.txt\");\n\t\tfor(int i = 0; i < a.result.size(); i ++){\n\t\t\tint j = i + 1;\n\t\t\twriter.write(\"case #\" + j + \": \" + a.result.get(i)[0] + \" \" + a.result.get(i)[1] + \"\\n\");\n\t\t\t\n\t\t}\n\t\twriter.close();\n\t}\n\n}\n", "idx": "1750"}
{"func": "package googlejam1.p776;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author ahmad\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws FileNotFoundException {\n        // TODO code application logic here\n        Scanner input = new Scanner(new File(\"input.in\"));\n        PrintWriter out=new PrintWriter(new File(\"out\"));\n        int tc;\n        tc = input.nextInt();\n        for (int b = 1; b <= tc; b++) {\n            int e, d = 0, x = 0, y = 0, z = 0;\n            e = input.nextInt();\n            int m[] = new int[e];\n\n            for (int c = 0; c < e; c++) {\n                m[c] = input.nextInt();\n\n            }\n            for (int c = 1; c < e; c++) {\n                d = m[c - 1] - m[c];\n                if (d >= y) {\n                    y = d;\n                }\n                if (d >= 0) {\n                    x += d;\n                }\n            }\n            for (int c = 0; c < e - 1; c++) {\n                if (m[c] <= y) {\n                    z += m[c];\n                }\n                if (m[c] > y) {\n                    z += y;\n                }\n            }\n            out.printf(\"Case #%d: %d %d\\n\",b,x,z);\n        }\n        out.close();\n    }\n\n}\n\n", "idx": "1776"}
{"func": "package googlejam1.p804;\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.PriorityQueue;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * FileName: Main.java\r\n * @Description:\r\n *\r\n * @author Xunhu(Tiger) Sun\r\n *         email: sunx2013@my.fit.edu\r\n * @date Apr 10, 2015 8:05:22 PM\r\n */\r\npublic class Main {\r\n    final Scanner sc = new Scanner(System.in);\r\n\r\n    int n;\r\n    int[] a;\r\n\r\n    public static void main (String[] args) {\r\n        Main r = new Main();\n\t\tfinal int cn = r.sc.nextInt();\n\t\tr.sc.nextLine();\n\t\tfor (int ci = 1; ci <= cn; ci++) {\n\t\t    r.n = r.sc.nextInt();\n\t\t\tr.sc.nextLine();\n\t\t\tr.a = new int[r.n];\n\t\t\tfor(int i = 0; i < r.n; i++){\n\t\t\t    r.a[i] = r.sc.nextInt();\n\t\t\t}\n\t\t\tr.sc.nextLine();\n\t\t    System.out.printf(\"Case #%d: \", ci);\n\t\t    int sumrd =0;\n\t\t\tint maxrd = 0;\n\t\t\tfor(int i = 1; i < r.n; i++){\n\t\t\t    if(r.a[i] < r.a[i-1]){\n\t\t\t        int rd = r.a[i-1]-r.a[i];\n\t\t\t        sumrd+=rd;\n\t\t\t        if(maxrd< rd){\n\t\t\t            maxrd=rd;\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\tint sum2 = 0;\n\t\t\tfor(int i = 0; i < r.n-1; i++){\n\t\t\t    int p = r.a[i];\n\t\t\t    if(p < maxrd){\n\t\t\t        sum2+=p;\n\t\t\t    } else{\n\t\t\t        sum2+=maxrd;\n\t\t\t    }\n\t\t\t}\n\t\t\tSystem.out.println(sumrd+\" \"+sum2);\n\t\t}\r\n    }\r\n}\r\n", "idx": "1804"}
{"func": "package googlejam1.p780;\n\r\n\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by Rathinakumar on 4/17/2015.\r\n */\r\npublic class A {\r\n    public static void main(String[] args) {\r\n\r\n        Scanner sc = new Scanner(System.in);\r\n        int T = sc.nextInt();\r\n        for(int t=1;t<=T;t++)\r\n        {\r\n            int N = sc.nextInt();\r\n            int[] arr = new int[N];\r\n            int first = 0, second=0;\r\n            int maxDff=0;\r\n            for(int n=0; n<N; n++)\r\n            {\r\n                arr[n] = sc.nextInt();\r\n\r\n                if(n>0)\r\n                {\r\n                    if(maxDff<(arr[n-1]-arr[n]))\r\n                        maxDff = (arr[n-1]-arr[n]);\r\n                    if(arr[n-1]>arr[n])\r\n                        first+=(arr[n-1]-arr[n]);\r\n                }\r\n            }\r\n            for(int n=0; n<N-1; n++)\r\n            {\r\n                if(arr[n]<maxDff)\r\n                    second+=arr[n];\r\n                else\r\n                    second+=maxDff;\r\n            }\r\n            System.out.println(\"Case #\"+t+\": \"+first+\" \"+second);\r\n        }\r\n    }\r\n}\r\n", "idx": "1780"}
{"func": "package googlejam1.p781;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.util.Scanner;\n\npublic class mushroommonster {\n\n    static String file = \"A-large\";\n\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n        try (PrintWriter writer = new PrintWriter(\"/home/dare/Downloads/\" + file + \".out\", \"UTF-8\")) {\n            Scanner s = new Scanner(new File(\"/home/dare/Downloads/\" + file + \".in\"));\n            int T = s.nextInt();\n\n            for (int i = 0; i < T; i++) {\n                int N = s.nextInt();\n                int m[] = new int[N];\n\n                int rate = 0;\n                for (int j = 0; j < N; ++j) {\n                    m[j] = s.nextInt();\n\n                    if (j > 0) {\n                        rate = Math.max(rate, m[j - 1] - m[j]);\n                    }\n                }\n\n                int y = 0;\n                int z = 0;\n\n                for (int j = 1; j < m.length; ++j) {\n                    if (m[j - 1] == rate) {\n                        z += rate;\n                    } else if (m[j - 1] > rate) {\n                        z += rate;\n                    } else {\n                        z += m[j - 1];\n                    }\n                    \n                    if (m[j] < m[j - 1]) {\n                        y += m[j - 1] - m[j];\n                    }\n                }\n                writer.println(\"Case #\" + (i + 1) + \": \" + y + \" \" + z);\n            }\n            writer.close();\n        }\n    }\n}\n", "idx": "1781"}
{"func": "package googlejam1.p782;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\n\tlong gcd(long a,long b){\n\t\treturn b == 0 ? a : gcd(b,a % b);\t\t\n\t}\n\tpublic static void main(String[] s1) throws Exception {\n\t\tMain r = new Main();\n\t\tFile out = new File(\"output.txt\");\n\t\tScanner in = new Scanner(new File(\"input.txt\"));\n\t\tPrintStream ostr = new PrintStream(new FileOutputStream(out));\n\t\tint T = in.nextInt();\n\t\tint N = 0;\n\t\twhile(N++<T){\n\t\t\tBigInteger result = new BigInteger(\"0\");\n\t\t\tint n = in.nextInt();\n\t\t\tint m[] = new int[n];\n\t\t\tfor (int i=0; i<n; i++){\n\t\t\t\tm[i] = in.nextInt();\n\t\t\t}\n\t\t\tint res1 = 0;\n\t\t\tfor (int i=0; i<n-1; i++)\n\t\t\t\tif(m[i]>m[i+1])\n\t\t\t\t\tres1+=m[i]-m[i+1];\n\t\t\n\t\t\t\n\t\t\tint res2 = 0;\n\t\t\tint max =0;\n\t\t\tfor (int i=0; i<n-1; i++)\n\t\t\t\tif(m[i]-m[i+1]>max)\n\t\t\t\t\tmax = m[i]-m[i+1];\n\t\t\tfor (int i=0; i<n-1; i++)\n\t\t\t\tif(m[i]-max<0)\n\t\t\t\t\tres2 += m[i];\n\t\t\t\telse\n\t\t\t\t\tres2+=max;\n\t\t\tostr.printf(\"Case #%d: %d %d%n\", N, res1, res2);\n\t\t}\n\t}\n}", "idx": "1782"}
{"func": "package googlejam1.p784;\nimport java.util.*;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\tScanner input = new Scanner(System.in);\r\n\r\n\t\tint t = input.nextInt();\r\n\r\n\t\tfor (int i = 0; i < t; i++) {\r\n\t\t\tint n = input.nextInt();\r\n\t\t\tint m[] = new int[n];\r\n\r\n\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\tm[j] = input.nextInt();\r\n\t\t\t}\r\n\r\n\t\t\tint case1 = 0;\r\n\r\n\t\t\tfor (int j = 1; j < n; j++) {\r\n\t\t\t\tif (m[j - 1] > m[j]) {\r\n\t\t\t\t\tcase1 += m[j - 1] - m[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tint case2 = 0;\r\n\r\n\t\t\tdouble difference = -1;\r\n\r\n\t\t\tfor (int j = 0; j < n - 1; j++) {\r\n\t\t\t\tif (m[j] >= m[j + 1]) {\r\n\t\t\t\t\tif (m[j] - m[j + 1] > difference) {\r\n\t\t\t\t\t\tdifference = m[j] - m[j + 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tdouble time = difference / 10;\r\n\r\n\t\t\tfor (int j = 0; j < n - 1; j++) {\r\n\t\t\t\tdouble amountToEat = 10 * time;\r\n\t\t\t\tif (m[j] != 0) {\r\n\t\t\t\t\tif (amountToEat >= m[j]) {\r\n\t\t\t\t\t\tcase2 += m[j];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcase2 += amountToEat;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+case1 + \" \" + case2);\r\n\t\t\tcase1 = 0;\r\n\t\t\tcase2 = 0;\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1784"}
{"func": "package googlejam1.p785;\nimport java.io.BufferedWriter;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tScanner scanner = new Scanner(new FileInputStream(\"input.txt\"));\r\n\t\t\tscanner.useLocale(Locale.ENGLISH);\r\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"output.txt\"));\r\n\t\t\tint tests = scanner.nextInt();\r\n\t\t\tfor (int i = 0; i < tests; i++) {\r\n\t\t\t\tint n = scanner.nextInt();\r\n\t\t\t\tint[] values = new int[n];\r\n\t\t\t\tfor (int j = 0; j < values.length; j++) {\r\n\t\t\t\t\tvalues[j] = scanner.nextInt();\r\n\t\t\t\t}\r\n\t\t\t\tint minSlope = 0;\r\n\t\t\t\tint firstMin = 0;\r\n\t\t\t\tfor (int j = 0; j < values.length - 1; j++) {\r\n\t\t\t\t\tint delta = values[j]-values[j+1];\r\n\t\t\t\t\tif (delta > 0) {\r\n\t\t\t\t\t\tfirstMin += delta;\r\n\t\t\t\t\t\tminSlope = Math.max(minSlope, delta);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tint secondMin = 0;\r\n\r\n\t\t\t\tfor (int j = 0; j < values.length - 1; j++) {\r\n\t\t\t\t\tsecondMin += Math.min(values[j], minSlope);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tout.write(\"Case #\" + (i + 1) + \": \" + firstMin + \" \" + secondMin + \"\\n\");\r\n\t\t\t}\r\n\t\t\tout.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// ????\r\n\t\t} catch (IOException e) {\r\n\t\t\t// ????\r\n\t\t}\r\n\t}\r\n}", "idx": "1785"}
{"func": "package googlejam1.p790;\nimport java.io.*;\npublic class first1{\n    static String infile = \"in.txt\";\n    static String outfile = \"out.txt\";\n    public static void main(String[] args)throws IOException{\n        BufferedReader in = new BufferedReader(new FileReader(infile));\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(outfile,false)));\n\t\tint line = Integer.parseInt(in.readLine());\n\t\tfor(int i=1;i<=line;i++){\n\t\t    String nums = in.readLine();\n\t\t    String[] parts = in.readLine().split(\" \");\n\t\t    int d = Integer.parseInt(nums);\n\t\t    int n1=0,n2=0,max1=0;\n\t\t    int[] number = new int[parts.length];\n\t\t    for(int j=0;j<parts.length;j++){\n\t\t        number[j]=Integer.parseInt(parts[j]); \n\t\t    }\n\t\t    if(number[0]>number[1]){\n\t\t        max1 = number[0]-number[1];\n\t\t    }\n\t\t    for(int k=1;k<number.length;k++){\n\t\t        if((number[k-1]-number[k])>max1){\n\t\t            max1=number[k-1]-number[k];\n\t\t        }\n\t\t        if(number[k]<number[k-1]){\n\t\t           n1=n1+number[k-1]-number[k]; \n\t\t        }\n\t\t    }\n\t\t    for(int k=0;k<number.length-1;k++){\n\t\t        if(number[k]<max1){\n\t\t            n2+=number[k];\n\t\t        }else{\n\t\t            n2+=max1;\n\t\t        }\n\t\t    }\n\t\t    /*out.print(\"Case # \"+i+\" : \");\n\t\t    for(String str:parts){\n\t\t        out.print(str+\" \");\n\t\t    }\n\t\t    out.println();*/\n\t\t    out.printf(\"Case #%d: %d %d\",i,n1,n2);\n\t\t    out.println();\n\t\t    out.flush();\n\t\t}\n\t\tin.close();\n\t\tout.close();\n    }\n}\n            \n        \n", "idx": "1790"}
{"func": "package googlejam1.p792;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[]args) throws NumberFormatException, IOException{\r\n\t//\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t BufferedReader br = new BufferedReader(new FileReader(\"input.in\"));\r\n\t\t PrintWriter out = new PrintWriter(\"output.txt\");\r\n\t\tint t = Integer.parseInt(br.readLine());\r\n\t\tfor(int i = 0;i<t;i++){\r\n\t\t\tString[]in = br.readLine().split(\" \");\r\n\t\t\tint n = Integer.parseInt(in[0]);\r\n\t\t\tin = br.readLine().split(\" \");\r\n\t\t\tint[]arr = new int[n];\r\n\t\t\tlong max = Long.MIN_VALUE;\r\n\t\t\tfor(int  j = 0;j<n;j++)\r\n\t\t\t{\r\n\t\t\t\tarr[j] = Integer.parseInt(in[j]);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tlong e1 = 0;\r\n\t\t\tdouble rate =0.0;\r\n\t\t\tfor(int j = 0;j<n-1;j++){\r\n\t\t\t\tif(arr[j]>arr[j+1]){\r\n\t\t\t\t\te1+=(arr[j]-arr[j+1]);\r\n\t\t\t\t}\r\n\t\t\t\tif(arr[j]>arr[j+1]){\r\n\t\t\t\t\tif((((arr[j]-arr[j+1])*1.0)/10.0 >rate)){\r\n\t\t\t\t\t\trate = ((arr[j]-arr[j+1])*1.0)/10.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tlong eaten = 0;\r\n\t\t\tfor(int j = 0;j<n-1;j++){\r\n\t\t\t\teaten+=Math.min(arr[j], rate*10);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tout.println(\"Case #\"+(i+1)+\": \"+e1+\" \"+eaten);\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tbr.close();\r\n\t\tout.close();\r\n\t\t\r\n\t}\r\n\r\n\r\n}\r\n", "idx": "1792"}
{"func": "package googlejam1.p795;\n\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\npublic class Mushrooms  {\n  public static void main(String[] args) throws IOException {\n    BufferedReader br = new BufferedReader(new FileReader(\n        \"A-large.in.txt\"));\n    File out = new File(\"large.out.txt\");\n    PrintWriter pw = new PrintWriter(out);\n\n    int cases = Integer.parseInt(br.readLine());\n\n    for (int tt = 0; tt < cases; tt++) {\n      int n = Integer.parseInt(br.readLine());\n      String[] s = br.readLine().split(\" \");\n      int[] q = new int[n];\n\n      for (int i = 0; i < n; i++) {\n        q[i] = Integer.parseInt(s[i]);\n      }\n\n\n      int m1 = 0;\n      for (int i = 0; i < n - 1; i++) {\n        int k = q[i + 1] - q[i];\n        if (k < 0) m1 += -k;\n      }\n\n      int m2 = Integer.MAX_VALUE;\n      for (int rate = 0; rate < 10001; rate++) {\n        int count = 0;\n        boolean good = true;\n        int cons = rate;\n        for (int i = 0; i < n - 1; i++) {\n          //cons = rate * 10 > q[i] ? q[i] : rate * 10;\n          if (q[i] - cons > q[i + 1]) {\n            good = false;\n            break;\n          } else {\n            count += q[i] - cons >= 0 ? cons : q[i];\n          }\n        }\n        if (good) {\n          m2 = count;\n          break;\n        }\n\n      }\n\n      pw.println(\"Case #\" + (tt + 1) + \": \" + m1 + \" \" + m2);\n    }\n    br.close();\n    pw.close();\n  }\n}\n", "idx": "1795"}
{"func": "package googlejam1.p796;\nimport java.util.*;\nimport java.io.*;\n\n    class A {\n    \n    public static void main (String[] args) throws IOException\n\n        {\n        \n        File text = new File (\"A-large.in\");\n //    File text = new File (\"scanner.in\");\n\n        Scanner scn= new Scanner(text);\n        FileWriter out = new FileWriter(\"large-practice.out\");\n        int N=scn.nextInt(); // setting the number of test cases\n        int num_pan;\n\n        for (int i =1;i<=N;i++)\n        {\n        num_pan=scn.nextInt();\n        int arr[] = new int[num_pan];\n        for (int j =0;j<num_pan;j++)\n            {\n            arr[j]=scn.nextInt();\n            }\n        \n        //find first rule\n        int num_1=0;int num_2=0;int diff;\n        for (int k=0;k<num_pan-1;k++)\n            {\n            if (arr[k] > arr[k+1])\n                {\n                 diff=arr[k]-arr[k+1];\n                 num_1=num_1+diff;\n                            }\n           else\n            {\n                diff=0;\n                num_1=num_1+diff;\n            }\n            \n            }\n        \n        int grt=0;int temp_grt;\n        for (int k=0;k< num_pan-1 ;k++)\n            {\n            temp_grt=arr[k]-arr[k+1];\n            if (temp_grt > grt)\n                grt=temp_grt;\n            \n            }\n        \n        for (int k=0;k<num_pan-1;k++)\n            {\n            if ((arr[k] < arr[k+1]) && (arr[k] < grt))\n                {\n                num_2=num_2+arr[k];        \n                \n                \n                }\n\n            else if ((arr[k] < arr[k+1]) && (arr[k] >= grt))\n                    num_2=num_2+grt;\n\n            else if ((arr[k] > arr[k+1]) && (arr[k] >= grt))\n                {\n                num_2=num_2+grt;\n                }\n            else if ((arr[k] > arr[k+1]) && (arr[k] < grt))\n                {\n                num_2=num_2+arr[k];\n                \n                }\n            else if ((arr[k]==arr[k+1]) && (arr[k] < grt))\n                {\n                num_2=num_2+arr[k];\n\n                }\n            else if ((arr[k]==arr[k+1]) && (arr[k]== grt))\n                num_2=num_2+grt;\n            else if ((arr[k]==arr[k+1]) && (arr[k]> grt))\n                num_2=num_2+grt;\n\n            }\n\n\n\n\n        out.write(\"Case #\"+i+\": \"+num_1+\" \"+num_2+\"\\n\");\n        } //main for loop ends here\n\n\n\n        out.flush();\n        out.close();\n        }     // main function ends here\n    \n    \n    \n    \n    }  //class ends here\n", "idx": "1796"}
{"func": "package googlejam1.p797;\nimport java.util.*;\r\n\r\npublic class A {\r\n    public static void main(String[] args) {\r\n        int testCases;\r\n\r\n        Scanner sc = new Scanner(System.in);\r\n        testCases = sc.nextInt();\r\n\r\n        for (int j = 1; j <= testCases; j++) {\r\n            int n;\r\n            n = sc.nextInt();\r\n            Integer[] a = new Integer[n];\r\n            for (int i = 0; i < n; i++) {\r\n                a[i] = sc.nextInt();\r\n            }\r\n            int q = 0, p = 0, mx = 0;\r\n            for (int i = 1; i < n; i++) {\r\n                if (a[i] - a[i - 1] < 0) {\r\n                    q += (a[i - 1] - a[i]);\r\n                }\r\n\r\n                mx = Math.max(mx, a[i - 1] - a[i]);\r\n            }\r\n            for (int i = 0; i < n - 1; i++) {\r\n                if (a[i] >= mx) p += mx;\r\n                else p += a[i];\r\n            }\r\n            System.out.println(\"Case #\" + j + \": \" + q + \" \" + p);\r\n        }\r\n    }\r\n}\r\n", "idx": "1797"}
{"func": "package googlejam1.p798;\nimport java.util.*;\r\nimport java.io.*;\r\nclass A{\r\n     final static String filename=\"a\";\r\n     public static void main(String [] args)\r\n     {\r\n          try{\r\n               Scanner sc=new Scanner(new File(filename+\".in\"));\r\n               PrintWriter pw=new PrintWriter(new FileOutputStream(filename+\".out\"));\r\n               int gcase=sc.nextInt();\r\n               for(int n=1;n<=gcase;n++)\r\n               {\r\n\t\t\t\t   int c=sc.nextInt();\r\n\t\t\t\t   int[] m=new int[c];\r\n\t\t\t\t   int max=0;\r\n\t\t\t\t   int m1=0;\r\n\t\t\t\t   int current=0;\r\n\t\t\t\t   for(int i=0;i<c;i++)\r\n\t\t\t\t   {\r\n\t\t\t\t\t   m[i]=sc.nextInt();\r\n\t\t\t\t\t   \r\n\t\t\t\t\t   if(current>m[i])\r\n\t\t\t\t\t   {\r\n\t\t\t\t\t\t\tint di=current-m[i];\r\n\t\t\t\t\t\t\tm1+=di;\r\n\t\t\t\t\t\t\tif(max<di)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tmax=di;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t   }\r\n\t\t\t\t\t   current=m[i];\r\n\t\t\t\t   }\r\n\t\t\t\t   int m2=0;\r\n\t\t\t\t   for(int i=0;i<c-1;i++)\r\n\t\t\t\t   {\r\n\t\t\t\t\t   if(m[i]<max)\r\n\t\t\t\t\t\t   m2+=m[i];\r\n\t\t\t\t\t   else\r\n\t\t\t\t\t\t   m2+=max;\r\n\t\t\t\t   }\r\n\t\t\t\t   \r\n                   System.out.println(\"Case #\"+n+\": \"+m1+\" \"+m2);\r\n                   pw.println(\"Case #\"+n+\": \"+m1+\" \"+m2);\r\n               }\r\n                  pw.close();\r\n          }catch(FileNotFoundException f)\r\n          {\r\n               f.printStackTrace();\r\n          }\r\n     }\r\n}", "idx": "1798"}
{"func": "package googlejam1.p800;\nimport java.util.*;\nimport java.io.*;\n\npublic class Mushroom\n{\n    public static void main (String[] args) throws IOException\n    {\n        Scanner scan = new Scanner(new File(\"A-large.in\"));\n        PrintWriter out = new PrintWriter (new BufferedWriter(new FileWriter(\"A-large.out\")));\n        \n        int t = scan.nextInt();\n        \n        for (int i=1; i<=t; i++)\n        {\n            int n = scan.nextInt();\n            int ans1 = 0, rate = 0, ans2 = 0;\n            int[] m = new int[n];\n            \n            for (int j=0; j<n; j++)\n                m[j] = scan.nextInt();\n                \n            for (int j=1; j<n; j++)\n            {\n                if (m[j]<m[j-1])\n                {\n                    ans1 += (m[j-1]-m[j]);\n                    rate = Math.max(rate, m[j-1]-m[j]);\n                }\n            }\n            \n            for (int j=0; j<n-1; j++)\n                ans2 += Math.min(rate, m[j]);\n                \n            out.println(\"Case #\" + i + \": \" + ans1 + \" \" + ans2);\n        }\n        out.close();\n        System.exit(0);\n    }\n}\n", "idx": "1800"}
{"func": "package googlejam1.p801;\nimport java.util.Scanner;\r\n\r\n\r\npublic class AMush {\r\n\r\n\t\r\n\tpublic static void main (String [] args){\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint T = sc.nextInt();\r\n\t\tfor (int t=0; t<T; t++){\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint[] data = new int[n];\r\n\t\t\tfor (int i=0; i<n; i++){\r\n\t\t\t\tdata[i] = sc.nextInt();\r\n\t\t\t}\r\n\t\t\tint n1 = data.length;\n\t\t\tint sum1 = 0;\n\t\t\tint sum2 = 0;\n\t\t\tint rate = 0;\n\t\t\tfor (int i=1; i<n1; i++){\n\t\t\t\tint dm = data[i-1] - data[i];\n\t\t\t\tif (dm > 0){\n\t\t\t\t\tsum1 += dm;\n\t\t\t\t\trate = (rate < dm) ? dm : rate;\n\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i=0; i<n1-1; i++){\n\t\t\t\tint dm = (data[i] < rate) ? data[i] : rate;\n\t\t\t\tsum2 += dm;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+(t+1)+\": \"+sum1+\" \"+sum2);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n", "idx": "1801"}
{"func": "package googlejam1.p803;\n\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class SolutionA {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner scanInput = new Scanner(System.in);\r\n\t\tint T = scanInput.nextInt();\r\n\t\tif(T < 1 || T >100)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tInteger[] method1 = new Integer[T];\r\n\t\tInteger[] method2 = new Integer[T];\r\n\t\tfor(int t=1; t<=T; t++) {\r\n\t\t\tint totalIntervals = scanInput.nextInt();\r\n\t\t\tInteger[] mushes = new Integer[totalIntervals];\r\n\t\t\tmushes[0] = scanInput.nextInt();\r\n\t\t\tmethod1[t-1] =0;\r\n\t\t\tmethod2[t-1] = 0;\r\n\t\t\tint maxDiff = -1;\r\n\t\t\tfor(int i=1;i<totalIntervals;i++)\r\n\t\t\t{\r\n\t\t\t\tmushes[i] = scanInput.nextInt();\r\n\t\t\t\tif(mushes[i-1] > mushes[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tint currDiff = mushes[i-1] - mushes[i];\r\n\t\t\t\t\tmethod1[t-1] += currDiff;\r\n\t\t\t\t\tif(maxDiff < currDiff)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmaxDiff = currDiff;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tfor(int i=0;i<totalIntervals - 1;i++)\r\n\t\t\t{\r\n\t\t\t\tif(mushes[i]<=maxDiff)\r\n\t\t\t\t{\r\n\t\t\t\t\tmethod2[t-1]+= mushes[i];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tmethod2[t-1] += maxDiff;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(method1[t-1]<0) method1[t-1] = 0;\r\n\t\t\tif(method2[t-1]<0) method2[t-1] = 0;\r\n\t\t}\r\n\t\tfor(int c=1;c<=T;c++)\r\n\t\t{\r\n\t\t\tString result = \"Case #\" + c + \": \" + method1[c-1] + \" \" + method2[c-1];\r\n\t\t\tSystem.out.println(result);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1803"}
{"func": "package googlejam1.p805;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n        StringBuilder out = new StringBuilder();\r\n        int tests = Integer.parseInt(in.readLine());\r\n        int n;\r\n        int[] mushrooms;\r\n        int[] differences;\r\n        long totalDifferences;\r\n        String[] tok;\r\n        int maxDifference;\r\n        long linearCount;\r\n        \r\n        for(int testno = 1; testno <= tests; testno++)\r\n        {\r\n            out.append(\"Case #\").append(testno).append(\": \");\r\n            \r\n            n = Integer.parseInt(in.readLine());\r\n            tok = in.readLine().trim().split(\"\\\\s+\");\r\n            \r\n            mushrooms = new int[n];\r\n            differences = new int[n];\r\n            totalDifferences = 0;\r\n            maxDifference = 0;\r\n            linearCount = 0;\r\n            \r\n            mushrooms[0] = Integer.parseInt(tok[0]);\r\n            \r\n            for(int i = 1; i < n; i++)\r\n            {\r\n                mushrooms[i] = Integer.parseInt(tok[i]);\r\n                differences[i] = mushrooms[i - 1] - mushrooms[i];\r\n                maxDifference = Math.max(maxDifference, differences[i]);\r\n                totalDifferences += differences[i] > 0 ? differences[i] : 0;\r\n            }\r\n            \r\n            for(int i = 0; i < n - 1; i++)\r\n            {\r\n                if(mushrooms[i] >= maxDifference)\r\n                {\r\n                    linearCount += maxDifference;\r\n                }\r\n                else\r\n                {\r\n                    linearCount += mushrooms[i];\r\n                }\r\n            }\r\n            \r\n            out.append(totalDifferences).append(\" \").append(linearCount).append(\"\\n\");\r\n        }\r\n        \r\n        System.out.println(out);\r\n    }\r\n}\r\n", "idx": "1805"}
{"func": "package googlejam1.p806;\nimport java.util.Scanner; \nimport java.util.ArrayList;\nimport java.io.*;\n\npublic class mushroom\n{\n\tpublic static void main(String[] args)throws IOException\n\t{\n\t\tScanner scan = new Scanner(new File(\"input.txt\"));\n\t\t//Scanner scan = new Scanner(System.in);\n\t\tFileWriter fw = new FileWriter(\"output.txt\");\n\t\tArrayList<String> output = new ArrayList<String>();\n\n\t\tint test_cases = scan.nextInt();\n\n\t\tfor(int i=0; i<test_cases; i++)\n\t\t{\n\t\t\tint n = scan.nextInt();\n\t\t\tint[] middle = new int[n];\n\t\t\tint eaten_any_time = 0;\n\t\t\tint eaten_constant = 0;\n\t\t\tint eating_rate = 0; \n\t\t\tint eaten = 0;\n\n\t\t\tint max_diff = 0;\n\t\t\t\n\t\t\tmiddle[0] = scan.nextInt();\n\t\t\teating_rate = middle[0];\n\t\t\teaten_constant = 0;\n\n\t\t\t//special case: start and end\n\t\t\tif(n == 2)\n\t\t\t{\n\t\t\t\tmiddle[1] = scan.nextInt();\n\t\t\t\tif(middle[1] <= middle[0])\n\t\t\t\t{\n\t\t\t\t\teaten_constant = middle[0] - middle[1];\n\t\t\t\t\teaten_any_time = middle[0] - middle[1];\n\t\t\t\t}\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//eaten_constant = middle[0];\n\n\t\t\t\tfor(int j=1; j<n; j++)\n\t\t\t\t{\n\t\t\t\t\tmiddle[j] = scan.nextInt();\n\t\t\t\t\t\n\t\t\t\t\t//any # at any time min number of mushrooms eatin\n\t\t\t\t\tif(middle[j] >= middle[j-1])\n\t\t\t\t\t\teaten = 0;\n\t\t\t\t\telse\n\t\t\t\t\t\teaten = middle[j-1] - middle[j];\n\n\t\t\t\t\tif(middle[j] < middle[j-1])\n\t\t\t\t\t\teaten_any_time += eaten;\n\n\t\t\t\t\t//find max diff\n\t\t\t\t\tint diff = difference(middle[j-1], middle[j]);\n\t\t\t\t\tif(max_diff < diff)\n\t\t\t\t\t\tmax_diff = diff;\n\t\t\t\t}\n\n\t\t\t\tfor(int j=0; j<n-1; j++)\n\t\t\t\t{\n\t\t\t\t\tif(middle[j] <= max_diff)\n\t\t\t\t\t\teaten_constant += middle[j];\n\t\t\t\t\telse \n\t\t\t\t\t\teaten_constant += max_diff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\toutput.add(\"Case #\" + (i+1) + \": \" + eaten_any_time + \" \" + eaten_constant);\n\t\t}\n\n\t\tfor(String s : output)\n\t\t{\n\t\t\tfw.write(s + \"\\n\");\n\t\t\t//System.out.println(s);\n\t\t}\n\t\tfw.close();\n\t}\n\n\tpublic static int difference(int x, int y)\n\t{\n\t\tif(x > y)\n\t\t\treturn x-y;\n\t\telse return 0;\n\t}\n}", "idx": "1806"}
{"func": "package googlejam1.p807;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\ttry {\r\n\t\t\tSystem.setOut(new PrintStream(\"src/output.out\"));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t\tScanner in = null;\r\n\t\ttry {\r\n\t\t\tin = new Scanner(new File(\"src/A-large (2).in\"));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t// Scanner in = new Scanner(System.in);\r\n\t\tint t = in.nextInt();\r\n\t\tfor (int i = 0; i < t; i++) {\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] tab = new int[n];\r\n\t\t\tint s = 0;\r\n\t\t\tint max = Integer.MIN_VALUE;\r\n\t\t\tfor (int j = 0; j < tab.length; j++) {\r\n\t\t\t\ttab[j] = in.nextInt();\r\n\t\t\t\tif (j != 0) {\r\n\t\t\t\t\tif ((tab[j] - tab[j - 1]) < 0) {\r\n\t\t\t\t\t\ts += -(tab[j] - tab[j - 1]);\r\n\t\t\t\t\t\tif ((tab[j - 1] - tab[j]) > max) {\r\n\t\t\t\t\t\t\tmax = -(tab[j] - tab[j - 1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint k = 0;\r\n\t\t\tint r = tab[0];\r\n\t\t\tif (max < 0)\r\n\t\t\t\tmax = 0;\r\n\t\t\tfor (int j = 0; j < tab.length; j++) {\r\n\t\t\t\tif (j != tab.length - 1) {\r\n\t\t\t\t\tif (tab[j] >= max) {\r\n\t\t\t\t\t\tk += max;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tk += tab[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + s + \" \" + k);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "1807"}
{"func": "package googlejam1.p809;\nimport java.io.*;\r\nimport java.util.*;\r\npublic class A{\r\n\tfinal static String inputFile=\"A-large.in\";\r\n\tfinal static String outputFile=\"A-output.txt\";\r\n\tstatic Scanner reader;\r\n\tstatic PrintStream writer;\r\n\tstatic int n; static long res1,res2,m[],a[],trest2;\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\treader=new Scanner(new FileInputStream(inputFile));\r\n\t\twriter=new PrintStream(new FileOutputStream(outputFile));\r\n\t\tint ntest=reader.nextInt();  int i;\r\n\t\tfor (int test=1; test<=ntest;test++){\r\n\t\t\tn=reader.nextInt(); m=new long[n];\r\n\t\t\tfor (i=0;i<n;i++) m[i]=reader.nextLong();\r\n\t\t\tlong maxrate=0; res1=0;\r\n\t\t\tfor (i=1;i<n;i++){\r\n\t\t\t\tif (m[i-1]>m[i]) res1+=(m[i-1]-m[i]);\r\n\t\t\t\tmaxrate=Math.max(maxrate,m[i-1]-m[i]);\r\n\t\t\t}\r\n\t\t\ta=new long [n+2];\r\n\t\t\tres2=maxrate*n*n; \r\n\t\t\tlong rs,l=0,r=maxrate*n*n,rate;\r\n\t\t\twhile(l<=r){\r\n\t\t\t\trate=(l+r)/2;\r\n\t\t\t\trs=0;\r\n\t\t\t\tfor (i=1;i<n;i++){\r\n\t\t\t\t\tif (m[i-1]>=rate)rs+=rate;\r\n\t\t\t\t\telse rs+=m[i-1];\r\n\t\t\t\t\tif (m[i-1]-rate>m[i]) break;\r\n\t\t\t\t}\r\n\t\t\t\tif (i==n){\r\n\t\t\t\t\tres2=Math.min(rs,res2);\r\n\t\t\t\t\tr=rate-1;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tl=rate+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twriter.println(\"Case #\"+test+\": \"+res1+\" \"+res2);\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "idx": "1809"}
{"func": "package googlejam1.p810;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class MushroomMonster {\r\n\r\n\tstatic BufferedReader br;\r\n\tstatic BufferedWriter bw;\r\n\tstatic String path = \"C:/Users/Alberto/Desktop/GoogleContent2015/Mushroom/A-large.in\";\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\r\n\t\ttry {\r\n\t\t\tbw = new BufferedWriter(\r\n\t\t\t\t\tnew FileWriter(\r\n\t\t\t\t\t\t\t\"C:/Users/Alberto/Desktop/GoogleContent2015/Mushroom/A-large.txt\"));\r\n\r\n\t\t\tbr = new BufferedReader(new FileReader(path));\r\n\r\n\t\t\tString line = br.readLine();\r\n\t\t\tint T = Integer.parseInt(line);\r\n\r\n\t\t\tfor (int i = 1; i <= T; i++)\n\t\t\t\t// Leemos la linea del primer participante\n\t\t\t\ttry {\n\t\t\t\t\tint size = Integer.parseInt(br.readLine());\n\t\t\t\t\tString line1 = br.readLine();\n\t\t\t\t\tInteger[] vect = new Integer[size];\n\t\t\t\t\t// ArrayList<Integer> vect = new ArrayList<Integer>();\n\t\t\t\t\n\t\t\t\t\tlong llevo1 = 0;\n\t\t\t\t\tlong llevo2 = 0;\n\t\t\t\t\tint maxDif = 0;\n\t\t\t\t\n\t\t\t\t\tfor (int i1 = 0; i1 < size; i1++) {\n\t\t\t\t\t\tvect[i1] = Integer.parseInt(line1.split(\" \")[i1]);\n\t\t\t\t\t\t// vect.add(Integer.parseInt(line.split(\" \")[i]));\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t// Sacamos la diferencia maxima\n\t\t\t\t\tfor (int i3 = 0; i3 < size - 1; i3++) {\n\t\t\t\t\t\tif (vect[i3] > vect[i3 + 1] && vect[i3] - vect[i3 + 1] > maxDif)\n\t\t\t\t\t\t\tmaxDif = vect[i3] - vect[i3 + 1];\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tfor (int i2 = 1; i2 < size; i2++) {\n\t\t\t\t\t\t// Soluci\u00ef\u00bf\u00bdn 1:\n\t\t\t\t\t\tif (vect[i2] < vect[i2 - 1]) {\n\t\t\t\t\t\t\tllevo1 += vect[i2 - 1] - vect[i2];\n\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\t// Solucion 2:\n\t\t\t\t\t\tif (vect[i2 - 1] <= maxDif)\n\t\t\t\t\t\t\tllevo2 += vect[i2 - 1];\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tllevo2 += maxDif;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tbw.write(\"Case #\" + i + \": \" + llevo1 + \" \" + llevo2\n\t\t\t\t\t\t\t+ System.lineSeparator());\n\t\t\t\t\n\t\t\t\t} catch (IOException ex) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\r\n\r\n\t\t\tbw.close();\r\n\r\n\t\t} catch (FileNotFoundException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t} catch (IOException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "1810"}
{"func": "package googlejam1.p811;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tFile fileInput = new File(\"A-large.in\");\r\n\t\tFile fileOutput = new File(\"output.out\");\r\n\r\n\t\tBufferedReader reader = new BufferedReader(new FileReader(fileInput));\r\n\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(fileOutput));\r\n\r\n\t\tint cases = Integer.parseInt(reader.readLine());\r\n\r\n\t\tfor (int c = 1; c <= cases; c++) {\r\n\r\n\t\t\tint n = Integer.parseInt(reader.readLine());\r\n\t\t\tString mushroomsS[] = reader.readLine().split(\" \");\r\n\t\t\tint mushrooms[] = new int[n];\r\n\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tmushrooms[i] = Integer.parseInt(mushroomsS[i]);\r\n\t\t\t}\r\n\r\n\t\t\tint eaten1 = 0;\r\n\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\r\n\t\t\t\tif (mushrooms[i - 1] > mushrooms[i]) {\r\n\t\t\t\t\teaten1 += (mushrooms[i - 1] - mushrooms[i]);\r\n\t\t\t\t}\r\n\t\t\t}\n\t\t\tint t[] = Arrays.copyOf(mushrooms, mushrooms.length);\n\t\t\tint k = 0;\n\t\t\t\n\t\t\tfor (int i1 = 1; i1 < t.length; i1++) {\n\t\t\t\tif ((t[i1-1] - t[i1]) > k) {\n\t\t\t\t\tk = (t[i1-1] - t[i1]);\n\t\t\t\t}\n\t\t\t}\r\n\r\n\t\t\tint eatCount = k;\r\n\t\t\tint eaten2 = 0;\r\n\r\n\t\t\tif (eatCount == 0) {\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor (int i = 0; i < n - 1; i++) {\r\n\r\n\t\t\t\t\tif (mushrooms[i] < eatCount) {\r\n\t\t\t\t\t\teaten2 += mushrooms[i];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\teaten2 += eatCount;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twriter.write(\"Case #\" + c + \": \" + eaten1 + \" \" + eaten2 + \"\\n\");\r\n\r\n\t\t}\r\n\t\treader.close();\r\n\t\twriter.close();\r\n\t}\r\n}", "idx": "1811"}
{"func": "package googlejam1.p813;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\r\n\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tint N = Integer.parseInt(in.readLine());\n\t\t\tString[] data = in.readLine().split(\" \");\n\t\t\tint[] M1 = new int[N];\n\t\t\tfor (int i = 0; i < N; i++)\n\t\t\t\tM1[i] = Integer.parseInt(data[i]);\n\t\t\tint[] M = M1;\n\t\t\tint m = 0;\n\t\t\tfor (int i = 1; i < M.length; i++)\n\t\t\t\tif (M[i] < M[i - 1])\n\t\t\t\t\tm += M[i - 1] - M[i];\r\n\t\t\tint y = m;\n\t\t\tint m1 = 0;\n\t\t\t\n\t\t\tdouble rate = 0;\n\t\t\tfor (int i = 1; i < M.length; i++) {\n\t\t\t\tint diff = M[i - 1] - M[i];\n\t\t\t\tif (diff > 0) {\n\t\t\t\t\tdouble r = diff / 10.0;\n\t\t\t\t\tif (r > rate)\n\t\t\t\t\t\trate = r;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i = 1; i < M.length; i++)\n\t\t\t\tm1 += Math.min(rate * 10, M[i - 1]);\r\n\t\t\tint z = m1;\r\n\t\t\tout.println(\"Case #\" + t + \": \" + y + \" \" + z);\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "1813"}
{"func": "package googlejam1.p814;\nimport java.io.*;\r\nimport java.util.Scanner;\r\nclass Mushrooms{\r\n\tpublic static void main(String[]args) throws UnsupportedEncodingException,FileNotFoundException{\r\n\t\tFileInputStream fis = new FileInputStream(\"A-large.in\") ;\r\n\t\tScanner sc = new Scanner(fis);\r\n\t\tPrintWriter writer = new PrintWriter(\"out1.txt\", \"UTF-8\");\r\n\t\tint t,x,i,j,n,plate[],eat,eat1,f;\r\n\t\tt=sc.nextInt();\r\n\t\tfor(x=1;x<=t;x++){\r\n\t\t\tn=sc.nextInt();\r\n\t\t\tf=0;\r\n\t\t\teat=0;\r\n\t\t\teat1=0;\r\n\t\t\tplate = new int[n];\r\n\t\t\tplate[0]=sc.nextInt();\r\n\t\t\tfor(i=1;i<n;i++){\r\n\t\t\t\tplate[i]=sc.nextInt();\r\n\t\t\t\tif(plate[i]<plate[i-1])\r\n\t\t\t\t\teat+=plate[i-1]-plate[i];\r\n\t\t\t}\r\n\t\t\tfor(i=1;i<n;i++){\r\n\t\t\t\tint a = plate[i-1]-plate[i];\r\n\t\t\t\tf=f>a?f:a;\r\n\t\t\t}\r\n\t\t\tfor(i=0;i<n-1;i++){\r\n\t\t\t\teat1+= plate[i]-f>=0?f:plate[i];\r\n\t\t\t}\r\n\t\t\twriter.println(\"Case #\"+x+\": \"+eat+\" \"+eat1);\r\n\t\t\t\r\n\t\t}\r\n\t\twriter.close();\r\n\t}\r\n}", "idx": "1814"}
{"func": "package googlejam1.p815;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\npublic class MushroomMonster{\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint totCases = Integer.parseInt(br.readLine());\r\n\t\tfor (int i = 0; i < totCases; i++) {\r\n\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\tint Y = 0; //Champi\u00f1ones estilo 1\r\n\t\t\tint Z = 0; //Champi\u00f1ones estilo 2\r\n\t\t\tString[] data = br.readLine().split(\" \");\r\n\t\t\tint minDif = 0;\r\n\t\t\tfor (int j = 1; j < N; j++) {\r\n\t\t\t\tint dataAnt = Integer.parseInt(data[j-1]);\r\n\t\t\t\tint dataAct = Integer.parseInt(data[j]);\r\n\t\t\t\tif (dataAct<dataAnt){\r\n\t\t\t\t\tint dif = dataAnt-dataAct;\r\n\t\t\t\t\tY+=dif;\r\n\t\t\t\t\tif (minDif<dif){\r\n\t\t\t\t\t\tminDif=dif;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (int j = 1; j < N; j++) {\r\n\t\t\t\tint dataAnt = Integer.parseInt(data[j-1]);\r\n\t\t\t\tint dataAct = Integer.parseInt(data[j]);\r\n\t\t\t\tZ+=(dataAnt-dataAct)<minDif?Math.min(dataAnt, minDif):minDif;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+Y+\" \"+Z);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "1815"}
{"func": "package googlejam1.p816;\n/// A. Mushroom Monster\r\n//import java.awt.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.text.*;\r\nimport java.util.*;\r\n\r\npublic class A\r\n{\r\n  final double inf = Double.POSITIVE_INFINITY, eps = 1e-9;\r\n  final int eof = StreamTokenizer.TT_EOF, max = 10000;\r\n  int cases, nt, n, maxVal;\r\n  int[] mushroom, ans;\r\n  \r\n  public static void main (String[] args)\r\n  {\r\n    A r = (new A());\n\tScanner sc = new Scanner(System.in);\n\t\n\tr.cases = 1;\n\tr.nt = sc.nextInt();\n\twhile (--r.nt >= 0)\n\t{\n\t  System.out.print(\"Case #\" + r.cases + \": \");\n\t  r.n = sc.nextInt();\n\t  r.ans = new int[2];\n\t  r.mushroom = new int[r.n];\n\t  for (int i = 0; i < r.n; ++i)\n\t  {\n\t    r.mushroom[i] = sc.nextInt();\n\t  }\n\t  r.ans[0] = 0;\n\t  for (int i = 1; i < r.n; ++i)\n\t  {\n\t    if (r.mushroom[i] <= r.mushroom[i - 1])\n\t    {\n\t      r.ans[0] += r.mushroom[i - 1] - r.mushroom[i];\n\t    }\n\t  }\n\t  r.maxVal = 0;\n\t  for (int i = 1; i < r.n; ++i)\n\t  {\n\t    if (r.mushroom[i] < r.mushroom[i - 1])\n\t    {\n\t      r.maxVal = Math.max(r.maxVal, r.mushroom[i - 1] - r.mushroom[i ]);\n\t    }\n\t  }\n\t  r.ans[1] = 0;\n\t  for (int i = 1; i < r.n; ++i)\n\t  {\n\t    r.ans[1] += Math.min(r.mushroom[i - 1], r.maxVal);\n\t  }\n\t  System.out.println(r.ans[0] + \" \" + r.ans[1]);\n\t  ++r.cases;\n\t}\r\n  }\r\n}", "idx": "1816"}
{"func": "package googlejam1.p818;\nimport java.util.*;\nimport java.io.*;\n\npublic class CodeJam2015 {\n\n    final static String PROBLEM_NAME = \"applause\";\n    final static String WORK_DIR = \"/Users/eschra000/dev-work/CodeJam/\" + PROBLEM_NAME + \"/\";\n    final static String INPUT_FILE_NAME = \"input.txt\";\n    final static String OUTPUT_FILE_NAME = \"output.txt\";\n\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + INPUT_FILE_NAME));\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR\n                + OUTPUT_FILE_NAME));\n        int caseCnt = sc.nextInt();\n        CodeJam2015 codeJam2015 = new CodeJam2015();\n        for (int caseNum = 0; caseNum < caseCnt; caseNum++) {\n            //System.out.println(\"Processing test case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum + 1) + \": \");\n            long start = System.currentTimeMillis();\n            int intervals = sc.nextInt();\n\t\t\tint[] mushroomsAtInterval = new int[intervals];\n\t\t\tint y = 0;\n\t\t\tint z = 0;\n\t\t\tfor (int i = 0; i < intervals; i++) {\n\t\t\t    mushroomsAtInterval[i] = sc.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tint maxRate = 0;\n\t\t\tfor (int i = 1; i < intervals; i++) {\n\t\t\t    y += Math.max(mushroomsAtInterval[i-1] - mushroomsAtInterval[i], 0);\n\t\t\t    maxRate = Math.max(maxRate, mushroomsAtInterval[i-1] - mushroomsAtInterval[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i = 0; i < intervals - 1; i++) {\n\t\t\t    z+= Math.min(mushroomsAtInterval[i], maxRate);\n\t\t\t}\n\t\t\t\n\t\t\tpw.println(y + \" \" + z);\n            long end = System.currentTimeMillis();\n            //System.out.println(\"Case took \" + (end - start) + \"ms\");\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n\n}\n", "idx": "1818"}
{"func": "package googlejam1.p820;\nimport java.io.*;\nimport java.util.*;\n\nclass DoIt\n{\n    public static void main(String[] args)throws IOException\n    {\n        Scanner sc=new Scanner(System.in);\n        int test = sc.nextInt();\n        for(int t=1; t<=test; t++)\n        {\n            int n = sc.nextInt();\n            int[] a = new int[n];\n            for(int i=0; i<n; i++)\n            {\n                a[i]=sc.nextInt(); \n            }\n            int check1 = 0;\n            int maxDiff = 0;\n            for(int i=1; i<n; i++)\n            {\n                if(a[i]<a[i-1])\n                    check1 += a[i-1]-a[i]; \n                if((a[i-1]-a[i])>maxDiff )\n                {\n                    maxDiff = a[i-1]-a[i];\n                }\n            }\n            int check2 = 0;\n            for(int i=0; i<(n-1); i++)\n            {\n                if(a[i] <= maxDiff)\n                {\n                    check2 += a[i];\n                }\n                else\n                    check2 += maxDiff;\n            }\n            System.out.println(\"case #\"+t+\": \"+check1+\" \"+check2);\n        }\n    }\n}", "idx": "1820"}
{"func": "package googlejam1.p821;\nimport java.io.FileInputStream;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class basic {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tFileInputStream in = new FileInputStream(\r\n\t\t\t\t\"D:/works/java/G1A/bin/A-large (1).in\");\r\n\t\tScanner s = new Scanner(in);\r\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\r\n\t\t\t\t\"D:/works/java/G1A/bin/3large.out\"));\r\n\r\n\t\tint n = Integer.parseInt(s.next());\r\n\t\tfor (int i = 1; i <= n; i++) {\r\n\t\t\tint t = s.nextInt();\r\n\t\t\tint a[] = new int[t];\r\n\t\t\tint sum = 0, sum2 = 0, fsum = 0, r = 0;\r\n\t\t\tfor (int j = 0; j < a.length; j++) {\r\n\t\t\t\ta[j] = s.nextInt();\r\n\t\t\t\tif (j > 0 && a[j] < a[j - 1])\r\n\t\t\t\t\tsum += a[j - 1] - a[j];\r\n\t\t\t\tif (j > 0 && r < a[j - 1] - a[j]&& a[j] < a[j - 1])\r\n\t\t\t\t\tr = a[j - 1] - a[j];\r\n\t\t\t}\r\n\t\t\tfor (int j = 0; j < a.length -1; j++) {\r\n\t\t\t\tsum2 += a[j];\r\n\t\t\t\tif (a[j] >= r) {\r\n\t\t\t\t\tfsum += r;\r\n\t\t\t\t\tsum2 -= r;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfsum += a[j];\r\n\t\t\t\t\tsum2 = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.println(\"Case #\" + i + \": \" + sum + \" \" + fsum);\r\n\t\t\tSystem.out.println(\"Case #\" + i + \": \" + sum + \" \" + fsum);\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1821"}
{"func": "package googlejam1.p823;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemA {\r\n\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n//\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in) );\r\n\t\tBufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint cases = in.nextInt();\r\n\t\tint contador = 1;\r\n\t\twhile(cases>0){\r\n\t\t\t\r\n\t\tint hongos = in.nextInt();\r\n\t\tint anterior = 0;\r\n\t\tint actual = 0;\r\n\t\tint metodo1 = 0;\r\n\t\tint metodo2 = 0;\r\n\t\tint c = 0;\r\n\t\tint[] anteriores = new int[hongos];\r\n\t\twhile(hongos>0){\r\n\t\t\t// caso 1\r\n\t\t\t\r\n\t\tactual = in.nextInt();\r\n\t\t\r\n\t\tif(actual<anterior){\r\n\t\t\tmetodo1 += anterior - actual;\r\n\t\t}\r\n\t\t\r\n\t\tanteriores[c] = actual;\r\n\t   \r\n\t\tanterior = actual;\t\r\n\t\t  c++;\r\n\t\t\thongos--;\r\n\t\t}\r\n\t\tint diferencia = 0;\r\n\r\n\t\tfor(int i=0;i<anteriores.length-1;i++){\r\n\t\t\tint comp = anteriores[i] - anteriores[i+1];\r\n\t\t\tif(diferencia<comp){\r\n\t\t\t\tdiferencia = comp;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(int i=0;i<anteriores.length-1;i++){\r\n\t\t\tif(anteriores[i]>=diferencia){\r\n\t\t\t\tmetodo2 += diferencia;\r\n\t\t\t}else{\r\n\t\t\t\tmetodo2 += anteriores[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\tout.write(\"Case #\" +contador+\": \"+ metodo1+\" \" + metodo2 + \"\\n\");\r\n\t\t\t\r\n\t\t\tcontador++;\r\n\t\t\tcases--;\r\n\t\t}\r\n\t\tout.flush();\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n", "idx": "1823"}
{"func": "package googlejam1.p825;\n//Problem A - Code Jam Round 1A\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n  static final String FILENAME = \"input\";\r\n  static final String IN = FILENAME + \".in\";\r\n  static final String OUT = \"output.out\";\r\n  Scanner sc;\r\n  BufferedWriter out;\r\n \t\r\n  static final int MAXP = 1000;\r\npublic int absVal =0;\r\n  public static void main(String args[]) throws Exception {\r\n    A r = new A();\n\tr.sc = new Scanner(new File(A.IN));\n\tr.out = new BufferedWriter(new FileWriter(A.OUT));\n\tint t = Integer.parseInt(r.sc.nextLine());\n\tfor (int i = 1; i <= t; i++) {\n\t  r.out.write(\"Case #\" + i + \": \");\n\t  int a=0;\n\tint b=0;\n\tr.absVal=0;\n\tint d = Integer.parseInt(r.sc.nextLine());\n\tString[] tmp = r.sc.nextLine().split(\" \");\n\tint[] tmpInt = new int[tmp.length];\n\tfor (int i1 = 0; i1 < d; i1++) {\n\t\n\t    tmpInt[i1] = Integer.parseInt(tmp[i1]);\n\t}\n\tint x = tmpInt[0];\n\t  int a1=0;\n\t  for(int i1=1;i1<tmpInt.length;i1++)\n\t  {\n\t\t  if (tmpInt[i1]<x)\n\t\t  {\n\t\t\t  a1 = a1 + x - tmpInt[i1];\n\t\t\t  r.absVal = Math.max(r.absVal, Math.abs(x-tmpInt[i1]));\n\t\t  }\n\t\t  x = tmpInt[i1]; \n\t  }\n\ta = a1;\n\tint ans=0;\n\t  for(int i1=0;i1<tmpInt.length -1;i1++)\n\t  {\n\t\t  if (tmpInt[i1]<=r.absVal)\n\t\t  {\n\t\t\t  ans = ans + tmpInt[i1];\n\t\t  }\n\t\t  else if(tmpInt[i1]>r.absVal)\n\t\t  {\n\t\t\t  ans = ans + r.absVal;\n\t\t  }\n\t  }\n\tb = ans;\n\tr.out.write(Integer.toString(a) + \" \" +Integer.toString(b));\n\tr.out.newLine();\n\tr.out.flush();\n\t}\n\tr.sc.close();\n\tr.out.close();\r\n  }\r\n}\r\n", "idx": "1825"}
{"func": "package googlejam1.p826;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class start {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner sc = new Scanner(new File(\"A-large.in\"));\r\n\t\tFileWriter fw = new FileWriter(new File(\"outputLarge.txt\"));\r\n\t\tint numTestCases = sc.nextInt();\r\n\t\tfor (int testCaseNum = 0; testCaseNum < numTestCases; testCaseNum++) {\r\n\r\n\t\t\t// Parse test case\r\n\t\t\tint numStates = sc.nextInt();\r\n\t\t\t\r\n\t\t\tint diff = 0;\r\n\t\t\tint maxEatPerState = 0;\r\n\t\t\t\r\n\t\t\tint[] states = new int[numStates];\r\n\t\t\tfor (int state = 0; state < numStates; state++) {\r\n\t\t\t\tint numMushrooms = sc.nextInt();\r\n\t\t\t\tstates[state] = numMushrooms;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint sumEat = 0;\r\n\t\t\tfor (int state = 1; state < numStates; state++) {\r\n\t\t\t\tdiff = states[state] - states[state - 1];\r\n\t\t\t\tif (diff < 0) {\r\n\t\t\t\t\tint d = -1 * diff;\r\n\t\t\t\t\tif (maxEatPerState < d) {\r\n\t\t\t\t\t\tmaxEatPerState = d;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsumEat += d;\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint m2Eat = 0;\r\n\t\t\tfor (int state = 0; state < numStates-1; state++) {\r\n\t\t\t\tint numMushrooms = states[state];\r\n\t\t\t\tif (numMushrooms < maxEatPerState) {\r\n\t\t\t\t\tm2Eat += numMushrooms;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tm2Eat += maxEatPerState;\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(m2Eat);\r\n\t\t\t}\r\n\t\t\tSystem.out.printf(\"Case #%d: %d %d %d%n\", testCaseNum+1, sumEat, m2Eat, maxEatPerState);\r\n\t\t\tfw.write(String.format(\"Case #%d: %d %d%n\", testCaseNum+1, sumEat, m2Eat));\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tfw.close();\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "1826"}
{"func": "package googlejam1.p827;\nimport java.util.Scanner;\nimport java.util.Arrays;\nclass mush\n{\n    public static void main(String[] args)\n    {\n\tScanner in=new Scanner(System.in);\n\tint ncase=in.nextInt();\n\tfor(int icase=0;icase<ncase;icase++){\n\t    int icase1=icase+1;\n\t    int N=in.nextInt();\n\t    int[] mush=new int[N];\n\t    for(int i=0;i<N;i++)\n\t\tmush[i]=in.nextInt();\n\n\t    int imeth1=0;\n\t    int imeth2=0;\t    \n\t    for(int i=0;i<N-1;i++){\n\t\tif(mush[i]>mush[i+1]){\n\t\t    int dif=mush[i]-mush[i+1];\n\t\t    imeth1+=dif;\n\t\t}\n\t\timeth2+=mush[i];\n\t    }\n\t    if(imeth2>=mush[N-1]){\n\t\timeth2=imeth2-mush[N-1];\n\t    }\n\n\t    int rate=0;\n\n\t    for(int i=1;i<N;i++){\n\t\tif(mush[i-1]>mush[i]){\n\t\t    int eaten=mush[i-1]-mush[i];\n\t\t    int r=eaten;\n\t\t    if(r>rate)\n\t\t\trate=r;\n\t\t}\n\n\t    }\n\t    \n\t    imeth2=0;\n\n\t    if(rate!=0){\n\t\tfor(int i=0;i<N-1;i++){\n\t\t    if(mush[i]>=rate){\n\t\t\timeth2+=rate;\n\t\t    }else{\n\t\t\timeth2+=mush[i];\n\t\t    }\n\t\t}\n\t    }\n\t    \n\n\t    System.out.println(\"Case #\"+icase1+\":\"+\" \"+imeth1+\" \"+imeth2);\n\t}\n    }\n}\n", "idx": "1827"}
{"func": "package googlejam1.p828;\nimport java.util.*;\r\nimport java.util.regex.*;\r\nimport java.math.*;\r\nimport java.io.*;\r\n\r\npublic class A {\r\n    \r\n    static Scanner in = new Scanner(System.in);\r\n    \r\n    static PrintStream out = System.out;\r\n    \r\n    public static void main(String[] args) {\r\n        int T = in.nextInt();\r\n        \r\n        for (int test = 1; test <= T; test++){\r\n            int N = in.nextInt();\r\n            \r\n            int[] m = new int[N];\r\n            \r\n            for (int i = 0; i < N; i++){\r\n                m[i] = in.nextInt();\r\n            }\r\n            \r\n            int R1 = 0;\r\n            \r\n            for (int i = 1; i < N; i++){\r\n                if (m[i] - m[i - 1] < 0){\r\n                    R1 += Math.abs(m[i] - m[i - 1]);\r\n                }\r\n            }\r\n            \r\n            int maxDiff = 0;\r\n            \r\n            for (int i = 0; i < N - 1; i++){\r\n                maxDiff = Math.max(maxDiff, m[i] - m[i + 1]);\r\n            }\r\n            \r\n            int R2 = 0;\r\n            \r\n            //out.println(maxDiff);\r\n            \r\n            for (int i = 0; i < N - 1; i++){\r\n                R2 += Math.min(m[i], maxDiff);\r\n            }\r\n            \r\n            out.println(String.format(\"Case #%d: %d %d\", test, R1, R2));\r\n        }\r\n    }\r\n}\r\n", "idx": "1828"}
{"func": "package googlejam1.p830;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\n\r\n/**\r\n * @author Ernesto Velazquez Caballero\r\n * @since 18/04/2015\r\n */\r\npublic class ProblemA {\r\n    private static final String FOLDER_PATH = \"res\\\\round\\\\one\\\\a\";\r\n//    private static final String FILE_PATH = \"A-small-practice.in\";\r\n//    private static final String FILE_PATH = \"A-small-attempt0.in\";\r\n    private static final String FILE_PATH = \"A-large.in\";\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        final FileReader fileReader = new FileReader(FOLDER_PATH + \"\\\\\" + FILE_PATH);\r\n        final BufferedReader bufferedReader = new BufferedReader(fileReader);\r\n\r\n        final int numberOfTests = Integer.parseInt(bufferedReader.readLine());\r\n\r\n        for (int i = 0; i < numberOfTests; i ++) {\r\n            final int n = Integer.parseInt(bufferedReader.readLine());\r\n            final String[] m = bufferedReader.readLine().split(\" \");\r\n\r\n            int result_1 = 0;\r\n            int result_2 = 0;\r\n            int current = Integer.parseInt(m[0]);\r\n\r\n            int pace = 0;\r\n\r\n            for (int j = 0; j < m.length - 1; j ++) {\r\n                int newPace = Integer.parseInt(m[j]) - Integer.parseInt(m[j+1]);\r\n\r\n                if (newPace >= 0) {\r\n                    if (newPace > pace) {\r\n                        pace = newPace;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (int j = 1; j < m.length; j ++) {\r\n                int mInt = Integer.parseInt(m[j]);\r\n\r\n                if (current >= mInt) {\r\n                    result_1 += current - mInt;\r\n                }\r\n\r\n                result_2 += (current < pace) ? current : pace;\r\n                current = mInt;\r\n            }\r\n\r\n            System.out.println(\"Case #\" + (i + 1) + \": \" + result_1 + \" \" + result_2);\r\n        }\r\n    }\r\n}\r\n", "idx": "1830"}
{"func": "package googlejam1.p831;\n//Problem A - Code Jam Round 1A\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n  static final String FILENAME = \"input\";\r\n  static final String IN = FILENAME + \".in\";\r\n  static final String OUT = \"output.out\";\r\n  Scanner sc;\r\n  BufferedWriter out;\r\n\r\npublic int absVal =0;\r\n  public static void main(String args[]) throws Exception {\r\n    A r = new A();\n\tr.sc = new Scanner(new File(A.IN));\n\tr.out = new BufferedWriter(new FileWriter(A.OUT));\n\tint t = Integer.parseInt(r.sc.nextLine());\n\tfor (int i = 1; i <= t; i++) {\n\t  r.out.write(\"Case #\" + i + \": \");\n\t  int a=0;\n\tint b=0;\n\tr.absVal=0;\n\tint d = Integer.parseInt(r.sc.nextLine());\n\tString[] tmp = r.sc.nextLine().split(\" \");\n\tint[] tmpInt = new int[tmp.length];\n\tfor (int i1 = 0; i1 < d; i1++) {\n\t\n\t    tmpInt[i1] = Integer.parseInt(tmp[i1]);\n\t}\n\tint x = tmpInt[0];\n\t  int a1=0;\n\t  for(int i1=1;i1<tmpInt.length;i1++)\n\t  {\n\t\t  if (tmpInt[i1]<x)\n\t\t  {\n\t\t\t  a1 = a1 + x - tmpInt[i1];\n\t\t\t  r.absVal = Math.max(r.absVal, Math.abs(x-tmpInt[i1]));\n\t\t  }\n\t\t  x = tmpInt[i1]; \n\t  }\n\ta = a1;\n\tint ans=0;\n\t  for(int i1=0;i1<tmpInt.length -1;i1++)\n\t  {\n\t\t  if (tmpInt[i1]<=r.absVal)\n\t\t  {\n\t\t\t  ans = ans + tmpInt[i1];\n\t\t  }\n\t\t  else if(tmpInt[i1]>r.absVal)\n\t\t  {\n\t\t\t  ans = ans + r.absVal;\n\t\t  }\n\t  }\n\tb = ans;\n\tr.out.write(Integer.toString(a) + \" \" +Integer.toString(b));\n\tr.out.newLine();\n\tr.out.flush();\n\t}\n\tr.sc.close();\n\tr.out.close();\r\n  }\r\n}\r\n", "idx": "1831"}
{"func": "package googlejam1.p836;\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\nclass Solution19 {\r\n\r\n    public static void main(String[] args)\r\n    {\r\n        try{\r\n            PrintWriter out=new PrintWriter(new File(\"G://codejam//A-large.out\"));\r\n            Scanner sc=new Scanner(new File(\"G://codejam//A-large.in\"));\r\n            int t=sc.nextInt();\r\n           for(int k=1;k<=t;k++)\r\n            {\r\n\t\t\t\t\t\tint n=sc.nextInt();\r\n\t\t\t\t\t\tint[] m=new int[n];\r\n\r\n\t\t\t\t\t\tlong sumx=0,sumy=0;\r\nint factor=0;\r\n\t\t\t\t\t\tfor(int i=0;i<n;i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tm[i]=sc.nextInt();\r\n\t\t\t\t\t\t\tif(i>=1)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(m[i]<m[i-1])\r\n\t\t\t\t\t\t\t\t{int newfactor=m[i-1]-m[i];\r\n\t\t\t\t\t\t\t\t\tif(newfactor>factor)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tfactor=newfactor;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t\tfor(int i=0;i<n;i++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(i<=n-2 && m[i]>m[i+1])\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tsumx=sumx+m[i]-m[i+1];\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(i<n-1)\r\n\t\t\t\t\t\t{\tif(m[i]<=factor )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tsumy=sumy+m[i];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tsumy=sumy+factor;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tout.println(\"Case #\"+k+\": \"+sumx+\" \"+sumy);\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n             out.close();\r\n        }catch(Exception e)\r\n        {\r\n            System.out.println(e);\r\n        }\r\n    }\r\n\r\n}", "idx": "1836"}
{"func": "package googlejam1.p837;\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass mushroom\r\n{\r\n\t\r\n\tpublic static void main (String[] args) throws java.lang.Exception\r\n\t{\r\n\t\t// your code goes here\r\n\t\tInputStream inputStream = new FileInputStream(\"D:\\\\test2.in\");\r\n\t\tBufferedReader r = new BufferedReader (new InputStreamReader (inputStream));\t\t\r\n\t\tint numtestcase=0;\r\n\t\t//while (!(s=r.readLine()).startsWith(\"42\")) System.out.println(s);\r\n\t\tnumtestcase=Integer.parseInt(r.readLine());\r\n\t\tfor(int i=1;i<=numtestcase;i++)\r\n\t\t{\r\n\t\t\tString s=r.readLine();\r\n\t\t\tint n=Integer.parseInt(s);\r\n\t\t\tString[] s1=r.readLine().split(\" \");\r\n\t\t\tint c1=0,c2=0,maxdiff=0;\r\n\t\t\tfor(int j=0;j<n-1;j++)\r\n\t\t\t{\r\n\t\t\t\tint a=Integer.parseInt(s1[j]);\r\n\t\t\t\tint b=Integer.parseInt(s1[j+1]);\r\n\t\t\t\tif(b<a) c1+=a-b;\r\n\t\t\t\tif(a-b>maxdiff) maxdiff=a-b;\r\n\t\t\t}\r\n\t\t\tfor(int j=0;j<n-1;j++)\r\n\t\t\t{\r\n\t\t\t\tint a=Integer.parseInt(s1[j]);\r\n\t\t\t\tint b=Integer.parseInt(s1[j+1]);\r\n\t\t\t\tif(a<=maxdiff) \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tc2+=a;\r\n\t\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tc2+=maxdiff;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t\t//if(c2>c3) c2=c3;\r\n\t\t\tSystem.out.println(\"Case #\"+Integer.toString(i)+\": \"+Integer.toString(c1)+ \" \" + Integer.toString(c2));\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}", "idx": "1837"}
{"func": "package googlejam1.p839;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\n/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n/**\r\n *\r\n * @author Administrator\r\n */\r\npublic class CodeJamA {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        System.setIn(new FileInputStream(\"A-large.in\"));\r\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(bf.readLine());\r\n        for (int XXX = 0; XXX < T; XXX++) {\r\n            bf.readLine();\r\n            int X[];\r\n            String data[] = bf.readLine().split(\" \");\r\n            X = new int[data.length];\r\n            int prev = Integer.parseInt(data[0]);\r\n            X[0] = prev;\r\n            int A = 0;\r\n            int B = 0;\r\n            int dif = 0;\r\n            int Z = 0;\r\n            for (int i = 1; i < data.length; i++) {\r\n                X[i] = Integer.parseInt(data[i]);\r\n                if (prev > X[i]) {\r\n                    dif = prev - X[i];\r\n                    A += dif;\r\n                    if (dif > Z) {\r\n                        Z = dif;\r\n                    }\r\n                }\r\n                prev = X[i];\r\n            }\r\n\r\n            B = 0;\r\n            for (int i = 0; i < data.length - 1; i++) {\r\n                if (X[i] <= Z) {\r\n                    B += X[i];\r\n                } else {\r\n                    B += Z;\r\n                }\r\n            }\r\n\r\n            System.out.printf(\"Case #%d: %d %d\\n\", XXX + 1, A, B);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n", "idx": "1839"}
{"func": "package googlejam1.p840;\nimport java.util.Scanner;\r\n\r\n\r\npublic class MushroomMonster {\r\n\r\n    private static Scanner s;\r\n\r\n    public static void main(String args[])\r\n    {\r\n        s = new Scanner(System.in);\r\n        int count = s.nextInt();\r\n        s.nextLine();\r\n\r\n        for(int i = 1; i <= count; i ++)\r\n        {\r\n            int y = 0;\n\t\t\tint z = 0;\n\t\t\t\n\t\t\t\n\t\t\tint n = s.nextInt();\n\t\t\tint[] nums = new int[n];\n\t\t\ts.nextLine();\n\t\t\tfor(int i1 = 0; i1 < nums.length; i1++){\n\t\t\t    nums[i1] = s.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\t//method 1\n\t\t\tint cur = nums[0];\n\t\t\tint biggestDif = 0;\n\t\t\tfor(int i3 = 1; i3 < nums.length; i3++){\n\t\t\t    if(nums[i3] < cur){\n\t\t\t        int dif = cur - nums[i3];\n\t\t\t        y += dif;\n\t\t\t        if(biggestDif < dif){\n\t\t\t            biggestDif = dif;\n\t\t\t        }\n\t\t\t    }\n\t\t\t    cur = nums[i3];\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i2 = 0; i2 < nums.length-1; i2++){\n\t\t\t   z+=Math.min(biggestDif, nums[i2]);\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\"+i+\": \" + y + \" \" + z);\n\t\t\ts.nextLine();\r\n\r\n        }\r\n\r\n    }\r\n}", "idx": "1840"}
{"func": "package googlejam1.p841;\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * Created by yilinhe on 4/17/15. All right reserved.\n */\npublic class p1 {\n    public static void main(String args[]) throws IOException {\n        Scanner input = new Scanner(new FileInputStream( new File(\"p1small.txt\")));\n        BufferedWriter bfr = new BufferedWriter(new FileWriter( new File(\"p1small.result\")));\n        int counter = 1;\n        input.nextLine();\n        while(input.hasNext()){\n            input.nextLine();\n            String[] line = input.nextLine().split(\" \");\n\t\t\tint[] res1 = new int[2];\n\t\t\tList<Integer> mushrooms =new ArrayList<>();\n\t\t\tfor (String s : line){\n\t\t\t    mushrooms.add(Integer.valueOf(s));\n\t\t\t}\n\t\t\tint last = mushrooms.get(0);\n\t\t\tint rate = 0;\n\t\t\tfor (int i = 1;i<mushrooms.size();i++){\n\t\t\t    int cur = mushrooms.get(i);\n\t\t\t    int diff = last - cur;\n\t\t\t    if (diff > 0){\n\t\t\t        res1[0]+=diff;\n\t\t\t    }\n\t\t\t    if (diff>rate){\n\t\t\t        rate = diff;\n\t\t\t    }\n\t\t\t    last = cur;\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i = 0;i<mushrooms.size()-1;i++){\n\t\t\t    int cur = mushrooms.get(i);\n\t\t\t    if (cur < rate){\n\t\t\t        res1[1] += cur;\n\t\t\t    }else{\n\t\t\t        res1[1] += rate;\n\t\t\t    }\n\t\t\t}\n            int[] res = res1;\n            System.out.printf(\"Case #%d: %d %d\\n\",counter++,res[0],res[1]);\n        }\n        bfr.flush();\n    }\n}\n", "idx": "1841"}
{"func": "package googlejam1.p843;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Mushrooms {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tMushrooms r = new Mushrooms();\n\t\tScanner sc = new Scanner(new BufferedReader(new FileReader(\n\t\t\t\t\"A-small-attempt0.in\")));\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"A-small-attempt0.out\"));\n\t\t\n\t\tint nc = sc.nextInt();\n\t\tfor (int tc = 1; tc <= nc; tc++) {\n\t\t\tint n = sc.nextInt();\n\t\t\tint[] a = new int[n];\n\t\t\tint ans0 = 0;\n\t\t\tint ans1 = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ta[i] = sc.nextInt();\n\t\t\t\tif (i > 0 && a[i - 1] > a[i])\n\t\t\t\t\tans0 += a[i - 1] - a[i];\n\t\t\t}\n\t\t\tif (ans0 > 0) {\n\t\t\t\tint lo = 1;\n\t\t\t\tint hi = 10000;\n\t\t\t\twhile (lo < hi) {\n\t\t\t\t\tint rate = (lo + hi) / 2;\n\t\t\t\t\tboolean ok = true;\n\t\t\t\t\tfor (int i = 1; i < n; i++) {\n\t\t\t\t\t\tif (a[i - 1] - rate > a[i]) {\n\t\t\t\t\t\t\tok = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (ok)\n\t\t\t\t\t\thi = rate;\n\t\t\t\t\telse\n\t\t\t\t\t\tlo = rate + 1;\n\t\t\t\t}\n\t\t\t\tfor (int i = 1; i < n; i++) {\n\t\t\t\t\tif (lo <= a[i - 1]) {\n\t\t\t\t\t\tans1 += lo;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tans1 += a[i - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tpw.printf(\"Case #%d: %d %d\\n\", tc, ans0, ans1);\n\t\t}\n\t\tsc.close();\n\t\tpw.close();\r\n\t}\r\n\r\n}\r\n", "idx": "1843"}
{"func": "package googlejam1.p844;\nimport java.util.*;\n\npublic class A {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint T = sc.nextInt();\n\t\tfor (int caze = 1; caze <= T; caze++) {\n\t\t\tint ans1 = 0;\n\t\t\tint ans2 = Integer.MAX_VALUE;\n\t\t\tint N = sc.nextInt();\n\t\t\tint[] mush = new int[N];\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tmush[i] = sc.nextInt();\n\t\t\t}\t\n\n\t\t\tfor (int i = 0; i < N-1; i++) {\n\t\t\t\tint best = 100000000;\n\t\t\t\tif (mush[i] > mush[i+1]) {\n\t\t\t\t\tbest = Math.abs(mush[i]-mush[i+1]);\n\t\t\t\t\tbest = Math.min(best, mush[i]);\n\t\t\t\t} else {\n\t\t\t\t\tbest = 0;\n\t\t\t\t}\n\t\t\t\t//System.out.println(\"BEST: \" + best);\n\t\t\t\tans1 += best;\n\t\t\t}\n\n\t\t\tM:\n\t\t\tfor (int c = 0; c < 10000; c++) {\n\t\t\t\tint mushPer10 = c;\n\t\t\t\tint cnt = 0;\n\t\t\t\tfor (int i = 0; i < N-1; i++) {\n\t\t\t\t\tint amt = 0;\n\t\t\t\t\tcnt += Math.min(mushPer10, mush[i]);\n\t\t\t\t\tint mushi = mush[i] - mushPer10;\n\t\t\t\t\tif (mushi > mush[i+1]) continue M;\n\t\t\t\t}\n\t\t\t\tans2 = Math.min(ans2, cnt);\n\t\t\t}\n\t\t\tSystem.out.printf(\"Case #%d: %d %d\\n\", caze, ans1, ans2);\n\t\t}\n\t}\n}", "idx": "1844"}
{"func": "package googlejam1.p846;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class mush{\r\npublic static void main()throws Exception\r\n{\r\nString inFile = \"mush0.in\";\r\nString outFile = \"mush.out\";\r\nScanner sc = new Scanner(new File(inFile));\r\nPrintWriter writer = new PrintWriter(outFile);\r\nint num_test = sc.nextInt();\r\n\r\nfor(int i = 1; i<= num_test; i++)\r\n{\r\nint term = sc.nextInt();\r\nsc.nextLine();\r\nString s = sc.nextLine();\r\nScanner scan = new Scanner(s);\r\nVector <Integer> v = new Vector <Integer> (0);\r\nwhile (scan.hasNext())\r\nv.add(scan.nextInt());\r\nint one = 0;\r\nint two = 0;\r\nfor (int j = 0; j <= (v.size() - 2); j++)\r\nif (v.get(j)>v.get(j+1))\r\none += -(v.get(j+1)-v.get(j));\r\nelse\r\none += 0;\r\n//System.out.println(v.size());\r\nInteger arr[] = new Integer[v.size()];\r\nv.toArray(arr);\r\n//Arrays.sort(arr);\r\nint index = v.size()-1;\r\n/*while (arr[index] == arr[index-1])\r\nindex--;*/\r\nint max = 0;\r\nfor (int u = 0; u<(v.size()-1); u++)\r\n{if ((arr[u]-arr[u+1])>max)\r\nmax = arr[u]-arr[u+1];}\r\n//System.out.println(max);}\r\n\r\nint rate = max;\r\n\r\n//int rate = v.get(v.size()-2)-v.get(v.size()-1);\r\nfor (int y = 0; y<= (v.size() - 2); y++)\r\nif (v.get(y)<=rate)\r\ntwo += v.get(y);\r\nelse\r\ntwo += (rate);\r\n\r\nwriter.println(\"Case #\" + i + \": \" + one + \" \" + two);\r\n}\r\nwriter.close();}\r\n}", "idx": "1846"}
{"func": "package googlejam1.p849;\n\n\nimport java.io.*;\n\npublic class A {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tFile input = new File(\"/Users/sean/Desktop/GG/a.in\");\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(input)));\n\t\tFile output = new File(\"/Users/sean/Desktop/GG/ansA.txt\");\n\t\tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output)));\n\t\tint t = Integer.parseInt(reader.readLine());\n\t\tString infos[];\n\t\tlong minNeedPlanA, minNeedPlanB;\n\t\tlong maxDis;\n\t\tint n;\n\t\tlong vals[];\n\t\tfor(int i=1; i<=t; ++i){\n\t\t\tminNeedPlanA = minNeedPlanB = 0;\n\t\t\tmaxDis = 0;\n\t\t\tn = Integer.parseInt(reader.readLine());\n\t\t\tinfos = reader.readLine().split(\" \");\n\t\t\tvals = new long[n];\n\t\t\tvals[0] = Long.parseLong(infos[0]);\n\t\t\tfor(int j=1; j<n; ++j){\n\t\t\t\tvals[j] = Long.parseLong(infos[j]);\n\t\t\t\tif(vals[j] < vals[j-1]){\n\t\t\t\t\tminNeedPlanA += (vals[j-1] - vals[j]);\n\t\t\t\t\tmaxDis = Math.max(maxDis, vals[j-1] - vals[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int j=0; j<n-1; ++j){\n\t\t\t\tminNeedPlanB += Math.min(vals[j], maxDis);\n\t\t\t}\n\t\t\twriter.write(\"Case #\" + i + \": \" + minNeedPlanA + \" \" + minNeedPlanB +\"\\r\\n\");\n\t\t}\n\t\treader.close();\n\t\twriter.flush();\n\t}\n\n}\n", "idx": "1849"}
{"func": "package googlejam2.p003;\nimport java.util.*;\nimport java.io.*;\n\npublic class A\n{\n    static long[] POW10 = new long[20];\n    static\n    {\n        POW10[0] = 1;\n        for (int i = 1; i < POW10.length; i++)\n            POW10[i] = POW10[i - 1] * 10;\n    }\n\n    public static void main(String ... orange) throws Exception\n    {\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++)\n        {\n            String s = input.next();\n            long l = Long.parseLong(s);\n            boolean zero = l % POW10[s.length() / 2] == 0;\n            if (zero)\n            {\n                l--;\n                s = l + \"\";\n            }\n            long ans = 0;\n            for (int d = 1; d < s.length(); d++)\n                ans += POW10[d / 2] + POW10[(d + 1) / 2] - 1;\n            String sb = \"0\" + s.substring(0, s.length() / 2);\n            if (s.length() > 1 && Long.parseLong(sb) != POW10[s.length() / 2 - 1])\n            {\n                ans += Long.parseLong(\"0\" + new StringBuilder(\n                            s.substring(0, s.length() / 2)).reverse().toString());\n            }\n            ans += Long.parseLong(\"0\" + s.substring(s.length() / 2));\n            if (zero)\n                ans++;\n\n            System.out.printf(\"Case #%d: \", n + 1);\n            System.out.println(ans);\n        }\n    }\n}\n", "idx": "2003"}
{"func": "package googlejam2.p008;\nimport java.util.*;\n\npublic class A {\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    \n    int T = sc.nextInt();\n    for(int cs = 1; cs <= T; cs++) {\n      int N = sc.nextInt();\n\t\tint[] dp = new int[N+1];\n\t\tdp[1] = 1;\n\t\tfor(int i = 2; i <= N; i++) {\n\t\t  dp[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tfor(int i = 1; i < N; i++) {\n\t\t  dp[i+1] = Math.min(dp[i+1], dp[i] + 1);\n\t\tint N1 = i;\n\t\tA r1 = new A();\n\t\tint r2 = 0;\n\t\twhile(N1 > 0) {\n\t\t  r2 *= 10;\n\t\t  r2 += N1 % 10;\n\t\t  N1 /= 10;\n\t\t}\n\t\t  int r = r2;\n\t\t  if(r <= N) {\n\t\t    dp[r] = Math.min(dp[r], dp[i] + 1);\n\t\t  }\n\t\t}\n\tString res = \"\" + dp[N];\n      System.out.println(\"Case #\" + cs + \": \" + res);\n    }\n    \n    sc.close();\n  }\n  \n}\n", "idx": "2008"}
{"func": "package googlejam2.p016;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner sc = new Scanner(new FileReader(\"A-large.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\r\n\t\t\t\tnew File(\"a-large.out\")));\r\n\t\tint n = sc.nextInt();\r\n\r\n\t\tfor (int T = 1; n-- > 0; T++) {\r\n\t\t\tlong N = sc.nextLong();\r\n\t\t\tlong total = 0;\r\n\t\t\tif (N > 10) {\r\n\t\t\t\ttotal += 10;\r\n\t\t\t}\r\n\t\t\tif (N >= 100) {\r\n\t\t\t\ttotal += 10 - 1 + 10;\r\n\t\t\t\tif (N == 100L) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (N >= 1000L) {\r\n\t\t\t\ttotal += 100 - 1 + 10;\r\n\t\t\t\tif (N == 1000) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (N >= 10000L) {\r\n\t\t\t\ttotal += 100 - 1 + 100;\r\n\t\t\t\tif (N == 10000) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (N >= 100000L) {\r\n\t\t\t\ttotal += 1000 - 1 + 100;\r\n\t\t\t\tif (N == 100000) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (N >= 1000000L) {\r\n\t\t\t\ttotal += 1000 - 1 + 1000;\r\n\t\t\t\tif (N == 1000000) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (N >= 10000000L) {\r\n\t\t\t\ttotal += 10000 - 1 + 1000;\r\n\t\t\t\tif (N == 10000000) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (N >= 100000000L) {\r\n\t\t\t\ttotal += 10000 - 1 + 10000;\r\n\t\t\t\tif (N == 100000000) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (N >= 1000000000L) {\r\n\t\t\t\ttotal += 100000 - 1 + 10000;\r\n\t\t\t\tif (N == 1000000000) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (N >= 10000000000L) {\r\n\t\t\t\ttotal += 100000 - 1 + 100000;\r\n\t\t\t\tif (N == 10000000000L) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (N >= 100000000000L) {\r\n\t\t\t\ttotal += 1000000 - 1 + 100000;\r\n\t\t\t\tif (N == 100000000000L) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (N >= 1000000000000L) {\r\n\t\t\t\ttotal += 1000000 - 1 + 1000000;\r\n\t\t\t\tif (N == 1000000000000L) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (N >= 10000000000000L) {\r\n\t\t\t\ttotal += 10000000 - 1 + 1000000;\r\n\t\t\t\tif (N == 10000000000000L) {\r\n\t\t\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tString s = Long.toString(N);\r\n\t\t\tif (N <= 10) {\r\n\t\t\t\ttotal = N;\r\n\t\t\t} else if (s.endsWith(\"0\")) {\r\n\t\t\t\ts = Long.toString(N-1);\r\n\t\t\t\tint mid = s.length() / 2;\r\n\t\t\t\tString firstMid = s.substring(0, mid);\r\n\t\t\t\tfirstMid = new StringBuilder(firstMid).reverse().toString();\r\n\t\t\t\tint firstIntReverse = Integer.parseInt(firstMid);\r\n\r\n\t\t\t\tString secondMid = s.substring(mid, s.length());\r\n\t\t\t\tint secondInt = Integer.parseInt(secondMid);\r\n\t\t\t\tif (N - Math.pow(10, s.length() - 1) <= firstIntReverse\r\n\t\t\t\t\t\t+ secondInt) {\r\n\t\t\t\t\ttotal += N - Math.pow(10, s.length() - 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttotal += firstIntReverse + secondInt + 1;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tint mid = s.length() / 2;\r\n\t\t\t\tString firstMid = s.substring(0, mid);\r\n\t\t\t\tfirstMid = new StringBuilder(firstMid).reverse().toString();\r\n\t\t\t\tint firstIntReverse = Integer.parseInt(firstMid);\r\n\r\n\t\t\t\tString secondMid = s.substring(mid, s.length());\r\n\t\t\t\tint secondInt = Integer.parseInt(secondMid);\r\n\t\t\t\tif (N - Math.pow(10, s.length() - 1) < firstIntReverse\r\n\t\t\t\t\t\t+ secondInt) {\r\n\t\t\t\t\ttotal += N - Math.pow(10, s.length() - 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttotal += firstIntReverse + secondInt;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tout.println(\"Case #\" + T + \": \" + total);\r\n\t\t\tSystem.out.println(\"Case #\" + T + \": \" + total);\r\n\t\t}\r\n\t\tout.flush();\r\n\t}\r\n}", "idx": "2016"}
{"func": "package googlejam2.p030;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.Scanner;\n\npublic class CounterCulture {\n    public static void main(String[] args) throws IOException {\n        String fileName;\n\n//        fileName = \"test.in\";\n        fileName = \"A-small-attempt2.in\";\n\t\tint[] d1 = new int[2000001];\n\t\t\n\t\td1[1] = 1;\n\t\tDeque<Integer> deque = new ArrayDeque<>();\n\t\tdeque.add(1);\n\t\t\n\t\twhile (!deque.isEmpty()) {\n\t\t    Integer num = deque.pollFirst();\n\t\t    int next = num + 1;\n\t\t\n\t\t    if (next < d1.length && d1[next] == 0 ) {\n\t\t        d1[next] = d1[num] + 1;\n\t\t        deque.addLast(next);\n\t\t    }\n\t\t\tint j = num;\n\t\t\twhile (j % 10 == 0) {\n\t\t\t    j = j / 10;\n\t\t\t}\n\t\t\tStringBuilder reverse1 = new StringBuilder(Integer.toString(j)).reverse();\n\t\t\tint r1 = Integer.parseInt(reverse1.toString());\n\t\t\n\t\t    int reverse = r1;\n\t\t    if (reverse >= d1.length) {\n\t\t        continue;\n\t\t    }\n\t\t\n\t\t    if (d1[reverse] == 0) {\n\t\t        d1[reverse] = d1[num] + 1;\n\t\t        deque.addLast(reverse);\n\t\t    }\n\t\t}\n\n        int[] d = d1;\n\n        try (BufferedReader r = new BufferedReader(new FileReader(fileName));\n             BufferedWriter w = new BufferedWriter(new FileWriter(fileName.replace(\".in\", \".out\")))) {\n            Scanner sc = new Scanner(r);\n            int T = sc.nextInt();\n            long startTotal = System.currentTimeMillis();\n            for (int i = 0; i < T; i++) {\n                int n = sc.nextInt();\n                String calc = \"\" + d[n];\n                w.write(\"Case #\" + (i + 1) + \": \" + calc + \"\\n\");\n                w.flush();\n                System.out.println(\"res:\" + calc);\n                System.out.println(\"case \" + +(i + 1) + \". time: \" + (System.currentTimeMillis() - startTotal));\n            }\n            System.out.println(\"Total time: \" + (System.currentTimeMillis() - startTotal));\n        }\n\n    }\n\n\n}\n", "idx": "2030"}
{"func": "package googlejam2.p035;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.Vector;\n\npublic class Solution2 {\n\tpublic static void main(String[] args) throws IOException {\n\t\t// BufferedReader br = new BufferedReader(\n\t\t// new FileReader(\n\t\t// \"/Users/vladimir/Documents/workspaceg/GGL/src/codejam15/B-small-attempt2.in\"));\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"/Users/vladimir/Documents/workspaceg/GGL/src/codejam15/A-small-attempt3.in\"));\n\t\tint T = Integer.valueOf(br.readLine());\t\t\n\t\tPrintWriter writer = new PrintWriter(\"/Users/vladimir/Documents/workspaceg/GGL/src/codejam15/output.txt\", \"UTF-8\");\n\n\t\tfor (int i = 0; i < T; i++) {\n\t\t\tint N = Integer.valueOf(br.readLine());\t\t\t\n\t\t\tint[] tillHere = new int[N + 1];\n\t\t\ttillHere[1] = 1;\t\t\t\n\t\t\tfor(int j = 2; j <= N; j++) {\n\t\t\t\tif(tillHere[j] != 0) {\n\t\t\t\t\ttillHere[j] = Math.min(tillHere[j - 1] + 1, tillHere[j]);\n\t\t\t\t} else {\n\t\t\t\t\ttillHere[j] = tillHere[j - 1] + 1;\n\t\t\t\t}\n\t\t\t\tString s = String.valueOf(j);\n\t\t\t\tStringBuffer sb = new StringBuffer();\t\t\n\t\t\t\tfor(int i1 = s.length() - 1; i1 >= 0; i1--) {\n\t\t\t\t\tsb.append(s.charAt(i1));\n\t\t\t\t}\n\t\t\t\tint r = (Integer.valueOf(sb.toString()));\n\t\t\t\tif(r <= N && r > j) {\n\t\t\t\t\ttillHere[r] = tillHere[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\twriter.println(\"Case #\" + (i + 1) + \": \" + tillHere[N]);\n\t\t}\n\t\twriter.close();\n\t}\n}", "idx": "2035"}
{"func": "package googlejam2.p052;\nimport java.io.*;\r\nimport java.util.Scanner;\r\n\r\npublic class A\r\n{\r\n\r\n\tstatic int N;\r\n\r\n\tstatic int[] times = new int[1000001];\r\n\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tString fileName = \"A-small0\";\r\n\t\tScanner in = new Scanner(new File(fileName + \".in\"));\r\n\t\tPrintWriter out = new PrintWriter(new FileWriter(fileName + \".out\"));\r\n\r\n\t\tfor (int check = 1; check <= 11; check++)\r\n\t\t\ttimes[check] = check;\r\n\r\n\t\tfor (int check = 12; check <= 1000000; check++)\r\n\t\t{\r\n\t\t\ttimes[check] = 1000001;\r\n\t\t}\r\n\r\n\t\tfor (int check = 12; check <= 1000000; check++)\r\n\t\t{\r\n\t\t\tint number = check;\n\t\t\tint reverse1 = 0;\n\t\t\twhile (number > 0)\n\t\t\t{\n\t\t\t\treverse1 = 10 * reverse1 + number % 10;\n\t\t\t\tnumber /= 10;\n\t\t\t}\n\t\t\tint reverse = reverse1;\r\n\t\t\ttimes[check] = Math.min(times[check], times[check - 1] + 1);\r\n\t\t\tif (reverse < times.length - 1)\r\n\t\t\t\ttimes[reverse] = Math.min(times[reverse], times[check] + 1);\r\n\t\t}\r\n\r\n\t\tint noOfCases = in.nextInt();\r\n\t\tfor (int caseNo = 1; caseNo <= noOfCases; caseNo++)\r\n\t\t{\r\n\t\t\tN = in.nextInt();\r\n\t\t\tint noOfTimes = times[N];\r\n\r\n\t\t\tSystem.out.printf(\"Case #%d: %d%n\", caseNo, noOfTimes);\r\n\t\t\tout.printf(\"Case #%d: %d%n\", caseNo, noOfTimes);\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "2052"}
{"func": "package googlejam2.p056;\n\nimport java.io.*;\nimport java.util.*;\n\n/**\n *\n * @author Tom\n */\npublic class GoogleCodeJam {\n    public static void main(String[] args) {\n        Scanner input = null;\n        //MagicTrick[] puzzles;\n        //CookieClickerAlpha[] puzzles;\n        CounterCulture[] puzzles;\n        try {\n            input = new Scanner(new FileInputStream(\"input.in\"));\n            //puzzles = MagicTrick.readFile(input);\n            //puzzles = CookieClickerAlpha.readFile(input);\n            puzzles = CounterCulture.readFile(input);\n            input.close();\n        }\n        catch(Exception e) {\n            System.out.println(\"hi\");\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }\n        \n        String[] results = new String[puzzles.length];\n        for(int i = 0; i < puzzles.length; ++i) {            \n            results[i] = \"Case #\" + (int)(i + 1) + \": \" + puzzles[i].solve();\n            System.out.println(\"Case #\" + (int)(i + 1) + \" done\");\n        }        \n        \n        PrintWriter output = null;\n        try {\n            output = new PrintWriter(new FileOutputStream(\"output.txt\"));\n            for(int i = 0; i < results.length; ++i) {\n                output.println(results[i]);\n            }\n            output.close();\n        }\n        catch(Exception e) {\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }\n        \n        /*PrintWriter output = null;\n        try {\n            output = new PrintWriter(new FileOutputStream(\"output.txt\"));\n            for(int i = 0; i < puzzles.length; ++i) {\n                output.println(\"Case #\" + (int)(i + 1) + \":\");\n                \n                String[] ans = puzzles[i].solve();\n                for(int j = 0; j < ans.length; ++j) {\n                    output.println(ans[j]);\n                }\n                \n                System.out.println(\"Case #\" + (int)(i + 1) + \" done\");\n            }\n            output.close();\n        }\n        catch(Exception e) {\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }*/\n    }\n}\n", "idx": "2056"}
{"func": "package googlejam2.p057;\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class CodeJam {\r\n\r\n\tScanner in;\r\n\tPrintWriter out;\r\n\r\n\t\r\n\tstatic private final String path = \"C:\\\\jam\\\\1B\\\\\";\r\n\tstatic private final String problem = \"A\";\r\n\tstatic private final String tests = \"A-small\";\r\n\t\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tCodeJam r = new CodeJam();\n\t\ttry {\n\t\t\t\t\tr.in = new Scanner(new FileReader(CodeJam.path + CodeJam.problem + \"\\\\\" + CodeJam.tests + \".in\"));\n\t\t\t\t\tr.out = new PrintWriter(CodeJam.path + CodeJam.problem + \"\\\\\" + CodeJam.tests + \".out\");\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new Error(e);\n\t\t\t\t\t\n\t\t//\t\t\tin = new Scanner(System.in);\n\t\t//\t\t\tout = new PrintWriter(System.out);\n\t\t//\t\t\tout.println(\">\");\n\t\t//\t\t\tout.flush();\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tint n = r.in.nextInt();\n\t\t\t\t\tfor (int test = 1; test <= n; test++) {\n\t\t\t\t\t\tr.out.print(\"Case #\" + test + \": \");\n\t\t\t\t\t\tint n1 = r.in.nextInt();\n\t\t\t\t\t\tint ar[] = new int[1 + n1];\n\t\t\t\t\t\tar[1] = 1;\n\t\t\t\t\t\tfor (int i = 2; i <= n1; i++) {\n\t\t\t\t\t\t\tar[i] = ar[i - 1] + 1;\n\t\t\t\t\t\t\tStringBuilder s = new StringBuilder(i + \"\");\n\t\t\t\t\t\t\tint rev = Integer.parseInt(s.reverse().toString());\n\t\t\t\t\t\t\tint len = (rev + \"\").length();\n\t\t\t\t\t\t\tint len2 = (i + \"\").length();\n\t\t\t\t\t\t\tif (len == len2 && rev < i) {\n\t\t\t\t\t\t\t\tar[i] = Math.min(ar[i], ar[rev] + 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr.out.println(ar[n1]);\n\t\t\t\t\t\tr.out.flush();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tr.out.close();\n\t\t\t\t}\r\n\t}\r\n}", "idx": "2057"}
{"func": "package googlejam2.p058;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\n\r\npublic class Problem1 {\r\n\tpublic static void main(String args[]) throws IOException\r\n\t{\r\n\t\tlong t = System.currentTimeMillis();\r\n\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint T = Integer.parseInt(br.readLine());\r\n\t\tlong[] dp = new long[1000001];\r\n\t\tArrays.fill(dp, Long.MAX_VALUE/10);\r\n\t\tdp[0] = 0;\r\n\t\tfor(int i=1; i<1000001; i++)\r\n\t\t{\r\n\t\t\tdp[i] = Math.min(1 + dp[i-1], dp[i]);\r\n\t\t\tif(i % 10 != 0) dp[i] = Math.min(dp[i], 1 + dp[rev(i)]);\r\n\t\t}\r\n\t\tfor(int ii = 1; ii <= T; ii++)\r\n\t\t{\t\t\r\n\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\tSystem.out.println(\"Case #\"+ii+\": \"+dp[N]);\r\n\t\t}\r\n\t\tSystem.out.println(System.currentTimeMillis()-t);\r\n\t}\r\n\tpublic static int rev(int N)\r\n\t{\r\n\t\tString s = N+\"\";\r\n\t\ts = new StringBuffer(s).reverse().toString();\r\n\t\treturn Integer.parseInt(s);\r\n\t}\r\n}", "idx": "2058"}
{"func": "package googlejam2.p062;\nimport java.util.Scanner;\n\npublic class A {\n\tpublic static void main(String[] args) {\n\t\tint n1 = 1000000;\n\t\tm[1] = 1;\n\t\tfor(int i = 2; i < n1 + 1; i++)\n\t\t{\n\t\t\tint rev = Integer.parseInt(new StringBuilder(String.valueOf(i)).reverse().toString());\n\t\t\tif(i % 10 !=0 &&rev < i)\n\t\t\t\tm[i] = Math.min(m[rev], m[i-1]) + 1;\n\t\t\telse\n\t\t\t\tm[i] = m[i-1]+1;\n\t\t}\n\t\tScanner in = new Scanner(System.in);\n\t\tint ntests = in.nextInt();\n\t\t\n\t\tfor (int test = 1; test <= ntests; test++) {\n\t\t\tint n = in.nextInt();\n\t\t\tSystem.out.println(\"Case #\" + test + \": \" + m[n]);\n\t\t}\n\t}\n\tstatic int[] m = new int[1000001];\n}\n", "idx": "2062"}
{"func": "package googlejam2.p066;\nimport java.util.*;\npublic class a {\n\tpublic static void main(String[] args){\n\t\tScanner br = new Scanner(System.in);\n\t\tint t = br.nextInt();\n\t\tfor(int c = 1;c<=t;c++){\n\t\t\tlong n = br.nextLong();\n\t\t\t\n\t\t\tint ans = 0;\n\t\t\t\n\t\t\tHashMap<Long, Integer> map = new HashMap<Long, Integer>();\n\t\t\t\n\t\t\tmap.put(0l, 0);\n\t\t\t\n\t\t\tArrayDeque<Long> qu = new ArrayDeque<Long>();\n\t\t\tqu.add(0l);\n\t\t\t\n\t\t\twhile(qu.size() > 0){\n\t\t\t\tlong cur = qu.poll();\n\t\t\t\tif(cur == n){\n\t\t\t\t\tans = map.get(cur);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tint dist = map.get(cur);\n\t\t\t\t\n\t\t\t\tif(!map.containsKey(cur+1)){\n\t\t\t\t\tmap.put(cur+1, dist+1);\n\t\t\t\t\tqu.add(cur+1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString rev = new StringBuilder(\"\"+cur).reverse().toString();\n\t\t\t\tlong next = Long.parseLong(rev);\n\t\t\t\tif(!map.containsKey(next)){\n\t\t\t\t\tmap.put(next, dist+1);\n\t\t\t\t\tqu.add(next);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\"+c+\": \"+ans);\n\t\t}\n\t}\n}\n", "idx": "2066"}
{"func": "package googlejam2.p077;\nimport static java.lang.Math.*;\r\nimport static java.lang.System.currentTimeMillis;\r\nimport static java.lang.System.exit;\r\nimport static java.lang.System.arraycopy;\r\nimport static java.util.Arrays.sort;\r\nimport static java.util.Arrays.binarySearch;\r\nimport static java.util.Arrays.fill;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\n@SuppressWarnings(\"unused\")\r\npublic class Main {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tMain r = new Main();\n\t\t//\t\tif (new File(\"input.txt\").exists())\n\t\t//\t\t\tin = new BufferedReader(new FileReader(\"input.txt\"));\n\t\t//\t\telse\n\t\t\t\t\tr.in = new BufferedReader(new InputStreamReader(System.in));\n\t\t\t\tr.out = new PrintWriter(System.out);\n\t\t//\t\tout = new PrintWriter(\"output.txt\");\n\t\t\t\tint m = 17;\n\t\t\t\t\t\tlong x[] = new long[m];\n\t\t\t\t\t\tlong d[] = new long[m];\n\t\t\t\t\t\td[0] = 1;\n\t\t\t\t\t\tfor (int i = 1; i < m; i++) {\n\t\t\t\t\t\t\td[i] = d[i - 1] * 10;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tx[1] = 1;\n\t\t\t\t\t\tx[2] = 11;\n\t\t\t\t\t\tfor (int i = 3; i < m; i++) {\n\t\t\t\t\t\t\tx[i] = x[i - 1] + (d[(i - 1) / 2] - 2) + \n\t\t\t\t\t\t\t\t\t(d[(i - 1) / 2 +\n\t\t\t\t\t\t\t\t\t   (((i - 1) % 2 == 0) ? 0 : 1)] - 2) + 3;\n\t\t\t\t//\t\t\tSystem.err.println(x[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tint T = Integer.parseInt(r.nextToken());\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (int t = 0; t < T; t++) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlong n = Long.parseLong(r.nextToken());\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tint u = 1;\n\t\t\t\t\t\t\twhile (d[u] < n)\n\t\t\t\t\t\t\t\tu++;\n\t\t\t\t//\t\t\tSystem.err.println(u + \" \" + d[u]);\n\t\t\t\t\t\t\tlong ans = x[u];\n\t\t\t\t\t\t\tif (n < 12)\n\t\t\t\t\t\t\t\tans = n;\n\t\t\t\t\t\t\telse if (n == d[u])\n\t\t\t\t\t\t\t\tans = x[u + 1] - 1;\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tString s = Long.toString(n);\n\t\t\t\t\t\t\t\tboolean o = false;\n\t\t\t\t\t\t\t\tif (s.charAt(s.length() - 1) == '0') {\n\t\t\t\t\t\t\t\t\ts = Long.toString(n - 1);\n\t\t\t\t\t\t\t\t\to = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tString k = s.substring(0, s.length() / 2);\n\t\t\t\t\t\t\t\tString v = s.substring(s.length() / 2, s.length());\n\t\t\t\t\t\t\t\tchar c[] = k.toCharArray();\n\t\t\t\t\t\t\t\tfor (int i = 0; i < c.length / 2; i++) {\n\t\t\t\t\t\t\t\t\tchar y = c[i];\n\t\t\t\t\t\t\t\t\tc[i] = c[c.length - i - 1];\n\t\t\t\t\t\t\t\t\tc[c.length - i - 1] = y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlong l = Long.parseLong(new String(c));\n\t\t\t\t\t\t\t\tlong r1 = Long.parseLong(v);\n\t\t\t\t//\t\t\t\tSystem.err.println(ans + \" \" + l + \" \" + r);\n\t\t\t\t\t\t\t\tans += r1 - 1;\n\t\t\t\t\t\t\t\tif (l > 1)\n\t\t\t\t\t\t\t\t\tans += l;\n\t\t\t\t\t\t\t\tif (o) \n\t\t\t\t\t\t\t\t\tans++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tr.out.println(\"Case #\" + (t + 1) + \": \" + ans);\n\t\t\t\t\t\t}\n\t\t\t\tr.in.close();\n\t\t\t\tr.out.close();\t\t\r\n\t}\r\n\r\n\tBufferedReader in;\r\n\tPrintWriter out;\r\n\tStringTokenizer st = new StringTokenizer(\"\");\r\n\r\n\tString nextToken() throws IOException {\r\n\t\twhile (!st.hasMoreTokens())\r\n\t\t\tst = new StringTokenizer(in.readLine());\r\n\t\treturn st.nextToken();\r\n\t}\r\n}\r\n", "idx": "2077"}
{"func": "package googlejam2.p104;\nimport java.util.*;\r\n\r\npublic class A {\r\npublic static void main(String [] args) {\r\n\tScanner scanner = new Scanner(System.in);\r\n\tint nCase = scanner.nextInt();\r\n\t\r\n\t/*\r\n\tint[] best = new int[1000001];\r\n\tfor (int i = 1; i < best.length; i++)\r\n\t\tbest[i] = i;\r\n\tfor (int i = 10; i < best.length; i++) {\r\n\t\tbest[i] = Math.min(best[i], best[i-1]+1);\r\n\t\tint next = (int) Long.parseLong(new StringBuilder(\"\"+i).reverse().toString());\r\n\t\tbest[next] = Math.min(best[i]+1, best[next]);\r\n\t}\r\n\t//for (int i = 1; i < 200; i++)\r\n\t//\tSystem.out.println(\"\" +i+\": \"+best[i]);\r\n\t\r\n\t\t\r\n\tfor (int nc = 1; nc <= nCase; nc++) {\r\n\t\tlong N = scanner.nextLong();\r\n\t\t\r\n\t\t\r\n\t\tSystem.out.println(\"Case #\" + nc + \": \" + best[(int)N]);\r\n\t}\r\n\t*/\r\n\t\r\n\tfor (int nc = 1; nc <= nCase; nc++) {\r\n\t\tlong N = scanner.nextLong();\n\t\tlong N1 = N;\n\t\tint ans3 = 1;\n\t\twhile ((N1 /= 10) > 0) ans3++;\r\n\t\tint dN = ans3;\r\n\t\tlong ans = 0;\r\n\t\tlong start = 0;\r\n\t\tif (N <= 11)\r\n\t\t\tans = N;\r\n\t\telse {\r\n\t\t\tans = 10;\r\n\t\t\tint cd = 2;\r\n\t\t\tlong d10 = 10;\r\n\t\t\twhile (cd < dN) {\r\n\t\t\t\td10 *= 10;\r\n\t\t\t\tlong need = d10 - 1;\r\n\t\t\t\tans += Long.parseLong(new StringBuilder((\"\"+need).substring(0, cd/2)).reverse().toString());\r\n\t\t\t\tans += Long.parseLong((\"\"+need).substring(cd/2, cd));\r\n\t\t\t\tans++;\r\n\t\t\t\tcd++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//System.out.print(\"ans: \"+ans+\" \");\r\n\t\t\t// no more reverse\r\n\t\t\tlong ans1 = ans;\r\n\t\t\tans1 += (N - d10);\r\n\t\t\t\r\n\t\t\t//System.out.print(\"ans1: \"+ans1+\" \");\r\n\t\t\t// 1 more reverse \r\n\t\t\tlong ans2 = ans;\r\n\t\t\tif (N == d10)\r\n\t\t\t\tans2 = ans1;\r\n\t\t\telse {\t\t\t\t\r\n\t\t\t\tif ((int) (N%10) == 0) {\r\n\t\t\t\t\tans2++;\r\n\t\t\t\t\tN--;\r\n\t\t\t\t}\r\n\t\t\t\tans2 += Long.parseLong(new StringBuilder((\"\"+N).substring(0, dN/2)).reverse().toString());\r\n\t\t\t\t//System.out.print(\"ans2a: \"+ans2+\" \");\r\n\t\t\t\tans2 += Long.parseLong((\"\"+N).substring(dN/2, dN));\r\n\t\t\t\t//System.out.println(\"ans2b: \"+ans2+\" \");\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tans =  Math.min(ans1, ans2);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tSystem.out.println(\"Case #\" + nc + \": \" + ans);\r\n\t}\r\n\t\r\n}\r\n\r\n}", "idx": "2104"}
{"func": "package googlejam2.p105;\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\tScanner k = new Scanner(System.in);\r\n\t\tint T = k.nextInt();\r\n\r\n\t\tfor(int i = 0; i < T; i++)\r\n\t\t{\r\n\t\t\tlong input = k.nextLong();\r\n\t\t\tlong output = 0;\r\n\r\n\t\t\twhile(input != 0)\r\n\t\t\t{\r\n\t\t\t\t//System.out.println(input);\r\n\t\t\t\tif(input <= 20)\r\n\t\t\t\t{\r\n\t\t\t\t\toutput += input;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\n\t\t\t\tlong flipThis = input;\n\t\t\t\tlong reverse = 0;\n\t\t\t\twhile( flipThis != 0 )\n\t\t\t\t{\n\t\t\t\t\treverse = reverse * 10;\n\t\t\t\t\treverse = reverse + flipThis%10;\n\t\t\t\t\tflipThis = flipThis/10;\n\t\t\t\t}\r\n\t\t\t\tlong flipped = reverse;\r\n\t\t\t\tif(flipped < input && input % Math.pow(10, (int)(Math.log10(input)+1)/2) == 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tinput = flipped;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tinput--;\r\n\t\t\t\t}\r\n\t\t\t\toutput++;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \" + output);\r\n\t\t}\r\n\t}\r\n}", "idx": "2105"}
{"func": "package googlejam2.p114;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Comparator;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.util.StringTokenizer;\r\n\r\nimport org.omg.PortableServer.ID_ASSIGNMENT_POLICY_ID;\r\n\r\npublic class Main\r\n{\r\n\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tMain main = new Main();\r\n\t\t// streams\n\t\tString inputFileName = \"C:\\\\Users\\\\ahmed\\\\Desktop\\\\Codejam\\\\Input.in\";\n\t\tString outputFileName = \"C:\\\\Users\\\\ahmed\\\\Desktop\\\\Codejam\\\\Output.txt\";\n\t\tmain.in = new BufferedReader(new FileReader(inputFileName));\n\t\tmain.out = new BufferedWriter(new FileWriter(outputFileName));\n\t\tmain.ans = new StringBuilder();\n\t\t\n\t\t// precompute\n\t\tint n = 1000009;\n\t\tmain.dist = new int[n];\n\t\tmain.visited = new boolean[n];\n\t\tmain.dist[1] = 1;\n\t\tmain.visited[1] = true;\n\t\tQueue<Integer> q = new LinkedList<Integer>();\n\t\tQueue<Integer> d = new LinkedList<Integer>();\n\t\tq.add(1);\n\t\td.add(1);\n\t\twhile (!q.isEmpty())\n\t\t{\n\t\t\tint x1 = q.poll();\n\t\t\tint distance = d.poll();\n\t\t\tint next1 = x1 + 1;\n\t\t\tif (next1 < n)\n\t\t\t\tif (!main.visited[next1])\n\t\t\t\t{\n\t\t\t\t\tmain.visited[next1] = true;\n\t\t\t\t\tmain.dist[next1] = distance + 1;\n\t\t\t\t\tq.add(next1);\n\t\t\t\t\td.add(distance + 1);\n\t\t\t\t}\n\t\t\tStringBuilder strb = new StringBuilder(x1 + \"\");\n\t\t\tint next2 = Integer.parseInt(strb.reverse().toString());\n\t\t\tif (next2 < n)\n\t\t\t\tif (!main.visited[next2])\n\t\t\t\t{\n\t\t\t\t\tmain.visited[next2] = true;\n\t\t\t\t\tmain.dist[next2] = distance + 1;\n\t\t\t\t\tq.add(next2);\n\t\t\t\t\td.add(distance + 1);\n\t\t\t\t}\n\t\t\n\t\t}\n\t\t\n\t\t// read cases\n\t\tint nCases = Integer.parseInt(main.in.readLine());\n\t\tfor (int cas = 1; cas <= nCases; cas++)\n\t\t{\n\t\t\tint x = Integer.parseInt(main.in.readLine().trim());\n\t\t\t\n\t\t\t// solve\n\t\t\tmain.ans.append(\"Case #\" + cas + \": \" + main.dist[x] + \"\\n\");\n\t\t}\n\t\t\n\t\t// output\n\t\tSystem.out.print(main.ans.toString());\n\t\tmain.out.write(main.ans.toString());\n\t\tmain.out.flush();\n\t\tmain.out.close();\r\n\t}\r\n\r\n\t/* IO */\r\n\tprivate StringBuilder ans;\r\n\tprivate BufferedReader in;\r\n\tprivate BufferedWriter out;\r\n\tprivate StringTokenizer tok;\r\n\tprivate int[] dist;\r\n\tprivate boolean[] visited;\r\n\r\n\t/* fields */\r\n}\r\n", "idx": "2114"}
{"func": "package googlejam2.p116;\nimport java.util.ArrayDeque;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class countSmall {\r\n\tpublic static void main(String[] args) {\r\n\t\tint inf = 20000000;\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\t\r\n\t\tint cases = in.nextInt();\r\n\t\tint cn = 0;\r\n\t\t\r\n\t\twhile (cn++ < cases) {\r\n\t\t\tint n =in.nextInt();\r\n\t\t\t\r\n\t\t\tint[] cost = new int[n+1];\r\n\t\t\tArrays.fill(cost, inf);\r\n\t\t\tcost[0] = 0;\r\n\t\t\tArrayDeque<Integer> bfs = new ArrayDeque<Integer>(n);\r\n\t\t\tbfs.add(0);\r\n\t\t\t\r\n\t\t\twhile (bfs.size() > 0) {\r\n\t\t\t\tint here = bfs.poll();\r\n\t\t\t\t\r\n\t\t\t\tif (here != n) {\r\n\t\t\t\t\tif (cost[here+1] == inf) {\r\n\t\t\t\t\t\tcost[here+1] = cost[here]+1;\r\n\t\t\t\t\t\tbfs.add(here+1);\r\n\t\t\t\t\t}\n\t\t\t\t\tStringBuilder s = new StringBuilder();\n\t\t\t\t\ts.append(here);\n\t\t\t\t\ts.reverse();\r\n\t\t\t\t\t\r\n\t\t\t\t\tint rev = Integer.parseInt(s.toString());\r\n\t\t\t\t\tif (rev <= n && cost[rev] == inf) {\r\n\t\t\t\t\t\tcost[rev] = cost[here]+1;\r\n\t\t\t\t\t\tbfs.add(rev);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", cn, cost[n]);\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "2116"}
{"func": "package googlejam2.p121;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\n\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tint[] minS = new int[2000000];\r\n\t\tminS[1] = 1;\r\n\t\tQueue<Integer> st = new LinkedList<Integer>();\r\n\t\tst.add(1);\r\n\t\twhile(!st.isEmpty())\r\n\t\t{\r\n\t\t\tint cur = st.poll();\r\n\t\t\tif(cur+1 < minS.length && minS[cur+1]==0)\r\n\t\t\t{\r\n\t\t\t\tminS[cur+1] = minS[cur]+1;\r\n\t\t\t\tst.add(cur+1);\r\n\t\t\t}\r\n\t\t\tStringBuilder sb = new StringBuilder(\"\"+cur);\r\n\t\t\tint rev = Integer.parseInt(sb.reverse().toString());\r\n\t\t\tif(rev < minS.length && minS[rev]==0)\r\n\t\t\t{\r\n\t\t\t\tminS[rev] = minS[cur]+1;\r\n\t\t\t\tst.add(rev);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int cas = 1; cas <=T; cas++) {\r\n\t\t\tString s = in.readLine();\r\n\t\t\tint N = Integer.parseInt(s);\r\n\t\t\tSystem.out.println(\"Case #\"+cas+\": \"+minS[N]);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "2121"}
{"func": "package googlejam2.p127;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\n/**\r\n * The machines are gaining ground. Time to show them what we're really made of...\r\n **/\r\nclass Codejam {\r\n\r\n    public static void main(String args[]) {\r\n        Scanner in = null;\r\n\t\ttry {\r\n\t\t\tin = new Scanner(new FileInputStream(\"input.txt\"));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tSystem.setOut(new PrintStream(\"output.txt\"));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tint ar[] = new int[1000003];\r\n\t\tar[1] = 1;\r\n\t\tfor (int i = 2; i <= 1000000; i++) {\r\n\t\t\tif (ar[i] > 0) {\r\n\t\t\t\tar[i] = Math.min(ar[i], ar[i - 1] + 1);\r\n\t\t\t} else {\r\n\t\t\t\tar[i] = ar[i - 1] + 1;\r\n\t\t\t}\r\n\t\t\tint x = i;\r\n\t\t\tint r = 0;\r\n\t\t\twhile (x > 0) {\r\n\t\t\t\tr *= 10;\r\n\t\t\t\tr += x % 10;\r\n\t\t\t\tx /= 10;\r\n\t\t\t}\r\n\t\t\tif (r <= 1000000) {\r\n\t\t\t\tif (ar[r] == 0) {\r\n\t\t\t\t\tar[r] = ar[i] + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tar[r] = Math.min(ar[r], ar[i] + 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n        int T = in.nextInt(); // the number of cells on the X axis\r\n        for (int t = 1; t <= T; t++) {\r\n        \tin.nextLine();\r\n        \tint n = in.nextInt();\r\n        \t\r\n        \t\r\n        \tSystem.out.println(\"Case #\" + t + \": \" + ar[n]);\r\n        \t\r\n        }\r\n        \r\n        \r\n    }\r\n \r\n}", "idx": "2127"}
{"func": "package googlejam2.p130;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.Scanner;\n\n\npublic class Problem1 {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tScanner scanner = new Scanner(new FileReader(\"A-small-attempt1.in\"));\n\t        int T = scanner.nextInt();\n\t        long[] N = new long[T];\n\t        for(int i=0; i<T; i++) {\n\t        \tN[i] = scanner.nextLong();\n\t        }  \n\t        PrintWriter out = new PrintWriter(new FileWriter(\"output2.txt\"));    \n\t        for(int i=0; i<T; i++) {\n\t        \tlong target = N[i];\n\t        \tHashMap<Long, Long> map = new HashMap<Long, Long>();\n\t        \tLinkedList<Long> list = new LinkedList<Long>();\n\t        \tlist.add((long)1);\n\t        \tmap.put((long)1, (long)1);\n\t        \twhile(!map.containsKey(target)) {\n\t        \t\tLong current = list.poll();\n\t\t\t\t\tlong temp = current;\n\t\t\t\t\tlong current1 = 0;\n\t\t\t\t\twhile(temp > 0) {\n\t\t\t\t\t\tlong digit = temp%10;\n\t\t\t\t\t\ttemp = temp/10;\n\t\t\t\t\t\tcurrent1 = current1 * 10 + digit;\n\t\t\t\t\t}\n\t        \t\tLong next = current1;\n\t        \t\tif(!map.containsKey(next) && next <= target) {\n\t        \t\t\tlist.add(next);\n\t        \t\t\tmap.put(next, map.get(current)+1);\n\t        \t\t}\n\t        \t\tif(!map.containsKey(current+1)) {\n\t        \t\t\tlist.add(current+1);\n\t        \t\t\tmap.put(current+1, map.get(current)+1);\n\t        \t\t}\n\t        \t}       \t\n\t        \tout.println(\"Case #\" + (i+1) + \": \" + map.get(target));\n\t        }\t        \n\t        out.close();\t       \n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "2130"}
{"func": "package googlejam2.p134;\n\n\nimport java.util.Scanner;\n\npublic class R1BA {\n\n\t\n\tpublic static void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint t = in.nextInt();\n\t\tfor(int i=1; i<=t; i++){\n\t\t\tlong n = in.nextLong();\n\t\t\tlong k = n;\n\t\t\tint log = 1; //log is num of digits\n\t\t\tlong totalPower = 1;\n\t\t\twhile(k/10>0){\n\t\t\t\tlog++;\n\t\t\t\tk=k/10;\n\t\t\t\ttotalPower = totalPower*10;\n\t\t\t}\n\t\t\t\n\t\t\tlong total = 0;\n\t\t\tif(log == 1){\n\t\t\t\ttotal = n;\n\t\t\t} else {\n\t\t\t\ttotal = 10;\n\t\t\t\tlong power = 1;\n\t\t\t\tfor(int j = 2; j<= log-1; j++){\n\t\t\t\t\tif(j%2==0) power = power*10;\n\t\t\t\t\ttotal+=power; //now we're at 999900001\n\t\t\t\t\ttotal+=(1+(j%2)*9)*power-1;\n\t\t\t\t}\n\t\t\t\t//last power of 10...\n\t\t\t\tif(log%2==0) power=power*10;\n\t\t\t\tif(n!=totalPower){\n\t\t\t\t\tlong rem = n%(power*(1+(log%2)*9)); //last (log+1)/2 digits \n\t\t\t\t\tk = n/(power*(1+(log%2)*9));\n\t\t\t\t\t\n\t\t\t\t\tif(rem==0){\n\t\t\t\t\t\tk--;\n\t\t\t\t\t\trem = power*(1+(log%2)*9);\n\t\t\t\t\t}\n\t\t\t\t\tif(k<=power/10){\n\t\t\t\t\t\ttotal+=n-totalPower;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlong power2 = power/10;\n\t\t\t\t\t\twhile(k>0){\n\t\t\t\t\t\t\ttotal+=power2*(k%10);\n\t\t\t\t\t\t\tpower2=power2/10;\n\t\t\t\t\t\t\tk=k/10;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttotal+=rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\" + i + \": \");\n\t\t\tSystem.out.print(total);\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t\tin.close();\n\t}\n}\n", "idx": "2134"}
{"func": "package googlejam2.p151;\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner scan = new Scanner(System.in);\r\n\t\tint testCaseNum = scan.nextInt();\r\n\t\tlong[] ADD = {0, 10, 19, 109, 199, 1099, 1999, 10999, 19999, 109999, 199999, 1099999, 1999999, 10999999, 19999999, 109999999, 199999999};\r\n\r\n\t\tfor(int i = 0; i < testCaseNum; ++i){\r\n\t\t\tString nStr = scan.next().trim();\r\n\t\t\tlong n = Long.parseLong(nStr);\r\n\r\n\t\t\tif(n <= 9){\r\n\t\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + n);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlong ans = 0;\r\n\t\t\tfor(int j = 0; j < nStr.length(); ++j){\r\n\t\t\t\tans += ADD[j];\r\n\t\t\t}\r\n\t\t\tif(String.valueOf(n - 1).length() != nStr.length()){\r\n\t\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + ans);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif(nStr.charAt(0) == '1'){\r\n\t\t\t\tboolean v = true;\r\n\t\t\t\tfor(int k = 1; k < (nStr.length() / 2); ++k){\r\n\t\t\t\t\tv = v && (nStr.charAt(k) == '0');\r\n\t\t\t\t}\r\n\t\t\t\tif(v == true){\r\n\t\t\t\t\tlong bias = 1;\r\n\t\t\t\t\tfor(int k = nStr.length() - 1; k >= (nStr.length() / 2) ; --k){\r\n\t\t\t\t\t\tans += Long.parseLong(nStr.substring(k, k+1)) * bias;\r\n\t\t\t\t\t\tbias *= 10;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + ans);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlong bias = 1;\r\n\t\t\tn -= 1;\r\n\t\t\tnStr = String.valueOf(n);\r\n\t\t\tans += 1;\r\n\t\t\tif(nStr.charAt(0) == '1'){\r\n\t\t\t\tboolean v = true;\r\n\t\t\t\tfor(int k = 1; k < (nStr.length() / 2); ++k){\r\n\t\t\t\t\tv = v && (nStr.charAt(k) == '0');\r\n\t\t\t\t}\r\n\t\t\t\tif(v == true){\r\n\t\t\t\t\tbias = 1;\r\n\t\t\t\t\tfor(int k = nStr.length() - 1; k >= (nStr.length() / 2) ; --k){\r\n\t\t\t\t\t\tans += Long.parseLong(nStr.substring(k, k+1)) * bias;\r\n\t\t\t\t\t\tbias *= 10;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + ans);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbias = 1;\r\n\t\t\tfor(int k = 0; k < (nStr.length() / 2); ++k){\r\n\t\t\t\tans += Long.parseLong(nStr.substring(k, k+1)) * bias;\r\n\t\t\t\tbias *= 10;\r\n\t\t\t}\r\n\t\t\tbias = 1;\r\n\t\t\tfor(int k = nStr.length() - 1; k >= (nStr.length() / 2) ; --k){\r\n\t\t\t\tans += Long.parseLong(nStr.substring(k, k+1)) * bias;\r\n\t\t\t\tbias *= 10;\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + ans);\r\n\t\t}\r\n\r\n\t\tscan.close();\r\n\t}\r\n}\r\n", "idx": "2151"}
{"func": "package googlejam2.p154;\n\n\nimport java.util.Scanner;\n\npublic class R1BA {\n\n    static long[] tens = new long[] {\n            1L,\n            10L,\n            100L,\n            1000L,\n            10000L,\n            100000L,\n            1000000L,\n            10000000L,\n            100000000L,\n            1000000000L,\n            10000000000L,\n            100000000000L,\n            1000000000000L,\n            10000000000000L,\n            100000000000000L,\n            1000000000000000L\n    };\n\n    public static void main(String args[]) {\n\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int t = 1; t <= T; t++) {\n\n            final long N = in.nextLong();\n\n            long x = N;\n            long c = 0;\n\t\t\tlong x1 = x;\n\t\t\tint bits1 = 0;\n\t\t\twhile(x1 > 0) {\n\t\t\t    bits1++;\n\t\t\t    x1 /= 10;\n\t\t\t}\n\n            int bits = bits1;\n\n            /*\n            while(bits > 1) {\n\n                int bits2 = bits / 2;\n\n                int lb = 0;\n                long l = 0, h = 0;\n                while(lb < bits2) {\n                    int hb = bits - lb - 1;\n                    l = get(x, lb);\n                    h = get(x, hb);\n                    if (l != h)\n                        break;\n                    if ((lb == 0 && l != 1) || (lb > 0 && l != 0))\n                        break;\n                    lb++;\n                }\n\n                if(lb == 0 && h == 0) {\n                    throw new RuntimeException();\n                }\n\n                if(lb >= bits2) {\n                    // pattern 1000001..\n                    long all9 = tens[bits - 1] - 1;\n                    c += (x - all9);\n                    x = all9;\n                    bits --;\n                    continue;\n                }\n\n                if(lb == 0) {\n                    if(l > 1) {\n                        x -= (l - 1);\n                        c += (l - 1);\n                    } else if(l == 1) {\n                        // l == 1, h != l (h > 1)\n                        x = flip(x);\n                        c++;\n                    } else {\n                        // l = 0\n                        x--;\n                        c++;\n                        bits = bits(x);\n                    }\n                } else {\n                    if(l > 0) {\n                        x -= (l * tens[lb]);\n                        c += (l * tens[lb]);\n                    } else {\n                        x = flip(x);\n                        c++;\n                    }\n                }\n            }\n            */\n\n            while(bits > 1) {\n                if(x % 10 == 0) {\n                    x--;\n                    c++;\n\t\t\t\t\tlong x2 = x;\n\t\t\t\t\tint bits2 = 0;\n\t\t\t\t\twhile(x2 > 0) {\n\t\t\t\t\t    bits2++;\n\t\t\t\t\t    x2 /= 10;\n\t\t\t\t\t}\n                    bits = bits2;\n                    continue;\n                }\n                int lb = 0;\n                long lo = 0, hi = 0;\n                while (lb < bits / 2) {\n                    int hb = bits - lb - 1;\n                    long l = (x % tens[lb + 1]) / tens[lb];\n                    long h = (x % tens[hb + 1]) / tens[hb];\n                    lo += (l * tens[lb]);\n                    hi += (h * tens[lb]);\n                    lb++;\n                }\n\n                if(lo > 1) {\n                    // reduce lower to 1\n                    x -= (lo - 1);\n                    c += (lo - 1);\n                } else {\n                    // already reduced\n                    if(hi > 1) {\n                        long x2 = x;\n\t\t\t\t\t\tlong n = 0;\n\t\t\t\t\t\twhile (x2 > 0) {\n\t\t\t\t\t\t    long m = x2 % 10;\n\t\t\t\t\t\t    x2 /= 10;\n\t\t\t\t\t\t    n = (n * 10) + m;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tx = n;\n                        c++;\n                    } else {\n                        // pattern 1000x0001..\n                        long all9 = tens[bits - 1] - 1;\n                        c += (x - all9);\n                        x = all9;\n                        bits --;\n                    }\n                }\n            }\n\n            c += x;\n\n            System.out.format(\"Case #%d: %d\\n\", t, c);\n        }\n\n    }\n\n}\n", "idx": "2154"}
{"func": "package googlejam2.p162;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.math.BigInteger;\r\nimport java.util.Scanner;\r\n\r\npublic class BigCount {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner in = new Scanner(new File(\"b.in\"));\r\n\t\t//Scanner in = new Scanner(System.in);\r\n\t\tint cases = in.nextInt();\r\n\t\tBigInteger twenty = new BigInteger(\"20\");\r\n\t\tfor (int caseNo = 1; caseNo <= cases; caseNo++) {\r\n\t\t\tBigInteger val = in.nextBigInteger();\r\n\t\t\tint count = 0;\r\n\t\t\t\r\n\t\t\twhile (val.compareTo(twenty) > 0) {\r\n\t\t\t\tString sVal = val.toString();\r\n\t\t\t\t// char first = sVal.charAt(0);\r\n\t\t\t\tchar last = sVal.charAt(sVal.length() - 1);\r\n\t\t\t\tif (last != '1') {\r\n\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t} else\r\n\t\t\t\t// We know the last digit is 1\r\n\t\t\t\tif (val.compareTo(new BigInteger(\"1000\")) < 0 ) {\r\n\r\n\t\t\t\t\tint result = 0;\n\t\t\t\t\t\t\t// System.err.print(\"reverse of \" + i + \" is \");\n\t\t\t\t\t//\t\twhile (i > 0) {\n\t\t\t\t\t//\t\t\tresult = result * 10 + i % 10;\n\t\t\t\t\t//\t\t\ti /= 10;\n\t\t\t\t\t//\t\t}\n\t\t\t\t\t\t\t// System.err.println(result);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString forward = val.toString();\n\t\t\t\t\t\t\tString bw = \"\";\n\t\t\t\t\t\t\tfor (int j = 0; j < forward.length(); j++)\n\t\t\t\t\t\t\t\tbw = forward.charAt(j) + bw;\n\t\t\t\t\tBigInteger rev = new BigInteger(bw);\r\n\t\t\t\t\tif (rev.compareTo(val) < 0)\r\n\t\t\t\t\t\tval = rev;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tchar second = sVal.charAt(sVal.length() - 2);\r\n\t\t\t\t\tif (second != '0') {\r\n\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t} // The last 2 digits are 01\r\n\t\t\t\t\t\r\n\t\t\t\t\t//  DAMNATION, this is ugly!\r\n\t\t\t\t\telse if (val.compareTo(new BigInteger(\"100000\"))  < 0) {\r\n\r\n\t\t\t\t\t\tint result = 0;\n\t\t\t\t\t\t\t\t// System.err.print(\"reverse of \" + i + \" is \");\n\t\t\t\t\t\t//\t\twhile (i > 0) {\n\t\t\t\t\t\t//\t\t\tresult = result * 10 + i % 10;\n\t\t\t\t\t\t//\t\t\ti /= 10;\n\t\t\t\t\t\t//\t\t}\n\t\t\t\t\t\t\t\t// System.err.println(result);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tString forward = val.toString();\n\t\t\t\t\t\t\t\tString bw = \"\";\n\t\t\t\t\t\t\t\tfor (int j = 0; j < forward.length(); j++)\n\t\t\t\t\t\t\t\t\tbw = forward.charAt(j) + bw;\n\t\t\t\t\t\tBigInteger rev = new BigInteger(bw);\r\n\t\t\t\t\t\tif (rev.compareTo(val) < 0)\r\n\t\t\t\t\t\t\tval = rev;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchar third = sVal.charAt(sVal.length() - 3);\r\n\t\t\t\t\t\tif (third != '0') {\r\n\t\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t} // The last 3 digits are 001\r\n\t\t\t\t\t\telse if (val.compareTo(new BigInteger(\"10000000\")) < 0) {\r\n\r\n\t\t\t\t\t\t\tint result = 0;\n\t\t\t\t\t\t\t\t\t// System.err.print(\"reverse of \" + i + \" is \");\n\t\t\t\t\t\t\t//\t\twhile (i > 0) {\n\t\t\t\t\t\t\t//\t\t\tresult = result * 10 + i % 10;\n\t\t\t\t\t\t\t//\t\t\ti /= 10;\n\t\t\t\t\t\t\t//\t\t}\n\t\t\t\t\t\t\t\t\t// System.err.println(result);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tString forward = val.toString();\n\t\t\t\t\t\t\t\t\tString bw = \"\";\n\t\t\t\t\t\t\t\t\tfor (int j = 0; j < forward.length(); j++)\n\t\t\t\t\t\t\t\t\t\tbw = forward.charAt(j) + bw;\n\t\t\t\t\t\t\tBigInteger rev = new BigInteger(bw);\r\n\t\t\t\t\t\t\tif (rev.compareTo(val) < 0)\r\n\t\t\t\t\t\t\t\tval = rev;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tchar fourth = sVal.charAt(sVal.length() - 4);\r\n\t\t\t\t\t\t\tif (fourth != '0') {\r\n\t\t\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t} // The last 4 digits are 0001\r\n\t\t\t\t\t\t\telse if (val.compareTo(new BigInteger(\"1000000000\")) < 0) {\r\n\r\n\t\t\t\t\t\t\t\tint result = 0;\n\t\t\t\t\t\t\t\t\t\t// System.err.print(\"reverse of \" + i + \" is \");\n\t\t\t\t\t\t\t\t//\t\twhile (i > 0) {\n\t\t\t\t\t\t\t\t//\t\t\tresult = result * 10 + i % 10;\n\t\t\t\t\t\t\t\t//\t\t\ti /= 10;\n\t\t\t\t\t\t\t\t//\t\t}\n\t\t\t\t\t\t\t\t\t\t// System.err.println(result);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tString forward = val.toString();\n\t\t\t\t\t\t\t\t\t\tString bw = \"\";\n\t\t\t\t\t\t\t\t\t\tfor (int j = 0; j < forward.length(); j++)\n\t\t\t\t\t\t\t\t\t\t\tbw = forward.charAt(j) + bw;\n\t\t\t\t\t\t\t\tBigInteger rev = new BigInteger(bw);\r\n\t\t\t\t\t\t\t\tif (rev.compareTo(val) < 0)\r\n\t\t\t\t\t\t\t\t\tval = rev;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//  You know, I really should refactor this to make it more general, but what the hell...I'm\r\n\t\t\t\t\t\t\t//  sorta getting in the cut and paste groove...\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tchar fifth = sVal.charAt(sVal.length() - 5);\r\n\t\t\t\t\t\t\t\tif (fifth != '0') {\r\n\t\t\t\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\t} // The last 5 digits are 00001\r\n\t\t\t\t\t\t\t\telse if (val.compareTo(new BigInteger(\"100000000000\")) < 0) {\r\n\r\n\t\t\t\t\t\t\t\t\tint result = 0;\n\t\t\t\t\t\t\t\t\t\t\t// System.err.print(\"reverse of \" + i + \" is \");\n\t\t\t\t\t\t\t\t\t//\t\twhile (i > 0) {\n\t\t\t\t\t\t\t\t\t//\t\t\tresult = result * 10 + i % 10;\n\t\t\t\t\t\t\t\t\t//\t\t\ti /= 10;\n\t\t\t\t\t\t\t\t\t//\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// System.err.println(result);\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tString forward = val.toString();\n\t\t\t\t\t\t\t\t\t\t\tString bw = \"\";\n\t\t\t\t\t\t\t\t\t\t\tfor (int j = 0; j < forward.length(); j++)\n\t\t\t\t\t\t\t\t\t\t\t\tbw = forward.charAt(j) + bw;\n\t\t\t\t\t\t\t\t\tBigInteger rev = new BigInteger(bw);\r\n\t\t\t\t\t\t\t\t\tif (rev.compareTo(val) < 0)\r\n\t\t\t\t\t\t\t\t\t\tval = rev;\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tchar sixth = sVal.charAt(sVal.length() - 6);\r\n\t\t\t\t\t\t\t\t\tif (sixth != '0') {\r\n\t\t\t\t\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\t\t} // The last 6 digits are 000001\r\n\t\t\t\t\t\t\t\t\telse if (val.compareTo(new BigInteger(\"10000000000000\")) < 0) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tint result = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t// System.err.print(\"reverse of \" + i + \" is \");\n\t\t\t\t\t\t\t\t\t\t//\t\twhile (i > 0) {\n\t\t\t\t\t\t\t\t\t\t//\t\t\tresult = result * 10 + i % 10;\n\t\t\t\t\t\t\t\t\t\t//\t\t\ti /= 10;\n\t\t\t\t\t\t\t\t\t\t//\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t// System.err.println(result);\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tString forward = val.toString();\n\t\t\t\t\t\t\t\t\t\t\t\tString bw = \"\";\n\t\t\t\t\t\t\t\t\t\t\t\tfor (int j = 0; j < forward.length(); j++)\n\t\t\t\t\t\t\t\t\t\t\t\t\tbw = forward.charAt(j) + bw;\n\t\t\t\t\t\t\t\t\t\tBigInteger rev = new BigInteger(bw);\r\n\t\t\t\t\t\t\t\t\t\tif (rev.compareTo(val) < 0)\r\n\t\t\t\t\t\t\t\t\t\t\tval = rev;\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {  //  And one to grow on...\r\n\t\t\t\t\t\t\t\t\t\tchar seventh = sVal.charAt(sVal.length() - 7);\r\n\t\t\t\t\t\t\t\t\t\tif (seventh != '0') {\r\n\t\t\t\t\t\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\t\t\t} // The last 7 digits are 0000001\r\n\t\t\t\t\t\t\t\t\t\telse if (val.compareTo(new BigInteger(\"1000000000000000\")) < 0) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tint result = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t// System.err.print(\"reverse of \" + i + \" is \");\n\t\t\t\t\t\t\t\t\t\t\t//\t\twhile (i > 0) {\n\t\t\t\t\t\t\t\t\t\t\t//\t\t\tresult = result * 10 + i % 10;\n\t\t\t\t\t\t\t\t\t\t\t//\t\t\ti /= 10;\n\t\t\t\t\t\t\t\t\t\t\t//\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t// System.err.println(result);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\tString forward = val.toString();\n\t\t\t\t\t\t\t\t\t\t\t\t\tString bw = \"\";\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (int j = 0; j < forward.length(); j++)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbw = forward.charAt(j) + bw;\n\t\t\t\t\t\t\t\t\t\t\tBigInteger rev = new BigInteger(bw);\r\n\t\t\t\t\t\t\t\t\t\t\tif (rev.compareTo(val) < 0)\r\n\t\t\t\t\t\t\t\t\t\t\t\tval = rev;\r\n\t\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\t\tval = val.subtract(BigInteger.ONE);\r\n\t\t\t\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}  //  7\r\n\t\t\t\t\t\t\t\t}//6\r\n\t\t\t\t\t\t\t}//5\r\n\t\t\t\t\t\t}//4\r\n\r\n\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcount += val.intValue();\r\n\r\n\t\t\tSystem.out.println(\"Case #\" + caseNo + \": \" + count);\r\n\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "2162"}
{"func": "package googlejam2.p173;\n/**\n * Created by LaiQX on 05/02/15.\n */\nimport java.util.*;\nimport java.io.*;\n\npublic class CounterCulture {\n    public static void main(String[] args) throws FileNotFoundException {\n        File input = new File(\"src/A-small-attempt1.in\");\n//        File input = new File(\"src/input1\");\n        Scanner sc = new Scanner(input);\n        PrintWriter wr = new PrintWriter(\"output2\");\n        int T = Integer.parseInt(sc.nextLine());\n        for (int i = 0; i< T ; i++) {\n\n            StringBuilder ans = new StringBuilder();\n            ans.append(\"Case #\"+(i+1)+\": \");\n            int N = Integer.parseInt(sc.nextLine());\n            int[] steps = new int[N+1];\n            steps[0]=0;\n            steps[1]=1;\n            for (int j = 2; j<N+1; j++) {\n                if (steps[j]==0) {\n                    steps[j] = steps[j-1] + 1;\n                } else {\n                    steps[j] = Math.min(steps[j],steps[j-1]+1);\n                }\n                StringBuilder tmp = new StringBuilder(\"\"+j);\n                int reverse = Integer.parseInt(tmp.reverse().toString());\n                if (reverse>j && reverse<=N) {\n                    if (steps[reverse]==0) {\n                        steps[reverse]=steps[j]+1;\n                    } else {\n                        steps[reverse] = Math.min(steps[reverse],steps[j]+1);\n                    }\n                }\n            }\n\n            ans.append(steps[N]);\n\n            wr.println(ans);\n            System.out.println(\"case # \"+(i+1)+\" done!\");\n\n        }\n        wr.close();\n    }\n}\n", "idx": "2173"}
{"func": "package googlejam2.p178;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n  public static void main(String[] args) throws FileNotFoundException {\r\n    Scanner in = new Scanner(new File(\"A-small-attempt0.in\"));\r\n    PrintWriter out = new PrintWriter(new File(\"A-small-attempt0.out\"));\r\n\r\n    int T = in.nextInt();\r\n    for (int t = 1; t <= T; t++) {\r\n      \r\n      int n = in.nextInt();\r\n      int dp[] = new int[n+1];\r\n      dp[1] = 1;\r\n      Queue<Integer> q = new LinkedList<Integer>();\r\n      q.add(1);\r\n      \r\n      while(!q.isEmpty()) {\r\n        int at = q.poll();\r\n        int moves = dp[at];\r\n        if (at == n) break;\r\n        \r\n        int next = at + 1;\r\n        if (next <= n && dp[next] == 0) {\r\n          dp[next] = moves + 1;\r\n          q.add(next);\r\n        } \r\n        int tmp = at;\r\n        next = 0;\r\n        while (tmp > 0) {\r\n          next = next*10 + tmp % 10;\r\n          tmp /= 10;\r\n        }\r\n        if (next <= n && dp[next] == 0) {\r\n          dp[next] = moves + 1;\r\n          q.add(next);\r\n        } \r\n      }\r\n      \r\n      out.println(\"Case #\" + t + \": \" + dp[n]);\r\n    }\r\n\r\n    out.close();\r\n  }\r\n\r\n}\r\n", "idx": "2178"}
{"func": "package googlejam2.p181;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class A {\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\tint T = in.nextInt();\n\t\tfor (int i = 0; i < T; i++)\n\t\t{\n\t\t\tint N = in.nextInt();\n\t\t\tint[] min = new int[MAX];\n\t\t\tArrays.fill(min, MAX+1);\n\t\t\t\n\t\t\tmin[1] = 1;\n\t\t\t\n\t\t\tfor (int cur = 1; cur <= N; cur++)\n\t\t\t{\n\t\t\t\t// The next is the minimum of this + 1 or its value\n\t\t\t\tmin[cur + 1] = Math.min(min[cur + 1], min[cur] + 1);\n\t\t\t\tint num = cur;\n\t\t\t\tint ans1 = 0;\n\t\t\t\twhile (num > 0) {\n\t\t\t\t\tans1 *= 10;\n\t\t\t\t\tans1 += (num % 10);\n\t\t\t\t\tnum /= 10;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tint reverse = ans1;\n\t\t\t\tmin[reverse] = Math.min(min[reverse], min[cur] + 1);\n\t\t\t}\n\t\t\tint ans = min[N];\n\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", i+1, ans);\n\t\t}\n\n\t}\n\t\n\tstatic int MAX = 1000005;\n\n}\n", "idx": "2181"}
{"func": "package googlejam2.p184;\nimport java.io.PrintWriter;\nimport java.util.*;\n\n/**\n * Created by karlicos on 12.04.15.\n */\npublic class A {\n  public static final String YES = \"YES\";\n  public static final String NO = \"NO\";\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(System.in);\n\tPrintWriter out = new PrintWriter(System.out);\n\t\n\tint tests = in.nextInt();\n\tfor (int test = 0; test < tests; test++) {\n\t  int n = in.nextInt();\n\tint[] dist = new int[n + 1];\n\tboolean[] used = new boolean[n + 1];\n\tArrays.fill(dist, Integer.MAX_VALUE);\n\t\n\tQueue<Integer> queue = new ArrayDeque<Integer>();\n\tqueue.add(1);\n\tdist[1] = 1;\n\tused[1] = true;\n\twhile (!queue.isEmpty()) {\n\t  Integer top = queue.poll();\n\t  int td = dist[top];\n\t  int n1 = top + 1;\n\tint n3 = top;\n\tint res = 0;\n\twhile (n3 != 0) {\n\t  res *= 10;\n\t  res += n3 % 10;\n\t  n3 /= 10;\n\t}\n\t  int n2 = res;\n\t  if (n1 > 0 && n1 <= n) {\n\t    dist[n1] = Math.min(dist[n1], td + 1);\n\t    if (!used[n1]) {\n\t      used[n1] = true;\n\t      queue.add(n1);\n\t    }\n\t  }\n\t  if (n2 > 0 && n2 <= n) {\n\t    dist[n2] = Math.min(dist[n2], td + 1);\n\t    if (!used[n2]) {\n\t      used[n2] = true;\n\t      queue.add(n2);\n\t    }\n\t  }\n\t}\n\t  int ans = dist[n];\n\t  out.println(String.format(\"Case #%d: %s\", test + 1, ans));\n\t  out.flush();\n\t}\n\t\n\tin.close();\n\tout.close();\n  }\n\n}\n", "idx": "2184"}
{"func": "package googlejam2.p186;\nimport java.util.*;\nimport java.io.*;\nimport java.math.*;\nimport static java.lang.Math.*;\nimport static java.lang.Integer.*;\nimport static java.lang.System.*;\n\nclass A {\n    public static void main(String args[]) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(in));\n\n        int N = 1000000;\n        LinkedList<Integer> q = new LinkedList<Integer>();\n        LinkedList<Integer> r = new LinkedList<Integer>();\n        q.add(1);\n        r.add(1);\n        HashSet<Integer> set = new HashSet<Integer>();\n        int[] len = new int[N+1];\n        while(!q.isEmpty()) {\n            int x = q.pollFirst();\n            int t = r.pollFirst();\n            if (x > N) continue;\n            if (set.contains(x)) continue;\n            set.add(x);\n            len[x] = t;\n            q.add(x+1);\n            r.add(t+1);\n            int v = 0;\n            while(x > 0) {\n                v *= 10;\n                v += x % 10;\n                x /= 10;\n            }\n            q.add(v);\n            r.add(t+1);\n        }\n\n        int T = parseInt(br.readLine());\n        for(int i=0;i<T;i++) {\n            int x = parseInt(br.readLine());\n            out.println(\"Case #\" + (i+1) + \": \" + len[x]);\n        }\n    }\n}\n", "idx": "2186"}
{"func": "package googlejam2.p207;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class CounterCulture {\n\tCounterCulture(Scanner in, PrintWriter out){\n\t\tint tests = in.nextInt();\n\t\t\n\t\t\n\t\t\n\t\tint[] ans = new int[2000000];\n\t\tArrays.fill(ans, Integer.MAX_VALUE);\n\t\tArrayDeque<Integer> q = new ArrayDeque<>();\n\t\tboolean[] seen = new boolean[ans.length];\n\t\tseen[1] = true;\n\t\tq.add(1);\n\t\tint steps = 0;\n\t\twhile(!q.isEmpty()){\n\t\t\tsteps++;\n\t\t\tint size = q.size();\n\t\t\tfor(int i= 0; i<size; i++){\n\t\t\t\tint v = q.remove();\n\t\t\t\tans[v] = Math.min(ans[v], steps);\n\t\t\t\tint rev = Integer.parseInt(new StringBuilder(\"\"+v).reverse().toString());\n\t\t\t\tv++;\n\t\t\t\tif(v<ans.length && !seen[v]){\n\t\t\t\t\tseen[v] = true;\n\t\t\t\t\tq.add(v);\n\t\t\t\t}\n\t\t\t\tif(rev<ans.length && !seen[rev]){\n\t\t\t\t\tseen[rev] = true;\n\t\t\t\t\tq.add(rev);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n//\t\tSystem.out.println(tests);\n\t\t\n\t\tfor(int t = 1; t<=tests; t++){\n\t\t\tint n = in.nextInt();\n\t\t\tout.printf(\"Case #%d: %d\\n\", t, ans[n]);\n\t\t}\n\t\tout.close();\n\t}\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tString name = \"A-small-attempt1\";\n//\t\tnew CounterCulture(new Scanner(System.in), new PrintWriter(System.out));\n\t\tnew CounterCulture(new Scanner(new File(name+\".in\")), new PrintWriter(new File(name+\".out\")));\n\t}\n}\n", "idx": "2207"}
{"func": "package googlejam2.p208;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\nimport com.sun.org.apache.xerces.internal.impl.RevalidationHandler;\r\n\r\npublic class A {\r\n\r\n\tstatic int[] q;\r\n\t\r\n\t/*************************************************************************/\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tint n = 1000006;\n\t\tq= new int[n];\n\t\tq[1] = 1;\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tString s0 = \"\"+i;\n\t\t\tString s1 = new StringBuilder(s0).reverse().toString();\n\t\t\tint i1 = Integer.parseInt(s1);\n\t\t\tint q1 = q[i-1] + 1;\n\t\t\tint q2 = Integer.MAX_VALUE;\n\t\t\tif (i % 10 != 0 && i1 < i) {\n\t\t\t\tq2 = q[i1] + 1;\n\t\t\t}\n\t\t\tq[i] = Math.min(q1, q2);\n\t\t}\r\n\t\tString load = \"src/a-small-attempt0.in\";\n\t\tString save = \"src/a-small-attempt0.out\";\n\t\tin = new Scanner(new File(load));\n\t\tout = new PrintWriter(new File(save));\n\t\tint T = in.nextInt();\n\t\tfor (int t = 1; t <= T; t++) {\n\t\t\tout.print(\"Case #\" + t + \": \");\n\t\t\tSystem.out.println(\"Case #\" + t + \": ............\");\n\t\t\tA r = new A();\n\t\t\tint N = A.in.nextInt();\n\t\t\tA.out.println(A.q[N]);\n\t\t}\n\t\tout.close();\r\n\t}\r\n\r\n\tstatic Scanner in;\r\n\tstatic PrintWriter out;\r\n}\r\n", "idx": "2208"}
{"func": "package googlejam2.p214;\n\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintStream;\r\nimport java.util.HashMap;\r\nimport java.util.Map.Entry;\r\nimport java.util.Scanner;\r\nimport java.util.TreeMap;\r\n\r\n// Using the Google Guava library.\r\npublic class A {\r\n\r\n\tpublic static void main(String [] args) throws IOException {\r\n\t\tString inputFile = \"src/A-small-1.in\";\r\n\t\tScanner in = new Scanner(new File(inputFile));\r\n\t\tPrintStream out = new PrintStream(inputFile.substring(0, inputFile.length()-2)+\"out\");\r\n\t\tint cases = in.nextInt();\r\n\t\tfor (int cs = 1; cs <= cases; cs++) {\r\n\t\t\tlong n = in.nextLong();\r\n\t\t\tA a = new A(n);\r\n\t\t\tString ans = \"Case #\"+cs+\": \"+a.minSteps;\r\n\t\t\tout.println(ans);\r\n\t\t\tSystem.out.println(ans);\r\n\t\t}\r\n\t\tout.close();\r\n\t\tin.close();\r\n\t}\r\n\t\r\n\tTreeMap<Long, Integer> queue = new TreeMap<>();\r\n\tHashMap<Long,Integer> seen = new HashMap<>();\r\n\tint minSteps = Integer.MAX_VALUE;\r\n\t\r\n\tpublic A(long n) {\r\n\t    queue.put(n, 1);\r\n\t    while(!queue.isEmpty()) {\r\n\t        Entry<Long, Integer> e = queue.pollFirstEntry();\r\n\t        long v = e.getKey();\r\n\t        int s = e.getValue();\r\n\t        if (v == 1) {\r\n\t            minSteps = Math.min(s, minSteps);\r\n\t            continue;\r\n\t        }\r\n\t        if (s >= minSteps) { continue; }\r\n\t        {\r\n\t            Integer ps = seen.get(v-1);\r\n\t            if (ps == null || ps > s+1) {\r\n\t                queue.put(v-1, s+1);\r\n\t                seen.put(v-1, s+1);\r\n\t            }\r\n            }\r\n\t        if (v % 10 != 0) {\r\n\t            long vr = Long.parseLong(new StringBuilder(Long.toString(v)).reverse().toString());\r\n\t            if (vr < v){\r\n\t                Integer ps = seen.get(vr);\r\n\t                if (ps == null || ps > s+1) {\r\n\t                    queue.put(vr, s+1);\r\n\t                    seen.put(vr, s+1);\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t}\r\n}\r\n", "idx": "2214"}
{"func": "package googlejam2.p215;\nimport java.util.*;\r\n\r\npublic class Main {\r\n\t\r\n\tstatic long answ;\r\n\t\r\n\tpublic static void main(String args[]){\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint T = in.nextInt();\r\n\t\tlong N;\r\n\t\tlong n;\r\n\t\tString s, ss;\r\n\t\tStringBuilder rev;\r\n\t\t\r\n\t\tQueue<String> q = new LinkedList<String>();\r\n\t\tQueue<Long> c = new LinkedList<Long>();\r\n\t\tHashSet<String> hs = new HashSet<String>();\r\n\t\tfor(int z = 1; z <= T; z++){\r\n\t\t\tN = in.nextLong();\r\n\t\t\tq.clear();\r\n\t\t\tc.clear();\r\n\t\t\ths.clear();\r\n\t\t\ths.add(\"1\");\r\n\t\t\tq.add(\"1\");\r\n\t\t\tc.add(1l);\r\n\t\t\twhile(!q.isEmpty()){\r\n\t\t\t\ts = q.poll();\r\n\t\t\t\tansw = c.poll();\r\n\t\t\t\tn = Long.parseLong(s) + 1;\r\n\r\n\t\t\t\tif(n == N + 1){\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tss = Long.toString(n);\r\n\t\t\t\tif(!hs.contains(ss)){\r\n\t\t\t\t\tq.add(ss);\r\n\t\t\t\t\ths.add(ss);\r\n\t\t\t\t\tc.add(answ + 1);\r\n\t\t\t\t}\r\n\t\t\t\trev = new StringBuilder(s);\r\n\t\t\t\tss = rev.reverse().toString();\r\n\t\t\t\tif(!hs.contains(ss)){\r\n\t\t\t\t\tq.add(ss);\r\n\t\t\t\t\ths.add(ss);\r\n\t\t\t\t\tc.add(answ + 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + z + \": \" + answ);\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t\r\n}\r\n", "idx": "2215"}
{"func": "package googlejam2.p221;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class CounterCulture {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tCounterCulture instance = new CounterCulture();\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\n\t\tPrintWriter writer = new PrintWriter(\"out.txt\", \"UTF-8\");\n\t\t\n\t\t\n\t\tint MAX = 1000001;\n\t\t\n\t\tint[] res = new int[MAX];\n\t\t\n\t\tres[1] = 1;\n\t\t\n\t\tfor(int i=2;i<MAX;++i) {\n\t\t\tint r = Integer.parseInt(new StringBuffer(new Integer(i).toString()).reverse().toString());\n\t\t\tint r_r = Integer.parseInt(new StringBuffer(new Integer(r).toString()).reverse().toString());\n\t\t\tif(r<i && i == r_r) {\n\t\t\t\tres[i] = Math.min(res[i-1], res[r])+1;\n\t\t\t}\n\t\t\telse\n\t\t\t\tres[i] = res[i-1]+1;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\ttry {\n\t\t    String line = br.readLine();\n\t\t    \n\t\t    int t = Integer.parseInt(line);\n\t\t    \n\t\t    for(int i=1;i<=t;++i) {\n\t\t    \tint n = Integer.parseInt(br.readLine());\n\t\t    \t\n\t\t    \twriter.print(\"Case #\" + new Integer(i).toString() + \": \" + res[n]);\n\t\t    \t\n\t\t    \tif(i<t)\n\t\t    \t\twriter.println();\n\t\t    }\n\t\t} finally {\n\t\t    br.close();\n\t\t    writer.close();\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "2221"}
{"func": "package googlejam2.p222;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\npublic class A {\r\n    static Scanner in = new Scanner(System.in);\r\n    \r\n    static PrintStream out = System.out;\r\n    \r\n    public static void main(String[] args) {\r\n        int T = in.nextInt();\r\n        \r\n        long[] next = new long[2];\r\n        \r\n        for (int t = 1; t <= T; t++){\r\n            long N = in.nextLong();\r\n            \r\n            Queue<Long> queue = new LinkedList<>();\r\n            HashSet<Long> S = new HashSet<>();\r\n            HashMap<Long, Long> distance = new HashMap<>();\r\n            \r\n            queue.add(1L);\r\n            S.add(1L);\r\n            distance.put(1L, 0L);\r\n            \r\n            while(!queue.isEmpty()){\r\n                long number = queue.poll();\r\n                \r\n                if (number == N){\r\n                    break;\r\n                }\r\n                \r\n                next[0] = number + 1;\n\t\t\t\tStringBuilder builder = new StringBuilder(Long.toString(number));\r\n                next[1] = Long.parseLong(builder.reverse().toString());\r\n                \r\n                for (int i = 0; i < 2; i++){\r\n                    if (!S.contains(next[i]) && next[i] <= N && next[i] > number){\r\n                        queue.add(next[i]);\r\n                        S.add(next[i]);\r\n                        distance.put(next[i], distance.get(number) + 1);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            out.println(String.format(\"Case #%d: %d\", t, distance.get(N) + 1));\r\n        }\r\n    }\r\n}\r\n", "idx": "2222"}
{"func": "package googlejam2.p223;\nimport java.io.*;\nimport java.util.*;\n\npublic class CounterCulture\n{\n    public static void main (String[] args) throws IOException\n    {\n        //Scanner scan = new Scanner(System.in);\n        Scanner scan = new Scanner(new File(\"A-small-attempt0.in\"));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"A-small-attempt0.out\")));\n        \n        int[] dist = new int[1000001];\n        dist[1] = 1;\n        \n        for (int i=1; i<1000000; i++)\n        {\n            if (dist[i+1]==0 || dist[i+1]>dist[i]+1)\n                dist[i+1] = dist[i]+1;\n\t\t\tString s1 = Integer.toString(i);\n\t\t\tString s2 = \"\";\n\t\t\tfor (int i1=0; i1<s1.length(); i1++)\n\t\t\ts2 = s1.charAt(i1) + s2;\n            int s = Integer.parseInt(s2);\n            if (s>i && (dist[s]==0 || dist[s]>dist[i]+1))\n                dist[s] = dist[i]+1;\n        }\n\n        int t = scan.nextInt();\n        for (int i=1; i<=t; i++)\n            out.println(\"Case #\" + i + \": \" + dist[scan.nextInt()]);\n        \n        out.close();\n        System.exit(0);\n    }\n}\n                ", "idx": "2223"}
{"func": "package googlejam2.p225;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\n\npublic class A {\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t\n\t\t// BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\t// int numCases = Integer.parseInt(r.readLine());\n\t\t\n\t\tScanner s = new Scanner(System.in);\n\t\tint numCases = s.nextInt();\n\t\t\n\t\tint max = 1000003;\n\t\tlong[] dp = new long[max];\n\t\tdp[1] = 1;\n\t\tdp[2] = 2;\n\t\tfor(int i = 3; i < max; ++i)\n\t\t{\n\t\t\tlong first = dp[i-1] + 1;\n\t\t\tchar[] test = String.valueOf((long) i).toCharArray();\n\t\t\tlong res = 0;\n\t\t\tlong mult = 1;\n\t\t\tfor(int i1 = 0; i1 < test.length; ++i1)\n\t\t\t{\n\t\t\t\tint tmp = Integer.valueOf(String.valueOf(test[i1]));\n\t\t\t\tif(i1 == test.length-1 && tmp == 0)\n\t\t\t\t{\n\t\t\t\t\t// es darf kein digit verloren gehen...\n\t\t\t\t\tres += 10000000000L;\n\t\t\t\t}\n\t\t\t\tres += tmp * mult;\n\t\t\t\tmult *= 10;\n\t\t\t}\n\t\t\tlong index = res;\n\t\t\tlong second = 0;\n\t\t\tif(index >= 1 && index < i)\n\t\t\t{\n\t\t\t\tsecond = dp[(int)index]+1;\n\t\t\t}\n\t\t\tif(second > 1 && second < first)\n\t\t\t{\n\t\t\t\tdp[i] = second;\n\t\t\t}else\n\t\t\t{\n\t\t\t\tdp[i] = first;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tfor(int numC = 0; numC < numCases; ++numC)\n\t\t{\n\t\t\t\n\t\t\tlong n = s.nextLong();\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\");\n\t\t\tSystem.out.print(numC+1);\n\t\t\tSystem.out.print(\": \");\n\t\t\tSystem.out.println(dp[(int)n]);\n\t\t}\n\n\t}\n}\n", "idx": "2225"}
{"func": "package googlejam2.p230;\n\r\nimport java.util.Scanner;\r\n\r\npublic class CounterCulture {\r\n\r\n    static int[] min;\r\n\r\n\r\n    \r\n\r\n//    static int next(int x, int N, int max) {\r\n//        if (x == N) {\r\n//            return 0;\r\n//        }\r\n//        if (x >= limit || max <= 0) {\r\n//            return Integer.MAX_VALUE;\r\n//        }\r\n//        \r\n//        if (max > N - x) {\r\n//            max = N - x;\r\n//        }\r\n//        \r\n//        int a = next(x + 1, N, max - 1);\r\n//        int b = next(reverse(x), N, max - 1);\r\n//        int result;\r\n//        if (a <= b) {\r\n//            result = a;\r\n//        } else {\r\n//            result = b;\r\n//        }\r\n//        if (result == Integer.MAX_VALUE) {\r\n//            return Integer.MAX_VALUE;\r\n//        }\r\n//        return result + 1;\r\n//    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner s = new Scanner(System.in);\r\n        int t = s.nextInt();\r\n        for (int i = 1; i <= t; i++) {\r\n            int N = s.nextInt();\r\n            min = new int[N + 1];\r\n            for (int j = N - 1; j >= 0; j--) {\r\n                min[j] = min[j + 1] + 1;\n\t\t\t\tint x = j;\n\t\t\t\tint result = 0;\n\t\t\t\twhile (x != 0) {\n\t\t\t\t    result *= 10;\n\t\t\t\t    result += x % 10;\n\t\t\t\t    x /= 10;\n\t\t\t\t}\r\n                int r = result;\r\n                if (r > j && r <= N && min[r] + 1 < min[j]) {\r\n                    min[j] = min[r] + 1;\r\n                }\r\n            }\r\n            \r\n            System.out.println(\"Case #\" + i + \": \" + min[0]);\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "2230"}
{"func": "package googlejam2.p231;\n\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.util.Scanner;\r\n\r\npublic class CounterCulture {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\t// int t = in.nextInt();\r\n\t\t// for (int _ = 1; _ <= t; _++) {\r\n\t\t// long n = in.nextLong();\r\n\t\t// int r = 1;\r\n\t\t// while (n > 1) {\r\n\t\t// long temp = Long.parseLong(new StringBuffer(\"\" + n).reverse()\r\n\t\t// .toString());\r\n\t\t// r++;\r\n\t\t// if (temp < n && n % 10 != 0)\r\n\t\t// n = temp;\r\n\t\t// else\r\n\t\t// n--;\r\n\t\t// }\r\n\t\t// System.out.println(\"Case #\" + _ + \": \" + r);\r\n\t\t// }\r\n\t\tint MAX = 1000001;\r\n\t\tLinkedList<Integer>[] E = new LinkedList[MAX];\r\n\t\tfor (int i = 1; i < MAX; i++) {\r\n\t\t\tE[i] = new LinkedList<Integer>();\r\n\t\t\tE[i].add(i + 1);\r\n\t\t\tint temp = Integer.parseInt(new StringBuffer(\"\" + i).reverse()\r\n\t\t\t\t\t.toString());\r\n\t\t\tif (i % 10 != 0)\r\n\t\t\t\tE[i].add(temp);\r\n\t\t}\r\n\t\tQueue<Integer> Q = new LinkedList<Integer>();\r\n\t\tint[] r = new int[MAX];\r\n\t\tboolean[] visited = new boolean[MAX];\r\n\t\tQ.add(1);\r\n\t\tvisited[1] = true;\r\n\t\tr[1] = 1;\r\n\t\twhile (!Q.isEmpty()) {\r\n\t\t\tint temp = Q.poll();\r\n\t\t\tfor (int x : E[temp])\r\n\t\t\t\tif (x < MAX && !visited[x]) {\r\n\t\t\t\t\tvisited[x] = true;\r\n\t\t\t\t\tr[x] = r[temp] + 1;\r\n\t\t\t\t\tQ.add(x);\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tint t = in.nextInt();\r\n\t\tfor (int _ = 1; _ <= t; _++) {\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tSystem.out.println(\"Case #\" + _ + \": \" + r[n]);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "2231"}
{"func": "package googlejam2.p233;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.lang.reflect.Array;\r\n\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tint MAX = 1000001;\r\n\t\tint[] mem = new int[MAX];\r\n \t\tfor (int i = 2; i < mem.length; i++) {\r\n\t\t\tmem[i] = i;\r\n\t\t}\r\n\t\tmem[1] = 1;\r\n\t\tfor (int i = 12; i < mem.length; i++) {\r\n\t\t\tmem[i] = Math.min(mem[i], mem[i - 1] + 1);\r\n\t\t\tchar[] chrs = String.valueOf(i).toCharArray();\r\n\t\t\tString ns = \"\";\r\n\t\t\tfor (int j = chrs.length - 1; j >= 0; j--) {\r\n\t\t\t\tns += chrs[j];\r\n\t\t\t}\r\n\t\t\tint nv = Integer.parseInt(ns);\r\n\t\t\tif(nv < mem.length) {\r\n\t\t\t\tmem[nv] = Math.min(mem[nv], mem[i] + 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\r\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"outputA.txt\"));\r\n\t\tint nrTests = Integer.parseInt(br.readLine());\r\n\t\tfor(int tNr = 1; tNr <= nrTests; tNr++) {\r\n\t\t\tlong n = Long.parseLong(br.readLine());\r\n\t\t\tpw.println(\"Case #\" + tNr + \": \" + mem[(int)n]);\r\n\t\t}\r\n\t\t\r\n\t\tpw.close();\r\n\t\tbr.close();\r\n\t\tSystem.out.println(\"done!\");\r\n\t}\r\n}\r\n", "idx": "2233"}
{"func": "package googlejam2.p234;\n\r\n\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tstatic Scanner reader;\r\n\tstatic PrintWriter writer;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\treader = new Scanner(new FileReader(\"input\"));\r\n\t\twriter = new PrintWriter(new FileWriter(\"output\"));\r\n\t\tint nt = reader.nextInt();\r\n\t\tfor(int tc = 1; tc <= nt; tc++) {\r\n\t\t\tint n = reader.nextInt();\n\t\t\tQueue<Integer> Q = new LinkedList<>();\n\t\t\tQ.add(0);\n\t\t\tint[] d = new int[n + 1];\n\t\t\tArrays.fill(d, Integer.MAX_VALUE);\n\t\t\td[0] = 0;\n\t\t\twhile(d[n] == Integer.MAX_VALUE) {\n\t\t\t\tint cur = Q.poll();\n\t\t\t\tif(cur + 1 <= n && d[cur + 1] == Integer.MAX_VALUE) {\n\t\t\t\t\td[cur + 1] = 1 + d[cur];\n\t\t\t\t\tQ.add(cur + 1);\n\t\t\t\t}\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tsb.append(cur);\n\t\t\t\tsb = sb.reverse();\n\t\t\t\tint r = Integer.parseInt(sb.toString());\n\t\t\t\tif(r <= n && d[r] == Integer.MAX_VALUE) {\n\t\t\t\t\td[r] = 1 + d[cur];\n\t\t\t\t\tQ.add(r);\n\t\t\t\t}\n\t\t\t}\n\t\t\twriter.printf(\"Case #%d: %d\\n\", tc, d[n]);\r\n\t\t}\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\t\r\n}\r\n", "idx": "2234"}
{"func": "package googlejam2.p237;\nimport java.util.Scanner;\r\n\r\npublic class  Culture{\r\n   public static void main(String[] args) {\r\n      Scanner scan = new Scanner(System.in);\r\n      \r\n      int[] memo = new int[1000001];\r\n      \r\n      for(int i = 1; i < memo.length; i++) {\r\n         memo[i] = i;\r\n      }\r\n      \r\n      for(int i = 1; i < memo.length; i++) {\r\n         //System.out.println(i);\r\n         String inputS = \"\" + i;\n\t\t  String outputS = \"\";\n\t\t  for(int i1 = inputS.length() - 1; i1 >= 0; i1--) {\n\t\t     outputS += inputS.charAt(i1);\n\t\t  }\n\t\tint invert = Integer.parseInt(outputS);\r\n         int offset = 1;\r\n         while(true) {\r\n            \r\n            if(invert >= 1 && invert < memo.length) {\r\n               if(memo[invert] > memo[i] + offset) {\r\n                  memo[invert] = memo[i] + offset;\r\n               } else {\r\n                  break;\r\n               }\r\n            } else {\r\n               break;\r\n            }\r\n            invert++;\r\n            offset++;\r\n         }\r\n      }\r\n      \r\n      //System.out.println(\"READY\");\r\n      \r\n      int numCases = scan.nextInt();\r\n      \r\n      for(int caseNum = 1; caseNum <= numCases; caseNum++) {\r\n         int countNum = scan.nextInt();\r\n         \r\n         System.out.print(\"Case #\" + caseNum + \": \");\r\n         int startNum = 0;\r\n         \r\n         \r\n         \r\n         System.out.println(memo[countNum]);\r\n      }\r\n      \r\n   }\r\n}", "idx": "2237"}
{"func": "package googlejam2.p241;\nimport java.util.*;\n\npublic class A {\n\tpublic static void main(String[] args) {\n\t\ttry (Scanner sc = new Scanner(System.in)) {\n\t\t\tint T = sc.nextInt();\n\t\t\tfor (int i = 1; i <= T; ++i) {\n\t\t\t\tint ans = -1;\n\t\t\t\tint N = sc.nextInt();\n\t\t\t\tint[] memo = new int[N+1];\n\t\t\t\tfor (int j = 1; j <= N; ++j) {\n\t\t\t\t\tmemo[j] = Integer.MAX_VALUE;\n\t\t\t\t}\n\t\t\t\tfor (int j = 1; j <= N; ++j) {\n\t\t\t\t\tmemo[j] = Math.min(memo[j], memo[j-1] + 1);\n\t\t\t\t\tint k = Integer.parseInt(new StringBuilder(String.valueOf(j)).reverse().toString());\n\n\t\t\t\t\tif (j != k && k > j && k <= N) {\n\t\t\t\t\t\tmemo[k] = memo[j] + 1;\n\t\t\t\t\t\t// System.out.println(k + \":\" + memo[k]);\n\t\t\t\t\t}\n\t\t\t\t\t// System.out.println(j + \":\" + memo[j]);\n\t\t\t\t}\n\t\t\t\tans = memo[N];\n\t\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", i, ans);\n\t\t\t}\n\t\t}\n\t}\n}", "idx": "2241"}
{"func": "package googlejam2.p247;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author ahmad\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    static int memo[]=new int[1000010];\n    public static void main(String[] args) throws FileNotFoundException {\n        // TODO code application logic here\n        Scanner input=new Scanner(new File(\"input.in\"));\n        int tc=input.nextInt();\n        int n;\n        Arrays.fill(memo, 1000000);\n\t\t            memo[1] = 1;\n\t\t\n\t\tfor(int i1 = 1; i1 < 1000000; i1++) {\n\t\t\tStringBuffer nn=new StringBuffer(i1+\"\");\n\t\t\tnn=nn.reverse();\n\t\t\tint reverse = Integer.parseInt(nn.toString());\n\t\t\tmemo[i1+1] = Math.min(memo[i1+1], memo[i1] + 1);\n\t\t\tmemo[reverse] = Math.min(memo[reverse], memo[i1] + 1);\n\t\t           \n\t\t}\n        for (int i = 0; i < tc; i++) {\n            n=input.nextInt();\n           \n            System.out.printf(\"Case #%d: %d \\n\",(i+1),memo[n]);\n        }\n        \n        \n    }\n}\n", "idx": "2247"}
{"func": "package googlejam2.p249;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\nimport java.util.StringTokenizer;\r\nimport java.util.Arrays;\r\n\r\nclass Main\r\n{\r\n\tstatic BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\tstatic Scanner sc = new Scanner(new InputStreamReader(System.in));\r\n\r\n\tpublic static void main (String[] args) throws java.lang.Exception {\r\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tint[] list1 = new int[1000001];\n\t\tlist1[0] = 0;\n\t\tlist1[1] = 1;\n\t\tfor (int i2=2; i2<1000001; i2++) {\n\t\t\tlist1[i2] = 9999999;\n\t\t}\n\t\t\n\t\tfor (int i1=1; i1<1000001; i1++) {\n\t\t\tString strI = Integer.toString(i1);\n\t\t\tint reverseI = 0;\n\t\t\tfor (int k=strI.length()-1; k>=0; k--) {\n\t\t\t\treverseI *= 10;\n\t\t\t\treverseI += Integer.parseInt(\"\" + strI.charAt(k));\n\t\t\t}\n\t\t\n\t\t\tif (i1 != 1000000) list1[i1+1] = Math.min(list1[i1+1], list1[i1] + 1);\n\t\t\tif (reverseI <= 1000000) list1[reverseI] = Math.min(list1[reverseI], list1[i1] + 1);\n\t\t}\r\n\t\tint[] list = list1;\r\n\t\tfor (int i=0; i<T; i++){\r\n\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + list[N]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n", "idx": "2249"}
{"func": "package googlejam2.p252;\nimport java.util.*;\n\npublic class ProblemA {\n    public static void main(String[] args) {\n        for(int i=1; i<=11; i++) {\n\t\t    dp[i] = i;\n\t\t}\n\t\t\n\t\t//actual dp\n\t\tfor(int i=1; i<dp.length - 1; i++) {\n\t\t    //fill in the one ahead\n\t\t    if(dp[i+1] == 0 || dp[i+1] > dp[i] + 1)\n\t\t        dp[i+1] = dp[i] + 1;\n\t\t    \n\t\t    //and the one reversed if needed\n\t\t    char[] number = Integer.toString(i).toCharArray();\n\t\t    for(int i1=0; i1<number.length/2; i1++) {\n\t\t\t    char t = number[i1];\n\t\t\t    number[i1] =  number[number.length - i1 - 1];\n\t\t\t    number[number.length - i1 - 1] = t;\n\t\t\t}\n\t\t    int revNo = Integer.parseInt(new String(number));\n\t\t    \n\t\t    if(revNo > i && revNo < dp.length) {\n\t\t        if(dp[revNo] == 0 || dp[revNo] > dp[i] + 1)\n\t\t            dp[revNo] = dp[i] + 1;\n\t\t    }\n\t\t}\n        Scanner in = new Scanner(System.in);\n        \n        final int noTests = in.nextInt();\n        in.nextLine();\n        \n        for(int test=1; test<=noTests; test++) {\n            int target = in.nextInt();\n            System.out.printf(\"Case #%d: %d%n\", test, dp[target]);\n        }\n    }\n\n    static int dp[] = new int[1_000_001];\n    \n}\n", "idx": "2252"}
{"func": "package googlejam2.p257;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\n\r\npublic class A1 {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\r\n\r\n\t\tint[] C = new int[1000001]; // min counts\r\n\t\tfor (int i = 0; i < C.length; i++)\r\n\t\t\tC[i] = i;\r\n\t\tfor (int n = 2; n <= C.length; n++) {\r\n\t\t\tC[n] = Math.min(C[n], C[n - 1] + 1);\r\n\t\t\tint r = Integer.parseInt(new StringBuilder(String.valueOf(n)).reverse().toString());\r\n\t\t\tif (r > n)\r\n\t\t\t\tC[r] = Math.min(C[r], C[n] + 1);\r\n\t\t}\r\n\t\t\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tint N = Integer.parseInt(in.readLine());\r\n\t\t\tout.println(\"Case #\" + t + \": \" + C[N]);\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n\r\n}\r\n", "idx": "2257"}
{"func": "package googlejam2.p271;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.util.HashSet;\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\n\r\npublic class Z1_12 {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FileWriter fw = new FileWriter(\"C:\\\\output.txt\");\r\n        BufferedWriter out = new BufferedWriter(fw);\r\n        //String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\z1.txt\";\r\n        String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\A-small-attempt4.in\";\r\n        //String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\D-large.in\";\r\n        Scanner scanner = new Scanner(new File(pathname));\r\n        int tn = scanner.nextInt();\r\n        scanner.nextLine();\r\n        int[] xx = new int[1000001];\r\n        Set<Integer> all = new HashSet<Integer>();\r\n        for (int x =1;x<=1000000;x++) {\r\n            all.add(x);\r\n        }\r\n        Set<Integer> current = new HashSet<Integer>();\r\n        current.add(1);\r\n        xx[1] = 1;\r\n        int step = 2;\r\n        while (all.size()>0) {\r\n            all.removeAll(current);\r\n            Set<Integer> next = new HashSet<Integer>();\r\n            for (int x : current) {\r\n                String xs = String.valueOf(x);\r\n                String ns = new StringBuilder(xs).reverse().toString();\r\n                int reverse = Integer.valueOf(ns);\r\n                if (all.contains(reverse)) {\r\n                    next.add(reverse);\r\n                    if (xx[reverse]==0) {\r\n                        xx[reverse] = step;\r\n                    }\r\n                }\r\n                if (all.contains(x+1)) {\r\n                    next.add(x+1);\r\n                    if (xx[x+1]==0) {\r\n                        xx[x + 1] = step;\r\n                    }\r\n                }\r\n            }\r\n            current = next;\r\n            step++;\r\n        }\r\n        for (int ti = 1; ti <= tn; ti++) {\r\n            int n = scanner.nextInt();\r\n            int x = xx[n];\r\n            String s;\r\n            if (x==Integer.MAX_VALUE) {\r\n                s = \"Case #\" + ti + \": NOT POSSIBLE\";\r\n            } else {\r\n                s = \"Case #\" + ti + \": \"+x;\r\n            }\r\n            System.out.println(s);\r\n            out.write(s);\r\n            out.write(\"\\n\");\r\n        }\r\n        out.close();\r\n    }\r\n\r\n}\r\n", "idx": "2271"}
{"func": "package googlejam2.p276;\n\n\nimport java.io.*;\nimport java.util.*;\n\npublic class P1 {\n\tpublic static final String filename = \"A-small-attempt1\";\n\tpublic static Scanner in;\n\tpublic static PrintStream out;\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tin = new Scanner(new File(filename + \".in\"));\n\t\tout = new PrintStream(new FileOutputStream(filename + \".out\"));\n\t\t\n\t\tint num = Integer.parseInt(in.nextLine());\n\t\tfor (int i = 1; i <= num; i++) {\n\t\t\tint n = Integer.parseInt(in.nextLine());\n\t\t\tint[] arr = new int[n + 1];\n\t\t\tfor (int i2 = 0; i2 <= n; i2++)\n\t\t\t\tarr[i2] = i2;\n\t\t\t\n\t\t\tfor (int i1 = 1; i1 <= n; i1++) {\n\t\t\t\tint count = arr[i1 - 1];\n\t\t\t\tif (arr[i1] > count)\n\t\t\t\t\tarr[i1] = count + 1;\n\t\t\t\tint num1 = arr[i1];\n\t\t\t\tString s = \"\" + i1;\n\t\t\t\tString ns = \"\";\n\t\t\t\tfor (int i2 = 0; i2 < s.length(); i2++)\n\t\t\t\t\tns += s.charAt(s.length() - i2 - 1);\n\t\t\t\tint x = Integer.parseInt(ns);\n\t\t\t\tif (x <= n && x > i1 && arr[x] > arr[i1])\n\t\t\t\t\tarr[x] = num1 + 1;\n\t\t\t}\n\t\t\tint res = arr[n];\n\t\t\tString s = \"Case #\" + i + \": \" + res;\n\t\t\tSystem.out.println(s);\n\t\t\tout.println(s);\n\t\t}\n\t\tin.close();\n\t\tout.close();\n\t}\n}\n", "idx": "2276"}
{"func": "package googlejam2.p277;\nimport java.util.*;\npublic class A {\n\tpublic static void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint t = in.nextInt();\n\t\tfor(int z = 1; z <= t; z ++){\n\t\t\tint n = in.nextInt();\n\t\t\tint[] a = new int[n + 1];\n\t\t\tArrays.fill(a, -1);\n\t\t\ta[1] = 1;\n\t\t\tQueue<Integer> q = new LinkedList<Integer>();\n\t\t\tq.add(1);\n\t\t\twhile(!q.isEmpty()){\n\t\t\t\tint at = q.poll();\n\t\t\t\tif(at == n)break;\n\t\t\t\tif(at > n)continue;\n\t\t\t\tif(a[at + 1] == -1){\n\t\t\t\t\ta[at + 1] = a[at] + 1;\n\t\t\t\t\tq.add(at + 1);\n\t\t\t\t}\n\t\t\t\tlong a1 = at;\n\t\t\t\tint len = 0;\n\t\t\t\tlong aa = a1;\n\t\t\t\twhile(aa!=0){\n\t\t\t\t\taa/=10;\n\t\t\t\t\tlen++;\n\t\t\t\t}\n\t\t\t\tlen--;\n\t\t\t\tlong ans = 0;\n\t\t\t\twhile(a1>0){\n\t\t\t\t\tans+=(a1%10)*(Math.pow(10,  len));\n\t\t\t\t\tlen--;\n\t\t\t\t\ta1/=10;\n\t\t\t\t}\n\t\t\t\tint to = (int)ans;\n\t\t\t\tif(to <= at || to > n || a[to] != -1)\n\t\t\t\t\tcontinue;\n\t\t\t\tq.add(to);\n\t\t\t\ta[to] = a[at] + 1;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + z + \": \" + a[n]);\n\t\t}\n\t}\n}\n", "idx": "2277"}
{"func": "package googlejam2.p278;\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author adam\n */\n\n\npublic class A\n{\n    public static void main(String[] args) throws Exception\n    {\n        Scanner s=new Scanner(new FileInputStream(args[0]) );\n        int t=s.nextInt();\n        TreeSet<Long> keresettek=new TreeSet<Long>();\n        LinkedList<Long> keresettek2=new LinkedList<Long>();\n        for (int i=1;i<=t;i++)\n        {\n             //System.out.print(\"Case #\"+i+\": \");\n             long l=s.nextLong();\n             keresettek2.add(l);\n             keresettek.add(l);\n        }\n\t\tTreeMap<Long,Long> ret=new TreeMap<Long, Long>();\n\n\t\tTreeSet<Long> voltmar=new TreeSet<Long>();\n\t\tTreeSet<Long> elements=new TreeSet<Long>();\n\t\tTreeSet<Long> nextelements=new TreeSet<Long>();\n\t\telements.add((long)1);\n\t\tint kellmeg=keresettek.size();\n\t\tint lepesek=1;\n\t\tif (keresettek.contains((long)1))\n\t\t    ret.put((long)1, (long)1);\n\t\t//int max=l.last();\n\t\t//while(kellmeg!=0)\n\t\twhile (ret.size()!=keresettek.size())\n\t\t{\n\t\t    //if (elements.contains(l)) break;\n\t\tfor (Long i1:elements)\n\t\t{\n\t\t   if (\n\t\t           //i+1<=max &&\n\t\t           voltmar.contains(i1+1)==false)\n\t\t   {\n\t\t       if (keresettek.contains(i1+1) && ret.containsKey(i1+1)==false )\n\t\t       {\n\t\t           System.err.println(\"betesz hozzaadassal:\"+(i1+1) );\n\t\t           ret.put(i1+1, (long)(lepesek+1) );\n\t\t       }\n\t\t   nextelements.add(i1+1);\n\t\t   }\n\t\t   //if (voltmar.contains(i)) continue;\n\t\t   Long newertek=Long.parseLong(new StringBuilder(i1.toString()).reverse().toString() );\n\t\t   //System.err.println(i+\"->\"+newertek);\n\t\t   //if (newertek<=l && new)\n\t\t   if (\n\t\t           //newertek<=l &&\n\t\t           voltmar.contains(newertek)==false )\n\t\t   {\n\t\t       if (keresettek.contains(newertek) && ret.containsKey(newertek)==false)\n\t\t       {\n\t\t           System.err.println(\"betesz forditassal:\"+newertek);\n\t\t           ret.put(newertek, (long)(lepesek+1) );\n\t\t       }\n\n\t\t   nextelements.add(newertek);\n\t\t   }\n\t\t   //voltmar.add(newertek);\n\t\t   voltmar.add(i1);\n\t\t}\n\t\telements=new TreeSet<Long>(nextelements);\n\t\tnextelements.clear();\n\t\tlepesek++;\n\t\tSystem.err.println(lepesek);\n\t\t//if (elements.contains(l)) break;\n\t\t}\n        TreeMap<Long,Long> sol=ret;\n        for (int i=1;i<=t;i++)\n        {\n             System.out.println(\"Case #\"+i+\": \"+sol.get(keresettek2.get(i-1)) );\n        }\n    }\n}\n", "idx": "2278"}
{"func": "package googlejam2.p285;\nimport java.util.Scanner;\r\nimport java.util.Queue;\r\nimport java.util.LinkedList;\r\nimport java.io.BufferedReader;\r\n\r\npublic class A{\r\n  public static void main(String[] args){\r\n    distance=new int[1000001];\n\tfor(int i=0;i<1000001;i++)\n\t  distance[i]=UNSEEN;\n\tQueue<Integer> q=new LinkedList<Integer>();\n\tdistance[1]=1;\n\tq.add(1);\n\twhile(!q.isEmpty()){\n\t  int current=q.poll();\n\t  int d=distance[current];\n\t\n\t  int next=current+1;\n\t  if(next<1000001 && distance[next]==UNSEEN){\n\t    int nd=d+1;\n\t    distance[next]=nd;\n\t    q.add(next);\n\t  }\n\tint n = current;\n\tint result=0;\n\twhile(n>0){\n\t  result=10*result+(n%10);\n\t  n/=10;\n\t}\n\t  next=result;\n\t  if(next<1000001 && distance[next]==UNSEEN){\n\t    int nd=d+1;\n\t    distance[next]=nd;\n\t    q.add(next);\n\t  }\n\t}\r\n    \r\n    Scanner scanner=new Scanner(System.in);\r\n    final int cases=scanner.nextInt();\r\n\r\n    for(int t=0;t<cases;t++){\r\n      int n=scanner.nextInt();\r\n      System.out.println(\"Case #\"+(t+1)+\": \"+distance[n]);\r\n    }\r\n  }\r\n\r\n  private static int[] distance;\r\n  private static final int UNSEEN=-1;\r\n}\r\n", "idx": "2285"}
{"func": "package googlejam2.p289;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.util.Scanner;\r\n\r\npublic class CounterCulture {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner scan = new Scanner(new File(\r\n\t\t\t\t\"C:/Users/Ahmed/Desktop/Codejam_1/A-small-attempt1.in\"));\r\n\t\t// Scanner scan = new Scanner(System.in);\r\n\t\t// PrintWriter print = new PrintWriter(\"a.out\");\r\n\r\n\t\tint lines = scan.nextInt();\r\n\t\tfor (int l = 0; l < lines; l++) {\r\n\t\t\tint n = scan.nextInt();\r\n\r\n\t\t\tQueue<Integer> queue = new LinkedList<Integer>();\r\n\r\n\t\t\tqueue.add(1);\r\n\t\t\tqueue.add(1);\r\n\t\t\tint max = (int) (Math.pow(10, 6) + 3);\r\n\t\t\tboolean[] visited = new boolean[max + 1];\r\n\t\t\twhile (!queue.isEmpty()) {\r\n\t\t\t\tint o = queue.poll();\r\n\t\t\t\tint steps = queue.poll();\r\n\t\t\t\tif (o == n) {\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + (l + 1) + \": \" + steps);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (o + 1 < max && !visited[o + 1]) {\r\n\t\t\t\t\tvisited[o + 1] = true;\r\n\t\t\t\t\tqueue.add(o + 1);\r\n\t\t\t\t\tqueue.add(steps + 1);\r\n\t\t\t\t}\n\t\t\t\tString s = o + \"\";\n\t\t\t\tString output = \"\";\n\t\t\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\t\t\toutput = s.charAt(i) + output;\n\t\t\t\t}\r\n\t\t\t\tint rev = Integer.parseInt(output);\r\n\t\t\t\tif (rev < max && !visited[rev]) {\r\n\t\t\t\t\tvisited[rev] = true;\r\n\t\t\t\t\tqueue.add(rev);\r\n\t\t\t\t\tqueue.add(steps + 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n//\t\t\tSystem.out.println(l);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "2289"}
{"func": "package googlejam2.p291;\n\nimport java.util.*;\nimport java.util.regex.*;\nimport java.io.*;\nimport java.math.*;\nimport java.text.*;\n\npublic class d {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(d.class.getResourceAsStream(\"a.in\"));\n        System.setOut(new PrintStream(\"d.txt\"));\n        //Scanner in = new Scanner(System.in);\n        int testcases, testcase = 1;\n        testcases = in.nextInt();\n        int N = 1000002;\n        int[] dp = new int[N];\n        Arrays.fill(dp, 1 << 28);\n        dp[1] = 1;\n        for(int i = 2; i < N; i++) {\n            StringBuilder sb = new StringBuilder();\n\t\t\tsb.append(i);\n\t\t\tsb.reverse();\n\t\t\tint rev = Integer.valueOf(sb.toString());\n            dp[i] = Math.min(dp[i - 1] + 1, dp[i]);\n            if(rev < N)\n                dp[rev] = Math.min(dp[rev], dp[i - 1] + 2);\n        }\n        //System.out.println(Arrays.toString(dp));\n        while(testcase <= testcases) {\n            int n = in.nextInt();\n            System.out.println(\"Case #\" + testcase + \": \" + dp[n]);\n            testcase++;\n        }\n    }\n}\n", "idx": "2291"}
{"func": "package googlejam2.p292;\n/*\r\nID: your_id_here\r\nLANG: JAVA\r\nTASK: test\r\n*/\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Main {\r\n\r\n\r\n\t\tpublic static int[] nums = new int[1000000 + 1];\r\n\r\n\tpublic static String reverse(String str) {\r\n\r\n\t\tString reversed = new StringBuilder(str).reverse().toString();\r\n\r\n\t\treturn reversed;\r\n\r\n\t}\r\n\r\n\tpublic static void main (String [] args) throws IOException {\r\n\t\tBufferedReader f = new BufferedReader(new FileReader(\"test.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"test.out\")));\r\n\t\tint t = Integer.parseInt(f.readLine());\r\n\t\tfor (int i = 0; i < nums.length; i++) {\r\n\t\t\tnums[i] = 0;\r\n\t\t}\r\n\r\n\t\tSystem.out.println(reverse(\"432100\"));\r\n\t\tfor (int i = 0; i < t; i++) {\r\n\t\t\tString numstr = f.readLine();\n\t\t\tint num = Integer.parseInt(numstr);\n\t\t\tSystem.out.println(\"---\" + num);\n\t\t\t\n\t\t\t\n\t\t\tfor (int i1 = 1; i1 <= num; i1++) {\n\t\t\t\tif ((nums[i1] == 0)) {\n\t\t\t\t\tint lowest = nums[i1 - 1] + 1;\n\t\t\t\t\tnumstr = Integer.toString(i1);\n\t\t\t\t\tint reversedInt = Integer.parseInt(reverse(numstr));\n\t\t\t\t\tString reversed = Integer.toString(reversedInt);\n\t\t\t\t\tif (numstr.length() == reversed.length() && reversedInt < i1)\n\t\t\t\t\t\tlowest = Math.min(lowest, (nums[reversedInt] + 1));\n\t\t\t\t\tSystem.out.println(i1 + \", \" + lowest);\n\t\t\t\t\tnums[i1] = lowest;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tout.println(\"Case #\" + (i+1) + \": \" + nums[num]);\r\n\t\t}\r\n\r\n\t\tout.close();\r\n\t\tSystem.exit(0);\r\n\t}\r\n}\r\n", "idx": "2292"}
{"func": "package googlejam2.p293;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class CodeJamCounter{\r\n    public static int[] count;\r\n\r\n    public static void main(String[] args) throws Exception{\r\n        count = new int[1000001];\r\n        count[1] = 1;\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        StringBuilder out = new StringBuilder();\r\n        int t = Integer.parseInt(br.readLine().trim());\r\n        for(int i = 1; i < 1000000; i++){\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(i);\r\n            int rev = Integer.parseInt(sb.reverse().toString());\r\n            if(count[i+1] == 0) count[i+1] = count[i] + 1;\r\n            else if(count[i] + 1 < count[i+1]) count[i+1] = count[i] + 1;\r\n            if(count[rev] == 0) count[rev] = count[i] + 1;\r\n            else if(count[i] + 1 < count[rev]) count[rev] = count[i] + 1;\r\n        }\r\n        for(int k = 1; k <= t; k++){\r\n            int n = Integer.parseInt(br.readLine().trim());\r\n            out.append(\"Case #\" + k + \": \" + count[n] + \"\\n\");\r\n        }\r\n        System.out.print(out);\r\n    }\r\n}", "idx": "2293"}
{"func": "package googlejam2.p300;\n\r\n\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.util.Scanner;\r\n\r\npublic class CounterCultureSlow {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tint cases;\n\t\tint[] distances1 = new int[1000000 + 1];\n\t\tQueue<Integer> ordering = new LinkedList<Integer>();\n\t\tordering.add(0);\n\t\twhile (!ordering.isEmpty())\n\t\t{\n\t\t\tint n1 = ordering.remove();\n\t\t\tif (n1 + 1 <= 1000000 && distances1[n1 + 1] == 0)\n\t\t\t{\n\t\t\t\tdistances1[n1 + 1] = distances1[n1] + 1;\n\t\t\t\tordering.add(n1 + 1);\n\t\t\t}\n\t\t\tchar[] digits = String.valueOf(n1).toCharArray();\n\t\t\tint val = 0;\n\t\t\tfor (int k = digits.length - 1; k >= 0; k--)\n\t\t\t\tval = 10 * val + digits[k] - '0';\n\t\t\t\n\t\t\tint nr = val;\n\t\t\tif (nr <= 1000000 && distances1[nr] == 0)\n\t\t\t{\n\t\t\t\tdistances1[nr] = distances1[n1] + 1;\n\t\t\t\tordering.add(nr);\n\t\t\t}\n\t\t}\r\n\t\t\r\n\t\t// Precompute solutions\r\n\t\t// This only works for the small cases, but I want it for testing.\r\n\t\tint[] distances = distances1;\r\n\t\t\r\n\t\tcases = input.nextInt();\r\n\t\tfor (int c = 1; c <= cases; c++)\r\n\t\t{\r\n\t\t\tint n = input.nextInt();\r\n\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", c, distances[n]);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "2300"}
{"func": "package googlejam2.p108;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Scanner;\n\npublic class a {\n\tstatic int MAX = 1000000;\n\tstatic int[] best = new int[MAX + 1];\n\tstatic {\n\t\tQueue<Integer> q = new LinkedList<>();\n\t\tbest[1] = 1;\n\t\tq.add(1);\n\t\twhile (!q.isEmpty()) {\n\t\t\tint n = q.poll();\n\t\t\tint x = best[n] + 1;\n\t\t\tif (n < MAX && (best[n + 1] == 0 || best[n + 1] > x)) {\n\t\t\t\tbest[n + 1] = x;\n\t\t\t\tq.add(n + 1);\n\t\t\t}\n\t\t\tint k = 0;\n\t\t\tint m = n;\n\t\t\twhile (m != 0) {\n\t\t\t\tk = k * 10 + (m % 10);\n\t\t\t\tm = m / 10;\n\t\t\t}\n\t\t\tif (k < MAX && (best[k] == 0 || best[k] > x)) {\n\t\t\t\tbest[k] = x;\n\t\t\t\tq.add(k);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner sc = new Scanner(System.in);\n\t\tint t = sc.nextInt();\n\t\tfor (int caseNum = 1; caseNum <= t; caseNum++) {\n\t\t\tint n = sc.nextInt();\n\t\t\tSystem.out.println(\"Case #\" + caseNum + \": \" + best[n]);\n\t\t}\n\t}\n}\n", "idx": "2108"}
{"func": "package googlejam2.p197;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class A {\r\n\tstatic PrintWriter pw;\r\n\tpublic static void main(String args[]) throws Exception{\r\n\t\tBufferedReader input = new BufferedReader(new FileReader(\"../GoogleCodeJam2015R1B/io/A-small-attempt0.in\"));\r\n\t\tpw = new PrintWriter(new FileWriter(\"../GoogleCodeJam2015R1B/io/output.txt\"));\r\n\t\t\r\n\t\tint[] numsper = new int[1000001];\r\n\t\tfor(int j = 0 ; j <= 1000000 ; j ++){\r\n\t\t\tnumsper[j] = Integer.MAX_VALUE;\r\n\t\t}\r\n\t\tnumsper[0] = 0;\r\n\t\tQueue<String> q = new LinkedList<String>();\r\n\t\tq.add(\"0,0\");\r\n\t\twhile(!q.isEmpty()){\r\n\t\t\tString[] s = q.poll().split(\",\");\r\n\t\t\tint num = Integer.parseInt(s[0]);\r\n\t\t\tint turn = Integer.parseInt(s[1]);\r\n\t\t\tif((num + 1) >= 1000001)continue;\r\n\t\t\t\r\n\t\t\tif(numsper[num + 1] > (turn + 1)){\r\n\t\t\t\tnumsper[num + 1] = turn + 1;\r\n\t\t\t\tq.add((num + 1)+\",\"+(turn + 1));\r\n\t\t\t}\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\tsb.append(s[0]);\r\n\t\t\tint revnum = Integer.parseInt(sb.reverse().toString());\r\n\t\t\tif(numsper[revnum] > (turn + 1)){\r\n\t\t\t\tnumsper[revnum] = turn + 1;\r\n\t\t\t\tq.add((revnum)+\",\"+(turn + 1));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tint T = Integer.parseInt(input.readLine());\r\n\t\tfor(int i = 0 ; i < T ; i++){\r\n\t\t\tint N = Integer.parseInt(input.readLine());\r\n\t\t\tpw.println(\"Case #\"+(i+1)+\": \"+numsper[N]);\r\n\t\t}\r\n\t\tpw.flush();\r\n\t\tinput.close();\r\n\t\tpw.close();\r\n\t}\r\n}\r\n", "idx": "2197"}
{"func": "package googlejam2.p242;\nimport java.io.*;\nimport java.util.*;\n\npublic class Poetry {\n  public static void main(String[] args) {\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n    try {\n      int t = Integer.parseInt(br.readLine());\n      for (int i = 1; i <= t; i++) {\n        int n = Integer.parseInt(br.readLine());\n\n        int[] nums = new int[n+1];\n        for (int j = 1; j <= n; j++) {\n          nums[j] = n-j+1;\n        }\n        nums[n] = 1;\n        for (int j = n-1; j >= 1; j--) {\n          int j1 = j;\n\t\t\tint r = 0;\n\t\t\twhile (j1 > 0) {\n\t\t\t  r *= 10;\n\t\t\t  r += j1 % 10;\n\t\t\t  j1 /= 10;\n\t\t\t}\n\t\tint reverse_j = r;\n          if (reverse_j <= n) {\n            nums[j] = 1 + Math.min(nums[reverse_j],nums[j+1]);\n          } else {\n            nums[j] = 1 + nums[j+1];\n          }\n        }\n\n        bw.write(\"Case #\" + i + \": \" + nums[1]);\n        bw.newLine();\n      }\n\n      bw.flush();\n      bw.close();\n      br.close();\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}\n", "idx": "2242"}
{"func": "package googlejam2.p301;\nimport java.util.Scanner;\n\n\npublic class Problem1 {\n\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tint maxN = 1000000;\n\t\tint[] minCount = new int[maxN+1]; // minCount[i] is for counting from 1 to i\n\t\tminCount[1] = 1;\n\t\t\n\t\tint reverseN;\n\t\tfor(int N=2; N<maxN+1; N++){\n\t\t\tint input = N;\n\t\t\tint reversedNum = 0;\n\t\t\twhile (input != 0) {\n\t\t\t    reversedNum = reversedNum * 10 + input % 10;\n\t\t\t    input = input / 10;   \n\t\t\t}\n\t\t\treverseN = reversedNum;\n\t\t\tif((N%10 != 0) && reverseN<N){\n\t\t\t\tminCount[N] = Math.min(1+minCount[N-1], 1+minCount[reverseN]);\n\t\t\t} else {\n\t\t\t\tminCount[N] = 1+minCount[N-1];\n\t\t\t}\n\t\t}\n\t\t\n\t\tScanner scan = new Scanner(System.in);\n\t\tint T = scan.nextInt();\n\t\tscan.nextLine();\n\t\t\n\t\tfor(int caseNb=0; caseNb<T; caseNb++){\n\t\t\tint N = scan.nextInt();\n\t\t\tscan.nextLine();\n\t\t\tSystem.out.println(\"Case #\"+(caseNb+1)+\": \"+minCount[N]);\n\t\t}\n\t}\n\n}\n", "idx": "2301"}
{"func": "package googlejam2.p304;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\n\r\npublic class Problem1 {\r\n    public static void main(String[] args) {\r\n\ttry {\r\n\t    BufferedReader reader = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n\t\tString line = null;\n\t\tList<String> lines1 = new ArrayList<String>();\n\t\twhile((line = reader.readLine()) != null) {\n\t\t    lines1.add(line);\n\t\t}\n\t\treader.close();\n\t\tList<String> lines = lines1;\n\t\tList<String> outputLines = new ArrayList<String>();\n\t\tint index = 0;\n\t\tint testCases = Integer.parseInt(lines.get(index++));\n\t\tint max = 1000000;\n\t\tint[] counts = new int[max+1]; \n\t\tArrays.fill(counts, max);\n\t\tcounts[1] = 1;\n\t\tfor(int i=1;i<max;i++) {\n\t\t    counts[i+1] = Math.min(counts[i]+1, counts[i+1]);\n\t\t\tint num = i;\n\t\t\tlong rev = 0;\n\t\t\twhile (num != 0)\n\t\t\t{\n\t\t\t    rev = rev*10 + num % 10;\n\t\t\t    num /= 10;\n\t\t\t}\n\t\t    long r = rev;\n\t\t    if(r > max) {\n\t\t\tcontinue;\n\t\t    }\n\t\t    counts[(int)r] = Math.min(counts[i]+1, counts[(int)r]);\n\t\t}\n\t\tfor(int t = 0; t < testCases; t++) {\n\t\t    int N = Integer.parseInt(lines.get(index++));\n\t\t    String testCaseOutput = \"Case #\" + (t+1) + \": \" +counts[N];\n\t\t    System.out.println(testCaseOutput);\n\t\t    outputLines.add(testCaseOutput);\n\t\t}\n\t\tStringBuilder strValue = new StringBuilder(\"\");\n\t\tif (outputLines != null) {\n\t\t    int i = 0;\n\t\t    for (Object v : outputLines) {\n\t\t\tString value = v.toString();\n\t\t\tif (i == 0) {\n\t\t\t    strValue.append(value);\n\t\t\t} else {\n\t\t\t    strValue.append(\"\\n\");\n\t\t\t    strValue.append(value);\n\t\t\t}\n\t\t\ti++;\n\t\t    }\n\t\t}\n\t\tString output = strValue.toString();\n\t\tFileWriter writer = new FileWriter(\"A-small-attempt0.in\".replace(\".in\", \".out\"));\n\t\twriter.write(output);\n\t\twriter.close();\r\n\t}catch(Exception ex) {\r\n\t    ex.printStackTrace();\r\n\t}\r\n    }\r\n\r\n\r\n}\r\n", "idx": "2304"}
{"func": "package googlejam2.p307;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class p1 \r\n{\r\n  static int ans=0;\r\n  public static void main (String[]args)throws IOException\r\n  {\r\n    Scanner s=new Scanner (new File(\"A-small-attempt0 (2).in\"));\r\n    PrintWriter out=new PrintWriter(new FileWriter(\"out.txt\"));\r\n    //Scanner s=new Scanner (new File(\"in.txt\"));  \r\n    int cases=s.nextInt();\r\n    \r\n    long max=1000000;\r\n    long best []=new long[(int)max+1];\r\n    Arrays.fill (best,max+1);\r\n    best[0]=0;\r\n    for (int x=1;x<=max;x++)\r\n    {\r\n      long a = x;\n\t\twhile (a%10==0)\n\t\t  a/=10;\n\t\tString b=\"\";\n\t\tint temp1=(int)Math.log10(a);\n\t\tfor (int x1=0;x1<=temp1;x1++)\n\t\t{\n\t\t  b+=a%10;\n\t\t  a/=10;\n\t\t}\n\tlong temp=Long.parseLong(b);\r\n      if(x%10!=0&&temp<=x)\r\n        best[x]=Math.min(best[(int)temp]+1,best[x-1]+1);\r\n      else\r\n        best[x]=best[x-1]+1;\r\n    }\r\n    \r\n    for (int tt=0;tt<cases;tt++)\r\n    {\r\n      long n=s.nextLong(); \r\n      out.println (\"Case #\"+(tt+1)+\": \"+(best[(int)n]));\r\n      System.out.println (\"Case #\"+(tt+1)+\": \"+(best[(int)n]));\r\n    }\r\n    out.close();\r\n    s.close();\r\n  }\r\n}", "idx": "2307"}
{"func": "package googlejam2.p308;\nimport java.util.Scanner;\r\n\r\npublic class GCJ2015A2 {\r\n    static long n;\r\n    static long[] result = new long[1000001];\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        for (int i = 1; i <= 1000000; i++) {\n\t\t    result[i] = i;\n\t\t}\n\t\twhile (true) {\n\t\t    boolean good = true;\n\t\t    for (int i = 1; i <= 1000000; i++) {\n\t\t        StringBuilder sb = new StringBuilder(\"\" + i);\n\t\t\t\tsb.reverse();\n\t\t\t\tint n1 = Integer.parseInt(sb.toString());\n\t\t        if (result[i] + 1 < result[n1]) {\n\t\t            result[n1] = result[i] + 1;\n\t\t            good = false;\n\t\t        }\n\t\t        if (i == 1000000) {\n\t\t            continue;\n\t\t        }\n\t\t        if (result[i] + 1 < result[i + 1]) {\n\t\t            result[i + 1] = result[i] + 1;\n\t\t            good = false;\n\t\t        }\n\t\t    }\n\t\t    if (good) {\n\t\t        break;\n\t\t    }\n\t\t}\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        for (int k = 1; k <= t; k++) {\r\n            n = sc.nextLong();\r\n            System.out.println(\"Case #\" + k + \": \" + result[(int) n]);\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "2308"}
{"func": "package googlejam2.p309;\nimport java.io.BufferedReader;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\nclass A {\r\n\t\r\n\tstatic int[] arr=new int[1000001];\r\n\t\r\n\tstatic BufferedReader br;\r\n\tstatic PrintWriter pw;\r\n\tstatic StringTokenizer st;\r\n\t\r\n\tpublic static void main(String[] args)throws IOException {\r\n\t\tbr=new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\r\n\t\tpw=new PrintWriter(new FileOutputStream(\"output_A.in\"));\r\n\t\tint t=Integer.parseInt(br.readLine());\n\t\tfor(int i=2;i<1000001;i++)\n\t\t\tarr[i]=1000001;\n\t\tarr[1]=1;\n\t\tfor(int i1=2;i1<1000001;i1++) {\n\t\t\tarr[i1]=Math.min(arr[i1-1]+1, arr[i1]);\n\t\t\tint num=i1;\n\t\t\tlong rev=0;\n\t\t\twhile(num>0) {\n\t\t\t\trev=num%10+rev*10;\n\t\t\t\tnum/=10;\n\t\t\t}\n\t\t\t//pw.println(rev);\n\t\t\tif(rev<1000000 && rev>i1)\n\t\t\t\tarr[(int)rev]=Math.min(arr[i1]+1, arr[(int)rev]);\n\t\t}\n\t\tfor(int i=1;i<=t;i++) {\n\t\t\tint n=Integer.parseInt(br.readLine());\n\t\t\tpw.println(\"Case #\"+i+\": \"+arr[n]);\n\t\t}\r\n\t\tpw.flush();\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "idx": "2309"}
{"func": "package googlejam2.p314;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n    Scanner input;\r\n    PrintWriter output;\r\n    public static int MAXIMUM = 1000000;\r\n\r\n    private static int[] lookup = new int[MAXIMUM + 1];\r\n\r\n    public A(Scanner input, PrintWriter output){\r\n        this.input = input;\r\n        this.output = output;\r\n    }\r\n\r\n    public static void main(String[] args){\r\n        final long startTime = System.currentTimeMillis();\r\n        File file = new File(\"A.in\");\r\n        Scanner input = null;\r\n        try {\r\n            input = new Scanner(file).useLocale(Locale.US);\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        PrintWriter output = null;\r\n        lookup[1] = 1;\r\n        for(int i = 1; i < MAXIMUM; i++){\r\n            lookup[i + 1] = lookup[i + 1] == 0 ? lookup[i] + 1 : Math.min(lookup[i + 1], lookup[i] + 1);\n\t\t\tint flipped = Integer.parseInt(new StringBuilder(((Integer) i).toString()).reverse().toString());\n\t\t\tif(flipped > i){\n\t\t\t    if(flipped <= MAXIMUM)\n\t\t\t    lookup[flipped] = lookup[flipped] == 0 ? lookup[i] + 1 : Math.min(lookup[flipped], lookup[i] + 1);\n\t\t\t} else if(lookup[flipped] > lookup[i] + 1) {\n\t\t\t    System.out.println(\"we have to recalculate the past!\");\n\t\t\t}\r\n        }\r\n        try {\r\n            output = new PrintWriter(\"A.out\", \"UTF-8\");\r\n        } catch (FileNotFoundException | UnsupportedEncodingException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        int problems = input.nextInt();\r\n        for(int i = 1; i <= problems; i++){\r\n            A r = new A(input, output);\n\t\t\tint number = r.input.nextInt();\n\t\t\tr.output.println(\"Case #\" + i + \": \" + A.lookup[number]);\r\n        }\r\n        output.close();\r\n        final long endTime = System.currentTimeMillis();\r\n        System.out.println(\"Total execution time: \" + (endTime - startTime) + \" ms\");\r\n    }\r\n}\r\n", "idx": "2314"}
{"func": "package googlejam2.p315;\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\tpublic static void main(String [] args) throws IOException {\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tint ct = input.nextInt();\r\n\t\tint cs = 1;\r\n\t\t\r\n\t\tint[] values = new int[1_000_001];\r\n\t\tArrays.fill(values, Integer.MAX_VALUE);\r\n\t\tvalues[1] = 1;\r\n\t\tfor(int i = 1; i < values.length-1; i++) {\r\n\t\t\tvalues[i+1] = Math.min(values[i+1], values[i]+1);\r\n\t\t\tint j = (int)reverse(i);\r\n\t\t\tvalues[j] = Math.min(values[j], values[i]+1);\r\n\t\t}\r\n\t\t\r\n\t\twhile(ct-- > 0) {\r\n\t\t\tSystem.out.printf(\"Case #%d: %d%n\", cs++, values[input.nextInt()]);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static long reverse(long a) {\r\n\t\tStringBuilder sb = new StringBuilder(Long.toString(a));\r\n\t\tsb.reverse();\r\n\t\treturn Long.parseLong(sb.toString());\r\n\t}\r\n}", "idx": "2315"}
{"func": "package googlejam2.p317;\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\n/*\r\n * To change this template, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n/**\r\n *\r\n * @author Pivis\r\n */\r\npublic class Problem1 {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException, IOException {\r\n        File f = new File(\"C:\\\\Users\\\\Pivis\\\\Documents\\\\NetBeansProjects\\\\GCJ_B\\\\src\\\\a.in\");\r\n        File out = new File(\"C:\\\\Users\\\\Pivis\\\\Documents\\\\NetBeansProjects\\\\GCJ_B\\\\src\\\\a.out\");\r\n        Scanner in = new Scanner(new FileReader(f));\r\n        BufferedWriter output = new BufferedWriter(new FileWriter(out));\r\n        HashMap<Integer, Integer> map = new HashMap<>();\r\n        for (int i1 = 1; i1 <= 1000000; i1++) {\n\t\t    if (i1 <= 20) map.put(i1, i1);\n\t\t    else {\n\t\t        int r1 = map.get(i1-1);\n\t\t        if (i1%10 != 0) {\n\t\t            int num = i1;\n\t\t\t\t\tint res = 0;\n\t\t\t\t\twhile (num > 0) {\n\t\t\t\t\t    int d = num%10;\n\t\t\t\t\t    res *= 10;\n\t\t\t\t\t    res += d;\n\t\t\t\t\t    num /=10;\n\t\t\t\t\t}\n\t\t\t\t\tint rev = res;\n\t\t            if (rev < i1) {\n\t\t                int r2 = map.get(rev);\n\t\t                map.put(i1, Math.min(r1, r2)+1);\n\t\t            } else {\n\t\t                map.put(i1, r1+1);\n\t\t            }\n\t\t        } else {\n\t\t            map.put(i1, r1+1);\n\t\t        }\n\t\t    }\n\t\t}\r\n        \r\n        int t = in.nextInt();\r\n        for (int i = 0; i < t; i++) {\r\n            int N = in.nextInt();\r\n            String text = \"Case #\" + (i+1) + \": \" + map.get(N) + \"\\n\";\r\n            output.write(text);\r\n            \r\n        }\r\n        output.close();\r\n    }\r\n}\r\n", "idx": "2317"}
{"func": "package googlejam2.p319;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n\r\npublic class CJ2015Round1BA {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader in = new BufferedReader(new FileReader(\"A-small-attempt1.in\"));\r\n\t\t//BufferedReader in = new BufferedReader(new FileReader(\"temp.txt\"));\r\n\t\tPrintWriter out  = new PrintWriter(new File(\"2015Round1BAout.txt\"));\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tInteger[] Ns = new Integer[T];\r\n\t\tfor(int a = 0; a < T; a++){\r\n\t\t\tNs[a] = Integer.parseInt(in.readLine());\r\n\t\t}\r\n\t\tList<Integer> okay = Arrays.asList(Ns);\r\n\t\tint N = Collections.max(okay);\r\n\t\tint[] nums = new int[N];\r\n\t\tfor(int i = 0; i < N; i++){\r\n\t\t\tif (i==0){\r\n\t\t\t\tnums[i]=1;\r\n\t\t\t} else {\r\n\t\t\t\tint num = i+1;\r\n\t\t\t\tint reverse=0;\r\n\t\t\t\twhile( num != 0 )\r\n\t\t\t    {\r\n\t\t\t        reverse = reverse * 10;\r\n\t\t\t        reverse = reverse + num%10;\r\n\t\t\t        num = num/10;\r\n\t\t\t    }\r\n\t\t\t\tif (reverse<i+1&&reverse>1&&String.valueOf(reverse).length()==String.valueOf(i+1).length()){\r\n\t\t\t\t\tnums[i]=Math.min(nums[i-1]+1,nums[reverse-1]+1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnums[i]=nums[i-1]+1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(int i = 0; i < T; i++){\r\n\t\t\tout.println(\"Case #\"+(i+1)+\": \"+nums[Ns[i]-1]);\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "2319"}
{"func": "package googlejam2.p324;\nimport java.util.*;\nimport java.io.*;\n\npublic class A {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(\n                        System.in\n                        )));\n        StringBuilder builder;\n        long dp[] = new long[1000005];\n        dp[0] = dp[1] = 1;\n        for (int i = 2; i < 20; i++) {\n            dp[i] = i;\n        }\n\n        for (int i = 20; i < dp.length; i++) {\n            int iLength = Integer.toString(i).length();\n            builder = new StringBuilder();\n            builder.append(i);\n            int rev = Integer.parseInt(builder.reverse().toString());\n            int revLength = Integer.toString(rev).length();\n            if (rev < dp.length && rev < i && iLength == revLength) {\n                dp[i] = Math.min(dp[i-1], dp[rev]) + 1;\n            } else {\n                dp[i] = dp[i-1] + 1;\n            }\n        }\n\n        int T = sc.nextInt();\n        for (int t = 1; t <= T; t++) {\n            int N = sc.nextInt();\n            System.out.printf(\"Case #%d: %d\\n\", t, dp[N]);\n        }\n    }\n}\n", "idx": "2324"}
{"func": "package googlejam2.p325;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.BufferedWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\n\r\n\r\npublic class Jam {\r\n\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tFileReader in = new FileReader(\"src/A-small-attempt1.in\");\r\n\t\tBufferedReader br = new BufferedReader(in);\r\n\t\tint T = Integer.parseInt(br.readLine());\r\n\t\t\t\t \r\n\t\tFile file = new File(\"src/output.txt\");\r\n\r\n\t\tFileWriter fw = new FileWriter(file.getAbsoluteFile());\r\n\t\tBufferedWriter bw = new BufferedWriter(fw);\t\t\r\n\t\tfor(int i = 0; i < T; i++){\r\n\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\tint[] table = new int[N+1];\r\n\t\t\ttable[1] = 1;\r\n\t\t\ttable[0] = 0;\r\n\t\t\tfor(int j = 1; j <= N; j++){\r\n\t\t\t\tint n = j;\n\t\t\t\tint reversed = 0;\n\t\t\t\twhile(n != 0){\n\t\t\t\t\treversed = reversed * 10 + n%10;\n\t\t\t\t\tn = n/10;\n\t\t\t\t}\n\t\t\t\tint rev = reversed;\r\n\t\t\t\tint n1 = table[j-1]+1;\r\n\t\t\t\tint n2 = Integer.MAX_VALUE-1;\r\n\t\t\t\tif(rev < j && Integer.toString(rev).length() == Integer.toString(j).length()){\r\n\t\t\t\t\tn2 = table[rev];\r\n\t\t\t\t}\r\n\t\t\t\ttable[j] = Math.min(n1, n2+1);\r\n\t\t\t}\r\n\t\t\tbw.write(\"Case #\" + Integer.toString(i+1)+\": \"+Integer.toString(table[N]));\r\n\t\t\tbw.newLine();\r\n\t\t}\r\n\t\tin.close();\r\n\t\tbw.close();\r\n\t}\r\n\t\r\n}\r\n", "idx": "2325"}
{"func": "package googlejam2.p327;\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\r\n\tpublic static int N;\r\n\tpublic static int[] dp1 = new int[1000010];\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint testCases = sc.nextInt();\r\n\t\t\r\n\t\tfor(int i=0;i<=1000005;i++){\r\n\t\t\t\r\n\t\t\tif(i <= 20){\r\n\t\t\t\tdp1[i] = i;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tdp1[i] = -1;\r\n\t\t}\r\n\t\t\r\n\t\tfor(int n=21;n<1000002;n++){\r\n\t\t\t\r\n\t\t\tif(n % 10 == 0){\r\n\t\t\t\tdp1[n] = dp1[n-1] + 1;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint reverse = 0;\r\n\t\t\tint n1 = n;\r\n\t\t\twhile( n1 != 0 )\r\n\t\t    {\r\n\t\t          reverse = reverse * 10;\r\n\t\t          reverse = reverse + n1%10;\r\n\t\t          n1 = n1/10;\r\n\t\t    }\r\n\r\n\t\t\tif(reverse < n ){\r\n\t\t\t\tdp1[n] = Math.min(dp1[n-1]+1, dp1[reverse]+1);\r\n\t\t\t}else{\r\n\t\t\t\tdp1[n] = dp1[n-1] + 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tfor(int test=1;test<=testCases;test++){\r\n\t\t\t\r\n\t\t\tN = sc.nextInt();\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\"+test+\": \"+dp1[N]);\r\n\t\t}\r\n\r\n\t}\r\n\r\n/*\tpublic static int dp(int a){\r\n\t\t\r\n\t\tif(a == N){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t\r\n\t\tif(dp1[a] == -1){\r\n\t\t\t\r\n\t\t\tint reverse = 0;\r\n\t\t\tint n = a;\r\n\t\t\twhile( n != 0 )\r\n\t\t    {\r\n\t\t          reverse = reverse * 10;\r\n\t\t          reverse = reverse + n%10;\r\n\t\t          n = n/10;\r\n\t\t    }\r\n\t\t\t\r\n\t\t\tif(reverse <= N && reverse > a){\r\n\t\t\t\tdp1[a] = Math.min(dp(a+1) + 1 , dp(reverse) + 1);\r\n\t\t\t}else{\r\n\t\t\t\tdp1[a] = (dp(a+1) + 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn dp1[a];\r\n\t}\r\n*/\t\r\n}\r\n", "idx": "2327"}
{"func": "package googlejam2.p328;\nimport java.io.File;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class CounterCulture {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tlong[] ret = new long[1000001];\n\t\tArrays.fill(ret, Long.MAX_VALUE);\n\t\tret[0] = 0;\n\t\tfor(int i=0; i<1000000; ++i){\n\t\t\tret[i+1] = Math.min(ret[i]+1, ret[i+1]);\n\t\t\tint rev = Integer.valueOf(new StringBuilder(Integer.toString(i)).reverse().toString());\n\t\t\tif(rev <= 1000000) {\n\t\t\t\tret[rev] = Math.min(ret[i]+1, ret[rev]);\n\t\t\t}\n\t\t}\n\t\tlong[] smallAnswer = ret;\r\n\r\n\t\tScanner s = new Scanner(new File(\"A-small.in\"));\r\n\r\n\t\tint caseNum = s.nextInt();\r\n\t\tfor (int t = 1; t <= caseNum; ++t) {\r\n\t\t\tint n = s.nextInt();\r\n\r\n\t\t\tSystem.out.println(\"Case #\" + t + \": \" + smallAnswer[n]);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "2328"}
{"func": "package googlejam2.p330;\nimport java.util.*;\nimport java.io.*;\n\npublic class CounterCulture {\n\tprivate static List<Integer> res;\n\tprivate static int up = 1;\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tPrintStream out = System.out;\n\t\tres = new ArrayList<Integer>();\n\t\tres.add(0, 0);\n\t\tres.add(1, 1);\n\t\t\n\t\tint caseNum = in.nextInt();\n\t\tfor (int i = 1; i <= caseNum; i++) {\n\t\t\tif (!in.hasNextInt()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint numN = in.nextInt();\n\t\t\tint result = 0;\n\t\t\tif (numN <= up) {\n\t\t\t\tresult = res.get(numN);\n\t\t\t}\n\t\t\telse {\n\t\t\t\twhile (up < numN) {\n\t\t\t\t\tint temp = up;\n\t\t\t\t\tif (up > reverseInt(up+1)) {\n\t\t\t\t\t\tif (reverseInt(reverseInt(up+1)) == up+1){\n\t\t\t\t\t\t\ttemp = reverseInt(up+1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint tempRes = Math.min(res.get(up)+1, res.get(temp)+1);\n\t\t\t\t\tres.add(up+1, tempRes);\n\t\t\t\t\tup++;\n\t\t\t\t}\n\t\t\t\tresult = res.get(numN);\n\t\t\t}\n\t\t\tout.printf(\"Case #%d: %d\\n\", i, result);\n\t\t\t\n\t\t}\n\t}\n\t\n\tprivate static int reverseInt(int n) {\n\t\tStringBuffer str = new StringBuffer(new Integer(n).toString());\n\t\treturn new Integer(str.reverse().toString());\n\t}\n}", "idx": "2330"}
{"func": "package googlejam2.p332;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\n\r\n\r\npublic class CounterCulture {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tString inputFile = \"src/CounterCulture.in\";\r\n\t\tString outputFile = \"src/CounterCulture.out\";\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(new File(inputFile)));\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(new File(outputFile)));\n\t\tString line = br.readLine();\n\t\tint N = Integer.parseInt(line);\n\t\tint id = 1;\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\tint n = Integer.parseInt(line);\n\t\t\tint[] times = new int[n+1];\n\t\t\ttimes[1] = 1;\n\t\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\t\tif (times[i] == 0) {\n\t\t\t\t\ttimes[i] = times[i-1] + 1;\n\t\t\t\t}\n\t\t\t\telse times[i] = Math.min(times[i-1] + 1, times[i]);\n\t\t\t\tint n1 = i;\n\t\t\t\tint reverse = 0;\n\t\t\t\twhile( n1 != 0 ) {\n\t\t\t\t  reverse = reverse * 10;\n\t\t\t\t  reverse = reverse + n1%10;\n\t\t\t\t  n1 = n1/10;\n\t\t\t\t}\n\t\t\t\tint rev = reverse;\n\t\t\t\tif (rev > i && rev <= n) {\n\t\t\t\t\ttimes[rev] = times[i] +1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tint num = times[n];\n\t\t\tpw.println(\"Case #\"+id+\": \"+num);\n\t\t\tid++;\n\t\t}\n\t\tbr.close();\n\t\tpw.close();\r\n\t\t// CounterCulture.minTimes(100) ;\r\n\t}\r\n}\r\n", "idx": "2332"}
{"func": "package googlejam2.p334;\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\npublic class AA {\r\n\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tScanner in = new Scanner(new File(\"A.in\"));\r\n\t\tFileWriter out = new FileWriter(\"aout.txt\");\r\n\t\t\r\n\t\tint T = in.nextInt();\r\n\t\t\r\n\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tint n = N;\r\n\t\t\tint r = 1;\r\n\t\t\tArrayList<Integer> a = new ArrayList<Integer>();\r\n\t\t\tboolean[] b = new boolean[1000001];\r\n\t\t\ta.add(new Integer(1));\r\n\t\t\tb[1] = true;\r\n\t\t\tboolean c = true;\r\n\t\t\tif (N <= 20) r = N;\r\n\t\t\telse {\r\n\t\t\t\twhile (c) {\r\n\t\t\t\t\tr++;\r\n\t\t\t\t\tint l = a.size();\r\n\t\t\t\t\tfor (int j = 0; j < l; j++) {\r\n\t\t\t\t\t\tInteger k = a.remove(0);\n\t\t\t\t\t\tString s1 = k.toString();\n\t\t\t\t\t\tString o = \"\";\n\t\t\t\t\t\t//if (n.intValue() % 10 > 0)\n\t\t\t\t\t\t\tfor (int i1 = 0; i1 < s1.length();) {\n\t\t\t\t\t\t\t\to = s1.substring(i1, ++i1) + o;\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\tInteger rev = new Integer(Integer.parseInt(o));\r\n\t\t\t\t\t\tif (!b[rev.intValue()]) {\r\n\t\t\t\t\t\t\tb[rev] = true;\r\n\t\t\t\t\t\t\ta.add(rev);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!b[++k]) {\r\n\t\t\t\t\t\t\tb[k] = true;\r\n\t\t\t\t\t\t\ta.add(k);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (rev == N || k == N) {\r\n\t\t\t\t\t\t\tc = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tString s = \"Case #\" + i + \": \" + r + \"\\n\";\r\n\t\t\tSystem.out.print(s);\r\n\t\t\tout.write(s);\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "2334"}
{"func": "package googlejam2.p335;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\nimport java.text.*;\r\npublic class Main\r\n{\r\npublic static void main(String[] args)throws java.lang.Exception\r\n{\r\nBufferedReader in = new BufferedReader(new FileReader(\"A-small-attempt2.in\"));\r\nPrintWriter out=new PrintWriter(\"output.txt\");\r\nint t,x1,i,j,n,n1,cnt,v;\r\nString str1,str2;\r\n\r\nt=Integer.parseInt(in.readLine());\r\n \r\n \r\nfor(x1=0;x1<t;x1++)\r\n{\r\nn=Integer.parseInt(in.readLine());\r\n\r\n\r\nint[] steps=new int[n+1];\r\n\r\nsteps[1]=1;\r\n\r\nfor(i=2;i<=n;i++)\r\n\tsteps[i]=1000001;\r\n\r\n\r\n\r\nfor(j=2;j<=n;j++)\r\n{\r\nstr1=String.valueOf(j);\r\n\r\nstr2=\"\";\r\n\r\nfor(i=str1.length()-1;i>=0;i--)\r\n{\r\nstr2+=str1.charAt(i);\r\n}\r\n\r\nv=Integer.parseInt(str2);\r\n\r\nstr2=String.valueOf(v);\r\n\r\nif(v<j && v>=1 && str1.length()==str2.length())\r\n\t{\r\n\tsteps[j]=Math.min(steps[v]+1,steps[j-1]+1);\r\n\t}\r\nelse\r\n\tsteps[j]=steps[j-1]+1;\r\n}\r\n\r\nout.println(\"Case #\"+(x1+1)+\": \"+steps[n]);\r\n\r\n}\r\n\r\nout.flush();\r\nout.close();\r\n}\r\n}\r\n\r\n", "idx": "2335"}
{"func": "package googlejam2.p338;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class Main {\r\npublic static void main(String [] args)throws Exception{\r\n\tBufferedReader br=new BufferedReader(new FileReader(\"C:/users/abhishek/Desktop/input.txt\"));\r\n\tFileWriter f=new FileWriter(\"C:/users/abhishek/Desktop/output.txt\");\r\n\tString newLine=System.getProperty(\"line.separator\");\r\n\tint t=Integer.parseInt(br.readLine());\r\n\tint array[]=new int[1000005];\r\n\tArrays.fill(array,Integer.MAX_VALUE);\r\n\tarray[1]=1;\r\n\tfor(int i=2;i<=1000000;i++){\r\n\tString str=String.valueOf(i);\r\n\tStringBuilder sb=new StringBuilder(str);\r\n\tstr=sb.reverse().toString();\r\n\tint temp=Integer.parseInt(str);\r\n\tarray[i]=Math.min(array[i],i);\r\n\tarray[i]=Math.min(array[i-1]+1,array[i]);\r\n\tif(temp<=1000001){\r\n\tarray[temp]=Math.min(array[temp],array[i]+1);\r\n\t}\r\n\t}\r\n\tSystem.out.println(array[21]);\r\n\tfor(int test=1;test<=t;test++){\r\n\tint n=Integer.parseInt(br.readLine());\t\r\n\tf.write(\"Case #\" + test + \": \" + array[n] + newLine);\r\n\t}\r\n\tf.close();\r\n}\r\n}", "idx": "2338"}
{"func": "package googlejam2.p342;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.math.BigInteger;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\nimport java.util.TreeMap;\r\n\r\n\r\npublic class CounterCulture {\r\n\tpublic static void main(String[] args){\r\n\t\tFile a = new File(\"A-small-attempt2 (1).in\");\r\n\t\tScanner input = null;\r\n\t\ttry {\r\n\t\t\tinput = new Scanner(a);\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t//Scanner input = new Scanner(System.in);\r\n\t\t\r\n\t\tFile b = new File(\"A-output.txt\");\r\n\t\tFileWriter fw = null;\r\n\t\ttry {\r\n\t\t\tfw = new FileWriter(b);\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tint number = input.nextInt();\r\n\t\tint cases = number;\r\n\t\tint[] answers = new int[1000001];\r\n\t\t\r\n\t\tint index = 1;\r\n\t\tint count = 1;\r\n\t\tanswers[1] = 1;\r\n\t\twhile(index < answers.length){\r\n\t\t\tint toBeReversed = index;\r\n\t\t\tint reversedCount = 0;\r\n\t\t\twhile (toBeReversed != 0) {\r\n\t\t\t\treversedCount = reversedCount * 10 + toBeReversed  % 10;\r\n\t\t\t\ttoBeReversed  = toBeReversed  / 10;   \r\n\t\t\t}\r\n\t\t\tindex++;\r\n\t\t\tcount++;\r\n\t\t\tif(reversedCount > index && reversedCount < answers.length){\r\n\t\t\t\tanswers[reversedCount] = count;\r\n\t\t\t}\r\n\t\t\tif(index < answers.length){\r\n\t\t\t\tif (count < answers[index] || answers[index] == 0){\r\n\t\t\t\t\tanswers[index] = count;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcount = answers[index];\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t}\r\n\t\t\r\n\t\twhile(number > 0){\r\n\t\t\tint n = input.nextInt();\r\n\t\t\tint result = answers[n];\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tfw.write(\"Case #\" + (cases - number + 1) + \": \" + result + \"\\n\");\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tnumber--;\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tfw.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "2342"}
{"func": "package googlejam2.p346;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Cup2 {\r\n\tstatic boolean flag=false;\r\n \r\n\tstatic HashSet<String> foodlib ;\r\n\r\n\t\r\n\tpublic static void main (String [] args) throws IOException {\r\n\t\t\tScanner sc = new Scanner(new File(\"A-small-attempt0.in\"));\r\n\t\t \tPrintWriter out = new PrintWriter(\"r1.txt\");\r\n\t\t\t int T;\r\n\t\t\t int [] dist = new int[1000001];\r\n\t\t     int pt=1;\r\n\t\t\r\n\t\t    dist[1]=1;\r\n\t\t     while (pt<1000000)\r\n\t\t     {\r\n\t\t    \t if (dist[pt+1]==0 || dist[pt+1]>dist[pt]+1) {\r\n\t\t    \t\t dist[pt+1] =dist[pt]+1;\r\n\t\t    \t\t// System.out.println(\"case1:pt=\"+pt+\" dist=\"+dist[pt+1]);\r\n\t\t    \t \r\n\t\t    \t }\n\t\t\t\tchar[] nchar=String.valueOf(pt).toCharArray();\n\t\t\t\tint val=0;\n\t\t\t\tfor (int i=0;i<nchar.length;i++){\n\t\t\t\t\tint cval=nchar[i]-'0';\n\t\t\t\t\tfor (int j=1;j<=i;j++)\n\t\t\t\t\t\tcval *=10;\n\t\t\t\t\tval+=cval;\n\t\t\t\t}\r\n\t\t    \t \r\n\t\t    \t int y = val;\r\n\t\t    \t if (dist[y]==0 || dist[y]>dist[pt]+1)\r\n\t\t    \t {\r\n\t\t    \t\t dist[y]=dist[pt]+1;\r\n\t\t    \t }\r\n\t\t   // \t System.out.println(\"case2:pt=\"+pt+\" dist=\"+dist[pt+1]);\r\n\t\t    \t pt++;\r\n\t\t     }\r\n\t\t  \r\n\t\t\t  T=Integer.parseInt(sc.nextLine());\r\n\t\t\t  int count=1;\r\n\r\n\t\t\r\n\t\t\t  while (count<=T)\r\n\t\t\t  {     \t \r\n\t\t\t\t  int N = sc.nextInt();\r\n\t\r\n\t\t\t//\t   out.print(\"Case #\"+count+\": \");\r\n\t\t\t\t  out.println(\"Case #\"+count+\": \"+dist[N]);\r\n\t\t\t\t   \r\n\t\t\t\t   count++;\r\n\t\t\t  } //end one case\r\n\t\t\tout.flush();\r\n\t\t} // end main\r\n\r\n}\r\n", "idx": "2346"}
{"func": "package googlejam2.p347;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.HashSet;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner scanner = new Scanner(new File(\"input.txt\"));\r\n\t\tPrintStream ps = new PrintStream(new File(\"output.txt\"));\r\n\t\tint T = Integer.parseInt(scanner.nextLine());\r\n\t\tHashSet<Long> set = new HashSet<Long>();\r\n\t\tHashSet<Long> newSet = new HashSet<Long>();\r\n\t\tHashSet<Long> tried = new HashSet<Long>();\r\n\t\tHashSet<Long> temp = null;\r\n\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\tlong N = Long.parseLong(scanner.nextLine());\r\n\t\t\tint count = 1;\r\n\t\t\tset.clear();\r\n\t\t\tnewSet.clear();\r\n\t\t\ttried.clear();\r\n\t\t\tset.add(1L);\r\n\t\t\tboolean found = N == 1;\r\n\t\t\tfor (; !found; count++) {\r\n\t\t\t\tfor (Long num : set) {\r\n\t\t\t\t\tLong reverse = Long.parseLong(new StringBuilder(num\r\n\t\t\t\t\t\t\t.toString()).reverse().toString());\r\n\t\t\t\t\tif (reverse == N || num + 1 == N) {\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (reverse > num && !tried.contains(reverse)) {\r\n\t\t\t\t\t\t\ttried.add(reverse);\r\n\t\t\t\t\t\t\tnewSet.add(reverse);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!tried.contains(num + 1)) {\r\n\t\t\t\t\t\t\ttried.add(num + 1);\r\n\t\t\t\t\t\t\tnewSet.add(num + 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tset.clear();\r\n\t\t\t\ttemp = set;\r\n\t\t\t\tset = newSet;\r\n\t\t\t\tnewSet = temp;\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\tString output = \"Case #\" + i + \": \" + count;\r\n\t\t\tSystem.out.println(output);\r\n\t\t\tps.println(output);\r\n\t\t}\r\n\t\tps.flush();\r\n\t\tps.close();\r\n\t\tscanner.close();\r\n\t}\r\n}\r\n", "idx": "2347"}
{"func": "package googlejam2.p359;\nimport java.util.Scanner;\nimport java.io.*;\nimport java.util.*;\n\npublic class ASmall {\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner in = new Scanner(new File(\"A-small-attempt2.in\"));\n\t\tPrintWriter out = new PrintWriter(new File(\"outputASmall.txt\"));\n\t\tint t = in.nextInt();\n\t\tfor (int testn = 1; testn <= t; testn++) {\n\t\t\tint [] a  = new int[1000001];\n\t\t\ta[0] = 1;\n\t\t\tint n = in.nextInt();\n\t\t\tint ans = 0;\t\t\n\t\t\tLinkedList<Integer> d = new LinkedList<Integer>();\n\t\t\td.add(1);\n\t\t\twhile (!d.isEmpty())\n\t\t\t\n\t\t\t{\n\t\t\t\tint k = d.poll();\n\t\t\t\t//System.out.println(k);\n\t\t\t\tif (k == n) { /*System.out.println(k);*/ ans = a[n - 1]; break; }\n\t\t\t\tint k1 = k;\n\t\t\t\tint cur = 0;\n\t\t\t\twhile (k1 > 0)\n\t\t\t\t{\n\t\t\t\t\tcur = cur * 10 + (k1 % 10);\n\t\t\t\t\tk1 = k1 / 10;\n\t\t\t\t}\n\t\t\t\tint r = cur;\n\t\t\t\tif (r <= n && a[r - 1] == 0) { a[r - 1] = a[k - 1] + 1; d.add(r); }\n\t\t\t\tif (a[k + 1] == 0) { a[k] = a[k - 1] + 1; d.add(k + 1); }\n\t\t\t\t\n\t\t\t}\n\t\t\tout.println(\"Case #\" + testn + \": \" + ans);\n\t\t\t//System.out.println(ans);\n\t\t}\n\t\t//System.out.println(reverse(11112220));\n\t\tin.close();\n\t\tout.close();\n\t}\n\t\n\t\n}\n", "idx": "2359"}
{"func": "package googlejam2.p364;\nimport java.io.PrintWriter;\r\nimport java.math.BigInteger;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\nclass Main {\r\n\r\n\tpublic static int[] ans = new int[10000002];\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tArrays.fill(ans, -1);\r\n\t\tans[0] = 1;\r\n\t\tans[1] = 1;\r\n\t\tfor (int i1 = 1; i1 <= 10000000; i1++) {\n\t\t\tif (ans[i1 + 1] == -1)\n\t\t\t\tans[i1 + 1] = ans[i1] + 1;\n\t\t\telse{\n\t\t\t\tans[i1+1] = Math.min(ans[i1+1] , ans[i1]+1);\n\t\t\t}\n\t\t\tint n = i1;\n\t\t\tint reverse = 0;\n\t\t\twhile (n != 0) {\n\t\t\t\treverse = reverse * 10;\n\t\t\t\treverse = reverse + n % 10;\n\t\t\t\tn = n / 10;\n\t\t\t}\n\t\t\tint rev = reverse;\n\t\t\tif (rev <= 10000000) {\n\t\t\t\tif (ans[rev] == -1) {\n\t\t\t\t\tans[rev] = ans[i1] + 1;\n\t\t\t\t} else {\n\t\t\t\t\tif(ans[i1] < ans[rev])\n\t\t\t\t\t\tSystem.out.println(i1 + \": \" + ans[i1] + \"  \" + ans[rev]);\n\t\t\t\t\tans[rev] = Math.min(ans[i1] + 1, ans[rev]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\r\n\t\tSystem.out.println(\"end\");\r\n\t\tPrintWriter printer = new PrintWriter(\"ans.txt\", \"UTF-8\");\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint tc = sc.nextInt();\r\n\t\tfor (int i = 1; i <= tc; i++) {\r\n\t\t\tint input = sc.nextInt();\r\n\t\t\tprinter.println(\"Case #\" + i + \": \" + ans[input]);\r\n\t\t}\r\n\t\tprinter.close();\r\n\t\tsc.close();\r\n\t}\r\n\r\n}\r\n", "idx": "2364"}
{"func": "package googlejam2.p368;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.LinkedList;\nimport java.util.List;\n\n/**\n * Created by robrob on May 02, 2015.\n */\npublic class Round1BA {\n    public static int[] visited;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        LinkedList<Integer> queue = new LinkedList<Integer>();\n        int tt = Integer.parseInt(br.readLine().trim());\n        for (int i = 1; i <= tt; i++) {\n            int question = Integer.parseInt(br.readLine().trim());\n            visited = new int[question + 1];\n            visited[1] = 1;\n            queue.addLast(1);\n            if (question == 1) {\n                System.out.println(\"Case #\" + i + \": 1\");\n                continue;\n            }\n            while (!queue.isEmpty()) {\n                Integer j = queue.pollFirst();\n                if (visited[j+1] == 0) {\n                    visited[j+1] = visited[j] + 1;\n                    queue.addLast(j+1);\n                }\n\t\t\t\tString s = String.valueOf(j);\n\t\t\t\tint index = s.length() - 1;\n\t\t\t\twhile (s.charAt(index) == '0') index--;\n                int flipped = Integer.parseInt(new StringBuilder(s.substring(0, index+1)).reverse().toString());\n                if (flipped <= question && visited[flipped] == 0) {\n                    visited[flipped] = visited[j] + 1;\n                    queue.addLast(flipped);\n                }\n                if (j+1 == question || flipped == question) break;\n            }\n            queue.clear();\n            System.out.println(\"Case #\" + i + \": \" + visited[question]);\n        }\n        br.close();\n    }\n\n}\n", "idx": "2368"}
{"func": "package googlejam2.p373;\nimport java.io.*;\nimport java.util.*;\n\nclass Main\n{\n\tstatic int dp[]=new int[1000002];\n\n\n\tpublic static void main(String args[]) throws Exception\n\t{\n\t\t// BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\t// PrintWriter pw = new PrintWriter(System.out);\n\n\t\tBufferedReader br = new BufferedReader(new \tFileReader(\"in.in\"));\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"try.out\"));\n\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tint TT = T;\n\t\tArrays.fill(dp,Integer.MAX_VALUE);\n\t\tdp[1]=1;\n\n\t\tfor (int i = 1;i<dp.length-1;i++)\n\t\t{\n\t\t\tdp[i+1]=Math.min(dp[i]+1,dp[i+1]);\n\t\t\tdp[reverse(i)]=Math.min(dp[i]+1,dp[reverse(i)]);\n\t\t}\n\n\n\t\twhile (T-- > 0)\n\t\t{\n\t\t\tint goal = Integer.parseInt(br.readLine());\n\t\t\t\n\n\n\n\t\t\tpw.println(\"Case #\"+(TT-T)+\": \"+dp[goal]);\n\t\t\t// System.out.println(\"FOOBAR\"); \t\n\t\t}\n\n\t\tpw.close();\n\t}\n\n\n\tstatic int reverse(int str)\n\t{\n\t\tStringBuilder sb = new StringBuilder(Integer.toString(str));\n\t\tsb.reverse();\n\t\treturn Integer.parseInt(sb.toString());\n\t}\n\n}", "idx": "2373"}
{"func": "package googlejam2.p374;\nimport java.util.Scanner;\n\n/**\n * @author kumaryog\n *\n */\nclass Test {\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\n\t\tint t = input.nextInt();\n\n\t\tint[] arr = new int[1000001];\n\t\tfor (int j = 1, cnt = 1; j <= 1000000; ++j, ++cnt) {\n\t\t\tif (arr[j] > 0) {\n\t\t\t\tif (cnt < arr[j]) {\n\t\t\t\t\tarr[j] = cnt;\n\t\t\t\t} else {\n\t\t\t\t\tcnt = arr[j];\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tarr[j] = cnt;\n\t\t\tint n = j;\n\t\t\tint r1 = 0;\n\t\t\twhile (n != 0) {\n\t\t\t\tr1 = r1 * 10;\n\t\t\t\tr1 = r1 + n % 10;\n\t\t\t\tn = n / 10;\n\t\t\t}\n\t\t\tint r = r1;\n\t\t\tif (r > j) {\n\t\t\t\tarr[r] = cnt + 1;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i < t; ++i) {\n\t\t\tint n = input.nextInt();\n\n\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + arr[n]);\n\t\t}\n\n\t\tinput.close();\n\t}\n}\n", "idx": "2374"}
{"func": "package googlejam2.p376;\nimport java.util.Scanner;\nimport java.util.Arrays;\nclass cult\n{\n\n    public static void main(String[] args)\n    {\n\tScanner in=new Scanner(System.in);\n\tint ncase=in.nextInt();\n\tfor(int icase=0;icase<ncase;icase++){\n\t    int icase1=icase+1;\n\t    int N=in.nextInt();\t    \n\t    int count=0;\n\t    int [] num=new int[N+1];\n\t    int iR=0;\n\n\t    if(N<=20){\n\t\tcount=N;\n\t    }else{\n\t\tfor(int i=1;i<=20;i++)\n\t\t    num[i]=i;\n\n\t\tfor(int i=21;i<=N;i++){\n\t\t    String str=Integer.toString(i);\n\t\t\tiR=Integer.valueOf(new StringBuffer(str).reverse().toString());\n\t\t    int min=i;\n\n\t\t    if(iR<i&&i%10!=0){\n\n\t\t\tif(num[iR]+1<min)\n\t\t\t    min=num[iR]+1;\n\t\t    }\n\n\t\t    for(int j=i-1;j>=i-10;j--)\n\t\t\tif(num[j]+(i-j)<min){\n\t\t\t    min=num[j]+(i-j);\n\t\t\t}\n\t\t    num[i]=min;\n\t\t}\n\t\tcount=num[N];\n\t    }\n\n\n\t    System.out.println(\"Case #\"+icase1+\":\"+\" \"+count);\n\t}\n    }\n}\n", "idx": "2376"}
{"func": "package googlejam2.p382;\n/*\r\n * @author Mr E\r\n */\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Codejam1BA {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n\r\n//        Scanner s = new Scanner(System.in);\r\n        PrintWriter writer = new PrintWriter(\"as.out\");\r\n        Scanner s = new Scanner(new File(\"as.in\"));\r\n        int arr[]=new int[10000001];\r\n        for (int i = 1; i < 11; i++) {\r\n            arr[i]=i;\r\n        }\r\n        String str = \"\";\r\n        String str2 = \"\";\r\n        StringBuilder sb;\r\n        for (int i = 11; i < 10000001; i++) {\r\n            str=i+\"\";\r\n            sb = new StringBuilder(str);\r\n            int ri = Integer.parseInt(sb.reverse().toString());\r\n            str2 = ri + \"\";\r\n            if(str.length()==str2.length() && ri<i){\r\n                arr[i]=Math.min(arr[i-1], arr[ri])+1;\r\n            }else{\r\n                arr[i]=arr[i-1]+1;\r\n            }\r\n        }\r\n        int testcase = s.nextInt();\r\n        for (int i = 0; i < testcase; i++) {\r\n            int n = s.nextInt();\r\n\r\n//            long c = 1;\r\n//            long x = 1;\r\n//            String str = \"\";\r\n//            String str2 = \"\";\r\n//            StringBuilder sb;\r\n//            while (1 != n) {\r\n//                str = n + \"\";\r\n//                sb = new StringBuilder(str);\r\n//                long rn = Long.parseLong(sb.reverse().toString());\r\n//                str2 = rn + \"\";\r\n//                if (rn < n && rn > 1 && str.length() == str2.length()) {\r\n//                    n = rn;\r\n//                    c++;\r\n//                } else {\r\n//                    n--;\r\n//                    c++;\r\n//                }\r\n//            }\r\n//            System.out.println(\"Case #\" + (i + 1) + \": \" + arr[n]);\r\n            writer.println(\"Case #\" + (i + 1) + \": \" + arr[n]);\r\n        }\r\n        writer.close();\r\n\r\n    }\r\n\r\n//    public static long min(long x) {\r\n//        if (x == 1) {\r\n//            return 1;\r\n//        } else {\r\n//            String str = x + \"\";\r\n//            StringBuilder sb = new StringBuilder(str);\r\n//            long rn = Long.parseLong(sb.reverse().toString());\r\n//            String str2 = rn + \"\";\r\n//            if (rn < n && rn > 1 && str.length() == str2.length()) \r\n//        }\r\n//    }\r\n}\r\n", "idx": "2382"}
{"func": "package googlejam2.p386;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\npublic class Counter {\n\n\tpublic static void main(String[] args) {\n\t\tString input = \"/Users/bhavesh/Downloads/A-small-attempt1.in\";\n\t\tString output = \"/Users/bhavesh/Downloads/output\";\n\n\t\ttry {\n\t\t\tint a[]= new int[1000001];\n\t\t\tint n;\n\t\t    for(int i=0;i<=1000000;i++){\n\t\t    \ta[i]=-1;\n\t\t    }\n\n\t\t    for(int i = 1; i<=1000000;i++)\n\t\t    {\n\t\t        if(i<=10)\n\t\t        {\n\t\t            a[i]=i;\n\t\t            continue;\n\t\t        }\n\t\t\t\tint n1 = i;\n\t\t\t\tint reverse = 0;\n\t\t\t\twhile (n1 != 0) {\n\t\t\t\t\treverse = reverse * 10;\n\t\t\t\t\treverse = reverse + n1 % 10;\n\t\t\t\t\tn1 = n1 / 10;\n\t\t\t\t}\n\t\t        int ri = reverse;\n\t\t        if(ri < i && i%10!=0)\n\t\t            a[i]= (a[i-1]+1< a[ri] + 1)?a[i-1]+1:a[ri] + 1;\n\t\t        else\n\t\t            a[i]= a[i-1]+1;\n\t\t    }\n\t\t\tBufferedReader br = new BufferedReader(new FileReader(input));\n\t\t\tPrintWriter pw = new PrintWriter(output);\n\n\t\t\tint t = Integer.parseInt(br.readLine().trim());\n\n\t\t\tint i = 1;\n\t\t\twhile (i <= t) {\n\t\t\t\tint num = Integer.parseInt(br.readLine());\n\n\t\t\t\tString op = \"Case #\" + i + \": \" +a[num];\n\t\t\tSystem.out.println(op);\n\t\t\t\tpw.print(op);\n\t\t\t\tpw.println();\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\tpw.flush();\n\t\t\tpw.close();\n\t\t\tbr.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n}", "idx": "2386"}
{"func": "package googlejam3.p001;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class A {\n\t\n\tPrintWriter out;\n\t\n\tint R, C, W;\n\t\n\tpublic static int __ID = 0;\n\tpublic static boolean __ERROR = false;\n\t\n\tpublic static void main(String[] args) {\n\t\tint pN = 1;\n\t\tif (args.length == 0) {\n\t\t\ttry {\n\t\t\t\tSystem.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + \".in\")));\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t} else {\n\t\t\tpN = Integer.parseInt(args[0]);\n\t\t}\n\t\tPrintStream out = System.out;\n\t\tSystem.setOut(null);\n\t\tScanner sc = new Scanner(System.in);\n\t\tfinal int caseN = sc.nextInt();\n\t\tfinal A[] solvers = new A[caseN];\n\t\tStringWriter[] outs = new StringWriter[caseN];\n\t\tfor (int i = 0; i < caseN; i++) {\n\t\t\tsolvers[i] = new A();\n\t\t\touts[i] = new StringWriter();\n\t\t\tsolvers[i].out = new PrintWriter(outs[i]);\n\t\t\tsolvers[i].out.printf(\"Case #%d: \", i + 1);\n\t\t\tA r = solvers[i];\n\t\t\tr.R = sc.nextInt();\n\t\t\tr.C = sc.nextInt();\n\t\t\tr.W = sc.nextInt();\n\t\t}\n\t\tThread[] ts = new Thread[pN];\n\t\tfor (int i = 0; i < pN; i++) {\n\t\t\tts[i] = new Thread() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor (;;) {\n\t\t\t\t\t\tint id;\n\t\t\t\t\t\tsynchronized (A.class) {\n\t\t\t\t\t\t\tif (__ID == caseN) return;\n\t\t\t\t\t\t\tid = __ID++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tA r = solvers[id];\n\t\t\t\t\t\t\tint res = r.R * (r.C / r.W);\n\t\t\t\t\t\t\tif (r.C % r.W > 0) res++;\n\t\t\t\t\t\t\tres += r.W - 1;\n\t\t\t\t\t\t\tr.out.println(res);\n\t\t\t\t\t\t} catch (RuntimeException e) {\n\t\t\t\t\t\t\t__ERROR = true;\n\t\t\t\t\t\t\tSystem.err.printf(\"Error in case %d:%n\", id + 1);\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsolvers[id].out.flush();\n\t\t\t\t\t\tsolvers[id] = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tts[i].start();\n\t\t}\n\t\tfor (int i = 0; i < pN; i++) {\n\t\t\ttry {\n\t\t\t\tts[i].join();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < caseN; i++) {\n\t\t\tout.print(outs[i].toString());\n\t\t}\n\t\tif (__ERROR) out.printf(\"%nError occured!!!%n\");\n\t}\n\t\n}\n", "idx": "3001"}
{"func": "package googlejam3.p002;\nimport java.io.BufferedWriter;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tScanner scanner = new Scanner(new FileInputStream(\"input.txt\"));\r\n\t\t\tscanner.useLocale(Locale.ENGLISH);\r\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"output.txt\"));\r\n\t\t\tint tests = scanner.nextInt();\r\n\t\t\tfor (int i = 0; i < tests; i++) {\r\n\t\t\t\tint r = scanner.nextInt();\r\n\t\t\t\tint c = scanner.nextInt();\r\n\t\t\t\tint w = scanner.nextInt();\r\n\t\t\t\tint perRow = c / w;\r\n\t\t\t\tint result = r*perRow;\r\n\t\t\t\tif (c % w == 0) {\r\n\t\t\t\t\tresult--;\r\n\t\t\t\t}\r\n\t\t\t\tresult += w;\r\n\t\t\t\tout.write(\"Case #\" + (i + 1) + \": \" + result + \"\\n\");\r\n\t\t\t}\r\n\t\t\tout.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// ????\r\n\t\t} catch (IOException e) {\r\n\t\t\t// ????\r\n\t\t}\r\n\t}\r\n}", "idx": "3002"}
{"func": "package googlejam3.p011;\nimport java.util.*;\r\n\r\npublic class a {\r\n\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\tScanner stdin = new Scanner(System.in);\r\n\t\tint numCases = stdin.nextInt();\r\n\r\n\t\tfor (int loop=1; loop<=numCases; loop++) {\r\n\r\n\t\t\tint R = stdin.nextInt();\r\n\t\t\tint C = stdin.nextInt();\r\n\t\t\tint W = stdin.nextInt();\r\n\r\n\t\t\tint res=0;\r\n\r\n\t\t\tif (C%W == 0) {\r\n\t\t\t\tres = R*(C/W) + W - 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tres = R*(C/W) + W;\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.println(\"Case #\"+loop+\": \"+res);\r\n\r\n\t\t}\r\n\t}\r\n}", "idx": "3011"}
{"func": "package googlejam3.p016;\n\n\nimport java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\nimport static java.util.Arrays.deepToString;\n\npublic class codejam2015_1C_A {\n    static PrintWriter out = null;\n    static FileInputStream in = null;\n    Scanner sc;\n\n    int N;\n    Integer R, C, W;\n\n    public static void main(String[] args) {\n        try {\n            System.setIn(new BufferedInputStream(new FileInputStream(args.length > 0 ? args[0] : (codejam2015_1C_A.class.getName() + \".in\"))));\n        } catch (Exception e) {\n        }\n\t\tcodejam2015_1C_A r = new codejam2015_1C_A();\n        try {\n\t\t    codejam2015_1C_A.in = new FileInputStream(\"src/com/resources/smallInput.txt\");\n\t\t    codejam2015_1C_A.out = new PrintWriter(\"src/com/resources/output.txt\");\n\t\t} catch (FileNotFoundException e) {\n\t\t    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.\n\t\t}\n\t\tr.sc = new Scanner(codejam2015_1C_A.in);\n\t\tint caseN = r.sc.nextInt();\n\t\tfor (int caseID = 1; caseID <= caseN; caseID++) {\n\t\t    r.R = r.sc.nextInt();\n\t\t\tr.C = r.sc.nextInt();\n\t\t\tr.W = r.sc.nextInt();\n\t\t    codejam2015_1C_A.out.printf(\"Case #%d: \", caseID);\n\t\t    System.out.printf(\"Case #%d: \", caseID);\n\t\t    long solution=0;\n\t\t\tsolution += (r.R-1)*(r.C/r.W);\n\t\t\t\n\t\t\tsolution += (r.C-1)/r.W;\n\t\t\tsolution += r.W;\n\t\t\t\n\t\t\tcodejam2015_1C_A.out.println(solution);\n\t\t\tSystem.out.println(solution);\n\t\t    System.out.flush();\n\t\t}\n\t\tcodejam2015_1C_A.out.close();\n    }\n}\n", "idx": "3016"}
{"func": "package googlejam3.p017;\n/**\n * Created by wei on 4/11/15.\n */\nimport java.io.*;\nimport java.util.*;\n\n\npublic class SolutionA {\n    static Scanner scanner = new Scanner (System.in);\n    static PrintStream out = System.out;\n\n    public static void main(String[] args) {\n        long T = Long.valueOf(scanner.next());\n\n        for (long i = 1; i <= T; ++i) {\n            System.out.print(\"Case #\" + i + \": \");\n            long R = scanner.nextLong(), C = scanner.nextLong(), W = scanner.nextLong();\n\t\t\t\n\t\t\tlong ans = (R - 1) * C;\n\t\t\t\n\t\t\tif (C % W == 0) {\n\t\t\t    out.println (ans + C/W - 1 + W);\n\t\t\t} else {\n\t\t\t    out.println (ans + C/W + W);\n\t\t\t}\n        }\n\n    }\n}\n", "idx": "3017"}
{"func": "package googlejam3.p023;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * User: hamilkar\n * Date: 10.05.15\n * Time: 12:19\n */\npublic class A {\n    private static Scanner scanner;\n    private static PrintWriter writer;\n\n    static {\n        try {\n            scanner = new Scanner(new File(\"input.txt\"));\n            writer = new PrintWriter(\"output.txt\");\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        int tests = scanner.nextInt();\n        for (int t = 1; t <= tests; t++) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            int w = scanner.nextInt();\n\n            int res = c / w * (r - 1);\n\n            res += c / w;\n            if (c % w == 0) {\n                res += w - 1;\n            } else {\n                res += w;\n            }\n\n            writer.println(\"Case #\" + t + \": \" + res);\n        }\n\n        writer.close();\n    }\n}\n", "idx": "3023"}
{"func": "package googlejam3.p033;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class Brattleship {\r\n\tpublic static final String FILENAME = \"A-large\";\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader in = new BufferedReader(new FileReader(\"src/\" + FILENAME\r\n\t\t\t\t+ \".in\"));\r\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"src/\"\r\n\t\t\t\t+ FILENAME + \".out\"));\r\n\t\tScanner sc = new Scanner(in);\r\n\t\tint t = sc.nextInt();\r\n\t\tfor (int tt = 1; tt <= t; tt++) {\r\n\t\t\tint r = sc.nextInt();\r\n\t\t\tint c = sc.nextInt();\r\n\t\t\tint w = sc.nextInt();\r\n\t\t\tint ret = (r - 1) * (c / w);\r\n\t\t\tif ((c / w) * w == c) {\r\n\t\t\t\tret += c / w - 1 + w;\r\n\t\t\t} else {\r\n\t\t\t\tret += c / w + w;\r\n\t\t\t}\r\n\t\t\tout.write(\"Case #\" + tt + \": \" + ret + \"\\n\");\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "3033"}
{"func": "package googlejam3.p035;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n\r\npublic class CJ2015Round1CA {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\t//BufferedReader in = new BufferedReader(new FileReader(\"temp.txt\"));\r\n\t\tPrintWriter out  = new PrintWriter(new File(\"2015Round1CAout.txt\"));\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor(int a = 1; a < T+1; a++){\r\n\t\t\tString[] nums = in.readLine().split(\" \");\r\n\t\t\tint R = Integer.parseInt(nums[0]);\r\n\t\t\tint C = Integer.parseInt(nums[1]);\r\n\t\t\tint W = Integer.parseInt(nums[2]);\r\n\t\t\tint rowguess = (C-W)/W;\r\n\t\t\tint ret = rowguess*R+R-1;\r\n\t\t\tret +=W;\r\n\t\t\tif (C%W!=0){\r\n\t\t\t\tret++;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+a+\": \"+ret);\r\n\t\t\tout.println(\"Case #\"+a+\": \"+ret);\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "3035"}
{"func": "package googlejam3.p039;\nimport java.util.*;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tA a = new A();\r\n\t\tScanner in = new Scanner(System.in);\n\t\tint cases = Integer.parseInt(in.nextLine());\n\t\tfor (int a1=0; a1<cases; a1++) {\n\t\t\tint r = in.nextInt();\n\t\t\tint c = in.nextInt();\n\t\t\tint w = in.nextInt();\n\t\t\tif (a1!=cases-1) {\n\t\t\t\tin.nextLine();\n\t\t\t}\n\t\t\tint base = c/w;\n\t\t\tbase *= r;\n\t\t\tif (c%w==0) {\n\t\t\t\tbase += (w-1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbase += w;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + (a1+1) + \": \" + base);\n\t\t}\r\n\t}\r\n\r\n}", "idx": "3039"}
{"func": "package googlejam3.p043;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class Solver {\r\n\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tBufferedReader reader = new BufferedReader(new FileReader(\"input.in\"));\r\n\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(\"output.out\"));\r\n\r\n\t\tint t = Integer.parseInt(reader.readLine());\r\n\r\n\t\tfor (int c = 1; c <= t; ++c) {\r\n\t\t\tint result = 0;\r\n\t\t\t\r\n\t\t\tString[] values = reader.readLine().split(\" \");\r\n\t\t\tint rows = Integer.parseInt(values [0]);\r\n\t\t\tint cows = Integer.parseInt(values[1]);\r\n\t\t\tint w = Integer.parseInt(values[2]);\r\n\t\t\t\r\n\t\t\tint perRow = cows / w;\r\n\t\t\tresult = perRow * rows;\r\n\t\t\t\r\n\t\t\tint currentCow = (cows / w) * w;\r\n\t\t\tif (currentCow == cows) {\r\n\t\t\t\tresult += (w - 1);\r\n\t\t\t} else {\r\n\t\t\t\tresult += w;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + c + \": \" + result);\r\n\t\t\twriter.write(\"Case #\" + c + \": \" + result);\r\n\t\t\twriter.newLine();\t\r\n\t\t}\r\n\t\t\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n\r\n}\r\n", "idx": "3043"}
{"func": "package googlejam3.p046;\n\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Q1 {\r\n\tpublic static void main(String... args) {\r\n\t\t@SuppressWarnings(\"resource\")\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint caseCount = in.nextInt();\r\n\t\tfor (int caseValue = 1; caseValue <= caseCount; caseValue++) {\r\n\t\t\tint R = in.nextInt();\r\n\t\t\tint C = in.nextInt();\r\n\t\t\tint W = in.nextInt();\r\n\t\t\tint result = 0;\r\n\t\t\tint eliminateR = R - 1;\r\n\t\t\tif (eliminateR > 0) {\r\n\t\t\t\tresult += eliminateR * (\r\n\t\t\t\t\t\t// C = 1 .. 2W-1, 1\r\n\t\t\t\t\t\t//   = 2W .. 3W-1, 2\r\n\t\t\t\t\t\tMath.max(1, C / W)\r\n\t\t\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tint c = C;\r\n\t\t\twhile (c > 2 * W - 1) {\r\n\t\t\t\tresult++;\r\n\t\t\t\tc -= W;\r\n\t\t\t}\r\n\t\t\t// assert(c <= 2 * W - 1 && c >= W);\r\n\t\t\tif (c == W) {\r\n\t\t\t\tresult += W; // W>=1\r\n\t\t\t} else if (c == W + 1){ // W>=2\r\n\t\t\t\tresult += W + 1;\r\n\t\t\t\t// xWx\r\n\t\t\t\t// ?w\r\n\t\t\t} else if (c == W + 2) { // W>=3\r\n\t\t\t\tresult += W + 1;\r\n\t\t\t\t// xxWxx\r\n\t\t\t\t// _?w\r\n\t\t\t} else if (c == W + 3) { // W>=4\r\n\t\t\t\tresult += W + 1;\r\n\t\t\t} else {\r\n\t\t\t\tresult += W + 1;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + caseValue + \": \" + result);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "3046"}
{"func": "package googlejam3.p047;\nimport java.io.BufferedReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class Brattleship {\r\n\tpublic static void main(String[] args) {\r\n\t\ttry\r\n\t\t{\r\n\t\t\tBufferedReader f = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\tint t = Integer.parseInt(f.readLine());\r\n\t\t\tFileWriter fout = new FileWriter(\"brattleship.out\");\r\n\t\t\tfor(int i = 1; i <= t; i++)\r\n\t\t\t{\r\n\t\t\t\tStringTokenizer st = new StringTokenizer(f.readLine());\r\n\t\t\t\tint r = Integer.parseInt(st.nextToken());\r\n\t\t\t\tint c = Integer.parseInt(st.nextToken());\r\n\t\t\t\tint w = Integer.parseInt(st.nextToken());\r\n\t\t\t\tint[] dp = new int[c+1];\r\n\t\t\t\tdp[w] = w + r - 1;\r\n\t\t\t\tfor(int j = w + 1; j <= 2*w - 1; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(j > c)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdp[j] = w+1 + r-1;\r\n\t\t\t\t}\r\n\t\t\t\tfor(int j = 2*w; j <= c; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tdp[j] = Math.max(dp[j-w] + r, w + 1);\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(\"Case #\" + i + \": \" + dp[c]);\r\n\t\t\t\tfout.write(\"Case #\" + i + \": \" + dp[c] + \"\\n\");\r\n\t\t\t}\r\n\t\t\tf.close();\r\n\t\t\tfout.close();\r\n\t\t}\r\n\t\tcatch(IOException e)\r\n\t\t{\r\n\t\t\tSystem.out.println(e);\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "3047"}
{"func": "package googlejam3.p052;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.StringTokenizer;\n\npublic class A2015 {\n\n\n    public static void main(String[] args) throws IOException {\n        A2015 trans = new A2015();\n        File file = new File(\"./inputs/\"+A2015.NAME + \".in\");\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"./output/\"+A2015.NAME+\".out\"));\n\t\ttry {\n\t\t    //use buffering, reading one line at a time\n\t\t    //FileReader always assumes default encoding is OK!\n\t\t    BufferedReader input = new BufferedReader(new FileReader(file));\n\t\t    try {\n\t\t        String line = input.readLine();\n\t\t        int count = Integer.parseInt(line);\n\t\t\n\t\t        for (int i=0;i<count;i++) {\n\t\t            line = input.readLine();\n\t\t            System.out.println(line);\n\t\t\t\t\tStringTokenizer tokens = new StringTokenizer(line.trim());\n\t\t\t\t\tint[] a= new int[tokens.countTokens()];\n\t\t\t\t\tint i1 = 0;\n\t\t\t\t\twhile(tokens.hasMoreElements()) {\n\t\t\t\t\t    a[i1++] = Integer.parseInt(tokens.nextToken());\n\t\t\t\t\t}\n\t\t\t\t\tint[] params = a;\n\t\t\t\t\tint rows = params[0];\n\t\t\t\t\tint cols = params[1];\n\t\t\t\t\tint width = params[2];\n\t\t\t\t\t\n\t\t\t\t\tint count1 = 0;\n\t\t\t\t\t\n\t\t\t\t\tint perrow = cols/width;\n\t\t\t\t\t\n\t\t\t\t\tcount1 = perrow * rows;\n\t\t\t\t\t\n\t\t\t\t\tcount1 += width - 1;\n\t\t\t\t\t\n\t\t\t\t\tif (perrow*width < cols) {\n\t\t\t\t\t    count1++;\n\t\t\t\t\t}\n\t\t            String str = Integer.toString(count1);\n\t\t            out.write(\"Case #\"+(i+1)+\": \"+str);\n\t\t            if (i<count-1)\n\t\t                out.write(System.getProperty(\"line.separator\"));\n\t\t            System.out.println(str);\n\t\t        }\n\t\t    } finally {\n\t\t        input.close();\n\t\t        out.flush();\n\t\t        out.close();\n\t\t    }\n\t\t} catch (IOException ex) {\n\t\t    ex.printStackTrace();\n\t\t}\n    }\n\n    private static final String NAME = \"A-large\";\n\n}\n", "idx": "3052"}
{"func": "package googlejam3.p055;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tfinal boolean DEBUG = false;\r\n\tfinal boolean isSmall = false;\r\n\tfinal String PACKAGE = \"gcj2015/r1c\";\r\n\tfinal String PROBLEM = \"A\";\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tA r = new A();\n\t\tif(!r.DEBUG){\n\t\t\ttry {\n\t\t\t\tif(r.isSmall)System.setIn(new FileInputStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-small-attempt0.in\")));\n\t\t\t\telse System.setIn(new FileInputStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-large.in\")));\n\t\t\t\tif(r.isSmall)System.setOut(new PrintStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-small_out-deg.txt\")));\n\t\t\t\telse System.setOut(new PrintStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-large_out.txt\")));\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\tfor(int CASE=1;CASE<=T;CASE++){\n\t\t\tint R = sc.nextInt(), C = sc.nextInt(), W = sc.nextInt();\n\t\t\tint w = 0, res = 0;\n\t\t\tres += R*(C/W);\n\t\t\tif (C%W==0)res+=W-1;\n\t\t\telse res+=W;\n\t\t\tSystem.out.println(\"Case #\"+CASE+\": \"+res);\n\t\t}\r\n\t}\r\n}\r\n", "idx": "3055"}
{"func": "package googlejam3.p059;\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class B {\r\n\t\r\n\t\r\n\tpublic static void main(String args[]) throws FileNotFoundException, UnsupportedEncodingException{\r\n\t\tB main = new B();\r\n\t\tScanner scan = new Scanner(new File(\"A-large.in\"));\n\t\t//Scanner scan = new Scanner(System.in);\n\t\tint T = Integer.parseInt(scan.nextLine()); \n\t\tPrintWriter writer = new PrintWriter(\"Alarge.out\", \"UTF-8\");\n\t\tfor(int cas=1; cas<=T; cas++){\t\t\t\n\t\t\tString[] s = scan.nextLine().split(\" \");\n\t\t\tint R = Integer.parseInt(s[0]);\n\t\t\tint C = Integer.parseInt(s[1]);\n\t\t\tint W = Integer.parseInt(s[2]);\n\t\t\t\n\t\t\tint nBlanks = C/W-1;\n\t\t\tint over = C%W;\n\t\t\t\n\t\t\tint nPerRow = 0;\n\t\t\tif(over==0){\n\t\t\t\tnPerRow = nBlanks + W;\n\t\t\t}else{\n\t\t\t\tnPerRow = nBlanks + W + 1;\n\t\t\t}\t\t\n\t\t\t\n\t\t\tint answer = (C/W)*(R-1) + nPerRow;\n\t\t\twriter.println(\"Case #\"+cas+\": \"+answer);\n\t\t\tSystem.out.println(\"Case #\"+cas+\": \"+answer);\n\t\t\t\t\n\t\t}\t\t\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t\r\n}\r\n", "idx": "3059"}
{"func": "package googlejam3.p060;\n\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tprivate final int input_R, input_C, input_W;\r\n\r\n\tprivate final String output;\r\n\r\n\tpublic A(final Scanner sc) {\r\n\t\tsuper();\r\n\t\tthis.input_R = sc.nextInt();\r\n\t\tthis.input_C = sc.nextInt();\r\n\t\tthis.input_W = sc.nextInt();\r\n\t\tlong nb = this.input_C / this.input_W * this.input_R;\r\n\t\tnb += this.input_W - 1;\r\n\t\tif (this.input_C % this.input_W != 0) {\r\n\t\t\tnb++;\r\n\t\t}\r\n\t\tthis.output = String.valueOf(nb);\r\n\t}\r\n\r\n\tpublic static void main(final String[] args) {\r\n\t\ttry (final Scanner sc = new Scanner(args.length > 0 ? new FileInputStream(args[0]) : System.in);\r\n\t\t\t\tfinal PrintStream pr = args.length > 1 ? new PrintStream(args[1]) : System.out;) {\r\n\t\t\tfinal int nb_test = sc.nextInt();\r\n\t\t\tfor (int i = 1; i <= nb_test; i++) {\r\n\t\t\t\tSystem.out.println(\"Case #\" + i + \": \" + new A(sc));\r\n\t\t\t}\r\n\t\t} catch (final FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "3060"}
{"func": "package googlejam3.p062;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A\r\n{\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tScanner in=new Scanner(System.in);\r\n\t\tint numRuns=in.nextInt();\r\n\t\tfor (int run=1; run<=numRuns; run++)\r\n\t\t{\r\n\t\t\tint r=in.nextInt(), c=in.nextInt(), w=in.nextInt();\r\n\t\t\tint extrarows=(r-1)*(c/w);\r\n\t\t\t\r\n\t\t\t// Shoot c/w-1 times; \r\n\t\t\tint ans=c/w-1;\r\n\t\t\tc-=w*ans;\r\n\t\t\tSystem.out.println(\"Case #\"+run+\": \"+(ans+Math.min(w+1,c)+extrarows));\r\n\t\t}\r\n\t}\r\n}", "idx": "3062"}
{"func": "package googlejam3.p063;\n// Google Code Jam Round 1C 2015\r\n// Problem A. Brattleship\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Brattleship{\r\n\tstatic String filename = \"A-large\";\t// io filnename here\r\n    static String inname = filename + \".in\";    \r\n    static String outname = filename + \".out\";  \r\n    static int n;\r\n    public static void main(String[] args){\r\n        try{\r\n            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));\r\n        \t//Scanner in = new Scanner(System.in);\r\n            BufferedWriter out = new BufferedWriter(new FileWriter(outname));\r\n            int t = in.nextInt();\r\n            in.nextLine();\r\n            for (int cas = 1; cas <= t; cas++){\r\n            \t\r\n                int r = in.nextInt();\r\n                int c = in.nextInt();\r\n                int w = in.nextInt();\n\t\t\t\tint ans1 = 0;\n\t\t\t\tans1 +=  Math.min(c%w, 1)+w + c/w-1;\n\t\t\t\tif (r > 1) ans1 += (r-1)*(c/w);\r\n                int ans = ans1;\r\n                System.out.print(\"Case #\" + cas + \": \" + ans + \"\\n\");\r\n                out.write(\"Case #\" + cas + \": \" + ans + \"\\n\");\r\n            }\r\n            in.close();\r\n            out.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n", "idx": "3063"}
{"func": "package googlejam3.p064;\nimport java.util.Scanner;\nimport java.io.*;\nimport java.util.*;\n\npublic class ASmall {\n\t\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner in = new Scanner(new File(\"A-large.in\"));\n\t\tPrintWriter out = new PrintWriter(new File(\"outputALarge.txt\"));\n\t\tint t = in.nextInt();\n\t\tfor (int testn = 1; testn <= t; testn++) {\n\t\t\tint R = in.nextInt();\n\t\t\tint C = in.nextInt();\n\t\t\tint W = in.nextInt();\n\t\t\tint ans = (R - 1) * (C / W);\n\t\t\tif (C % W == 0) ans += (C / W) + W - 1; else ans += (C / W) + W;\n\t\t\tout.println(\"Case #\" + testn + \": \" + ans);\n\t\t}\n\t\tin.close();\n\t\tout.close();\n\t}\n\t\n\t\n}\n", "idx": "3064"}
{"func": "package googlejam3.p065;\n\r\n\r\nimport java.io.BufferedInputStream;\r\nimport java.io.BufferedOutputStream;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic abstract class Main1C_A {\r\n\t\r\n\tprivate static final String IN_NAME = \"A-large\";\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\t// Open input and output files. (stdin and stdout are not used because\r\n\t\t// of the lack of support for using a file as stdin in Eclipse.)\r\n\t\tInputStream inStream = new FileInputStream(\r\n\t\t\tString.format(\"input/%s.in\", IN_NAME));\r\n\t\tOutputStream outStream = new FileOutputStream(\r\n\t\t\tString.format(\"output/%s-out.txt\", IN_NAME));\r\n\t\t\r\n\t\tScanner in = new Scanner(new BufferedInputStream(inStream));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedOutputStream(outStream));\r\n\t\t\r\n\t\tint numCases = in.nextInt();\r\n\t\tfor (int caseIdx = 1; caseIdx <= numCases; caseIdx++) {\r\n\t\t\t\r\n\t\t\t// Read the test case.\r\n\t\t\tint height = in.nextInt();\r\n\t\t\tint width = in.nextInt();\r\n\t\t\tint boatWidth = in.nextInt();\n\t\t\tint result1 = 0;\n\t\t\t\t\t\n\t\t\t\t\tint toRemoveRow = width / boatWidth;\n\t\t\t\t\t\n\t\t\t\t\t// Narrow down possibilities to a single row.\n\t\t\t\t\tresult1 += (height - 1) * toRemoveRow;\n\t\t\t\t\t\n\t\t\t\t\t// Narrow down possibilities to the right 2 * boatWidth positions.\n\t\t\t\t\t// TODO: Probably could do this without having to loop.\n\t\t\t\t\tint remaining = width;\n\t\t\t\t\twhile (remaining >= 2 * boatWidth) {\n\t\t\t\t\t\tremaining -= boatWidth;\n\t\t\t\t\t\tresult1++;\n\t\t\t\t\t}\n\t\t\t//\t\tint remaining = width;\n\t\t\t//\t\tif (width >= 2 * boatWidth) {\n\t\t\t//\t\t\tint numHits = (int) Math.ceil(\n\t\t\t//\t\t\t\t(width - (2 * boatWidth - 1)) / (double) boatWidth);\n\t\t\t//\t\t\tint numHits = (width / (double) boatWidth) - 2;\n\t\t\t//\t\t\tresult += numHits;\n\t\t\t//\t\t\tremaining = width - (numHits * boatWidth);\n\t\t\t//\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Now find the boat.\n\t\t\t\t\tresult1 += boatWidth;\n\t\t\t\t\tif (remaining != boatWidth) {\n\t\t\t\t\t\tresult1++;\n\t\t\t\t\t}\r\n\t\t\t\r\n\t\t\t// Solve this test case;\r\n\t\t\tint result = result1;\r\n\t\t\t\r\n\t\t\t// Print the result.\r\n\t\t\tString resultStr = String.format(\"%s\", result);\r\n\t\t\tString fullResultStr = String.format(\"Case #%s: %s\", caseIdx,\r\n\t\t\t\tresultStr);\r\n\t\t\tout.println(fullResultStr);\r\n\t\t\tSystem.out.println(fullResultStr);\r\n\t\t}\r\n\t\t\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}", "idx": "3065"}
{"func": "package googlejam3.p075;\nimport java.io.*;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by benoi_000 on 4/16/2015.\r\n */\r\npublic class A {\r\n\r\n    public static void main(String args[]) throws FileNotFoundException {\r\n        final String defaultFile = A.class.getName()+\".in\";\r\n        final PrintStream out;\r\n        final InputStream in;\r\n        if (args.length==0) {\r\n            in = new FileInputStream(\"test/\"+defaultFile);\r\n            out =System.out;\r\n\r\n        } else {\r\n            in = new FileInputStream(\"resources/\"+args[0]);\r\n            out = new PrintStream(new FileOutputStream(\"result/\"+args[0]));\r\n        }\r\n        Scanner scanner = new Scanner(in);\r\n        int nbTest = scanner.nextInt();\r\n        for (int i=0;i<nbTest;i++) {\r\n            scanner.nextLine();\n\t\t\tLong W = scanner.nextLong();\r\n            Object res = ((long)Math.ceil((double)scanner.nextLong()/(double)W))+(W-1);\r\n            out.println(\"Case #\"+(i+1)+\": \"+res);\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n", "idx": "3075"}
{"func": "package googlejam3.p076;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * @author Max Loewenthal\n */\npublic class A {\n    public static void main(String[] args) {\n        try {\n            InputStream input = System.in;\n            OutputStream output = System.out;\n\n            if (args.length > 0) {\n                input = new FileInputStream(new File(args[0]));\n            }\n\n            if (args.length > 1) {\n                File outputFile = new File(args[1]);\n\n                if (outputFile.exists()) {\n                    throw new Exception(\"Output file already exists\");\n                }\n\n                output = new FileOutputStream(new File(args[1]));\n            }\n\n            Scanner scanner = new Scanner(input);\n            PrintWriter writer = new PrintWriter(output);\n\n            A a = new A();\n\n            int count = scanner.nextInt();\n            scanner.nextLine();\n\n            for (int i = 0; i < count; i++) {\n                StringBuilder result = new StringBuilder();\n                int r = scanner.nextInt();\n\t\t\t\tint c = scanner.nextInt();\n\t\t\t\tint w = scanner.nextInt();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tresult.append(r * ( (c - 1) / w) +  (w));\n\n\n                writer.println(\"Case #\" + (i + 1) + \": \" + result.toString());\n            }\n\n            writer.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n", "idx": "3076"}
{"func": "package googlejam3.p077;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n\r\npublic class Solution {\r\n  BufferedReader reader;\r\n\r\n  StreamTokenizer tokenizer;\r\n  Scanner in;\r\n\r\n  public static void main(String[] args) throws Exception {\r\n    Solution r = new Solution();\n\t//    in = new Scanner(System.in);\n\t//    PrintWriter out = new PrintWriter(System.out);\n\t    r.in = new Scanner(new File(\"input.txt\"));\n\t    PrintWriter out = new PrintWriter(new File(\"output.txt\"));\n\t    r.reader = new BufferedReader(new InputStreamReader(System.in));\n\t    r.tokenizer = new StreamTokenizer(r.reader);\n\t    int tcs = r.in.nextInt();\n\t\tfor (int tc = 1; tc <= tcs; tc++) {\n\t\t  int n = r.in.nextInt();\n\t\t\tint m = r.in.nextInt();\n\t\t\tint len = r.in.nextInt();\n\t\tint x = m / len * n + len - 1 + ((m%len!=0)?1:0);\n\t\t  System.out.println(\"Case #\" + tc + \": \" + x);\n\t\t}\n\t\n\t\n\t    r.in.close();\n\t    r.reader.close();\n\t    out.close();\r\n  }\r\n}\r\n\r\n", "idx": "3077"}
{"func": "package googlejam3.p080;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class A {\n\n    private static final String FILE_NAME = \"A-large\";\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(FILE_NAME + \".in\"));\n        BufferedWriter out = new BufferedWriter(new FileWriter(FILE_NAME + \".out\"));\n\n        int t = Integer.parseInt(in.readLine());\n        for (int c = 1; c <= t; ++c) {\n            String[] split = in.readLine().split(\" \");\n            int rows = Integer.parseInt(split[0]);\n            int columns = Integer.parseInt(split[1]);\n            int width = Integer.parseInt(split[2]);\n\n            int turns = rows*(columns/width);\n            if (columns%width > 0) {\n                ++turns;\n            }\n            turns += width-1;\n\n            String ans = String.format(\"Case #%d: %d\\n\", c, turns);\n            out.write(ans);\n            System.out.print(ans);\n        }\n        out.close();\n    }\n}\n", "idx": "3080"}
{"func": "package googlejam3.p082;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class GcjA {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"output1.txt\"));\r\n\t\tint nrT = Integer.parseInt(br.readLine());\r\n\t\tfor(int tnr = 1; tnr <= nrT; tnr++) {\r\n\t\t\tString[] strs = br.readLine().split(\" \");\r\n\t\t\tint r = Integer.parseInt(strs[0]);\r\n\t\t\tint c = Integer.parseInt(strs[1]);\r\n\t\t\tint w = Integer.parseInt(strs[2]);\r\n\t\t\t\r\n\t\t\tint res = r * (c / w) + w;\r\n\t\t\tif(c % w == 0) {\r\n\t\t\t\tres--;\r\n\t\t\t}\r\n\t\t\tpw.println(\"Case #\" + tnr + \": \" + res);\r\n\t\t}\r\n\t\tbr.close();\r\n\t\tpw.close();\r\n\t}\r\n}\r\n", "idx": "3082"}
{"func": "package googlejam3.p085;\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\n\r\nclass Codejam {\r\n\r\n    public static void main(String args[]) {\r\n        Scanner in = null;\r\n\t\ttry {\r\n\t\t\tin = new Scanner(new FileInputStream(\"input.txt\"));\r\n\t\t\tSystem.setOut(new PrintStream(new File(\"output.txt\")));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tint T = in.nextInt();\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tint r = in.nextInt();\r\n\t\t\tint c = in.nextInt();\r\n\t\t\tint w = in.nextInt();\r\n\t\t\tint ans = r * c;\r\n\t\t\tif ( w > 1) {\r\n\t\t\t\tans = r * ((c - 1) / w) + w;\r\n\t\t\t\tif (c % w == 0) {\r\n\t\t\t\t\tans += r - 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + t + \": \" + ans);\r\n\t\t}\r\n    }\r\n \r\n}", "idx": "3085"}
{"func": "package googlejam3.p088;\n\n\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class Solution {\n\n    public static void main(String[] args) throws Exception {\n        Solution r = new Solution();\n\t\tScanner sc = new Scanner(new FileReader(\"input.txt\"));\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n\t\t\n\t\tint caseCnt = sc.nextInt();\n\t\t\n\t\tfor (int caseNum = 0; caseNum < caseCnt; caseNum++) {\n\t\t    pw.print(\"Case #\" + (caseNum + 1) + \": \");\n\t\t\n\t\t    int R = sc.nextInt();\n\t\t    int C = sc.nextInt();\n\t\t    int W = sc.nextInt();\n\t\t\n\t\t    int rawChecks = C / W;\n\t\t\n\t\t    int res = (R - 1) * rawChecks;\n\t\t    if (C % W == 0) {\n\t\t        res += rawChecks + W - 1;\n\t\t    } else {\n\t\t        res += rawChecks + W;\n\t\t    }\n\t\t\n\t\t    pw.println(res);\n\t\t\n\t\t}\n\t\tpw.flush();\n\t\tpw.close();\n\t\tsc.close();\n    }\n}", "idx": "3088"}
{"func": "package googlejam3.p089;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class A {\n\tpublic static void main (String[] args) {\n\t\tA r = new A();\n\t\ttry {\n\t\t\tBufferedReader in = new BufferedReader(new FileReader(args[0]));\n\t\t    PrintStream out = new PrintStream(args[0] + \".out\");\n\t\t\tint CASES = Integer.parseInt(in.readLine());\n\t\t\tfor (int CASE = 1 ; CASE <= CASES ; CASE++) {\n\t\t\t\tString[] words = in.readLine().split(\" \");\n\t\t\t\tint[] ret = new int[words.length];\n\t\t\t\tfor (int i = 0 ; i < words.length ; i++) ret[i] = Integer.parseInt(words[i]);\n\t\t\t\tint[] input = ret;\n\t\t\t\tint R = input[0];\n\t\t\t\tint C = input[1];\n\t\t\t\tint W = input[2];\n\t\t\t\tint val = R * C / W + (C % W == 0 ? 0 : 1) + W - 1;\n\t\t\t\tout.printf(\"Case #%d: %d\\n\", CASE, val);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n}\n", "idx": "3089"}
{"func": "package googlejam3.p095;\n\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Scanner;\n\npublic class A {\n\n    private static final String INPUT = \"A-large.in\";\n    private static final String OUTPUT = \"A-large.out\";\n\n    public static void main(String[] args) {\n        try {\n            Scanner sc = new Scanner(Paths.get(INPUT));\n            StringBuilder sb = new StringBuilder();\n            int cases = sc.nextInt();\n            for (int c = 1; c < cases + 1; c++) {\n                int R = sc.nextInt();\n                int C = sc.nextInt();\n                int W = sc.nextInt();\n\n                String line = \"Case #\" + c + \": \" + solve(R, C, W);\n                System.out.println(line);\n                sb.append(line).append('\\n');\n            }\n            Files.write(Paths.get(OUTPUT), sb.toString().getBytes());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static int solve(int R, int C, int W) {\n        int tryRows = (int) Math.floor((C / W) * 1.0);\n        int ret = W + (int) Math.ceil((C - W) * 1.0 / W);\n        return tryRows * (R - 1) + ret;\n    }\n}", "idx": "3095"}
{"func": "package googlejam3.p098;\nimport java.util.Scanner;\n\npublic class CRoundA {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint T = in.nextInt();\n\t\tfor (int i = 0; i < T; i++) {\n\t\t\tint R = in.nextInt();\n\t\t\tint C = in.nextInt();\n\t\t\tint size = in.nextInt();\n\t\t\t\n\t\t\tint costPerRow = C / size;\n\t\t\t\n\t\t\tint ans1 = 0;\n\t\t\t\n\t\t\t// Need to iterate through all rows to first \"hit\" the ship\n\t\t\tans1 += costPerRow * R;\n\t\t\t\n\t\t\t// Now that we've hit the ship, we need to hit the rest of it.\n\t\t\t\n\t\t\t// If it divides it evenly, it's jsut the cost of the rest of the ship.\n\t\t\tif (C % size == 0) {\n\t\t\t\tans1 += (size - 1);\n\t\t\t}\n\t\t\t// Alternatively, he can guarantee at least one \"miss\"\n\t\t\telse {\n\t\t\t\tans1 += size;\n\t\t\t}\n\t\t\tint ans = ans1;\n\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", i + 1, ans);\n\t\t}\n\n\t}\n\n}\n", "idx": "3098"}
{"func": "package googlejam3.p099;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n\npublic class A {\n\tstatic BufferedReader in;\n\tstatic PrintWriter out;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tin = new BufferedReader(new FileReader(new File(\n\t\t\t\t\"/Users/yfo/Downloads/a2.in\")));\n\t\tout = new PrintWriter(new FileWriter(new File(\n\t\t\t\t\"/Users/yfo/Downloads/a2_out.in\")));\n\n\t\tint T = Integer.parseInt(in.readLine());\n\t\tfor (int t = 0; t < T; t++) {\n\t\t\tSystem.out.print((t + 1) + \": \");\n\t\t\t\n\t\t\tString[] tok = in.readLine().split(\" \");\n\t\t\tint R = Integer.parseInt(tok[0]);\n\t\t\tint C = Integer.parseInt(tok[1]);\n\t\t\tint W = Integer.parseInt(tok[2]);\n\t\t\t\n\t\t\tint x = (C/W)*R;\n\t\t\tint m = C%W;\n\t\t\t\n\t\t\tx+=(W-1);\n\t\t\tif (m>0) x++;\n\t\t\t\n\t\t\t\n\t\t\tout.println(\"Case #\" + (t + 1) + \": \"+x);\n\t\t\tSystem.out.println(x);\n\t\t}\n\n\t\tin.close();\n\t\tout.close();\n\t}\n}\n", "idx": "3099"}
{"func": "package googlejam3.p105;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\r\n\t\tFileReader in = new FileReader(\"F:\\\\download\\\\A-large.in\");\r\n\t\tBufferedReader br = new BufferedReader(in);\r\n\t\tFileWriter out = new FileWriter(\"F:\\\\download\\\\CodeJam\\\\out.txt\");\r\n\t\tBufferedWriter bw = new BufferedWriter(out);\r\n\t\t\r\n\t\tint t = Integer.parseInt(br.readLine());\r\n\t\tfor (int c = 0; c < t; c++){\r\n\r\n//\t\t\tint l = Integer.parseInt(br.readLine());\r\n\r\n\t\t\tString line = br.readLine();\r\n\t\t\tStringTokenizer St1 = new StringTokenizer(line, \" \");\r\n\t\t\tint ro = Integer.valueOf(St1.nextToken()).intValue();\r\n\t\t\tint co = Integer.valueOf(St1.nextToken()).intValue();\r\n\t\t\tint w = Integer.valueOf(St1.nextToken()).intValue();\r\n\t\t\t\r\n\t\t\tint answer = ((int)(co / w)) * (ro - 1);\r\n\t\t\tanswer += w;\r\n\r\n\t\t\twhile (true){\r\n\t\t\t\tif (co > w){\r\n\t\t\t\t\tco -= w;\r\n\t\t\t\t\tanswer ++;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tbw.write(String.format(\"Case #%d: %d\\n\", c+1, answer));\r\n\t\t}\r\n\r\n\r\n\t\tbr.close();\r\n\t\tin.close();\r\n\t\tbw.close();\r\n\t\tout.close();\r\n\r\n\t}\r\n\t\r\n\r\n}\r\n\r\n", "idx": "3105"}
{"func": "package googlejam3.p108;\nimport java.util.*;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\r\n\t\tint t = sc.nextInt();\r\n\r\n\t\tfor (int caseNum = 1;  caseNum <= t; caseNum++) {\r\n\t\t\tint r = sc.nextInt();\r\n\t\t\tint c = sc.nextInt();\r\n\t\t\tint w = sc.nextInt();\r\n\r\n\t\t\tint tries;\r\n\t\t\tif (c % w == 0) {\r\n\t\t\t\ttries = (r * (c / w)) + (w - 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttries = (r * (c / w)) + w;\r\n\t\t\t}\r\n\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", caseNum, tries);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "3108"}
{"func": "package googlejam3.p112;\nimport java.io.*;\r\nimport java.util.*;\nimport java.math.*;\r\n\r\npublic class A\r\n{  \r\n\tpublic static void main(String[] args) throws Exception\r\n\t{\n    int T;\t\r\n\t\tRandomAccessFile in = new RandomAccessFile(args[0],\"r\");\r\n\t\tT=Integer.parseInt(in.readLine());\n\t\t\r\n\r\n\t\tfor (int i=1; i<=T; i++)\r\n\t\t{\n\t\t  String[] temp=in.readLine().split(\"[ ]+\");\t\t  \n\t\t  int R=Integer.parseInt(temp[0]);\n\t\t  int C=Integer.parseInt(temp[1]);\n\t\t  int W=Integer.parseInt(temp[2]);\n\t\tint ans1=(R-1)*(C/W)+(C/W)+(W-1);\n\t\tif (C%W>=1) ans1++;\t\t  \t\t  \n\n      String ans=\"\"+ans1;\n      System.out.println(\"Case #\"+i+\": \"+ans);\n    }\r\n\r\n\t\tin.close();\r\n\t}\n}", "idx": "3112"}
{"func": "package googlejam3.p116;\nimport java.io.*;\n\npublic class Brattleship {\n    public static void main(String[] args) throws Exception {\n        String filename = \"A-large.in\";\n        File file = new File(\"/Users/tanin/Downloads/\" + filename);\n        File outFile = new File(\"/Users/tanin/Downloads/\" + filename + \".out\");\n        BufferedReader br = new BufferedReader(new FileReader(file));\n        BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\n        int testCases = Integer.parseInt(br.readLine());\n        for(int t=1;t<=testCases;t++){\n            String[] tokens = br.readLine().split(\" \");\n            int R = Integer.parseInt(tokens[0]);\n            int C = Integer.parseInt(tokens[1]);\n            int W = Integer.parseInt(tokens[2]);\n\t\t\tint times = (C / W) * R;\n\t\t\t\n\t\t\tif ((C % W) > 0) {\n\t\t\t    times += W;\n\t\t\t} else {\n\t\t\t    times += W - 1;\n\t\t\t}\n\n            int result = times;\n            String outputLine = \"Case #\" + t + \": \" + result + \"\\n\";\n\n            System.out.print(outputLine);\n            bw.write(outputLine);\n        }\n        br.close();\n        bw.close();\n    }\n}\n", "idx": "3116"}
{"func": "package googlejam3.p120;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class A{\r\n\t\r\n\tstatic int t,r,c,w,a;\r\n\tstatic String line,str;\r\n\tstatic String[] row;\r\n\tstatic boolean debug = false;\r\n\t\r\n\tpublic static void main(String [ ] args) throws IOException{\r\n\t\tint i,j,k;\r\n\t\t\r\n\t\t\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t    try {\r\n\t    \tFile file = new File(\"aaa.out\");\r\n    \t\tif (!file.exists()) {\r\n    \t\t\tfile.createNewFile();\r\n    \t\t}\r\n    \t\t\r\n    \t\tFileWriter fw = new FileWriter(file.getAbsoluteFile());\r\n    \t\tBufferedWriter bw = new BufferedWriter(fw);\r\n    \t\t\r\n\t        line = br.readLine();\r\n\t        t = Integer.valueOf(line); //1 <= T <= 100.\r\n\r\n\t\t\t\r\n\t        for(i = 0; i < t; i++){\r\n\t\t\t\t\r\n\t\t\t\tline = br.readLine();\r\n\t\t\t\trow = line.split(\"\\\\s\");\r\n\t\t\t\tr = Integer.valueOf(row[0]);\r\n\t\t\t\tc = Integer.valueOf(row[1]);\r\n\t\t\t\tw = Integer.valueOf(row[2]);\r\n\t\t\t\t\r\n\t        \t//1 <= n <= 10^6.\r\n\t\t\t\tdebug = false;\r\n\t\t\t\ta=0;\r\n\t\t\t\t\r\n\t\t\t\tif (r == 1 && c==w) {\r\n\t\t\t\t\ta=w;\r\n\t\t\t\t} else if (w==1) {\r\n\t\t\t\t\ta=r*c;\r\n\t\t\t\t} else { // c>=w>1\r\n\t\t\t\t\tj = c%w; //>=0\r\n\t\t\t\t\tk = c/w; //>=1\r\n\t\t\t\t\tif(j==0){\r\n\t\t\t\t\t\ta = k*(r-1)+k + w-1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ta = k*(r-1)+k + w;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(debug) System.out.println(\"-------\");\r\n    \t\t\tbw.write(\"Case #\"+(i+1)+\": \"+a+\"\\n\");\r\n\t        }\r\n\t        \r\n\t\t\tbw.close();\r\n\r\n\t    } finally {\r\n\t        br.close();\r\n\t    }\r\n\t}\r\n}\r\n", "idx": "3120"}
{"func": "package googlejam3.p124;\nimport java.util.*;\n\npublic class Q2A {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint numCases = scan.nextInt();\n\t\tfor (int i = 0; i < numCases; i++) {\n\t\t\tint rows = scan.nextInt();\n\t\t\tint cols = scan.nextInt();\n\t\t\tint width = scan.nextInt();\n\t\t\tint[][] board = new int[rows][cols];\n\t\t\tint hitcount = 0;\n\t\t\tint turns = 0;\n\t\t\twhile(hitcount < width) {\n\t\t\t\tList<boolean[][]> retval = new ArrayList<>();\n\t\t\t\tfor (int r1 = 0; r1 < board.length; r1++) {\n\t\t\t\t\tfor (int c1 = 0; c1 < board[0].length - width + 1; c1++) {\n\t\t\t\t\t\t// can place?\n\t\t\t\t\t\tboolean canPlace = true;\n\t\t\t\t\t\tfor (int cc = 0; cc < width; cc++) {\n\t\t\t\t\t\t\tif (board[r1][c1+cc] == 1) { // miss\n\t\t\t\t\t\t\t\tcanPlace = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!canPlace) continue;\n\t\t\t\t\t\tboolean[][] shippos = new boolean[board.length][board[0].length];\n\t\t\t\t\t\tfor (int cc = 0; cc < width; cc++) {\n\t\t\t\t\t\t\tshippos[r1][c1+cc] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tretval.add(shippos);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tList<boolean[][]> possibleships = retval;\n\t\t\t\tint[][] counts = new int[rows][cols];\n\t\t\t\tfor (boolean[][] ship: possibleships) {\n\t\t\t\t\tfor (int r = 0; r < rows; r++) {\n\t\t\t\t\t\tfor (int c = 0; c < cols; c++) {\n\t\t\t\t\t\t\tif (ship[r][c] && board[r][c]==0) counts[r][c]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint highcount = 0;\n\t\t\t\tint highrow = 0, highcol = 0;\n\t\t\t\tfor (int r = 0; r < rows; r++) {\n\t\t\t\t\tfor (int c = 0; c < cols; c++) {\n\t\t\t\t\t\tif (counts[r][c] > highcount) {\n\t\t\t\t\t\t\thighrow = r;\n\t\t\t\t\t\t\thighcol = c;\n\t\t\t\t\t\t\thighcount = counts[r][c];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// ask for highrow, highcol\n\t\t\t\t// bro will pick board where highrow, highcol is not hit if possible\n\t\t\t\tboolean ismiss = false;\n\t\t\t\tfor (boolean[][] ship: possibleships) {\n\t\t\t\t\tif (!ship[highrow][highcol]) {\n\t\t\t\t\t\tboard[highrow][highcol] = 1; // miss\n\t\t\t\t\t\tismiss = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!ismiss) {\n\t\t\t\t\tboard[highrow][highcol] = 2; // hit\n\t\t\t\t\thitcount++;\n\t\t\t\t}\n\t\t\t\tturns++;\n\t\t\t}\n\t\t\tint result = turns;\n\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + result);\n\t\t}\n\t}\n}", "idx": "3124"}
{"func": "package googlejam3.p126;\nimport java.util.Scanner;\n\npublic class a {\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner sc = new Scanner(System.in);\n\t\tint t = sc.nextInt();\n\t\tfor (int caseNum = 1; caseNum <= t; caseNum++) {\n\t\t\tint r = sc.nextInt();\n\t\t\tint c = sc.nextInt();\n\t\t\tint w = sc.nextInt();\n\t\t\tint g = (r - 1) * (c / w) + w + (c / w);\n\t\t\tif ((c % w) == 0) {\n\t\t\t\tg--;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + caseNum + \": \" + g);\n\t\t}\n\t}\n}\n", "idx": "3126"}
{"func": "package googlejam3.p127;\n\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\n\r\n/**\r\n * User: RK\r\n */\r\npublic class A {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Scanner in = new Scanner(new FileInputStream(\"test_codejam/a.in\"));\r\n        PrintWriter out = new PrintWriter(new FileOutputStream(\"test_codejam/a.out\"));\r\n//        Scanner in = new Scanner(System.in);\r\n//        PrintWriter out = new PrintWriter(System.out);\r\n        int t = in.nextInt();\r\n        int test = 1;\r\n        while (t-->0) {\r\n            int r,c, w, answer = 0;\r\n            r = in.nextInt();\r\n            c = in.nextInt();\r\n            w = in.nextInt();\r\n            int z = 0;\r\n            while (z<c) {\r\n                z+=w;\r\n                answer+=1;\r\n            }\r\n\r\n            out.println(\"Case #\" + test + \": \" + (answer * r + w - 1));\r\n            test++;\r\n        }\r\n        out.close();\r\n    }\r\n\r\n}\r\n", "idx": "3127"}
{"func": "package googlejam3.p128;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class A {\n\tpublic static void main(String[] args) {\n\t\tFile fin = new File(\"src/Round1C/A-large.in\");\n\t\tScanner scan;\n\t\ttry {\n\t\t\tscan = new Scanner(fin);\n\t\t\n\t\t\tPrintWriter output = new PrintWriter(\"src/Round1C/A_test.out2.txt\");\n\t\t\tint T = scan.nextInt();\n\t\t\tfor(int i = 0; i < T; i++)\n\t\t\t{\n\t\t\t\tint R = scan.nextInt();\n\t\t\t\tint CC = scan.nextInt();\n\t\t\t\tint W = scan.nextInt();\n\t\t\t\tint C = CC;\n\t\t\t\tSystem.out.println(R + \" \" + C + \" \" + W);\n\t\t\t\tint result = 0;\n\t\t\t\tresult += C / W * (R - 1);\n\t\t\t\tSystem.out.println(C + \" > \" + (2 * W + 1));\n\t\t\t\twhile (C > 2 * W) {\n\t\t\t\t\tC -= W;\n\t\t\t\t\tresult++;\n\t\t\t\t}\n\t\t\t\tSystem.out.println((W+1) + \" \" + result);\n\n\t\t\t\tif (C == W)\n\t\t\t\t\tresult += W;\n\t\t\t\telse\n\t\t\t\t\tresult += W + 1;\n\t\t\t\tSystem.out.println((W+1) + \" \" + result);\n\n\t\t\t\toutput.println(\"Case #\" + (i + 1) + \": \" + result);\n\t\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + R + \" \" + CC + \" \" + W + \"\\t result :\" + result);\n\t\t\t}\n\t\t\tscan.close();\n\t\t\toutput.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "3128"}
{"func": "package googlejam3.p129;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Q1 {\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tScanner sc = new Scanner(new FileInputStream(new File(\"A-large.in\")));\r\n\t\t\tBufferedWriter bos = new BufferedWriter(new FileWriter(new File(\"A-large.out\")));\r\n\t\t\tint cNum = Integer.parseInt(sc.nextLine());\r\n\t\t\tfor (int i = 0; i < cNum; i++) {\r\n\t\t\t\tString[] nums = sc.nextLine().split(\" \");\r\n\t\t\t\tint R = Integer.parseInt(nums[0]);\r\n\t\t\t\tint C = Integer.parseInt(nums[1]);\r\n\t\t\t\tint W = Integer.parseInt(nums[2]);\r\n\t\t\t\tint optimal =  (C/W) * R +W -1; \r\n\t\t\t\toptimal += C%W == 0 ? 0 : 1;\r\n\t\t\t\tbos.write(String.format(\"Case #%d: %d\\n\", i + 1, optimal));\r\n\t\t\t\tbos.flush();\r\n\t\t\t}\r\n\t\t\tsc.close();\r\n\t\t\tbos.close();\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "3129"}
{"func": "package googlejam3.p131;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\nimport javax.sound.sampled.ReverbType;\r\n\r\npublic class ProblemA {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\r\n//\t\tString filenameInput = \"A-sample.in\";\r\n//\t\tString filenameOutput = \"A-sample.out\";\r\n\t\t\r\n//\t\tString filenameInput = \"A-sample-b.in\";\r\n//\t\tString filenameOutput = \"A-sample-b.out\";\r\n\r\n//\t\t String filenameInput = \"A-small-attempt0.in\";\r\n//\t\t String filenameOutput = \"A-small-attempt0.out\";\r\n\t\t \r\n//\t\t String filenameInput = \"A-large-practice.in\";\r\n//\t\t String filenameOutput = \"A-large-practice.out\";\r\n\t\t \r\n\t\t//\r\n\t\t String filenameInput = \"A-large.in\";\r\n\t\t String filenameOutput = \"A-large.out\";\r\n\r\n\t\tClass currentClass = ProblemA.class;\r\n\t\ttry {\r\n\r\n\t\t\tString path = \"src/\"\r\n\t\t\t\t\t+ currentClass.getPackage().getName().replace(\".\", \"/\");\r\n\t\t\tBufferedReader input = new BufferedReader(new FileReader(new File(\r\n\t\t\t\t\tpath + \"/\" + filenameInput)));\r\n\t\t\tBufferedWriter output = new BufferedWriter(new FileWriter(new File(\r\n\t\t\t\t\tpath + \"/\" + filenameOutput)));\r\n\t\t\tint numOfTestcases = Integer.parseInt(input.readLine());\r\n\t\t\t// System.out.println(\"Number of Testcases: \" + numOfTestcases);\r\n\t\t\tfor (int i = 0; i < numOfTestcases; i++) {\r\n\t\t\t\tSystem.out.println(\"Testnumber : \" + i);\r\n\r\n\t\t\t\t\r\n\t\t\t\tString[] inputStringArray = input.readLine().split(\" \");\r\n\t\t\t\tint R = Integer.parseInt(inputStringArray[0]);\r\n\t\t\t\tint C = Integer.parseInt(inputStringArray[1]);\r\n\t\t\t\tint W = Integer.parseInt(inputStringArray[2]);\r\n\t\t\t\t\r\n\t\t\t\tint cOverW = C/W;\r\n\t\t\t\tint maxNumber = cOverW * (R-1);\r\n\t\t\t\tmaxNumber += (cOverW-1);\r\n\t\t\t\tmaxNumber += W;\r\n\t\t\t\tif(C%W!=0){\r\n\t\t\t\t\tmaxNumber++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\r\n\r\n\t\t\t\tString outputString = \"Case #\" + (i + 1) + \": \" + maxNumber;\r\n\t\t\t\tSystem.out.println(outputString);\r\n\r\n\t\t\t\tif (i + 1 != numOfTestcases) {\r\n\t\t\t\t\toutputString += \"\\n\";\r\n\t\t\t\t}\r\n\t\t\t\toutput.write(outputString);\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.flush();\r\n\t\t\toutput.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "3131"}
{"func": "package googlejam3.p135;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class CodeJam1 {\n\t\n\tpublic static void main(String[] args) {\n\t\t// Template starts here\n\t\tBufferedReader br = null;\n\t\ttry {\n\t\t\tbr = new BufferedReader(new FileReader(\"input.txt\"));\n\t\t\tint numTestCase = Integer.valueOf(br.readLine());\n\t\t\tfor(int testCase=1; testCase<=numTestCase; testCase++)\n\t\t\t{\n\t\t\t\tSystem.out.print(\"Case #\" + testCase + \": \");\n\t\t\t\t\n\t\t\t\t// Read each test case\n\t\t\t\t\n\t\t\t\t// Array\n\t\t\t\tString[] qArray = br.readLine().split(\" \");\n\t\t\t\t// Do you need to use long or double?\n\t\t\t\tint r = Integer.valueOf(qArray[0]);\n\t\t\t\tint c = Integer.valueOf(qArray[1]);\n\t\t\t\tint w = Integer.valueOf(qArray[2]);\n\t\t\t\t\n\t\t\t\tlong ansl = 0;\n\t\t\t\t\n\t\t\t\t// Logic goes here\n\t\t\t\tansl = r*c/w;\n\t\t\t\tansl += w;\n\t\t\t\tif((w == 1) ||(w == c) || (c%w == 0))\n\t\t\t\t{\n\t\t\t\t\tansl--;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// Print output\n\t\t\t\tSystem.out.println(ansl);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// Template ends here\n\t}\n\t\n}\n", "idx": "3135"}
{"func": "package googlejam3.p137;\nimport java.util.Scanner;\r\n\r\npublic class Brattleship {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint[][] dp = new int[11][11];\r\n\t\tdp[1][1] = 1;\r\n\r\n\t\tdp[2][1] = 2;\r\n\t\tdp[2][2] = 2;\r\n\r\n\t\tdp[3][1] = 3;\r\n\t\tdp[3][2] = 3;\r\n\t\tdp[3][3] = 3;\r\n\r\n\t\tdp[4][1] = 4;\r\n\t\tdp[4][2] = 3;\r\n\t\tdp[4][3] = 4;\r\n\t\tdp[4][4] = 4;\r\n\r\n\t\tdp[5][1] = 5;\r\n\t\tdp[5][2] = 4;\r\n\t\tdp[5][3] = 4;\r\n\t\tdp[5][4] = 5;\r\n\t\tdp[5][5] = 5;\r\n\r\n\t\tdp[6][1] = 6;\r\n\t\tdp[6][2] = 4;\r\n\t\tdp[6][3] = 4;\r\n\t\tdp[6][4] = 5;\r\n\t\tdp[6][5] = 6;\r\n\t\tdp[6][6] = 6;\r\n\r\n\t\tdp[7][1] = 7;\r\n\t\tdp[7][2] = 5;\r\n\t\tdp[7][3] = 5;\r\n\t\tdp[7][4] = 5;\r\n\t\tdp[7][5] = 6;\r\n\t\tdp[7][6] = 7;\r\n\t\tdp[7][7] = 7;\r\n\r\n\t\tdp[8][1] = 8;\r\n\t\tdp[8][2] = 5;\r\n\t\tdp[8][3] = 5;\r\n\t\tdp[8][4] = 5;\r\n\t\tdp[8][5] = 6;\r\n\t\tdp[8][6] = 7;\r\n\t\tdp[8][7] = 8;\r\n\t\tdp[8][8] = 8;\r\n\r\n\t\tdp[9][1] = 9;\r\n\t\tdp[9][2] = 6;\r\n\t\tdp[9][3] = 5;\r\n\t\tdp[9][4] = 6;\r\n\t\tdp[9][5] = 6;\r\n\t\tdp[9][6] = 7;\r\n\t\tdp[9][7] = 8;\r\n\t\tdp[9][8] = 9;\r\n\t\tdp[9][9] = 9;\r\n\r\n\t\tdp[10][1] = 10;\r\n\t\tdp[10][2] = 6;\r\n\t\tdp[10][3] = 6;\r\n\t\tdp[10][4] = 6;\r\n\t\tdp[10][5] = 6;\r\n\t\tdp[10][6] = 7;\r\n\t\tdp[10][7] = 8;\r\n\t\tdp[10][8] = 9;\r\n\t\tdp[10][9] = 10;\r\n\t\tdp[10][10] = 10;\r\n\r\n\t\tint T = in.nextInt();\r\n\t\tfor (int t = 0; t < T; t++) {\r\n\t\t\tint R = in.nextInt();\r\n\t\t\tint C = in.nextInt();\r\n\t\t\tint W = in.nextInt();\r\n\t\t\tSystem.out.println(\"Case #\" + (t + 1) + \": \" + dp[C][W]);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "3137"}
{"func": "package googlejam3.p140;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\n/**\r\n *\r\n * @author John\r\n */\r\npublic class Main \r\n{\r\n    /**\r\n     * @param args the command line arguments\r\n     */\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n        StringBuilder out = new StringBuilder();\r\n        \r\n        int testCases = Integer.parseInt(in.readLine());\r\n        String[] tokens;\r\n        \r\n        for(int testNumber = 1; testNumber <= testCases; testNumber++)\r\n        {\r\n            out.append(\"Case #\").append(testNumber).append(\": \");\r\n            \r\n            tokens = in.readLine().trim().split(\"\\\\s+\");\r\n            \r\n            int r = Integer.parseInt(tokens[0]);\r\n            int c = Integer.parseInt(tokens[1]);\r\n            int w = Integer.parseInt(tokens[2]);\r\n            \r\n            int numberNeededPerRowToGetHit = c / w;\r\n            int additionalNumberToSinkOnceHit;\r\n            \r\n            if (w > 1)\r\n            {\r\n                if (c > w && c % w != 0)\r\n                {\r\n                    additionalNumberToSinkOnceHit = w;\r\n                }\r\n                else\r\n                {\r\n                    additionalNumberToSinkOnceHit = w - 1;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                additionalNumberToSinkOnceHit = 0;\r\n            }\r\n            \r\n            int total = numberNeededPerRowToGetHit * r + additionalNumberToSinkOnceHit;\r\n            \r\n            out.append(total).append(\"\\n\");\r\n        }\r\n        \r\n        System.out.println(out);\r\n    }\r\n\r\n}\r\n", "idx": "3140"}
{"func": "package googlejam3.p141;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Brattleship {\r\n\tpublic static Scanner in = new Scanner(System.in);\r\n\tpublic static PrintWriter PW = new PrintWriter(System.out);\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tint cases = in.nextInt();\r\n\r\n\t\tfor (int c = 1; c <= cases; c++) {\r\n\t\t\tint result=0;\r\n\t\t\tint R = in.nextInt(), C = in.nextInt(), W=in.nextInt();\r\n\t\t\t\r\n\t\t\tresult = R*((C+W-1)/W)+W-1;\r\n\t\t\t\r\n\t\t\tPW.println(\"Case #\" + c + \": \" + result);\r\n\t\t}\r\n\r\n\t\tPW.close();\r\n\t}\r\n}", "idx": "3141"}
{"func": "package googlejam3.p142;\n\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.util.Scanner;\n\npublic class A {\n\n//\tpublic final static String INPUT_FILE_NAME = \"test.in\";\n//\tpublic final static String INPUT_FILE_NAME = \"A-small-attempt0.in\";\n\tpublic final static String INPUT_FILE_NAME = \"A-large.in\";\n\t\n\tpublic FileWriter outputWriter;\n\tpublic Scanner scanner;\n\tpublic StringBuilder output = new StringBuilder();\n\t\n\t\n\t\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\tA instance = new A();\n\t\tlong start = System.currentTimeMillis();\n\t\t\n\t\tFile temp = new File(\"output/\");\n\t\tif (!temp.exists()) {\n\t\t\ttemp.mkdir();\n\t\t}\n\t\t// Output file\n\t\tinstance.outputWriter = new FileWriter(\"output/output.txt\", false);\n\t\t// Input file\n\t\tinstance.scanner = new Scanner(new File(\"resources/\" + A.INPUT_FILE_NAME));\n\t\t// Commons variables\n\t\tint testCaseNumber = 0;\n\t\t// Test start\n\t\t{\n\t\t\tint nbTests = Integer.parseInt(instance.scanner.nextLine());\n\t\t\t\n\t\t\tfor (testCaseNumber = 0; testCaseNumber < nbTests; testCaseNumber++) {\n\t\t\t\tint testCaseResult = 0;\n\t\t\t\tString[] line = instance.scanner.nextLine().split(\" \");\n\t\t\t\tint r = Integer.parseInt(line[0]);\n\t\t\t\tint c = Integer.parseInt(line[1]);\n\t\t\t\tint w = Integer.parseInt(line[2]);\n\t\t\t\ttestCaseResult = (c / w) * r + (w - 1) + (c % w == 0 ? 0 : 1);\n\t\t\t\tinstance.output.append(\"Case #\" + (testCaseNumber+1) + \": \" + testCaseResult + \"\\n\");\n\t\t\t}\n\t\t}\n\t\t// Closing files\n\t\tinstance.outputWriter.write(instance.output.toString(), 0, instance.output.length());\n\t\tinstance.scanner.close();\n\t\tinstance.outputWriter.close();\n\t\t\n\t\tSystem.out.println(\"Finished in \" + (System.currentTimeMillis() - start) + \" ms\");\n\t}\n\t\n}\n", "idx": "3142"}
{"func": "package googlejam3.p143;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Solution {\r\n\t\r\n\tpublic static void main(String[] args) throws Throwable {\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tPrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\r\n\t\tStringTokenizer tokenizer = new StringTokenizer(in.readLine());\r\n\t\tint tn = Integer.parseInt(tokenizer.nextToken());\r\n\t\tfor (int test = 1; test <= tn; test++) {\r\n\t\t\t\r\n\t\t\ttokenizer = new StringTokenizer(in.readLine());\r\n\r\n\t\t\t/* start sol */\r\n\r\n\r\n\r\n\t\t\tint r = Integer.parseInt(tokenizer.nextToken());\r\n\t\t\tint c = Integer.parseInt(tokenizer.nextToken());\r\n\t\t\tint w = Integer.parseInt(tokenizer.nextToken());\r\n\r\n\t\t\tint res = c/w;\r\n\t\t\tres*=r;\r\n\t\t\tif(c%w !=0) {\r\n\t\t\t\tres++;\r\n\t\t\t}\r\n\t\t\tres+=w-1;\r\n\r\n\t\t\tout.print(\"Case #\" + test + \": \" + res);\r\n\t\t\t/* end sol */\r\n\r\n\r\n\r\n\r\n\t\t\tif(test < tn) {\r\n\t\t\t\tout.println();\r\n\t\t\t}\r\n\r\n\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}", "idx": "3143"}
{"func": "package googlejam3.p144;\nimport java.io.*;\r\nimport java.util.Scanner;\r\npublic class q1{\r\n\tpublic static void main(String[]args) throws UnsupportedEncodingException,FileNotFoundException{\r\n\t\tFileInputStream fis = new FileInputStream(\"A-large.in\") ;\r\n\t\tScanner sc = new Scanner(fis);\r\n\t\tPrintWriter writer = new PrintWriter(\"out2.txt\", \"UTF-8\");\r\n\t\tlong w,r,c,res;\r\n\t\tint i,j;\r\n\t\tint test = sc.nextInt();\r\n\t\tfor(i=1;i<=test;i++){\r\n\t\t\tr=sc.nextLong();\r\n\t\t\tc=sc.nextLong();\r\n\t\t\tw=sc.nextLong();\r\n\t\t\tres=r*(c/w)+(w-1);\r\n\t\t\tif(c%w!=0)\r\n\t\t\tres=res+1;\r\n\t\t\twriter.println(\"Case #\"+i+\": \"+res);\r\n\t\t\tSystem.out.println(\"Case #\"+i+\": \"+res);\r\n\t\t}\r\n\t\twriter.close();\r\n\t}\r\n}", "idx": "3144"}
{"func": "package googlejam3.p145;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class Brattleship{\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner scanner = null;\r\n\t\ttry {\r\n\t\t\tscanner = new Scanner(new File(\"input.txt\"));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\tSystem.out.println(\"Couldn't open input file.\\n\" + e.getMessage());\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tFileWriter writer = null;\r\n\t\ttry {\r\n\t\t\twriter = new FileWriter(new File(\"output.txt\"));\r\n\t\t} catch (IOException e) {\r\n\t\t\tSystem.out.println(\"Couldn't open/make output file.\" + e.getMessage());\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tint numTrials = scanner.nextInt();\r\n\t\tfor (int trial = 1; trial <= numTrials; trial++) {\r\n\t\t\ttry {\r\n\t\t\t\twriter.write(\"Case #\" + trial + \": \");\r\n\t\t\t\tint R = scanner.nextInt();\n\t\t\t\tint C = scanner.nextInt();\n\t\t\t\tint W = scanner.nextInt();\n\t\t\t\tint steps = R*(C/W) + W - 1; // R*(C/W) + (W-1)\n\t\t\t\tif (C % W != 0)\n\t\t\t\t\tsteps++;\n\t\t\t\twriter.write(steps + \"\");\r\n\t\t\t\twriter.write(\"\\n\");\r\n\t\t\t}catch (IOException e) {\r\n\t\t\t\tSystem.out.println(\"Error on trial #\" + trial + \"\\n\" + e.getMessage());\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\ttry {\r\n\t\t\twriter.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tscanner.close();\r\n\t\tSystem.out.println(\"Completed Trials!\");\r\n\t}\r\n}\r\n", "idx": "3145"}
{"func": "package googlejam3.p147;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class Solver {\n    static Scanner input;\n    static Writer  output;\n    public static void main(String args[]) {\n        if(args.length != 1){\n            System.out.println(\"Please specify the input file\");\n            return;\n        }\n\n\t\tString filename = args[0];\n\t\tFile f = new File(filename);\n\t\tBufferedReader br;\n\n        if (!f.exists()) {\n            System.out.println(\"Couldn't find file \"+filename);\n            return;\n        } else if (f.isDirectory()) {\n            System.out.println(filename+\" is a directory\");\n            return;\n        }\n\n        try {\n\t\t\tbr = new BufferedReader (new FileReader (f));\n\t\t\tinput = new Scanner(br);\n        } catch (IOException iox){\n\t\t    System.out.println(\"Problem reading \" + filename );\n        }\n\n        try {\n            output = new BufferedWriter(\n                        new OutputStreamWriter(\n                            new FileOutputStream(filename+\".out\"), \"utf-8\"));\n            int T = input.nextInt();\n\t\t\tfor(int caseNum=0; caseNum<T; caseNum++){\n\t\t\t    int R = input.nextInt();\n\t\t\t    int C = input.nextInt();\n\t\t\t    int W = input.nextInt();\n\t\t\t\n\t\t\t    int clearCount = C/W; //will round down\n\t\t\t    int hasExtra = C%W;\n\t\t\t    int findCount = clearCount + (W-1) + ((hasExtra!=0)?1:0);\n\t\t\t    int result = clearCount*(R-1) + findCount;\n\t\t\t\n\t\t\t    output.write(\"Case #\"+(caseNum+1)+\": \");\n\t\t\t    output.write(\"\"+result);\n\t\t\t    output.write(\"\\n\");\n\t\t\t}\n        } catch (IOException ex) {\n            System.out.println(\"Couldn't open an output file\");\n            return;\n        }\n\n        try{\n            output.close();\n            input.close();\n        } catch (IOException ex) {\n        }\n    }\n}\n\n", "idx": "3147"}
{"func": "package googlejam3.p149;\nimport java.io.BufferedInputStream;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class TaskA {\r\n\r\n    public static void main(String[] args) {\r\n        long time = System.currentTimeMillis();\r\n        Scanner sc = new Scanner(new BufferedInputStream(System.in));\r\n        int t = sc.nextInt();\r\n        for (int i = 1; i <= t; i++) {\r\n            int r = sc.nextInt();\r\n            int c = sc.nextInt();\r\n            int w = sc.nextInt();\r\n            int res = c / w;\r\n            if (c % w == 0) {\r\n                res = res * r + w -1;\r\n            }\r\n            else {\r\n                res = res * r + w;\r\n            }\r\n            System.out.println(\"Case #\" + i + \": \" + (long) res);\r\n        }\r\n        sc.close();\r\n        System.err.println(System.currentTimeMillis() - time);\r\n    }\r\n\r\n}\r\n", "idx": "3149"}
{"func": "package googlejam3.p150;\nimport java.util.Scanner;\n\n\npublic class Battleship {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint T = scan.nextInt();\n\t\tfor(int t = 1; t <= T; t++) {\n\t\t\tint R = scan.nextInt();\n\t\t\tint C = scan.nextInt();\n\t\t\tint W = scan.nextInt();\n\t\t\tSystem.out.println(\"Case #\" + t + \": \" + (R*(C/W) + W-1 + (C%W==0?0:1)));\n\t\t}\n\t}\n}\n", "idx": "3150"}
{"func": "package googlejam3.p154;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.math.BigInteger;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class A {\r\n\r\n    \r\n\r\n    // *************************************************************************************\r\n    // *********************************** FRAMEWORK\r\n    // ***************************************\r\n    // *************************************************************************************\r\n\r\n    public static BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\r\n    public static boolean isStandardInput = false;\r\n\r\n    public static File input;\r\n    public static FileReader inputReader;\r\n    public static BufferedReader in;\r\n\r\n    public static File output;\r\n    public static FileWriter outputWriter;\r\n    public static BufferedWriter out;\r\n\r\n    public static StringTokenizer st;\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        isStandardInput = true;\r\n        output = new File(\"test.out\");\n\t\toutputWriter = new FileWriter(output);\n\t\tout = new BufferedWriter(outputWriter);\r\n        isStandardInput = false;\n\t\tinput = new File(\"A-large\" + \".in\");\n\t\tinputReader = new FileReader(input);\n\t\tin = new BufferedReader(inputReader);\n\t\toutput = new File(\"A-large\" + \".out\");\n\t\toutputWriter = new FileWriter(output);\n\t\tout = new BufferedWriter(outputWriter);\n\t\t\n\t\tint T = Integer.parseInt(TOKEN());\n\t\t\n\t\tfor (int t = 0; t < T; t++) {\n\t\t    int R = Integer.parseInt(TOKEN());\n\t\t    int C = Integer.parseInt(TOKEN());\n\t\t    int W = Integer.parseInt(TOKEN());\n\t\t    int answer = 0;\n\t\t\n\t\t    for (int i = 0; i < R; i++) {\n\t\t        answer += C / W;\n\t\t    }\n\t\t    if (C % W != 0) {\n\t\t        answer += 1;\n\t\t    }\n\t\t    answer += (W - 1);\n\t\t\tString line = \"Case #\" + (t + 1) + \": \" + answer;\n\t\t\n\t\t    out.write(line);\n\t\t\tout.write(\"\\n\");\n\t\t\tSystem.out.println(line);\n\t\t}\r\n        if (in != null)\n\t\t    in.close();\n\t\tif (inputReader != null)\n\t\t    inputReader.close();\n\t\t\n\t\tif (out != null)\n\t\t    out.flush();\n\t\tif (out != null)\n\t\t    out.close();\n\t\tif (outputWriter != null)\n\t\t    outputWriter.close();\r\n    }\r\n\r\n    \r\n\r\n    // **************** PRINT METHODS ****************\r\n\r\n    \r\n\r\n    // **************** INPUT DECLARATION ****************\r\n\r\n    \r\n\r\n    // **************** INPUT READING ****************\r\n\r\n    static String TOKEN() throws IOException {\r\n        while (st == null || !st.hasMoreTokens())\r\n            st = new StringTokenizer(isStandardInput ? stdin.readLine() : in.readLine());\r\n        return st.nextToken();\r\n    }\r\n}\r\n", "idx": "3154"}
{"func": "package googlejam3.p159;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\nimport java.util.StringTokenizer;\r\nimport java.util.Arrays;\r\n\r\nclass Main\r\n{\r\n\tstatic BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\tstatic Scanner sc = new Scanner(new InputStreamReader(System.in));\r\n\r\n\tpublic static void main (String[] args) throws java.lang.Exception {\r\n\t\tint T = Integer.parseInt(br.readLine());\r\n\t\tfor (int i=0; i<T; i++){\r\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tint R = Integer.parseInt(st.nextToken());\n\t\t\tint C = Integer.parseInt(st.nextToken());\n\t\t\tint W = Integer.parseInt(st.nextToken());\n\t\t\t\n\t\t\tint count = (int)(W + Math.ceil(((double)(C-W)/W)));\n\t\t\t\n\t\t\tint putout = (int)(Math.floor(((double)(C/W)))) * (R-1);\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + (count + putout));\r\n\t\t}\r\n\t}\r\n}\r\n\r\n", "idx": "3159"}
{"func": "package googlejam3.p160;\nimport java.io.*;\r\n\r\npublic class A {\r\n\tstatic PrintWriter pw;\r\n\tpublic static void main(String args[]) throws Exception{\r\n\t\tBufferedReader input = new BufferedReader(new FileReader(\"../GoogleCodeJam2015R1C/io/A-large.in\"));\r\n\t\tpw = new PrintWriter(new FileWriter(\"../GoogleCodeJam2015R1C/io/output.txt\"));\r\n\t\t\r\n\t\tint T = Integer.parseInt(input.readLine());\r\n\t\tfor(int i = 0 ; i < T ; i++){\r\n\t\t\tString[] s = input.readLine().split(\" \");\r\n\t\t\tint R = Integer.parseInt(s[0]);\r\n\t\t\tint C = Integer.parseInt(s[1]);\r\n\t\t\tint W = Integer.parseInt(s[2]);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(C % W == 0){\r\n\t\t\t\tpw.println(\"Case #\"+(i+1)+\": \"+(( C / W) * (R - 1) + ((C / W) + (W - 1))));\r\n\t\t\t}else{\r\n\t\t\t\tpw.println(\"Case #\"+(i+1)+\": \"+(( C / W) * (R - 1) + (C / W) + W));\r\n\t\t\t}\r\n\t\t}\r\n\t\tpw.flush();\r\n\t\tinput.close();\r\n\t\tpw.close();\r\n\t}\r\n}\r\n", "idx": "3160"}
{"func": "package googlejam3.p058;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    final String LINE_SPR = System.getProperty(\"line.separator\");\n    final int BIG_MOD = 1000000007;\n\n    public static void main(String[] args) throws Exception {\n        Main r = new Main();\n\t\tint nt = Integer.parseInt(r.br.readLine().trim());\n\t\tfor(int t = 0; t < nt; t++) {\n\t\t    String[] nums = r.br.readLine().split(\" \");\n\t\t    int r1 = Integer.parseInt(nums[0]);\n\t\t    int c = Integer.parseInt(nums[1]);\n\t\t    int w = Integer.parseInt(nums[2]);\n\t\t\n\t\t    int max = (c / w) * (r1 - 1);\n\t\t    max += ((c - 1) / w) + w;\n\t\t    System.out.println(\"Case #\" + (t+1) + \": \" + Integer.toString(max));\n\t\t}\n    }\n}\n\n\n\n\n", "idx": "3058"}
{"func": "package googlejam3.p094;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class ProblemA {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader reader = new BufferedReader(new FileReader(\"A-large (2).in\"));\r\n\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(\"a.out\"));\r\n\t\tint tests = Integer.parseInt(reader.readLine());\r\n\t\tint currTest = 1;\r\n\t\twhile (currTest <= tests) {\r\n\t\t\tString[] line = reader.readLine().split(\" \");\r\n\t\t\tint R = Integer.parseInt(line[0]);\r\n\t\t\tint C = Integer.parseInt(line[1]);\r\n\t\t\tint W = Integer.parseInt(line[2]);\r\n\t\t\tlong count = 0;\r\n\t\t\tcount += C / W;\r\n\t\t\tcount *= R;\r\n\t\t\tif (W > 1) {\r\n\t\t\t\tif ((C % W) !=0) {\r\n\t\t\t\t\tcount += W;\r\n\t\t\t\t}\r\n\t\t\t\telse count += W - 1;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+currTest+\": \"+count);\r\n\t\t\tcurrTest++;\r\n\t\t}\r\n\t\treader.close();\r\n\t\twriter.flush();\r\n\t\twriter.close();\r\n\t}\r\n\r\n}\r\n", "idx": "3094"}
{"func": "package googlejam3.p132;\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class Main {\n    private static StreamTokenizer in;\n    private static Scanner ins;\n    private static PrintWriter out;\n\n    public static void main(String[] args) {\n\n        try {\n            in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n            ins = new Scanner(System.in);\n            out = new PrintWriter(System.out);\n            try {\n                if (System.getProperty(\"xDx\") != null) {\n                    in = new StreamTokenizer(new BufferedReader(new FileReader(\"input.txt\")));\n                    ins = new Scanner(new FileReader(\"input.txt\"));\n                    out = new PrintWriter(new FileWriter(\"output.txt\"));\n                }\n            } catch (Exception e) {\n                in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\n                ins = new Scanner(System.in);\n                out = new PrintWriter(System.out);\n            }\n\t\t\tMain r = new Main();\n\t\t\tMain.in.nextToken();\n            int T = (int) Main.in.nval;\n\t\t\tfor (int i = 0; i < T; i++) {\n\t\t\t    int r1 = r.nextInt(), c = r.nextInt(), w = r.nextInt();\n\t\t\t    int answ = (c / w) * r1;\n\t\t\t    answ += (c % w > 0 ? w : w - 1);\n\t\t\t    Main.out.printf(\"Case #%d: %d\\n\", i + 1, answ);\n\t\t\t}\n            out.close();\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    private int nextInt() throws IOException {\n        in.nextToken();\n        return (int) in.nval;\n    }\n\n}\n", "idx": "3132"}
{"func": "package googlejam3.p161;\nimport java.io.IOException;\n\n/**\n * Copyright - Arghya Sur\n * Created by sur on 5/10/15.\n */\npublic class R1CA {\n    public static void main(String[] args) throws IOException {\n\n        java.io.BufferedReader r = new java.io.BufferedReader\n                (new java.io.InputStreamReader (System.in));\n\n        String line;\n        int c = 0;\n        int t = Integer.parseInt(r.readLine());\n\n        while(t > 0) {\n            line = r.readLine();\n            String[] components = line.split(\" \");\n            int R = Integer.parseInt(components[0]);\n            int C = Integer.parseInt(components[1]);\n            int W = Integer.parseInt(components[2]);\n\n            int confirmedFirstHit = R * (C / W );\n            int a = (C % W == 0) ? 0: 1;\n\n            System.out.println(\"Case #\" + (c + 1) + \": \" + (confirmedFirstHit + W - 1 + a));\n            t--;\n            c++;\n        }\n    }\n}\n", "idx": "3161"}
{"func": "package googlejam3.p195;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nimport static java.lang.Math.*;\r\nimport static java.util.Arrays.*;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws IOException {\r\n    String        pb        = \"A\";\r\n    Scanner       sc        = new Scanner(new FileReader(new File(pb+\".in\")));\r\n    PrintWriter   out       = new PrintWriter(new File(pb+\".out\"));\r\n\t\tStringBuilder resultat  = new StringBuilder(\"\");\r\n\t\tlong time = System.currentTimeMillis();\r\n\t\t\r\n\t\t//TEST CASES----------------------------------------------------\r\n\t\tint TC = sc.nextInt();\r\n    for (int tc = 1; tc <= TC; tc++) {\r\n      if(tc!=1) resultat.append(\"\\n\");\r\n      resultat.append(\"Case #\"+tc+\": \");\r\n    \r\n      //READ----------------------------------------------------\r\n      int R = sc.nextInt();\r\n      int C = sc.nextInt();\r\n      int W = sc.nextInt();\r\n      \r\n      \r\n\t\t\t//SOLVE----------------------------------------------------\r\n\t\t\tlong res = 0;\r\n\t\t\t\r\n\t\t\tres += (C/W)*(R-1);\r\n\t\t\tres += C/W-1;\r\n\t\t\t\r\n\t\t\tlong d = W+C%W;\r\n\t\t\tif(d==W)\r\n\t\t\t  res+=W;\r\n\t\t\telse\r\n\t\t\t  res+=W+1;\r\n\t\t\t\r\n      //PRINT--------------------------------------------------\r\n\t\t\tSystem.out.println(res);\r\n\t\t\tresultat.append(res);\r\n\t\t\tSystem.out.println(\"Finished testcase \" + tc + \", time = \" + (System.currentTimeMillis() - time));\r\n\t\t}\r\n\t\t\r\n    //CLOSE----------------------------------------------------\r\n\t\tout.print(resultat);\r\n\t\tout.close(); sc.close();\r\n\t}\r\n\r\n}", "idx": "3195"}
{"func": "package googlejam3.p223;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\npublic class A {\n\n    Scanner             sc       = new Scanner(getClass().getResourceAsStream(IN));\n    static final String FILENAME = \"A-small\";\n    static final String IN       = FILENAME + \".in\";\n    static final String OUT      = FILENAME + \".out\";\n    PrintStream         out      = System.out;\n\n    public static void main(String args[]) throws Exception {\n        A r = new A();\n\t\tint t = r.sc.nextInt();\n\t\tfor (int i = 1; i <= t; i++) {\n\t\t    r.out.print(\"Case #\" + i + \": \");\n\t\t    int ans = 0;\n\t\t\tint R = r.sc.nextInt();\n\t\t\tint C = r.sc.nextInt();\n\t\t\tint W = r.sc.nextInt();\n\t\t\t\n\t\t\tans += R * ((C - 1)/W);\n\t\t\tans += R * W;\n\t\t\t\n\t\t\tr.out.println(ans);\n\t\t}\n\t\tr.sc.close();\n\t\tr.out.close();\n    }\n}", "idx": "3223"}
{"func": "package googlejam3.p250;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A{\r\n  public static void main (String[] args) throws Exception{\r\n    Scanner in = new Scanner (new FileReader(\"A-large.in\"));\r\n    PrintWriter out = new PrintWriter (\"A.out\");\r\n    int cases = in.nextInt();\r\n    for (int casenum = 1; casenum <= cases; casenum++){\r\n      \r\n      int r = in.nextInt();\r\n      int c = in.nextInt();\r\n      int w = in.nextInt();\r\n      int score = c/w*(r - 1);\r\n      score += (int)Math.ceil((double)c/(double)w);\r\n      score += w - 1;\r\n      \r\n      out.println (\"Case #\" + casenum + \": \" + score);\r\n    }\r\n    out.close();\r\n    in.close();\r\n  }\r\n}", "idx": "3250"}
{"func": "package googlejam3.p288;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Brattleship {\n\n    private static final String INPUT_FILE_NAME = \"/home/wlq/workspace/leetcode/src/codejam/A-large.in\";\n\n    public static void main(String[] args) throws IOException {\n        File file = new File(INPUT_FILE_NAME);\n        InputStreamReader in = null;\n        StringBuffer pzFile = new StringBuffer();\n        in = new InputStreamReader(new FileInputStream(file));\n        BufferedReader buffer = new BufferedReader(in);\n        String line = null;\n        int testCaseNumber = 0;\n        int testCaseIndex=1;\n        boolean isFirstLine = true;\n        while ((line = buffer.readLine()) != null) {\n            if (isFirstLine) {\n                testCaseNumber = Integer.valueOf(line.trim());\n                isFirstLine = false;\n                continue;\n            }\n            String[] tempString = line.split(\" \");\n            int r = Integer.valueOf(tempString[0].trim());\n            int c = Integer.valueOf(tempString[1].trim());\n            int w = Integer.valueOf(tempString[2].trim());\n\n            int result = 0;\n\n            result = c / w;\n            result = result * r;\n            if (c % w == 0) {\n                result += w - 1;\n            } else {\n                result += w;\n            }\n\n            // begin to handle\n\n            // System.out.println(\"Case #\" + testCaseIndex + \": \" + additionalClap);\n            File outFile = new File(INPUT_FILE_NAME + \".out\");\n\t\t\tif (!outFile.exists()) {\n\t\t\t    try {\n\t\t\t        outFile.createNewFile();\n\t\t\t    } catch (IOException e) {\n\t\t\t        // TODO Auto-generated catch block\n\t\t\t        e.printStackTrace();\n\t\t\t    }\n\t\t\t}\n\t\t\tFileWriter fileWritter = null;\n\t\t\ttry {\n\t\t\t    fileWritter = new FileWriter(outFile, true);\n\t\t\t    BufferedWriter bufferWritter = new BufferedWriter(fileWritter);\n\t\t\t    bufferWritter.append(\"Case #\" + testCaseIndex + \": \" + result + \"\\n\");\n\t\t\t    bufferWritter.flush();\n\t\t\t    fileWritter.flush();\n\t\t\t    bufferWritter.close();\n\t\t\t} catch (IOException e) {\n\t\t\t    e.printStackTrace();\n\t\t\t}\n            testCaseIndex++;\n\n        }\n\n    }\n\n}\n", "idx": "3288"}
{"func": "package googlejam3.p317;\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    static Scanner stdin = new Scanner(System.in);    \n    \n    public static void main(String[] args) {\n        int cases = stdin.nextInt();\n        for (int i = 0; i < cases; i++) {\n            Main mt = new Main();\n            mt.r = Main.stdin.nextInt();\n\t\t\tmt.c = Main.stdin.nextInt();\n\t\t\tmt.w = Main.stdin.nextInt();\n            int full = mt.c/mt.w;\n\t\t\tint first = full*mt.r;\n\t\t\tmt.result = first + mt.w - 1 + (mt.c%mt.w==0?0:1);\n            System.out.println(\"Case #\"+(1+i)+\": \"+\"\"+mt.result);\n        }\n    }    \n\n    int r,c,w,result;\n    \n}\n", "idx": "3317"}
{"func": "package googlejam3.p347;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\n/**\r\n *\r\n * @author Philip Lanaras\r\n */\r\npublic class CodeJam_Round {\r\n\r\n    /**\r\n     * @param args the command line arguments\r\n     */\r\n    public static void main(String[] args) throws IOException {\r\n        \r\n        int cases;\r\n        \r\n        final String filename = \"aA-large.in\";\r\n        final String outFile = \"aA-large.out\";\r\n\r\n        String[] vals;\r\n        //----------------------------Inits-Go-Here----------------------------\\\\\r\n        \r\n        StringBuilder str = new StringBuilder();\r\n        String temp;\r\n        \r\n        try (BufferedReader reader = new BufferedReader(new FileReader(filename));\r\n                BufferedWriter writer = new BufferedWriter(new FileWriter(outFile))) {\r\n            \r\n            //Num of Cases\r\n            temp = reader.readLine();\r\n            cases = Integer.valueOf(temp);\r\n            \r\n            for (int i = 1; i <= cases; ++i) {\r\n                temp = reader.readLine();\r\n                vals = temp.split(\" \");\r\n                \r\n                //------------------------Inits-Go-Here------------------------\\\\\r\n                int R = Integer.parseInt(vals[0]);\r\n                int C = Integer.parseInt(vals[1]);\r\n                int W = Integer.parseInt(vals[2]);\r\n                int sum = 0;\r\n\r\n                sum += (C / W) * (R - 1);\r\n                sum += (C - W) / W;\r\n                sum += W;\r\n\r\n                if (C % W != 0) {\r\n                    sum++;\r\n                }\r\n\r\n\r\n\r\n\r\n                str.append(\"Case #\").append(i).append(\": \").append(sum);\r\n\r\n                System.out.println(str.toString());\r\n\r\n                writer.write(str.toString());\r\n                writer.newLine();\r\n\r\n                str = new StringBuilder();\r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n    \r\n}\r\n", "idx": "3347"}
{"func": "package googlejam3.p383;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Brattleship {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n    \tString path = \"C:\\\\Users\\\\Ziming\\\\Downloads\\\\\";\r\n\r\n        String input = path + \"A-large.in\";\r\n        String output = path + \"A-large.out\";\r\n\r\n\r\n        List<String> inputLines = new ArrayList<String>();\r\n\r\n        BufferedReader reader = new BufferedReader(new FileReader(input));\r\n        String line = reader.readLine();\r\n\r\n        while (line != null) {\r\n            inputLines.add(line);\r\n            line = reader.readLine();\r\n        }\r\n\r\n        reader.close();\r\n\r\n        StringBuilder outputResult = new StringBuilder();\r\n\r\n        int totalCase = Integer.parseInt(inputLines.get(0));\r\n        inputLines.remove(0);\r\n\r\n        for (int cn = 0; cn < totalCase; cn++) {\r\n            String caseResult = \"\";\r\n            \r\n            // -------------------------------------------\r\n            // Solve problem, put result in caseResult.\r\n            \r\n            String ln = inputLines.get(0);\r\n            inputLines.remove(0);\r\n            \r\n            String [] paramStrs = ln.split(\" \");\r\n            int R = Integer.parseInt(paramStrs[0]);\r\n            int C = Integer.parseInt(paramStrs[1]);\r\n            int W = Integer.parseInt(paramStrs[2]);\r\n            \r\n//            System.out.println(String.format(\"%d %d %d\", R, C, W));\r\n            if(W == 1) {\r\n            \tcaseResult = Integer.toString(R*C);\r\n            } else {\r\n            \tint s = 0;\r\n            \ts += (C / W) * R - 1;\r\n            \tint c = C - (C / W - 1) * W;\r\n            \tint e = c - W;\r\n            \r\n            \tif(e > 0) {\r\n            \t\ts += 1;\r\n            \t}\r\n            \ts += W;\r\n            \tcaseResult = Integer.toString(s);\r\n            }\r\n\r\n            \r\n            //caseResult = \"0\";\r\n            \r\n            // Solve problem end.\r\n            // -------------------------------------------\r\n            \r\n            String outputLine = String\r\n                    .format(\"Case #%d: %s\", cn + 1, caseResult);\r\n\r\n            System.out.println(outputLine);\r\n            if(outputResult.length() > 0) {\r\n                outputResult.append(\"\\n\");\r\n            }\r\n            outputResult.append(outputLine);\r\n        }\r\n\r\n\r\n        PrintWriter writer = new PrintWriter(output);\r\n        writer.print(outputResult.toString());\r\n        writer.flush();\r\n        writer.close();\r\n        \r\n        System.out.println(\"program finished :)\");\r\n    }\r\n}\r\n\r\n\r\n", "idx": "3383"}
{"func": "package googlejam3.p415;\nimport java.io.File;\r\nimport java.math.*;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tFile file = new File(\"A-large.in\");\r\n\t\tScanner stdin = new Scanner(file);\r\n\t\t//Scanner stdin = new Scanner(System.in);\r\n\t\tint numCases = stdin.nextInt();\r\n\t\tfor(int i = 1; i<=numCases; i++){\r\n\t\t\r\n\t\t}\r\n\t}\r\n}", "idx": "3415"}
{"func": "package googlejam3.p452;\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class CodeJamA {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tScanner input = new Scanner(new FileReader(\"A-small-attempt0.in\"));\r\n\t\ttry {\r\n\t\t\t// READ PROBLEM DATA\r\n\t\t\tInteger testCases = input.nextInt();\r\n\t\t\tinput.nextLine();\r\n\t\t\tfor (int i = 1; i <= testCases; i++) {\r\n\t\t\t\tint rows = input.nextInt();\r\n\t\t\t\tint columns = input.nextInt();\r\n\t\t\t\tint width = input.nextInt();\r\n\t\t\t\t\r\n\t\t\t\tint minimumHitsPerRow = columns / width + (columns % width == 0 ? 0 : 1);\r\n\t\t\t\tint totalInitialHits = minimumHitsPerRow * rows;\r\n\t\t\t\t\r\n\t\t\t\tint totalHits = totalInitialHits + width - 1;\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(\"Case #\" + i + \": \" + totalHits);\r\n\t\t\t}\r\n\r\n\t\t} finally {\r\n\t\t\tinput.close();\r\n\t\t}\r\n\t}\r\n\r\n}", "idx": "3452"}
{"func": "package googlejam3.p478;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\t try {\r\n\t\t System.setOut(new PrintStream(\"src/output.out\"));\r\n\t\t } catch (FileNotFoundException e) {\r\n\t\t e.printStackTrace();\r\n\t\t }\r\n\t\t\r\n\t\t Scanner in = null;\r\n\t\t try {\r\n\t\t in = new Scanner(new File(\"src/A-small-attempt1 (2).in\"));\r\n\t\t } catch (FileNotFoundException e) {\r\n\t\t e.printStackTrace();\r\n\t\t }\r\n\r\n//\t\tScanner in = new Scanner(System.in);\r\n\t\tint t = in.nextInt();\r\n\t\tfor (int i = 0; i < t; i++) {\r\n\t\t\tint res = 0;\r\n\t\t\tint r = in.nextInt();\r\n\t\t\tint c = in.nextInt();\r\n\t\t\tint w = in.nextInt();\r\n\t\t\t\r\n\t\t\tif(w == c) {\r\n\t\t\t\tres = c;\r\n\t\t\t} else {\r\n\t\t\t\tif(w == 1) {\r\n\t\t\t\t\tres = c;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tint cheats = c / w;\r\n\t\t\t\t\tif(cheats <= 1) {\r\n\t\t\t\t\t\tres = w + 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(c % w == 0) {\r\n\t\t\t\t\t\t\tres = w + cheats - 1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tres = w + cheats;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + res);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "3478"}
{"func": "package googlejam3.p512;\nimport java.io.*;\n\npublic class ProblemA{\n\n\tpublic static void main(String[] args){\n\t\ttry{\n\t\t\tFileReader in = new FileReader(\"A-small-attempt0.in\");\n\t\t\tBufferedReader reader = new BufferedReader(in);\n\t\t\tString line = null;\n\t\t\tString text = \"\";\n\t\t\tint i = 0;\n\t\t\twhile ((line = reader.readLine()) != null) {\n\t\t\t\ttext = text + line + \" \";\n\t\t\t}\n\t\t\tString[] parts = text.split(\"\\\\s\");\n\t\t\tInteger testCases = Integer.valueOf(parts[0]);\n\t\t\tInteger columns, rows, width, temp;\n\t\t\tint[] answer = new int[testCases];\n\t\t\tfor(int i1 = 0; i1 < testCases; i1++){\n\t\t\t\ttemp = 0;\n\t\t\t\trows = Integer.valueOf(parts[(i1*3+1)]);\n\t\t\t\tcolumns = Integer.valueOf(parts[(i1*3+2)]);\n\t\t\t\twidth = Integer.valueOf(parts[(i1*3+3)]);\n\t\t\t\tif(columns%width == 0){\n\t\t\t\t\ttemp = (columns/width)+width-1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttemp = (columns/width)+width;\n\t\t\t\t}\n\t\t\t\ttemp = temp*rows;\n\t\t\t\tanswer[i1] = temp;\n\t\t\t}\n\t\t\ttry{\n\t\t\t\tPrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n\t\t\t\t\n\t\t\t\tfor(int j = 0; j < testCases; j++){\n\t\t\t\t\tint place = j+1;\n\t\t\t\t\t\n\t\t\t\t\tout.println(\"Case #\"+place+\": \"+answer[j]);\n\t\t\t\t}\n\t\t\t\tout.close();\n\t\t\t}catch(Exception e){\n\t\t\t\te.printStackTrace();}\n\t\t}catch(Exception e){e.printStackTrace();}\n\t}\n}", "idx": "3512"}
{"func": "package googlejam3.p162;\nimport java.io.*;\r\nimport java.util.*;\r\n//May 10, 2015\r\npublic class Brattleships \r\n{\r\n  public static void main (String [] args) throws IOException\r\n  {\r\n    BufferedReader input = new BufferedReader (new FileReader (\"A-large (1).in\"));\r\n    PrintWriter output = new PrintWriter (new FileWriter (\"output.txt\"));\r\n    int count = Integer.parseInt(input.readLine ());\r\n    \r\n    for (int counter = 1; counter <= count; counter ++)\r\n    {\r\n      String [] variables = input.readLine ().split (\" \");\r\n      \r\n      int rows = Integer.parseInt (variables [0]);\r\n      int columns = Integer.parseInt (variables [1]);\r\n      int width = Integer.parseInt (variables [2]);\r\n      \r\n      int answer = rows*((int)Math.floor ((columns*1.0)/(width*1.0))) + width;\r\n      if (columns % width == 0)\r\n        answer --;\r\n      \r\n      \r\n      \r\n      \r\n      \r\n      output.println (\"Case #\" + counter + \": \" + answer);\r\n    }\r\n    output.close ();\r\n  }\r\n}", "idx": "3162"}
{"func": "package googlejam3.p169;\nimport java.util.*;\r\n\r\npublic class Problem1 {\r\n\r\n\tstatic int solve1(int r, int c, int w) {\r\n\t\tif(c % w == 0)\r\n\t\t\treturn r*(c/w) + w-1;\r\n\t\treturn r*(c/w) + w;\r\n\t}\r\n\r\n\tpublic static void main(String... args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint T = in.nextInt();\r\n\t\tfor(int i=1; i <= T; i++) {\r\n\t\t\tint ans = solve1(in.nextInt(), in.nextInt(), in.nextInt());\r\n\t\t\tSystem.out.println(\"Case #\" + i + \": \" + ans);\r\n\t\t}\r\n\t\t\r\n\t\tin.close();\r\n\t}\r\n\r\n\r\n}", "idx": "3169"}
{"func": "package googlejam3.p170;\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = null;\r\n        PrintWriter out = null;\r\n        try {\r\n            //these variables handle input and output from plain text files\r\n            in = new Scanner(new FileReader(\"input.in\"));\r\n            out = new PrintWriter(\"output.txt\");\r\n\r\n            int cases = in.nextInt();\r\n            for (int caseIndex = 1; caseIndex <= cases ; caseIndex++) {\r\n\r\n                int r = in.nextInt();\r\n                int c = in.nextInt();\r\n                int w= in.nextInt();\r\n                int result = (c / w) * r + (w-1);\r\n                if(c%w!=0){\r\n                    result++;\r\n                }\r\n                out.printf(\"Case #%d: %d\\n\",caseIndex,result);\r\n                out.flush();\r\n\r\n\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (in != null)\r\n                in.close();\r\n            if (out != null)\r\n                out.close();\r\n        }\r\n    }\r\n}\r\n", "idx": "3170"}
{"func": "package googlejam3.p172;\nimport java.io.BufferedWriter;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class Brattleship {\r\n\r\n\tprivate static String inFile=\"A-large.in\";\r\n\tprivate static String outFile=\"A-large.out\";\r\n\tprivate static String encoding = \"UTF-8\";\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tScanner scanner = new Scanner(new FileInputStream(inFile), encoding);\n\t\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(outFile));\n\t\t\tint nCases = Integer.parseInt(scanner.nextLine());\n\t\t\t\n\t\t\tfor (int i = 0; i < nCases; i++) {\n\t\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \" start\");\n\t\t\t\tString[] caseValues = scanner.nextLine().split(\" \");\n\t\t\t\tint R=Integer.parseInt(caseValues[0]), C=Integer.parseInt(caseValues[1]), W=Integer.parseInt(caseValues[2]);\n\t\t\t\tSystem.out.println(\" R=\" + R + \" C=\"+C+\" W=\"+W);\n\t\t\t\tint score = R*(C/W)+W;\n\t\t\t\tif (C%W==0)\n\t\t\t\tscore -=1;\n\t\t\t\tString val = String.valueOf(score);\n\t\t\t\twriter.write(\"Case #\" + (i + 1) + \": \" + val + \"\\n\");\n\t\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \" result: \"+val);\n\t\t\t}\n\t\t\twriter.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tSystem.exit(1);\r\n\t\t}\r\n\r\n\t}\r\n}", "idx": "3172"}
{"func": "package googlejam3.p177;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main\r\n{\r\n\tpublic static void main(String args[]) throws Exception\r\n\t{\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\tint cases = Integer.parseInt(br.readLine());\r\n\t\t\r\n\t\tfor(int i = 0; i < cases; i++)\r\n\t\t{\r\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \": \");\r\n\t\t\t\r\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\r\n\t\t\t\r\n\t\t\tint r = Integer.parseInt(st.nextToken());\r\n\t\t\tint t = Integer.parseInt(st.nextToken());\r\n\t\t\tint w = Integer.parseInt(st.nextToken());\r\n\t\t\t\r\n\t\t\t//System.out.println( \"\" + r + \" \" + t + \" \" + w );\n\t\t\tint answer = -1;\n\t\t\t\n\t\t\tint movesForFirstHit = 0;\n\t\t\tint hitPosition = w;\n\t\t\tfor(int i1 = w; i1 <= t; i1 += w )\n\t\t\t{\n\t\t\t\tmovesForFirstHit++;\n\t\t\t\thitPosition = i1;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tint movesToEliminateRows = movesForFirstHit * (r-1);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif(hitPosition == t)\n\t\t\t{\n\t\t\t\t//System.out.println(\"LAST\");\n\t\t\t\tanswer = movesForFirstHit + movesToEliminateRows + (w-1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tanswer = movesForFirstHit + movesToEliminateRows + w;\n\t\t\t}\n\t\t\t\n\t\t\t//System.out.println(hitPosition);\n\t\t\t//System.out.println(movesForFirstHit);\n\t\t\tSystem.out.println(\"\" + answer);\r\n\t\t}\r\n\t}\r\n}\r\n\t", "idx": "3177"}
{"func": "package googlejam3.p182;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class Task1 {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tFile file = new File(\"D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/Round1C/A-large.in\");\r\n\t\tPrintStream out = new PrintStream(new FileOutputStream(\"D:/Development/Competitions/GoogleCodeJam/GoogleCodeJam2015/data/Round1C/A-large.out\"));\r\n\t\tSystem.setOut(out);\r\n\t\tScanner sc = new Scanner(file);\r\n\t\t//Scanner sc = new Scanner(System.in);\r\n\t\t\r\n\t\tint T = sc.nextInt();\r\n\t\tint[] result = new int[T];\r\n\t\t\r\n\t\tfor (int i = 0; i < T; ++i)\r\n\t\t{\r\n\t\t\tint R = sc.nextInt();\r\n\t\t\tint C = sc.nextInt();\r\n\t\t\tint W = sc.nextInt();\r\n\t\t\t\r\n\t\t\tint numberOfTotalMisses = (C / W) - 1;\r\n\t\t\tresult[i] = numberOfTotalMisses + W;\r\n\t\t\tif (C % W != 0)\r\n\t\t\t\tresult[i]++;\r\n\t\t\tresult[i] += (R - 1) * (C / W);\r\n\t\t}\r\n\t\tsc.close();\r\n\t\t\r\n\t\tfor (int i = 0; i < T; ++i)\r\n\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", i + 1, result[i]);\r\n\t}\r\n}\r\n\r\n\r\n/*\r\nProblem\r\n\r\n\r\n*/", "idx": "3182"}
{"func": "package googlejam3.p184;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Date;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class ASol {\r\n\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tDate d1 = new Date();\r\n\t\t//solveA(\"a.in\", \"a2.out\");\r\n\t\t//solveA(\"A-small-attempt0.in\", \"A-small-attempt02.out\");\r\n\t\ttry {\n\t\t\t\n\t\t\tFileWriter fw = new FileWriter(\"A-large.out\");\n\t\t\tBufferedWriter bw = new BufferedWriter(fw);\n\t\t\t\n\t\t\tScanner sc = new Scanner(new File(\"A-large.in\"));\n\t\t\n\t\t\tlong t = sc.nextLong();\n\t\t\tsc.nextLine();\n\t\t\t\n\t\t\t//System.out.println(t);\n\t\t\tfor (long i2 = 0; i2 < t; i2++) {\n\t\t\t\t\n\t\t\t\tint r = sc.nextInt();\n\t\t\t\tint c = sc.nextInt();\n\t\t\t\tint w = sc.nextInt();\n\t\t\t\tint result = w;\n\t\t\t\tif (w == 1) {\n\t\t\t\t\tresult = c*r;\n\t\t\t\t} else {\n\t\t\t\t\tresult = (c/w)*r+(w-1);\n\t\t\t\t\tif (c % w != 0) {\n\t\t\t\t\t\tresult += 1;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tString rez = \"\"+result;\n\t\t\t\t//System.out.println(\"result: \" + rez);\n\t\t\t\tbw.write(\"Case #\" + (i2+1) + \": \" + rez + \"\\n\");\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tbw.flush();\n\t\t\tbw.close();\n\t\t\tfw.close();\n\t\t\tsc.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\t\n\t\t} finally {\n\t\t\t\n\t\t}\t\t\r\n\t\t\r\n\t\tDate d2 = new Date();\r\n\t\tSystem.out.println(\"time: \" + (d2.getTime() - d1.getTime()));\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\r\n\r\n\t}\r\n\r\n\r\n\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n", "idx": "3184"}
{"func": "package googlejam3.p185;\nimport static java.util.Arrays.deepToString;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\npublic class AL {\n\tstatic final boolean _PRACTICE = false;\n\tstatic final boolean _SMALL = false;\n\tstatic final boolean _FILEOUT = true;\n\tstatic final String _PROBLEM = \"A\";\n\n\tprivate int R, C, W;\n\n\tprivate int compute() {\n\t\tint firstHit = C / W * R;\n\t\treturn firstHit + (W - 1) + ((C % W == 0) ? 0 : 1);\n\t}\n\n\tpublic static void main(String... args) throws IOException {\n\t\tFileInputStream is = null;\n\t\tPrintStream ps = null;\n\t\tif (_SMALL) {\n\t\t\tint i = 0;\n\t\t\twhile (new File(_PROBLEM + \"-small\"\n\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\").exists())\n\t\t\t\ti++;\n\t\t\ti--;\n\t\t\tif (new File(_PROBLEM + \"-small\"\n\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\").exists()) {\n\t\t\t\tSystem.err.println(\"overwrite?(y/n)\");\n\t\t\t\tchar c = (char) System.in.read();\n\t\t\t\tif (c != 'y') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.setIn(is = new FileInputStream(_PROBLEM + \"-small\"\n\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\"));\n\t\t\tif (_FILEOUT) {\n\t\t\t\tSystem.setOut(ps = new PrintStream(_PROBLEM + \"-small\"\n\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\"));\n\t\t\t}\n\t\t\tAL r = new AL();\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tint t = sc.nextInt();\n\t\t\tfor (int k = 1; k <= t; k++) {\n\t\t\t\tSystem.out.print(\"Case #\" + k + \": \");\n\t\t\t\n\t\t\t\tr.R = sc.nextInt();\n\t\t\t\tr.C = sc.nextInt();\n\t\t\t\tr.W = sc.nextInt();\n\t\t\t\n\t\t\t\tSystem.out.println(r.compute());\n\t\t\t}\n\t\t\tif (sc != null) {\n\t\t\t\tsc.close();\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.setIn(is = new FileInputStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".in\"));\n\t\t\tif (_FILEOUT) {\n\t\t\t\tSystem.setOut(ps = new PrintStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".out\"));\n\t\t\t}\n\t\t\tAL r = new AL();\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tint t = sc.nextInt();\n\t\t\tfor (int k = 1; k <= t; k++) {\n\t\t\t\tSystem.out.print(\"Case #\" + k + \": \");\n\t\t\t\n\t\t\t\tr.R = sc.nextInt();\n\t\t\t\tr.C = sc.nextInt();\n\t\t\t\tr.W = sc.nextInt();\n\t\t\t\n\t\t\t\tSystem.out.println(r.compute());\n\t\t\t}\n\t\t\tif (sc != null) {\n\t\t\t\tsc.close();\n\t\t\t}\n\t\t}\n\t\tif (is != null)\n\t\t\tis.close();\n\t\tif (ps != null)\n\t\t\tps.close();\n\t}\n}\n", "idx": "3185"}
{"func": "package googlejam3.p186;\nimport java.io.*;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by Darya Shauchenka on 5/10/2015.\r\n */\r\npublic class Round1CProblemA {\r\n    public static void main(String[] args) throws IOException {\r\n        Scanner sc = new Scanner(new File(\"A-large.in\"));\r\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\r\n        int testCases = sc.nextInt();\r\n        for (int t = 0; t < testCases; t++) {\r\n            int r = sc.nextInt();\r\n            int c = sc.nextInt();\r\n            int w = sc.nextInt();\r\n            int res = 0;\r\n            res += (c / w) * (r - 1);\r\n            res += (c / w - 1);\r\n            res += w + (c % w == 0 ? 0 : 1);\r\n            out.write(\"Case #\" + (t + 1) + \": \" + res);\r\n            out.newLine();\r\n        }\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "3186"}
{"func": "package googlejam3.p187;\n\r\nimport com.sun.media.sound.FFT;\r\n\r\nimport java.io.*;\r\nimport java.text.NumberFormat;\r\nimport java.util.*;\r\n\r\n/**\r\n * Created by VIET ANH on 27/04/2015.\r\n */\r\npublic class test {\r\n\r\n    private static int T;\r\n    private static long oo=Long.MAX_VALUE;\r\n    private static long base=1000000007;\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        Scanner in = new Scanner(new FileInputStream(\"test.txt\"));\r\n        PrintWriter out = new PrintWriter(new FileOutputStream(\"output.txt\"));\r\n        int T=in.nextInt();\r\n        for (int test = 0; test < T; test++) {\r\n            int res=0;\r\n            int r=in.nextInt();\r\n            int c=in.nextInt();\r\n            int w = in.nextInt();\r\n            int resi;\r\n            if (c%w==0) resi=c/w+w-1;\r\n            else resi=c/w+w;\r\n            int resno=c/w;\r\n            res=resno*(r-1)+resi;\r\n            out.println(\"Case #\"+(test+1)+\": \"+res);\r\n        }\r\n        out.close();\r\n    }\r\n\r\n}\r\n", "idx": "3187"}
{"func": "package googlejam3.p188;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\n\r\npublic class question1 {\r\n\r\n\t\r\n\tpublic static void main(String[] args) throws FileNotFoundException, IOException {\t\r\n\t\tString file = \"small1.in\";\r\n\t\t\r\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(file))) {\r\n\t\t    String line;\r\n\t\t    Integer N = Integer.parseInt(br.readLine());\r\n\t\t    for (int n = 0; n < N; n++) {\r\n\t\t    \tString[] RCW = br.readLine().split(\" \");\r\n\t\t    \tInteger R = Integer.parseInt(RCW[0]);\r\n\t\t    \tInteger C = Integer.parseInt(RCW[1]);\r\n\t\t    \tInteger W = Integer.parseInt(RCW[2]);\r\n\t\t    \t\r\n\t\t    \tint guess_per_row = C / W;\r\n\t\t    \t\r\n\t\t    \tint last = ((C / W) + W - 1) + ((R-1) * guess_per_row);\r\n\t\t    \t\r\n\t\t    \tif (C%W != 0) last += 1;\r\n\r\n\t\t    \tSystem.out.println(\"Case #\" + (n+1) + \": \" + last);\t\r\n\r\n\t\t    }\r\n\t\t}\r\n\t\t\r\n\r\n\t}\r\n\t\r\n\t/*\r\n\tpublic int brute_force(int C, int[] moves) {\r\n\t\tint max = 0;\r\n\t\tfor (int i = 0; i < C; i++) {\r\n\t\t\tif (moves[i] == 0) { \r\n\t\t\t\tint[] temp = Arrays.copyOf(moves, C);\r\n\t\t\t\ttemp[i] = 1;\r\n\t\t\t\tint hit = \r\n\t\t\t}\r\n\t\t\t\tint minmax = brute_force(moves)\r\n\t\t}\r\n\t}*/\r\n\t\r\n\t\r\n}\r\n", "idx": "3188"}
{"func": "package googlejam3.p192;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\n\npublic class Brattleship {\n\tpublic static void main(String[] args) throws IOException {\n\t\tString[] input;\n\t\tif (args.length > 0) { input = args; }\n\t\telse {\n\t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tString x = null;\n\t\t\tint size = Integer.parseInt(in.readLine());\n\t\t\tinput = new String[size];\n\t\t\tfor (int i=0; i<size; i++) {\n\t\t\t\tinput[i] = in.readLine();\n\t\t\t}\n\t\t}\n\t\tint counter = 1;\n\t\tString[] temp;\n\t\tint r, c, w, score, base;\n\t\tfor (String s: input) {\n\t\t\ttemp = s.split(\" \");\n\t\t\tr = Integer.parseInt(temp[0]);\n\t\t\tc = Integer.parseInt(temp[1]);\n\t\t\tw = Integer.parseInt(temp[2]);\n\t\t\tscore = 0;\n\t\t\tbase = c / w;\n\t\t\tscore = base * r;\n\t\t\tscore += w - 1;\n\t\t\tif (c % w != 0) { score++; }\n\t\t\tSystem.out.println(\"Case #\" + counter + \": \" + score);\n\t\t\tcounter++;\n\t\t}\n\t}\n}", "idx": "3192"}
{"func": "package googlejam3.p193;\n\n\nimport java.io.File;\nimport java.util.Scanner;\n\n/**\n *\n * @author Brenton\n */\npublic class ProblemA {\n\n    public static void main(String[] args) {\n\n        String INPUT = args[0];\n        int caseNumber = 1;\n        int cases;\n\n        try {\n            Scanner readIn = new Scanner(new File(INPUT));\n            // Read in the number of cases\n            cases = readIn.nextInt();\n            readIn.nextLine();\n\n            while (caseNumber <= cases) {\n\n                // Read in the variables\n                int R = readIn.nextInt();\n                int C = readIn.nextInt();\n                int W = readIn.nextInt();\n\n                readIn.nextLine();\n\t\t\t\t// For every row that isn't the answer, we must call\n\t\t\t\t// every wth square in order to\n\t\t\t\t// hit the ship at least once\n\t\t\t\t//\n\t\t\t\tint result1 = 0;\n\t\t\t\t\n\t\t\t\tresult1 = (R - 1) * (C / W);\n\t\t\t\t\n\t\t\t\t// Once all the other rows have been searched,\n\t\t\t\t// we must find it in the last row.\n\t\t\t\t\n\t\t\t\t//\n\t\t\t\tresult1 += C / W + W - 1;\n\t\t\t\t\n\t\t\t\tif (C % W != 0) {\n\t\t\t\t    result1 += 1;\n\t\t\t\t}\n\n                // Solve the problem\n                int result = result1;\n\n                //print result\n                System.out.println(\"Case #\" + caseNumber + \": \" + result);\n                caseNumber++;\n            }\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n}\n", "idx": "3193"}
{"func": "package googlejam3.p194;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class A {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\t\r\n\t\tFile fileIn = new File(\"FILEIN.in\");\r\n\t\tPrintWriter writer = new PrintWriter(\"FILEOUT.txt\", \"UTF-8\");\r\n\t\tScanner in = new Scanner(fileIn);\r\n\t\tint numCases = in.nextInt();\r\n\t\t\r\n\t\tfor(int i = 0; i < numCases; i++){\r\n\t\t\twriter.printf(\"Case #%d: \", i+1);\r\n\t\t\t//writer.printf(\"Case #%d:\\r\\n\", i+1);\r\n\t\t\t\r\n\t\t\t//BEGIN CODE HERE\r\n\t\t\tint R = in.nextInt(); //NUM OF GAMES\r\n\t\t\tint C = in.nextInt(); //LENGTH OF EACH GAME\r\n\t\t\tint W = in.nextInt(); //LENGTH OF SHIP\r\n\t\t\t\r\n\t\t\tint min = (R) * (C / W);\r\n\t\t\tif(W < C && W > 1 && (C % W != 0) && (C != W)) min += 1;\r\n\t\t\tmin += W - 1;\r\n\t\t\twriter.println(min);\r\n\t\t\t//END CODE HERE\r\n\t\t\t\r\n\t\t}\r\n\t\tSystem.out.println(\"DONE\");\r\n\t\tin.close();\r\n\t\twriter.close();\r\n\t}\r\n}", "idx": "3194"}
{"func": "package googlejam3.p196;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.*;\n\n\npublic class A {\n\tstatic Scanner sc;\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tsc = new Scanner(args.length > 0 ? new FileInputStream(args[0]) : System.in);\n\t\tint numCases = sc.nextInt();\n\t\tfor (int nCase=1; nCase<=numCases; nCase++) {\n\t\t\tObject[] args1 = { nCase };\n\t\t\tSystem.out.printf(\"Case #%d: \", args1);\n\t\t\tint R = sc.nextInt();\n\t\t\tint C = sc.nextInt();\n\t\t\tint W = sc.nextInt();\n\t\t\t\n\t\t\tint perRow = (int)Math.floor((double)C / W);\n\t\t\tint extraHit = C % W > 0 ? W : W-1;\n\t\t\tObject[] args2 = { R * perRow + extraHit };\n\t\t\tSystem.out.printf(\"%d\\n\", args2);\n\t\t}\n\t\tsc.close();\n\t}\n\n}", "idx": "3196"}
{"func": "package googlejam3.p197;\nimport java.util.Scanner;\r\n\r\n\r\npublic class Main_Round1C_2015_A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\r\n\t\tint t = sc.nextInt();\r\n\t\tfor (int casei = 1; casei <= t; casei++) {\r\n\t\t\tint r = sc.nextInt();\r\n\t\t\tint c = sc.nextInt();\r\n\t\t\tint w = sc.nextInt();\r\n\r\n\t\t\tint ret = c / w * r + w - 1 + (c % w != 0 ? 1 : 0);\r\n\r\n\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", casei, ret);\r\n\t\t}\r\n\r\n\t\tsc.close();\r\n\t}\r\n}\r\n", "idx": "3197"}
{"func": "package googlejam3.p198;\nimport java.util.*;\n\npublic class A {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        \n        final int noTests = in.nextInt();\n        in.nextLine();\n        \n        for(int test=1; test<=noTests; test++) {\n            int R = in.nextInt();\n            int C = in.nextInt();\n            int W = in.nextInt();\n            \n            int hits = (R * (C/W)) + W - 1;\n            \n            if(C % W != 0)\n                hits++;\n            \n            System.out.printf(\"Case #%d: %d%n\", test, hits);\n        }\n    }\n}\n", "idx": "3198"}
{"func": "package googlejam3.p199;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.PrintStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Sample {\t\r\n\t\r\n\tpublic static final String INPUT_FILE = \"A-large.in\";\r\n\tpublic static final String OUTPUT_FILE = \"output_A-large.txt\";\r\n\t\r\n\tpublic static final String CASE_STRING_BEFORE = \"Case #\";\r\n\tpublic static final String CASE_STRING_AFTER = \": \";\r\n\t\r\n\tScanner scanner = null;\r\n\tFile outputFile;\r\n\tPrintStream pout = null;\r\n\tint totalTests;\r\n\tint testNo;\r\n\t//DecimalFormat formatter = new DecimalFormat(\"#0.0000000\");\r\n\t\r\n\t//ArrayList<Integer> plates = null;\r\n\tint row;\r\n\tint col;\r\n\tint width;\r\n\tint turn;\r\n\t\r\n\tpublic static void main(String argv[]){\r\n\t\t\r\n\t\tSample cards = new Sample();\r\n\t\ttry {\n\t\t\tcards.scanner = new Scanner(new File(Sample.INPUT_FILE));\n\t\t\tcards.outputFile = new File(Sample.OUTPUT_FILE);\n\t\t\t\n\t\t\tif(cards.outputFile.exists()){\n\t\t\t\tcards.outputFile.delete();\n\t\t\t}\n\t\t\t\n\t\t\tcards.outputFile.createNewFile();\n\t\t\t\n\t\t\tcards.pout = new PrintStream(cards.outputFile);\n\t\t\t\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\r\n\t\t\r\n\t\tcards.totalTests = cards.scanner.nextInt();\n\t\t\n\t\tfor(int i=1;i<=cards.totalTests;i++){\n\t\t\tcards.testNo = i;\n\t\t\t//plates = new ArrayList<Integer>();\n\t\t\tcards.row = 0;\n\t\t\tcards.col = 0;\n\t\t\tcards.width = 0;\n\t\t\tcards.turn = 0;\n\t\t\tcards.row = cards.scanner.nextInt();\n\t\t\tcards.col = cards.scanner.nextInt();\n\t\t\tcards.width = cards.scanner.nextInt();\n\t\t\tcards.turn = cards.col/cards.width;\n\t\t\tcards.turn += (cards.width-1);\n\t\t\t\n\t\t\tif(cards.col%cards.width == 0){\n\t\t\t\t// no action required\n\t\t\t}else{\n\t\t\t\tcards.turn++;\n\t\t\t}\n\t\t\tif(cards.row>1){\n\t\t\t\tcards.row--;\n\t\t\t\tint misses = cards.col/cards.width;\n\t\t\t\tint missTurns = misses * cards.row;\n\t\t\t\tcards.turn += missTurns;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tcards.pout.print(Sample.CASE_STRING_BEFORE + cards.testNo + Sample.CASE_STRING_AFTER);\n\t\t\t\n\t\t\tcards.pout.println(\"\"+cards.turn);\n\t\t}\r\n\t\t\r\n\t\tcards.scanner.close();\n\t\tcards.pout.flush();\n\t\tcards.pout.close();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\t\r\n//\tpublic class IntegerComparator implements Comparator<Integer> {\r\n//\r\n//\t    @Override\r\n//\t    public int compare(Integer o1, Integer o2) {\r\n//\t        return o2.compareTo(o1);\r\n//\t    }\r\n//\t}\r\n\r\n}\r\n", "idx": "3199"}
{"func": "package googlejam3.p200;\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemA {\t\r\n\r\n\tprivate static BufferedWriter writer;\r\n\tprivate static Scanner scanner;\r\n\t\r\n\r\nprivate static long r, c, w, score;\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tPath input = Paths.get(\"input.in\");\r\n\t\tPath output = Paths.get(\"output.txt\");\r\n\t\tscanner = new Scanner(input);\r\n\t\twriter = Files.newBufferedWriter(output);\r\n\t\tint testCases = scanner.nextInt();\r\n\t\tfor (int i = 0; i < testCases; i++) {\r\n\t\t\tr = scanner.nextLong();\n\t\t\tc = scanner.nextLong();\n\t\t\tw = scanner.nextLong();\n\t\t\tlong shipsPerRow = c/w;\n\t\t\tlong minScore = 0;\n\t\t\tfor(long i1 = 0; i1 < r - 1; i1++) {\n\t\t\t\tminScore += shipsPerRow;\n\t\t\t}\n\t\t\tlong uncovered = c;\n\t\t\twhile (uncovered > w) {\n\t\t\t\tuncovered -= w;\n\t\t\t\tminScore++;\n\t\t\t}\n\t\t\tif (uncovered == w) {\n\t\t\t\tminScore += w;\n\t\t\t} else {\n\t\t\t    minScore++;\n\t\t\t    minScore += (w-1);\t    \t\n\t\t\t}\n\t\t\tscore = minScore;\n\t\t\tString out = String.format(\"Case #%d: %d\", i + 1, score);\n\t\t\tSystem.err.println(out);\n\t\t\twriter.write(out);\n\t\t\twriter.newLine();\r\n\t\t}\r\n\t\twriter.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "3200"}
{"func": "package googlejam3.p205;\nimport java.util.Scanner;\r\n\r\npublic class Brattleship {\r\n    \r\n    public static void main(String[] args) {  \r\n        Scanner s = new Scanner(System.in);\r\n        int t = s.nextInt();\r\n        for (int i = 1; i <= t; i++) {\r\n            int r = s.nextInt();\r\n            int c = s.nextInt();\r\n            int w = s.nextInt();\r\n            int result = 0;\r\n            if (r > 1) {\r\n                result = (r - 1) * (c / w);\r\n            }\r\n            result += (c - w) / w;\r\n            if ((c - w) % w != 0) {\r\n                result++;                \r\n            }\r\n            result += w;\r\n            System.out.println(\"Case #\" + i + \": \" + result);\r\n        }\r\n    }\r\n    \r\n}\r\n", "idx": "3205"}
{"func": "package googlejam3.p206;\nimport java.util.Scanner;\r\n\r\npublic class BS3 {\r\n   public static void main(String[] args) {\r\n      Scanner scan = new Scanner(System.in);\r\n      int numCases = scan.nextInt();\r\n      \r\n      for(int caseNum = 1; caseNum <= numCases; caseNum++) {\r\n         int numRows = scan.nextInt();\r\n         int numCols = scan.nextInt();\r\n         int shipWidth = scan.nextInt();\r\n         \r\n         System.out.print(\"Case #\" + caseNum + \": \");\r\n         \r\n         int findInRowMin = numCols/shipWidth;\r\n         int finishShip = shipWidth - (numCols % shipWidth == 0 ? 1 : 0);\r\n         System.out.println(numRows * findInRowMin + finishShip);\r\n         \r\n      }\r\n      \r\n   }\r\n}", "idx": "3206"}
{"func": "package googlejam3.p210;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.util.Scanner;\n\n\npublic class Problem1CA {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tScanner sc = new Scanner(new File(args[0]));\n        File outFile = new File(args[1]);\n        FileOutputStream os = new FileOutputStream(outFile);\n        OutputStreamWriter osw = new OutputStreamWriter(os);\n        Writer w = new BufferedWriter(osw);\n\t\t        \n\t\tint cases = sc.nextInt();\n\n\t\tfor (int i=0; i<cases; ++i) {\n\t\t\t\n\t\t\tint R = sc.nextInt();\n\t\t\tint C = sc.nextInt();\n\t\t\tint W = sc.nextInt();\n\t\t\t\n\t\t\tint shots = (C/W)*R+W;\n\t\t\tif (C%W == 0) {\n\t\t\t\t--shots;\n\t\t\t}\n\t\t\t\n\t\t\tw.write(\"Case #\" + Integer.toString(i+1) + \": \" + Integer.toString(shots) + \"\\n\");\n\t\t}\n\n\t\tw.close();\n\t\tsc.close();\n\t}\n}\n", "idx": "3210"}
{"func": "package googlejam3.p211;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class P1 {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner scan = new Scanner(new File(\"in.txt\"));\r\n\t\tPrintWriter writer = new PrintWriter(\"out.txt\");\r\n\r\n\t\tint cases = scan.nextInt();\r\n\r\n\t\tfor (int i = 0; i < cases; i++) {\r\n\t\t\tint ans = 0;\r\n\r\n\t\t\tint r = scan.nextInt();\r\n\t\t\tint c = scan.nextInt();\r\n\t\t\tint w = scan.nextInt();\r\n\r\n\t\t\tans = (r - 1) * (c / w) + (c - 1) / w + w;\r\n\r\n\t\t\twriter.print(\"Case #\");\r\n\t\t\twriter.print(i+1);\r\n\t\t\twriter.print(\": \");\r\n\t\t\twriter.print(ans);\r\n\t\t\twriter.println();\r\n\t\t}\r\n\r\n\t\tscan.close();\r\n\t\twriter.close();\r\n\t}\r\n\r\n}\r\n", "idx": "3211"}
{"func": "package googlejam3.p212;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\n\r\npublic class Q1 {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br = new BufferedReader(new FileReader(new File(args[0])));\r\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File(args[1]))));\r\n        int iterationsNum = Integer.parseInt(br.readLine());\r\n\r\n\r\n        for (int i = 0; i < iterationsNum; ++i) {\r\n            String[] parameters = br.readLine().split(\"\\\\s+\");\r\n            long Rows = Long.parseLong(parameters[0]);\r\n            long Columns = Long.parseLong(parameters[1]);\r\n            long Width = Long.parseLong(parameters[2]);\r\n\r\n            long res = Rows * new Double(Math.floor(Columns / Width * 1.0)).intValue() + Width - 1;\r\n\r\n            if (Columns % Width > 0) {\r\n                res += 1;\r\n            }\r\n\r\n            // if (Width == Columns || Columns == 1)\r\n            // res -= 1;\r\n            // int time = new Double(Math.ceil(Math.log(max) / Math.log(2)) + 1).intValue();\r\n            bw.write(\"Case #\" + (i + 1) + \": \" + res + \"\\n\");\r\n        }\r\n\r\n        br.close();\r\n        bw.close();\r\n    }\r\n\r\n}\r\n", "idx": "3212"}
{"func": "package googlejam3.p213;\nimport java.io.*;\r\nimport java.util.*;\r\npublic class A {\r\n\tpublic static void main(String[]args) throws Exception\r\n\t{\r\n\t\tScanner scan=new Scanner(new File(\"A-large.in\"));\r\n\t\tPrintWriter o=new PrintWriter(new File(\"Aoutl0.txt\"));\r\n\t\tint n=Integer.parseInt(scan.nextLine());\r\n\t\tfor(int i=1;i<=n;i++)\r\n\t\t{\r\n\t\t\tString[]cs=scan.nextLine().split(\" \");\r\n\t\t\tint r=Integer.parseInt(cs[0]);\r\n\t\t\tint c=Integer.parseInt(cs[1]);\r\n\t\t\tint w=Integer.parseInt(cs[2]);\r\n\t\t\tint ans=(int)(Math.floor(1.0*c/w))*r;\r\n\t\t\tif(c%w==0)\r\n\t\t\t\tans+=w-1;\r\n\t\t\telse\r\n\t\t\t\tans+=w;\r\n\r\n\r\n\t\t\to.println(\"Case #\"+i+\": \"+ans);\t\r\n\t\t}\r\n\t\tscan.close();\r\n\t\to.close();\r\n\t}\r\n}\r\n\r\n", "idx": "3213"}
{"func": "package googlejam3.p219;\nimport java.util.Scanner;\r\n\r\npublic class first {\r\n\t public static void main(String[] args) {\r\n\t        Scanner sin = new Scanner(System.in);\r\n\t        int t = sin.nextInt();\r\n\t        for(int i = 1; i <= t; i++){\r\n\t            int R = sin.nextInt();\r\n\t            int C = sin.nextInt();\r\n\t            int W = sin.nextInt();\r\n\t            int x1 = R * (C/W);\r\n\t\t         if(C % W > 0){\r\n\t\t             x1 = x1 + W;\r\n\t\t         }else{\r\n\t\t             x1= x1 + W - 1;\r\n\t\t         }\r\n\t            System.out.println(\"Case #\"+i+\": \"+x1);\r\n\t            \r\n\t            \r\n\t        }\r\n\t    }\r\n\t     \r\n\t   \r\n\t     \r\n}", "idx": "3219"}
{"func": "package googlejam3.p220;\nimport java.util.Scanner;\n\npublic class Brattleship {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint T = scan.nextInt();\n\t\tfor (int t=0; t<T; t++) {\n\t\t\tint R = scan.nextInt();\n\t\t\tint C = scan.nextInt();\n\t\t\tint W = scan.nextInt();\n\t\t\tint result = C / W * R + (W - 1);\n\t\t\tif (C % W > 0) {\n\t\t\t\tresult++;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+(t+1)+\": \"+result);\n\t\t}\n\t}\n}", "idx": "3220"}
{"func": "package googlejam3.p221;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class Q11 {\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tScanner in = new Scanner(new File(\"A-large.in\"));\n\t\t\tPrintWriter out = new PrintWriter(\"A-large.out\");\n\t\t\tint numberOfCases = Integer.parseInt(in.nextLine());\n\t\t\tfor (int caseNum = 1; caseNum <= numberOfCases; caseNum++) {\n                int rows = in.nextInt();\n                int columns = in.nextInt();\n                int shipWidth = in.nextInt();\n                int trials = 0;\n                trials += (columns / shipWidth) * rows + shipWidth;\n                if(columns % shipWidth == 0) {\n                \ttrials--;\n                }       \n                out.println(\"Case #\" + caseNum + \": \" + trials);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n\n}\n", "idx": "3221"}
{"func": "package googlejam3.p225;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\t\r\n\t\tScanner in = new Scanner(new File(\"c:\\\\codejam2015\\\\a\\\\small.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new File(\r\n\t\t\t\t\"c:\\\\codejam2015\\\\a\\\\small.out\"));\r\n\t\tint numTests = in.nextInt();\r\n\t\tfor (int i = 1; i <= numTests; i++) {\r\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\t\t\t\n\t\t\t\t\tint r = in.nextInt();\n\t\t\t\t\tint c = in.nextInt();\n\t\t\t\t\tint w = in.nextInt();\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tSystem.out.println(\"solving = \" + r + \", \" + c + \", \" + w);\n\t\t\t\t\tsolved = new boolean[c];\n\t\t\t\t\tArrays.fill(solved, false);\n\t\t\t\t\t\n\t\t\t//\t\tint maxStart = 0;\n\t\t\t//\t\tint maxEnd = c -1;\n\t\t\t//\t\tint max = c;\n\t\t\t\t\t\n\t\t\t\t\tQueue<int[]> q = new LinkedList<int[]>();\n\t\t\t//\t\t\n\t\t\t\t\tq.offer(new int[]{0, c-1});\n\t\t\t//\t\t\n\t\t\t\t\tint numHits = 0;\n\t\t\t\t\t\n\t\t\t\t\tint max = c;\n\t\t\t\t\t\n\t\t\t\t\twhile(max > w) {\n\t\t\t\t\t\tnumHits ++;\n\t\t\t\t\t\tmax = max - w;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnumHits = numHits * r;\n\t\t\t\t\tif(max == w) {\n\t\t\t\t\t\tnumHits = numHits + (r -1);\n\t\t\t\t\t}\n\t\t\t\t\tnumHits = numHits + w;\n\t\t\t\t\t\n\t\t\t//\t\twhile(!q.isEmpty()) {\n\t\t\t//\t\t\tnumHits++;\n\t\t\t//\t\t\t\n\t\t\t//\t\t\tint[] maxMarkers = q.poll();\n\t\t\t//\t\t\tint maxStart = maxMarkers[0];\n\t\t\t//\t\t\tint maxEnd = maxMarkers[1];\n\t\t\t//\t\t\tint marked = (maxStart + maxEnd) / 2;\n\t\t\t//\t\t\tsolved[marked] = true;\n\t\t\t//\t\t\tif((maxEnd - marked) >= w) {\n\t\t\t//\t\t\t\tq.offer(new int[]{marked + 1, maxEnd});\n\t\t\t//\t\t\t}\n\t\t\t//\t\t\tif((marked - maxStart) >= w) {\n\t\t\t//\t\t\t\tq.offer(new int[]{maxStart, marked - 1});\n\t\t\t//\t\t\t}\n\t\t\t//\t\t\tif(q.isEmpty()) {\n\t\t\t//\t\t\t\tint max = (maxEnd - maxStart) + 1;\n\t\t\t//\t\t\t\tif(max > w) {\n\t\t\t//\t\t\t\t\tnumHits += w;\n\t\t\t//\t\t\t\t} else {\n\t\t\t//\t\t\t\t\tnumHits += (w -1);\n\t\t\t//\t\t\t\t}\n\t\t\t//\t\t\t}\n\t\t\t//\t\t}\n\t\t\t\t\t\n\t\t\t//\t\t\n\t\t\t//\t\tif(w == 1) {\n\t\t\t//\t\t\tnumHits = c;\n\t\t\t//\t\t} else {\n\t\t\t//\t\twhile(max >= w) {\n\t\t\t//\t\t\tint marked = (maxStart + maxEnd) / 2;\n\t\t\t//\t\t\tSystem.out.println(\"marking \" + marked);\n\t\t\t//\t\t\tsolved[marked] = true;\n\t\t\t//\t\t\tnumHits++;\n\t\t\t//\t\t\t\n\t\t\t//\t\t\tint[] newMax = findMax();\n\t\t\t//\t\t\tSystem.out.println(\"max \" + Arrays.toString(newMax));\n\t\t\t//\t\t\tif(newMax[1] > w) {\n\t\t\t//\t\t\t\tmax = newMax[1];\n\t\t\t//\t\t\t\tmaxStart = newMax[0];\n\t\t\t//\t\t\t\tmaxEnd = newMax[1] -1;\n\t\t\t//\t\t\t} else {\n\t\t\t//\t\t\t\tif(max > w) {\n\t\t\t//\t\t\t\t\tnumHits += w;\n\t\t\t//\t\t\t\t} else {\n\t\t\t//\t\t\t\t\tnumHits += (w - 1);\n\t\t\t//\t\t\t\t}\n\t\t\t//\t\t\t\tbreak;\n\t\t\t//\t\t\t}\n\t\t\t//\t\t}\n\t\t\t//\t\t}\n\t\t\t\t\tSystem.out.println(\"numHits \" + numHits);\n\t\t\t\n\t\t\t\t\tout.println(\"Case #\" + i + \": \" + numHits);\r\n\t\t}\r\n\r\n\t\tout.close();\r\n\t}\r\n\r\n\tstatic boolean[] solved;\r\n\r\n\r\n}\r\n", "idx": "3225"}
{"func": "package googlejam3.p227;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\n/**\r\n * Created by cheto on 5/10/2015.\r\n */\r\npublic class Brattleship {\r\n    public static void main(String[] args) throws Exception {\r\n        BufferedReader reader = new BufferedReader(new FileReader(args[0]));\r\n        BufferedWriter writer = new BufferedWriter(new FileWriter(args[0].substring(0, args[0].length() - 2) + \"out\"));\r\n        int testCases = Integer.parseInt(reader.readLine());\r\n        System.out.println(\"Test cases: \" + testCases);\r\n        for (int test = 0; test < testCases; test++) {\r\n            String[] splitLine = reader.readLine().split(\" \");\r\n            int R = Integer.parseInt(splitLine[0]);\r\n            int C = Integer.parseInt(splitLine[1]);\r\n            double W = Double.parseDouble(splitLine[2]);\r\n            int cells = R*C;\r\n            int fuller = (int) Math.floor(C / W);\r\n            int completeFuller = fuller * R;\r\n            int res = (int)(completeFuller + (W - 1) + (C % W == 0 ? 0 : 1) );\r\n            writer.write(\"Case #\" + (test + 1) + \": \" + res + \"\\n\");\r\n            System.out.println(\"Case #\" + (test + 1) + \": \" + res + \"\\n\");\r\n        }\r\n        reader.close();\r\n        writer.flush();\r\n        writer.close();\r\n    }\r\n}\r\n", "idx": "3227"}
{"func": "package googlejam3.p229;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\n\r\n\r\n\r\npublic class Battleship {\r\n\t\r\n    public static void main( String[] args ) throws Exception {\r\n\t    \tBufferedReader in = new BufferedReader(new FileReader(\"in.txt\"));\r\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\r\n\t\t\tString line = in.readLine();\r\n\t\t\tint t = new Integer(line);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor (int caseNum=1; caseNum<=t; caseNum++) {\r\n\t\t\t\tline = in.readLine();\r\n\t\t\t\tString[] sa = line.split(\" \");\r\n\t\t\t\tint r = new Integer(sa[0]);\r\n\t\t\t\tint c = new Integer(sa[1]);\r\n\t\t\t\tint w = new Integer(sa[2]);\r\n\t\t\t\t\r\n\t\t\t\tint answer = ((c/w)+(Math.min(c%w, 1)))+w-1;\r\n\t\t\t\t\r\n\t\t\t\tif (c/w == 1) answer= Math.min(c, w+1);\r\n\t\t\t\t\r\n\t\t\t\tif (r>1) answer+=(c/w)*(r-1);\r\n\r\n\t\t\t\t\r\n\t\t\t\tout.write(\"Case #\"+caseNum+\": \"+answer+\"\\n\");\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tin.close();\r\n\t\t\tout.flush();\r\n\t\t\tout.close();\r\n\r\n\t\t}\r\n\r\n\r\n\r\n}\r\n\r\n", "idx": "3229"}
{"func": "package googlejam3.p230;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A2 {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"A-large.in\"));\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(bis));\r\n\t\tPrintWriter out = new PrintWriter(new File(\"A-large.out\"));\r\n\t\tStringTokenizer st;\r\n\t\tint cases = Integer.parseInt(br.readLine().trim()), R, C, W;\r\n\t\tfor (int c = 1; c <= cases; c++) {\r\n\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\t\tR = Integer.parseInt(st.nextToken());\r\n\t\t\tC = Integer.parseInt(st.nextToken());\r\n\t\t\tW = Integer.parseInt(st.nextToken());\r\n\t\t\tint res = (R-1)*(C/W)+(C/W+W+(C%W==0?-1:0));\r\n\t\t\tout.println(\"Case #\" + c + \": \" + res);\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}", "idx": "3230"}
{"func": "package googlejam3.p231;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.text.*;\r\n\r\npublic class Brattleship\r\n{\r\n    public static void main (String[] args) throws IOException\r\n    {\r\n        //DecimalFormat df = new DecimalFormat(\"0.0######\");\r\n        //Scanner scan = new Scanner(System.in);\r\n        Scanner scan = new Scanner(new File(\"A-large.in\"));\r\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"A-large.out\")));\r\n        int t = scan.nextInt();\r\n        \r\n        for (int i=1; i<=t; i++)\r\n        {\r\n            int rows = scan.nextInt();\r\n            int cols = scan.nextInt();\r\n            int wid = scan.nextInt();\r\n            int cnt=0;\r\n            boolean[][] grid = new boolean[rows][cols];\r\n            for (int r=0; r<rows; r++)\r\n            {\r\n                int loc = wid-1;\r\n                while (loc<cols)\r\n                {\r\n                    grid[r][loc] = true;\r\n                    cnt++;\r\n                    loc += wid;\r\n                }\r\n                if (r==0)\r\n                {\r\n                    if (cnt==1)\r\n                    {\r\n                        cnt += Math.min(wid, cols-1);\r\n                    }\r\n                    else\r\n                    {\r\n                        cnt += wid;\r\n                        if (cols%wid==0)\r\n                            cnt--;\r\n                    }\r\n                }\r\n            }\r\n           \r\n            out.println(\"Case #\" + i + \": \" + cnt);\r\n        }\r\n        out.close();\r\n        System.exit(0);\r\n    }\r\n}\r\n", "idx": "3231"}
{"func": "package googlejam3.p232;\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner reader = new Scanner(System.in);\r\n\t\tint testCases = reader.nextInt();\r\n\t\tfor(int t = 0; t < testCases; t++){\r\n\t\t\tint r = reader.nextInt();\r\n\t\t\tint c = reader.nextInt();\r\n\t\t\tint w = reader.nextInt();\r\n\t\t\tint answer = c / w;\r\n\t\t\tanswer *= r;\r\n\t\t\tanswer += w - 1;\r\n\t\t\tif(c % w > 0){\r\n\t\t\t\tanswer++;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + (t+1) + \": \" + answer);\r\n\t\t}\r\n\t\treader.close();\r\n\t}\r\n\r\n}\r\n", "idx": "3232"}
{"func": "package googlejam3.p234;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n\npublic class c1 {\n\n\t/**\n\t * @param args\n\t * @throws IOException \n\t */\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner in = new Scanner(new FileReader(\"input\"));\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"output\"));\n\t\t\n\t\tint cases = in.nextInt();\n\t\tfor (int a=0; a<cases; a++) {\n\t\t\tint rows = in.nextInt();\n\t\t\tint cols = in.nextInt();\n\t\t\tint width = in.nextInt();\n\t\t\t\n\t\t\tint tries = cols / width;\n\t\t\ttries = tries * rows;\n\t\t\ttries--;\n\t\t\n\t\t\ttries = tries+width;\n\t\t\tif (cols % width != 0) {\n\t\t\t\ttries++;\n\t\t\t}\n\t\t\tout.print(\"Case #\" + (a+1) + \": \" + tries + \"\\n\");\n\t\t\t\n\t\t}\n\t\t\n\t\t// template output:\n\t\t// out.print(\"Case #\" + (a+1) + \": \" + time + \"\\n\");\n\t\t\n\t\tout.close();\n\n\t}\n\n}\n", "idx": "3234"}
{"func": "package googlejam3.p238;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileWriter;\r\nimport java.io.InputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Ships {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\tArrayList<Long> TestCases;\r\n\t\t\r\n\t\tTestCases = new ArrayList<Long>();\r\n\t\t\r\n\t\tString fileName = \"C:\\\\dev\\\\projects\\\\R3_1Ships\\\\src\\\\Example.txt\";\r\n\t\t\r\n\t\ttry \r\n\t\t{\r\n\t\t\tInputStream in = new FileInputStream(new File(fileName));\r\n\t\t\tScanner reader = new Scanner(in);\r\n\t        \r\n\r\n\t        int cntTests = reader.nextInt();\r\n\t        \r\n\t        for (int i = 0; i<cntTests; i++) \r\n\t        {\r\n\t        \tSystem.out.println(\"TEST NUMBER \" + i);\r\n\t        \tlong R = reader.nextInt();\r\n\t        \tlong C = reader.nextInt();\r\n\t        \tlong W = reader.nextInt();\r\n\t        \t\r\n\t        \tSystem.out.println(R+\" \"+C+\" \"+W);\r\n\t        \t\r\n\t        \tlong result = 0;\r\n\t        \t\r\n\t        \tresult = C / W;\r\n\t        \tresult = result * R;\r\n\t        \t\r\n\t        \tif (C % W !=0) {\r\n\t        \t\tresult = result + 1;\r\n\t        \t}\r\n\t        \t\r\n\r\n\t\t        result = result + ( W - 1); \r\n\t\t        \r\n\t        \tTestCases.add(result);\r\n\t        \tSystem.out.println(result);\r\n\t        \r\n\t        }\r\n\t        reader.close();\r\n\t\t} catch (Exception ex)\t{\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tString outFileName = \"C:\\\\dev\\\\projects\\\\R3_1Ships\\\\src\\\\output.txt\";\n\t\ttry { \n\t\tFile file = new File(outFileName);\n\t\tBufferedWriter output = new BufferedWriter(new FileWriter(file));\n\t\tfor (int i =0; i < TestCases.size(); i++) {\n\t\t\toutput.write(\"Case #\" + (i+1) + \": \" + TestCases.get(i));\n\t\t\toutput.newLine();\n\t\t}\n\t\t\n\t\toutput.close();\n\t\t} catch ( Exception e ) {\n\t\t\te.printStackTrace();\n\t\t}\r\n\t\tSystem.out.println(\"Done\");\r\n\r\n\t}\r\n\r\n\r\n}\r\n", "idx": "3238"}
{"func": "package googlejam3.p241;\nimport java.io.*;\nimport java.util.*;\n\nclass F\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\tint nData = in.nextInt();\n\t\tin.nextLine();\n\t\t\n\t\tfor (int asdf = 0; asdf < nData; asdf++)\n\t\t{\n\t\t\t//solve the problem\n\t\t\tint rows = in.nextInt();\n\t\t\tint cols = in.nextInt();\n\t\t\tint width = in.nextInt();\n\t\t\t\n\t\t\t//main answer\n\t\t\tint perrow = cols / width;\n\t\t\tint answer = perrow * rows;\n\t\t\tanswer += width - 1;\n\t\t\t\n\t\t\t//extra guesses\n\t\t\tif (cols % width != 0)\n\t\t\t{\n\t\t\t\tanswer++;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + (asdf+1) + \": \" + answer);\n\t\t}\n\t}\n}\n", "idx": "3241"}
{"func": "package googlejam3.p244;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\npublic class Main {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tif(!INPUT.isDirectory())\n\t\t\tthrow new RuntimeException(\"Input folder dosen't exist\");\n\t\tfor(File file : INPUT.listFiles(f -> f.getName().endsWith(\".in\"))) {\n\t\t\tFile outputFile = new File(file.getAbsolutePath().replaceAll(\"\\\\.([^\\\\.]*)$\", \"\")+\".out\");\n\t\t\tBufferedReader inputReader = new BufferedReader(new FileReader(file));\n\t\t\tPrintWriter outputWriter = new PrintWriter(outputFile);\n\t\t\tint testNum = Integer.parseInt(inputReader.readLine());\n\t\t\tfor (int i=0; i<testNum; i++) {\n\t\t\t\tString[] rcw = inputReader.readLine().split(\" \");\n\t\t\t\tint r = Integer.parseInt(rcw[0]);\n\t\t\t\tint c = Integer.parseInt(rcw[1]);\n\t\t\t\tint w = Integer.parseInt(rcw[2]);\n\t\t\t\tint res = c/w * r;\n\t\t\t\tif (c % w != 0)\n\t\t\t\t\tres += 1;\n\t\t\t\tres += (w-1);\n\t\t\t\tint answer = res;\n\t\t\t\toutputWriter.format(\"Case #%d: %d\\n\", (i+1), answer);\n\t\t\t}\n\t\t\tinputReader.close();\n\t\t\toutputWriter.close();\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static final File INPUT = new File(\"d:/TEST/\");\r\n\t\r\n}", "idx": "3244"}
{"func": "package googlejam3.p245;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tString fileName = \"A-large\";\r\n\t\tScanner s = null;\r\n\t\tPrintWriter p = null;\r\n\t\ttry {\r\n\t\t\ts = new Scanner(new FileInputStream(fileName + \".in\"));\r\n\t\t\tp = new PrintWriter(new File(fileName + \".out\"));\r\n\t\t} catch (IOException e) {\r\n\t\t}\r\n\t\tint t = s.nextInt();\r\n\t\tfor (int i = 0; i < t; i++) {\r\n\t\t\tint r = s.nextInt();\t// row\r\n\t\t\tint c = s.nextInt();\t// column\r\n\t\t\tint w = s.nextInt();\t// width\r\n\t\t\tSystem.out.println(c / w * r + (w - 1) + (c % w == 0 ? 0 : 1));\r\n\t\t\tp.println(\"Case #\" + (i + 1) + \": \" + (c / w * r + (w - 1) + (c % w == 0 ? 0 : 1)));\r\n\t\t}\r\n\t\tp.close();\r\n\t\ts.close();\r\n\t}\r\n}\r\n", "idx": "3245"}
{"func": "package googlejam3.p246;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\tfor (int t = 0; t < T; t++) {\n\t\t\tint row = sc.nextInt();\n\t\t\tint column = sc.nextInt();\n\t\t\tint width = sc.nextInt();\n\n\t\t\tint ans = 0;\n\t\t\tans += (column / width) * row;\n\n\t\t\tans += (width - 1);\n\t\t\tif (column % width != 0) {\n\t\t\t\tans++;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + (t + 1) + \": \" + ans);\n\n\t\t}\n\t\tsc.close();\n\n\t}\n}", "idx": "3246"}
{"func": "package googlejam3.p248;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class CJRC1 {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException{\r\n\t\tScanner sc = new Scanner(new File(\"input.txt\"));\r\n\t\tPrintWriter pw = new PrintWriter(\"OUTPUT.TXT\");\r\n\t\tint T = sc.nextInt();\r\n\t\tint r,c,w,rez;\r\n\t\tfor(int t=0; t<T; ++t){\r\n\t\t\tr = sc.nextInt();\r\n\t\t\tc =sc.nextInt();\r\n\t\t\tw = sc.nextInt();\r\n\t\t\trez = c/w;\r\n\t\t\trez *=r;\r\n\t\t\trez +=w-1;\r\n\t\t\tif(c%w > 0)\r\n\t\t\t\trez+=1;\r\n\t\t\tpw.println(\"Case #\" + (t+1) + \": \" + rez );\r\n\t\t}\r\n\t\tpw.close();\r\n\t}\r\n\t\r\n}\r\n", "idx": "3248"}
{"func": "package googlejam3.p249;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tLocale.setDefault(Locale.US);\r\n//\t\ttry (Scanner scanner = new Scanner(new File(\"a_example.in\"))) {\r\n//\t\ttry (Scanner scanner = new Scanner(new File(\"a_small.in\"))) {\r\n\t\ttry (Scanner scanner = new Scanner(new File(\"a_large.in\"))) {\r\n\t\t\tint numberOfCases = scanner.nextInt();\r\n\t\t\t\t\t\t\r\n\t\t\tfor (int i = 1; i <= numberOfCases; i++) {\r\n\t\t\t\tint R = scanner.nextInt();\r\n\t\t\t\tint C = scanner.nextInt();\r\n\t\t\t\tint W = scanner.nextInt();\r\n\t\t\t\t\r\n\t\t\t\tint solution = R * (C / W) + W;\r\n\t\t\t\tif (C % W == 0) {\r\n\t\t\t\t\tsolution--;\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(\"Case #\" + i + \": \" + solution);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "3249"}
{"func": "package googlejam3.p252;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class Main {\r\npublic static void main(String [] args)throws Exception{\r\n\tBufferedReader br=new BufferedReader(new FileReader(\"C:/users/abhishek/Desktop/abhi.txt\"));\r\n\tFileWriter f=new FileWriter(\"C:/users/abhishek/Desktop/output.txt\");\r\n\tString newLine=System.getProperty(\"line.separator\");\r\n\tint t=Integer.parseInt(br.readLine());\r\n    for(int test=1;test<=t;test++){\r\n    StringTokenizer st=new StringTokenizer(br.readLine());\r\n    int r=Integer.parseInt(st.nextToken());\r\n    int c=Integer.parseInt(st.nextToken());\r\n    int w=Integer.parseInt(st.nextToken());\r\n    int ans=(c/w)*r;\r\n    if(c%w==0)\r\n    \tf.write(\"Case #\" + test + \": \" + (ans+w-1) + newLine);\r\n    else f.write(\"Case #\" + test + \": \" + (ans+w) + newLine);\r\n\t}\r\n\tf.close();\r\n}\r\n}", "idx": "3252"}
{"func": "package googlejam3.p256;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class ProblemA {\r\n\r\n\t/**\r\n\t * @param args\r\n\t *            : first arg - input file, second arg - output file\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\tif (args.length != 2) {\r\n\t\t\tSystem.out.println(\"Missing parameters (2 required)\");\r\n\t\t\tSystem.out.println(\" * parameter 1 - input file\");\r\n\t\t\tSystem.out.println(\" * parameter 2 - output file\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tBufferedReader reader = null;\r\n\t\tBufferedWriter writer = null;\r\n\t\t\r\n\t\ttry {\r\n\t\t\treader = new BufferedReader(new FileReader(args[0]));\r\n\t\t\twriter = new BufferedWriter(new FileWriter(args[1]));\r\n\r\n\t\t\tString s_t = reader.readLine();\r\n\t\t\tint t = Integer.valueOf(s_t).intValue();\r\n\t\t\t\r\n\t\t\tfor (int i = 1; i <= t; i++) {\r\n\t\t\t\tString line = reader.readLine();\r\n\t\t\t\tString[] vars = line.split(\" \");  \r\n\t\t\t\t\r\n\t\t\t\tint r = Integer.valueOf(vars[0]).intValue();\r\n\t\t\t\tint c = Integer.valueOf(vars[1]).intValue();\r\n\t\t\t\tint w = Integer.valueOf(vars[2]).intValue();\r\n\t\t\t\t\r\n\t\t\t\tint result = 0;\r\n\t\t\t\t\r\n\t\t\t\tint perR = c / w;\r\n\t\t\t\t\r\n\t\t\t\tresult = r * perR + w;\r\n\t\t\t\t\r\n\t\t\t\tif (c % w == 0) {\r\n\t\t\t\t\tresult = result - 1; \r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\twriter.write(\"Case #\" + i + \": \" + result);\r\n\t\t\t\twriter.newLine();\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} finally {\r\n\t\t\ttry {\n\t\t\t\tif (reader != null)\n\t\t\t\t\treader.close();\n\t\t\t} catch (IOException e) {\n\t\t\t}\r\n\t\t\ttry {\n\t\t\t\tif (writer != null)\n\t\t\t\t\twriter.close();\n\t\t\t} catch (IOException e) {\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "3256"}
{"func": "package googlejam3.p257;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.io.IOException;\n\nclass Brattleship {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new FileReader(args[0]));\n\t\tPrintWriter out = new PrintWriter(args[0].replace(\".in\", \".out\"));\n\n\t\tint numberOfCases = Integer.parseInt(in.readLine());\n\t\tfor (int caseNumber = 1; caseNumber <= numberOfCases; caseNumber++) {\n\t\t\tout.printf(\"Case #%d: \", caseNumber);\n\n\t\t\tString[] params = in.readLine().split(\" \");\n\t\t\tint rows = Integer.parseInt(params[0]);\n\t\t\tint columns = Integer.parseInt(params[1]);\n\t\t\tint shipWidth = Integer.parseInt(params[2]);\n\n\t\t\tint scoutsPerRow = columns / shipWidth;\n\t\t\tint totalScouts = scoutsPerRow * rows;\n\t\t\tint totalCalls = totalScouts + shipWidth - 1;\n\n\t\t\tif (columns % shipWidth > 0) totalCalls += 1;\n\n\t\t\tout.println(totalCalls);\n\t\t}\n\n\t\tin.close();\n\t\tout.close();\n\t}\n}", "idx": "3257"}
{"func": "package googlejam3.p259;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class A {\r\n\r\n    private static final String PATH_INPUT = \"src/main/resources/input/A-large.in\";\r\n\r\n    private static final String PATH_OUTPUT = \"src/main/resources/output/A-large.out\";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\tList<String> tokens1 = new ArrayList<>();\n\t\t\n\t\ttry (BufferedReader reader = Files.newBufferedReader(Paths\n\t\t        .get(PATH_INPUT))) {\n\t\t    String line = null;\n\t\t    while ((line = reader.readLine()) != null) {\n\t\t\tfor (String token : line.split(\"\\\\s\")) {\n\t\t\t    if (!token.isEmpty()) {\n\t\t\t\ttokens1.add(token);\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\tList<String> tokens = tokens1;\r\n\r\n\tint t = Integer.valueOf(tokens.remove(0));\r\n\tfor (int i = 0; i < t; i++) {\r\n\t    long r = Long.valueOf(tokens.remove(0));\r\n\t    long c = Long.valueOf(tokens.remove(0));\r\n\t    long w = Long.valueOf(tokens.remove(0));\r\n\r\n\t    long res = (c / w) * r;\r\n\t    if (c % w == 0) {\r\n\t\tres += w - 1;\r\n\t    } else {\r\n\t\tres += w;\r\n\t    }\r\n\t    tokens.add(\"\" + res);\r\n\t}\r\n\r\n\ttry (BufferedWriter writer = Files.newBufferedWriter(Paths\n\t        .get(PATH_OUTPUT))) {\n\t    for (int i = 0; i < tokens.size(); i++) {\n\t\twriter.write(\"Case #\" + (i + 1) + \": \" + tokens.get(i));\n\t\tif (i < tokens.size() - 1) {\n\t\t    writer.newLine();\n\t\t}\n\t    }\n\t}\r\n\r\n\tSystem.out.println(\"Done\");\r\n    }\r\n}\r\n", "idx": "3259"}
{"func": "package googlejam3.p261;\nimport java.util.Scanner;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class a\n{\n\n\tpublic static void main(String [] args)\n\t{\n\n\t\tScanner infile = null;\n\t\ttry{\n\t\t\t//infile = new Scanner(new File(\"D-small.txt\"));\n\t\t\tinfile = new Scanner(new File(\"A-large.txt\"));\n\t\t}\n\t\tcatch (FileNotFoundException e)\n\t\t{\n\t\t\tSystem.out.println(\"File not found\");\n\t\t}\n\t\tint numCases = infile.nextInt();\n\t\tint row;\n\t\tint col;\n\t\tint width;\n\t\tint ret = 0;\n\t\tint temp;\n\t\tfor(int a = 0; a < numCases; a++)\n\t\t{\n\t\t\trow = infile.nextInt();\n\t\t\tcol = infile.nextInt();\n\t\t\twidth = infile.nextInt();\n\t\t\tif(col%width == 0)\n\t\t\t\tret = width-1;\n\t\t\telse\n\t\t\t\tret = width;\n\t\t\ttemp = col/width;\n\t\t\tret+=(temp*row);\n\t\t\tSystem.out.println(\"Case #\" + (a+1) + \": \" + ret);\n\t\t}\n\n\n\n\t}\n}", "idx": "3261"}
{"func": "package googlejam3.p262;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Formatter;\nimport java.util.Scanner;\n\npublic class ProblemA {\n\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tScanner in = new Scanner(new File(\"/Users/bfa/Documents/workspace/cf300/src/A-large.in\"));\n\t\tFormatter format = new Formatter(new File(\"/Users/bfa/Documents/workspace/cf300/src/large.out\"));\n\t\tint t = in.nextInt();\n\t\tfor (int i = 1; i <= t; ++i) {\n\t\t\tint r = in.nextInt();\n\t\t\tint c = in.nextInt();\n\t\t\tint w = in.nextInt();\n\n\t\t\tint k = c / w;\n\n\t\t\tint result = r * k;\n\t\t\tresult+=(w-1);\n\n\t\t\tif (c % w != 0) {\n\t\t\t\tresult++;\n\t\t\t}\n\n\t\t\t\n\t\t\tformat.format(\"Case #%d: %d%n\", i, result);\n\t\t}\n\t\tformat.flush();\n\t\tformat.close();\n\t\tin.close();\n\t}\n\n}\n", "idx": "3262"}
{"func": "package googlejam3.p267;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\n\npublic class problemA {\n\t\n\tprivate static int inst;\n\n\tpublic static void main(String[] args) {\n\n        String input = \"/Users/npapa/Documents/codejam/A-large.in\";\n        //String input = \"/Users/npapa/Documents/codejam/A-large.in\";\n        String output = \"/Users/npapa/Documents/codejam/output\";\n\t\ttry {\n            Scanner sc = new Scanner(new FileReader(input));\n\t\t\tPrintWriter pw = new PrintWriter(output);\n\n            int n = sc.nextInt();\n            sc.nextLine();\n            for (int c = 0; c < n; c++) {\n                System.out.println(\"Test case \" + (c + 1) + \"...\");\n                pw.print(\"Case #\" + (c + 1) + \": \");\n                int r = sc.nextInt();\n\t\t\t\tint c1 = sc.nextInt();\n\t\t\t\tint n1 = sc.nextInt();\n\t\t\t\tSystem.out.println(r+\" \"+c1+\" \"+n1);\n\t\t\t\tint findRow =r*(c1/n1);\n\t\t\t\t\t\tint findShip=0;\n\t\t\t\t\t\tif(c1%n1==0)\n\t\t\t\t\t\t\tfindShip = n1-1;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfindShip = n1;\n\t\t\t\t\n\t\t\t\t//\t\tif(n==1){\n\t\t\t\t//\t\t\tfindRow=r*c;\n\t\t\t\t//\t\t\tfindShip=0;\n\t\t\t\t//\t\t}\n\t\t\t\t\t\tSystem.out.println(\"findRow: \"+findRow+\" findShip: \"+findShip);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tint res = findRow+findShip;\n\t\t\t\t\n\t\t\t\tSystem.out.println(res);\n\t\t\t\tpw.print(res);\n                pw.println();\n            }\n            pw.println();\n            pw.flush();\n            pw.close();\n            sc.close();\n        } catch (FileNotFoundException ex) {\n        \tex.printStackTrace();\n        } catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\n}\n", "idx": "3267"}
{"func": "package googlejam3.p269;\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\t\n\t\n    \n\tpublic static void main(String[] args) throws IOException, FileNotFoundException {\n    \t//Read, NOTICE: nextInt() does not advance but nextLine() do!\n\t\tScanner in=new Scanner(new FileReader(\"A-large (2).in\"));\n\t\t//Scanner in=new Scanner(System.in);\n    \t//Write\n    \tFileWriter fw=new FileWriter(\"outputTest.txt\");\n    \tBufferedWriter bw=new BufferedWriter(fw);\n\t\t\n\t\tint T=in.nextInt();\n       for (int t=0;t<T;t++){\n    \t   int R=in.nextInt();\n    \t   int C=in.nextInt();\n    \t   int W=in.nextInt();\n    \t   \n    \t   int discoverCost=C/W;\n    \t   \n    \t   int lastChange=C%W;\n    \t   \n    \t   int output=(lastChange==0?0:1)+discoverCost*R+W-1;\n    \t   \n    \t   bw.write(\"Case #\"+(t+1)+\": \"+output+\"\\n\");\n    \t   \n       }\n\t\t\n\t\t//bw.write(\"Case #\"+(t+1)+\": \"+output+\"\\n\");\n\t\t    \n\t\t\t\n\t\t\n\t\t\n\t\t\n    \t\t//System.out.println();\n    \t\t//bw.write(\"Case #\"+(t+1)+\":\"+\"\\n\");\n    \n    \t\n    \t    \n    \t\n    \t\n    \t\n    \t\t\n    \t\t\n    \t\n    \t\n    \t//test Write part\n    \t//bw.write(\"asd is art\\n\");\n    \t//bw.write(\"hahaha\");\n    \t\n    \t\n    \t//epilogue\n\t\tbw.close();\n\t\t\n        }\n    \n\n}\n    ", "idx": "3269"}
{"func": "package googlejam3.p273;\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.util.NoSuchElementException;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * CodeJam 2015: Round1C-A\r\n * User: Mitesh, 5/10/15\r\n */\r\npublic class Problem1A {\r\n    private static final boolean DEBUG = false;\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Problem1A prog = new Problem1A();\r\n\r\n        Scanner in = new Scanner(new FileReader(args[0]));\r\n        final int cntCases = in.nextInt();\r\n\r\n        for (int caseNum = 1; caseNum <= cntCases && in.hasNextLine(); caseNum++) {\r\n            try {\r\n                in.nextLine(); //discard!\r\n                final int ROWS = in.nextInt();\r\n                final int COLUMNS = in.nextInt();\r\n                final int WIDTH = in.nextInt();\n\t\t\t\tint cnt = (COLUMNS/WIDTH) * ROWS;\n\t\t\t\t\n\t\t\t\tint leftover = COLUMNS%WIDTH;\n\t\t\t\tif (leftover != 0) {\n\t\t\t\t    cnt++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcnt += (WIDTH-1);\r\n\r\n                int ans1 = cnt;\r\n                System.out.println(\"Case #\" + caseNum + \": \" + ans1);\r\n            }\r\n            catch (NoSuchElementException ex) {\r\n                if (DEBUG) System.out.println(\"err: \" + ex);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "3273"}
{"func": "package googlejam3.p278;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created with IntelliJ IDEA.\r\n * User: WANG\r\n * Date: 4/17/15\r\n * Time: 5:48 PM\r\n * To change this template use File | Settings | File Templates.\r\n */\r\npublic class r11 {\r\n    public static void main(String[] args) {\r\n        try {\r\n\r\n            Scanner input=new Scanner(new File(args[0]));\r\n            PrintWriter output=new PrintWriter(args[1]) ;\r\n            int casenumber = input.nextInt();\r\n            for(int i=0;i<casenumber;i++){\r\n                int R = input.nextInt(),C=input.nextInt(),W=input.nextInt(),count=0;\r\n                if(C%W == 0)\r\n                    count=(R-1)*(C/W)+C/W+W-1;\r\n                else\r\n                    count=(R-1)*(C/W)+C/W+W;\r\n                output.println(\"Case #\"+(i+1)+\": \"+count);\r\n            }\r\n            output.flush();\r\n        }catch(FileNotFoundException e){}\r\n\r\n    }\r\n}\r\n", "idx": "3278"}
{"func": "package googlejam3.p279;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.util.Scanner;\n\npublic class ProblemA {\n    \n    static BufferedWriter bw;\n    \n    public static void main(String[] args) throws Exception {\n        \n        Scanner sc = new Scanner(new File(\"A-large.in\"));\n        bw = new BufferedWriter(new FileWriter(new File(\"output.txt\")));\n            \n        int tc = sc.nextInt();\n        for(int d=1;d<=tc;d++){\n            bw.write(\"Case #\"+String.valueOf(d)+\": \");\n\n            int r = sc.nextInt();\n            int c = sc.nextInt();\n            int w = sc.nextInt();\n            \n            int points = (c/w)*r;\n            if(w>1){\n                points += (w-1);\n                if(c%w > 0)points += 1;\n            }\n\n            bw.write(String.valueOf(points));\n            bw.newLine();\n            bw.flush();   \n        }\n        \n        sc.close();\n        bw.close();\n    }\n}\n", "idx": "3279"}
{"func": "package googlejam3.p280;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\npublic class Q1 {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString directory = \"D:\\\\Work\\\\eclipse\\\\workspace\\\\CodeJam2015\\\\src\\\\round1c\\\\q1\\\\\";\r\n\t\tString fileName = \"A-large\";\r\n\t\t//String fileName = \"testA\";\r\n\t\tFile file = new File(directory + fileName + \".in\");\r\n\t\tFile outFile = new File(directory + fileName + \".out\");\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(file));\r\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\r\n\t\tint testCases = Integer.parseInt(br.readLine());\r\n\t\tfor (int t = 1; t <= testCases; t++) {\r\n\t\t\t/*\r\n\t\t\t * Your code here\r\n\t\t\t */\r\n\t\t\tString input1 = br.readLine();\n\t\t\tString[] arr1 = input1.split(\" \");\n\t\t\t\n\t\t\tR = Integer.parseInt(arr1[0]);\n\t\t\tC = Integer.parseInt(arr1[1]);\n\t\t\tW = Integer.parseInt(arr1[2]);\n\t\t\t\n\t\t\tint fmove = C / W;\n\t\t\tint smove = W;\n\t\t\tif (C % W == 0) {\n\t\t\t\tsmove--;\n\t\t\t}\n\t\t\t\n\t\t\tint bmove = (C / W) * (R - 1);\n\t\t\tint total = bmove + fmove + smove;\r\n\t\t\tString answer = total + \"\";\r\n\r\n\t\t\tString response = \"Case #\" + t + \": \" + answer + \"\\n\";\r\n\t\t\tbw.write(response);\r\n\r\n\t\t\t//System.out.println(input1 + \"//\");\r\n\t\t\t//System.out.println(response);\r\n\t\t}\r\n\t\tbr.close();\r\n\t\tbw.close();\r\n\t}\r\n\r\n\tstatic int R;\r\n\tstatic int C;\r\n\tstatic int W;\r\n}\r\n", "idx": "3280"}
{"func": "package googlejam3.p283;\n\t\nimport java.io.*;\nimport java.util.*;\nimport static java.util.Arrays.*;\n\npublic class AL {\n    static final boolean _PRACTICE = !true;\n    static final boolean _SAMPLE = !true;\n    static final boolean _SMALL = !true;\n    static final String _PROBLEM = \"A\";\n\n    public static void main(String... args) throws IOException {\n        if (!_SAMPLE) {\n            if (_SMALL) {\n                int i = 0;\n                while (new File(_PROBLEM + \"-small\"\n\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\").exists())\n                    i++;\n                i--;\n                boolean test = false;\n                if (new File(_PROBLEM + \"-small\"\n\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\").exists()) {\n                    System.err.println(\"overwrite?(y/n)\");\n                    char c = (char) System.in.read();\n                    test = c != 'y';\n                }\n                if (test) {\n                    System.setIn(new FileInputStream(_PROBLEM + \"-small\"\n\t\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\"));\n                    System.setOut(new PrintStream(_PROBLEM + \"-small-test.out\"));\n\t\t\t\t\tAL r = new AL();\n                    Scanner sc = new Scanner(System.in);\n\t\t\t\t\tint testCase = sc.nextInt();\n\t\t\t\t\t\n\t\t\t\t\tfor (int k = 1; k <= testCase; k++) {\n\t\t\t\t\t    System.out.printf(\"Case #%d: \", k);\n\t\t\t\t\t    System.err.printf(\"Case #%d: \", k);\n\t\t\t\t\t\n\t\t\t\t\t    int r1 = sc.nextInt();\n\t\t\t\t\t    int c = sc.nextInt();\n\t\t\t\t\t    int w = sc.nextInt();\n\t\t\t\t\t    \n\t\t\t\t\t    int count = (c / w) * r1;\n\t\t\t\t\t    count += (w - 1);\n\t\t\t\t\t    if (c % w != 0) {\n\t\t\t\t\t    \tcount++;\n\t\t\t\t\t    }\n\t\t\t\t\t    \n\t\t\t\t\t    System.out.println(count);\n\t\t\t\t\t    System.err.println(count);\n\t\t\t\t\t    \n\t\t\t\t\t}\n\t\t\t\t\tsc.close();\n                    FileReader f1 = new FileReader(_PROBLEM + \"-small-test.out\");\n                    FileReader f2 = new FileReader(_PROBLEM + \"-small\"\n\t\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\");\n                    BufferedReader br1 = new BufferedReader(f1);\n                    BufferedReader br2 = new BufferedReader(f2);\n                    for (int j = 1;; j++) {\n                        String s1 = br1.readLine();\n                        String s2 = br2.readLine();\n                        if (s1 == null && s2 == null) {\n                            System.err.println(\"OK!\");\n                            break;\n                        }\n                        if (s1 == null || s2 == null || !s1.equals(s2)) {\n                            System.err.println(\"failed at line \" + j);\n                            System.err.println(\"expected \" + s2);\n                            System.err.println(\"but \" + s1);\n                            break;\n                        }\n                    }\n                    br1.close();\n                    br2.close();\n                } else {\n                    System.setIn(new FileInputStream(_PROBLEM + \"-small\"\n\t\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".in\"));\n                    System.setOut(new PrintStream(_PROBLEM + \"-small\"\n\t\t\t\t\t+ (_PRACTICE ? i == 0 ? \"-practice\" : \"\" : \"-attempt\" + i) + \".out\"));\n\t\t\t\t\tAL r = new AL();\n                    Scanner sc = new Scanner(System.in);\n\t\t\t\t\tint testCase = sc.nextInt();\n\t\t\t\t\t\n\t\t\t\t\tfor (int k = 1; k <= testCase; k++) {\n\t\t\t\t\t    System.out.printf(\"Case #%d: \", k);\n\t\t\t\t\t    System.err.printf(\"Case #%d: \", k);\n\t\t\t\t\t\n\t\t\t\t\t    int r1 = sc.nextInt();\n\t\t\t\t\t    int c = sc.nextInt();\n\t\t\t\t\t    int w = sc.nextInt();\n\t\t\t\t\t    \n\t\t\t\t\t    int count = (c / w) * r1;\n\t\t\t\t\t    count += (w - 1);\n\t\t\t\t\t    if (c % w != 0) {\n\t\t\t\t\t    \tcount++;\n\t\t\t\t\t    }\n\t\t\t\t\t    \n\t\t\t\t\t    System.out.println(count);\n\t\t\t\t\t    System.err.println(count);\n\t\t\t\t\t    \n\t\t\t\t\t}\n\t\t\t\t\tsc.close();\n                }\n            } else {\n                System.setIn(new FileInputStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".in\"));\n                System.setOut(new PrintStream(_PROBLEM + \"-large\" + (_PRACTICE ? \"-practice\" : \"\") + \".out\"));\n\t\t\t\tAL r = new AL();\n                Scanner sc = new Scanner(System.in);\n\t\t\t\tint testCase = sc.nextInt();\n\t\t\t\t\n\t\t\t\tfor (int k = 1; k <= testCase; k++) {\n\t\t\t\t    System.out.printf(\"Case #%d: \", k);\n\t\t\t\t    System.err.printf(\"Case #%d: \", k);\n\t\t\t\t\n\t\t\t\t    int r1 = sc.nextInt();\n\t\t\t\t    int c = sc.nextInt();\n\t\t\t\t    int w = sc.nextInt();\n\t\t\t\t    \n\t\t\t\t    int count = (c / w) * r1;\n\t\t\t\t    count += (w - 1);\n\t\t\t\t    if (c % w != 0) {\n\t\t\t\t    \tcount++;\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t    System.out.println(count);\n\t\t\t\t    System.err.println(count);\n\t\t\t\t    \n\t\t\t\t}\n\t\t\t\tsc.close();\n            }\n        } else {\n\t\t\tAL r = new AL();\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tint testCase = sc.nextInt();\n\t\t\t\n\t\t\tfor (int k = 1; k <= testCase; k++) {\n\t\t\t    System.out.printf(\"Case #%d: \", k);\n\t\t\t    System.err.printf(\"Case #%d: \", k);\n\t\t\t\n\t\t\t    int r1 = sc.nextInt();\n\t\t\t    int c = sc.nextInt();\n\t\t\t    int w = sc.nextInt();\n\t\t\t    \n\t\t\t    int count = (c / w) * r1;\n\t\t\t    count += (w - 1);\n\t\t\t    if (c % w != 0) {\n\t\t\t    \tcount++;\n\t\t\t    }\n\t\t\t    \n\t\t\t    System.out.println(count);\n\t\t\t    System.err.println(count);\n\t\t\t    \n\t\t\t}\n\t\t\tsc.close();\n\t\t}\n    }\n}\n", "idx": "3283"}
{"func": "package googlejam3.p287;\nimport java.util.*;\n\n/* Version: 0.0.1\n * Date: 5/10/15\n * Author: Rahul Butani\n */\n\nclass Brattleship //Darn siblings, man.\n{\n\tstatic Scanner sc = new Scanner(System.in);\n\tstatic int testCases[][];\n\tstatic int outputs[];\n\n\tpublic static void main(String[] args)\n\t{\n\t\ttestCases = new int[sc.nextInt()][3];\n\t\toutputs = new int[testCases.length];\n\t\t\n\t\tfor(int i = 0; i < testCases.length; i++)\n\t\t{\n\t\t\tfor(int j = 0; j < 3; j++)\n\t\t\t{\n\t\t\t\ttestCases[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < testCases.length; i++)\n\t\t{\n\t\t\toutputs[i] = (((int)(testCases[i][1]/testCases[i][2])) * testCases[i][0]) + (testCases[i][2]-1) + ((int)Math.ceil((double)testCases[i][1]/(double)testCases[i][2])-((int)(testCases[i][1]/testCases[i][2])));\n\t\t}\n\t\tfor(int i = 0; i < outputs.length; i++)\n\t\t{\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + outputs[i] + \"\");\n\t\t}\n\t}\n}", "idx": "3287"}
{"func": "package googlejam3.p291;\n\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n/**\n * Created by mafulafunk on 13.03.15.\n */\npublic class Brattleship {\n    private static int cases;\n\n    public static void main(String[] args) throws IOException {\n        File in = new File(\"/Users/mafulafunk/Downloads/A-large.in\");\n//        File in = new File(\"/Users/mafulafunk/Code/jam/StoreCredit/src/main/resources/Brattleship.in\");\n        PrintWriter out = new PrintWriter(\"output.txt\");\n        BufferedReader br = new BufferedReader(new FileReader(in));\n        cases = Integer.valueOf(br.readLine());\n        for (int i = 1; i <= cases; i++) {\n\n\n            String[] strArray = br.readLine().split(\" \");\n\t\t\tlong[] out1 = new long[strArray.length];\n\t\t\tfor (int i1 = 0; i1 < strArray.length; i1++) {\n\t\t\t    out1[i1] = Integer.parseInt(strArray[i1]);\n\t\t\t}\n\t\t\tlong[] line = out1;\n\n            long rows = line[0];\n            long cols = line[1];\n            long sizeOfShip = line[2];\n\n            long perLine = cols / sizeOfShip;\n\n            long sinkTheShip = cols % sizeOfShip == 0 ? sizeOfShip -1 : sizeOfShip;\n\n            out.println(\"Case #\" + i + \": \" + (rows * perLine + sinkTheShip));\n        }\n        out.flush();\n        out.close();\n    }\n\n}\n", "idx": "3291"}
{"func": "package googlejam3.p295;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class first {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\")))\r\n\t\t{\r\n\t\t\tPrintWriter writer = new PrintWriter(\"solution-A-large.output\", \"UTF-8\");\r\n\t\t\t\r\n\t\t\tint T = 0; //number of tests\r\n\t\t\t\r\n\t\t\tString sCurrentLine = br.readLine();\r\n\t\t\tT = Integer.parseInt(sCurrentLine);\r\n\t\t\tString stringBuffer[] = null;\r\n\t\t\tint[] answers = new int[T];\r\n\t\t\tfor(int testIntance = 1 ; testIntance <= T; ++testIntance){\r\n\t\t\t\tSystem.out.println(\"inst: \" + testIntance);\r\n\t\t\t\tsCurrentLine = br.readLine();\r\n\t\t\t\tstringBuffer = sCurrentLine.split(\" \");\r\n\t\t\t\tint R = Integer.parseInt(stringBuffer[0]);\r\n\t\t\t\tint C = Integer.parseInt(stringBuffer[1]);\r\n\t\t\t\tint W = Integer.parseInt(stringBuffer[2]);\r\n\t\t\t\tanswers[testIntance-1] = (int) (Math.floor(C/W)*R + W);\r\n\t\t\t\tif(C%W == 0){\r\n\t\t\t\t\tanswers[testIntance-1]--;\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(\"Case #\" + testIntance + \": \" + answers[testIntance-1]);\r\n\t\t\t    writer.println(\"Case #\" + testIntance + \": \" + answers[testIntance-1]);\r\n\t\t\r\n\t\t\t}\r\n\t\t\r\n\t\t\twriter.close();\r\n\t\t\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} \r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "3295"}
{"func": "package googlejam3.p296;\n/*\r\n * @author Mr E\r\n */\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Codejam1CA {\r\n    \r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        \r\n//        Scanner s=new Scanner(System.in);\r\n        PrintWriter writer=new PrintWriter(\"al.out\");\r\n        Scanner s=new Scanner(new File(\"al.in\"));\r\n        int testcase=s.nextInt();\r\n        for (int i = 0; i < testcase; i++) {\r\n            int r=s.nextInt();\r\n            int c=s.nextInt();\r\n            int l=s.nextInt();\r\n            int x=c/l;\r\n            int xx=x*r;\r\n            int ans=xx+l-1;\r\n            \r\n            if(c%l!=0 && l!=1){\r\n                ans++;\r\n            }\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            System.out.println(\"Case #\"+(i+1)+\": \"+ans);\r\n            writer.println(\"Case #\"+(i+1)+\": \"+ans);\r\n        }\r\n        writer.close();\r\n        \r\n    }\r\n    \r\n}\r\n", "idx": "3296"}
{"func": "package googlejam3.p301;\nimport java.util.Scanner;\n\npublic class Brattleship {\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint T = input.nextInt();\n\t\tfor (int i = 0; i < T; i++) {\n\t\t\tint r = input.nextInt();\n\t\t\tint c = input.nextInt();\n\t\t\tint w = input.nextInt();\n\t\t\t\n\t\t\tint solution;\n\t\t\tif (c % w == 0)\n\t\t\t\tsolution = (c/w) * r+w-1;\n\t\t\telse {\n\t\t\t\tsolution = (c/w) * r+w;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \"  + solution);\n\t\t}\n\t\tinput.close();\n\t}\n\n}\n", "idx": "3301"}
{"func": "package googlejam3.p303;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class prblmA {\r\n    final static String PROBLEM_NAME = \"prblmA\";\r\n    final static String WORK_DIR = \"F:\\\\GCJ\\\\\" + PROBLEM_NAME + \"\\\\\";\r\n\t\r\n    public static void main(String[] args) throws Exception {\r\n         //Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-small-attempt1.in\"));\r\n         Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-large.in\"));\r\n\t\t //Scanner sc = new Scanner(new FileReader(WORK_DIR + \"input.txt\"));\r\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\r\n        int caseCnt = sc.nextInt();\r\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\r\n           // System.out.println(\"Processing test case \" + (caseNum + 1));\r\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n\t\t\tprblmA r = new prblmA();\r\n            int R = sc.nextInt();\n\t\t\tint C = sc.nextInt();\n\t\t\tint W = sc.nextInt();\n\t\t\t\n\t\t\tint count = 0 ;\n\t\t\tcount = (int) Math.floor(C/W);\t \n\t\t\tcount = count*R;\n\t\t\tif(C%W==0)\n\t\t\tcount = count+W-1; \n\t\t\telse\n\t\t\tcount = count+W;\t\n\t\t\t           \n\t\t\t pw.println(count);\r\n        }\r\n        pw.flush();\r\n        pw.close();\r\n        sc.close();\r\n    }\r\n}\r\n", "idx": "3303"}
{"func": "package googlejam3.p304;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Main{\r\n\tpublic static void main(String [] args)throws IOException{\r\n\tBufferedReader readTxt=new BufferedReader(new FileReader(new File(\"A-large.in\")));\r\n    String textLine=\"\";\r\n    String str=\"\";\r\n     while(( textLine=readTxt.readLine())!=null){\r\n            str+=textLine+\" \";\r\n      }\r\n    String[] strArray=str.split(\" \");\r\n    int [] numberArray=new int[strArray.length];\r\n\tfor(int i=0;i<strArray.length;i++){\r\n\t\tnumberArray[i]=Integer.valueOf(strArray[i]);\r\n\t}\r\n\tint num= numberArray[0];\r\n\tint [] sum=new int[num+1];\r\n\tfor(int i=1;i<=num;i++){\r\n\t\tint r=numberArray[(i-1)*3+1];\r\n\t\tint c=numberArray[(i-1)*3+2];\r\n\t\tint w=numberArray[(i-1)*3+3];\r\n\t\tif(c%w!=0){\r\n\t\t\tsum[i]=r*(c/w)+w;\r\n\t\t}\r\n\t\telse sum[i]=r*(c/w)+w-1;\r\n\t}\r\n    FileWriter fw = new FileWriter(\"output.txt\");  \r\n    BufferedWriter bufw = new BufferedWriter(fw);  \r\n       // String line = null;  \r\n        for(int i=1;i<=num;i++){  \r\n            bufw.write(\"Case #\"+i+\": \"+sum[i]);  \r\n            bufw.newLine();  \r\n            bufw.flush();  \r\n        }  \r\n    bufw.close();   \r\n\r\n}  \t\r\n}", "idx": "3304"}
{"func": "package googlejam3.p305;\n\r\n\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.math.BigDecimal;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.LinkedList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class A {\r\n\r\n\tScanner sc = new Scanner(getClass().getResourceAsStream(IN));\r\n\tstatic final String FILENAME = \"A-large\";\r\n\t// static final String FILENAME = \"A-small-attempt0\";\r\n\tstatic final String IN = FILENAME + \".in\";\r\n\tstatic final String OUT = FILENAME + \".out\";\r\n\tPrintStream out;\r\n\r\n\tpublic static void main(String args[]) throws Exception {\r\n\t\tA r = new A();\n\t\tr.sc.useLocale(Locale.US);\n\t\t\n\t\tr.out = new PrintStream(new FileOutputStream(A.OUT));\n\t\t\n\t\tint t = r.sc.nextInt();\n\t\tfor (int i = 1; i <= t; i++) {\n\t\t\tr.sc.nextLine();\n\t\t\tr.out.print(\"Case #\" + i + \": \");\n\t\t\tint R = r.sc.nextInt();\n\t\t\tint C = r.sc.nextInt();\n\t\t\tint W = r.sc.nextInt();\n\t\t\tint m = C / W;\n\t\t\tm=m*R;\n\t\t\tif (C % W!=0)\n\t\t\t\tm++;\n\t\t\tm=m+(W-1);\n\t\t\tr.out.print(m);\n\t\t\tr.out.println();\n\t\t}\n\t\tr.sc.close();\n\t\tr.out.close();\r\n\t}\r\n\r\n}", "idx": "3305"}
{"func": "package googlejam3.p307;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\n/**\r\n *\r\n * @author DeViL JiN\r\n */\r\npublic class battleship {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        int ab;\n\t\tab = Integer.parseInt(br.readLine().trim());\n\t\tint t = ab;\r\n        int a[] = new int[3], n, r, c;\r\n        for (int i = 1; i <= t; i++) {\r\n\r\n            s = br.readLine().trim().split(\" \");\n\t\t\tint i1;\n\t\t\tfor (i1 = 0; i1 < 3; i1++) {\n\t\t\t    a[i1] = Integer.parseInt(s[i1]);\n\t\t\t}\r\n            r = a[0];\r\n            c = a[1];\r\n            n = a[2];\r\n            int ans=0;\r\n           ans+=(r)*(c/n);\r\n           int m=c%n; \r\n           ans+=n;\r\n           if(m==0){\r\n           ans-=1;\r\n           }\r\n           \r\n           \r\n            \r\n            System.out.println(\"Case #\" + i + \": \" + ans);\r\n\r\n        }\r\n    }\r\n    static BufferedReader br = new BufferedReader(new InputStreamReader(\r\n            System.in));\r\n    private static String s[], w, q;\r\n}\r\n", "idx": "3307"}
{"func": "package googlejam3.p308;\nimport java.io.*;\nimport java.util.*;\n\npublic class A {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new FileReader(args[0]));\n\t\tPrintWriter out = new PrintWriter(args[1], \"UTF-8\");\n\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tfor (int t = 1; t <= T; ++t) {\n\t\t\tout.print(\"Case #\"+t+\": \");\t\t\t\n\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tint R = Integer.parseInt(st.nextToken());\n\t\t\tint C = Integer.parseInt(st.nextToken());\n\t\t\tint W = Integer.parseInt(st.nextToken());\n\n\t\t\tif (W == C)\n\t\t\t\tout.println(W+R-1);\n\t\t\telse if (C < 2*W)\n\t\t\t\tout.println(R+W);\n\t\t\telse if (C == 2*W)\n\t\t\t\tout.println(2*R-1+W);\n\t\t\telse {\n\t\t\t\tint rem = C%W;\n\t\t\t\tif (rem == 0) {\n\t\t\t\t\tout.println((C*R)/W-1+W);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tout.println((C/W)*R+W);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tout.flush();\n\t\tout.close();\n\n\t\tSystem.exit(0);\n\t}\n}\t\t\t\t\n\t\t\n", "idx": "3308"}
{"func": "package googlejam3.p310;\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString filename = \"A-large\";\r\n        Scanner scan = new Scanner(new FileReader(filename + \".in\"));\r\n        PrintWriter out = new PrintWriter(filename + \".out\");\r\n        int problems = scan.nextInt();\r\n        for (int count = 0; count < problems; count++) {\r\n            System.out.print(\"Case #\" + (count+1) + \": \");\r\n            out.print(\"Case #\" + (count+1) + \": \");\n\t\t\tA r = new A();\r\n            int r1 = scan.nextInt();\n\t\t\tint c = scan.nextInt();\n\t\t\tint w = scan.nextInt();\n\t\t\tint result = r1*(c/w);\n\t\t\tif (c%w == 0) {\n\t\t\t\tresult += w-1;\n\t\t\t} else {\n\t\t\t\tresult += w;\n\t\t\t}\n\t\t\tSystem.out.println(result);\n\t\t\tout.println(result);\r\n        }\r\n        out.flush();\r\n        out.close();\r\n        scan.close();\r\n    }\r\n\t\r\n}", "idx": "3310"}
{"func": "package googlejam3.p311;\n\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class s {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tFileInputStream in = new FileInputStream(\r\n\t\t\t\t\"D:/works/java/G1A/bin/A-large (2).in\");\r\n\t\tScanner s = new Scanner(in);\r\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\r\n\t\t\t\t\"D:/works/java/G1A/bin/Abig.out\"));\r\n\r\n\t\tint n = Integer.parseInt(s.next());\r\n\t\tfor (int i = 1; i <= n; i++) {\r\n\t\t\tint r = s.nextInt(), c = s.nextInt(), w = s.nextInt(), j = -1, count = 0;\r\n\t\t\tint a[] = new int[c];\r\n\t\t\tif (w == 1) {\r\n\t\t\t\tSystem.out.println(\"Case #\" + i + \": \" + c * r);\r\n\t\t\t\tout.println(\"Case #\" + i + \": \" + c * r);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tj += w;\r\n\t\t\t\twhile (j < c) {\r\n\t\t\t\t\ta[j] = 1;\r\n\t\t\t\t\tSystem.out.print(j + \" \");\r\n\t\t\t\t\tj += w;\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}j-=w;\r\n\t\t\t\tcount*=r;\r\n\t\t\t\tif (c - j - 1 > 0) {\r\n\t\t\t\t\tcount++;System.out.print(1);\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(w - 1);\r\n\t\t\t\tcount += w - 1;\r\n\t\t\t\tSystem.out.println(\"Case #\" + i + \": \" + count);\r\n\t\t\t\tout.println(\"Case #\" + i + \": \" + count);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tout.close();\r\n\r\n\t}\r\n}\r\n", "idx": "3311"}
{"func": "package googlejam3.p312;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintStream;\nimport java.io.ObjectInputStream.GetField;\nimport java.util.Scanner;\n\npublic class A {\n\n\t//private static final String STAGE = \"A-test\";\n\t//private static final String STAGE = \"A-small-attempt0\";\n\t// private static final String STAGE = \"A-small-attempt1\";\n\t// private static final String STAGE = \"A-small-attempt2\";\n\tprivate static final String STAGE = \"A-large\";\n\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tScanner in = null;\n\t\tPrintStream out = null;\n\t\ttry {\n\t\t\tin = new Scanner(new File(STAGE + \".in\"));\n\t\t\tout = new PrintStream(new File(STAGE + \".out\"));\n\t\t\tint t = in.nextInt();\n\t\t\tint caseNumber = 1;\n\t\t\twhile (caseNumber <= t) {\n\t\t\t\tint r = in.nextInt();\n\t\t\t\tint c = in.nextInt();\n\t\t\t\tint w = in.nextInt();\n\t\t\t\tout.println(\"Case #\" + caseNumber++ + \": \" + solve(r, c, w));\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (in != null) {\n\t\t\t\tin.close();\n\t\t\t}\n\t\t\tif (out != null) {\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static int solve(int r, int c, int w) {\n\t\tint s = r * c;\n\t\tint result = w == 1 ? s : (c / w) * r + w - (c % w == 0 ? 1 : 0);\n\t\treturn result;\n\t}\n}", "idx": "3312"}
{"func": "package googlejam3.p313;\nimport java.util.Scanner;\n\npublic class A {\n\tpublic static void main(String args[]) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint T = in.nextInt();\n\t\tint R, C, W;\n\t\tfor (int I = 1; I <= T; I++) {\n\t\t\tR = in.nextInt();\n\t\t\tC = in.nextInt();\n\t\t\tW = in.nextInt();\n\t\t\tif (C % W == 0) {\n\t\t\t\tSystem.out.println(\"Case #\" + I + \": \" + (R * (C / W) + W - 1));\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Case #\" + I + \": \" + (R * (C / W) + W));\n\t\t\t}\n\t\t}\n\t}\n}", "idx": "3313"}
{"func": "package googlejam3.p314;\nimport java.util.*;\nimport java.io.*;\n\npublic class A {\n \n    public static void main(String[] args) throws FileNotFoundException {\n        A r = new A();\n\t\t//Scanner in = new Scanner(System.in);\n\t\tScanner in = new Scanner(new File(\"al.in\"));\n\t\tPrintWriter out = new PrintWriter(\"al.out\");\n\t\tint tt = Integer.parseInt(in.nextLine());\n\t\tfor (int test = 1; test <= tt; test++) {\n\t\t    int r1 = in.nextInt();\n\t\t    int c = in.nextInt();\n\t\t    int w = in.nextInt();\n\t\t    int ans = c / w + (w - 1) + (c % w == 0 ? 0 : 1) + (r1 - 1) * (c / w); \n\t\t    //System.out.println(\"Case #\" + test + \": \" + ans);\n\t\t    out.println(\"Case #\" + test + \": \" + ans);\n\t\t}\n\t\t\n\t\tout.close();\n    }\n}", "idx": "3314"}
{"func": "package googlejam3.p318;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\n\n/**\n * Created by rkogawa on 5/10/15.\n */\npublic class Brattleship {\n\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader reader = new BufferedReader(new FileReader(\"resources/round1c/Brattleship/A-large.in\"));\n        //BufferedReader reader = new BufferedReader(new FileReader(\"resources/round1c/Brattleship/Teste.in\"));\n\n        int quantidadeTeste = Integer.parseInt(reader.readLine());\n        int teste = 1;\n        while (teste <= quantidadeTeste) {\n            String[] currentLine = reader.readLine().split(\" \");\n\n            int rows = Integer.parseInt(currentLine[0]);\n            int columns = Integer.parseInt(currentLine[1]);\n            int shipSize = Integer.parseInt(currentLine[2]);\n\n            int fistHit = columns / shipSize * rows;\n\n            int miss = columns % shipSize > 0 ? 1 : 0;\n\n            int plays = fistHit + miss + shipSize - 1;\n            System.out.println(\"Case #\" + teste + \": \" + plays);\n\n            teste++;\n        }\n    }\n\n}\n", "idx": "3318"}
{"func": "package googlejam3.p319;\nimport java.io.File;\r\nimport java.util.Formatter;\r\nimport java.util.Scanner;\r\n\r\npublic class TaskA {\r\n\tpublic int caseNumber;\r\n\tFormatter output;\r\n\tScanner input;\r\n\tfinal String file = \"A-large.in\";\r\n\t\r\n\tpublic TaskA(){\r\n\t\tcaseNumber = 1;\r\n\t\ttry{\r\n\t\t\toutput = new Formatter(\"result.out\");\r\n\t\t\tinput = new Scanner(new File(file));\r\n\t\t}\r\n\t\tcatch(Exception ex){\r\n\t\t\tSystem.out.print(ex.getMessage() + \"/n\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\tTaskA app = new TaskA ();\r\n\t\tint T = app.input.nextInt();\n\t\tint R, C, W, result;\n\t\t\n\t\tfor (int i = 0; i < T; i++){\n\t\t\tR = app.input.nextInt();\n\t\t\tC = app.input.nextInt();\n\t\t\tW = app.input.nextInt();\n\t\t\t\n\t\t\tresult = R*(C/W) + W;\n\t\t\t\n\t\t\tif(C % W == 0)\n\t\t\t\tresult--;\n\t\t\tString msg = result + \"\";\n\t\t\t\n\t\t\tapp.output.format(\"Case #%d: %s\\n\", app.caseNumber, msg);\n\t\t\tSystem.out.printf(\"Case #%d: %s\\n\", app.caseNumber, msg);\n\t\t\tapp.caseNumber++;\n\t\t}\n\t\t\n\t\ttry{\n\t\t\tapp.output.close();\n\t\t\tSystem.out.print(\"Output is closed\\n\");\n\t\t}\n\t\tcatch(Exception ex1){\n\t\t\tSystem.out.print(ex1.getMessage() + \"\\n\");\n\t\t}\n\t\ttry{\n\t\t\tapp.input.close();\n\t\t\tSystem.out.print(\"Input is closed\\n\");\n\t\t}\n\t\tcatch(Exception ex){\n\t\t\tSystem.out.print(ex.getMessage() + \"\\n\");\n\t\t}\n\t\tSystem.out.print(\"Done\");\r\n\t}\r\n}", "idx": "3319"}
{"func": "package googlejam3.p323;\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.io.BufferedOutputStream;\nimport java.io.FileOutputStream;\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\nimport java.util.Set;\nimport java.util.TreeSet;\n\n\npublic class Brattleship {\n\t\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t\n\t\t//System.setIn(new FileInputStream(\"a.in\"));\n\t\t//System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(\"a_s.out\")), true));\n\t\t\t\t\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tint totalCaseNumber = Integer.parseInt( reader.readLine() );\n\t\tfor(int caseNo=1 ; caseNo<=totalCaseNumber ; caseNo++ ) {\n\t\t\tString line = reader.readLine();\n\t\t\tString[] parts = line.split(\" \"); \n\t\t\tint R = Integer.parseInt(parts[0]);\n\t\t\tint C = Integer.parseInt(parts[1]);\n\t\t\tint W = Integer.parseInt(parts[2]);\n\t\t\t\n\t\t\tint res = (C / W)*R + (C%W == 0 ? W-1 : W);\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + caseNo + \": \" + res );\n\t\t}\n\t\treader.close();\n\t}\n}\n", "idx": "3323"}
{"func": "package googlejam3.p326;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Solution {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\t//BufferedReader br = new BufferedReader(new FileReader(\"A-sample.in\"));\r\n\t\t//BufferedReader br = new BufferedReader(new FileReader(\"A-small-attempt1.in\"));\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\t\r\n\t\t//File file = new File(\"A-sample.out\");\r\n\t\t//File file = new File(\"A-small.out\");\r\n\t\tFile file = new File(\"A-large.out\");\r\n\t\t\r\n\t\tif(!file.exists()) file.createNewFile();\r\n\t\tFileWriter fw = new FileWriter(file.getAbsolutePath());\r\n\t\tBufferedWriter bw = new BufferedWriter(fw);\r\n\t\t\r\n\t\tint numberOfCases = Integer.parseInt(br.readLine());\r\n\t\tfor(int caseNum = 1; caseNum <= numberOfCases; caseNum++) {\r\n\t\t\t\r\n\t\t\tString[] setup = br.readLine().split(\" \");\r\n\t\t\tint r = Integer.parseInt(setup[0]);\r\n\t\t\tint c = Integer.parseInt(setup[1]);\r\n\t\t\tint w = Integer.parseInt(setup[2]);\r\n\t\t\t\r\n\t\t\tint findRow = (c / w) * r;\r\n\t\t\tint rowRemainder = c % w;\r\n\t\t\t\r\n\t\t\tint findCol = rowRemainder == 0 ? w - 1 : w;\r\n\t\t\tint number = findRow + findCol;\r\n\t\t\t\r\n\t\t\tString output = \"Case #\" + caseNum + \": \" + number + \"\\n\";\r\n\t\t\tSystem.out.println(output);\r\n\t\t\tbw.write(output);\r\n\t\t}\r\n\t\t\r\n\t\tbw.close();\r\n\t}\r\n}\r\n", "idx": "3326"}
{"func": "package googlejam3.p327;\nimport java.util.*;\r\nimport java.io.PrintWriter;\r\nimport java.io.File;\r\npublic class a {\r\n\tpublic static void main(String[] args) {\r\n\r\n\r\n\t\tFile fileout=new File(\"C:/Users/Nikhil Gupta/Desktop/A-ans.out\");\r\n\t\tFile file=null;\r\n\t\tPrintWriter writer=null;\r\n\t\tScanner in=null;\r\n\t\tint r,c,w;\r\n\t\ttry{\r\n\t\t file = new File(\"C:/Users/Nikhil Gupta/Desktop/A-small.in\");\r\n\t\t in = new Scanner(file);\r\n\t\t writer = new PrintWriter(fileout, \"UTF-8\");\r\n\t\t}\r\n\t\tcatch(Exception e){}\r\n\t\tint T=in.nextInt();\r\n\t\tfor(int j=1;j<=T;j++)\r\n\t\t\t{r=in.nextInt();\r\n\t\t\tc=in.nextInt();\r\n\t\t\tw=in.nextInt();\r\n\t\t\tif(r==1)\r\n\t\t\t{if(c%w==0)\r\n\t\t\t\twriter.println(\"Case #\"+j+\": \"+((c/w)+(w-1)));\r\n\t\t\t else\r\n\t\t\twriter.println(\"Case #\"+j+\": \"+((c/w)+w));\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(c%w==0)\r\n\t\t\t\t\t\twriter.println(\"Case #\"+j+\": \"+((c/w)+(w-1)+((c/w)*(r-1))));\r\n\t\t\t\t\t else\r\n\t\t\t\t\twriter.println(\"Case #\"+j+\": \"+((c/w)+w+((c/w)*(r-1))));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\twriter.close();\r\n\t}\r\n}\r\n", "idx": "3327"}
{"func": "package googlejam3.p329;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n    public static void main(String args[]) throws Exception {\r\n        //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        BufferedReader br=new BufferedReader(new FileReader(\"A-large.in\"));\r\n        PrintWriter pw = new PrintWriter(\"Aout.txt\");\r\n        int n = Integer.parseInt(br.readLine());\r\n        String line;\r\n\r\n        for (int q = 1; q <= n; q++) {\r\n            line = br.readLine();\r\n            Scanner sc = new Scanner(line);\r\n            int R = sc.nextInt();\r\n            int C = sc.nextInt();\r\n            int W = sc.nextInt();\r\n            int ans = (C / W) * R + (C % W == 0 ? 0 : 1) + W - 1;\r\n            System.out.println(\"Case #\" + q + \": \" + ans);\r\n            pw.println(\"Case #\" + q + \": \" + ans);\r\n        }\r\n        pw.close();\r\n    }\r\n}", "idx": "3329"}
{"func": "package googlejam3.p330;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.DataInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.InputStreamReader;\n\npublic class A {\n  public static void main( String[] args ) {\n    try {\n      FileInputStream fstream = new FileInputStream( \"/home/milan/codeJam2015/r1c/A/large.in\" );\n      DataInputStream in = new DataInputStream( fstream );\n      BufferedReader br = new BufferedReader( new InputStreamReader( in ) );\n      int T = Integer.valueOf( br.readLine() );\n      int i = 1;\n      String strLine;\n      String[] line;\n      while( i <= T ) {\n        strLine = br.readLine();\n        line = strLine.split( \" \" );\n        int R, C, W, res = -1;\n        R = Integer.valueOf( line[0] );\n        C = Integer.valueOf( line[1] );\n        W = Integer.valueOf( line[2] );\n        if( W == C )\n          res = R - 1 + W;\n        else if( C % W == 0 )\n          res = R * ( C / W ) + W - 1;\n        else\n          res = R * ( C / W ) + W;\n        //System.out.println( \"Case #\" + i + \": \" + res );\n        try {\n\t\t  BufferedWriter bw = new BufferedWriter( new FileWriter( new File( \"/home/milan/codeJam2015/r1c/A/large.out\" ), true ) );\n\t\t  bw.write( \"Case #\" + i + \": \" + res );\n\t\t  bw.newLine();\n\t\t  bw.close();\n\t\t}\n\t\tcatch( Exception e ) {\n\t\t  System.err.println( \"Error: \" + e.getMessage() );\n\t\t}\n        i++;\n      }\n      br.close();\n    }\n    catch( Exception e ) {//Catch exception if any\n      System.err.println( \"Error: \" + e.getMessage() );\n    }\n  }\n}\n", "idx": "3330"}
{"func": "package googlejam3.p331;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\nimport java.text.*;\r\npublic class Main\r\n{\r\npublic static void main(String[] args)throws java.lang.Exception\r\n{\r\nBufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\r\nPrintWriter out=new PrintWriter(\"output.txt\");\r\nint t,x1,r,c,w,val,res;\r\n\r\nt=Integer.parseInt(in.readLine());\r\n \r\n \r\nfor(x1=0;x1<t;x1++)\r\n{\r\nStringTokenizer st1=new StringTokenizer(in.readLine());\r\n\r\nr=Integer.parseInt(st1.nextToken());\r\nc=Integer.parseInt(st1.nextToken());\r\nw=Integer.parseInt(st1.nextToken());\r\n\r\n\r\nval=c/w;\r\nres=r*val;\r\nres+=(w-1);\r\n\r\nif(c%w!=0)\r\n\tres+=1;\r\n\r\n\r\nif(w==1)\r\n\tres=r*c;\r\n\r\nout.println(\"Case #\"+(x1+1)+\": \"+res);\r\n\r\n\r\n}\r\n\r\nout.flush();\r\nout.close();\r\n}\r\n}\r\n\r\n", "idx": "3331"}
{"func": "package googlejam3.p335;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\n\r\npublic class Brattleship {\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException{\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(args[0]));\r\n\t\tint cases = Integer.parseInt(br.readLine());\r\n\t\tfor(int i=0;i<cases;i++){\r\n\t\t\tString in = br.readLine();\r\n\t\t\tString[] input = in.split(\" \");\r\n\t\t\tint rows = Integer.parseInt(input[0]);\r\n\t\t\tint columns = Integer.parseInt(input[1]);\r\n\t\t\tint width = Integer.parseInt(input[2]);\r\n\t\t\tint moves = (columns/width)*rows + (width - 1);\r\n\t\t\tint nomiss = columns%width==0 ? 0 : 1;\r\n\t\t\tmoves += nomiss;\r\n\t\t\tSystem.out.format(\"Case #%d: %d\\n\", i+1, moves);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "3335"}
{"func": "package googlejam3.p337;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class Battleship {\r\n\r\n    static int T;\r\n;\r\n    \r\n    public static void main(String[] args) {\r\n        Scanner scan;\r\n\r\n        int R,C,W;\r\n        int[] dp;\r\n        int[] misses;\r\n        try {\r\n            FileWriter fstream = new FileWriter(\"out.txt\");\r\n            BufferedWriter out = new BufferedWriter(fstream);\r\n            scan = new Scanner(new File(\"input.txt\"));\r\n            \r\n            T = scan.nextInt();\r\n            \r\n            for (int t=0; t<T; t++) {\r\n                \r\n                R = scan.nextInt();\r\n                C = scan.nextInt();\r\n                W = scan.nextInt();\r\n                dp = new int[C+1];\r\n                misses = new int[C+1];\r\n                for (int i=0; i<W; i++) {\r\n                    dp[i] = Integer.MIN_VALUE;\r\n                    misses[i] = 0;\r\n                }\r\n                \r\n                dp[W] = W;\r\n                misses[W] = 1;\r\n                for (int i=W+1; i<=C; i++){\r\n                    misses[i] = (i/W);\r\n                    int min = Integer.MAX_VALUE;\r\n                    for (int j=1; j<=i; j++){\r\n                        int temp = Math.max(misses[j-1]+ dp[i-j], misses[i-j] + dp[j-1]);\r\n                        if (temp != Integer.MIN_VALUE) {\r\n                            min = Math.min(min, temp+1);\r\n                        }\r\n                        \r\n\r\n                    }\r\n                    int hit = W+1;\r\n                    if (W == 1) hit = 1;\r\n                    dp[i] = Math.max(min, hit);\r\n                }\r\n                \r\n                int result = dp[C] + (R-1)*(C/W);\r\n                out.write(\"Case #\" + (t+1) + \": \" + result + \"\\n\");\r\n                out.flush();\r\n            }\r\n            \r\n\r\n        } catch (Exception e) {\r\n            // TODO Auto-generated catch block\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "3337"}
{"func": "package googlejam3.p339;\n\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Counter {\n\n\t\tList<Integer> cases = new ArrayList<Integer>();\n\t\tList<Integer> R =  new ArrayList<Integer>();\n\t\tList<Integer> C =  new ArrayList<Integer>();\n\t\tList<Integer> W =  new ArrayList<Integer>();\n\t\tList<Integer> res =  new ArrayList<Integer>();\n\t\tpublic static void main(String[] args)\n\t\t{\n\t\t\tCounter so = new Counter();\n\t\t\t\n\t\t\t//so.readFile(\"A-large.in\");\n\t\t\tScanner scanner;\n\t\t\ttry {\n\t\t\t\tscanner = new Scanner(new File(\"A-large.in\"));\n\t\t\t\n\t\t\t\tint testCases = scanner.nextInt();\n\t\t\t\n\t\t\t\tscanner.nextLine();\n\t\t\t\tfor(int i=0; i<testCases; ++i)\n\t\t\t\t{\n\t\t\t\t\tso.R.add(scanner.nextInt());\n\t\t\t\t\tso.C.add(scanner.nextInt());\n\t\t\t\t\tso.W.add(scanner.nextInt());\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i1=0; i1<so.W.size(); ++i1)\n\t\t\t{\n\t\t\t\tint w = so.W.get(i1);\n\t\t\t\tint r = so.R.get(i1);\n\t\t\t\tint c = so.C.get(i1);\n\t\t\t\t\n\t\t\t\tint val;\n\t\t\t\t\n\t\t\t\tint valami;\n\t\t\t\tint utolso;\n\t\t\t\t\n\t\t\t\tif(c%w == 0)\n\t\t\t\t{\n\t\t\t\t\tvalami = 0;\n\t\t\t\t\tutolso = 0;\n\t\t\t\t} else \n\t\t\t\t{\n\t\t\t\t\tvalami = 2*w - (w-1+1+(c%w))+1;\n\t\t\t\t\t//utolso = valami + (w-valami)-1;\n\t\t\t\t\tutolso = 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//System.out.println(\"valami: \" + valami);\n\t\t\t\t//System.out.println(\"utolso: \" + utolso);\n\t\t\t\t\n\t\t\t\tif(c*r==w)\n\t\t\t\t{\n\t\t\t\t\tval = w;\n\t\t\t\t\tso.res.add(val);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\tif(r==1){\n\t\t\t\t\tval = (int) ((Math.floor(c / w) + (w -1))) + utolso; \n\t\t\t\t\tso.res.add(val);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(r>1){\n\t\t\t\t\tval = (int) ((r-1) * (Math.floor(c / w))) + (int)(Math.floor(c / w) +  (w -1)) + utolso; \n\t\t\t\t\t\n\t\t\t\t\tso.res.add(val);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tPrintWriter writer;\n\t\t\ttry {\n\t\t\t\twriter = new PrintWriter(\"A-large.out\");\n\t\t\t\t\n\t\t\t\tint counter = 0;\n\t\t\t\tfor(int i=0; i<so.res.size();++i)\n\t\t\t\t{\n\t\t\t\t\twriter.print(\"Case #\" + (++counter) + \": \" + so.res.get(i));\n\t\t\t\t\tif(counter<so.res.size())\n\t\t\t\t\t{\n\t\t\t\t\t\twriter.println();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twriter.close();\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n}\n", "idx": "3339"}
{"func": "package googlejam3.p340;\n\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class R20151C_A {\r\n\t\r\n\tprivate int t;\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tR20151C_A r = new R20151C_A();\n\t\tFile folder = new File(r.getClass().getSimpleName() + \"_cases\");\n\t\tFile inFolder = new File(r.getClass().getSimpleName() + \"_cases\" + \"/in\");\n\t\tFile outFolder = new File(r.getClass().getSimpleName() + \"_cases\" + \"/out\");\n\t\t\n\t\tif (!folder.isDirectory()) {\n\t\t\tfolder.mkdir();\n\t\t}\n\t\tif (!outFolder.isDirectory()) {\n\t\t\toutFolder.mkdir();\n\t\t}\n\t\tif (!inFolder.isDirectory()) {\n\t\t\tinFolder.mkdir();\n\t\t}\n\t\t\n\t\tfor (String in : inFolder.list()) {\n\t\t\tString fileNameCore = in.replace(\".in\", \"\");\n\t\t\tString outFileName = fileNameCore + \".out\";\n\t\t\t\n\t\t\t\n\t\t\tPrintStream ps = null;\n\t\t\tScanner s = null;\n\t\t\ttry {\n\t\t\t\tFile inFile = new File(r.getClass().getSimpleName() + \"_cases\" + \"/in\" + \"/\" + in);\n\t\t\t\tFile outFile = new File(r.getClass().getSimpleName() + \"_cases\" + \"/out\" + \"/\" + outFileName);\n\t\t\t\t\n\t\t\t\tps = new PrintStream(outFile);\n\t\t\t\ts = new Scanner(inFile);\n\t\t\t\t\n\t\t\t\tr.t = s.nextInt();\n\t\t\t\tfor (int i = 0; i < r.t; i++) {\n\t\t\t\t\tps.print(\"Case #\" + (i+1) + \": \");\n\t\t\t\t\tr.R = s.nextInt();\n\t\t\t\t\tr.C = s.nextInt();\n\t\t\t\t\tr.W = s.nextInt();\n\t\t\t\t\tr.m = (r.C / r.W) * (r.R - 1);\n\t\t\t\t\tr.m += Math.max(((r.C - 1) / r.W) - 1, 0);\n\t\t\t\t\tr.m += r.W + (r.W == r.C? 0 : 1);\n\t\t\t\t\tps.println(r.m);\n\t\t\t\t}\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} finally {\n\t\t\t\tif (s != null) {\n\t\t\t\t\ts.close();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (ps != null) {\n\t\t\t\t\tps.close();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t}\r\n\t}\r\n\t\r\n\tprivate int R;\r\n\t\r\n\tprivate int C;\r\n\t\r\n\tprivate int W;\r\n\t\r\n\tprivate int m;\r\n\r\n\r\n}\r\n", "idx": "3340"}
{"func": "package googlejam3.p344;\nimport java.util.Scanner;\n\n\npublic class Pr1C1 {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner s = new Scanner(System.in);\n\t\tint T = s.nextInt();\n\t\tint r, c, w, ans;\n\t\tf: for(int t=1; t<=T; t++){\n\t\t\tr = s.nextInt();\n\t\t\tc = s.nextInt();\n\t\t\tw = s.nextInt();\n\t\t\t\n\t\t\tans = (r-1) * (c/w);\n\t\t\t//System.out.println(ans);\n\t\t\t\n\t\t\tif(w==1){\n\t\t\t\tans+= c;\n\t\t\t\tSystem.out.println(\"Case #\"+t+\": \"+ans);\n\t\t\t\tcontinue f;\n\t\t\t}\n\t\t\tif(w==c){\n\t\t\t\tans+= c;\n\t\t\t\tSystem.out.println(\"Case #\"+t+\": \"+ans);\n\t\t\t\tcontinue f;\n\t\t\t}\n\t\t\t\n\t\t\tif(c<=2*w){\n\t\t\t\tans+=w+1;\n\t\t\t\tSystem.out.println(\"Case #\"+t+\": \"+ans);\n\t\t\t\tcontinue f;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tans = ans+ w+1 + ((c-w-1)/w);\n\t\t\t\tSystem.out.println(\"Case #\"+t+\": \"+ans);\n\t\t\t\tcontinue f;\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "idx": "3344"}
{"func": "package googlejam3.p345;\nimport java.util.*;\nimport java.io.*;\n\npublic class A\n{\n    public static void main(String [] args) throws Exception\n    {\n        Scanner input = new Scanner(new File(\"in\"));\n        FileWriter output = new FileWriter(new File(\"out\"));\n        int numCases = input.nextInt();\n        for (int n = 1; n <= numCases; n++)\n        {\n            int R = input.nextInt();\n            int C = input.nextInt();\n            int W = input.nextInt();\n            \n            int result=C/W;\n            result=result*R;\n            result=result+W;\n            if(C%W==0)\n            \tresult--;\n            \n            System.out.print(\"Case #\"+ n +\": \" + result + \"\\n\");\n            output.write(\"Case #\"+ n +\": \" + result + \"\\n\");\n        }\n        output.flush();\n        output.close();\n    }\n}\n", "idx": "3345"}
{"func": "package googlejam3.p348;\nimport java.util.Scanner;\r\n\r\n\r\npublic class ca_2015 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tint x=0,T=0;\r\n\t\tScanner s1= new Scanner(System.in);\r\n\t\tT = s1.nextInt();\r\n\t\twhile(T!=0)\r\n\t\t{\r\n\t\t\tT--;\r\n\t\t\tx++;\r\n\t\t\tint R = s1.nextInt();\r\n\t\t\tint C = s1.nextInt();\r\n\t\t\tint W = s1.nextInt();\r\n\t\t\tint cal = ((C-1)/W)+W;\r\n\t\t\tif(R != 1)\r\n\t\t\t\tcal += ((R-1)*(C/W));\r\n\t\t\tif(W > C)\r\n\t\t\t\tcal = 0;\r\n\t\t\tSystem.out.println(\"Case #\" + x + \": \" + cal);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "3348"}
{"func": "package googlejam3.p349;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n/**\r\n * @author Jun Yoon <junviolin@gmail.com>\r\n * @since 10-05-2015\r\n */\r\npublic class CodeJam2015Round1CA {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        String out = \"\";\r\n        Scanner in = new Scanner(new FileReader(\"./A-large.in\"));\r\n        \r\n        int numCases = in.nextInt();\r\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\r\n            out += \"Case #\" + caseNum + \": \";\r\n            int r = in.nextInt(); // 1 for small dataset\r\n            int c = in.nextInt();\r\n            int w = in.nextInt();\r\n            \r\n            if (r == 1) {\r\n                if (c == w || w == 1 || c - w == 1)\r\n                    out += c + \"\\n\";\r\n                else {\r\n                    int ans = c;\r\n                    int count = 0;\r\n                    while (ans >= 2 * w) {\r\n                        ans -= w;\r\n                        count++;\r\n                    }\r\n                    if (ans > w)\r\n                        count++;\r\n                    count += w;\r\n                    out += count + \"\\n\";\r\n                }\r\n            }\r\n            else {\r\n                if (c == w) {\r\n                    int ans = c + (r - 1);\r\n                    out += ans + \"\\n\";\r\n                }\r\n                else if (c - w < w) {\r\n                    int ans = w + 1 + (r - 1);\r\n                    out += ans + \"\\n\";\r\n                }\r\n                else if (w == 1) {\r\n                    int ans = c * r;\r\n                    out += ans + \"\\n\";\r\n                }\r\n                else {\r\n                    int ans = c;\r\n                    int count = 0;\r\n                    while (ans >= 2 * w) {\r\n                        ans -= w;\r\n                        count++;\r\n                    }\r\n                    count++;\r\n                    count *= r;\r\n                    if (ans == w)\r\n                        count--;\r\n                    count += w;\r\n                    out += count + \"\\n\";\r\n                }\r\n            }\r\n        }\r\n        \r\n        in.close();\r\n        try (BufferedWriter bw = new BufferedWriter(new FileWriter(\"./A-large.out\"))) {\r\n            bw.write(out);\r\n        }\r\n    }\r\n}\r\n", "idx": "3349"}
{"func": "package googlejam3.p352;\nimport java.util.Scanner;\r\n\r\npublic class roundCQ1 {\r\n     public static void main(String[] args) {\r\n        Scanner scan = new Scanner(System.in);\r\n        int testCase = scan.nextInt();\r\n        for(int i = 1; i <= testCase; i++){\r\n            int R = scan.nextInt();\r\n            int C = scan.nextInt();\r\n            int W = scan.nextInt();\n\t\t\tint num1 = R * (C/W);\n\t\t\t if(C % W > 0){\n\t\t\t     num1 = num1 + W;\n\t\t\t }else{\n\t\t\t     num1 = num1 + W - 1;\n\t\t\t }\r\n            \r\n            int num = num1;\r\n            System.out.println(\"Case #\"+i+\": \"+num);\r\n            \r\n            \r\n        }\r\n    }\r\n     \r\n}\r\n", "idx": "3352"}
{"func": "package googlejam3.p354;\nimport java.awt.Point;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String[] s1) throws Exception {\n\t\tMain r = new Main();\n\t\tFile out = new File(\"output.txt\");\n\t\tScanner in = new Scanner(new File(\"input.txt\"));\n\t\tPrintStream ostr = new PrintStream(new FileOutputStream(out));\n\t\tint T = in.nextInt();\n\t\tint N = 0;\n\t\twhile(N++<T){\n\t\t\tint r1 = in.nextInt();\n\t\t\tint c = in.nextInt();\n\t\t\tint w = in.nextInt();\n\t\t\tint result = (c/w)*r1 +w;\n\t\t\tif (c%w<1)\n\t\t\t\tresult--;\n\t\t\tostr.printf(\"Case #%d: %d%n\", N, result);\n\t\t}\n\t}\n\n}", "idx": "3354"}
{"func": "package googlejam3.p360;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static Scanner input = new Scanner(System.in);\n    public static void main(String[] args) {\n\n        int numInputs = input.nextInt();\n        for(int i = 0; i<numInputs;i++){\n            int R = input.nextInt();\n            int C = input.nextInt();\n            int W = input.nextInt();\n\t\t\tint result;\n\t\t\tif((W<=C/2&&C%W==0)||W==C) {\n\t\t\t    result = C / W * R + W - 1;\n\t\t\t}else {\n\t\t\t    result = C/W*R+W;\n\t\t\t}\n            int r = result;\n            System.out.println(\"Case #\"+(i+1)+\": \"+r);\n        }\n    }\n}\n", "idx": "3360"}
{"func": "package googlejam3.p363;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class ProblemA {\r\n\r\n\tprivate static final String IN_DIR = \"inputs\";\r\n\tprivate static final String OUT_DIR = \"outputs\";\r\n\r\n\tprivate static final String IN_FILE = \"A-large.in\";\r\n\tprivate static final String OUT_FILE = \"output_a.txt\";\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = null;\r\n\t\tBufferedWriter out = null;\r\n\r\n\t\ttry {\r\n\t\t\tsc = new Scanner(new File(IN_DIR + \"/\" + IN_FILE));\r\n\t\t\tout = new BufferedWriter(new FileWriter(OUT_DIR + \"/\" + OUT_FILE));\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tint numTests = sc.nextInt();\r\n\t\tsc.nextLine();\r\n\t\tfor (int i = 0; i < numTests; i++) {\r\n\t\t\ttry {\r\n\t\t\t\tint caseNum = i+1;\n\t\t\t\tString inrow = sc.nextLine();\n\t\t\t\tScanner sc2 = new Scanner(inrow);\n\t\t\t\tint R = sc2.nextInt();\n\t\t\t\tint C = sc2.nextInt();\n\t\t\t\tint W = sc2.nextInt();\n\t\t\t\t\n\t\t\t\t// for all inputs\n\t\t\t\tif (C % W == 0) {\n\t\t\t\t\tout.write(\"Case #\" + caseNum + \": \" + ((C/W)*R + (W-1)) + \"\" + \"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tout.write(\"Case #\" + caseNum + \": \" + ((C/W)*R + W) + \"\" + \"\\n\");\n\t\t\t\t}\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tsc.close();\r\n\t\t\tout.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "idx": "3363"}
{"func": "package googlejam3.p368;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.InputStreamReader;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tString filename = \"src/round1B/input-B\";\n\t\t//String filename = \"src/round1B/B-small-practice\";\n\t\t//String filename = \"src/round1B/B-large-practice\";\n\n\t\tFileInputStream file;\n\t\tint T;\n\n\t\ttry {\n\t\t\tfile = new FileInputStream(filename+\".in\");\n\n\t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(file));\n\n\n\t\t\tT = Integer.parseInt(in.readLine());\n\n\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(filename+\".out\"));\n\n\t\t\tfor (int i=0; i<T; i++) {\n\t\t\t\tint ind = i+1;\n\t\t\t\t// parser\n\t\t\t\tString data[] = in.readLine().split(\" \");\n\t\t\t\tint K = Integer.parseInt(data[0]);\n\t\t\t\tint L = Integer.parseInt(data[0]);\n\t\t\t\tint S = Integer.parseInt(data[0]);\n\t\t\t\t\n\t\t\t\tchar[] key = in.readLine().toCharArray();\n\t\t\t\tchar[] target = in.readLine().toCharArray();\n\n\t\t\t\tint res = 0;\n\t\t\t\t// calcul\n\t\t\t\t// bananes maximales\n\t\t\t\tint banana_max = 0;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tdouble proba = 1;\n\t\t\t\tfor (int j=0; j<target.length; j++) {\n\t\t\t\t\tdouble cpt=0;\n\t\t\t\t\tfor (int k=0; k<key.length; k++) {\n\t\t\t\t\t\tif (key[k]==target[j])\n\t\t\t\t\t\t\tcpt++;\n\t\t\t\t\t}\n\t\t\t\t\tproba *= cpt/(double)K;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.println(\"Result \"+i+\": \"+res);\n\t\t\t\tbw.write(\"Case #\"+ind+\": \"+res+\"\\n\");\n\t\t\t}\n\t\t\tbw.close();\n\n\t\t\tin.close();\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n", "idx": "3368"}
{"func": "package googlejam3.p371;\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class R1C_A {\r\n\r\n\tstatic BufferedReader br;\r\n\tstatic PrintWriter pr;\r\n\tstatic StringTokenizer st;\r\n\r\n\tpublic static void main (String[] args) throws IOException {\r\n\t\t//br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t//pr = new PrintWriter(new OutputStreamWriter(System.out));\r\n\t\tbr = new BufferedReader(new FileReader(\"in.txt\"));\r\n\t\tpr = new PrintWriter(new FileWriter(\"out.txt\"));\r\n\r\n\t\tint tt = Integer.parseInt(next());\r\n\t\tfor (int qq = 1; qq <= tt; qq++) {\r\n\t\t\tint ans = 0;\r\n\t\t\tint r = Integer.parseInt(next());\r\n\t\t\tint c = Integer.parseInt(next());\r\n\t\t\tint w = Integer.parseInt(next());\r\n\t\t\tans = c/w + w-1 + (c % w > 0 ? 1 : 0);\r\n\t\t\tpr.printf(\"Case #%d: %d\\n\", qq, ans);\r\n\t\t}\r\n\t\t\r\n\t\tpr.close();\r\n\t}\r\n\r\n\tstatic String next () throws IOException {\r\n\t\twhile (st == null || !st.hasMoreTokens())\r\n\t\t\tst = new StringTokenizer(br.readLine().trim());\r\n\t\treturn st.nextToken();\r\n\t}\r\n}\r\n\r\n", "idx": "3371"}
{"func": "package googlejam3.p374;\n\r\n\r\nimport java.util.Scanner;\r\n\r\npublic final class Brattleship {\r\n\r\n\tpublic static void main(final String[] args) {\r\n\t\ttry (Scanner sc = new Scanner(System.in)) {\r\n\t\t\tfinal int t = sc.nextInt();\r\n\t\t\tint r;\r\n\t\t\tint c;\r\n\t\t\tint w;\r\n\t\t\tint n;\r\n\t\t\tfor (int i = 0; i < t; i++) {\r\n\t\t\t\tr = sc.nextInt();\r\n\t\t\t\tc = sc.nextInt();\r\n\t\t\t\tw = sc.nextInt();\r\n\t\t\t\tn = 0;\r\n\t\t\t\tif (w == 1) {\r\n\t\t\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + r * c);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tn = c / w + w;\r\n\t\t\t\tif (c % w == 0) {\r\n\t\t\t\t\tn--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tn += (r - 1) * (c / w);\r\n\r\n\t\t\t\t/*if ((w & 1) != 0) {\r\n\t\t\t\t\tif (c % w > (w >> 1) + 1) {\r\n\t\t\t\t\t\tn++;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (c % w > w >> 1) {\r\n\t\t\t\t\t\tn++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}*/\r\n\r\n\t\t\t\t// n = c / w + w + c % w;\r\n\t\t\t\t/*if ((c & 1) != 0) {\r\n\t\t\t\t\tif ((w & 1) != 0) {\r\n\t\t\t\t\t\tn--;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tn--;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif ((w & 1) != 0) {\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t}\r\n\t\t\t\t}*/\r\n\r\n\t\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + n);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}", "idx": "3374"}
{"func": "package googlejam3.p375;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class Brattleship\r\n{\r\n\tprivate static final String PROBLEM_NAME = Brattleship.class.getSimpleName();\r\n\tprivate static final String WORK_DIR = \"/Development/Projects/GCJ/15-1C/\" + PROBLEM_NAME + \"/\";\r\n//\tprivate static final String INPUT_PATH = WORK_DIR + \"sample.in\";\r\n//\tprivate static final String INPUT_PATH = WORK_DIR + \"A-small-attempt0.in\";\r\n//\tprivate static final String INPUT_PATH = WORK_DIR + \"A-small-attempt1.in\";\r\n\tprivate static final String INPUT_PATH = WORK_DIR + \"A-large.in\";\r\n//\tprivate static final String INPUT_PATH = WORK_DIR + \"debug.in\";\r\n\tprivate static final String OUTPUT_PATH = INPUT_PATH.replace(\".in\", \".out\");\r\n\t\r\n\tpublic static void main(String[] args) throws Exception\r\n\t{\r\n\t\tSystem.out.println(\"Solving \" + PROBLEM_NAME + \"...\");\r\n\t\tSystem.out.println(\"Input: \" + INPUT_PATH);\r\n\t\tSystem.out.println(\"Output: \" + OUTPUT_PATH);\r\n\t\t\r\n\t\tPrintWriter out = new PrintWriter(OUTPUT_PATH, \"US-ASCII\");\r\n\t\tScanner in = new Scanner(new File(INPUT_PATH), \"US-ASCII\");\r\n\t\tin.useLocale(Locale.US);\r\n\t\t\r\n\t\tint testCasesNumber = in.nextInt();\r\n\t\tin.nextLine();\r\n\t\tSystem.out.println(\"Test cases: \" + testCasesNumber);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tfor (int testCase = 1; testCase <= testCasesNumber; testCase++)\r\n\t\t\t{\r\n\t\t\t\tSystem.out.println(\"Solving test case: \" + testCase + \"...\");\r\n\t\t\t\tout.print(\"Case #\" + testCase + \": \");\n\t\t\t\tBrattleship r = new Brattleship();\r\n\t\t\t\tint R = in.nextInt();\n\t\t\t\tint C = in.nextInt();\n\t\t\t\tint W = in.nextInt();\n\t\t\t\t\n\t\t\t\tint mod = C % W;\n\t\t\t\tint div = C / W;\n\t\t\t\t\n\t\t\t\tint y = W + (mod == 0 ? 0 : 1) + (div - 1);\n\t\t\t\t\n\t\t\t\tif (R > 1)\n\t\t\t\t\ty += Math.max(1, div * (R - 1));\n\t\t\t\t\n\t\t\t\tout.println(y);\r\n\t\t\t\tout.flush();\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tin.close();\r\n\t\t\tout.close();\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(\"All test cases solved!\");\r\n\t}\r\n}\r\n", "idx": "3375"}
{"func": "package googlejam3.p376;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\nclass A {\r\n\r\n\tstatic int MB = 1 << 20;\r\n\tstatic BufferedReader br = new BufferedReader( new InputStreamReader(System.in, StandardCharsets.US_ASCII), 30*MB);\r\n\tstatic StringTokenizer st;\r\n\t\r\n\tstatic String NL() throws Exception {\r\n\t\tString line = br.readLine();\r\n\t\tst = new StringTokenizer(line);\r\n\t\treturn line;\r\n\t}\r\n\t\r\n\tstatic String NT() {\r\n\t\treturn st.nextToken();\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tint T = Integer.parseInt(NL());\r\n\t\tfor (int ii = 1; ii <= T; ii++) {\r\n\t\t\tNL();\r\n\t\t\tint R, C, W;\r\n\t\t\tR = Integer.parseInt(NT());\r\n\t\t\tC = Integer.parseInt(NT());\r\n\t\t\tW = Integer.parseInt(NT());\r\n\t\t\tprint(ii, solve(R, C, W));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static void print(int ii, int sol) {\r\n\t\tSystem.out.printf(\"Case #%d: %d%n\", ii, sol);\r\n\t}\r\n\r\n\tprivate static int solve(int R, int C, int W) {\r\n\t\tint res = (R-1) * singleRow(C, W);\r\n\t\treturn res + simple(C, W);\r\n\t}\r\n\r\n\tprivate static int simple(int C, int W) {\r\n        if (C == W) return C;\r\n\t\treturn (C >= 2 * W) ? 1 + simple(C - W, W) : W+1;\r\n\t}\r\n\r\n\tprivate static int singleRow(int C, int W) {\r\n\t\treturn C > W ? 1 + singleRow(C - W, W) : 1;\r\n\t}\r\n\t\r\n}\r\n", "idx": "3376"}
{"func": "package googlejam3.p377;\nimport java.util.Scanner;\r\n\r\n\r\npublic class CaseE {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tint T,R,C,W,i,j,k;\r\n\t\tScanner sca = new Scanner(System.in);\r\n\t\tT =  Integer.parseInt(sca.next());\r\n\t\tint ans[] = new int[T];\r\n\t\tfor (i=0;i<T;i++){\r\n\t\t\tR =  Integer.parseInt(sca.next());\r\n\t\t\tC = Integer.parseInt(sca.next());\r\n\t\t\tW = Integer.parseInt(sca.next());\r\n\t\t\tif (W==1) {\r\n\t\t\t\tans[i]=R*C;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\tif (C%W==0) ans[i] = R*(C/W)+W-1;\r\n\t\t\telse { ans[i]= (int) (R*Math.floor(C/W)+W);}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (i=0;i<T;i++){\r\n\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+ans[i]);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "3377"}
{"func": "package googlejam3.p379;\n\n\n\nimport java.io.*;\nimport java.math.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.util.Arrays.*;\n\npublic class Happy {\n\n    public static void main(String[] args) {\n        Happy r = new Happy();\n\t\tBufferedReader in = null;\n\t\tBufferedWriter out = null;\n\t\t\n\t\ttry{\n\t\t    in = new BufferedReader(new FileReader(\"A-large.in\"));\n\t\t    out = new BufferedWriter(new FileWriter(\"A-large.out\"));\n\t\t    //in = new BufferedReader(new FileReader(\"test.in\"));\n\t\t    //out = new BufferedWriter(new FileWriter(\"test.out\"));\n\t\t    int T = Integer.parseInt(in.readLine());\n\t\t    System.out.println(\"T=\"+T);\n\t\t    for(int i=0;i<T;i++){\n\t\t        System.out.print(\"Case #\"+(i+1)+\": \");\n\t\t        out.write(\"Case #\"+(i+1)+\": \");\n\t\t\n\t\t\n\t\t\n\t\t        String[] line = in.readLine().split(\" \");\n\t\t        int R = Integer.parseInt(line[0]);\n\t\t        int C = Integer.parseInt(line[1]);\n\t\t        int W = Integer.parseInt(line[2]);\n\t\t        int ans = 0;\n\t\t\n\t\t        if(W==1){\n\t\t            ans = C * R;\n\t\t        } else if(W==2){\n\t\t            ans = ans + (C/W)*R;\n\t\t            if(C%W==0){\n\t\t                ans = ans + 1;\n\t\t            } else {\n\t\t                ans = ans + 2;\n\t\t            }\n\t\t        } else {\n\t\t            ans = ans + (C/W)*R;\n\t\t            int ret = C%W;\n\t\t            if(ret==0){\n\t\t                ans = ans + W - 1;\n\t\t            } else{\n\t\t                ans = ans + W - 1 + 1;\n\t\t            }\n\t\t        }\n\t\t\n\t\t        \n\t\t\n\t\t\n\t\t        System.out.print(ans+\"\\n\");\n\t\t        out.write(ans+\"\\n\");\n\t\t\n\t\t\n\t\t    }\n\t\t\n\t\t    in.close();\n\t\t    out.close();\n\t\t}catch(Exception e){\n\t\t    e.printStackTrace();\n\t\t    try{\n\t\t        in.close();\n\t\t        out.close();\n\t\t    }catch(Exception ee){\n\t\t        ee.printStackTrace();\n\t\t    }\n\t\t}\n\t\tSystem.out.print(\"Ha Ha :D\\n\");\n    }\n\n}\n\n", "idx": "3379"}
{"func": "package googlejam3.p380;\nimport java.io.*;\r\n\r\n/**\r\n * Created by Tridip on 10-05-2015.\r\n */\r\npublic class Problem1C_A {\r\n\r\n    public static void main(String args[]) throws IOException {\r\n\r\n        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"A-large-output1.txt\"));\r\n\r\n        int testCases = Integer.parseInt(br.readLine());\r\n\r\n        for (int t = 1; t <= testCases; t++) {\r\n\r\n            String input = br.readLine();\r\n            String arr[] = input.split(\" \");\r\n            int r = Integer.parseInt(arr[0]);\r\n            int c = Integer.parseInt(arr[1]);\r\n            int w = Integer.parseInt(arr[2]);\r\n\r\n            int count = 0;\r\n\r\n            if (w == 1)\r\n                count = r*c;\r\n            else if ( w == c )\r\n                count = w + (r-1);\r\n            else if (c%w == 0)\r\n                count = ((r-1)*(c/w))+((c/w) + (w-1));\r\n            else {\r\n                count = ((r-1)*(c/w))+((c/w) + (w-1) + 1);\r\n            }\r\n\r\n            bw.write(\"Case #\" + t +\": \"+count+\"\\r\\n\");\r\n        }\r\n        bw.close();\r\n        br.close();\r\n    }\r\n}", "idx": "3380"}
{"func": "package googlejam3.p385;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class A {\n    private static final String inFile = \"A-small-attempt0 (1).in\";\n    private static final String outFile = \"A-out.txt\";\n\n    public static void main(String args[]) throws IOException {\n        Scanner scanner = new Scanner(new FileReader(inFile));\n        int T = scanner.nextInt();\n        FileWriter fw = new FileWriter(outFile);\n\n        for (int t = 1; t <= T; ++t) {\n            int r = scanner.nextInt();\n            int c = scanner.nextInt();\n            int w = scanner.nextInt();\n            fw.write(String.format(\"Case #%d: %s\\n\", t, solve(r, c, w)));\n        }\n        fw.close();\n    }\n\n    private static int solve(int r, int c, int w) {\n        int res = ((c - 1) / w + 1) * (r - 1) + w + (c - 1) / w;\n        return res;\n    }\n}\n", "idx": "3385"}
{"func": "package googlejam3.p387;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class ProblemA {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n//\t\tScanner sc = new Scanner(new File(\"A-small-attempt0.in\"));\r\n\t\tScanner sc = new Scanner(new File(\"A-large.in\"));\r\n//\t\tScanner sc = new Scanner(new File(\"A.in\"));\r\n\t\tint cases = sc.nextInt();\r\n\t\tint count = 1;\r\n\r\n\t\twhile(cases --> 0) {\r\n\t\t\tint R = sc.nextInt();\r\n\t\t\tint C = sc.nextInt();\r\n\t\t\tint W = sc.nextInt();\r\n\t\t\tint turns = 0;\r\n\t\t\t\r\n\t\t\tif ( W == 1) {\r\n\t\t\t\tturns = R * C;\r\n\t\t\t} else {\r\n\t\t\t\r\n\t\t\t\tfor (int i = W-1; i < C; i += W) {\r\n\t\t\t\t\tturns += R;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tturns += W - 1;\r\n\t\t\t\t\r\n\t\t\t\tif(C % W != 0) {\r\n\t\t\t\t\tturns++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + count + \": \" + turns);\r\n\t\t\t\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\t\r\n\t\tsc.close();\r\n\t}\r\n}", "idx": "3387"}
{"func": "package googlejam3.p388;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Problem1 {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tScanner scanner = new Scanner(new FileReader(\"A-small-attempt0.in\"));\n\t        int T = scanner.nextInt();\n\t        int[] Rs = new int[T];\n\t        int[] Cs = new int[T];\n\t        int[] Ws = new int[T];\n\t        for(int i=0; i<T; i++) {\n\t        \tRs[i] = scanner.nextInt();\n\t        \tCs[i] = scanner.nextInt();\n\t        \tWs[i] = scanner.nextInt();\n\t        }  \n\t        PrintWriter out = new PrintWriter(new FileWriter(\"output1.txt\"));        \n\t        for(int i=0; i<T; i++) {\n\t        \tint count = Cs[i]/Ws[i];\n\t        \tcount += Ws[i]-1;\n\t        \tif(Cs[i]%Ws[i] != 0) {\n\t        \t\tcount++;\n\t        \t}\n\t        \tcount *= Rs[i];\n\t        \tout.println(\"Case #\" + (i+1) + \": \" + count);\n\t        }\n\t        out.close();\t       \n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "3388"}
{"func": "package googlejam3.p389;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Battelship {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString name = \"A-large\";\r\n\t\tString path = \"\";\r\n\r\n\t\tLocale.setDefault(Locale.US);\r\n\r\n\t\tScanner sc = new Scanner(new File(path + name + \".in\"));\r\n\t\tPrintWriter pw = new PrintWriter(path + name + \"ans.out\");\r\n//\t\tScanner sc = new Scanner(System.in);\r\n//\t\tPrintWriter pw = new PrintWriter(System.out);\r\n\r\n\t\tint testCases = sc.nextInt();\r\n\t\tfor (int testCase = 1; testCase <= testCases; testCase++) {\r\n\t\t\tint res=0;\r\n\t\t\tint fres=0;\r\n\t\t\tint r = sc.nextInt();\r\n\t\t\tint c = sc.nextInt();\r\n\t\t\tint w = sc.nextInt();\r\n\t\t\t\r\n\t\t\tif(c/w<2 && c%w!=0)\r\n\t\t\t\tres=w+1;\r\n\t\t\telse\r\n\t\t\t{\tif(c/w==1)\r\n\t\t\t\t\tres=w;\r\n\t\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tint fix=(c/w)-1;\r\n\t\t\t\tint rem=c-(w*fix);\r\n\t\t\t\tif(rem/w<2 && c%w!=0)\r\n\t\t\t\t\tres=fix+w+1;\r\n\t\t\t\telse\r\n\t\t\t\t\tres=fix+w;\r\n\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t\tfres=(c/w)*(r-1)+res;\r\n\t\t\t\t\t\r\n\r\n\t\t\t\r\n\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"testcase:\"+testCase+\" \"+fres);\r\n\t\t\tpw.printf(\"Case #\" + testCase + \": \"+ fres+\"\\n\");\r\n\t\t\tpw.flush();\r\n\t\t}\r\n\r\n\t\tpw.close();\r\n\t\tsc.close();\r\n\t}\r\n}", "idx": "3389"}
{"func": "package googlejam3.p391;\n\r\n\r\nimport java.io.*;\r\n\r\npublic class main {\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tBufferedReader read=new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\t\tBufferedWriter write=new BufferedWriter(new FileWriter(\"out.in\"));\r\n\t\t\tint N=Integer.valueOf(read.readLine());\r\n\t\t\t\r\n\t\t\tfor(int i=0;i<N;i++){\r\n\t\t\t\tString list[]=read.readLine().split(\" \");\r\n\t\t\t\tint R=Integer.parseInt(list[0]);\r\n\t\t\t\tint C=Integer.parseInt(list[1]);\r\n\t\t\t\tint W=Integer.parseInt(list[2]);\r\n\t\t\t\tint b=0;\r\n\t\t\t\tfloat c=Float.parseFloat(list[1]);\r\n\t\t\t\tfloat w=Float.parseFloat(list[2]);\r\n\t\t\t\tif(C==W){\r\n\t\t\t\t\tb=C+(R-1);\r\n\t\t\t\t}else if(W==1){\r\n\t\t\t\t\tb=C*R;\r\n\t\t\t\t}\r\n\t\t\t\telse if(C%2==0){\r\n\t\t\t\t\tif(C/2<W){\r\n\t\t\t\t\t\tb=(C/W)+W+((C/W)*(R-1));\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif(C%W==0){\r\n\t\t\t\t\t\t\tb=(C/W)+(W-1)+((C/W)*(R-1));\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tb=(C/W)+W+((C/W)*(R-1));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}else if(C%2!=0){\r\n\t\t\t\t\tif(C%W==0){\r\n\t\t\t\t\t\tb=(C/W)+(W-1)+((C/W)*(R-1));\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tb=(C/W)+W+((C/W)*(R-1));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\twrite.write(\"Case #\" + (i+1) + \": \"+ b+\"\\n\");\r\n\t\t\t\twrite.flush();\r\n\t\t\t}\r\n\t\t} catch(IOException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t}\r\n\t}\r\n}\r\n\r\n", "idx": "3391"}
{"func": "package googlejam3.p393;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.nio.file.Paths;\nimport java.util.Scanner;\n\npublic class A {\n\n//    private static final String FNAME = \"test\";\n    private static final String FNAME = \"small-0\";\n//    private static final String FNAME = \"large-0\";\n\n    public static void main(String[] args) throws IOException {\n        String fname = \"data/\" + A.class.getSimpleName() + \"-\" + FNAME + \".\";\n        Scanner sc = new Scanner(Paths.get(fname + \"in\"));\n        PrintWriter w = new PrintWriter(fname + \"out\");\n\n        int T = sc.nextInt();\n        for (int tc = 0; tc < T; tc++) {\n\n            int R = sc.nextInt();\n            int C = sc.nextInt();\n            int W = sc.nextInt();\n\n            int res = R * C / W + W - (C % W == 0 ? 1 : 0);\n\n            w.printf(\"Case #%d: %d\\n\", tc + 1, res);\n        }\n\n        w.close();\n    }\n}\n", "idx": "3393"}
{"func": "package googlejam3.p395;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n\tpublic static void main (String[]args)throws IOException{\r\n\t\tBufferedReader x=new BufferedReader(new FileReader(\"Alarge.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"Alarge.out\")));\r\n\t\tint t=Integer.parseInt(x.readLine());\r\n\t\tint[][]dp=new int[21][21];\r\n\t\tfor (int i=1; i<=20; i++){\r\n\t\t\tdp[i][1]=i;\r\n\t\t\tdp[i][i]=i;\r\n\t\t\tdp[i][i-1]=i;\r\n\t\t}\r\n\t\tfor (int i=1; i<=20; i++){\r\n\t\t\tfor (int j=2; j<=i/2; j++){\r\n\t\t\t\tif (i%j==0){\r\n\t\t\t\t\tdp[i][j]=dp[2*j-1][j]+i/j-2;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tdp[i][j]=dp[2*j-1][j]+i/j-1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (int j=i/2+1; j<=i; j++){\r\n\t\t\t\tdp[i][j]=dp[2*i-2*j][i-j]+2*j-i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int cases=1; cases<=t; cases++){\r\n\t\t\tStringTokenizer st=new StringTokenizer(x.readLine());\r\n\t\t\tint r=Integer.parseInt(st.nextToken());\r\n\t\t\tint c=Integer.parseInt(st.nextToken());\r\n\t\t\tint w=Integer.parseInt(st.nextToken());\r\n\t\t\tout.println(\"Case #\"+cases+\": \"+((r-1)*(c/w)+dp[c][w]));\r\n\t\t}\r\n\t\tout.close();\r\n\t\tSystem.exit(0);\r\n\t}\r\n}", "idx": "3395"}
{"func": "package googlejam3.p396;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class CodeJamBrattleship{\r\n    public static void main(String[] args) throws Exception{\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        StringBuilder out = new StringBuilder();\r\n        int t = Integer.parseInt(br.readLine());\r\n        for(int k = 1; k <= t; k++){\r\n            StringTokenizer st = new StringTokenizer(br.readLine());\r\n            int r = Integer.parseInt(st.nextToken());\r\n            int c = Integer.parseInt(st.nextToken());\r\n            int w = Integer.parseInt(st.nextToken());\r\n            int n = r*c/w;\r\n            n += w;\r\n            if(c % w == 0) n--;\r\n            out.append(\"Case #\" + k + \": \" + n + \"\\n\");\r\n        }\r\n        System.out.print(out);\r\n    }\r\n}", "idx": "3396"}
{"func": "package googlejam3.p400;\n\n\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.Scanner;\n\npublic class A {\n    private final int R, C, W;\n\n    // parse\n    public A(final Scanner sc) {\n        R = sc.nextInt();\n        C = sc.nextInt();\n        W = sc.nextInt();\n    }\n\n    // Template\n    public static void main(String... args) throws Exception {\n        try (final Scanner sc = new Scanner(System.in)) {\n            final int T = sc.nextInt();\n            final Object[] solvers = new Object[T];\n            for (int i = 0; i < T; i++)\n                solvers[i] = new A(sc);\n            final Iterator<String> results = Arrays.stream(solvers)\n                    .map(s -> s.toString())\n                    .iterator();\n            for (int i = 1; i <= T; i++)\n                System.out.printf(\"Case #%s: %s\\n\", i, results.next());\n        }\n    }\n}\n", "idx": "3400"}
{"func": "package googlejam3.p401;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\n\r\npublic class B {\r\n\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"C:/Users/Nejc/Desktop/input.in\"));\r\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"C:/Users/Nejc/Desktop/output.txt\")));\r\n\t\tint T=Integer.parseInt(br.readLine());\r\n\t\tfor(int t=0; t<T; t++){\r\n\t\t\tString[] line = br.readLine().split(\" \");\n\t\t\tint R = Integer.parseInt(line[0]);\n\t\t\tint C = Integer.parseInt(line[1]);\n\t\t\tint W = Integer.parseInt(line[2]);\n\t\t\tint result=0;\n\t\t\tif(R==1){\n\t\t\t\tif(C%W==0)result=C/W+W-1;\n\t\t\t\telse result=C/W+W;\n\t\t\t}\n\t\t\telse System.out.println(\"Error\");\n\t\t\tbw.write(\"Case #\"+(t+1)+\": \"+result);\n\t\t\tbw.newLine();\r\n\t\t}\r\n\t\tbr.close();\r\n\t\tbw.close();\r\n\t\tSystem.out.println(\"done\");\r\n\t}\r\n}\r\n", "idx": "3401"}
{"func": "package googlejam3.p402;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n *\n * @author Mark\n */\npublic class Brattleship {\n  static final String inputFileName = \"in.txt\";\n  static final String outputFileName = \"out.txt\";\n  \n  /**\n   * @param args the command line arguments\n   */\n  public static void main(String[] args) {\n    try {\n      File file = new File(inputFileName);\n      Scanner in = new Scanner(file);\n      file = new File(outputFileName);\n      PrintWriter out = new PrintWriter(file);\n      \n      \n      int num = in.nextInt();\n      \n      for(int n=1; n<=num; n++) {\n        int nRows = in.nextInt();\n        int nCols = in.nextInt();\n        int w = in.nextInt();\n        \n        int g = nCols/w;\n        \n        int e = 1 + nCols%w;\n        int a;\n        if(e==1) {\n          a = 0;\n        } else {\n          a = 1;\n        }\n        \n        \n        int N = nRows * g + (w-1) + a;\n          \n        String str = \"Case #\"+n+\": \"+N;\n        \n        System.out.println(str);\n        out.println(str);\n      }\n      \n      in.close();\n      out.close();\n    } catch (FileNotFoundException ex) {\n      Logger.getLogger(Brattleship.class.getName()).log(Level.SEVERE, null, ex);\n    }\n  }\n}\n", "idx": "3402"}
{"func": "package googlejam3.p408;\nimport java.util.Scanner;\n\n\npublic class Jam2015_1CA {\n\tpublic static void main(String[] args) {\n\t\tScanner\tscanIn\t= new Scanner(System.in);\n\t\t\n\t\tint T\t= scanIn.nextInt();\n\t\t\n\t\tfor(int i=0; i<T; ++i) {\n\t\t\tJam2015_1CA\tinst\t= new Jam2015_1CA();\n\t\t\tint\t\tr\t= scanIn.nextInt();\n\t\t\tint\t\tc\t= scanIn.nextInt();\n\t\t\tint\t\tw\t= scanIn.nextInt();\n\t\t\tint\ttotal\t= r*c;\n\t\t\tint\tret1\t\t= 0;\n\t\t\t\n\t\t\t//\tscan\n\t\t\tret1\t= r*(c/w);\n\t\t\t\n\t\t\tif(c % w == 0) {\n\t\t\t\tret1\t+= w-1;\n\t\t\t} else if( w == 1) {\n\t\t\t} else {\n\t\t\t\tret1\t+= w;\n\t\t\t}\n\t\t\t\n\t\t\tint\tret\t= ret1;\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + ret);\n\t\t}\n\t\t\n\t\tscanIn.close();\n\t}\n}\n", "idx": "3408"}
{"func": "package googlejam3.p409;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.util.HashSet;\r\nimport java.util.Scanner;\r\n\r\npublic class Z1_1 {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        FileWriter fw = new FileWriter(\"C:\\\\output.txt\");\r\n        BufferedWriter out = new BufferedWriter(fw);\r\n        //String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\z1.txt\";\r\n        String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\A-small-attempt0.in\";\r\n        //String pathname = \"C:\\\\Users\\\\YC14rp1\\\\Downloads\\\\D-large.in\";\r\n        Scanner scanner = new Scanner(new File(pathname));\r\n        int tn = scanner.nextInt();\r\n        scanner.nextLine();\r\n        for (int ti = 1; ti <= tn; ti++) {\r\n            int r = scanner.nextInt();\r\n            int c = scanner.nextInt();\r\n            int w = scanner.nextInt();\r\n            int start  = w;\r\n            int cnt = 1;\r\n            while (start<c-w) {\r\n                cnt++;\r\n                start += w;\r\n            }\r\n            cnt += w;\r\n            if (w==c) {\r\n                cnt = w;\r\n            }\r\n            String s;\r\n            if (cnt==Integer.MAX_VALUE) {\r\n                s = \"Case #\" + ti + \": NOT POSSIBLE\";\r\n            } else {\r\n                s = \"Case #\" + ti + \": \"+cnt;\r\n            }\r\n            System.out.println(s);\r\n            out.write(s);\r\n            out.write(\"\\n\");\r\n        }\r\n        out.close();\r\n    }\r\n\r\n}\r\n", "idx": "3409"}
{"func": "package googlejam3.p412;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\r\n\t/**\r\n\t * @param args\r\n\t * @throws FileNotFoundException \r\n\t */\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner in = new Scanner(new File(\"A-small-attempt1.in\"));//\r\n\t\tPrintWriter out = new PrintWriter(\"out.txt\");\r\n\t\tint T = in.nextInt();\r\n\t\tfor(int i=1;i<=T;i++){\r\n\t\t\tint r = in.nextInt();\r\n\t\t\tint c = in.nextInt();\r\n\t\t\tint w = in.nextInt();\n\t\t\tint res1 = 0;\n\t\t\tif(r==1){\n\t\t\t\tint p = w;\n\t\t\t\twhile(p<=c){\n\t\t\t\t\tres1++;\n\t\t\t\t\tp+=w;\n\t\t\t\t}\n\t\t\t\tres1+=w;\n\t\t\t\tif(p==c+w){\n\t\t\t\t\tres1--;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint p = w;\n\t\t\t\twhile(p<=c){\n\t\t\t\t\tres1++;\n\t\t\t\t\tp+=w;\n\t\t\t\t}\n\t\t\t\tres1*=r;\n\t\t\t\tres1+=w;\n\t\t\t\tif(p==c+w){\n\t\t\t\t\tres1--;\n\t\t\t\t}\n\t\t\t}\r\n\t\t\tint res = res1;\r\n\t\t\tout.println(\"Case #\"+i+\": \"+res);\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t\tin.close();\r\n\r\n\t}\r\n}\r\n", "idx": "3412"}
{"func": "package googlejam3.p417;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\npublic class BrattleShip {\r\n\r\n\tpublic static void main (String [] args) throws IOException {\r\n\t\tString root = \"A-small-attempt0\";\r\n\t\tString fileName = \"C:\\\\Users\\\\Aaron\\\\Downloads\\\\\" + root + \".in\";\r\n\t\tBufferedReader reader = new BufferedReader (new FileReader(new File(fileName)));\r\n\t\tint nTestCases = Integer.parseInt(reader.readLine());\r\n\t\tArrayList<String> out = new ArrayList<String>();\r\n\t\tfor (int t = 0; t < nTestCases; t++) {\r\n\t\t\tString[] bn = reader.readLine().split(\" \");\r\n\t\t\t\r\n\t\t\tint r = Integer.parseInt(bn[0]);\r\n\t\t\tint c = Integer.parseInt(bn[1]);\r\n\t\t\tint w = Integer.parseInt(bn[2]);\r\n\t\t\t\r\n\t\t\t// 0 is unchecked, 1 is miss, 2 is hit\r\n\t\t\tint[][] board = new int[r][c];\r\n\t\t\tfor (int[] b : board) Arrays.fill(b, 0);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// INIITALLY ASSUME R = 1;\r\n\t\t\t// Stagger the hits\r\n\t\t\tint ans = (c % w == 0) ? c / w : c / w + 1;\r\n\t\t\tans += (w - 1);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"CASE \" + (t + 1) + \": \" + ans);\r\n\t\t\tout.add(\"Case #\" + (t+1) + \": \" + ans);\r\n\t\t\tSystem.out.println(\"-----------------\");\r\n\t\t}\r\n\t\t\r\n\t\tPrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\Aaron\\\\Downloads\\\\\"+ root + \"-SOL.out\")));\r\n\t\tfor (String s : out) {\r\n\t\t\twriter.write(s + \"\\n\");\r\n\t\t}\r\n\t\t\r\n\t\twriter.close();\r\n\t\treader.close();\r\n\t}\r\n}\r\n", "idx": "3417"}
{"func": "package googlejam3.p421;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class p1 \r\n{\r\n  public static void main (String[]args)throws IOException\r\n  {\r\n    Scanner s=new Scanner (new File(\"A-small-attempt1.in\"));\r\n    //Scanner s=new Scanner (new File(\"in.txt\"));\r\n    PrintWriter out=new PrintWriter(new FileWriter(\"out.txt\"));\r\n    //Scanner s=new Scanner (new File(\"in.txt\"));\r\n    int ans=0;\r\n    int cases=s.nextInt();\r\n    for (int tt=0;tt<cases;tt++)\r\n    {\r\n      ans=0;\r\n      int r=s.nextInt();\r\n      int c=s.nextInt();\r\n      int w=s.nextInt();\r\n      ans=c/w-1;\r\n      int extra=c%w;\r\n      ans+=(w);\r\n      if (extra!=0)\r\n        ans+=1;\r\n      ans*=r;\r\n      \r\n      out.println (\"Case #\"+(tt+1)+\": \"+ans);\r\n      System.out.println (\"Case: #\"+(tt+1)+\": \"+ans);\r\n    }\r\n    out.close();\r\n  }\r\n}", "idx": "3421"}
{"func": "package googlejam3.p422;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class Problem_A {\n\n\tpublic static void main(String[] args) {\n\t\t//String inFile = \"//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//in.txt\";\n\t\tString inFile = \"//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//A-small-attempt0.in\";\n\t\tString outFile = \"//Users//lixuefei//Documents//JavaWorkspace//Interview//src//GoogleCodeJamRound2//result.txt\";\n\t\tint n = 0;\n\t\tString line;\n\t\ttry {\n\t\t\tFileReader fileReader = new FileReader(inFile);\n\t\t\tBufferedReader br = new BufferedReader(fileReader);\n\t\t\tFileWriter fileWriter = new FileWriter(outFile);\n\t\t\tBufferedWriter bw = new BufferedWriter(fileWriter);\n\t\t\tline = br.readLine();\n\t\t\tn = Integer.parseInt(line);\n\t\t\tfor(int i = 0; i < n ; i++){\n\t\t\t\tline = br.readLine();\n\t\t\t\t\n\t\t\t\tString[] parts = line.split(\" \");\n\t\t\t\tlong R = Long.parseLong(parts[0]);\n\t\t\t\tlong C = Long.parseLong(parts[1]);\n\t\t\t\tlong W = Long.parseLong(parts[2]);\n\t\t\t\tlong result = (C-1)/W+W;\n\t\t\t\tbw.write(\"Case #\" + (i+1) + \": \" + result + \"\\n\");\n\t\t\t\t\n\t\t\t}\n\t\t\tbr.close();\n\t\t\tbw.close();\n\t\t} catch (IOException ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\n\t}\n}\n\n", "idx": "3422"}
{"func": "package googlejam3.p424;\n// -XX:+UseParallelGC\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.TreeMap;\nimport java.util.TreeSet;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author adam\n */\n\n\npublic class A\n{\n    public static void main(String[] args) throws Exception\n    {\n        Scanner s=new Scanner(new FileInputStream(args[0]) );\n        int t=s.nextInt();\n        TreeSet<Long> keresettek=new TreeSet<Long>();\n        LinkedList<Long> keresettek2=new LinkedList<Long>();\n        for (int i=1;i<=t;i++)\n        {\n            int r=s.nextInt();\n            int c=s.nextInt();\n            int w=s.nextInt();\n             System.out.println(\"Case #\"+i+\": \"+r*\n\t\t\t( (c/w) +(c%w!=0?1:0) +(w-1) ) );\n        }\n    }\n\n\n}", "idx": "3424"}
{"func": "package googlejam3.p425;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\n/**\n * Created by pascal on 5/10/15.\n */\npublic class A {\n\n    public static void main(String[] args) throws Exception{\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String line = reader.readLine();\n        int caseNum = 1;\n        while((line = reader.readLine()) != null) {\n            String[] parts = line.split(\" \");\n            int R = Integer.parseInt(parts[0]);\n            int C = Integer.parseInt(parts[1]);\n            int W = Integer.parseInt(parts[2]);\n            int result = 0;\n\n            if(W == 1) {\n                result = R*C;\n            } else {\n                for(int i = W; i < C; i += W) {\n                    result += R;\n                }\n                result += W;\n            }\n\n            System.out.println(\"Case #\" + caseNum + \": \" + result);\n            caseNum++;\n        }\n    }\n}\n", "idx": "3425"}
{"func": "package googlejam3.p427;\n\r\nimport java.util.Scanner;\r\n\r\npublic class cj_2015_R1C_A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner read = new Scanner(System.in);\r\n\t\tint n = read.nextInt();\r\n\t\tfor (int i = 1; i <= n; i++) {\r\n\t\t\tint r = read.nextInt();\r\n\t\t\tint c = read.nextInt();\r\n\t\t\tint w = read.nextInt();\r\n\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", i, r * c / w + w + (c % w == 0 ? -1 : 0));\r\n\t\t}\r\n\t\tread.close();\r\n\t}\r\n\r\n}\r\n", "idx": "3427"}
{"func": "package googlejam3.p432;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.util.Scanner;\n\npublic class A {\n\n  public static void main(String[] args) throws Exception {\n    Scanner sc = new Scanner(new File(\"data/a/A-small-attempt1.in\"));\n    BufferedWriter bw = new BufferedWriter(new FileWriter(new File(\"data/a/out\")));\n    int t = sc.nextInt();\n    for (int i = 1; i <= t; i++) {\n      int r = sc.nextInt();\n      int c = sc.nextInt();\n      int w = sc.nextInt();\n      int q = w;\n      if (c / w * w == c) {\n        q -= 1;\n      }\n      int s = r * ((c / w) + q);\n      System.out.println(\"Case #\" + i + \": \" + s);\n      bw.write(\"Case #\" + i + \": \" + s + \"\\n\");\n    }\n    sc.close();\n    bw.close();\n  }\n}\n", "idx": "3432"}
{"func": "package googlejam3.p439;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.io.Reader;\r\nimport java.util.Scanner;\r\n\r\npublic class ProbA {\r\n\tprivate static Reader in;\r\n\tprivate static PrintWriter out;\t\r\n\tpublic static final String NAME = \"A-small-practice.in\";\t\t\r\n\tpublic static final String OUTNAME = \"output.out\";\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner sc = new Scanner(new FileReader(NAME));\r\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(OUTNAME));\r\n\t\t\r\n\t\tString output = \"\";\r\n\t\tint cases = Integer.valueOf(sc.nextLine());\r\n\t\tfor (int c = 1; c <= cases; c++) {\r\n\t\t\toutput += \"Case #\" + c + \": \";\r\n\t\t\t\r\n\t\t\tint R = sc.nextInt();\r\n\t\t\tint C = sc.nextInt();\r\n\t\t\tint W = sc.nextInt();\r\n\t\t\t\r\n\t\t\tint guess = 0;\r\n\t\t\tint totalCells = R * C;\r\n\t\t\tif (totalCells % W == 0) {\r\n\t\t\t\tguess = totalCells/W + (W-1);\r\n\t\t\t} else {\r\n\t\t\t\tguess = totalCells/W + (W);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\toutput += guess + \"\\n\";\r\n\t\t\t\r\n\t\t\tif (sc.hasNext()) sc.nextLine();\r\n\t\t}\t\t\r\n\t\tbw.write(output);\r\n\t\tbw.close();\r\n\t}\r\n}\r\n", "idx": "3439"}
{"func": "package googlejam3.p443;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader in = new  BufferedReader(new InputStreamReader(System.in));\r\n\t\t\r\n\t\tint t = Integer.parseInt(in.readLine());\r\n\t\t\r\n\t\tfor (int i = 1; i <= t; i++) {\r\n\t\t\tint res = 0;\r\n\t\t\t// body of the program\r\n\t\t\t\r\n\t\t\tString[] next = in.readLine().split(\" \");\r\n\t\t\tint r = Integer.parseInt(next[0]);\r\n\t\t\tint c = Integer.parseInt(next[1]);\r\n\t\t\tint w = Integer.parseInt(next[2]);\r\n\t\t\t\r\n\t\t\tint row = (c - w) / w;\r\n\t\t\tif (c % w == 0) row += w;\r\n\t\t\telse row += w + 1;\r\n\t\t\t\r\n\t\t\tres = r*row;\r\n\t\t\t\r\n\t\t\tSystem.out.format(\"Case #%d: %d\\n\", i, res);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "3443"}
{"func": "package googlejam3.p445;\nimport java.util.*;\r\n\r\npublic class R1C_A {\r\n\tint r, c, w;\r\n\tint[][] map;\r\n\t/*\r\n\tint[][] ans = new int[][]{\r\n\t\t                             {1},\r\n\t\t                          {2, 2},\r\n\t\t                       {3, 3, 3},\r\n\t\t                    {4, 4, 3, 4},\r\n\t\t                 {5, 5, 4, 4, 5},\r\n\t\t              {6, 6, 5, 4, 4, 6},\r\n\t\t           {7, 7, 6, 5, 5, 5, 7},\r\n\t\t        {8, 8, 7, 6, 5, 5, 5, 8},\r\n\t\t     {9, 9, 8, 7, 6, 5, 5, 6, 9},\r\n\t\t{10, 10, 9, 8, 7, 6, 6, 5, 6, 10},\r\n\t};\r\n\t*/\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tR1C_A r = new R1C_A();\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tr.map = new int[11][11];\n\t\tfor(int i=1;i<11;i++){ //c \n\t\t\tfor(int j=1;j<=i;j++){ //w\n\t\t\t\tif(j==1 || j==i) r.map[i][j] = i;\n\t\t\t\telse if(j>=i/2+i%2) r.map[i][j] = j+1;\n\t\t\t\telse r.map[i][j] = r.map[i-j][j] + 1;\n\t\t\t\t//System.out.print(map[i][j] + \" \");\n\t\t\t}\n\t\t\t//System.out.println();\n\t\t}\n\t\t\n\t\t\t\t\n\t\tint t = sc.nextInt();\n\t\tfor(int test=1;test<=t;test++){\n\t\t\tr.r = sc.nextInt();\n\t\t\tr.c = sc.nextInt();\n\t\t\tr.w = sc.nextInt();\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(\"case #\" + test + \": \" + r.map[r.c][r.w]);\n\t\t}\n\t\tsc.close();\r\n\t}\r\n\r\n}\r\n", "idx": "3445"}
{"func": "package googlejam3.p446;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.PrintStream;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class A {\n\n    private A() {\n    }\n\n    public static void main(final String[] args) throws Exception {\n        final A a = new A();\n        final BufferedReader in = new BufferedReader(new FileReader(new File(\"f.in\")));\n\t\tSystem.setOut(new PrintStream(a.getClass().getSimpleName() + \".out\"));\n\t\tfinal String line = in.readLine();\n\t\tfinal int test = Integer.parseInt(line);\n\t\t\n\t\t\n\t\tstart: for (int w = 1; w <= test; w++) {\n\t\t\n\t\t    final String s = in.readLine();\n\t\t    final String[] ss = s.split(\" \");\n\t\t    final int r = Integer.parseInt(ss[0]);\n\t\t    final int c = Integer.parseInt(ss[1]);\n\t\t    final int x = Integer.parseInt(ss[2]);\n\t\t\n\t\t    if (x == c) {\n\t\t        System.out.println(\"Case #\" + w + \": \" + x * r);\n\t\t        continue;\n\t\t    }\n\t\t\n\t\t    final int m = c % x;\n\t\t    final int d = m + x;\n\t\t\n\t\t    if (c <= d) {\n\t\t        // / FIXME\n\t\t        System.out.println(\"Case #\" + w + \": \" + (x + 1) * r);\n\t\t        continue;\n\t\t    }\n\t\t\n\t\t\n\t\t    int q = (c / x) - 1;\n\t\t    if (m == 0) {\n\t\t        q--;\n\t\t    }\n\t\t\n\t\t    System.out.println(\"Case #\" + w + \": \" + (q + (x + 1)) * r);\n\t\t}\n    }\n\n    long[] mas = new long[41];\n    final Set<Long> qq = new HashSet<Long>();\n\n}\n", "idx": "3446"}
{"func": "package googlejam3.p448;\nimport java.util.Scanner;\r\n\r\n//3\r\n//1 4 2\r\n//1 7 7\r\n//2 5 1\r\n//\r\n//Case #1: 3\r\n//Case #2: 7\r\n//Case #3: 10\r\n\r\nclass A\r\n{\r\n\tpublic static void main(String arg[])\r\n\t{\r\n\t\tScanner scan = new Scanner(System.in);\r\n\t\tint t = scan.nextInt(), r, c, w, ans;\r\n\t\tStringBuilder p = new StringBuilder();\r\n\t\t\r\n\t\tfor (int no = 1; no <= t; no++)\r\n\t\t{\r\n\t\t\tr = scan.nextInt();\r\n\t\t\tc = scan.nextInt();\r\n\t\t\tw = scan.nextInt();\r\n\t\t\tans = (w + c / w - 1) * r;\r\n\t\t\tif(c % w != 0)\r\n\t\t\t\tans += 1;\r\n\t\t\tp.append(String.format(\"Case #%d: %d\\n\", no, ans));\r\n\t\t}\r\n\t\tSystem.out.print(p);\r\n\t}\r\n}\r\n", "idx": "3448"}
{"func": "package googlejam3.p449;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class A {\n\tpublic static void main(String[] args) {\n\t\tA obj = new A();\n\t\tString filame = \"input.txt\";\n\t\tif (args.length > 0) {\n\t\t\tfilame = args[0];\n\t\t}\n\t\tFile file = new File(filame);\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(file))) {\n\t\t\tInteger testCasesCount = Integer.parseInt(br.readLine());\n\t\t\tint testCaseNumber = 1;\n\t\t\tfor (String line; (line = br.readLine()) != null;) {\n\t\t\t\tString[] testCase = line.split(\"\\\\s+\");\n\t\t\t\tint row = Integer.parseInt(testCase[0]);\n\t\t\t\t\t\tint cells = Integer.parseInt(testCase[1]);\n\t\t\t\t\t\tint width = Integer.parseInt(testCase[2]);\n\t\t\t\t//\t\tchar[] visitors = visitorsLine.toCharArray();\n\t\t\t\t//\t\tint total = 0;\n\t\t\t\t//\t\tint friends = 0;\n\t\t\t\t//\n\t\t\t\t//\t\tSystem.out.print(\"Case #\" + testCasesCount + \": \");\n\t\t\t\t//\t\tfor (int i = 0; i < visitors.length; i++) {\n\t\t\t\t//\t\t\tint shameCount = Character.getNumericValue(visitors[i]);\n\t\t\t\t//\n\t\t\t\t//\t\t\tif (total < i) {\n\t\t\t\t//\n\t\t\t\t//\t\t\t\tint frindsToAdd = i - total;\n\t\t\t\t//\t\t\t\ttotal += frindsToAdd;\n\t\t\t\t//\t\t\t\tfriends += frindsToAdd;\n\t\t\t\t//\t\t\t}\n\t\t\t\t//\t\t\ttotal += shameCount;\n\t\t\t\t//\t\t}\n\t\t\t\t\t\t//System.out.print(row);\n\t\t\t\t\t\t//System.out.print(cells);\n\t\t\t\t\t\t//System.out.println(width);\n\t\t\t\t\n\t\t\t\t\t\tint limit =  cells / width;\n\t\t\t\t\t\tint res = limit + width-1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tint fin = res * row;\n\t\t\t\t\t\tint left = cells % width;\n\t\t\t\t\t\t//System.out.println(left);\n\t\t\t\t\t\tif(left != 0 && width != 1){\n\t\t\t\t\t\t\tfin++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tSystem.out.println(\"Case #\"+ testCaseNumber++ +\": \"+ fin);\n\t\t\t\t\t\t//System.out.println();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n}\n", "idx": "3449"}
{"func": "package googlejam3.p451;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.util.Scanner;\n\n\npublic class MainClass {\n\n\tpublic static void main(String[] args) {\n\t\tint T = 0;\n\t\ttry {\n\t\t\tScanner scan = new Scanner(new File(\"A-small-attempt0.in\"));\n\t\t\tT = scan.nextInt();\n\t\t\tscan.nextLine();\n\t\t\t//System.out.println(\"Number of test cases is \" + T);\n\t\t\tfor(int i = 0; i < T; i++) {\n\t\t\t\tint R, C, W;\n\t\t\t\tR = scan.nextInt();\n\t\t\t\tC = scan.nextInt();\n\t\t\t\tW = scan.nextInt();\n\t\t\t\t\n\t\t\t\tint answer = 0;\n\t\t\t\t\n\t\t\t\tfor(int j = 0; j < R; j++) {\n\t\t\t\t\tfor(int k = 0; k < C; k += W) {\n\t\t\t\t\t\tanswer ++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tanswer += (W - 1);\n\t\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + answer);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n}\n", "idx": "3451"}
{"func": "package googlejam3.p454;\nimport java.io.*;\nimport java.text.MessageFormat;\n\npublic class A {\n    public static String cc = \"Case #{0}: {1}\";\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new FileReader(\"A.in\"));\n        BufferedWriter writer = new BufferedWriter(new FileWriter(\"A.out\"));\n        int n = Integer.parseInt(reader.readLine().trim());\n        for (int i = 0; i < n; i++) {\n            int ans = 0;\n            String[] strs = reader.readLine().trim().split(\" +\");\n            int p1 = Integer.parseInt(strs[0]);\n            int p2 = Integer.parseInt(strs[1]);\n            int m = Integer.parseInt(strs[2]);\n\n            ans += p1 * (p2 % m == 0 ? p2 /m : p2 /m+1);\n            ans += m-1;\n            writer.write(MessageFormat.format(cc, i + 1, ans));\n            writer.newLine();\n        }\n        writer.close();\n        reader.close();\n    }\n}\n\n", "idx": "3454"}
{"func": "package googlejam3.p455;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\n\npublic class onecq1 {\n\tpublic static void main(String[] args){\n\t\tScanner scanner;\n\t\ttry {\n\t\t\tscanner = new Scanner(new File(\"A-small-attempt0.in\"));\n\t\t\tint noofTests = scanner.nextInt();\n\t\t\tint i=0;\n\t\t\twhile(i<noofTests){\n\t\t\t\tint output = 0;\t\t\t\t\n\t\t\t\tint R = scanner.nextInt();\n\t\t\t\tint C = scanner.nextInt();\n\t\t\t\tint W = scanner.nextInt();\n\t\t\t\tfor(int k = 0; k< R;k++){\n\t\t\t\t\tfor(int j = 0; j<C ; j+=W)\n\t\t\t\t\t\toutput++;\n\t\t\t\t}\n\t\t\t\toutput += (W -1);\n\t\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + output);\n\t\t\t\ti++;\n\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "3455"}
{"func": "package googlejam3.p456;\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by Fatih on 10/05/2015.\r\n */\r\npublic class CodeJam1 {\r\n    public static void main(String args[]){\r\n        Scanner scan = new Scanner(System.in);\n\t\tint T = scan.nextInt();\n\t\t\n\t\tfor(int i = 0 ; i < T;i++){\n\t\t    int R = scan.nextInt();\n\t\t    int C = scan.nextInt();\n\t\t    int W = scan.nextInt();\n\t\t    int count =0;\n\t\t    if(W ==1)\n\t\t        count = C * R;\n\t\t    else\n\t\t    {\n\t\t        int prs = (int)Math.ceil((double)C/W);\n\t\t        count = prs*R+W-1;\n\t\t    }\n\t\t    System.out.printf(\"Case #%d: %d\\n\",i+1,count);\n\t\t}\r\n    }\r\n}\r\n", "idx": "3456"}
{"func": "package googlejam3.p457;\nimport java.io.BufferedReader;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.PrintStream;\r\n\r\n\r\npublic class R1CP1 {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString file = \"A-small-attempt1\";\r\n//\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(file + \".in\"));\r\n\t\tPrintStream ps = new PrintStream(new FileOutputStream(file + \".out\"));\r\n\t\tint testcases = Integer.parseInt(br.readLine());\r\n\t\tfor(int t = 0; t < testcases; t++){\r\n\t\t\tString[] ln = br.readLine().split(\" \");\r\n\t\t\tint r = Integer.parseInt(ln[0]);\r\n\t\t\tint c = Integer.parseInt(ln[1]);\r\n\t\t\tint w = Integer.parseInt(ln[2]);\r\n\t\t\t\r\n\t\t\tint precal = (int)(Math.ceil((double)(c - w) / w) + w);\r\n\t\t\tps.println(\"Case #\" + (t + 1) + \": \" + precal);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "3457"}
{"func": "package googlejam3.p458;\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * Created by noMoon on 2015-05-10.\n */\npublic class Brattleship {\n    public static void main(String[] args) throws IOException {\n//        System.out.prLongln(reverse(19));\n\n//        File file = new File(\"A-large.in.txt\");\n//        File file = new File(\"Brattleship.in\");\n        File file = new File(\"A-small-attempt0.in.txt\");\n        File outputFile = new File(\"Brattleship.out\");\n        BufferedWriter bw = new BufferedWriter(new FileWriter(outputFile));\n        BufferedReader br = new BufferedReader(new InputStreamReader(\n                new FileInputStream(file)));\n        Long numberOfTestCases = Long.valueOf(br.readLine());\n        Long count = (long)0;\n        while (count++ < numberOfTestCases) {\n\n            String line=br.readLine();\n            String[] params=line.split(\" \");\n            int R=Integer.valueOf(params[0]);\n            int C=Integer.valueOf(params[1]);\n            int W=Integer.valueOf(params[2]);\n            int singleRow=C/W+W-1;\n            if(C%W>0){\n                singleRow++;\n            }\n            bw.write(\"Case #\" + String.valueOf(count) + \": \" + String.valueOf(R*singleRow));\n            bw.newLine();\n        }\n\n        bw.close();\n        br.close();\n    }\n}\n", "idx": "3458"}
{"func": "package googlejam3.p459;\n\n\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class A {\n\n\tpublic static void main(String[] args) throws Exception {\n//        Scanner sc = new Scanner(new FileReader(\"data/sample\"));\n        Scanner sc = new Scanner(new FileReader(\"data/A-small-attempt0.in\"));\n//        Scanner sc = new Scanner(new FileReader(\"data/A-large.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"data/out\"));\n        int caseCount = sc.nextInt();\n        for(int caseNum = 0; caseNum < caseCount; caseNum++) {\n        \tpw.print(\"Case #\" + (caseNum + 1) + \": \");\n        \tSystem.out.print(\"Case #\" + (caseNum + 1) + \": \");\n\n        \tA template = new A();\n        \tint R, C, W;\n\t\t\t\t\tR = sc.nextInt();\n\t\t\t\t\tC = sc.nextInt();\n\t\t\t\t\tW = sc.nextInt();\n\t\t\t\t\t\n\t\t\t\t\tint fh = R * C / W;\n\t\t\t\t\tint ans = 0;\n\t\t\t\t\t\n\t\t\t\t\tboolean edge;\n\t\t\t\t\tif(C % W == 0) {\n\t\t\t\t\t\tedge = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tedge = false;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(edge) {\n\t\t\t\t\t\tans = fh + W - 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tans = fh + W;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tSystem.out.print(ans);\n\t\t\t\t\tpw.print(ans);\n\t\t\t//\t\tSystem.out.println(R + \" \" + C + \" \" + W);\n        \t\n        \tSystem.out.println();\n        \tpw.println();\n        }\n        \n        pw.flush();\n        pw.close();\n        sc.close();\n\t}\n\n}\n", "idx": "3459"}
{"func": "package googlejam3.p461;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.math.BigInteger;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\nimport java.util.TreeMap;\r\n\r\n\r\npublic class Brattleship {\r\n\tpublic static void main(String[] args){\r\n\t\tFile a = new File(\"A-small-attempt0 (2).in\");\r\n\t\tScanner input = null;\r\n\t\ttry {\r\n\t\t\tinput = new Scanner(a);\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t//Scanner input = new Scanner(System.in);\r\n\t\t\r\n\t\tFile b = new File(\"A-output.txt\");\r\n\t\tFileWriter fw = null;\r\n\t\ttry {\r\n\t\t\tfw = new FileWriter(b);\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tint number = input.nextInt();\r\n\t\tint cases = number;\r\n\t\t\r\n\t\twhile(number > 0){\r\n\t\t\tint r = input.nextInt();\r\n\t\t\tint c = input.nextInt();\r\n\t\t\tint w = input.nextInt();\r\n\t\t\t\r\n\t\t\tint result = 0;\r\n\t\t\tif (w == 1){\r\n\t\t\t\tresult = r * c;\r\n\t\t\t} else {\r\n\t\t\t\tresult = (c - 1) / w + w;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tfw.write(\"Case #\" + (cases - number + 1) + \": \" + result + \"\\n\");\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tnumber--;\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tfw.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "3461"}
{"func": "package googlejam3.p463;\nimport java.util.*;\r\nimport java.util.Set;\r\nimport java.io.*;\r\n\r\npublic class A\r\n{\r\n    public static void main(String[] args) throws Exception\r\n    {\r\n    \tFile file = new File(\"A-small-attempt0.in\");\r\n        Scanner input = new Scanner(file);\r\n        int numCases = input.nextInt();\r\n        for (int n = 0; n < numCases; n++)\r\n        {\r\n            int r = input.nextInt();\r\n            int c = input.nextInt();\r\n            int w = input.nextInt();\r\n            int[][] b = new int[r][c];\r\n            int score = 0;\r\n            for(int j=0; j<r; j++)\r\n\t        {\r\n\t        \tint i = 0;\r\n\t            while(i < c)\r\n\t            {\r\n\t            \ti += w;\r\n\t            \tscore++;\r\n\t            }\r\n\t        }\r\n\t        score += (w-1);\r\n\t        System.out.println(\"Case #\"+(n+1)+\": \"+score);\r\n        }\r\n    }\r\n}", "idx": "3463"}
{"func": "package googlejam3.p464;\nimport java.io.*;\nclass hit{\n\tpublic static void main(String arg[]) throws IOException{\n\t\tBufferedReader obj=new BufferedReader(new InputStreamReader(System.in));\n\t\tint t=Integer.parseInt(obj.readLine());\n\t\tint t1=t;\n\t\twhile(t>0){\n\t\t\tString s[]=obj.readLine().split(\" \");\n\t\t\tint r=Integer.parseInt(s[0]);\n\t\t\tint c=Integer.parseInt(s[1]);\n\t\t\tint w=Integer.parseInt(s[2]);\n\t\t\tint ans=0;\n\t\t\tif(c%w==0){\n\t\t\t\tans=c/w -1 + w;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tans=c/w + w;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+ (t1-t+1) + \": \" + ans);\n\t\t\tt--;\n\t\t}\n\t}\n}", "idx": "3464"}
{"func": "package googlejam3.p467;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class A {\r\n\r\n\t/*************************************************************************/\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString load = \"src/a-small-attempt1.in\";\n\t\tString save = \"src/a-small-attempt1.out\";\n\t\tin = new Scanner(new File(load));\n\t\tout = new PrintWriter(new File(save));\n\t\tint T = in.nextInt();\n\t\tfor (int t = 1; t <= T; t++) {\n\t\t\tout.print(\"Case #\" + t + \": \");\n\t\t\tSystem.out.println(\"Case #\" + t + \": ............\");\n\t\t\tA r = new A();\n\t\t\tint R = A.in.nextInt();\n\t\t\tint C = A.in.nextInt();\n\t\t\tint W = A.in.nextInt();\n\t\t\tif (R == 1) {\n\t\t\t\tint result = (C-W)/W + W + (C%W>0?1:0);\n\t\t\t\tA.out.println(result);\n\t\t\t} else\n\t\t\t\tA.out.println(0);\n\t\t}\n\t\tout.close();\r\n\t}\r\n\r\n\tstatic Scanner in;\r\n\tstatic PrintWriter out;\r\n}\r\n", "idx": "3467"}
{"func": "package googlejam3.p468;\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\r\n\r\n    private static final String WORK_DIR = \"C:\\\\users\\\\eamudha\\\\codejam\\\\2015\\\\1C\\\\\";\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        A a = new A();\r\n        Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-small.in\"));\r\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"A-small.out\"));\r\n        int caseCnt = sc.nextInt();\r\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\r\n            System.out.println(\"Processing test case \" + (caseNum + 1));\r\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\r\n            int r = sc.nextInt();\n\t\t\tint c = sc.nextInt();\n\t\t\tint w = sc.nextInt();\n\t\t\tif (w == 1) {\n\t\t\t    pw.println(c);\n\t\t\t} else if (w == c) {\n\t\t\t    pw.println(w);\n\t\t\t} else {\n\t\t\t    pw.println(((c-1)/w) + w);\n\t\t\t}\r\n        }\r\n        pw.flush();\r\n        pw.close();\r\n        sc.close();\r\n    }\r\n}\r\n", "idx": "3468"}
{"func": "package googlejam3.p471;\n\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.text.DecimalFormat;\r\nimport java.util.Scanner;\r\n\r\n/*\r\n * To change this template, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n/**\r\n *\r\n * @author Ismael\r\n */\r\npublic class ProblemA {\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        FileReader f= new FileReader(\"C:\\\\Users\\\\Ismael\\\\Desktop\\\\inputA.txt\");\r\n        PrintWriter out =new PrintWriter(\"C:\\\\Users\\\\Ismael\\\\Desktop\\\\outputA.txt\");\r\n        Scanner in = new Scanner(f);\r\n        int cant= in.nextInt();\r\n\r\n        for (int i = 0; i < cant; i++) {\r\n            double R= in.nextInt();\r\n            double C= in.nextInt();\r\n            double W= in.nextInt();\r\n            \r\n            double res=W+Math.ceil((C-W)/W);\r\n\r\n            \r\n            \r\n            \r\n            \r\n            out.println(\"Case #\"+(i+1)+\": \"+(int)res);\r\n        }\r\n            \r\n            \r\n        \r\n        in.close();\r\n        out.close();\r\n    }\r\n\r\n}", "idx": "3471"}
{"func": "package googlejam3.p475;\nimport java.util.Scanner;\r\n\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint T = in.nextInt();\r\n\t\tint answ, R, C, W;\r\n\t\tfor(int z  = 1; z <= T; z++){\r\n\t\t\tR = in.nextInt();\r\n\t\t\tC = in.nextInt();\r\n\t\t\tW = in.nextInt();\r\n\t\t\tif(W == 1){\r\n\t\t\t\tansw = R * C;\r\n\t\t\t}else{\r\n\t\t\t\tansw = ((C + (W - 1)) / W);\r\n\t\t\t\tansw *= R;\r\n\t\t\t\tansw += W - 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + z + \": \" + answ);\r\n\t\t\t\r\n\t\t}\r\n\t}\t\r\n\r\n}", "idx": "3475"}
{"func": "package googlejam3.p477;\nimport java.io.BufferedReader;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\n\npublic class Battleship\n{\n    public static void main(String[] args) throws NumberFormatException, IOException\n    {\n        BufferedReader input = new BufferedReader(new FileReader(args[0]));\n        OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(args[0].contains(\"in\") ?\n                args[0].replace(\"in\", \"out\") : args[0] + \".out\"));\n        int testCases = Integer.parseInt(input.readLine());\n        for (int i = 0; i < testCases; i++)\n        {\n            String[] tokens = input.readLine().split(\" \");\n\t\t\tint r = Integer.parseInt(tokens[0]), c = Integer.parseInt(tokens[1]), w = Integer.parseInt(tokens[2]);\n\t\t\tint rc = c / w +  w - 1;\n\t\t\tif( c % w != 0) \n\t\t\t    rc++;\n\t\t\tString solution = (rc * r) + \"\";\n            out.write(\"Case #\" + (i + 1) + \": \" + solution + \"\\n\");\n        }\n        input.close();\n        out.close();\n    } \n}", "idx": "3477"}
{"func": "package googlejam3.p479;\nimport java.util.*;\r\npublic class gcjround1C_1\r\n{\r\n\tstatic Scanner sc=new Scanner (System.in);\r\n\tpublic static void main (String[]args)\r\n\t{\r\n\t\t//String newLine=\"\"+(char)13;\r\n\t\t//sc.useDelimiter(newLine);\r\n\r\n\t\tlong T=sc.nextLong();\r\n\t\tfor (long i=0;i<T;i++)\r\n\t\t{\r\n\t\t\tint R=sc.nextInt();\r\n\t\t\tint C=sc.nextInt();\r\n\t\t\tint W=sc.nextInt();\r\n\t\t\tint perRow=(int)Math.ceil(C/(double)W);\r\n\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+(perRow*R+ (W-1)));\r\n\t\t}\r\n\t}\r\n}", "idx": "3479"}
{"func": "package googlejam3.p480;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.util.*;\n\npublic class a {\n  public static void main(String[] args)  throws FileNotFoundException {\n\n    Scanner sc;\n    try {\n      sc = new Scanner(new FileReader(\"/Users/patcharin/project/google/src/test.txt\"));\n    } catch (FileNotFoundException e) {\n      return;\n    }\n    int n = sc.nextInt();\n    String tmp = sc.nextLine();\n    String res = \"\";\n    for (int i=1; i<=n; i++) {\n      int row = sc.nextInt();\n      int col = sc.nextInt();\n      int w = sc.nextInt();\n      int min = 0;\n\n      for (int j=0; j<row; j++) {\n        for (int k=0; k<col; k+=w) {\n           min++;\n        }\n      }\n\n      if (i != 1) res += \"\\n\";\n      res += \"Case #\" + i + \": \" + (min+w-1);\n    }\n    System.out.println(res);\n  }\n}\n", "idx": "3480"}
{"func": "package googlejam3.p482;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.LineNumberReader;\r\nimport java.io.PrintWriter;\r\nimport java.lang.Math.*;\r\n\r\npublic class R1cA {\r\n\r\npublic static void main(String args[]) throws Exception {\r\n\t\t\r\n\t\tString inFile = \"A-small-attempt0.in\";// path to input file \r\n\t\tString outFile =  \"outputA.txt\";\r\n\t\t\r\n\t\tLineNumberReader lin = new LineNumberReader(new InputStreamReader(new FileInputStream(inFile)));\r\n\t\tPrintWriter out = new PrintWriter(new File(outFile));\r\n\t\tint NCASE = Integer.parseInt(lin.readLine());\r\n\t\tfor(int CASE = 1; CASE <= NCASE; CASE++) {\r\n\t\t\tout.print(\"Case #\" + CASE + \": \");\r\n\t\t\tString l = lin.readLine();\r\n\t\t\tString  [] parts = l.split(\" \");\r\n\t\t\t\r\n\t\t\tint R = Integer.parseInt(parts[0]);\r\n\t\t\tint C = Integer.parseInt(parts[1]);\r\n\t\t\tint W = Integer.parseInt(parts[2]);\r\n\t\t\t\r\n\t\t\tint score=0;\r\n\t\t\tint m=0;\r\n\t\t\t\r\n\t\t\tif (C%W==0) m=0; else m=1;\r\n\t\t\t\r\n\t\t\tscore =  R*C/W + W - 1 + m;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tout.println(score);  // print result\r\n\t\t}\r\n\r\n\t\tlin.close();\r\n\t\tout.close();\r\n\t\r\n\t\t}\t\t\r\n}\r\n", "idx": "3482"}
{"func": "package googlejam3.p483;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\n\r\npublic class Problem1 {\r\n    public static void main(String[] args) {\r\n\ttry {\r\n\t    BufferedReader reader = new BufferedReader(new FileReader(\"A-small-attempt1.in\"));\n\t\tString line1 = null;\n\t\tList<String> lines1 = new ArrayList<String>();\n\t\twhile((line1 = reader.readLine()) != null) {\n\t\t    lines1.add(line1);\n\t\t}\n\t\treader.close();\n\t\tList<String> lines = lines1;\n\t\tList<String> outputLines = new ArrayList<String>();\n\t\tint index = 0;\n\t\tint testCases = Integer.parseInt(lines.get(index++));\n\t\tfor(int t = 0; t < testCases; t++) {\n\t\t    String line = lines.get(index++);\n\t\t    String tokens[] = line.split(\" \");\n\t\t    int R = Integer.parseInt(tokens[0]);\n\t\t    int C = Integer.parseInt(tokens[1]);\n\t\t    int W = Integer.parseInt(tokens[2]);\n\t\t    int count = 0;\n\t\t    if(C%W ==0) {\n\t\t\tcount = C/W-1;\n\t\t\tint x = W;\n\t\t\tcount = count + x;\n\t\t    }else {\n\t\t\tcount = C/W-1;\n\t\t\tint x = W+1;\n\t\t\tcount = count + x;\n\t\t    }\n\t\t    Object result = R * count;\n\t\t    String testCaseOutput = \"Case #\" + (t+1) + \": \" + result;\n\t\t    System.out.println(testCaseOutput);\n\t\t    outputLines.add(testCaseOutput);\n\t\t}\n\t\tStringBuilder strValue = new StringBuilder(\"\");\n\t\tif (outputLines != null) {\n\t\t    int i = 0;\n\t\t    for (Object v : outputLines) {\n\t\t\tString value = v.toString();\n\t\t\tif (i == 0) {\n\t\t\t    strValue.append(value);\n\t\t\t} else {\n\t\t\t    strValue.append(\"\\n\");\n\t\t\t    strValue.append(value);\n\t\t\t}\n\t\t\ti++;\n\t\t    }\n\t\t}\n\t\tString output = strValue.toString();\n\t\tFileWriter writer = new FileWriter(\"A-small-attempt1.in\".replace(\".in\", \".out\"));\n\t\twriter.write(output);\n\t\twriter.close();\r\n\t}catch(Exception ex) {\r\n\t    ex.printStackTrace();\r\n\t}\r\n    }\r\n\r\n\r\n}\r\n", "idx": "3483"}
{"func": "package googlejam3.p487;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayDeque;\nimport java.util.Collections;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.PriorityQueue;\n\npublic class Brattleship {\n\t\n\t\n\t\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"A-small-attempt0.out\"));\n\t\t\t\n\t\t\tint numCases = Integer.parseInt(br.readLine());\n\t\t\t\n\t\t\tint casectr = 1;\n\t\t\tfor (int c = 0; c < numCases; c++, casectr++) {\n\t\t\t\tString[] line = br.readLine().split(\" \");\n\t\t\t\tint row = Integer.parseInt(line[0]); // small: row = 1\n\t\t\t\tint col = Integer.parseInt(line[1]);\n\t\t\t\tint width = Integer.parseInt(line[2]);\n\t\t\t\t\n\t\t\t\tint res = 0;\n\t\t\t\tswitch (col) {\n\t\t\t\tcase 1:\n\t\t\t\t\tres = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tres = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tres = 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tswitch (width) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tres = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tres = 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tres = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tres = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tswitch (width) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tres = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tres = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tres = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tres = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tres = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tswitch (width) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tres = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tres = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tres = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 7:\n\t\t\t\t\tswitch (width) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tres = 7;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tres = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tres = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tres = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tres = 7;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tres = 7;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\tswitch (width) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tres = 8;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tres = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tres = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tres = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tres = 7;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tres = 8;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tres = 8;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 9:\n\t\t\t\t\tswitch (width) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tres = 9;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tres = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tres = 7;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tres = 8;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tres = 9;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tres = 9;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 10:\n\t\t\t\t\tswitch (width) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tres = 10;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tres = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 6:\n\t\t\t\t\t\tres = 7;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 7:\n\t\t\t\t\t\tres = 8;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\tres = 9;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tres = 10;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 10:\n\t\t\t\t\t\tres = 10;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tbw.write(\"Case #\" + casectr + \": \" + res);\n\t\t\t\tbw.newLine();\n\t\t\t}\n\t\t\t\n\t\t\tbr.close();\n\t\t\tbw.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (NumberFormatException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n\t\n}", "idx": "3487"}
{"func": "package googlejam3.p490;\nimport java.util.Scanner;\r\nimport java.util.Arrays;\r\nimport java.io.*;\r\n\r\npublic class Battleship {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        if (args.length != 1) {\r\n            System.out.println(\"Usage: java Battleship [inputFile]\");\r\n            System.exit(0);\r\n        }\r\n        String input = args[0];\r\n        Scanner scanner = new Scanner(new File(input));\r\n        PrintWriter out = new PrintWriter(input.substring(0, input.length()-3) + \".out\");\r\n        \r\n        int numCases = scanner.nextInt();\r\n        \r\n        for (int curCase = 1; curCase <= numCases; curCase++) {\r\n            int R = scanner.nextInt();\r\n            int C = scanner.nextInt();\r\n            int W = scanner.nextInt();\n\t\t\tint score = 0;\n\t\t\t\n\t\t\tint numOnRow = C / W;\n\t\t\tif (C % W != 0) {\n\t\t\t    numOnRow++;\n\t\t\t}\n\t\t\tscore += (R-1) * numOnRow;\n\t\t\t\n\t\t\tscore += C / W + (W-1);\n\t\t\tif (C % W != 0) {\n\t\t\t    score++;\n\t\t\t}\r\n            \r\n            int minScore = score;\r\n            \r\n            out.println(\"Case #\" + curCase + \": \" + minScore);\r\n        }\r\n        scanner.close();\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "3490"}
{"func": "package googlejam3.p492;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class P1\r\n{\r\n  public static void main (String[] args) throws Exception\r\n  {\r\n    Scanner in = new Scanner(new File(\"A-small-attempt0.in\"));\r\n    //Scanner in = new Scanner(System.in);\r\n    PrintWriter out = new PrintWriter(new FileWriter(\"out.txt\"));\r\n    int n = in.nextInt();\r\n    \r\n    for(int t =0; t<n; t++)\r\n    {\r\n      int r =  in.nextInt();\r\n      int c = in.nextInt();\r\n      int w = in.nextInt();\r\n      int answer = (int)(Math.ceil(c*1.0/w*1.0))-1+w;\r\n      answer *=r;\r\n      String ans = \"\"+answer;\r\n      out.println(\"Case #\" + (t+1) + \": \" + ans);\r\n      System.out.println(\"Case #\" + (t+1) + \": \" + ans);\r\n    }\r\n\r\n    in.close();\r\n    out.close();\r\n  }\r\n}", "idx": "3492"}
{"func": "package googlejam3.p493;\n//import java.io.BufferedReader;\r\n//import java.io.FileReader;\r\n//import java.io.IOException;\r\n//import java.io.InputStreamReader;\r\n//import java.io.PrintWriter;\r\n//\r\n//\r\n//public class Main {\r\n//\r\n//\tpublic static void main(String[]args) throws NumberFormatException, IOException{\r\n//\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n////\t\t BufferedReader br = new BufferedReader(new FileReader(\"input.in\"));\r\n////\t\t PrintWriter out = new PrintWriter(\"output.txt\");\r\n//\t\tint t = Integer.parseInt(br.readLine());\r\n//\t\t\r\n//\t\t\r\n//\t\tfor(int i = 0;i<t;i++){\r\n//\t\t\tlong n = Long.parseLong(br.readLine());\r\n//\t\t\tString curr = \"1\";\r\n//\t\t\tlong ans = 1;\r\n//\t\t\twhile(Long.parseLong(curr)<n){\r\n//\t\t\t\tStringBuffer temp = new StringBuffer(curr).reverse();\r\n//\t\t\t\tif(n-(Long.parseLong(curr)+1)>n-Long.parseLong(temp.toString()) && n-Long.parseLong(temp.toString())>=0){\r\n//\t\t\t\t\tcurr = temp.toString();\r\n//\t\t\t\t}else{\r\n//\t\t\t\t\tlong s0 = (Long.parseLong(curr)+1);\r\n//\t\t\t\t\tString s = \"\"+s0;\r\n//\t\t\t\t\tcurr = s;\r\n//\t\t\t\t}\r\n//\t\t\t\tSystem.out.println(curr);\r\n//\t\t\t\tans++;\r\n//\t\t\t}\r\n//\r\n//\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+ans);\r\n//\t\t\t\r\n//\t\t}\r\n//\t\t\r\n//\t\tbr.close();\r\n////\t\tout.close();\r\n//\t\t\r\n//\t}\r\n//\r\n//\r\n//}\r\n\r\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[]args) throws NumberFormatException, IOException{\r\n//\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t BufferedReader br = new BufferedReader(new FileReader(\"input.in\"));\r\n\t\t PrintWriter out = new PrintWriter(\"output.txt\");\r\n\t\tint t = Integer.parseInt(br.readLine());\r\n\t\t\r\n\t\t\r\n\t\tfor(int i = 0;i<t;i++){\r\n\t\t\tString[]in = br.readLine().split(\" \");\r\n\t\t\t\r\n\t\t\tint r = Integer.parseInt(in[0]);\r\n\t\t\tint c = Integer.parseInt(in[1]);\r\n\t\t\tint w = Integer.parseInt(in[2]);\r\n\t\t\tout.println(\"Case #\"+(i+1)+\": \"+(int)(Math.ceil((c*1.0/w)) - 1 + w)*r);\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tbr.close();\r\n\t\tout.close();\r\n\t\t\r\n\t}\r\n\r\n\r\n}\r\n\r\n", "idx": "3493"}
{"func": "package googlejam3.p500;\n\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author mainak\n */\npublic class ProbA {\n    public static void main(String[] arg) {\n        Scanner s = new Scanner(System.in);\n        int t = s.nextInt();\n        for(int i =1; i <= t; i++) {\n            int r = s.nextInt();\n            int c = s.nextInt();\n            int w = s.nextInt();\n            int ans = (c-1)/w + w;\n            System.out.println(\"Case #\" + i +\": \" + ans);\n        }\n    }\n}\n", "idx": "3500"}
{"func": "package googlejam3.p501;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Hashtable;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Battleship{\r\n\r\n\tpublic static void main (String[] args) throws FileNotFoundException{\r\n\t\tFile f1 = new File(\"1C-Ain\");\r\n\t\tFile f2 = new File(\"1C-Aout\");\r\n\t\t//Scanner read = new Scanner(f);\r\n\t\tScanner read = new Scanner(f1);\r\n\t\tPrintWriter write = new PrintWriter(f2);\r\n\t\tint limit = read.nextInt();\r\n\t\tfor (int l = 1; l <= limit; l++){\r\n\t\t\t//System.out.println(l);\r\n\t\t\tint r = read.nextInt();\r\n\t\t\tint c = read.nextInt();\r\n\t\t\tint w = read.nextInt();\r\n\t\t\tint total = w;\r\n\t\t\t//int rtot = (r - 1) / w;\r\n\t\t\t//int ctot = (c - 1) / w;\r\n\t\t\t//System.out.println((r - 1) / w);\r\n\t\t\t//System.out.println((c - 1) / w);\r\n\t\t\ttotal += (c - 1) / w * r;\r\n\t\t\tif (w == 1) total = r * c;\r\n\t\t\twrite.println(\"Case #\" + l + \": \" + total);\r\n\t\t}\r\n\t\twrite.close();\r\n\t}\r\n}\r\n", "idx": "3501"}
{"func": "package googlejam3.p506;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class A {\n\tpublic static void main(String[] args) throws NumberFormatException,\n\t\t\tIOException {\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(\"input.txt\"))) {\n\t\t\tint TC = Integer.parseInt(br.readLine());\n\t\t\tfor (int tc = 1; tc <= TC; tc++) {\n\t\t\t\tString[] line = br.readLine().split(\" \");\n\t\t\t\tint R = Integer.parseInt(line[0]);\n\t\t\t\tint C = Integer.parseInt(line[1]);\n\t\t\t\tint W = Integer.parseInt(line[2]);\n\n\t\t\t\tint ans = 0;\n\t\t\t\tif (C == W)\n\t\t\t\t\tans = W;\n\t\t\t\telse {\n\t\t\t\t\tif (C % W == 0)\n\t\t\t\t\t\tans += C / W - 1;\n\t\t\t\t\telse\n\t\t\t\t\t\tans += C / W;\n\n\t\t\t\t\tans += W;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Case #\" + tc + \": \" + ans);\n\t\t\t}\n\t\t}\n\t}\n}\n", "idx": "3506"}
{"func": "package googlejam3.p509;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.*;\n\n\npublic class _1A {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\t\tBufferedReader br = null;\n\t\t\tPrintWriter pw = new PrintWriter(\"output.txt\");\n\n\t\t\tString line;\n\t\t\tint maxCaseNum = 0;\n \n\t\t\tbr = new BufferedReader(new FileReader(\"input.txt\"));\n\t\t\tmaxCaseNum = Integer.valueOf(br.readLine());\n \n\t\t\tfor (int caseIdx = 1; caseIdx <= maxCaseNum; caseIdx++) {\n\t\t\t\t//String N = br.readLine();\n\t\t\t\tline = br.readLine();\n\t\t\t\tString[] array = line.split(\" \");\n\t\t\t\tint row = Integer.valueOf(array[0]);\n\t\t\t\tint col = Integer.valueOf(array[1]);\n\t\t\t\tint shipW = Integer.valueOf(array[2]);\n\t\t\t\tint ans = 0;\n\t\t\t\t\n\t\t\t\tif (col == shipW)\n\t\t\t\t\tans = row*col;\n\t\t\t\telse if (shipW == 1)\n\t\t\t\t\tans = row*col;\n\t\t\t\telse {\n\t\t\t\t\tif (col % shipW == 0) {\n\t\t\t\t\t\tans = ((col/shipW) + (shipW-1)) * row;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tans = ((col/shipW) + (shipW-1) + 1) * row;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tSystem.out.println(\"Case #\" + caseIdx + \": \" + ans);\n\t\t\t\t\n\t\t\t\tpw.println(\"Case #\" + caseIdx + \": \" + ans  );\n\n\t\t\t}\n\t\t\t\n\t\t\tbr.close();\n\t\t\tpw.close();\n\t\t\t\n\t\t\tSystem.out.println(\"Done\");\n\t\t\t\n\t\t\t\n\n\t}\n\n}\n", "idx": "3509"}
{"func": "package googlejam3.p510;\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        A algorithm = new A();\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        String testCaseNumber = scanner.nextLine();\r\n\r\n        int TEST_CASE_NUMBER = Integer.parseInt(testCaseNumber);\r\n\r\n        for (int testNumber = 1; testNumber <= TEST_CASE_NUMBER; testNumber++) {\r\n\r\n            String RCW = scanner.nextLine();\n\t\t\t\n\t\t\tint R = Integer.parseInt(RCW.split(\" \")[0]);\n\t\t\tint C = Integer.parseInt(RCW.split(\" \")[1]);\n\t\t\tint W = Integer.parseInt(RCW.split(\" \")[2]);\n\t\t\t\n\t\t\tint counter = 0;\n\t\t\tfor(int r = 0; r<R;r++) {\n\t\t\t    for (int c = 0; c < C; c++) {\n\t\t\t        if (c % W == 0) {\n\t\t\t            counter++;\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\tcounter = counter + W - 1;\n\t\t\tString answer = String.valueOf(counter);\r\n\r\n            System.out.println(\"Case #\" + testNumber + \": \" + answer);\r\n        }\r\n\r\n        scanner.close();\r\n    }\r\n\r\n}\r\n", "idx": "3510"}
{"func": "package googlejam3.p511;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Brattleship {\r\n\t\r\n    public static void main(String[] args) {\r\n    \tString root_path = \"C:/Vijay/Workspaces/GoogleCodeJam/\";\r\n    \tString fileName=root_path+\"inputFiles/2015/Brattleship/A-small-attempt0\";\r\n        \r\n        String inputFileName = fileName+\".in\";\r\n        String outputFileName = fileName+\"_out.txt\";\r\n\r\n        try (Scanner reader = new Scanner(new BufferedReader(new FileReader(inputFileName)));\r\n        \tBufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFileName), \"utf-8\"))){\r\n           \r\n            int T = reader.nextInt();\r\n            for(int caseN=1;caseN<=T;caseN++){\r\n            \tint R = reader.nextInt();\r\n            \tint C = reader.nextInt();\r\n            \tint W = reader.nextInt();\n\t\t\t\tint R1 = R;\n\t\t\t\tint result1=0;\n\t\t\t\tR1=1;\n\t\t\t\tint d=C-W;\n\t\t\t\t\n\t\t\t\tint a=0;\n\t\t\t\tif(d>0){\n\t\t\t\t\ta=d/W;\n\t\t\t\t\tint b=d%W;\n\t\t\t\t\tif(b>0)\n\t\t\t\t\t\ta++;\n\t\t\t\t}\n\t\t\t\tresult1=a+W;\r\n            \tint result = result1;\r\n                // write output\r\n                writer.write(\"Case #\"+caseN+\": \"+result);\r\n                writer.newLine();\r\n            }\r\n            \r\n        } catch (IOException ex) {\r\n            System.out.println(\"Exception:\"+ex.getMessage());\r\n        }\r\n        System.out.println(\"Done executing\");\r\n     }\r\n}\r\n\r\n", "idx": "3511"}
{"func": "package googlejam3.p518;\n\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass Main\r\n{\r\n\r\n    public static void main (String[] args) throws java.lang.Exception\r\n    {\r\n        // your code goes here\r\n        InputStream inputStream = new FileInputStream(\"D:\\\\test2.in\");\r\n        BufferedReader r = new BufferedReader (new InputStreamReader (inputStream));\r\n        int numtestcase=0;\r\n        //while (!(s=r.readLine()).startsWith(\"42\")) System.out.println(s);\r\n        numtestcase=Integer.parseInt(r.readLine());\r\n        for(int i=1;i<=numtestcase;i++)\r\n        {\r\n            String s=r.readLine();\r\n            String[] s1=s.split(\" \");\r\n            int R=Integer.parseInt(s1[0]);\r\n            int c=Integer.parseInt(s1[1]);\r\n            int w=Integer.parseInt(s1[2]);\r\n            int result=0;\r\n            if(w==1) result=R*c;\r\n            else\r\n            if(w==R*c) result=R*c;\r\n            else\r\n            if(c%w==0) result=c/w+w-1;\r\n            else {\r\n                int temp=c/w;\r\n                result = temp+w;\r\n            }\r\n            System.out.println(\"Case #\"+Integer.toString(i)+\": \"+Integer.toString(result));\r\n\r\n        }\r\n    }\r\n}", "idx": "3518"}
{"func": "package googlejam3.p519;\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\n/* Name of the class has to be \"Main\" only if the class is public. */\r\nclass CodeF\r\n{\r\n\tpublic static void main (String[] args) throws java.lang.Exception, IOException\r\n\t{\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tString str = br.readLine();\r\n\t\tint val = Integer.parseInt(str);\r\n\t\tint cnum = 1;\r\n\t\twhile((str=br.readLine()) != null)\r\n\t\t{\r\n\t\t\tString[] temp = str.split(\" \");\r\n\t\t\tint r = Integer.parseInt(temp[0]);\r\n\t\t\tint c = Integer.parseInt(temp[1]);\r\n\t\t\tint w = Integer.parseInt(temp[2]);\r\n\t\t\tint ans = 0;\r\n\t\t\tif (c%w == 0){ ans = ((c/w) + w - 1)*r; }\r\n\t\t\telse { ans = ((c/w) + w)*r; }\r\n\t\t\tSystem.out.println(\"Case #\"+cnum +\": \"+ans);\r\n\t\t\tcnum++;\r\n\t\t}\r\n\t}\r\n}", "idx": "3519"}
{"func": "package googlejam3.p520;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic class ASmall {\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader in = new BufferedReader(new FileReader(\"A-small-attempt1.in\"));\n\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(\"A-small-attempt1.out\"));\n\t\t\n\t\tString line = in.readLine();\n\t\tint n = Integer.parseInt(line);\n\t\tfor(int i=0; i<n; i++){\n\t\t\tline = in.readLine();\n\t\t\tString[] arr = line.split(\" \");\n\t\t\tint r = Integer.parseInt(arr[0]);\n\t\t\tint c = Integer.parseInt(arr[1]);\n\t\t\tint w = Integer.parseInt(arr[2]);\n\t\t\tlong min = 0;\n\t\t\t\n\t\t\tfor(int x = 0; x < r-1; x++){\n\t\t\t\tmin = min + (c/w);\n\t\t\t}\n\t\t\tif(c-w == 0){\n\t\t\t\tmin = min + w;\n\t\t\t}else if(c-w < w){\n\t\t\t\tmin = w + 1;\n\t\t\t}else{\n\t\t\t\tmin = (long) (min + Math.ceil((double)c/(double)w));\n\t\t\t\tmin = min + w - 1;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+(i+1)+\": \"+min+\"\\n\");\n\t\t\twriter.write(\"Case #\"+(i+1)+\": \"+min+\"\\n\");\n\t\t}\n\t\tin.close();\n\t\twriter.close();\n\t}\n}\n", "idx": "3520"}
{"func": "package googlejam3.p525;\nimport java.util.*;\nimport java.io.*;\n\npublic class A {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint numOfTests = sc.nextInt();\n\n\t\tfor (int i = 1; i < numOfTests + 1; i++) {\n\t\t\tint r = sc.nextInt();\n\t\t\tint c = sc.nextInt();\n\t\t\tint w = sc.nextInt();\n\t\t\tint val = 0;\n\n\t\t\tint div = c / w;\n\t\t\tif (c % w != 0) {\n\t\t\t\tdiv++;\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Case #\" + i + \": \" + (r*(div+w-1)));\n\n\t\t}\n\t}\n}", "idx": "3525"}
{"func": "package googlejam3.p526;\n\nimport java.util.*;\nimport java.util.regex.*;\nimport java.io.*;\nimport java.math.*;\nimport java.text.*;\n\npublic class a {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(a.class.getResourceAsStream(\"a-in.txt\"));\n        System.setOut(new PrintStream(\"src/a-out.txt\"));\n       \n        //Scanner in = new Scanner(System.in);\n        int testcases, testcase = 1;\n        testcases = in.nextInt();\n        while(testcase <= testcases) {\n            int r = in.nextInt(), c = in.nextInt(), w = in.nextInt();\n            int ans = (r - 1) * ((c - 1) / w + 1);\n            if(c > 2 * w - 1) {\n                ans += ((c - 1) / w + w);\n            } else if(c > w) {\n                ans += (w + 1);\n            } else {\n                ans += w;\n            }\n            //System.out.println(r + \" \" + c + \" \" + w);\n            System.out.println(\"Case #\" + testcase + \": \" + ans);\n            testcase++;\n        }\n    }\n\n}\n", "idx": "3526"}
{"func": "package googlejam3.p531;\nimport java.util.*;\nimport java.io.*;\npublic class A {\n\tpublic static void main(String... args) throws Exception{\n\t\t//Scanner input = new Scanner(new File(\"in.txt\"));\n\t\tScanner input = new Scanner(new File(\"A-small-attempt2.in\"));\n\t\tint numCases = input.nextInt();\n\t\t//Scanner sinput = new Scanner(System.in);\n\t\tSystem.setOut(new PrintStream(\"a2.out\"));//System.out.print\u306e\u51fa\u529b\u5148\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u5909\u3048\u308b\n\t\tfor (int n = 0; n < numCases; n++) {\n\t\t\t\tint r = input.nextInt();\n\t\t\t\tint c = input.nextInt();\n\t\t\t\tint w = input.nextInt();\n\t\t\t\t//System.out.println(\"r=\"+r+\" c=\"+c+\" w=\"+w);\n\t\t\t\t\n\t\t\t\tint num=0;\n\t\t\t\t\n\t\t\t\tif(r*c/w!=1){\n\t\t\t\t\tnum = (r*c)/w+w-1;\n\t\t\t\t\tif((r*c)%w!=0) num++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tnum = w+1;\n\t\t\t\t}\n\t\t\t\tif(num>r*c) num=r*c;\n\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", n + 1, num);\n\t\t}\n\t}\n}\n", "idx": "3531"}
{"func": "package googlejam3.p535;\nimport java.io.*;\r\nimport java.util.*;\r\npublic class ASecondThird {\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint T = Integer.parseInt(br.readLine());\r\n\t\tfor (int cases = 1; cases <= T; cases++) {\r\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\r\n\t\t\tint r = Integer.parseInt(st.nextToken());\r\n\t\t\tint c = Integer.parseInt(st.nextToken());\r\n\t\t\tint w = Integer.parseInt(st.nextToken());\r\n\t\t\tint ans = (int)( Math.ceil( r*c/(w*1.0) ) );\r\n\t\t    if (Math.min( r, c ) > 1) ans += Math.min( r, c);\r\n\t\t    ans += ( w-1 );\r\n\t\t    System.out.println(\"Case #\" + cases + \": \" + Math.min(ans, r*c));\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "3535"}
{"func": "package googlejam3.p541;\nimport java.io.*;\r\n\r\npublic class Prog\r\n{\r\n\tpublic static void main(String [] args)throws Exception\r\n\t{\r\n\t\tBufferedReader read = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint t = Integer.parseInt(read.readLine());\r\n\t\tint i=1;\r\n\t\twhile(i<=t)\r\n\t\t{\r\n\t\t\tString str = read.readLine();\r\n\t\t\tString [] arr = str.split(\" \");\r\n\t\t\tint r,c,w,ans=0;\r\n\t\t\tr = Integer.parseInt(arr[0]);\r\n\t\t\tc = Integer.parseInt(arr[1]);\r\n\t\t\tw = Integer.parseInt(arr[2]);\r\n\t\t\t\r\n\t\t\tif(c == w)\r\n\t\t\t{\r\n\t\t\t\tans = c;\r\n\t\t\t}\r\n\t\t\telse if(w==1)\r\n\t\t\t{\r\n\t\t\t\tans = c;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tans += c/w;\r\n\t\t\t\tif ( ans*w == c)\r\n\t\t\t\t{\r\n\t\t\t\t\tans--;\r\n\t\t\t\t}\r\n\t\t\t\tans += w;\r\n\t\t\t}\r\n\t\t\tans = ans * r;\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\"+i+\": \"+ans);\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "3541"}
{"func": "package googlejam3.p544;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(\"/Users/mesuterhanunal/Desktop/in.txt\"));\n            BufferedWriter bw = new BufferedWriter(new FileWriter(\"/Users/mesuterhanunal/Desktop/out.txt\"));\n\n            int testCase = Integer.parseInt(br.readLine());\n\n            for (int i = 0; i < testCase; i++) {\n                String [] line = br.readLine().split(\"\\\\s+\");\n                int R = Integer.parseInt(line[0]), C = Integer.parseInt(line[1]), W = Integer.parseInt(line[2]);\n\n                double Ratio = C / (1.00 * W);\n                int toAdd = (int) Math.ceil(Ratio), Try = 0;\n\n                Try = W + toAdd - 1;\n                Try *= R;\n\n                bw.write(\"Case #\" + (i+1) + \": \" + Try + \"\\n\");\n            }\n\n            br.close();\n            bw.close();\n        }\n\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": "3544"}
{"func": "package googlejam3.p546;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.io.Reader;\r\n\r\n\r\npublic class Brattleship {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tReader r = new InputStreamReader(System.in);\r\n\t\tBufferedReader b = new BufferedReader(r);\r\n\t\ttry {\r\n\t\t\t// get no. of testcases\r\n\t\t\tint testCaseNo = Integer.parseInt(b.readLine());\r\n\t\t\tint[] minCount = new int[testCaseNo];\r\n\t\t\tint index = 0;\r\n\t\t\twhile (testCaseNo != 0) {\r\n\t\t\t\tString StrList = b.readLine();\r\n\t\t\t\tString[] splitList = StrList.split(\" \");\r\n\t\t\t\tint n = Integer.parseInt(splitList[0]);\r\n\t\t\t\tint m = Integer.parseInt(splitList[1]);\r\n\t\t\t\tint w = Integer.parseInt(splitList[2]);\r\n\t\t\t\tif( n==1 && m==w){\r\n\t\t\t\t\tminCount[index] = w;\r\n\t\t\t\t}else if( w==1){\r\n\t\t\t\t\tminCount[index] = n*m;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tminCount[index] = (w+((m-w)/w)+((m-w)%w==0?0:1))+((n-1)*(m-w));\r\n\t\t\t\t}\r\n\t\t\t\tindex++;\r\n\t\t\t\ttestCaseNo--;\r\n\t\t\t}\r\n\r\n\t\t\tfor (int k = 0; k < minCount.length; k++) {\r\n\t\t\t\tSystem.out.println(\"Case #\" + (k + 1) + \": \"\r\n\t\t\t\t\t\t+ minCount[k]);\r\n\t\t\t}\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\tSystem.out.println(\"invalid inputs !!! \\n\"+ e.getMessage());\r\n\t\t} \r\n\r\n\t}\r\n\r\n}\r\n", "idx": "3546"}
{"func": "package googlejam3.p547;\nimport java.io.File;\r\nimport java.io.PrintStream;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by yatsynych on 10/05/2015.\r\n */\r\npublic class A1 {\r\n    private static String _inputPath = \"c:\\\\temp\\\\competition\\\\A1.in\";\r\n    private static String _outputPath = \"c:\\\\temp\\\\competition\\\\A1.out\";\r\n\r\n    public static void main(String[] args) {\r\n        Scanner input = null;\n\t\tPrintStream output = null;\n\t\ttry {\n\t\t    input = new Scanner(new File(_inputPath));\n\t\t    output = new PrintStream(_outputPath);\n\t\t\n\t\t    int numberOfTestCases = input.nextInt();\n\t\t    for (int i = 0; i < numberOfTestCases; ++i){\n\t\t        int R = input.nextInt();\n\t\t        int C = input.nextInt();\n\t\t        int W = input.nextInt();\n\t\t\n\t\t        if (W == 1) {\n\t\t            String resultString = String.format(\"Case #%d: %d\", i + 1, R * C);\n\t\t            output.println(resultString);\n\t\t            continue;\n\t\t        }\n\t\t\n\t\t        int score = (C / W) > 1 ? (C / W * R) - 1 : 0;\n\t\t        score += ((C % W) == 0) ? W : W + 1;\n\t\t\n\t\t        String resultString = String.format(\"Case #%d: %d\", i + 1, score);\n\t\t        output.println(resultString);\n\t\t    }\n\t\t}\n\t\tcatch (Exception e) {\n\t\t    e.printStackTrace();\n\t\t} finally {\n\t\t    if (input != null) {\n\t\t        input.close();\n\t\t    }\n\t\t\n\t\t    if (output != null) {\n\t\t        output.close();\n\t\t    }\n\t\t}\r\n    }\r\n}\r\n", "idx": "3547"}
{"func": "package googlejam3.p549;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\npublic class A\r\n{\r\n\tpublic static void main(String [] args) throws Exception\r\n\t{\r\n\t\tScanner inScan = new Scanner(System.in);\r\n\t\tSystem.out.println(\"Enter the filename\");\r\n\t\tString filename = inScan.nextLine();\r\n\t\tBufferedReader b = new BufferedReader(new FileReader(filename));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"out.txt\")));\r\n\r\n\t\tint numExamples = Integer.parseInt(b.readLine());\r\n\t\tfor(int i = 0; i < numExamples; i++)\r\n\t\t{\r\n\t\t\tString[] line = b.readLine().split(\" \");\r\n\t\t\tint r = Integer.parseInt(line[0]);\r\n\t\t\tint c = Integer.parseInt(line[1]);\r\n\t\t\tint w = Integer.parseInt(line[2]);\r\n\t\t\tint numPerRow = (int)Math.ceil((double)c/(double)w);\r\n\t\t\tint total = numPerRow*r;\r\n\t\t\ttotal = total + w-1;\r\n\t\t\t\r\n\t\t\tout.print(\"Case #\" + (i+1) + \": \" + total);\r\n\t\t\tif(i != numExamples-1)\r\n\t\t\t\tout.println();\r\n\t\t\tout.flush();\r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t}\r\n\t\r\n\t\r\n}", "idx": "3549"}
{"func": "package googlejam3.p551;\n// Template by fikr\r\n// Google Code Jam Round 1A 2015\r\n// Problem ...........\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Bratteship{\r\n    //static String filename = \"file\";\r\n    static String filename = \"A-small-attempt2\";\t// io filnename here\r\n    static String inname = filename + \".in\";    \r\n    static String outname = filename + \".out\";  \r\n    static int n;\r\n    public static void main(String[] args){\r\n        try{\r\n            Scanner in = new Scanner(new BufferedReader(new FileReader(inname)));\r\n            //Scanner in = new Scanner(System.in);\r\n            BufferedWriter out = new BufferedWriter(new FileWriter(outname));\r\n            int t = in.nextInt();\r\n            in.nextLine();\r\n            for (int cas = 1; cas <= t; cas++){\r\n            \t//String ans = \"\";\r\n                //String g = in.nextLine();\r\n                \r\n                int r = in.nextInt();\r\n                int c = in.nextInt();\r\n                int saize = in.nextInt();\r\n                \r\n                \r\n                int ans = 0;\r\n                \r\n                ans += c/saize;\r\n                ans *= r;\r\n                if ((c%saize!=0)&&(saize!=r)) ans += 1;\r\n                ans += saize - 1;\r\n                \r\n                //System.out.print(\"Case #\" + cas + \": \" + ans + \"\\n\");\r\n                out.write(\"Case #\" + cas + \": \" + ans + \"\\n\");\r\n            }\r\n            in.close();\r\n            out.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}", "idx": "3551"}
{"func": "package googlejam3.p554;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\n\r\npublic class Q8 {\r\n\tpublic static void main(String args[]) throws IOException{\r\n\t\tString co;\r\n\t\tString str[];\r\n\t\tint n,ans,r,c,w;\r\n\t\tFile f = new File(\"C:\\\\file\\\\code jam\\\\q1.txt\");\t\t\t\t\t\r\n\t\tFileInputStream fi = new FileInputStream(f) ;\r\n\t\tBufferedReader br= new BufferedReader(new InputStreamReader(fi));\r\n\t\tFile fa = new File(\"C:\\\\file\\\\code jam\\\\ans1.txt\");\r\n\t\tFileOutputStream fo = new FileOutputStream(fa) ;\r\n\t\tBufferedWriter bw= new BufferedWriter(new OutputStreamWriter(fo));\r\n\t\t\tn=Integer.parseInt(br.readLine());\t\r\n\t\t\tfor(int i=1;i<=n;i++){\r\n\t\t\t\tstr=br.readLine().split(\" \");\r\n\t\t\t\tr=Integer.parseInt(str[0]);\r\n\t\t\t\tc=Integer.parseInt(str[1]);\r\n\t\t\t\tw=Integer.parseInt(str[2]);\t\t\t\t\r\n\t\t\t\tfloat mid=(float)c/(float)w;\r\n\t\t\t\t//System.out.println(\"\"+mid);\r\n\t\t\t\tmid=(float) Math.ceil(mid);\r\n\t\t\t\t//System.out.println(\"\"+mid);\r\n\t\t\t\tif(w==c){\r\n\t\t\t\t\tans=w;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tans=(int) (mid+w-1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(\"Case #\"+i+\": \"+ans);\r\n\t\t\t\tbw.write(\"Case #\"+i+\": \"+ans);\r\n\t\t\t\tbw.newLine();\r\n\t\t\t}\t\t\t\r\n\t\t\tbw.close();\t\t\r\n\t\t}\r\n\t}\r\n\r\n", "idx": "3554"}
{"func": "package googlejam3.p555;\nimport java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Problem1 {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\tScanner scan = new Scanner(System.in);\r\n\tBufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\r\n\tint T = scan.nextInt();\r\n\tfor(int i11=1;i11<=T;i11++){\r\n\t\tint r = scan.nextInt(),c=scan.nextInt(),w=scan.nextInt();\r\n\t\tout.write(\"Case #\"+i11+\": \"+getAns(r,c,w)+\"\\n\");\r\n\t}\r\n\tscan.close();\r\n\tout.close();}\r\n\r\n\tprivate static int getAns(int a, int c, int w) {\r\n\t\tint firstHit = 1+(int)(c-1)/w;\r\n\t\treturn firstHit+w-1;\r\n\t}\r\n\r\n}\r\n", "idx": "3555"}
{"func": "package googlejam3.p556;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n//writer.print(\"Case #\"+(i+1)+\": \");\r\n//writer.close();\r\nclass jam3{\r\n\tpublic static void main(String [] abb){\r\n\t\ttry{\r\n\t\t\tScanner in = new Scanner(new File(\"safia.in\"));\r\n\t\t\tPrintWriter writer = new PrintWriter(\"out2.in\", \"UTF-8\");\r\n\t\t\t\r\n\t\t\tint testcase = in.nextInt();\r\n\t\t\t\r\n\t\t\tfor(int q=0;q<testcase;q++){\r\n\t\t\t\tint r= in.nextInt();\r\n\t\t\t\tint c = in.nextInt();\r\n\t\t\t\tint w = in.nextInt();\r\n\t\t\t\tint e= c%w;\r\n\t\t\t\tint out=0;\r\n\t\t\t\t//if(e==w-1)\r\n\t\t\t\t out =(c/w)+w;\r\n\t\t\t\t\r\n\t\t\t\t//System.out.println(out+\" \"+e);\r\n\t\t\t\t//if(c/)\r\n\t\t\t\tif(w==1){\r\n\t\t\t\t\tout =c;\r\n\t\t\t\t\t\r\n\t\t\t\t}else{\r\n\t\t\t\tout =(c/w)+w;\r\n\t\t\t\tif(c%w==0){\r\n\t\t\t\t\tout--;\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\twriter.println(\"Case #\"+(q+1)+\": \"+out);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\twriter.close();\r\n\t\t}catch(IOException e){\r\n\t\t\t\r\n\t\t\t}\r\n\t}\r\n}", "idx": "3556"}
{"func": "package googlejam3.p563;\nimport java.util.*;\r\nclass Battle\r\n{\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tint t = input.nextInt();\r\n\t\tString output=\"\";\r\n\t\tfor(int i=1;i<=t;i++)\r\n\t\t{\r\n\t\t\tint result=0;\r\n\t\t\tint count=1;\r\n\t\t\tint r=input.nextInt();\r\n\t\t\tint c=input.nextInt();\r\n\t\t\tint w=input.nextInt();\r\n\t\t\t// int combi = (r-c+1)*x;\r\n\t\t\t// if(r==c)\r\n\t\t\t// \tresult=c+x-1;\r\n\t\t\t// else\r\n\t\t\t// \tresult=c+combi-(r-c);\r\n\t\t\twhile(count<=c)\r\n\t\t\t{\r\n\t\t\t\tresult+=1;\r\n\t\t\t\tcount+=w;\r\n\t\t\t}\r\n\t\t\tresult+=w-1;\r\n\t\t\tresult*=r;\r\n\t\t\toutput+=\"Case #\"+i+\": \"+result+\"\\n\";\t\t\t\r\n\t\t}\r\n\t\tSystem.out.print(output);\r\n\t}\r\n}", "idx": "3563"}
{"func": "package googlejam4.p099;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\n\n\npublic class Gcj1 {\n\tstatic final char LEFT = '<', RIGHT = '>', DOWN = 'v', UP = '^', DOT = '.';\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"output1.txt\"));\n\t\tint nrT = Integer.parseInt(br.readLine());\n\n\t\tfor (int testNr = 1; testNr <= nrT; testNr++) {\n\t\t\tString[] strs = br.readLine().split(\" \");\n\t\t\tint r = Integer.parseInt(strs[0]);\n\t\t\tint c = Integer.parseInt(strs[1]);\n\t\t\tint[][] map = new int[r][c];\n\t\t\tfor (int i = 0; i < map.length; i++) {\n\t\t\t\tString str = br.readLine();\n\t\t\t\tfor (int j = 0; j < c; j++) {\n\t\t\t\t\tmap[i][j] = str.charAt(j);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tboolean impossibleCase = false;\n\t\t\tfor (int i = 0; i < map.length && !impossibleCase; i++) {\n\t\t\t\tfor (int j = 0; j < map[i].length && !impossibleCase; j++) {\n\t\t\t\t\tif (map[i][j] == DOT) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tboolean isOk = false;\n\t\t\t\t\tfor (int k = 0; k < map.length; k++) {\n\t\t\t\t\t\tif (k == i) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (map[k][j] != DOT) {\n\t\t\t\t\t\t\tisOk = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (isOk) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int k = 0; k < map[0].length; k++) {\n\t\t\t\t\t\tif (k == j) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (map[i][k] != DOT) {\n\t\t\t\t\t\t\tisOk = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!isOk) {\n\t\t\t\t\t\timpossibleCase = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (impossibleCase) {\n\t\t\t\tpw.println(\"Case #\" + testNr + \": IMPOSSIBLE\");\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tint res = 0;\n\t\t\tfor (int i = 0; i < map.length && !impossibleCase; i++) {\n\t\t\t\tfor (int j = 0; j < map[i].length && !impossibleCase; j++) {\n\t\t\t\t\tif (map[i][j] == DOT) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tboolean needsChange = true;\n\t\t\t\t\tif (map[i][j] == RIGHT) {\n\t\t\t\t\t\tfor (int k = j + 1; k < map[i].length; k++) {\n\t\t\t\t\t\t\tif (map[i][k] != DOT) {\n\t\t\t\t\t\t\t\tneedsChange = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (map[i][j] == LEFT) {\n\t\t\t\t\t\tfor (int k = 0; k < j; k++) {\n\t\t\t\t\t\t\tif (map[i][k] != DOT) {\n\t\t\t\t\t\t\t\tneedsChange = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (map[i][j] == UP) {\n\t\t\t\t\t\tfor (int k = 0; k < i; k++) {\n\t\t\t\t\t\t\tif (map[k][j] != DOT) {\n\t\t\t\t\t\t\t\tneedsChange = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (map[i][j] == DOWN) {\n\t\t\t\t\t\tfor (int k = i + 1; k < map.length; k++) {\n\t\t\t\t\t\t\tif (map[k][j] != DOT) {\n\t\t\t\t\t\t\t\tneedsChange = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (needsChange) {\n\t\t\t\t\t\tres++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpw.println(\"Case #\" + testNr + \": \" + res);\n\t\t}\n\t\tbr.close();\n\t\tpw.close();\n\n\t\tSystem.out.println(\"done!\");\n\t}\n}\n", "idx": "4099"}
{"func": "package googlejam4.p007;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class A {\n\t\n\tPrintWriter out;\n\t\n\tint R, C;\n\tchar[][] cs;\n\t\n\tchar[] D = {'^', '<', 'v', '>'};\n\tint[] dx = {1, 0, -1, 0}, dy = {0, 1, 0, -1};\n\t\n\tpublic static int __ID = 0;\n\tpublic static boolean __ERROR = false;\n\t\n\tpublic static void main(String[] args) {\n\t\tint pN = 1;\n\t\tif (args.length == 0) {\n\t\t\ttry {\n\t\t\t\tSystem.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + \".in\")));\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t} else {\n\t\t\tpN = Integer.parseInt(args[0]);\n\t\t}\n\t\tPrintStream out = System.out;\n\t\tSystem.setOut(null);\n\t\tScanner sc = new Scanner(System.in);\n\t\tfinal int caseN = sc.nextInt();\n\t\tfinal A[] solvers = new A[caseN];\n\t\tStringWriter[] outs = new StringWriter[caseN];\n\t\tfor (int i = 0; i < caseN; i++) {\n\t\t\tsolvers[i] = new A();\n\t\t\touts[i] = new StringWriter();\n\t\t\tsolvers[i].out = new PrintWriter(outs[i]);\n\t\t\tsolvers[i].out.printf(\"Case #%d: \", i + 1);\n\t\t\tA r = solvers[i];\n\t\t\tr.R = sc.nextInt();\n\t\t\tr.C = sc.nextInt();\n\t\t\tr.cs = new char[r.R][];\n\t\t\tfor (int i1 = 0; i1 < r.R; i1++) r.cs[i1] = sc.next().toCharArray();\n\t\t}\n\t\tThread[] ts = new Thread[pN];\n\t\tfor (int i = 0; i < pN; i++) {\n\t\t\tts[i] = new Thread() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor (;;) {\n\t\t\t\t\t\tint id;\n\t\t\t\t\t\tsynchronized (A.class) {\n\t\t\t\t\t\t\tif (__ID == caseN) return;\n\t\t\t\t\t\t\tid = __ID++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tA r = solvers[id];\n\t\t\t\t\t\t\tboolean[][][] dame = new boolean[r.R][r.C][4];\n\t\t\t\t\t\t\tfor (int d = 0; d < 4; d++) {\n\t\t\t\t\t\t\t\tfor (int i = 0; i < r.R; i++) {\n\t\t\t\t\t\t\t\t\tfor (int j = 0; j < r.C; j++) {\n\t\t\t\t\t\t\t\t\t\tint i1 = i - r.dx[d];\n\t\t\t\t\t\t\t\t\t\tint i2 = j - r.dy[d];\n\t\t\t\t\t\t\t\t\t\tif ((i == 0 || i == r.R - 1 || j == 0 || j == r.C - 1) && (!(0 <= i1 && i1 <= r.R - 1) || !(0 <= i2 && i2 <= r.C - 1))) {\n\t\t\t\t\t\t\t\t\t\t\tint x = i, y = j;\n\t\t\t\t\t\t\t\t\t\t\twhile (0 <= x && x <= r.R - 1 && 0 <= y && y <= r.C - 1) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (r.cs[x][y] != '.') {\n\t\t\t\t\t\t\t\t\t\t\t\t\tdame[x][y][d] = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tx += r.dx[d];\n\t\t\t\t\t\t\t\t\t\t\t\ty += r.dy[d];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tint res = 0;\n\t\t\t\t\t\t\tboolean impossible = false;\n\t\t\t\t\t\t\tfor (int i = 0; i < r.R; i++) {\n\t\t\t\t\t\t\t\tfor (int j = 0; j < r.C; j++) if (r.cs[i][j] != '.') {\n\t\t\t\t\t\t\t\t\tboolean ok = true, can = false;\n\t\t\t\t\t\t\t\t\tfor (int k = 0; k < 4; k++) {\n\t\t\t\t\t\t\t\t\t\tif (r.cs[i][j] == r.D[k] && dame[i][j][k]) ok = false;\n\t\t\t\t\t\t\t\t\t\tif (!dame[i][j][k]) can = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!ok) res++;\n\t\t\t\t\t\t\t\t\tif (!can) impossible = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (impossible) r.out.println(\"IMPOSSIBLE\");\n\t\t\t\t\t\t\telse r.out.println(res);\n\t\t\t\t\t\t} catch (RuntimeException e) {\n\t\t\t\t\t\t\t__ERROR = true;\n\t\t\t\t\t\t\tSystem.err.printf(\"Error in case %d:%n\", id + 1);\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsolvers[id].out.flush();\n\t\t\t\t\t\tsolvers[id] = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tts[i].start();\n\t\t}\n\t\tfor (int i = 0; i < pN; i++) {\n\t\t\ttry {\n\t\t\t\tts[i].join();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < caseN; i++) {\n\t\t\tout.print(outs[i].toString());\n\t\t}\n\t\tif (__ERROR) out.printf(\"%nError occured!!!%n\");\n\t}\n\t\n}\n", "idx": "4007"}
{"func": "package googlejam4.p015;\nimport java.util.*;\nimport static java.lang.Math.*;\n\npublic class A {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\nnextcase:\n        for (int zz = 1; zz <= T; zz++) {\n            int R = in.nextInt();\n            int C = in.nextInt();\n            int[][] G = new int[R][C];\n            for (int i = 0; i < R; i++) {\n                String S = in.next();\n                for (int j = 0; j < C; j++) {\n                    char c = S.charAt(j);\n                    if (c == '.')\n                        G[i][j] = EMPTY;\n                    else if (c == '<')\n                        G[i][j] = LEFT;\n                    else if (c == '>')\n                        G[i][j] = RIGHT;\n                    else if (c == 'v')\n                        G[i][j] = DOWN;\n                    else if (c == '^')\n                        G[i][j] = UP;\n                }\n            }\n            int ans = 0;\n            for (int r = 0; r < R; r++) {\n                for (int c = 0; c < C; c++) {\n                    if (G[r][c] == EMPTY)\n                        continue;\n                    boolean[] ok = new boolean[4];\n                    boolean any = false;\n                    for (int d = 0; d < 4; d++) {\n                        int nr = r + dr[d];\n                        int nc = c + dc[d];\n                        ok[d] = false;\n                        while (0 <= nr && nr < R && 0 <= nc && nc < C) {\n                            if (G[nr][nc] != EMPTY) {\n                                ok[d] = true;\n                                any = true;\n                                break;\n                            }\n                            nr += dr[d];\n                            nc += dc[d];\n                        }\n                    }\n                    if (!any) {\n                        System.out.format(\"Case #%d: IMPOSSIBLE\\n\", zz);\n                        continue nextcase;\n                    }\n                    if (!ok[G[r][c]-1]) {\n                        ans++;\n                    }\n                }\n            }\n            System.out.format(\"Case #%d: %d\\n\", zz, ans);\n        }\n    }\n    static int[] dr = {-1, 0, 1, 0};\n    static int[] dc = {0, -1, 0, 1};\n    static int EMPTY = 0;\n    static int UP = 1;\n    static int LEFT = 2;\n    static int DOWN = 3;\n    static int RIGHT = 4;\n}\n", "idx": "4015"}
{"func": "package googlejam4.p044;\n\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class Main{\r\n\tstatic boolean[][] hashLeft;\r\n\tstatic boolean[][] hashRight;\r\n\tstatic boolean[][] hashUp;\r\n\tstatic boolean[][] hashDown;\r\n\tstatic char[][] map;\r\n\tpublic static void main(String[] args){\r\n\t\tScanner sc=new Scanner(System.in);\r\n\t\tint T=sc.nextInt();\r\n\t\tfor (int t=1;t<=T;t++){\r\n\t\t\tint r=sc.nextInt();\r\n\t\t\tint c=sc.nextInt();\r\n\t\t\tsc.nextLine();\r\n\t\t\thashLeft=new boolean[r][c];\r\n\t\t\thashRight=new boolean[r][c];\r\n\t\t\thashUp=new boolean[r][c];\r\n\t\t\thashDown=new boolean[r][c];\r\n\t\t\tmap=new char[r][c];\r\n\t\t\tfor (int i=0;i<r;i++){\r\n\t\t\t\tString temp=sc.nextLine();\t\t\t\t\t\t\r\n\t\t\t\tfor (int j=0;j<c;j++){\r\n\t\t\t\t\tmap[i][j]=temp.charAt(j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (int i=0;i<r;i++){\r\n\t\t\t\tfor (int j=1;j<c;j++){\r\n\t\t\t\t\tif (hashLeft[i][j-1]){\r\n\t\t\t\t\t\thashLeft[i][j]=true;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif (map[i][j-1]!='.'){\r\n\t\t\t\t\t\t\thashLeft[i][j]=true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int i=1;i<r;i++){\r\n\t\t\t\tfor (int j=0;j<c;j++){\r\n\t\t\t\t\tif (hashUp[i-1][j]){\r\n\t\t\t\t\t\thashUp[i][j]=true;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif (map[i-1][j]!='.'){\r\n\t\t\t\t\t\t\thashUp[i][j]=true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int i=0;i<r;i++){\r\n\t\t\t\tfor (int j=c-2;j>=0;j--){\r\n\t\t\t\t\tif (hashRight[i][j+1]){\r\n\t\t\t\t\t\thashRight[i][j]=true;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif (map[i][j+1]!='.'){\r\n\t\t\t\t\t\t\thashRight[i][j]=true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int i=r-2;i>=0;i--){\r\n\t\t\t\tfor (int j=0;j<c;j++){\r\n\t\t\t\t\tif (hashDown[i+1][j]){\r\n\t\t\t\t\t\thashDown[i][j]=true;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif (map[i+1][j]!='.'){\r\n\t\t\t\t\t\t\thashDown[i][j]=true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint ans=0;\r\n\t\t\t\r\n\t\t\tboolean find=false;\r\n\t\t\tlabel:\r\n\t\t\tfor (int i=0;i<r;i++){\r\n\t\t\t\tfor (int j=0;j<c;j++){\r\n\t\t\t\t\tchar cc=map[i][j];\r\n\t\t\t\t\tif (cc=='.'){\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (cc=='>'){\r\n\t\t\t\t\t\tif (hashRight[i][j]){\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (hashLeft[i][j]||hashUp[i][j]||hashDown[i][j]){\r\n\t\t\t\t\t\t\tans++;\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tfind=true;\r\n\t\t\t\t\t\t\tbreak label;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (cc=='<'){\r\n\t\t\t\t\t\tif (hashLeft[i][j]){\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (hashRight[i][j]||hashUp[i][j]||hashDown[i][j]){\r\n\t\t\t\t\t\t\tans++;\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tfind=true;\r\n\t\t\t\t\t\t\tbreak label;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (cc=='v'){\r\n\t\t\t\t\t\tif (hashDown[i][j]){\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (hashLeft[i][j]||hashUp[i][j]||hashRight[i][j]){\r\n\t\t\t\t\t\t\tans++;\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tfind=true;\r\n\t\t\t\t\t\t\tbreak label;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (cc=='^'){\r\n\t\t\t\t\t\tif (hashUp[i][j]){\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (hashLeft[i][j]||hashDown[i][j]||hashRight[i][j]){\r\n\t\t\t\t\t\t\tans++;\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tfind=true;\r\n\t\t\t\t\t\t\tbreak label;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (find){\r\n\t\t\t\tSystem.out.println(\"Case #\"+t+\": IMPOSSIBLE\");\r\n\t\t\t}else{\r\n\t\t\t\tSystem.out.println(\"Case #\"+t+\": \"+ans);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "4044"}
{"func": "package googlejam4.p045;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n\npublic class Main {\n\n\tstatic int r ;\n\tstatic int c;\n\tpublic static void main(String[] args) {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tBufferedOutputStream bos = new BufferedOutputStream(System.out);\n\t\tString eol = System.getProperty(\"line.separator\");\n\t\tbyte[] eolb = eol.getBytes();\n\t\ttry {\n\t\t\tString str = br.readLine();\n\t\t\tint t = Integer.parseInt(str);\n\t\t\tfor(int i = 0 ; i < t ; i++) {\n\t\t\t\tint ans = 0;\n\t\t\t\tstr = br.readLine();\n\t\t\t\tint blank = str.indexOf(\" \");\n\t\t\t\tr = Integer.parseInt(str.substring(0, blank));\n\t\t\t\tc = Integer.parseInt(str.substring(blank+1));\n\t\t\t\tchar[][]ar = new char[r][c];\n\t\t\t\tfor(int j = 0 ; j < r ; j++) {\n\t\t\t\t\tstr = br.readLine();\n\t\t\t\t\tar[j] = str.toCharArray();\n\t\t\t\t}\n\t\t\t\tboolean impos = false;\n\t\t\t\tboolean val = false;\n\t\t\t\tint row = 0;\n\t\t\t\tint col = 0;\n\t\t\t\tfor(int j = 0 ; j < r ; j++) {\n\t\t\t\t\tfor(int k = 0 ; k < c ; k++) {\n\t\t\t\t\t\tswitch(ar[j][k]) {\n\t\t\t\t\t\tcase '^' :\n\t\t\t\t\t\t\trow = j-1;\n\t\t\t\t\t\t\tif(row>=0) {\n\t\t\t\t\t\t\t\twhile(ar[row][k]=='.') {\n\t\t\t\t\t\t\t\t\trow--;\n\t\t\t\t\t\t\t\t\tif(row<0) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(row<0) {\n\t\t\t\t\t\t\t\tans++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tboolean ans1 = true;\n\t\t\t\t\t\t\tfor(int a = 0 ; a < j ; a++) {\n\t\t\t\t\t\t\t\tif(ar[a][k]!='.') {\n\t\t\t\t\t\t\t\t\tans1 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = 0 ; a < k ; a++) {\n\t\t\t\t\t\t\t\tif(ar[j][a]!='.') {\n\t\t\t\t\t\t\t\t\tans1 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = j+1 ; a < r ; a++) {\n\t\t\t\t\t\t\t\tif(ar[a][k]!='.') {\n\t\t\t\t\t\t\t\t\tans1 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = k+1 ; a < c ; a++) {\n\t\t\t\t\t\t\t\tif(ar[j][a]!='.') {\n\t\t\t\t\t\t\t\t\tans1 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tval = ans1;\n\t\t\t\t\t\t\tif(val==true){\n\t\t\t\t\t\t\t\timpos= true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '<' :\n\t\t\t\t\t\t\tcol = k-1;\n\t\t\t\t\t\t\tif(col>=0) {\n\t\t\t\t\t\t\t\twhile(ar[j][col]=='.') {\n\t\t\t\t\t\t\t\t\tcol--;\n\t\t\t\t\t\t\t\t\tif(col<0) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(col<0) {\n\t\t\t\t\t\t\t\tans++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tboolean ans2 = true;\n\t\t\t\t\t\t\tfor(int a = 0 ; a < j ; a++) {\n\t\t\t\t\t\t\t\tif(ar[a][k]!='.') {\n\t\t\t\t\t\t\t\t\tans2 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = 0 ; a < k ; a++) {\n\t\t\t\t\t\t\t\tif(ar[j][a]!='.') {\n\t\t\t\t\t\t\t\t\tans2 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = j+1 ; a < r ; a++) {\n\t\t\t\t\t\t\t\tif(ar[a][k]!='.') {\n\t\t\t\t\t\t\t\t\tans2 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = k+1 ; a < c ; a++) {\n\t\t\t\t\t\t\t\tif(ar[j][a]!='.') {\n\t\t\t\t\t\t\t\t\tans2 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tval = ans2;\n\t\t\t\t\t\t\tif(val==true){\n\t\t\t\t\t\t\t\timpos= true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '>' :\n\t\t\t\t\t\t\tcol = k+1;\n\t\t\t\t\t\t\tif(col<c) {\n\t\t\t\t\t\t\t\twhile(ar[j][col]=='.') {\n\t\t\t\t\t\t\t\t\tcol++;\n\t\t\t\t\t\t\t\t\tif(col>=c) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(col>=c) {\n\t\t\t\t\t\t\t\tans++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tboolean ans3 = true;\n\t\t\t\t\t\t\tfor(int a = 0 ; a < j ; a++) {\n\t\t\t\t\t\t\t\tif(ar[a][k]!='.') {\n\t\t\t\t\t\t\t\t\tans3 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = 0 ; a < k ; a++) {\n\t\t\t\t\t\t\t\tif(ar[j][a]!='.') {\n\t\t\t\t\t\t\t\t\tans3 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = j+1 ; a < r ; a++) {\n\t\t\t\t\t\t\t\tif(ar[a][k]!='.') {\n\t\t\t\t\t\t\t\t\tans3 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = k+1 ; a < c ; a++) {\n\t\t\t\t\t\t\t\tif(ar[j][a]!='.') {\n\t\t\t\t\t\t\t\t\tans3 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tval = ans3;\n\t\t\t\t\t\t\tif(val==true){\n\t\t\t\t\t\t\t\timpos= true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'v' :\n\t\t\t\t\t\t\trow = j+1;\n\t\t\t\t\t\t\tif(row<r) {\n\t\t\t\t\t\t\t\twhile(ar[row][k]=='.') {\n\t\t\t\t\t\t\t\t\trow++;\n\t\t\t\t\t\t\t\t\tif(row>=r) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(row>=r) {\n\t\t\t\t\t\t\t\tans++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tboolean ans4 = true;\n\t\t\t\t\t\t\tfor(int a = 0 ; a < j ; a++) {\n\t\t\t\t\t\t\t\tif(ar[a][k]!='.') {\n\t\t\t\t\t\t\t\t\tans4 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = 0 ; a < k ; a++) {\n\t\t\t\t\t\t\t\tif(ar[j][a]!='.') {\n\t\t\t\t\t\t\t\t\tans4 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = j+1 ; a < r ; a++) {\n\t\t\t\t\t\t\t\tif(ar[a][k]!='.') {\n\t\t\t\t\t\t\t\t\tans4 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int a = k+1 ; a < c ; a++) {\n\t\t\t\t\t\t\t\tif(ar[j][a]!='.') {\n\t\t\t\t\t\t\t\t\tans4 = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tval = ans4;\n\t\t\t\t\t\t\tif(val==true){\n\t\t\t\t\t\t\t\timpos= true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '.' :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbos.write(\"Case #\".getBytes());\n\t\t\t\tbos.write(new Integer(i+1).toString().getBytes());\n\t\t\t\tbos.write(\": \".getBytes());\n\t\t\t\tif(impos) {\n\t\t\t\t\tbos.write(\"IMPOSSIBLE\".getBytes());\n\t\t\t\t} else {\n\t\t\t\t\tbos.write(new Integer(ans).toString().getBytes());\n\t\t\t\t}\n\t\t\t\tbos.write(eolb);\n\t\t\t}\n\t\t\tbos.flush();\n\t\t} catch(IOException ioe) {\n\t\t\tioe.printStackTrace();\n\t\t}\n\t}\n\n}\n", "idx": "4045"}
{"func": "package googlejam4.p047;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Pegman {\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Scanner in = new Scanner(new File(\"A-large.in\"));\r\n        PrintWriter out = new PrintWriter(new File(\"Pegman.out\"));\r\n//        Scanner in = new Scanner(System.in);\r\n//        PrintWriter out = new PrintWriter(System.out);\r\n\r\n        int[] dr = {0, 1, 0, -1};\r\n        int[] dc = {1, 0, -1, 0};\r\n        String lookup = \">v<^\";\r\n        int loops = in.nextInt();\r\n        for (int loop = 0; loop < loops; loop++) {\r\n            int r = in.nextInt();\r\n            int c = in.nextInt();\r\n            in.nextLine();\r\n\r\n            char[][] arr = new char[r][];\r\n            for (int i = 0; i < r; i++) {\r\n                arr[i] = in.nextLine().toCharArray();\r\n            }\r\n            int ans = 0;\r\n            big: for (int i = 0; i < r; i++) {\r\n                out: for (int j = 0; j < c; j++) {\r\n                    if (arr[i][j] != '.') {\r\n                        int d = lookup.indexOf(arr[i][j]);\r\n                        int a = i + dr[d];\r\n                        int b = j + dc[d];\r\n                        while(a >= 0 && b >= 0 && a < r && b < c) {\r\n                            if(arr[a][b] != '.')\r\n                                continue out;\r\n                            a += dr[d];\r\n                            b += dc[d];\r\n                        }\r\n                        ans++;\r\n                        for (d = 0; d < 4; d++) {\r\n                            a = i + dr[d];\r\n                            b = j + dc[d];\r\n                            while(a >= 0 && b >= 0 && a < r && b < c) {\r\n                                if(arr[a][b] != '.')\r\n                                    continue out;\r\n                                a += dr[d];\r\n                                b += dc[d];\r\n                            }\r\n                        }\r\n                        ans = -1;\r\n                        break big;\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            out.printf(\"Case #%d: %s%n\", loop + 1, ans >= 0 ? ans : \"IMPOSSIBLE\");\r\n        }\r\n\r\n\r\n        out.close();\r\n        in.close();\r\n    }\r\n}\r\n", "idx": "4047"}
{"func": "package googlejam4.p048;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Pegman {\r\n    \r\n    public static void main(String[] args) throws Exception {\r\n        File inputFile = new File(\"A-large.in\");\r\n        Scanner in = new Scanner(inputFile);\r\n        File outputFile = new File(\"output.txt\");\r\n        PrintWriter out = new PrintWriter(outputFile);\r\n\r\n        int T = in.nextInt();\r\n        for (int t=0; t<T; t++) {\r\n            int R = in.nextInt();\r\n            int C = in.nextInt();\r\n            char[][] A = new char[R][];\r\n            for (int r=0; r<R; r++) {\r\n                A[r] = in.next().toCharArray();\r\n            }\r\n            boolean ok = true;\r\n            int answer = 0;\r\n            for (int r=0; r<R; r++) {\r\n                for (int c=0; c<C; c++) {\r\n                    if (A[r][c] == '.') continue;\r\n                    boolean up = false;\r\n                    for (int rr=r-1; rr>=0; rr--) {\r\n                        if (A[rr][c] != '.') {\r\n                            up = true;\r\n                        }\r\n                    }\r\n                    boolean down = false;\r\n                    for (int rr=r+1; rr<R; rr++) {\r\n                        if (A[rr][c] != '.') {\r\n                            down = true;\r\n                        }\r\n                    }\r\n                    boolean left = false;\r\n                    for (int cc=c-1; cc>=0; cc--) {\r\n                        if (A[r][cc] != '.') {\r\n                            left = true;\r\n                        }\r\n                    }\r\n                    boolean right = false;\r\n                    for (int cc=c+1; cc<C; cc++) {\r\n                        if (A[r][cc] != '.') {\r\n                            right = true;\r\n                        }\r\n                    }\r\n                    boolean exists = up || down || left || right;\r\n                    if (exists) {\r\n                        if ((A[r][c] == '^' && !up) || (A[r][c] == 'v' && !down)\r\n                                || (A[r][c] == '>' && !right) || (A[r][c] == '<' && !left)) {\r\n                            answer++;\r\n                        }\r\n                    } else {\r\n                        ok = false;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            String s = ok ? Integer.toString(answer) : \"IMPOSSIBLE\";\r\n            out.println(\"Case #\"+(t+1)+\": \" + s);\r\n        }\r\n\r\n        out.close();\r\n    }\r\n    \r\n}\r\n", "idx": "4048"}
{"func": "package googlejam4.p049;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/A-large.in\"))));\r\n\r\n\t\tString output = \"\";\r\n\t\tint t = sc.nextInt();\r\n\t\tsc.nextLine();\r\n\t\tfor (int i = 1; i <= t; i++) {\r\n\t\t\tint r = sc.nextInt();\r\n\t\t\tint c = sc.nextInt();\r\n\t\t\tsc.nextLine();\r\n\t\t\tchar[][] grid = new char[r][c];\r\n\t\t\tfor (int j = 0; j < r; j++) {\r\n\t\t\t\tgrid[j] = sc.nextLine().toCharArray();\r\n\t\t\t}\r\n\t\t\tint arrowsToChange = 0;\r\n\t\t\tboolean isImpossible = false;\r\n\t\t\tfor (int j = 0; j < r; j++) {\r\n\t\t\t\tfor (int k = 0; k < c; k++) {\r\n\t\t\t\t\tchar g = grid[j][k];\r\n\t\t\t\t\tif (g=='.')\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tif (g=='^') {\r\n\t\t\t\t\t\tboolean needsToChange = true;\r\n\t\t\t\t\t\tfor (int m = j-1; m >= 0; m--) {\r\n\t\t\t\t\t\t\tif (grid[m][k] != '.') {\r\n\t\t\t\t\t\t\t\tneedsToChange = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (needsToChange) {\r\n\t\t\t\t\t\t\tboolean impossible = true;\r\n\t\t\t\t\t\t\tfor (int m = j+1; m < r; m++) {\r\n\t\t\t\t\t\t\t\tif (grid[m][k] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor (int m = k-1; m >= 0; m--) {\r\n\t\t\t\t\t\t\t\tif (grid[j][m] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor (int m = k+1; m < c; m++) {\r\n\t\t\t\t\t\t\t\tif (grid[j][m] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (impossible)\r\n\t\t\t\t\t\t\t\tisImpossible = true;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tarrowsToChange++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (g=='v') {\r\n\t\t\t\t\t\tboolean needsToChange = true;\r\n\t\t\t\t\t\tfor (int m = j+1; m < r; m++) {\r\n\t\t\t\t\t\t\tif (grid[m][k] != '.') {\r\n\t\t\t\t\t\t\t\tneedsToChange = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (needsToChange) {\r\n\t\t\t\t\t\t\tboolean impossible = true;\r\n\t\t\t\t\t\t\tfor (int m = j-1; m >= 0; m--) {\r\n\t\t\t\t\t\t\t\tif (grid[m][k] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor (int m = k-1; m >= 0; m--) {\r\n\t\t\t\t\t\t\t\tif (grid[j][m] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor (int m = k+1; m < c; m++) {\r\n\t\t\t\t\t\t\t\tif (grid[j][m] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (impossible)\r\n\t\t\t\t\t\t\t\tisImpossible = true;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tarrowsToChange++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (g=='<') {\r\n\t\t\t\t\t\tboolean needsToChange = true;\r\n\t\t\t\t\t\tfor (int m = k-1; m >= 0; m--) {\r\n\t\t\t\t\t\t\tif (grid[j][m] != '.') {\r\n\t\t\t\t\t\t\t\tneedsToChange = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (needsToChange) {\r\n\t\t\t\t\t\t\tboolean impossible = true;\r\n\t\t\t\t\t\t\tfor (int m = j+1; m < r; m++) {\r\n\t\t\t\t\t\t\t\tif (grid[m][k] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor (int m = j-1; m >= 0; m--) {\r\n\t\t\t\t\t\t\t\tif (grid[m][k] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor (int m = k+1; m < c; m++) {\r\n\t\t\t\t\t\t\t\tif (grid[j][m] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (impossible)\r\n\t\t\t\t\t\t\t\tisImpossible = true;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tarrowsToChange++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (g=='>') {\r\n\t\t\t\t\t\tboolean needsToChange = true;\r\n\t\t\t\t\t\tfor (int m = k+1; m < c; m++) {\r\n\t\t\t\t\t\t\tif (grid[j][m] != '.') {\r\n\t\t\t\t\t\t\t\tneedsToChange = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (needsToChange) {\r\n\t\t\t\t\t\t\tboolean impossible = true;\r\n\t\t\t\t\t\t\tfor (int m = j-1; m >= 0; m--) {\r\n\t\t\t\t\t\t\t\tif (grid[m][k] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor (int m = k-1; m >= 0; m--) {\r\n\t\t\t\t\t\t\t\tif (grid[j][m] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor (int m = j+1; m < r; m++) {\r\n\t\t\t\t\t\t\t\tif (grid[m][k] != '.') {\r\n\t\t\t\t\t\t\t\t\timpossible = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (impossible)\r\n\t\t\t\t\t\t\t\tisImpossible = true;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tarrowsToChange++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tString tempOut = \"\";\r\n\t\t\tif (isImpossible)\r\n\t\t\t\ttempOut = \"IMPOSSIBLE\";\r\n\t\t\telse\r\n\t\t\t\ttempOut = \"\"+arrowsToChange;\r\n\t\t\toutput += \"Case #\" + i + \": \" + tempOut + \"\\n\";\r\n\t\t}\r\n\t\t\r\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src/A-large.out\"), \"utf-8\"));\r\n\t\tbw.write(output);\r\n\t\tbw.close();\r\n\t}\r\n}", "idx": "4049"}
{"func": "package googlejam4.p052;\nimport java.util.*;\r\n\r\npublic class A\r\n{\r\n    static int[] dr = {0, -1, 0, 1};\r\n    static int[] dc = {1, 0, -1, 0};\r\n\r\n    public static void main(String args[])\r\n    {\r\n        Scanner scan = new Scanner(System.in);\r\n\r\n        int T = scan.nextInt();\r\n        for(int ca=1;ca <= T;ca++)\r\n        {\r\n            int R = scan.nextInt();\r\n            int C = scan.nextInt();\r\n            char[][] a = new char[R][C];\r\n            for(int i=0;i < R;i++)\r\n            {\r\n                String str = scan.next();\r\n                for(int j=0;j < C;j++)\r\n                    a[i][j] = str.charAt(j);\r\n            }\r\n\r\n            int ans = 0;\r\n            boolean poss = true;\r\n\r\n            for(int i=0;i < R;i++)\r\n            for(int j=0;j < C;j++)\r\n            {\r\n                if(a[i][j] == '.') continue;\r\n\r\n                int dd = -1;\r\n                switch(a[i][j])\r\n                {\r\n                    case '>': dd = 0; break;\r\n                    case '^': dd = 1; break;\r\n                    case '<': dd = 2; break;\r\n                    case 'v': dd = 3; break;\r\n                }\r\n\r\n                boolean safe = false;\r\n                for(int ddd=0;ddd < 4;ddd++)\r\n                {\r\n                    int r = i;\r\n                    int c = j;\r\n                    while(true)\r\n                    {\r\n                        r += dr[ddd];\r\n                        c += dc[ddd];\r\n                        if (r >= 0 && r < R && c >= 0 && c < C)\r\n                        {\r\n                            if(a[r][c] != '.')\r\n                            {\r\n                                safe = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            if(ddd == dd) \r\n                            {\r\n                                ans++;\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                poss &= safe;\r\n            }\r\n\r\n            System.out.println(\"Case #\" + ca + \": \" + (poss ? ans : \"IMPOSSIBLE\"));\r\n        }\r\n    }\r\n}", "idx": "4052"}
{"func": "package googlejam4.p053;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class ProblemA {\r\n\t\t\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tFileWriter writer = new FileWriter(\"C:/Users/Max/Documents/Java Workspaces/Google Code Jam/Round 2 2015/src/output.txt\");\t\t\r\n\t\ttry {\r\n\t\t\tBufferedReader br = new BufferedReader(new FileReader(\"C:/Users/Max/Documents/Java Workspaces/Google Code Jam/Round 2 2015/src/input.txt\"));\r\n\t\t\tint numCases = Integer.parseInt(br.readLine());\r\n\t\t\tfor (int caseNum = 1; caseNum <= numCases; caseNum++) {\r\n\t\t\t\tString line = br.readLine();\r\n\t\t\t\tScanner sc = new Scanner(line);\r\n\t\t\t\tint r = sc.nextInt();\r\n\t\t\t\tint c = sc.nextInt();\r\n\t\t\t\tchar[][] grid = new char[r][c];\r\n\t\t\t\tfor(int i = 0; i < r; i++){\r\n\t\t\t\t\tline = br.readLine();\r\n\t\t\t\t\tfor(int j = 0; j < c; j++){\r\n\t\t\t\t\t\tgrid[i][j] = line.charAt(j);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tint needsChanging = 0;\r\n\t\t\t\tboolean[][] needChangeRow = new boolean[r][c];\r\n\t\t\t\tboolean[][] needChangeCol = new boolean[r][c];\r\n\t\t\t\tboolean[][] impossibleRow = new boolean[r][c];\r\n\t\t\t\tboolean[][] impossibleCol = new boolean[r][c];\r\n\t\t\t\tfor(int i = 0; i < r; i++){\r\n\t\t\t\t\tint firstCol = 0;\r\n\t\t\t\t\twhile(firstCol < c && grid[i][firstCol] == '.'){\r\n\t\t\t\t\t\tfirstCol++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(firstCol < c && grid[i][firstCol] != '>'){\r\n\t\t\t\t\t\tneedChangeRow[i][firstCol] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tint lastCol = c - 1;\r\n\t\t\t\t\twhile(lastCol >= 0 && grid[i][lastCol] == '.'){\r\n\t\t\t\t\t\tlastCol--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(lastCol >= 0 && grid[i][lastCol] != '<'){\r\n\t\t\t\t\t\tneedChangeRow[i][lastCol] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(firstCol == lastCol){\r\n\t\t\t\t\t\timpossibleRow[i][firstCol] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(int j = firstCol + 1; j < lastCol; j++){\r\n\t\t\t\t\t\tif(grid[i][j] == 'v' || grid[i][j] == '^'){\r\n\t\t\t\t\t\t\tneedChangeRow[i][j] = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(int j = 0; j < c; j++){\r\n\t\t\t\t\tint firstRow = 0;\r\n\t\t\t\t\twhile(firstRow < r && grid[firstRow][j] == '.'){\r\n\t\t\t\t\t\tfirstRow++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(firstRow < r && grid[firstRow][j] != 'v'){\r\n\t\t\t\t\t\tneedChangeCol[firstRow][j] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tint lastRow = r - 1;\r\n\t\t\t\t\twhile(lastRow >= 0 && grid[lastRow][j] == '.'){\r\n\t\t\t\t\t\tlastRow--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(lastRow >= 0 && grid[lastRow][j] != '^'){\r\n\t\t\t\t\t\tneedChangeCol[lastRow][j] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(firstRow == lastRow){\r\n\t\t\t\t\t\timpossibleCol[firstRow][j] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(int i = firstRow + 1; i < lastRow; i++){\r\n\t\t\t\t\t\tif(grid[i][j] == '<' || grid[i][j] == '>'){\r\n\t\t\t\t\t\t\tneedChangeCol[i][j] = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tboolean impossible = false;\r\n\t\t\t\tfor(int i = 0; i < r; i++){\r\n\t\t\t\t\tfor(int j = 0; j < c; j++){\r\n\t\t\t\t\t\tif(needChangeCol[i][j] && needChangeRow[i][j]){\r\n\t\t\t\t\t\t\tneedsChanging++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(impossibleRow[i][j] && impossibleCol[i][j]){\r\n\t\t\t\t\t\t\timpossible = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(impossible){\r\n\t\t\t\t\twriter.write(\"Case #\" + caseNum + \": \" + \"IMPOSSIBLE\" + \"\\n\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\twriter.write(\"Case #\" + caseNum + \": \" + \"\" + needsChanging + \"\\n\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tbr.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\twriter.close();\r\n\t}\r\n}\r\n", "idx": "4053"}
{"func": "package googlejam4.p061;\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\n\r\nclass Codejam {\r\n\t\r\n\t\r\n\t\r\n    public static void main(String args[]) {\r\n        Scanner in = null;\r\n\t\ttry {\r\n\t\t\tin = new Scanner(new FileInputStream(\"input.txt\"));\r\n\t\t\tSystem.setOut(new PrintStream(new File(\"output.txt\")));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tMap<Character, Integer> map = new HashMap<Character, Integer> ();\r\n\t\tmap.put('<', 1);\r\n\t\tmap.put('^', 2);\r\n\t\tmap.put('>', 4);\r\n\t\tmap.put('v', 8);\r\n\t\t\r\n\t\tint T = in.nextInt();\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\t//in.nextLine();\r\n\t\t\tint r = in.nextInt();\r\n\t\t\tint c = in.nextInt();\r\n\t\t\tString ar[] = new String[r];\r\n\t\t\tin.nextLine();\r\n\t\t\tfor (int i = 0 ; i < r; i++) ar[i] = in.nextLine();\r\n\t\t\t\r\n\t\t\tint ne[][] = new int[r][c];\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < r; i++) {\r\n\t\t\t\tint l = -1;\r\n\t\t\t\tint p = -1;\r\n\t\t\t\tfor (int j = 0; j < c; j++) {\r\n\t\t\t\t\tif (ar[i].charAt(j) != '.') {\r\n\t\t\t\t\t\tif (l == -1) {\r\n\t\t\t\t\t\t\tl = j;\r\n\t\t\t\t\t\t\tne[i][j] += 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tp = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (p != -1) {\r\n\t\t\t\t\tne[i][p] += map.get('>');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < c; j++) {\r\n\t\t\t\tint u = -1;\r\n\t\t\t\tint d = -1;\r\n\t\t\t\tfor (int i = 0; i < r; i++) {\r\n\t\t\t\t\tif (ar[i].charAt(j) != '.') {\r\n\t\t\t\t\t\tif (u == -1) {\r\n\t\t\t\t\t\t\tu = i;\r\n\t\t\t\t\t\t\tne[i][j] += map.get('^');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\td = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (d != -1) {\r\n\t\t\t\t\tne[d][j] += map.get('v');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint count = 0;\r\n\t\t\tfor (int i = 0; i < r; i++) {\r\n\t\t\t\tif (count == -1) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tfor (int j = 0; j < c; j++) {\r\n\t\t\t\t\tif (ar[i].charAt(j) != '.') {\r\n\t\t\t\t\t\tif (ne[i][j] != 0) {\r\n\t\t\t\t\t\t\tchar ch = ar[i].charAt(j);\r\n\t\t\t\t\t\t\tif (ne[i][j] == 15) {\r\n\t\t\t\t\t\t\t\tcount = -1;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif ((map.get(ch) & ne[i][j]) != 0) {\r\n\t\t\t\t\t\t\t\t\tcount ++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (count == -1) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + t + \": \" + (count == -1 ? \"IMPOSSIBLE\" : count));\r\n\t\t}\r\n    }\r\n \r\n}", "idx": "4061"}
{"func": "package googlejam4.p071;\nimport java.util.Scanner;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\npublic class ProbA {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint numcases = sc.nextInt();\r\n\t\tfor(int curcase = 1; curcase<=numcases; curcase++)\r\n\t\t{\r\n\t\t\tint R = sc.nextInt();\r\n\t\t\tint C = sc.nextInt();\r\n\t\t\tsc.nextLine();\r\n\t\t\tint [][] board = new int[R][C];\r\n\t\t\tHashSet[][] restrictions = new HashSet[R][C];\r\n\t\t\tfor(int i=0;i<R;i++)\r\n\t\t\t{\r\n\t\t\t\tString s = sc.nextLine();\r\n\t\t\t\t\r\n\t\t\t\tfor(int j=0;j<C;j++)\r\n\t\t\t\t{\r\n\t\t\t\t\trestrictions[i][j] = new HashSet();\r\n\t\t\t\t\tif(s.charAt(j)=='^')\r\n\t\t\t\t\tboard[i][j] = 1;\r\n\t\t\t\t\tif(s.charAt(j)=='>')\r\n\t\t\t\t\tboard[i][j] = 2;\r\n\t\t\t\t\tif(s.charAt(j)=='v')\r\n\t\t\t\t\tboard[i][j] = 3;\r\n\t\t\t\t\tif(s.charAt(j)=='<')\r\n\t\t\t\t\tboard[i][j] = 4;\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor(int i=0;i<R;i++)\r\n\t\t\t{\r\n\t\t\t\t\tfor(int j=0;j<C;j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(board[i][j]!=0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trestrictions[i][j].add(4);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(int j=C-1;j>=0;j--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(board[i][j]!=0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trestrictions[i][j].add(2);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int j=0;j<C;j++)\r\n\t\t\t{\r\n\t\t\t\t\tfor(int i=0;i<R;i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(board[i][j]!=0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trestrictions[i][j].add(1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(int i=R-1;i>=0;i--)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(board[i][j]!=0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trestrictions[i][j].add(3);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong count = 0;\r\n\t\t\tLOOP:\r\n\t\t\tfor(int i=0;i<R;i++)\r\n\t\t\t{\r\n\t\t\t\tfor(int j=0;j<C;j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(restrictions[i][j].size()==4)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount = Long.MAX_VALUE;\r\n\t\t\t\t\t\tbreak LOOP;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif(restrictions[i][j].contains(board[i][j]))\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\tif(count < Long.MAX_VALUE)\r\n\t\t\tSystem.out.println(\"Case #\"+curcase+\": \"+count);\r\n\t\t\telse\r\n\t\t\tSystem.out.println(\"Case #\"+curcase+\": IMPOSSIBLE\");\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "4071"}
{"func": "package googlejam4.p076;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class P1\r\n{\r\n\tpublic static void main( String[] args ) throws Exception\r\n\t{\r\n\t\tFile inputFile = new File( \"inputfiles/round2/P1/input.txt\" );\r\n\t\tFileReader fr = new FileReader( inputFile );\r\n\t\tBufferedReader br = new BufferedReader( fr );\r\n\t\t\r\n\t\tint numOfTestCases = Integer.parseInt( br.readLine() );\r\n\t\t\r\n\t\tFile outputFile = new File( \"inputfiles/round2/P1/output.txt\" );\r\n\t\toutputFile.delete();\r\n\t\toutputFile.createNewFile();\r\n\t\tFileWriter fw = new FileWriter( outputFile );\r\n\t\tBufferedWriter bw = new BufferedWriter( fw );\r\n\t\t\r\n\t\tfor ( int i = 0; i < numOfTestCases; i++ )\r\n\t\t{\r\n\t\t\tString[] rc = br.readLine().split( \" \" );\r\n\t\t\tint R = Integer.parseInt( rc[0] );\r\n\t\t\tint C = Integer.parseInt( rc[1] );\r\n\t\t\t\r\n\t\t\tchar[][] grid = new char[R][C];\r\n\t\t\t\r\n\t\t\tfor ( int j = 0; j < R; j++ )\r\n\t\t\t{\r\n\t\t\t\tString row = br.readLine();\r\n\t\t\t\tfor ( int k = 0; k < row.length(); k++ )\r\n\t\t\t\t\tgrid[j][k] = row.charAt( k );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint changeNum = 0;\n\t\t\tboolean possible = true;\n\t\t\t\n\t\t\tmain: for ( int i1 = 0; i1 < R; i1++ )\n\t\t\t\tfor ( int j = 0; j < C; j++ )\n\t\t\t\t{\n\t\t\t\t\tchar field = grid[i1][j];\n\t\t\t\t\tif ( field == '.' )\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\n\t\t\t\t\tboolean isArrowUp = false;\n\t\t\t\t\tfor ( int k = 0; k < i1; k++ )\n\t\t\t\t\t\tif ( grid[k][j] != '.' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tisArrowUp = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tboolean isArrowDown = false;\n\t\t\t\t\tfor ( int k = i1+1; k < R; k++ )\n\t\t\t\t\t\tif ( grid[k][j] != '.' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tisArrowDown = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tboolean isArrowLeft = false;\n\t\t\t\t\tfor ( int k = 0; k < j; k++ )\n\t\t\t\t\t\tif ( grid[i1][k] != '.' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tisArrowLeft = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tboolean isArrowRight = false;\n\t\t\t\t\tfor ( int k = j+1; k < C; k++ )\n\t\t\t\t\t\tif ( grid[i1][k] != '.' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tisArrowRight = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ( !isArrowUp && !isArrowDown && !isArrowLeft && !isArrowRight )\n\t\t\t\t\t{\n\t\t\t\t\t\tpossible = false;\n\t\t\t\t\t\tbreak main;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ( field == '^' && !isArrowUp )\n\t\t\t\t\t\tchangeNum++;\n\t\t\t\t\t\n\t\t\t\t\tif ( field == 'v' && !isArrowDown )\n\t\t\t\t\t\tchangeNum++;\n\t\t\t\t\t\n\t\t\t\t\tif ( field == '>' && !isArrowRight )\n\t\t\t\t\t\tchangeNum++;\n\t\t\t\t\t\n\t\t\t\t\tif ( field == '<' && !isArrowLeft )\n\t\t\t\t\t\tchangeNum++;\n\t\t\t\t}\n\t\t\t\n\t\t\tString s = \"Case #\" + (i+1) + \": \" + ( possible ? changeNum : \"IMPOSSIBLE\" ) + \"\\n\";\n\t\t\tbw.append( s );\n\t\t\tbw.flush();\r\n\t\t}\r\n\t\t\r\n\t\tbw.flush();\r\n\t\tfw.flush();\r\n\t\t\r\n\t\tbw.close();\r\n\t\tfw.close();\r\n\t}\r\n}\r\n", "idx": "4076"}
{"func": "package googlejam4.p080;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\n\r\npublic class R2A {\r\npublic static void main(String[] args) {\r\n\t\tString prblm=\"A\"; boolean fl=true;\r\n\t\tString filein=prblm+\"-\"+((fl)?\"large\":\"small\")+\".in.txt\";\r\n\t\tString fileout=prblm+\"-\"+((fl)?\"large\":\"small\")+\".out.txt\";\r\n\t\ttry {\r\n\t\t\tBufferedReader fr= new BufferedReader(new FileReader(filein));\r\n\t\t\tBufferedWriter fw= new BufferedWriter(new FileWriter(fileout));\r\n\t\t\tString s=fr.readLine();\r\n\t\t\tint T=Integer.parseInt(s);\r\n\t\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\t\ts=fr.readLine();\r\n\t\t\t\tString[] tok=s.split(\" \");\r\n\t\t\t\tint R=Integer.parseInt(tok[0]);\r\n\t\t\t\tint C=Integer.parseInt(tok[1]);\r\n\t\t\t\tint[][] mt=new int[R][C];\r\n\t\t\t\tfor (int j = 0; j < R; j++) {\r\n\t\t\t\t\ts=fr.readLine();\r\n\t\t\t\t\tfor (int h = 0; h < C; h++) {\r\n\t\t\t\t\t\tswitch (s.charAt(h)){\r\n\t\t\t\t\t\tcase '^': mt[j][h]=1; break;\r\n\t\t\t\t\t\tcase '<': mt[j][h]=2; break;\r\n\t\t\t\t\t\tcase 'v': mt[j][h]=3; break;\r\n\t\t\t\t\t\tcase '>': mt[j][h]=4; break;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tint nch=0;\r\n\t\t\t\tint[][] mtd=new int[R][C];\r\n\t\t\t\tfor (int h = 0; h < C; h++) {\r\n\t\t\t\t\tint k=0;\r\n\t\t\t\t\twhile (k<R && mt[k][h]==0) k++;\r\n\t\t\t\t\tif (k<R) { mtd[k][h]++;\r\n\t\t\t\t\t\tif (mt[k][h]==1) nch++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tk=R-1;\r\n\t\t\t\t\twhile (k>=0 && mt[k][h]==0) k--;\r\n\t\t\t\t\tif (k>=0) { mtd[k][h]++;\r\n\t\t\t\t\t\tif (mt[k][h]==3) nch++;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tfor (int j = 0; j < R; j++) {\r\n\t\t\t\t\tint k=0;\r\n\t\t\t\t\twhile (k<C && mt[j][k]==0) k++;\r\n\t\t\t\t\tif (k<C) { mtd[j][k]++;\r\n\t\t\t\t\t\tif (mt[j][k]==2) nch++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tk=C-1;\r\n\t\t\t\t\twhile (k>=0 && mt[j][k]==0) k--;\r\n\t\t\t\t\tif (k>=0) { mtd[j][k]++;\r\n\t\t\t\t\t\tif (mt[j][k]==4) nch++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tboolean f=false;\r\n\t\t\t\tfor (int j = 0; j < R && !f; j++) {\r\n\t\t\t\t\tfor (int h = 0; h < C && !f; h++) {\r\n\t\t\t\t\t\tif (mtd[j][h]==4) f=true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (f) s=\"IMPOSSIBLE\";\r\n\t\t\t\telse s=\"\"+nch;\r\n\t\t\t\tSystem.out.println(s);\r\n\t\t\t\tfw.write(\"Case #\"+i+\": \"+ s  +\"\\n\");\r\n\t\t\t}\r\n\t\t\tfr.close();\r\n\t\t\tfw.close();\r\n\t\t} catch (Exception e) {\t\t\t\r\n\t\t\te.printStackTrace();\r\n\t\t}\t\t\r\n\t}\r\n}", "idx": "4080"}
{"func": "package googlejam4.p088;\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tA r = new A();\n\t\tScanner sc = new Scanner(new FileReader(\"A-large.in\"));\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"A-large.out\"));\n\t\t\n\t\tint nc = sc.nextInt();\n\t\tfor (int tc = 1; tc <= nc; tc++) {\n\t\t\n\t\t\tint r1 = sc.nextInt();\n\t\t\tint c = sc.nextInt();\n\t\t\tchar[][] g = new char[r1][c];\n\t\t\tfor (int i = 0; i < r1; i++) {\n\t\t\t\tg[i] = sc.next().toCharArray();\n\t\t\t}\n\t\t\n\t\t\tboolean imp = false;\n\t\t\tint ans = 0;\n\t\t\tfor (int j = 0; j < c; j++) {\n\t\t\t\tint i = 0;\n\t\t\t\twhile (i < r1) {\n\t\t\t\t\tif (g[i][j] == '.')\n\t\t\t\t\t\ti++;\n\t\t\t\t\telse if (g[i][j] == '^') {\n\t\t\t\t\t\tboolean ok = false;\n\t\t\t\t\t\tint i1 = i - 1;\n\t\t\t\t\t\twhile (i1 >= 0) {\n\t\t\t\t\t\t\tif (g[i1][j] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti1--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti1 = i + 1;\n\t\t\t\t\t\twhile (i1 < g.length) {\n\t\t\t\t\t\t\tif (g[i1][j] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti1++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint j1 = j - 1;\n\t\t\t\t\t\twhile (j1 >= 0) {\n\t\t\t\t\t\t\tif (g[i][j1] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tj1--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tj1 = j + 1;\n\t\t\t\t\t\twhile (j1 < g[0].length) {\n\t\t\t\t\t\t\tif (g[i][j1] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tj1++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\timp |= !ok;\n\t\t\t\t\t\tans++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int j = 0; j < c; j++) {\n\t\t\t\tint i = r1 - 1;\n\t\t\t\twhile (i >= 0) {\n\t\t\t\t\tif (g[i][j] == '.')\n\t\t\t\t\t\ti--;\n\t\t\t\t\telse if (g[i][j] == 'v') {\n\t\t\t\t\t\tboolean ok = false;\n\t\t\t\t\t\tint i1 = i - 1;\n\t\t\t\t\t\twhile (i1 >= 0) {\n\t\t\t\t\t\t\tif (g[i1][j] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti1--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti1 = i + 1;\n\t\t\t\t\t\twhile (i1 < g.length) {\n\t\t\t\t\t\t\tif (g[i1][j] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti1++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint j1 = j - 1;\n\t\t\t\t\t\twhile (j1 >= 0) {\n\t\t\t\t\t\t\tif (g[i][j1] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tj1--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tj1 = j + 1;\n\t\t\t\t\t\twhile (j1 < g[0].length) {\n\t\t\t\t\t\t\tif (g[i][j1] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tj1++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\timp |= !ok;\n\t\t\t\t\t\tans++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tfor (int i = 0; i < r1; i++) {\n\t\t\t\tint j = 0;\n\t\t\t\twhile (j < c) {\n\t\t\t\t\tif (g[i][j] == '.')\n\t\t\t\t\t\tj++;\n\t\t\t\t\telse if (g[i][j] == '<') {\n\t\t\t\t\t\tboolean ok = false;\n\t\t\t\t\t\tint i1 = i - 1;\n\t\t\t\t\t\twhile (i1 >= 0) {\n\t\t\t\t\t\t\tif (g[i1][j] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti1--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti1 = i + 1;\n\t\t\t\t\t\twhile (i1 < g.length) {\n\t\t\t\t\t\t\tif (g[i1][j] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti1++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint j1 = j - 1;\n\t\t\t\t\t\twhile (j1 >= 0) {\n\t\t\t\t\t\t\tif (g[i][j1] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tj1--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tj1 = j + 1;\n\t\t\t\t\t\twhile (j1 < g[0].length) {\n\t\t\t\t\t\t\tif (g[i][j1] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tj1++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\timp |= !ok;\n\t\t\t\t\t\tans++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < r1; i++) {\n\t\t\t\tint j = c - 1;\n\t\t\t\twhile (j >= 0) {\n\t\t\t\t\tif (g[i][j] == '.')\n\t\t\t\t\t\tj--;\n\t\t\t\t\telse if (g[i][j] == '>') {\n\t\t\t\t\t\tboolean ok = false;\n\t\t\t\t\t\tint i1 = i - 1;\n\t\t\t\t\t\twhile (i1 >= 0) {\n\t\t\t\t\t\t\tif (g[i1][j] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti1--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti1 = i + 1;\n\t\t\t\t\t\twhile (i1 < g.length) {\n\t\t\t\t\t\t\tif (g[i1][j] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ti1++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint j1 = j - 1;\n\t\t\t\t\t\twhile (j1 >= 0) {\n\t\t\t\t\t\t\tif (g[i][j1] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tj1--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tj1 = j + 1;\n\t\t\t\t\t\twhile (j1 < g[0].length) {\n\t\t\t\t\t\t\tif (g[i][j1] != '.') {\n\t\t\t\t\t\t\t\tok = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tj1++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\timp |= !ok;\n\t\t\t\t\t\tans++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString ansStr = imp ? \"IMPOSSIBLE\" : (ans + \"\");\n\t\t\tpw.printf(\"Case #%d: %s\\n\", tc, ansStr);\n\t\t}\n\t\t\n\t\tpw.close();\n\t\tsc.close();\r\n\t}\r\n\r\n}\r\n", "idx": "4088"}
{"func": "package googlejam4.p096;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.LinkedList;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class Pegman {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n\t\tBufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\tStringTokenizer st;\r\n\t\tint T=Integer.parseInt(br.readLine());\r\n\t\tfor(int cn=1;cn<=T;cn++){\r\n\t\t\tst=new StringTokenizer(br.readLine());\r\n\t\t\tint R=Integer.parseInt(st.nextToken());\r\n\t\t\tint C=Integer.parseInt(st.nextToken());\r\n\t\t\tchar arr[][]=new char[R][C];\r\n\t\t\tfor(int i=0;i<R;i++){\r\n\t\t\t\tString str=br.readLine();\r\n\t\t\t\tfor(int j=0;j<C;j++){\r\n\t\t\t\t\tarr[i][j]=str.charAt(j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//count how many point out\r\n\t\t\tLinkedList<Integer> list=new LinkedList<Integer>();\r\n\t\t\tfor(int i=0;i<R;i++){\r\n\t\t\t\tfor(int j=0;j<C;j++){\r\n\t\t\t\t\tint dx=0, dy=0;\r\n\t\t\t\t\tif(arr[i][j]=='.')\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\telse if(arr[i][j]=='^'){\r\n\t\t\t\t\t\tdx=-1;dy=0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(arr[i][j]=='v'){\r\n\t\t\t\t\t\tdx=1;dy=0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(arr[i][j]=='<'){\r\n\t\t\t\t\t\tdx=0;dy=-1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(arr[i][j]=='>'){\r\n\t\t\t\t\t\tdx=0;dy=1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tint cx=i+dx, cy=j+dy;\r\n\t\t\t\t\twhile(cx>=0&&cx<R&&cy>=0&&cy<C){\r\n\t\t\t\t\t\tif(arr[cx][cy]!='.')\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcx+=dx;\r\n\t\t\t\t\t\tcy+=dy;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(cx<0||cx>=R||cy<0||cy>=C){\r\n\t\t\t\t\t\tlist.add(i*100+j);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//find if can change direction\r\n\t\t\tboolean okay=true;\r\n\t\t\tfor(int li:list){\r\n\t\t\t\tint i=li/100, j=li%100;\r\n\t\t\t\tint dx[]={-1,1,0,0};\r\n\t\t\t\tint dy[]={0,0,-1,1};\r\n\t\t\t\tboolean found=false;\r\n\t\t\t\tfor(int dn=0;dn<4;dn++){\r\n\t\t\t\t\tint cx=i+dx[dn], cy=j+dy[dn];\r\n\t\t\t\t\twhile(cx>=0&&cx<R&&cy>=0&&cy<C){\r\n\t\t\t\t\t\tif(arr[cx][cy]!='.'){\r\n\t\t\t\t\t\t\tfound=true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcx+=dx[dn];\r\n\t\t\t\t\t\tcy+=dy[dn];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!found)\r\n\t\t\t\t\tokay=false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint ans=list.size();\r\n\t\t\tif(okay)\r\n\t\t\t\tbw.append(\"Case #\"+cn+\": \"+ans+\"\\n\");\r\n\t\t\telse\r\n\t\t\t\tbw.append(\"Case #\"+cn+\": IMPOSSIBLE\\n\");\r\n\t\t}\r\n\t\tbw.flush();\r\n\t}\r\n\r\n}\r\n", "idx": "4096"}
{"func": "package googlejam4.p101;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class Pegman {\r\n\r\n  static int n;\r\n  static int l;\r\n  static int ans;\r\n\r\n  static int r, c;\r\n\r\n  public static void main(String[] args) throws FileNotFoundException {\r\n    \t\tScanner cin = new Scanner(new File(\"A-small-attempt0.in\"));\r\n    \t\tPrintStream cout = new PrintStream(\"A-small-attempt0.out\");\r\n    //\t\tScanner cin = new Scanner(new File(\"A-large-practice.in\"));\r\n    //\t\tPrintStream cout = new PrintStream(\"A-large-practice.out\");\r\n//    Scanner cin = new Scanner(System.in);\r\n//    PrintStream cout = System.out;\r\n\r\n    int _case = 0;\r\n\r\n    int[] dx = { 0, 0, 1, -1 };\r\n    int[] dy = { 1, -1, 0, 0 };\r\n    for (int T = cin.nextInt(); T > 0; T--) {\r\n      _case++;\r\n      r = cin.nextInt();\r\n      c = cin.nextInt();\r\n      char[][] a = new char[r][];\r\n      for (int i = 0; i < r; i++)\r\n        a[i] = cin.next().toCharArray();\r\n\r\n      int ans = 0;\r\n      for (int i = 0; i < r; i++)\r\n        for (int j = 0; j < c; j++) {\r\n          if (a[i][j] != '.') {\r\n            boolean good = false;\r\n            int dir = 0;\r\n            if (a[i][j] == '>')\r\n              dir = 0;\r\n            else if (a[i][j] == '<')\r\n              dir = 1;\r\n            else if (a[i][j] == 'v')\r\n              dir = 2;\r\n            else\r\n              dir = 3;\r\n\r\n            for (int x = i + dx[dir], y = j + dy[dir]; x >= 0 && x < r && y >= 0 && y < c; x += dx[dir], y += dy[dir]) {\r\n              if (a[x][y] != '.') {\r\n                good = true;\r\n                break;\r\n              }\r\n            }\r\n\r\n            if (good)\r\n              continue;\r\n            else {\r\n              boolean found = false;\r\n              for (int k = 0; k < 4; k++) {\r\n                for (int x = i + dx[k], y = j + dy[k]; x >= 0 && x < r && y >= 0 && y < c; x += dx[k], y += dy[k])\r\n                  if (a[x][y] != '.') {\r\n                    found = true;\r\n                    break;\r\n                  }\r\n              }\r\n              if (!found) {\r\n                ans = Integer.MAX_VALUE;\r\n              } else {\r\n                ans++;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n      if (ans == Integer.MAX_VALUE)\r\n        cout.printf(\"Case #%d: IMPOSSIBLE%n\", _case);\r\n      else\r\n        cout.printf(\"Case #%d: %d%n\", _case, ans);\r\n\r\n    }\r\n\r\n    cin.close();\r\n    cout.close();\r\n  }\r\n}\r\n", "idx": "4101"}
{"func": "package googlejam4.p103;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n  public static void main(String[] args) {\r\n    Scanner s = new Scanner(System.in);\r\n    int T = s.nextInt();\r\n    for (int t = 1; t <= T; t++) {\r\n      int r = s.nextInt(), c = s.nextInt();\r\n      s.nextLine();\r\n      char[][] v = new char[r][c];\r\n      for (int i = 0; i < r; i++) {\r\n        String line = s.nextLine();\r\n        for (int j = 0; j < c; j++) {\r\n          v[i][j] = line.charAt(j);\r\n        }\r\n      }\r\n      boolean[][][] f = new boolean[r][c][4];\r\n      // up\r\n      for (int j = 0; j < c; j++) {\r\n        boolean flag = false;\r\n        for (int i = 0; i < r; i++) {\r\n          if (v[i][j] != '.') {\r\n            f[i][j][0] = flag;\r\n            flag = true;\r\n          }\r\n        }\r\n      }\r\n      // down\r\n      for (int j = 0; j < c; j++) {\r\n        boolean flag = false;\r\n        for (int i = r - 1; i >= 0; i--) {\r\n          if (v[i][j] != '.') {\r\n            f[i][j][1] = flag;\r\n            flag = true;\r\n          }\r\n        }\r\n      }\r\n      // left\r\n      for (int i = 0; i < r; i++) {\r\n        boolean flag = false;\r\n        for (int j = 0; j < c; j++) {\r\n          if (v[i][j] != '.') {\r\n            f[i][j][2] = flag;\r\n            flag = true;\r\n          }\r\n        }\r\n      }\r\n      // right\r\n      for (int i = 0; i < r; i++) {\r\n        boolean flag = false;\r\n        for (int j = c - 1; j >= 0; j--) {\r\n          if (v[i][j] != '.') {\r\n            f[i][j][3] = flag;\r\n            flag = true;\r\n          }\r\n        }\r\n      }\r\n      // check everyone\r\n      int ans = 0;\r\n      for (int i = 0; i < r; i++) {\r\n        for (int j = 0; j < c; j++) {\r\n          if (v[i][j] != '.') {\r\n            boolean valid = true;\r\n            switch (v[i][j]) {\r\n              case '^':\r\n                valid = f[i][j][0];\r\n                break;\r\n              case 'v':\r\n                valid = f[i][j][1];\r\n                break;\r\n              case '<':\r\n                valid = f[i][j][2];\r\n                break;\r\n              case '>':\r\n                valid = f[i][j][3];\r\n                break;\r\n              default:\r\n                System.out.println(\"ERROR\");\r\n                break;\r\n              }\r\n            if (!valid) {\r\n              ans++;\r\n              boolean fail = true;\r\n              for (int k = 0; k < 4; k++) {\r\n                if (f[i][j][k]) {\r\n                  fail = false;\r\n                  break;\r\n                }\r\n              }\r\n              if (fail) {\r\n                ans = -1;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (ans == -1) {\r\n          break;\r\n        }\r\n      }\r\n      if (ans == -1) {\r\n        System.out.println(String.format(\"Case #%d: IMPOSSIBLE\", t));\r\n      } else {\r\n        System.out.println(String.format(\"Case #%d: %d\", t, ans));\r\n      }\r\n    }\r\n    s.close();\r\n  }\r\n}", "idx": "4103"}
{"func": "package googlejam4.p111;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws IOException,\r\n\t\t\tFileNotFoundException {\r\n\t\tString file = \"A-large\";\r\n\r\n\t\tScanner scan = new Scanner(new BufferedReader(new FileReader(file\r\n\t\t\t\t+ \".in\")));\r\n\t\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(file\r\n\t\t\t\t+ \".out\")));\r\n\r\n\t\tint T = Integer.parseInt(scan.nextLine());\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tString[] info = scan.nextLine().split(\" \");\r\n\t\t\tint R = Integer.parseInt(info[0]);\r\n\t\t\tint C = Integer.parseInt(info[1]);\r\n\t\t\tchar[][] grid = new char[R][C];\r\n\t\t\tfor (int r = 0; r < R; r++)\r\n\t\t\t\tgrid[r] = scan.nextLine().toCharArray();\r\n\r\n\t\t\tchar[] arrow = { '^', '>', 'v', '<' };\r\n\t\t\tint[] dr = { -1, 0, 1, 0 };\r\n\t\t\tint[] dc = { 0, 1, 0, -1 };\r\n\t\t\tint cnt = 0;\r\n\t\t\tboolean impossible = false;\r\n\t\t\tfor (int r = 0; r < R; r++)\r\n\t\t\t\tfor (int c = 0; c < C; c++)\r\n\t\t\t\t\tif (grid[r][c] != '.') {\r\n\t\t\t\t\t\tboolean stop = false;\r\n\t\t\t\t\t\tboolean found = false;\r\n\t\t\t\t\t\tfor (int d = 0; d < 4; d++) {\r\n\t\t\t\t\t\t\tint nr = r, nc = c;\r\n\t\t\t\t\t\t\twhile (true) {\r\n\t\t\t\t\t\t\t\tnr += dr[d];\r\n\t\t\t\t\t\t\t\tnc += dc[d];\r\n\t\t\t\t\t\t\t\tif (nr < 0 || nr >= R || nc < 0 || nc >= C)\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tif (grid[nr][nc] != '.') {\r\n\t\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t\t\tif (arrow[d] == grid[r][c])\r\n\t\t\t\t\t\t\t\t\t\tstop = true;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!found)\r\n\t\t\t\t\t\t\timpossible = true;\r\n\t\t\t\t\t\tif (!stop)\r\n\t\t\t\t\t\t\tcnt++;\r\n\t\t\t\t\t}\r\n\t\t\tif (impossible)\r\n\t\t\t\tpw.println(\"Case #\" + t + \": IMPOSSIBLE\");\r\n\t\t\telse\r\n\t\t\t\tpw.println(\"Case #\" + t + \": \" + cnt);\r\n\t\t}\r\n\r\n\t\tscan.close();\r\n\t\tpw.close();\r\n\t}\r\n\r\n}\r\n", "idx": "4111"}
{"func": "package googlejam4.p112;\nimport java.util.*;\r\npublic class a {\r\npublic static void main(String[] args)\r\n{\r\n\tScanner input = new Scanner(System.in);\r\n\tint T = input.nextInt();\r\n\tfor(int t = 0; t<T; t++)\r\n\t{\r\n\t\tSystem.out.print(\"Case #\"+(t+1)+\": \");\r\n\t\tint n = input.nextInt(), m = input.nextInt();\r\n\t\tchar[][] grid = new char[n][m];\r\n\t\tfor(int i = 0; i<n; i++) grid[i] = input.next().toCharArray();\r\n\t\tboolean poss = true;\r\n\t\tint[][] count = new int[n][m];\r\n\t\tboolean[][] bad = new boolean[n][m];\r\n\t\tint[] di = new int[]{0, 1, 0, -1};\r\n\t\tint[] dj = new int[]{1, 0, -1, 0};\r\n\t\tchar[] cs = new char[]{'>','v','<','^'};\r\n\t\tfor(int i = 0; i<n; i++)\r\n\t\t\tfor(int j = 0; j<m; j++)\r\n\t\t\t{\r\n\t\t\t\tif(grid[i][j] == '.') continue;\r\n\t\t\t\tfor(int k = 0; k<4; k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tboolean edge = false;\r\n\t\t\t\t\tint ati = i, atj = j;\r\n\t\t\t\t\twhile(true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tati += di[k];\r\n\t\t\t\t\t\tatj += dj[k];\r\n\t\t\t\t\t\tif(ati < 0 || atj < 0 || ati >= n || atj >= m)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tedge = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif((ati != i || atj != j) && grid[ati][atj] != '.') break;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(edge)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcount[i][j]++;\r\n\t\t\t\t\t\tif(grid[i][j] == cs[k]) bad[i][j] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\tint res = 0;\r\n\t\tfor(int i = 0; i<n && res != -1; i++)\r\n\t\t\tfor(int j = 0; j<m && res != -1; j++)\r\n\t\t\t{\r\n\t\t\t\tif(bad[i][j]) res++;\r\n\t\t\t\tif(count[i][j] == 4) res = -1;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\tSystem.out.println(res == -1 ? \"IMPOSSIBLE\" : res);\r\n\t}\r\n}\r\n}\r\n", "idx": "4112"}
{"func": "package googlejam4.p119;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class A2 {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tint ntests = Integer.parseInt(bf.readLine());\n\t\tfor (int tc = 1; tc <= ntests; tc++) {\n\t\t\tString[] line = bf.readLine().split(\" \");\n\t\t\tint r = Integer.parseInt(line[0]);\n\t\t\tint c = Integer.parseInt(line[1]);\n\t\t\tchar[][] grid = new char[r][];\n\t\t\tfor (int i = 0; i < r; i++) {\n\t\t\t\tgrid[i] = bf.readLine().toCharArray();\n\t\t\t}\n\n\t\t\tboolean isImpossible = false;\n\t\t\tint numChanged = 0;\n\t\t\tint[][] dirs = { { -1, 0 }, { 0, 1 }, { 1, 0 }, { 0, -1 } };\n\t\t\t// this is n^3, but we could make it faster if we wanted\n\t\t\tfor (int i = 0; i < r; i++) {\n\t\t\t\tfor (int j = 0; j < c; j++) {\n\t\t\t\t\tint curDir = 0;\n\t\t\t\t\tswitch (grid[i][j]) {\n\t\t\t\t\tcase '.':\n\t\t\t\t\t\t// safe, nothing to do\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tcase '^':\n\t\t\t\t\t\tcurDir = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '>':\n\t\t\t\t\t\tcurDir = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'v':\n\t\t\t\t\t\tcurDir = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '<':\n\t\t\t\t\t\tcurDir = 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tboolean hasArrowInCurDir = false;\n\t\t\t\t\tfor (int[] pos = { i + dirs[curDir][0], j + dirs[curDir][1] }; pos[0] >= 0 && pos[1] >= 0 && pos[0] < r\n\t\t\t\t\t\t\t&& pos[1] < c; pos[0] += dirs[curDir][0], pos[1] += dirs[curDir][1]) {\n\t\t\t\t\t\tif (grid[pos[0]][pos[1]] != '.') {\n\t\t\t\t\t\t\thasArrowInCurDir = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!hasArrowInCurDir) {\n\t\t\t\t\t\tfor (int otherDirs = 0; otherDirs <= 3; otherDirs++) {\n\t\t\t\t\t\t\tif (otherDirs == curDir)\n\t\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t\tfor (int[] pos = { i + dirs[otherDirs][0], j + dirs[otherDirs][1] }; pos[0] >= 0 && pos[1] >= 0\n\t\t\t\t\t\t\t\t\t&& pos[0] < r && pos[1] < c; pos[0] += dirs[otherDirs][0], pos[1] += dirs[otherDirs][1]) {\n\t\t\t\t\t\t\t\tif (grid[pos[0]][pos[1]] != '.') {\n\t\t\t\t\t\t\t\t\thasArrowInCurDir = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (hasArrowInCurDir) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hasArrowInCurDir) {\n\t\t\t\t\t\t\tnumChanged++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tisImpossible = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isImpossible) {\n\t\t\t\tSystem.out.println(\"Case #\" + tc + \": \" + \"IMPOSSIBLE\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Case #\" + tc + \": \" + numChanged);\n\t\t\t}\n\t\t}\n\t}\n}\n", "idx": "4119"}
{"func": "package googlejam4.p121;\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\r\n\t\tint T = in.nextInt();\r\n\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tint res = 0;\r\n\t\t\tint R = in.nextInt();\r\n\t\t\tint C = in.nextInt();\r\n\t\t\tin.nextLine();\r\n\r\n\t\t\tchar[][] board = new char[R][C];\r\n\t\t\tint[] rowArrows = new int[R];\r\n\t\t\tint[] colArrows = new int[C];\r\n\r\n\t\t\tfor (int r = 0; r < R; r++) {\r\n\t\t\t\tboard[r] = in.nextLine().toCharArray();\r\n\t\t\t}\r\n\r\n\t\t\tfor (int r = 0; r < R; r++) {\r\n\t\t\t\tboolean first = true;\r\n\t\t\t\tchar lastArrow = '.';\r\n\t\t\t\tfor (int c = 0; c < C; c++) {\r\n\t\t\t\t\tif (board[r][c] != '.') {\r\n\t\t\t\t\t\tif (first && board[r][c] == '<') {\r\n\t\t\t\t\t\t\tres++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfirst = false;\r\n\t\t\t\t\t\tlastArrow = board[r][c];\r\n\t\t\t\t\t\trowArrows[r]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (lastArrow == '>') {\r\n\t\t\t\t\tres++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (int c = 0; c < C; c++) {\r\n\t\t\t\tboolean first = true;\r\n\t\t\t\tchar lastArrow = '.';\r\n\t\t\t\tfor (int r = 0; r < R; r++) {\r\n\t\t\t\t\tif (board[r][c] != '.') {\r\n\t\t\t\t\t\tif (first && board[r][c] == '^') {\r\n\t\t\t\t\t\t\tres++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfirst = false;\r\n\t\t\t\t\t\tlastArrow = board[r][c];\r\n\t\t\t\t\t\tcolArrows[c]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (lastArrow == 'v') {\r\n\t\t\t\t\tres++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tboolean imp = false;\r\n\t\t\tfor (int r = 0; r < R; r++) {\r\n\t\t\t\tfor (int c = 0; c < C; c++) {\r\n\t\t\t\t\tif (board[r][c] != '.') {\r\n\t\t\t\t\t\tif (rowArrows[r] == 1 && colArrows[c] == 1) {\r\n\t\t\t\t\t\t\timp = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (imp) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (imp) {\r\n\t\t\t\tSystem.out.format(\"Case #%d: IMPOSSIBLE\\n\", t);\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.format(\"Case #%d: %d\\n\", t, res);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tin.close();\r\n\t}\r\n\r\n}\r\n", "idx": "4121"}
{"func": "package googlejam4.p129;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\n\r\npublic class MainClass {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException, InterruptedException {\r\n\t\tBufferedReader fr = new BufferedReader(new FileReader(new File(\"input.txt\")));\r\n\t\tFileWriter fw = new FileWriter(new File(\"result.txt\"));\r\n\t\tString firstLine = fr.readLine();\r\n\t\tint nbCases = Integer.parseInt(firstLine);\r\n\t\tfor (int numCase =0; numCase<nbCases; numCase++){\r\n\r\n\t\t\tString line = fr.readLine();\r\n\t\t\tint R = Integer.parseInt(line.split(\" \")[0]);\r\n\t\t\tint C = Integer.parseInt(line.split(\" \")[1]);\r\n\t\t\tchar[][] fleches = new char[R][C];\r\n\t\t\t\r\n\t\t\tfor (int i =0; i<R; i++){\r\n\t\t\t\tline = fr.readLine();\r\n\t\t\t\tfor (int j =0; j<C; j++){\r\n\t\t\t\t\tfleches[i][j]=line.charAt(j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\tint result = 0;\r\n\t\t\t\r\n\t\t\tfor (int i =0; i<R; i++){\r\n\t\t\t\tfor (int j =0; j<C; j++){\r\n\t\t\t\t\tif (fleches[i][j]=='.'){\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tboolean needsToChange = true;\r\n\t\t\t\t\tif (fleches[i][j]=='<'){\r\n\t\t\t\t\t\tfor (int k = j-1; k>=0; k--){\r\n\t\t\t\t\t\t\tif (fleches[i][k]!='.'){\r\n\t\t\t\t\t\t\t\tneedsToChange=false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (fleches[i][j]=='>'){\r\n\t\t\t\t\t\tfor (int k = j+1; k<C; k++){\r\n\t\t\t\t\t\t\tif (fleches[i][k]!='.'){\r\n\t\t\t\t\t\t\t\tneedsToChange=false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (fleches[i][j]=='^'){\r\n\t\t\t\t\t\tfor (int k = i-1; k>=0; k--){\r\n\t\t\t\t\t\t\tif (fleches[k][j]!='.'){\r\n\t\t\t\t\t\t\t\tneedsToChange=false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (fleches[i][j]=='v'){\r\n\t\t\t\t\t\tfor (int k = i+1; k<R; k++){\r\n\t\t\t\t\t\t\tif (fleches[k][j]!='.'){\r\n\t\t\t\t\t\t\t\tneedsToChange=false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (needsToChange){\r\n\r\n\t\t\t\t\t\tboolean changeable = false;\r\n\t\t\t\t\t\tfor (int k = i+1; k<R; k++){\r\n\t\t\t\t\t\t\tif (fleches[k][j]!='.'){\r\n\t\t\t\t\t\t\t\tchangeable=true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (int k = i-1; k>=0; k--){\r\n\t\t\t\t\t\t\tif (fleches[k][j]!='.'){\r\n\t\t\t\t\t\t\t\tchangeable=true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (int k = j+1; k<C; k++){\r\n\t\t\t\t\t\t\tif (fleches[i][k]!='.'){\r\n\t\t\t\t\t\t\t\tchangeable=true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (int k = j-1; k>=0; k--){\r\n\t\t\t\t\t\t\tif (fleches[i][k]!='.'){\r\n\t\t\t\t\t\t\t\tchangeable=true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (changeable){\r\n\t\t\t\t\t\t\tresult++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tresult=Integer.MIN_VALUE;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (result<0){\r\n\r\n\t\t\t\tfw.write(\"Case #\"+(numCase+1)+\": IMPOSSIBLE\\n\");\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\r\n\t\t\tfw.write(\"Case #\"+(numCase+1)+\": \"+result+\"\\n\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\tfw.close();\r\n\t\tSystem.out.println(\"finished\");\r\n\t}\r\n\r\n}\r\n", "idx": "4129"}
{"func": "package googlejam4.p136;\nimport java.util.Scanner;\n\n\npublic class A {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint nT = sc.nextInt();\n\t\tfor(int T=1; T<=nT; ++T)\n\t\t{\n\t\t\tint R=sc.nextInt(), C=sc.nextInt();\n\t\t\t\n\t\t\tint[][] map = new int[R][C];\n\t\t\tchar[] line = new char[C];\n\n\t\t\tint[] dr = {0,-1, 0, 1, 0};\n\t\t\tint[] dc = {0, 0, 1, 0,-1};\n\t\t\t\n\t\t\tfor(int r=0; r<R; ++r)\n\t\t\t{\n\t\t\t\tline = sc.next().toCharArray();\n\t\t\t\tfor(int c=0; c<C; ++c)\n\t\t\t\t{\n\t\t\t\t\tswitch(line[c])\n\t\t\t\t\t{\n\t\t\t\t\tcase '.': map[r][c]=0; break;\n\t\t\t\t\tcase '^': map[r][c]=1; break;\n\t\t\t\t\tcase '>': map[r][c]=2; break;\n\t\t\t\t\tcase 'v': map[r][c]=3; break;\n\t\t\t\t\tcase '<': map[r][c]=4; break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\n\t\t\tint total=0;\n\t\t\tboolean possible=true;\n\t\t\tfor(int r=0; r<R && possible; ++r)\n\t\t\t{\n\t\t\t\tfor(int c=0; c<C && possible; ++c)\n\t\t\t\t{\n\t\t\t\t\tif(map[r][c]==0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tint d=1;\n\t\t\t\t\tint r1 = r+d*dr[map[r][c]];\n\t\t\t\t\tint c1 = c+d*dc[map[r][c]];\n\t\t\t\t\twhile((0<=r1 && r1<R && 0<=c1 && c1<C) && map[r+d*dr[map[r][c]]][c+d*dc[map[r][c]]]==0)\n\t\t\t\t\t\t++d;\n\t\t\t\t\tint r2 = r+d*dr[map[r][c]];\n\t\t\t\t\tint c2 = c+d*dc[map[r][c]];\n\t\t\t\t\tif(!(0<=r2 && r2<R && 0<=c2 && c2<C)) //fell off\n\t\t\t\t\t{\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\tfor(int del=1; del<=4; ++del)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\td=1;\n\t\t\t\t\t\t\tint r3 = r+d*dr[del];\n\t\t\t\t\t\t\tint c3 = c+d*dc[del];\n\t\t\t\t\t\t\twhile((0<=r3 && r3<R && 0<=c3 && c3<C) && map[r+d*dr[del]][c+d*dc[del]]==0)\n\t\t\t\t\t\t\t\t++d;\n\t\t\t\t\t\t\tint r4 = r+d*dr[del];\n\t\t\t\t\t\t\tint c4 = c+d*dc[del];\n\t\t\t\t\t\t\tif((0<=r4 && r4<R && 0<=c4 && c4<C)) //found arrow\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!found)\n\t\t\t\t\t\t\tpossible=false;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\t++total;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(possible)\n\t\t\t\tSystem.out.println(\"Case #\"+T+\": \"+total);\n\t\t\telse\n\t\t\t\tSystem.out.println(\"Case #\"+T+\": IMPOSSIBLE\");\n\t\t}\n\t\t\t\n\t}\n}\n", "idx": "4136"}
{"func": "package googlejam4.p138;\nimport java.io.File;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tScanner in = new Scanner(new File(\"a.in\"));\n\t\t\tPrintStream out = new PrintStream(\"a.out\");\n\t\t\tint T = in.nextInt();\n\t\t\tSystem.out.println(T);\n\t\t\tfor(int C=1;C<=T;C++){\n\t\t\t\tSystem.out.println(\"case:\"+C);\n\t\t\t\tint M = in.nextInt();\n\t\t\t\tint N = in.nextInt();\n\t\t\t\tchar[][] mat = new char[M][N];\n\t\t\t\tin.nextLine();\n\t\t\t\tfor(int i=0;i<M;i++){\n\t\t\t\t\tString temp = in.nextLine();\n\t\t\t\t\tfor(int j=0;j<N;j++)\n\t\t\t\t\t\tmat[i][j] = temp.charAt(j);\n\t\t\t\t}\n\t\t\t\tint ans = 0;\n\t\t\t\tboolean res = true;\n\t\t\t\tfor(int i=0;i<M;i++){\n\t\t\t\t\tfor(int j=0;j<N;j++){\n\t\t\t\t\t\tif (mat[i][j]!='.'){\n\t\t\t\t\t\t\tboolean[] dir = new boolean[4];\n\t\t\t\t\t\t\tfor(int x=0;x<i;x++)\n\t\t\t\t\t\t\t\tif (mat[x][j]!='.') {\n\t\t\t\t\t\t\t\t\tdir[0] = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int x=i+1;x<M;x++)\n\t\t\t\t\t\t\t\tif (mat[x][j]!='.') {\n\t\t\t\t\t\t\t\t\tdir[1] = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int y=0;y<j;y++)\n\t\t\t\t\t\t\t\tif (mat[i][y]!='.'){\n\t\t\t\t\t\t\t\t\tdir[2] = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(int y=j+1;y<N;y++)\n\t\t\t\t\t\t\t\tif (mat[i][y]!='.'){\n\t\t\t\t\t\t\t\t\tdir[3] = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tboolean can = false;\n\t\t\t\t\t\t\tfor(int d=0;d<4;d++)\n\t\t\t\t\t\t\t\tif (dir[d]) can = true;\n\t\t\t\t\t\t\tif(!can){\n\t\t\t\t\t\t\t\tres = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (mat[i][j]=='^' && dir[0]) continue;\n\t\t\t\t\t\t\tif (mat[i][j]=='v' && dir[1]) continue;\n\t\t\t\t\t\t\tif (mat[i][j]=='<' && dir[2]) continue;\n\t\t\t\t\t\t\tif (mat[i][j]=='>' && dir[3]) continue;\n\t\t\t\t\t\t\tans++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!res) break;\n\t\t\t\t}\n\t\t\t\tif (!res) out.println(\"Case #\"+C+\": IMPOSSIBLE\");\n\t\t\t\telse out.println(\"Case #\"+C+\": \"+ans);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tout.close();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "4138"}
{"func": "package googlejam4.p140;\n\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.*;\n\npublic class P1 {\n\n\tScanner scio=new Scanner(System.in);\n\tint caseNum=0;\n\tint[][] dir = {{0,0},{-1,0},{1,0},{0,-1},{0,1}};\n\t\t\n\tpublic static void main(String[] args) {\n\t\tP1 r = new P1();\n\t\ttry {\n\t\t\tFile file=new File(\"A-large.in\");\n\t\t\tr.scio=new Scanner(file); \n\t\t} catch (FileNotFoundException e) {}\n\t\t\n\t\tint t=r.scio.nextInt();\n\t\tString s=r.scio.nextLine();\n\t\t\n\t\tfor(int i=0;i<t;++i) {\n\t\t\tr.caseNum=i+1;\n\t\t\tint n=r.scio.nextInt();\n\t\t\t//String sss=this.scio.nextLine();\n\t\t\tint m=r.scio.nextInt();\n\t\t\tString ss=r.scio.nextLine();\n\t\t\t\n\t\t\t\n\t\t\tint[][] a=new int[n+10][m+10];\n\t\t\tfor(int i1=0;i1<n+10;++i1)\n\t\t\t\tfor (int j=0;j<m+10;++j) a[i1][j]=-1;\n\t\t\t\n\t\t\tfor(int i3=1;i3<=n;++i3) {\n\t\t\t\tString s1=r.scio.nextLine();\n\t\t\t\tchar[] c=s1.toCharArray();\n\t\t\t\tfor (int j=1;j<=m;++j) {\n\t\t\t\t\tif (c[j-1]=='.') a[i3][j] = 0;\n\t\t\t\t\tif (c[j-1]=='^') a[i3][j] = 1;\n\t\t\t\t\tif (c[j-1]=='v') a[i3][j] = 2;\n\t\t\t\t\tif (c[j-1]=='<') a[i3][j] = 3;\n\t\t\t\t\tif (c[j-1]=='>') a[i3][j] = 4;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tint cnt=0;\n\t\t\tfor (int i2=1; i2<=n;++i2) {\n\t\t\t\tfor (int j=1; j<=m; ++j) {\n\t\t\t\t\tif (a[i2][j]==0) continue;\n\t\t\t\t\tint[] good = new int[5]; \n\t\t\t\t\tfor (int t1=0;t1<5;++t1) good[t1]=0;\n\t\t\t\t\tfor(int t2=1;t2<=4;++t2) {\n\t\t\t\t\t\tint x=i2; int y=j;\n\t\t\t\t\t\twhile(a[x][y]!=-1) {\n\t\t\t\t\t\t\tx+=r.dir[t2][0];\n\t\t\t\t\t\t\ty+=r.dir[t2][1];\n\t\t\t\t\t\t\tif (a[x][y]>0) {\n\t\t\t\t\t\t\t\tgood[t2]=1; ++good[0];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (good[0]==0) cnt=-1 * n * m * 2;\n\t\t\t\t\tif (good[a[i2][j]] ==0) ++cnt;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cnt<0) {\n\t\t\t\tSystem.out.println(\"case #\"+r.caseNum+\": \" + \"IMPOSSIBLE\");\t\t\t\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"case #\"+r.caseNum+\": \" + cnt);\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "idx": "4140"}
{"func": "package googlejam4.p144;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class A {\r\n\r\n\tstatic StringTokenizer st;\r\n\tstatic BufferedReader br;\r\n\tstatic PrintWriter pw;\r\n\tstatic boolean[][]used;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\r\n\t\tint test = Integer.parseInt(next());\r\n\t\tfor (int t = 1; t <= test; t++) {\r\n\t\t\tSystem.out.print(\"Case #\"+t+\": \");\r\n\t\t\tint n = Integer.parseInt(next());\r\n\t\t\tint m = Integer.parseInt(next());\r\n\t\t\tchar[][]a = new char[n+1][m+1];\r\n\t\t\tfor (int i = 1; i <= n; i++) {\r\n\t\t\t\tString s = next();\r\n\t\t\t\tfor (int j = 1; j <= m; j++) {\r\n\t\t\t\t\ta[i][j] = s.charAt(j-1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint ans = 0;\r\n\t\t\tfor (int i = 1; i <= n; i++) {\r\n\t\t\t\tfor (int j = 1; j <= m; j++) {\r\n\t\t\t\t\tif (a[i][j] != '.') {\r\n\t\t\t\t\t\tboolean found = false;\r\n\t\t\t\t\t\tint add = 1;\r\n\t\t\t\t\t\tfor (int k = i+1; k <= n; k++) {\r\n\t\t\t\t\t\t\tif (a[k][j] != '.') {\r\n\t\t\t\t\t\t\t\tif (a[i][j]=='v')\r\n\t\t\t\t\t\t\t\t\tadd = 0;\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (int k = i-1; k >= 1; k--) {\r\n\t\t\t\t\t\t\tif (a[k][j] != '.') {\r\n\t\t\t\t\t\t\t\tif (a[i][j]=='^')\r\n\t\t\t\t\t\t\t\t\tadd = 0;\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (int k = j+1; k <= m; k++) {\r\n\t\t\t\t\t\t\tif (a[i][k] != '.') {\r\n\t\t\t\t\t\t\t\tif (a[i][j]=='>')\r\n\t\t\t\t\t\t\t\t\tadd = 0;\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (int k = j-1; k >= 1; k--) {\r\n\t\t\t\t\t\t\tif (a[i][k] != '.') {\r\n\t\t\t\t\t\t\t\tif (a[i][j]=='<')\r\n\t\t\t\t\t\t\t\t\tadd = 0;\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!found) {\r\n\t\t\t\t\t\t\tans = -1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tans += add;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (ans==-1)\r\n\t\t\t\tSystem.out.println(\"IMPOSSIBLE\");\r\n\t\t\telse {\r\n\t\t\t\tSystem.out.println(ans);\r\n\t\t\t}\r\n\t\t}\r\n\t\tpw.close();\r\n\t}\r\n\r\n\tprivate static String next() throws IOException{\r\n\t\twhile (st==null || !st.hasMoreTokens())\r\n\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\treturn st.nextToken();\r\n\t}\r\n\r\n}\r\n", "idx": "4144"}
{"func": "package googlejam4.p161;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class A {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner in = new Scanner(new File(\"A-large (4).in\"));\n\t\tPrintWriter out = new PrintWriter(\"AL.out\");\n\t\tint tc = in.nextInt();\n\t\tint[] di = new int[128];\n\t\tint[] dj = new int[128];\n\n\t\tdi['v'] = 1;\n\t\tdj['v'] = 0;\n\n\t\tdi['>'] = 0;\n\t\tdj['>'] = 1;\n\n\t\tdi['^'] = -1;\n\t\tdj['^'] = 0;\n\n\t\tdi['<'] = 0;\n\t\tdj['<'] = -1;\n\n\t\tfor (int cc = 1; cc <= tc; cc++) {\n\t\t\tint n = in.nextInt();\n\t\t\tint m = in.nextInt();\n\t\t\tchar[][] map = new char[n][];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tmap[i] = in.next().toCharArray();\n\n\t\t\tint[] rcount = new int[n];\n\t\t\tint[] ccount = new int[m];\n\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t\tif (map[i][j] != '.') {\n\t\t\t\t\t\trcount[i]++;\n\t\t\t\t\t\tccount[j]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint count = 0;\n\t\t\tboolean impossible = false;\n\t\t\tfor (int i = 0; i < n && !impossible; i++) {\n\t\t\t\tfor (int j = 0; j < m && !impossible; j++) {\n\t\t\t\t\tif (map[i][j] != '.') {\n\t\t\t\t\t\tint ci = i + di[map[i][j]];\n\t\t\t\t\t\tint cj = j + dj[map[i][j]];\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\twhile (ci >= 0 && ci < n && cj >= 0 && cj < m) {\n\t\t\t\t\t\t\tif (map[ci][cj] != '.')\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\tci += di[map[i][j]];\n\t\t\t\t\t\t\tcj += dj[map[i][j]];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!found) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tif (rcount[i] == 1 && ccount[j] == 1) {\n\t\t\t\t\t\t\t\timpossible = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (impossible) {\n\t\t\t\tSystem.out.printf(\"Case #%d: %s\\n\", cc, \"IMPOSSIBLE\");\n\t\t\t\tout.printf(\"Case #%d: %s\\n\", cc, \"IMPOSSIBLE\");\n\n\t\t\t} else {\n\t\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", cc, count);\n\t\t\t\tout.printf(\"Case #%d: %d\\n\", cc, count);\n\t\t\t}\n\t\t}\n\t\tout.close();\n\t}\n}\n", "idx": "4161"}
{"func": "package googlejam4.p167;\n\nimport java.io.*;\nimport java.util.*;\n\n/**\n *\n * @author Tom\n */\npublic class GoogleCodeJam {\n    public static void main(String[] args) {\n        Scanner input = null;\n        //MagicTrick[] puzzles;\n        //CookieClickerAlpha[] puzzles;\n        Pegman[] puzzles;\n        try {\n            input = new Scanner(new FileInputStream(\"input.in\"));\n            //puzzles = MagicTrick.readFile(input);\n            //puzzles = CookieClickerAlpha.readFile(input);\n            puzzles = Pegman.readFile(input);\n            input.close();\n        }\n        catch(Exception e) {\n            System.out.println(\"hi\");\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }\n        \n        String[] results = new String[puzzles.length];\n        for(int i = 0; i < puzzles.length; ++i) {            \n            results[i] = \"Case #\" + (int)(i + 1) + \": \" + puzzles[i].solve();\n            System.out.println(\"Case #\" + (int)(i + 1) + \" done\");\n        }        \n        \n        PrintWriter output = null;\n        try {\n            output = new PrintWriter(new FileOutputStream(\"output.txt\"));\n            for(int i = 0; i < results.length; ++i) {\n                output.println(results[i]);\n            }\n            output.close();\n        }\n        catch(Exception e) {\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }\n        \n        /*PrintWriter output = null;\n        try {\n            output = new PrintWriter(new FileOutputStream(\"output.txt\"));\n            for(int i = 0; i < puzzles.length; ++i) {\n                output.println(\"Case #\" + (int)(i + 1) + \":\");\n                \n                String[] ans = puzzles[i].solve();\n                for(int j = 0; j < ans.length; ++j) {\n                    output.println(ans[j]);\n                }\n                \n                System.out.println(\"Case #\" + (int)(i + 1) + \" done\");\n            }\n            output.close();\n        }\n        catch(Exception e) {\n            System.out.println(e);\n            System.exit(0);\n            return;\n        }*/\n    }\n}\n", "idx": "4167"}
{"func": "package googlejam4.p168;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Pegman {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString fileName = args[0];\r\n\t\tPegman obj = new Pegman();\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(fileName));\n\t\tBufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(fileName + \".out\"));\n\t\t\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tfor (int i = 0; i < T; i++) {\n\t\t\tString str = br.readLine();\n\t\t\tStringTokenizer token = new StringTokenizer(str, \" \");\n\t\t\tint R = Integer.parseInt(token.nextToken());\n\t\t\tint C = Integer.parseInt(token.nextToken());\n\t\t\tint[][] map = new int[C][R];\n\t\t\tfor (int j = 0 ; j < R ; j++) {\n\t\t\t\tstr = br.readLine();\n\t\t\t\tfor (int k = 0 ; k < C ; k++) {\n\t\t\t\t\tswitch (str.charAt(k)) {\n\t\t\t\t\tcase '^':\n\t\t\t\t\t\tmap[k][j] = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '>':\n\t\t\t\t\t\tmap[k][j] = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'v':\n\t\t\t\t\t\tmap[k][j] = 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '<':\n\t\t\t\t\t\tmap[k][j] = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmap[k][j] = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint ans = 0;\n\t\t\tfor (int j = 0 ; j < R; j++) {\n\t\t\t\tfor (int k = 0 ; k < C ; k++) {\n\t\t\t\t\tif (map[k][j] == 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tint x = k;\n\t\t\t\t\tint y = j;\n\t\t\t\t\tboolean flg = false;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tx += obj.DIR[map[k][j]][0];\n\t\t\t\t\t\ty += obj.DIR[map[k][j]][1];\n\t\t\t\t\t\tif ( x < 0 || x >= C || y < 0 || y >= R ) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (map[x][y] != 0) {\n\t\t\t\t\t\t\tflg = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (flg) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tflg = false;\n\t\t\t\t\tfor (int d = 1 ; d <= 4 ; d++ ) {\n\t\t\t\t\t\tif (map[k][j] == d) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tx = k;\n\t\t\t\t\t\ty = j;\n\t\t\t\t\t\twhile (true) {\n\t\t\t\t\t\t\tx += obj.DIR[d][0];\n\t\t\t\t\t\t\ty += obj.DIR[d][1];\n\t\t\t\t\t\t\tif ( x < 0 || x >= C || y < 0 || y >= R ) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (map[x][y] != 0) {\n\t\t\t\t\t\t\t\tflg = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (flg) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (flg) {\n\t\t\t\t\t\tans += 1;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tans = -1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ans == -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tif (ans == -1) {\n\t\t\t\tbw.write(\"Case #\" + (i + 1) + \": \" + \"IMPOSSIBLE\");\n\t\t\t} else {\n\t\t\t\tbw.write(\"Case #\" + (i + 1) + \": \" + ans);\n\t\t\t}\n\t\t\tbw.write(\"\\r\\n\");\n\t\t}\n\t\tbw.close();\n\t\tbr.close();\r\n\t}\r\n\r\n\tfinal int[][] DIR = {{0,0},{0,-1},{1,0},{0,1},{-1,0}};\r\n}\r\n", "idx": "4168"}
{"func": "package googlejam4.p176;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n  static final String FILENAME = \"A-large\";\r\n  static final String IN = FILENAME + \".in\";\r\n  static final String OUT = FILENAME + \".out\";\r\n  Scanner sc;\r\n  BufferedWriter out;\r\n\r\n  public static void main(String args[]) throws Exception {\r\n    A r = new A();\n\tr.sc = new Scanner(new File(A.IN));\n\tr.out = new BufferedWriter(new FileWriter(A.OUT));\n\tint t = Integer.parseInt(r.sc.nextLine());\n\tfor (int i = 1; i <= t; i++) {\n\t  r.out.write(\"Case #\" + i + \": \");\n\t  int r1 = r.sc.nextInt();\n\tint c = r.sc.nextInt();\n\tString[] map = new String[r1];\n\tfor (int i2 = 0; i2 < r1; i2++) {\n\t  map[i2] = r.sc.next();\n\t}\n\tboolean[][][] limit = new boolean[r1][c][4];\n\tfor (int i4 = 0; i4 < r1; i4++) {\n\t  int j = 0;\n\t  // left\n\t  for (j = 0; j < c; j++) {\n\t    if (map[i4].charAt(j) != '.') {\n\t      break;\n\t    }\n\t  }\n\t  if (j < c) {\n\t    limit[i4][j][0] = true;\n\t  }\n\t  // right\n\t  for (j = c - 1; j >= 0; j--) {\n\t    if (map[i4].charAt(j) != '.') {\n\t      break;\n\t    }\n\t  }\n\t  if (j >= 0) {\n\t    limit[i4][j][1] = true;\n\t  }\n\t}\n\tfor (int j = 0; j < c; j++) {\n\t  int i1 = 0;\n\t  // top\n\t  for (i1 = 0; i1 < r1; i1++) {\n\t    if (map[i1].charAt(j) != '.') {\n\t      break;\n\t    }\n\t  }\n\t  if (i1 < r1) {\n\t    limit[i1][j][2] = true;\n\t  }\n\t  // bottom\n\t  for (i1 = r1 - 1; i1 >= 0; i1--) {\n\t    if (map[i1].charAt(j) != '.') {\n\t      break;\n\t    }\n\t  }\n\t  if (i1 >= 0) {\n\t    limit[i1][j][3] = true;\n\t  }\n\t}\n\tint res = 0;\n\tboolean ok = true;\n\tfor (int i3 = 0; i3 < r1; i3++) {\n\t  for (int j = 0; j < c; j++) {\n\t    if (limit[i3][j][0] && limit[i3][j][1] && limit[i3][j][2] && limit[i3][j][3]) {\n\t      ok = false;\n\t      break;\n\t    }\n\t    switch (map[i3].charAt(j)) {\n\t      case '<':\n\t        if (limit[i3][j][0]) {\n\t          res++;\n\t        }\n\t        break;\n\t      case '>':\n\t        if (limit[i3][j][1]) {\n\t          res++;\n\t        }\n\t        break;\n\t      case '^':\n\t        if (limit[i3][j][2]) {\n\t          res++;\n\t        }\n\t        break;\n\t      case 'v':\n\t        if (limit[i3][j][3]) {\n\t          res++;\n\t        }\n\t      default:\n\t        break;\n\t    }\n\t  }\n\t}\n\tr.out.write(ok ? Integer.toString(res) : \"IMPOSSIBLE\");\n\tr.out.newLine();\n\tr.out.flush();\n\t}\n\tr.sc.close();\n\tr.out.close();\r\n  }\r\n}\r\n", "idx": "4176"}
{"func": "package googlejam4.p178;\n\n\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class Solution {\n\n    public static void main(String[] args) throws Exception {\n        Solution r = new Solution();\n\t\tScanner sc = new Scanner(new FileReader(\"input.txt\"));\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n\t\t\n\t\tint caseCnt = sc.nextInt();\n\t\t\n\t\tfor (int caseNum = 0; caseNum < caseCnt; caseNum++) {\n\t\t    pw.print(\"Case #\" + (caseNum + 1) + \": \");\n\t\t\n\t\t    int R = sc.nextInt();\n\t\t    int C = sc.nextInt();\n\t\t    int res = 0;\n\t\t    String board[] = new String[R];\n\t\t    sc.nextLine();\n\t\t    for (int i = 0; i < R; i++) {\n\t\t        board[i] = sc.nextLine();\n\t\t    }\n\t\t    int max = 101;\n\t\t    int dirX[] = {-1, 1, 0, 0};\n\t\t    int dirY[] = {0, 0, 1, -1};\n\t\t    String dir = \"^v><\";\n\t\t    boolean possible = true;\n\t\t    for (int i = 0; i < R && possible; i++) {\n\t\t        for (int j = 0; j < C && possible; j++) {\n\t\t            int curDir = dir.indexOf(board[i].charAt(j));\n\t\t            int curX = i;\n\t\t            int curY = j;\n\t\t            boolean reachEnd = false;\n\t\t            if (curDir >= 0) {\n\t\t                for (int k = 0; k < max; k++) {\n\t\t                    curX = curX + dirX[curDir];\n\t\t                    curY = curY + dirY[curDir];\n\t\t                    if (curX < R && curX >= 0 && curY < C && curY >= 0) {\n\t\t                        if (board[curX].charAt(curY) != '.')\n\t\t                            break;\n\t\t                    } else {\n\t\t                        reachEnd = true;\n\t\t                        break;\n\t\t                    }\n\t\t                }\n\t\t                if (reachEnd) {\n\t\t                    possible = false;\n\t\t                    for (int d = 0; d < 4 && !possible; d++) {\n\t\t                        curX = i;\n\t\t                        curY = j;\n\t\t                        for (int k = 0; k < max; k++) {\n\t\t                            curX = curX + dirX[d];\n\t\t                            curY = curY + dirY[d];\n\t\t                            if (curX < R && curX >= 0 && curY < C && curY >= 0) {\n\t\t                                if (board[curX].charAt(curY) != '.') {\n\t\t                                    possible = true;\n\t\t                                    res++;\n\t\t                                    break;\n\t\t                                }\n\t\t                            } else {\n\t\t                                break;\n\t\t                            }\n\t\t                        }\n\t\t                    }\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    if (!possible) {\n\t\t        pw.println(\"IMPOSSIBLE\");\n\t\t    } else {\n\t\t        pw.println(res);\n\t\t    }\n\t\t}\n\t\t\n\t\tpw.flush();\n\t\tpw.close();\n\t\tsc.close();\n    }\n}", "idx": "4178"}
{"func": "package googlejam4.p184;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintStream;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"Round22015/A_l.in\"));\r\n\t\tSystem.setOut(new PrintStream(\"src/Round22015/A_l.out\"));\r\n\t\tint T = Integer.parseInt(br.readLine());\r\n\t\tfor (int t= 1; t <= T ;t++){\r\n\t\t\tSystem.out.print(String.format(\"Case #%d: \",t));\r\n\t\t\t\r\n\t\t\tString tmp[] = br.readLine().trim().split(\"\\\\s+\");\r\n\t\t\tint R = Integer.parseInt(tmp[0]);\r\n\t\t\tint C = Integer.parseInt(tmp[1]);\r\n\t\t\tString map[] = new String[R];\r\n\t\t\tfor (int i = 0 ;i < R ; i++){\r\n\t\t\t\tmap[i] = br.readLine();\r\n\t\t\t}\r\n\t\t\tint ans = 0;\r\n\t\t\tboolean isPosible = true;\r\n\t\t\tboolean chkR[][] = new boolean[R][C];\r\n\t\t\tboolean chkL[][] = new boolean[R][C];\r\n\t\t\tboolean chkU[][] = new boolean[R][C];\r\n\t\t\tboolean chkD[][] = new boolean[R][C];\r\n\t\t\tfor (int k = Math.max(R,C)+1; k > 0 ; k--){\r\n\t\t\t\tfor (int i = 0 ; i < R; i++){\r\n\t\t\t\t\tfor (int j = 0 ; j < C ;j++){\r\n\t\t\t\t\t\tif (map[i].charAt(j) != '.'){\r\n\t\t\t\t\t\t\tif (i > 0) chkD[i-1][j] = true;\r\n\t\t\t\t\t\t\tif (i < R-1) chkU[i+1][j] = true;\r\n\t\t\t\t\t\t\tif (j > 0) chkR[i][j-1] = true;\r\n\t\t\t\t\t\t\tif (j < C-1) chkL[i][j+1] = true;\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\tif (i > 0 && chkU[i-1][j]) {\r\n\t\t\t\t\t\t\tchkU[i][j] = true;\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\t if (j > 0 && chkL[i][j-1]) {\r\n\t\t\t\t\t\t\tchkL[i][j] = true;\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\t if (i < R-1 && chkD[i+1][j]) {\r\n\t\t\t\t\t\t\tchkD[i][j] = true;\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\t if (j < C-1 && chkR[i][j+1]) {\r\n\t\t\t\t\t\t\tchkR[i][j] = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (int i = 0 ; i < R ;i++){\r\n\t\t\t\tfor (int j = 0 ; j< C; j++){\r\n\t\t\t\t\tif (map[i].charAt(j)!='.'&&!chkL[i][j]&&!chkR[i][j]&&!chkU[i][j]&&!chkD[i][j]){\r\n\t\t\t\t\t\tisPosible = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!isPosible){\r\n\t\t\t\tSystem.out.println(\"IMPOSSIBLE \");\r\n\t\t\t} else {\r\n\t\t\t\tfor (int r = 0 ; r <R ; r++){\r\n\t\t\t\t\tfor (int c = 0 ; c < C ; c++){\r\n\t\t\t\t\t\tchar a = map[r].charAt(c);\r\n\t\t\t\t\t\tif (a == '<' && !chkL[r][c]) ans++;\r\n\t\t\t\t\t\tif (a == '>' && !chkR[r][c]) ans++;\r\n\t\t\t\t\t\tif (a == 'v' && !chkD[r][c]) ans++;\r\n\t\t\t\t\t\tif (a == '^' && !chkU[r][c]) ans++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(ans);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "4184"}
{"func": "package googlejam4.p185;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tfinal boolean DEBUG = false;\r\n\tfinal boolean isSmall = false;\r\n\tfinal String PACKAGE = \"gcj2015/r2\";\r\n\tfinal String PROBLEM = \"A\";\r\n\t\r\n\tint[][] d = {{-1, 0},{0,1},{1,0},{0,-1}};\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tA r = new A();\n\t\tif(!r.DEBUG){\n\t\t\ttry {\n\t\t\t\tif(r.isSmall)System.setIn(new FileInputStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-small-attempt1.in\")));\n\t\t\t\telse System.setIn(new FileInputStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-large.in\")));\n\t\t\t\tif(r.isSmall)System.setOut(new PrintStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-small_out.txt\")));\n\t\t\t\telse System.setOut(new PrintStream(new File(\"./src/\"+r.PACKAGE+\"/\"+r.PROBLEM+\"-large_out.txt\")));\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\tfor(int CASE=1;CASE<=T;CASE++){\n\t\t\tint r1 = sc.nextInt(), c = sc.nextInt();\n\t\t\tchar[][] map = new char[r1][];\n\t\t\tint[] countR = new int[r1], countC = new int[c];\n\t\t\tfor(int i=0;i<r1;i++){\n\t\t\t\tmap[i]=sc.next().toCharArray();\n\t\t\t\tfor(int j=0;j<c;j++)if(map[i][j]!='.'){\n\t\t\t\t\tcountR[i]++; countC[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean imp = false;\n\t\t\tfor(int i=0;i<r1;i++)for(int j=0;j<c;j++)if(map[i][j]!='.'){\n\t\t\t\tint rc = 0, rb = 0;\n\t\t\t\tfor(int k=0;k<c;k++)if(map[i][k]!='.')rc++;\n\t\t\t\tfor(int k=0;k<r1;k++)if(map[k][j]!='.')rb++;\n\t\t\t\tif(rc==1 && rb==1)imp=true;\n\t\t\t}\n\t\t\tif(imp){\n\t\t\t\tSystem.out.println(\"Case #\"+CASE+\": IMPOSSIBLE\"); continue;\n\t\t\t}\n\t\t\t\n\t\t\tint res = 0;\n\t\t\tfor(int i=0;i<r1;i++)for(int j=0;j<c;j++)if(map[i][j]!='.'){\n\t\t\t\t\n\t\t\t\tint k = 0;\n\t\t\t\tswitch(map[i][j]){\n\t\t\t\tcase '^': k = 0; break;\n\t\t\t\tcase '>': k = 1; break;\n\t\t\t\tcase 'v': k = 2; break;\n\t\t\t\tcase '<': k = 3; break;\n\t\t\t\t}\n\t\t\t\tint pi = i+r.d[k][0], pj = j+r.d[k][1];\n\t\t\t\tboolean out = true;\n\t\t\t\t\n\t\t\t\twhile(0 <= pi && pi < r1 && 0 <= pj && pj < c){\n\t\t\t\t\tif(map[pi][pj]!='.'){\n\t\t\t\t\t\tout = false; break;\n\t\t\t\t\t}\n\t\t\t\t\tpi+=r.d[k][0]; pj+=r.d[k][1];\n\t\t\t\t}\n\t\t\t\tif(out)res++;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\"+CASE+\": \"+res);\n\t\t}\r\n\t}\r\n}\r\n", "idx": "4185"}
{"func": "package googlejam4.p186;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class A\r\n{\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader in=new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\r\n\t\tint numRuns=Integer.parseInt(in.readLine());\r\n\t\tfor (int run=1; run<=numRuns; run++)\r\n\t\t{\r\n\t\t\tStringTokenizer tok=new StringTokenizer(in.readLine());\r\n\t\t\tint r=Integer.parseInt(tok.nextToken()), c=Integer.parseInt(tok.nextToken());\r\n\t\t\tint[][] dir=new int[r][c];\r\n\t\t\tint[][] row=new int[r][c];\r\n\t\t\tint[][] col=new int[c][r];\r\n\t\t\tint[] inRow=new int[r];\r\n\t\t\tint[] inCol=new int[c];\r\n\t\t\t\r\n\t\t\tfor (int i=0; i<r; i++)\r\n\t\t\t{\r\n\t\t\t\tString line=in.readLine();\r\n\t\t\t\tfor (int j=0; j<c; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (line.charAt(j)!='.')\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trow[i][inRow[i]]=j;\r\n\t\t\t\t\t\tinRow[i]++;\r\n\t\t\t\t\t\tcol[j][inCol[j]]=i;\r\n\t\t\t\t\t\tinCol[j]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (line.charAt(j)=='<')\r\n\t\t\t\t\t\tdir[i][j]=0;\r\n\t\t\t\t\telse if (line.charAt(j)=='^')\r\n\t\t\t\t\t\tdir[i][j]=1;\r\n\t\t\t\t\telse if (line.charAt(j)=='>')\r\n\t\t\t\t\t\tdir[i][j]=2;\r\n\t\t\t\t\telse if (line.charAt(j)=='v')\r\n\t\t\t\t\t\tdir[i][j]=3;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint changes=0;\r\n\t\t\tboolean[] okay={false, false, false, false};\r\n\t\t\tint colPos;\r\n\t\t\tfor (int i=0; i<r && changes>=0; i++)\r\n\t\t\t\tfor (int j=0; j<inRow[i] && changes>=0; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tcolPos=Arrays.binarySearch(col[row[i][j]], 0, inCol[row[i][j]], i);\r\n\t\t\t\t\tokay[0]=j>0;\r\n\t\t\t\t\tokay[1]=colPos>0;\r\n\t\t\t\t\tokay[2]=j<inRow[i]-1;\r\n\t\t\t\t\tokay[3]=colPos<inCol[row[i][j]]-1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (okay[dir[i][row[i][j]]])\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\telse if (okay[0] || okay[1] || okay[2] || okay[3])\r\n\t\t\t\t\t\tchanges++;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tchanges=-1;\r\n\t\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\"+run+\": \");\r\n\t\t\tif (changes==-1)\r\n\t\t\t\tSystem.out.println(\"IMPOSSIBLE\");\r\n\t\t\telse\r\n\t\t\t\tSystem.out.println(changes);\r\n\t\t}\r\n\t}\r\n}", "idx": "4186"}
{"func": "package googlejam4.p197;\nimport java.util.*;\r\n\r\npublic class A {\r\nstatic int dx[] = {0, -1, 0, 1, 0};\r\nstatic int dy[] = {0, 0, 1, 0, -1};\r\npublic static void main(String [] args) {\r\n\tScanner scanner = new Scanner(System.in);\r\n\tint nCase = scanner.nextInt();\r\n\t\r\n\tfor (int nc = 1; nc <= nCase; nc++) {\r\n\t\tint R = scanner.nextInt();\r\n\t\tint C = scanner.nextInt();\r\n\t\tscanner.nextLine();\r\n\t\t\r\n\t\tchar[][] map = new char[R][C];\r\n\t\t\r\n\t\tfor (int i = 0; i < R; i++) {\r\n\t\t\tString in = scanner.nextLine();\r\n\t\t\tfor (int j = 0; j < C; j++)\r\n\t\t\t\tswitch (in.charAt(j)) {\r\n\t\t\t\t\tcase '.':\r\n\t\t\t\t\t\tmap[i][j] = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '^':\r\n\t\t\t\t\t\tmap[i][j] = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '>':\r\n\t\t\t\t\t\tmap[i][j] = 2;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'v':\r\n\t\t\t\t\t\tmap[i][j] = 3;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase '<':\r\n\t\t\t\t\t\tmap[i][j] = 4;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tint ans = 0;\r\n\t\t\r\n\t\tfor (int i = 0; i < R && ans >= 0; i++)\r\n\t\t\tfor (int j = 0; j < C; j++)\r\n\t\t\t\tif (map[i][j] > 0) {\r\n\t\t\t\t\tint R1 = map.length;\n\t\t\t\t\tint C1 = map[0].length;\t\n\t\t\t\t\tint oldDir = map[i][j];\n\t\t\t\t\tint ans1 = -1;\n\t\t\t\t\tfor (int dir = 1; dir <= 4 && ans1 != 0; dir++) {\n\t\t\t\t\t\tint nx = i + dx[dir];\n\t\t\t\t\t\tint ny = j + dy[dir];\n\t\t\t\t\t\twhile (0 <= nx && nx < R1 && 0 <= ny && ny < C1) {\n\t\t\t\t\t\t\tif (map[nx][ny] > 0) {\n\t\t\t\t\t\t\t\tif (dir == oldDir) {\n\t\t\t\t\t\t\t\t\tans1 = 0;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tans1 = 1;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnx = nx + dx[dir];\n\t\t\t\t\t\t\tny = ny + dy[dir];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//System.out.printf(\"x:%d y:%d oldDir:%d dir:%d ans:%d\", x, y, oldDir, dir, ans);\n\t\t\t\t\t}\n\t\t\t\t\tint need = ans1;\r\n\t\t\t\t\tif (need < 0) {\r\n\t\t\t\t\t\tans = -1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\tans += need;\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\tif (ans >= 0)\r\n\t\t\tSystem.out.println(\"Case #\" + nc + \": \" + ans);\r\n\t\telse\r\n\t\t\tSystem.out.println(\"Case #\" + nc + \": IMPOSSIBLE\");\r\n\t}\r\n}\r\n}", "idx": "4197"}
{"func": "package googlejam4.p203;\nimport java.io.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class Pegman {\n\tstatic int c;\n\tstatic char[][] arr;\n\n\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"in.in\"));\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"out.out\"));\n\t\tint t = Integer.parseInt(br.readLine());\n\t\tfor(c = 1; c <= t; c++){\n\t\t\tbw.write(\"Case #\" + c + \": \");\n\t\t\tString line = br.readLine();\n\t\t\tString[] fields = line.split(\" \");\n\t\t\tint r = Integer.parseInt(fields[0]);\n\t\t\tint c = Integer.parseInt(fields[1]);\n\t\t\tarr = new char[r][c];\n\t\t\tfor(int i = 0; i < r; i++){\n\t\t\t\tline = br.readLine();\n\t\t\t\tfor(int j = 0; j < c; j++){\n\t\t\t\t\tarr[i][j] = line.charAt(j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean viable = true;\n\t\t\tint count = 0;\n\t\t\tfor(int i = 0; i < r; i++){\n\t\t\t\tfor(int j = 0; j < c; j++){\n\t\t\t\t\tif(arr[i][j] != '.'){\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\tif(arr[i][j] == '>'){\n\t\t\t\t\t\t\tfor(int k = j + 1; k < c; k++){\n\t\t\t\t\t\t\t\tif(arr[i][k] != '.'){\n\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(arr[i][j] == '<'){\n\t\t\t\t\t\t\tfor(int k = j - 1; k >= 0; k--){\n\t\t\t\t\t\t\t\tif(arr[i][k] != '.'){\n\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(arr[i][j] == 'v'){\n\t\t\t\t\t\t\tfor(int k = i + 1; k < r; k++){\n\t\t\t\t\t\t\t\tif(arr[k][j] != '.'){\n\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(arr[i][j] == '^'){\n\t\t\t\t\t\t\tfor(int k = i - 1; k >= 0; k--){\n\t\t\t\t\t\t\t\tif(arr[k][j] != '.'){\n\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(found){\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tboolean works = false;\n\t\t\t\t\t\tfor(int k = 0; k < r; k++){\n\t\t\t\t\t\t\tif(k == i) continue;\n\t\t\t\t\t\t\tif(arr[k][j] != '.'){\n\t\t\t\t\t\t\t\tworks = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(int k = 0; k < c; k++){\n\t\t\t\t\t\t\tif(k == j) continue;\n\t\t\t\t\t\t\tif(arr[i][k] != '.'){\n\t\t\t\t\t\t\t\tworks = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(works){\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tviable = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!viable) break;\n\t\t\t}\n\t\t\tif(viable){\n\t\t\t\tbw.write(count + \"\\n\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tbw.write(\"IMPOSSIBLE\\n\");\n\t\t\t}\n\n\t\t}\n\t\tbr.close();\n\t\tbw.close();\n\t}\n\n\n\n\n\n\n\n\n\n}", "idx": "4203"}
{"func": "package googlejam4.p205;\nimport java.util.*;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\r\n\t\tint t = sc.nextInt();\r\n\r\n\t\tfor (int caseNum = 1;  caseNum <= t; caseNum++) {\r\n\t\t\tint r = sc.nextInt();\r\n\t\t\tint c = sc.nextInt();\r\n\r\n\t\t\tchar[][] grid = new char[r][c];\r\n\t\t\tfor (int i = 0; i < r; i++) {\r\n\t\t\t\tgrid[i] = sc.next().toCharArray();\r\n\t\t\t}\r\n\r\n\t\t\tint count = 0;\r\n\t\t\tboolean isImpossible = false;\r\n\t\t\tfor (int i = 0; i < r; i++) {\r\n\t\t\t\tboolean firstFound = false;\r\n\t\t\t\tboolean lastFound = false;\r\n\t\t\t\tchar first = '.';\r\n\t\t\t\tint firstIdx = -1;\r\n\t\t\t\tchar last = '.';\r\n\t\t\t\tint lastIdx = -1;\r\n\t\t\t\tfor (int j = 0; j < c; j++) {\r\n\t\t\t\t\tif (!firstFound) {\r\n\t\t\t\t\t\tif (grid[i][j] != '.') {\r\n\t\t\t\t\t\t\tfirst = grid[i][j];\r\n\t\t\t\t\t\t\tfirstIdx = j;\r\n\t\t\t\t\t\t\tfirstFound = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (grid[i][j] != '.') {\r\n\t\t\t\t\t\t\tlast = grid[i][j];\r\n\t\t\t\t\t\t\tlastIdx = j;\r\n\t\t\t\t\t\t\tlastFound = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (lastFound) {\r\n\t\t\t\t\tif (first == '<') {\r\n\t\t\t\t\t\tcount += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last == '>') {\r\n\t\t\t\t\t\tcount += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (first == '<' || first == '>') {\r\n\t\t\t\t\t\tgrid[i][firstIdx] = '*';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// System.out.printf(\"first: %c, firstIdx: %d, last: %c, lastIdx: %d\\n\", first, firstIdx, last, lastIdx);\r\n\t\t\t\t// System.out.println(i + \" \" + count);\r\n\t\t\t}\r\n\r\n\t\t\tfor (int j = 0; j < c; j++) {\r\n\t\t\t\tboolean firstFound = false;\r\n\t\t\t\tboolean lastFound = false;\r\n\t\t\t\tchar first = '.';\r\n\t\t\t\tint firstIdx = -1;\r\n\t\t\t\tchar last = '.';\r\n\t\t\t\tint lastIdx = -1;\r\n\t\t\t\tfor (int i = 0; i < r; i++) {\r\n\t\t\t\t\tif (grid[i][j] == '*') {\r\n\t\t\t\t\t\tcount += 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!firstFound) {\r\n\t\t\t\t\t\tif (grid[i][j] != '.') {\r\n\t\t\t\t\t\t\tfirst = grid[i][j];\r\n\t\t\t\t\t\t\tfirstIdx = i;\r\n\t\t\t\t\t\t\tfirstFound = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (grid[i][j] != '.') {\r\n\t\t\t\t\t\t\tlast = grid[i][j];\r\n\t\t\t\t\t\t\tlastIdx = i;\r\n\t\t\t\t\t\t\tlastFound = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (lastFound) {\r\n\t\t\t\t\tif (first == '^') {\r\n\t\t\t\t\t\tcount += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last == 'v') {\r\n\t\t\t\t\t\tcount += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (first == '^' || first == 'v') {\r\n\t\t\t\t\t\tgrid[firstIdx][j] = '&';\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (first == '*') {\r\n\t\t\t\t\t\tisImpossible = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\tfor (int i = 0; i < r; i++) {\r\n\t\t\t\tfor (int j = 0; j < c; j++) {\r\n\t\t\t\t\tSystem.out.print(grid[i][j]);\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t}\r\n\t\t\tSystem.out.println(count);\r\n\t\t\t*/\r\n\r\n\t\t\tfor (int i = 0; i < r; i++) {\r\n\t\t\t\tboolean firstFound = false;\r\n\t\t\t\tboolean lastFound = false;\r\n\t\t\t\tboolean ampFound = false;\r\n\t\t\t\tchar first = '.';\r\n\t\t\t\tint firstIdx = -1;\r\n\t\t\t\tchar last = '.';\r\n\t\t\t\tint lastIdx = -1;\r\n\t\t\t\tfor (int j = 0; j < c; j++) {\r\n\t\t\t\t\tif (grid[i][j] == '&') {\r\n\t\t\t\t\t\tampFound = true;\r\n\t\t\t\t\t\tcount += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!firstFound) {\r\n\t\t\t\t\t\tif (grid[i][j] != '.') {\r\n\t\t\t\t\t\t\tfirst = grid[i][j];\r\n\t\t\t\t\t\t\tfirstIdx = j;\r\n\t\t\t\t\t\t\tfirstFound = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (grid[i][j] != '.') {\r\n\t\t\t\t\t\t\tlast = grid[i][j];\r\n\t\t\t\t\t\t\tlastIdx = j;\r\n\t\t\t\t\t\t\tlastFound = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (ampFound && !lastFound) {\r\n\t\t\t\t\tisImpossible = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// System.out.println(count);\r\n\r\n\t\t\t/*\r\n\t\t\tfor (int i = 0; i < r; i++) {\r\n\t\t\t\tfor (int j = 0; j < c; j++) {\r\n\t\t\t\t\tSystem.out.print(grid[i][j]);\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t\t\r\n\t\t\tif (isImpossible) {\r\n\t\t\t\tSystem.out.printf(\"Case #%d: IMPOSSIBLE\\n\", caseNum);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", caseNum, count);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "4205"}
{"func": "package googlejam5.p005;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class A {\n\t\n\tPrintWriter out;\n\t\n\tint N, D;\n\tlong S0, As, Cs, Rs;\n\tlong M0, Am, Cm, Rm;\n\t\n\tint[] S;\n\tint[] M;\n\t\n\tpublic static int __ID = 0;\n\tpublic static boolean __ERROR = false;\n\t\n\tpublic static void main(String[] args) {\n\t\tint pN = 1;\n\t\tif (args.length == 0) {\n\t\t\ttry {\n\t\t\t\tSystem.setIn(new BufferedInputStream(new FileInputStream(A.class.getName() + \".in\")));\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t} else {\n\t\t\tpN = Integer.parseInt(args[0]);\n\t\t}\n\t\tPrintStream out = System.out;\n\t\tSystem.setOut(null);\n\t\tScanner sc = new Scanner(System.in);\n\t\tfinal int caseN = sc.nextInt();\n\t\tfinal A[] solvers = new A[caseN];\n\t\tStringWriter[] outs = new StringWriter[caseN];\n\t\tfor (int i = 0; i < caseN; i++) {\n\t\t\tsolvers[i] = new A();\n\t\t\touts[i] = new StringWriter();\n\t\t\tsolvers[i].out = new PrintWriter(outs[i]);\n\t\t\tsolvers[i].out.printf(\"Case #%d: \", i + 1);\n\t\t\tA r = solvers[i];\n\t\t\tr.N = sc.nextInt();\n\t\t\tr.D = sc.nextInt();\n\t\t\tr.S0 = sc.nextLong();\n\t\t\tr.As = sc.nextLong();\n\t\t\tr.Cs = sc.nextLong();\n\t\t\tr.Rs = sc.nextLong();\n\t\t\tr.M0 = sc.nextLong();\n\t\t\tr.Am = sc.nextLong();\n\t\t\tr.Cm = sc.nextLong();\n\t\t\tr.Rm = sc.nextLong();\n\t\t}\n\t\tThread[] ts = new Thread[pN];\n\t\tfor (int i = 0; i < pN; i++) {\n\t\t\tts[i] = new Thread() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor (;;) {\n\t\t\t\t\t\tint id;\n\t\t\t\t\t\tsynchronized (A.class) {\n\t\t\t\t\t\t\tif (__ID == caseN) return;\n\t\t\t\t\t\t\tid = __ID++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tA r = solvers[id];\n\t\t\t\t\t\t\tr.S = new int[r.N];\n\t\t\t\t\t\t\tr.M = new int[r.N];\n\t\t\t\t\t\t\tr.S[0] = (int)r.S0;\n\t\t\t\t\t\t\tr.M[0] = (int)r.M0;\n\t\t\t\t\t\t\tfor (int i1 = 1; i1 < r.N; i1++) {\n\t\t\t\t\t\t\t\tr.S[i1] = (int)((r.S[i1 - 1] * r.As + r.Cs) % r.Rs);\n\t\t\t\t\t\t\t\tr.M[i1] = (int)((r.M[i1 - 1] * r.Am + r.Cm) % r.Rm);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tr.M[0] = 0;\n\t\t\t\t\t\t\tfor (int i2 = 1; i2 < r.N; i2++) r.M[i2] %= i2;\n\t\t\t\t\t\t\tint[] min = new int[r.N], max = new int[r.N];\n\t\t\t\t\t\t\tmin[0] = max[0] = r.S[0];\n\t\t\t\t\t\t\tfor (int i = 1; i < r.N; i++) {\n\t\t\t\t\t\t\t\tmin[i] = max[i] = r.S[i];\n\t\t\t\t\t\t\t\tmin[i] = min(min[i], min[r.M[i]]);\n\t\t\t\t\t\t\t\tmax[i] = max(max[i], max[r.M[i]]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tint[] sum = new int[1000010];\n\t\t\t\t\t\t\tfor (int i = 0; i < r.N; i++) if (min[i] + r.D >= max[i]) {\n\t\t\t\t\t\t\t\tsum[max(0, max[i] - r.D)]++;\n\t\t\t\t\t\t\t\tsum[min[i] + 1]--;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (int i = 0; i < sum.length - 1; i++) {\n\t\t\t\t\t\t\t\tsum[i + 1] += sum[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tint res = 0;\n\t\t\t\t\t\t\tfor (int i = 0; i < sum.length; i++) res = max(res, sum[i]);\n\t\t\t\t\t\t\tr.out.println(res);\n\t\t\t\t\t\t} catch (RuntimeException e) {\n\t\t\t\t\t\t\t__ERROR = true;\n\t\t\t\t\t\t\tSystem.err.printf(\"Error in case %d:%n\", id + 1);\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsolvers[id].out.flush();\n\t\t\t\t\t\tsolvers[id] = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tts[i].start();\n\t\t}\n\t\tfor (int i = 0; i < pN; i++) {\n\t\t\ttry {\n\t\t\t\tts[i].join();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < caseN; i++) {\n\t\t\tout.print(outs[i].toString());\n\t\t}\n\t\tif (__ERROR) out.printf(\"%nError occured!!!%n\");\n\t}\n\t\n}\n", "idx": "5005"}
{"func": "package googlejam5.p014;\nimport java.util.*;\nimport static java.lang.Math.*;\n\npublic class A {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int zz = 1; zz <= T; zz++) {\n            int N = in.nextInt();\n            int D = in.nextInt();\n            long S0 = in.nextInt();\n            long As = in.nextInt();\n            long Cs = in.nextInt();\n            long Rs = in.nextInt();\n            long M0 = in.nextInt();\n            long Am = in.nextInt();\n            long Cm = in.nextInt();\n            long Rm = in.nextInt();\n\n            int[] P = new int[N];\n            int[] S = new int[N];\n            P[0] = (int)M0;\n            S[0] = (int)S0;\n            for (int i = 1; i < N; i++) {\n                P[i] = (int)((P[i-1] * Am + Cm) % Rm);\n                S[i] = (int)((S[i-1] * As + Cs) % Rs);\n            }\n\n            int[] L = new int[N];\n            int[] H = new int[N];\n            L[0] = S[0];\n            H[0] = S[0];\n            ArrayList<Integer> add = new ArrayList<Integer>();\n            ArrayList<Integer> remove = new ArrayList<Integer>();\n            for (int i = 0; i < N; i++) {\n                if (i != 0) {\n                    P[i] %= i;\n                    L[i] = L[P[i]];\n                    H[i] = H[P[i]];\n                    L[i] = min(L[i], S[i]);\n                    H[i] = max(H[i], S[i]);\n                }\n\n                int a = H[i] - D;\n                int r = L[i];\n                //System.out.println(i+\" \"+a+\" \"+r);\n                if (a <= r) {\n                    add.add(a);\n                    remove.add(r);\n                }\n            }\n            Collections.sort(add);\n            Collections.sort(remove);\n            int aat = 0;\n            int rat = 0;\n            int total = 0;\n            int ans = 0;\n            while (aat < add.size() && rat < remove.size()) {\n                if (add.get(aat) <= remove.get(rat)) {\n                    total++;\n                    aat++;\n                } else {\n                    total--;\n                    rat++;\n                }\n                ans = max(ans, total);\n            }\n            System.out.format(\"Case #%d: %d\\n\", zz, ans);\n        }\n    }\n}\n", "idx": "5014"}
{"func": "package googlejam6.p373;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.util.*;\n\n/**\n * Created by danielmckee on 4/15/16.\n */\npublic class RankFile {\n    Scanner in;\n    PrintWriter out;\n    int n;\n    String s;\n\n    public RankFile() throws FileNotFoundException, UnsupportedEncodingException {\n        in = new Scanner(new FileReader(\"rankfile_small_in.txt\"));\n        out = new PrintWriter(\"rankfile_large_out.txt\", \"UTF-8\");\n    }\n\n\n    public static void main(String[] args) {\n        RankFile r = null;\n        try {\n            r = new RankFile();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        int number = r.in.nextInt();\n\t\tfor (int i = 0; i < number; i++) {\n\t\t    r.n = r.in.nextInt();\n\t\t    Map<Integer, Integer> counts = new TreeMap<>();\n\t\t    for (int k = 0; k < 2*r.n-1; k++) {\n\t\t        for (int j = 0; j < r.n; j++) {\n\t\t            int entry = r.in.nextInt();\n\t\t            if (counts.containsKey(entry)) {\n\t\t                counts.put(entry, counts.get(entry) + 1);\n\t\t            } else {\n\t\t                counts.put(entry, 1);\n\t\t            }\n\t\t        }\n\t\t    }\n\t\t    String strOut = \"\";\n\t\t    ArrayList<Integer> outputs = new ArrayList<>();\n\t\t    for (Integer num: counts.keySet()) {\n\t\t        if (counts.get(num)%2 != 0) {\n\t\t            outputs.add(num);\n\t\t        }\n\t\t    }\n\t\t    Collections.sort(outputs);\n\t\t    for (Integer num: outputs) {\n\t\t        strOut = strOut + String.valueOf(num) + \" \";\n\t\t    }\n\t\t    strOut = strOut.substring(0, strOut.length()-1); // cut off space\n\t\t    int case_num = i + 1;\n\t\t    //System.out.println(\"Case #\" + case_num + \": \" + output);\n\t\t    r.out.println(\"Case #\" + case_num + \": \" + strOut);\n\t\t}\n\t\tr.out.close();\n    }\n}\n", "idx": "6373"}
{"func": "package googlejam6.p003;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class B {\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\r\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"out.txt\"));\r\n\r\n\t\tint N = Integer.parseInt(br.readLine());\r\n\r\n\t\tfor(int p = 0; p < N; p++) {\r\n\t\t\tint n = Integer.parseInt(br.readLine());\r\n\t\t\tSet<Integer> set = new HashSet<Integer>();\r\n\t\t\tfor(int i = 0; i < 2*n-1; i++) {\r\n\t\t\t\tString[] s = br.readLine().split(\" \");\r\n\t\t\t\tfor(int j = 0; j < n; j++) {\r\n\t\t\t\t\tint v = Integer.parseInt(s[j]);\r\n\t\t\t\t\tif(set.contains(v)) {\r\n\t\t\t\t\t\tset.remove(v);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tset.add(v);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tint[] ret = new int[n];\r\n\t\t\tint at = 0;\r\n\t\t\tfor(int vv : set) {\r\n\t\t\t\tret[at] = vv;\r\n\t\t\t\tat++;\r\n\t\t\t}\r\n\t\t\tArrays.sort(ret);\r\n\r\n\t\t\tpw.print(\"Case #\" + (p+1) + \":\");\r\n\t\t\tfor(int i = 0; i < n; i++) pw.print(\" \" + ret[i]);\r\n\t\t\tpw.println();\r\n\t\t}\r\n\r\n\r\n\t\tpw.flush();\r\n\t\tpw.close();\r\n\r\n\t}\r\n}", "idx": "6003"}
{"func": "package googlejam6.p009;\nimport java.util.*;\nimport java.io.*;\n\npublic class B {\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tScanner qwe = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(\"B.out\");\n\t\t\n\t\t\n\t\tint T  = qwe.nextInt();\n\t\t\n\t\tfor(int cse = 1; cse <= T; cse++){\n\t\t\tint N = qwe.nextInt();\n\t\t\t\n\t\t\tint[] counts =  new int[2501];\n\t\t\t\n\t\t\tfor (int i = 0; i < 2*N-1; i++) {\n\t\t\t\t\n\t\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\t\tcounts[qwe.nextInt()]++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tout.print(\"Case #\"+cse+\": \");\n\t\t\tfor (int i = 0; i < counts.length; i++) {\n\t\t\t\tif(counts[i] % 2 == 1) out.print(i+\" \");\n\t\t\t}\n\t\t\tout.println();\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tout.close();\n\t\tqwe.close();\n\t}\n\n}\n", "idx": "6009"}
{"func": "package googlejam6.p010;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class B {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int numCases = sc.nextInt();\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n            int N = sc.nextInt();\n            Map<Integer, Integer> counts = new HashMap<>();\n            for (int i = 0; i < 2 * N - 1; i++) {\n                for (int j = 0; j < N; j++) {\n                    int height = sc.nextInt();\n                    if (counts.containsKey(height)) {\n                        counts.put(height, counts.get(height) + 1);\n                    } else {\n                        counts.put(height, 1);\n                    }\n                }\n            }\n            List<Integer> heights = new ArrayList<>();\n            for (Map.Entry<Integer, Integer> entry : counts.entrySet()) {\n                if (entry.getValue() % 2 != 0) {\n                    heights.add(entry.getKey());\n                }\n            }\n            Collections.sort(heights);\n            System.out.print(\"Case #\" + caseNum + \":\");\n            for (int h : heights) {\n                System.out.print(\" \" + h);\n            }\n            System.out.println();\n        }\n    }\n}\n", "idx": "6010"}
{"func": "package googlejam6.p012;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class RankAndFile {\r\n    \r\n    public static void main(String[] args) throws Exception {\r\n        File inputFile = new File(\"B-large.in\");\r\n        Scanner in = new Scanner(inputFile);\r\n        File outputFile = new File(\"output.txt\");\r\n        PrintWriter out = new PrintWriter(outputFile);\r\n\r\n        int T = in.nextInt();\r\n        for (int t=0; t<T; t++) {\r\n            int N = in.nextInt();\r\n            int[] stat = new int[2501];\r\n            for (int i=0; i<N*(2*N-1); i++) {\r\n                int height = in.nextInt();\r\n                stat[height]++;\r\n            }\r\n            StringBuilder output = new StringBuilder();\r\n            for (int i=1; i<=2500; i++) {\r\n                if (stat[i]%2 == 1) {\r\n                    output.append(' ').append(i);\r\n                }\r\n            }\r\n            \r\n            out.println(\"Case #\"+(t+1)+\":\" + output);\r\n        }\r\n\r\n        out.close();\r\n    }\r\n    \r\n}\r\n", "idx": "6012"}
{"func": "package googlejam6.p014;\nimport java.util.*;\n\npublic class B {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint C = in.nextInt();\n\t\tfor (int thisCase = 1; thisCase <= C; thisCase++) {\n\t\t\tint counts[] = new int[2500];\n\t\t\tint N = in.nextInt();\n\t\t\tfor (int i = 0; i < 2*N-1; i++) {\n\t\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\t\tcounts[in.nextInt()-1]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.printf(\"Case #%d:\", thisCase);\n\t\t\tfor (int i = 0; i < 2500; i++) {\n\t\t\t\tif (counts[i] %2 == 1) {\n\t\t\t\t\tSystem.out.printf(\" %d\", (i+1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}", "idx": "6014"}
{"func": "package googlejam6.p015;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\n\r\npublic class Round1B {\r\n\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tPrintWriter pw = new PrintWriter(\"B.txt\");\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor(int c=1;c<=T;c++){\r\n\t\t\tint n = Integer.parseInt(in.readLine());\r\n\t\t\tint[] hcount = new int[2600];\r\n\t\t\tfor(int i=0;i<2*n-1; i++){\r\n\t\t\t\tString[] spl = in.readLine().split(\" \");\r\n\t\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\t\thcount[Integer.parseInt(spl[j])]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tString ans = \"\";\r\n\t\t\tfor(int i=1;i<=2500;i++){\r\n\t\t\t\tif(hcount[i]%2!=0){\r\n\t\t\t\t\tans = ans+\" \"+i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpw.println(\"Case #\"+c+\":\"+ans);\r\n\t\t}\r\n\t\tpw.close();\r\n\t}\r\n\r\n}\r\n", "idx": "6015"}
{"func": "package googlejam6.p016;\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class B {\r\n\tScanner sc;\r\n\tPrintWriter pw;\r\n\tint N;\r\n\tint[][] h;\r\n\t\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tString filePrefix = args.length>0?args[0]:\"B-large\";\r\n\r\n\t\ttry {\r\n\t\t\tB r = new B();\n\t\t\tr.sc = new Scanner(new FileReader(filePrefix + \".in\"));\n\t\t\tr.pw = new PrintWriter(new FileWriter(filePrefix + \".out\"));\n\t\t\tint ntest = r.sc.nextInt();\n\t\t\tfor(int test=1; test<=ntest; test++) {\n\t\t\t\tScanner sc = r.sc;\n\t\t\t\tr.N = sc.nextInt();\n\t\t\t\tr.h = new int[2*r.N-1][r.N];\n\t\t\t\tfor(int i=0; i<2*r.N-1; i++)\n\t\t\t\t\tfor(int j=0; j<r.N; j++)\n\t\t\t\t\t\tr.h[i][j] = sc.nextInt();\n\t\t\t\tr.pw.print(\"Case #\" + test + \": \");\n\t\t\t\tSystem.out.print(\"Case #\" + test + \": \");\n\t\t\t\tint[] count = new int[2500];\n\t\t\t\tfor(int i=0; i<2*r.N-1; i++)\n\t\t\t\t\tfor(int j=0; j<r.N; j++)\n\t\t\t\t\t\tcount[r.h[i][j]-1]++;\n\t\t\t\t\n\t\t\t\tint[] ans = new int[r.N];\n\t\t\t\tint idx=0;\n\t\t\t\tfor(int i=0; i<2500; i++)\n\t\t\t\t\tif(count[i]%2!=0)\n\t\t\t\t\t\tans[idx++] = i+1;\n\t\t\t\t\n\t\t\t\tfor(int i=0; i<r.N; i++) {\n\t\t\t\t\tObject s = ans[i] + (i==r.N-1 ? \"\\n\" : \" \");\n\t\t\t\t\tr.pw.print(s);\n\t\t\t\t\tSystem.out.print(s);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"Finished.\");\n\t\t\tr.sc.close();\n\t\t\tr.pw.close();\r\n\t\t} catch(Exception e) {\r\n\t\t\tSystem.err.println(e);\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "idx": "6016"}
{"func": "package googlejam6.p017;\nimport java.util.*;\r\n\r\npublic class Yes{\r\n\r\n\tpublic static void main(String[] args){\r\n\t\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\t\r\n\t\tint cas = in.nextInt();\r\n\t\t\r\n\t\tfor(int c = 1; c <= cas; c++)\r\n\t\t{\r\n\t\t\tSystem.out.print(\"Case #\" + c + \": \");\r\n\t\t\t\tint num = in.nextInt();\r\n\t\t\t\tint as = (num * 2) - 1;\r\n\t\t\t\tas *= num;\r\n\t\t\t\tint exp = num;\r\n\t\t\t\tint[] h = new int[2501];\r\n\t\t\t\tfor(int i = 0; i < as; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\th[in.nextInt()]++;\r\n\t\t\t\t}\r\n\t\t\t\tfor(int i = 1; i <= 2500; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(h[i] % 2 == 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(exp == 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tSystem.out.println(i);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tSystem.out.print(i + \" \");\r\n\t\t\t\t\t\t\texp--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n}", "idx": "6017"}
{"func": "package googlejam6.p018;\n/* Andy Rock\n * April 15, 2016\n * \n * Round 1A 2016: Problem B. \n */\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\npublic class B\n{\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tBufferedReader in  = new BufferedReader(new FileReader(\"B.in\"));\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"B.out\"));\n\n\t\tint T = Integer.parseInt(in.readLine());\n\t\tfor(int t=1;t<=T;t++)\n\t\t{\n\t\t\tint N = Integer.parseInt(in.readLine());\n\t\t\tint[] freq = new int[2501];\n\t\t\tfor(int i=0;i<2*N-1;i++)\n\t\t\t{\n\t\t\t\tStringTokenizer st = new StringTokenizer(in.readLine());\n\t\t\t\tfor(int j=0;j<N;j++)\n\t\t\t\t\tfreq[Integer.parseInt(st.nextToken())]++;\n\t\t\t}\n\n\t\t\tout.write(\"Case #\"+t+\": \");\n\t\t\tfor(int i=1;i<=2500;i++)\n\t\t\t\tif(freq[i] % 2 == 1)\n\t\t\t\t\tout.write(i+\" \");\n\t\t\tout.write(\"\\n\");\n\t\t}\n\n\t\tin .close();\n\t\tout.close();\n\t}\n}", "idx": "6018"}
{"func": "package googlejam6.p020;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.StringTokenizer;\n\npublic class B {\n\n\tpublic static void main(String... args) throws Exception {\n\t\tFile file = new File(loc);\n\t\tFile[] paths = file.listFiles();\n\t\tList<File> input = new ArrayList<File>();\n\t\tfor (File f : paths) {\n\t\t\tString s = f.getName();\n\t\t\tif (s.startsWith(name_class) && s.endsWith(\".in\"))\n\t\t\t\tinput.add(f);\n\t\t}\n\t\t\n\t\tif (input.isEmpty()) {\n\t\t\tSystem.err.println(\"LEYENDO DE CONSOLA\");\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\n\t\t} else {\n\t\t\tFile last_file = input.get(0);\n\t\t\tfor (File f : input) {\n\t\t\t\tif (f.lastModified() > last_file.lastModified())\n\t\t\t\t\tlast_file = f;\n\t\t\t}\n\t\t\n\t\t\tin = new BufferedReader(new FileReader(last_file.toString()));\n\t\t\tSystem.err.println(\"LEYENDO DE ARCHIVO\");\n\t\t\n\t\t}\n\t\tFileWriter fw = new FileWriter(loc + \"/output.txt\");\n\t\tout = new PrintWriter(fw);\n\n\t\tint casos = Integer.parseInt(in.readLine());\n\t\tfor (int casito = 1; casito <= casos; casito++) {\n\t\t\tB r = new B();\n\t\t\tint n = Integer.parseInt(B.nextToken());\n\t\t\tint MAX = 2500;\n\t\t\tboolean[] bs = new boolean[MAX+1];\n\t\t\tfor(int i =0; i < 2*n - 1;i++) {\n\t\t\t\tint[] ret1 = new int[n];\n\t\t\t\tfor (int i1 = 0; i1 < n; i1++)\n\t\t\t\t\tret1[i1] = Integer.parseInt(B.nextToken());\n\t\t\t\tint[] arr = ret1;\n\t\t\t\tfor(int a : arr)\n\t\t\t\t\tbs[a] = !bs[a];\n\t\t\t}\n\t\t\tList<Integer> ret = new ArrayList<>();\n\t\t\tfor(int i = 1; i<bs.length;i++){\n\t\t\t\tif(bs[i])\n\t\t\t\t\tret.add(i);\n\t\t\t}\n\t\t\tStringBuilder str = new StringBuilder();\n\t\t\tfor(int i =0;i<ret.size();i++){\n\t\t\t\tif(i !=0)\n\t\t\t\t\tstr.append(\" \");\n\t\t\t\tstr.append(ret.get(i));\n\t\t\t}\n\t\t\tObject o = str;\n\n\t\t\tout.println(\"Case #\" + casito + \": \" + o);\n\t\t\tSystem.out.println(\"Case #\" + casito + \": \" + o);\n\t\t}\n\t\tout.close();\n\t}\n\n\tpublic static BufferedReader in;\n\tpublic static PrintWriter out;\n\tstatic String name_class = \"B\"; //\n\tstatic String loc = \"/home/miguel/workspace/CodeJam/1A2016/src\"; //\n\n\tstatic StringTokenizer strTok = new StringTokenizer(\"\");\n\n\tstatic String nextToken() throws IOException {\n\t\twhile (!strTok.hasMoreTokens())\n\t\t\tstrTok = new StringTokenizer(in.readLine());\n\t\treturn strTok.nextToken();\n\t}\n\n}", "idx": "6020"}
{"func": "package googlejam6.p021;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class Rank {\r\n\tpublic static void main(String [] args) throws IOException {\r\n\t\tScanner input = new Scanner(new File(\"input.txt\"));\r\n\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\r\n\t\t\r\n\t\tint cs = input.nextInt();\r\n\t\tfor(int i = 1; i <= cs; i++) {\r\n\t\t\tint[] arr = new int[2501];\r\n\t\t\tint sz = input.nextInt();\r\n\t\t\tfor(int x = 0; x < sz * (2 * sz - 1); x++) {\r\n\t\t\t\tarr[input.nextInt()]++;\r\n\t\t\t}\r\n\t\t\tout.printf(\"Case #%d:\", i);\r\n\t\t\tfor(int j = 0; j < arr.length; j++)\r\n\t\t\t\tif(arr[j] % 2 == 1)\r\n\t\t\t\t\tout.print(\" \" + j);\r\n\t\t\tout.println();\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "6021"}
{"func": "package googlejam6.p023;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class RankAndFile{\r\n    \r\n    static final String filename = \"C:/Users/Kevin/algs4/CodeJam/RankAndFile/B-large.in\";\r\n    static final String output = \"largeoutput.txt\";\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    public static void main(String[] args){\r\n       \r\n        try{\r\n            Scanner sc = new Scanner(new FileInputStream(new File(filename)));\r\n            int no_of_times = sc.nextInt();\r\n            \r\n            for(int i = 0; i < no_of_times; ++i){\r\n                int N = sc.nextInt();\r\n                int[][] array = new int[2*N-1][N];\r\n                for (int j = 0; j < 2*N-1; ++j) {\r\n                    for (int k = 0; k < N; ++k) {\r\n                        array[j][k] = sc.nextInt();\r\n                    }\r\n                }\n\t\t\t\tHashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n\t\t\t\t\n\t\t\t\tint[] ret = new int[array[0].length];\n\t\t\t\t\n\t\t\t\tfor (int j1 = 0; j1 < array.length; ++j1) {\n\t\t\t\t    for (int k = 0; k < array[0].length; ++k) {\n\t\t\t\t        if (!count.containsKey(array[j1][k])) {\n\t\t\t\t            count.put(array[j1][k], 1);\n\t\t\t\t        } else {\n\t\t\t\t            count.put(array[j1][k], count.get(array[j1][k])+1);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint index = 0;\n\t\t\t\t\n\t\t\t\tfor (Integer key : count.keySet()) {\n\t\t\t\t    if (count.get(key) % 2 != 0) {\n\t\t\t\t        ret[index] = key;\n\t\t\t\t        index++;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tArrays.sort(ret);\r\n                \r\n                int[] soln = ret;\r\n                \r\n                FileOutputStream fos = new FileOutputStream(output, true);\r\n                fos.write((\"Case #\" + (i+1) + \":\").getBytes());\r\n                for (int j = 0; j < soln.length; ++j) {\r\n                    fos.write((\" \" + soln[j]).getBytes());\r\n                }\r\n                fos.write((\"\\n\").getBytes());\r\n                fos.close();\r\n                \r\n                \r\n            }\r\n            sc.close();\r\n        }\r\n        catch(Exception e){\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    \r\n}", "idx": "6023"}
{"func": "package googlejam6.p024;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class GCJ {\r\n\r\n\tpublic static void main(String[] args) throws Throwable {\r\n\t\tlong start = System.currentTimeMillis();\r\n\r\n\t\tString pkg = new Object(){}.getClass().getEnclosingClass().getPackage().getName().replace('.', '/');\r\n\t\tString dir = \"src/\" + pkg;\r\n\r\n\t\tString filename = \"\";\r\n\r\n//\t\tif (true) { filename = \"sample.in\"; }\r\n//\t\tif (true) { filename = \"B-small-attempt0.in\"; }\r\n\t\tif (true) { filename = \"B-large.in\"; }\r\n\r\n\t\tScanner sc = null;\r\n\t\ttry {\r\n\t\t\tsc = new Scanner(new File(dir + \"/\" + filename));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\tObject[] o = { e.getMessage() };\n\t\t\tSystem.err.println(Arrays.deepToString(o));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tPrintWriter fout = new PrintWriter(new File(dir + \"/\" + filename + \".res\"));\r\n\r\n\t\tGCJ obj = new GCJ();\r\n\t\tint T = sc.nextInt();\r\n\t\tfor (int t = 0; t < T; t++) {\r\n\t\t\tfout.write(String.format(\"Case #%d: \", (t + 1)));\r\n\t\t\tint n = sc.nextInt();\n\t\t\tint[] count = new int[2501];\n\t\t\tfor (int i = 0; i < 2 * n - 1; i++){\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tint x = sc.nextInt();\n\t\t\t\t\tcount[x]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < count.length; i++) if (count[i] % 2 == 1) fout.print(\" \" + i);\n\t\t\tfout.println();\r\n\t\t\tfout.flush();\r\n\t\t}\r\n\t\tfout.flush();\r\n\t\tfout.close();\r\n\t\tlong end = System.currentTimeMillis();\n\t\tObject[] o = { (end - start) + \"ms\" };\r\n\t\tSystem.err.println(Arrays.deepToString(o));\r\n\t}\r\n\t\r\n}\r\n", "idx": "6024"}
{"func": "package googlejam6.p026;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\npublic class B {\r\n\r\n    public static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint t = in.nextInt();//always 1\r\n\t\tfor(int k=0; k<t; k++){\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] heights = new int[2501];\r\n\t\t\tfor(int i=0; i<(2*n)-1; i++){\r\n\t\t\t\tfor(int j=0; j<n; j++){\r\n\t\t\t\t\theights[in.nextInt()]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.print(\"Case #\"+(k+1)+\":\");\r\n\t\t\tfor(int i=1; i<=2500; i++){\r\n\t\t\t\tif(heights[i]%2 == 1)\r\n\t\t\t\t\tSystem.out.print(\" \"+i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\t\r\n\t}\r\n}", "idx": "6026"}
{"func": "package googlejam6.p033;\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Hashtable;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemB {\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString fileName = \"fileB\";\r\n\t\tPrintWriter writer = new PrintWriter(fileName + \".out\", \"UTF-8\");\r\n\t\tScanner scanner = new Scanner(new File(fileName + \".in\"));\r\n\t\tint t = scanner.nextInt();\r\n\t\t\r\n\t\tfor (int i = 0; i < t; i++) {\r\n\t\t\tint n = scanner.nextInt();\n\t\t\t\n\t\t\tHashtable<Integer, Integer> heights = new Hashtable<Integer, Integer>();\n\t\t\t\n\t\t\tfor (int i1 = 0; i1 < n * (n*2-1); i1++) {\n\t\t\t\tint height = scanner.nextInt();\n\t\t\t\t\n\t\t\t\tif (heights.containsKey(height)) {\n\t\t\t\t\theights.put(height, 1 + heights.get(height));\n\t\t\t\t} else {\n\t\t\t\t\theights.put(height, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrayList<Integer> missing = new ArrayList<Integer>();\n\t\t\t\n\t\t\tfor (Integer height : heights.keySet()) {\n\t\t\t\tif (heights.get(height) % 2 == 1) {\n\t\t\t\t\tmissing.add(height);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(missing);\n\t\t\t\n\t\t\tString ans = missing.toString().replace(\",\", \"\");\n\t\t\tans = ans.substring(1, ans.length() - 1);\n\t\t\t\n\t\t\twriter.print(\"Case #\" + (long) (i+1) + \": \" + ans);\r\n\t\t\t\r\n\t\t\tif (i < t - 1) {\r\n\t\t\t\twriter.println(\"\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twriter.close();\r\n\t\tscanner.close();\r\n\t}\r\n}\r\n", "idx": "6033"}
{"func": "package googlejam6.p037;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class Problem2 {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tfor(int a =0; a < n; a++){\n\t\t\tint k = input.nextInt();\n\t\t\tArrayList<Integer> hugeList = new ArrayList<Integer>();\n\t\t\tfor(int b = 0; b < k*((2*k)-1); b++){\n\t\t\t\thugeList.add(input.nextInt());\n\t\t\t}\n\t\t\tint[] freqDist = new int[50000];\n\t\t\tfor(Integer b:hugeList){\n\t\t\t\tfreqDist[b]++;\n\t\t\t}\n\t\t\tArrayList<Integer> output = new ArrayList<Integer>();\n\t\t\tfor(int b = 0; b < freqDist.length; b++){\n\t\t\t\tif(freqDist[b]%2 != 0){\n\t\t\t\t\toutput.add(b);\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(output);\n\t\t\tSystem.out.print(\"Case #\" + (a+1) + \":\" + \" \");\n\t\t\tfor(int b = 0; b < output.size(); b++){\n\t\t\t\tSystem.out.print(output.get(b)+\" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n}\n", "idx": "6037"}
{"func": "package googlejam6.p039;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.Arrays;\r\nimport java.util.PriorityQueue;\r\nimport java.util.Scanner;\r\n\r\npublic class Math {\r\n\t\r\n\tstatic PrintWriter  writer = null;\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner console = null;\r\n\t\ttry {\r\n\t\t\tconsole = new Scanner(new File(\"input.txt\"));\r\n\t\t} catch (FileNotFoundException e1) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te1.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\twriter = new PrintWriter(\"output.txt\", \"UTF-8\");\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (UnsupportedEncodingException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tint t = console.nextInt();\r\n\t\tfor (int ti = 0; ti < t; ti++) {\r\n\t\t\tint n = console.nextInt();\r\n\t\t\t\r\n\t\t\tString x = \"\";\r\n\t\t\tint[] a = new int[2505];\r\n\t\t\tfor (int i = 0; i < (2 * n - 1) * n; i++) {\r\n\t\t\t\tint c = console.nextInt();\r\n\t\t\t\t//System.out.println(c);\r\n\t\t\t\ta[c] = 1 - a[c];\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < 2505; i++) {\r\n\t\t\t\tif (a[i] == 1) {\r\n\t\t\t\t\tx += \" \" + i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tx = x.trim();\r\n\r\n\t\t\t//System.out.println(x);\r\n\t\t\twriter.printf(\"Case #%d: %s\\n\", ti + 1, x);\r\n\t\t}\r\n\t\twriter.close();\r\n\t}\r\n\t\r\n\t\r\n}", "idx": "6039"}
{"func": "package googlejam6.p040;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class B {\r\n\tstatic String infname = \"B-large.in\";\r\n\tstatic String oufname = \"B-large.out\";\r\n\t\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner sc = new Scanner(new FileReader(infname));\r\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(oufname));\r\n\t\tint Tn, T;\r\n\t\tTn = sc.nextInt();\r\n\t\tsc.nextLine();\r\n\t\tfor (T=1;T<=Tn;T++) {\r\n\t\t\tbw.write(String.format(\"Case #%d: \", T));\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tHashMap<Integer, Integer> cnt = new HashMap<Integer, Integer>();\r\n\t\t\tfor (int i=0;i<2*n-1;i++) {\r\n\t\t\t\tfor (int j=0;j<n;j++) {\r\n\t\t\t\t\tint num = sc.nextInt();\r\n\t\t\t\t\tif (!cnt.containsKey(num)) {\r\n\t\t\t\t\t\tcnt.put(num, 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcnt.put(num, cnt.get(num)+1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//ArrayList<Integer> ans = new ArrayList<Integer>();\r\n\t\t\tfor (int i=1;i<=2500;i++) {\r\n\t\t\t\tif (cnt.containsKey(i) && cnt.get(i)%2!=0) {\r\n\t\t\t\t\tbw.write(Integer.toString(i) + ' ');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbw.write('\\n');\r\n\t\t}\r\n\t\tbw.close();\r\n\t}\r\n\r\n}\r\n", "idx": "6040"}
{"func": "package googlejam6.p044;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeSet;\n\npublic class RankAndFile {\n\tpublic static void main(String[] args) throws Exception {\n\t\t Scanner input = new Scanner(new File(\"input/b_large.in\"));\n\t\t PrintWriter output = new PrintWriter(new File(\"output/b_large.out\"));\n//\t\tSjanner input = new Scanner(System.in);\n//\t\tPrintWriter output = new PrintWriter(System.out);\n\n\t\tint testCases = input.nextInt();\n\t\tinput.nextLine();\n\t\tprimary: for (int casen = 1; casen <= testCases; casen++) {\n\t\t\toutput.printf(\"Case #%d:\", casen);\n\t\t\t\n\t\t\tint n = input.nextInt();\n\t\t\tSet<Integer> heights = new TreeSet<Integer>();\n\t\t\tfor (int i = 1; i < 2 * n; i++) {\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tint cur = input.nextInt();\n\t\t\t\t\tif (!heights.remove(cur)) {\n\t\t\t\t\t\theights.add(cur);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int x : heights) {\n\t\t\t\toutput.print(\" \" + x);\n\t\t\t}\n\t\t\toutput.println();\n\t\t\toutput.flush();\n\t\t}\n\t\toutput.close();\n\t}\n}", "idx": "6044"}
{"func": "package googlejam6.p045;\nimport java.awt.geom.AffineTransform;\r\nimport java.awt.geom.Point2D;\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class GCJ2016B\r\n{\r\n\r\n    private static StringTokenizer st;\r\n\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n\r\n        BufferedReader br = new BufferedReader(new FileReader(\"B-large.in\"));\r\n        PrintWriter pw = new PrintWriter(new File(\"B-large.out\"));\r\n        st = new StringTokenizer(br.readLine());\r\n        int T = Integer.parseInt(st.nextToken());\r\n        for (int t = 1; t <= T; t++)\r\n        {\r\n            st = new StringTokenizer(br.readLine());\r\n            int n = Integer.parseInt(st.nextToken());\r\n            ArrayList<ArrayList<Integer>> masterList = new ArrayList<ArrayList<Integer>>();\r\n            for (int i = 0; i < 2*n-1; i++)\r\n            {\r\n                st = new StringTokenizer(br.readLine());\r\n                ArrayList<Integer> list = new ArrayList<Integer>();\r\n                for (int j = 0; j < n; j++)\r\n                {\r\n                    list.add(Integer.parseInt(st.nextToken()));\r\n                }\r\n                masterList.add(list);\r\n            }\r\n            int[] count = new int[2501];\r\n            for (int i = 0; i < masterList.size(); i++)\r\n            {\r\n                for (Integer j : masterList.get(i))\r\n                {\r\n                    count[j]++;\r\n                }\r\n            }\r\n            ArrayList<Integer> leftover = new ArrayList<Integer>();\r\n            for (int i = 0; i < count.length; i++)\r\n            {\r\n                if (count[i] % 2 != 0)\r\n                {\r\n                    leftover.add(i);\r\n                }\r\n            }\r\n            StringBuffer sb = new StringBuffer();\r\n            for (int i = 0; i < leftover.size(); i++)\r\n            {\r\n                sb.append(leftover.get(i) + \" \");\r\n            }\r\n            pw.println(\"Case #\" + t + \": \" + sb.toString().trim());\r\n        }\r\n        pw.close();\r\n\r\n    }\r\n\r\n}", "idx": "6045"}
{"func": "package googlejam6.p046;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class B {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint T = sc.nextInt();\n\t\tfor (int tc = 1; tc <= T; tc++) {\n\t\t\tSystem.out.print(\"Case #\" + tc + \":\");\n\n\t\t\tint N = sc.nextInt();\n\t\t\tint[] heightCounts = new int[3000];\n\t\t\tfor (int i = 0; i < 2 * N - 1; i++) {\n\t\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\t\tint height = sc.nextInt();\n\t\t\t\t\theightCounts[height]++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tList<Integer> missings = new ArrayList<Integer>();\n\t\t\tfor (int i = 0; i < heightCounts.length; i++) {\n\t\t\t\tif (heightCounts[i] % 2 != 0) {\n\t\t\t\t\tmissings.add(i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tCollections.sort(missings);\n\t\t\tfor (int missing : missings) {\n\t\t\t\tSystem.out.print(\" \" + missing);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\n\t\tsc.close();\n\t}\n}\n", "idx": "6046"}
{"func": "package googlejam6.p049;\nimport java.io.BufferedWriter;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.math.BigInteger;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.Map.Entry;\r\nimport java.util.Scanner;\r\nimport java.util.TreeMap;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttry (Scanner scanner = new Scanner(new FileInputStream(\"input.txt\"))){\r\n\t\t\tscanner.useLocale(Locale.ENGLISH);\r\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"output.txt\"));\r\n\t\t\tint tests = scanner.nextInt();\r\n\t\t\tfor (int i = 0; i < tests; i++) {\r\n\t\t\t\tint n = scanner.nextInt();\r\n\t\t\t\tMap<Integer, Integer> heightCounts = new TreeMap<>();\r\n\t\t\t\tfor (int j = 0; j < (2*n-1)*n; j++) {\r\n\t\t\t\t\tint next = scanner.nextInt();\r\n\t\t\t\t\tint oldValue = 0;\r\n\t\t\t\t\tif (heightCounts.containsKey(next)) {\r\n\t\t\t\t\t\toldValue = heightCounts.get(next);\r\n\t\t\t\t\t}\r\n\t\t\t\t\theightCounts.put(next, oldValue + 1);\r\n\t\t\t\t}\r\n\t\t\t\tStringBuilder result = new StringBuilder();\r\n\t\t\t\tfor (Entry<Integer, Integer> entry : heightCounts.entrySet()) {\r\n\t\t\t\t\tif (entry.getValue() % 2 == 1) {\r\n\t\t\t\t\t\tresult.append(\" \").append(entry.getKey());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tout.write(\"Case #\" + (i + 1) + \": \" + result.toString() + \"\\n\");\r\n\t\t\t}\r\n\t\t\tout.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// ????\r\n\t\t} catch (IOException e) {\r\n\t\t\t// ????\r\n\t\t}\r\n\t}\r\n}", "idx": "6049"}
{"func": "package googlejam6.p053;\nimport java.util.*;\r\n\r\npublic class b {\r\n\r\n\t//public static int[][] arrs;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\r\n\t\tint t = in.nextInt();\r\n\r\n\t\tfor(int caseN = 1; caseN <= t; caseN++) {\r\n\t\t\tint n = in.nextInt();\r\n\t\t\t//arrs = new int[2 * n - 1][n];\r\n\t\t\tint[] counts = new int[2501];\r\n\t\t\tfor(int i = 0; i < 2 * n - 1; i++)\r\n\t\t\t\tfor(int ii = 0; ii < n; ii++) {\r\n\t\t\t\t\tint x = in.nextInt();\r\n\t\t\t\t\tcounts[x]++;\r\n\t\t\t\t}\r\n\r\n\t\t\tSystem.out.print(\"Case #\" + caseN + \":\");\r\n\t\t\tfor(int i = 1; i < 2501; i++) {\r\n\t\t\t\tif(counts[i] > 0 && counts[i] % 2 == 1)\r\n\t\t\t\t\tSystem.out.print(\" \" + i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n}", "idx": "6053"}
{"func": "package googlejam6.p059;\nimport java.util.*;\r\n\r\npublic class b {\r\n\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\tScanner stdin = new Scanner(System.in);\r\n\t\tint numCases = stdin.nextInt();\r\n\r\n\r\n\t\tfor (int loop=1; loop<=numCases; loop++) {\r\n\r\n\t\t\tint[] freq = new int[2501];\r\n\t\t\tint n = stdin.nextInt();\r\n\r\n\t\t\tfor (int i=0; i<n*(2*n-1); i++)\r\n\t\t\t\tfreq[stdin.nextInt()]++;\r\n\r\n\t\t\tSystem.out.print(\"Case #\"+loop+\":\");\r\n\t\t\tfor (int i=1; i<2500; i++)\r\n\t\t\t\tif (freq[i]%2 == 1)\r\n\t\t\t\t\tSystem.out.print(\" \"+i);\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n\r\n\r\n}", "idx": "6059"}
{"func": "package googlejam6.p061;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.util.Scanner;\n\npublic class B {\n\t// static PrintStream writer = System.out;\n\tpublic static int[][] a;\n\tpublic static int[] count;\n\tpublic static int n;\n\n\tpublic static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n\t\tScanner sc = new Scanner(new File(\"./src/B-large.in\"));\n\t\tint t = sc.nextInt();\n\t\tPrintWriter writer = new PrintWriter(\"./src/B-large.out\", \"UTF-8\");\n\n\t\tfor (int k = 1; k <= t; k++) {\n\t\t\ta = new int[600][1200];\n\t\t\tcount = new int[3000];\n\t\t\tfor (int i = 0; i < 3000; i++)\n\t\t\t\tcount[i] = 0;\n\t\t\twriter.print(\"Case #\" + k + \":\");\n\t\t\tn = sc.nextInt();\n\t\t\tfor (int i = 0; i < 2 * n - 1; i++) {\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\ta[i][j] = sc.nextInt();\n\t\t\t\t\tcount[a[i][j]]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < 3000; i++)\n\t\t\t\tif (count[i] % 2 == 1)\n\t\t\t\t\twriter.print(\" \" + i);\n\t\t\twriter.println();\n\t\t}\n\n\t\twriter.close();\n\t\tsc.close();\n\t}\n}\n", "idx": "6061"}
{"func": "package googlejam6.p062;\n\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.nio.file.FileSystems;\nimport java.nio.file.Files;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by song on 4/8/16.\n */\npublic class R1B {\n    final static String PATH = \"/Users/eatstreet/Downloads/\";\n\n    public static void main(String[] args) throws IOException {\n        R1B r = new R1B();\n\t\t//        List<String> lines = Files.readAllLines(FileSystems.getDefault().getPath(PATH + \"B.in\"));\n\t\t        List<String> lines = Files.readAllLines(FileSystems.getDefault().getPath(R1B.PATH + \"B-small-attempt0.in\"));\n\t\t//        List<String> lines = Files.readAllLines(FileSystems.getDefault().getPath(PATH + \"B-large.in\"));\n\t\t        PrintWriter writer = new PrintWriter(R1B.PATH + \"B.out\", \"UTF-8\");\n\t\t        int idx = 0;\n\t\t        int t = Integer.parseInt(lines.get(idx));\n\t\t        idx++;\n\t\t        for (int ca=1; ca<=t; ca++) {\n\t\t            int n = Integer.parseInt(lines.get(idx));\n\t\t            idx++;\n\t\t            int[] c = new int[2501];\n\t\t            for (int i=0; i<n *2 - 1; i++) {\n\t\t                String v = lines.get(idx);\n\t\t                idx++;\n\t\t                final String[] split = v.split(\" \");\n\t\t                for (String s : split) {\n\t\t                    c[Integer.parseInt(s)] ++;\n\t\t                }\n\t\t            }\n\t\t            StringBuilder result = new StringBuilder();\n\t\t            for (int i=0; i<c.length; i++) {\n\t\t                if (c[i] % 2 == 1) {\n\t\t                    result.append(i).append(\" \");\n\t\t                }\n\t\t            }\n\t\t            final String s = result.substring(0, result.length() - 1);\n\t\t            writer.println(String.format(\"Case #%d: %s\", ca, s));\n\t\t        }\n\t\t        writer.close();\n    }\n}\n", "idx": "6062"}
{"func": "package googlejam6.p063;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class B {\n\t\n\t\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint tc = sc.nextInt();\n\t\tint n;\n\t\t\t\t\n\t\tint tmp;\n\t\t\n\t\t\t\n\t\tfor(int i=0; i<tc; ++i){\n\t\t\tn = sc.nextInt();\n\t\t\t\n\t\t\tint[] hei = new int[2501];\n\t\t\t\n\t\t\tint[] row = new int[n];\n\t\t\t\n\t\t\tfor(int a=0; a<2*n-1; ++a){\n\t\t\t\tfor(int b=0; b<n; ++b){\n\t\t\t\t\ttmp = sc.nextInt();\n\t\t\t\t\thei[tmp]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint pos = 0;\n\t\t\t\n\t\t\tfor(int a=0; a<2501; ++a){\n\t\t\t\tif(hei[a] % 2 != 0){\n\t\t\t\t\trow[pos] = a;\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(row);\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.printf(\"Case #%d: \", i+1);\n\t\t\t\n\t\t\tfor(int a=0; a<n-1; ++a){\n\t\t\t\tSystem.out.printf(\"%d \", row[a]);\n\t\t\t}\n\t\t\tSystem.out.printf(\"%d%n\", row[n-1]);\n\t\t}\n\t\t\n\t\tsc.close();\n\t}\n}\n\n", "idx": "6063"}
{"func": "package googlejam6.p064;\nimport java.util.Scanner;\n\npublic class B {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint nt = in.nextInt();\n\t\tfor(int t = 1; t <= nt; t++)\n\t\t{\n\t\t\tint n = in.nextInt();\n\t\t\tint[] c = new int[2500];\n\t\t\tfor(int i = 0; i < (2*n-1)*n; i++)\n\t\t\t\tc[in.nextInt() - 1]++;\n\t\t\tSystem.out.print(\"Case #\"+t+\":\");\n\t\t\tint j = 0;\n\t\t\tfor(int i = 0; i < c.length; i++)\n\t\t\t\tif(c[i] % 2 != 0) {\n\t\t\t\t\tSystem.out.print(\" \" + (i+1));\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tif(j != n)\n\t\t\t\tthrow new AssertionError();\n\t\t}\n\t}\n}\n", "idx": "6064"}
{"func": "package googlejam6.p066;\n/**\n * Created by qixinzhu on 4/8/16.\n */\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class B {\n\n    public static void main(String[] args) throws FileNotFoundException{\n        // test case\n//        genLargeP();\n//        File inputFile = new File(\"test.txt\");\n//        PrintWriter out = new PrintWriter(\"test_out.txt\");\n\n        // real case\n        File inputFile = new File(\"B-large.in\");\n//        File inputFile = new File(\"B-small-attempt0.in\");\n        PrintWriter out = new PrintWriter(\"B_out_b.txt\");\n\n        Scanner in = new Scanner(inputFile);\n\n        int T = in.nextInt();\n        int N;\n        for (int i=0;i<T;i++) {\n            N= in.nextInt();\n            int[] nums = new int[2501];\n            int cur;\n            for (int j=0;j<2*N-1;j++) {\n                for (int k=0;k<N;k++) {\n                    cur = in.nextInt();\n                    nums[cur]++;\n                }\n            }\n            String ans = \"\";\n            for (int m=0;m<2501;m++) {\n                if (nums[m] % 2 != 0) {\n                    ans += m;\n                    ans += \" \";\n                }\n            }\n            out.printf(\"Case #%d: %s\\n\", i + 1, ans.trim());\n        }\n\n        in.close();\n        out.close();\n    }\n}\n", "idx": "6066"}
{"func": "package googlejam6.p067;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n\npublic class RankAndFile {\n\tpublic static void main(String[] args) throws IOException{\n\t\tScanner kb = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"rankfile.out\"));\n\t\t//PrintStream out = System.out;\n\t\tint cases = kb.nextInt();\n\t\tfor(int n=0; n < cases; n++) {\n\t\t\tout.print(\"Case #\" + (n + 1) + \":\");\n\t\t\t\n\t\t\tint len = kb.nextInt();\n\t\t\t\n\t\t\tint[] heights = new int[2501];\n\t\t\t\n\t\t\tfor(int i=0; i < len * 2 - 1; i++) {\n\t\t\t\tfor (int j=0; j < len; j++) {\n\t\t\t\t\theights[kb.nextInt()]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i=0; i <= 2500; i++) {\n\t\t\t\tif (heights[i] % 2 == 1)\n\t\t\t\t\tout.print(\" \" + i);\n\t\t\t}\n\t\t\t\n\t\t\tout.println();\n\t\t}\n\t\tout.close();\n\t}\n}\n", "idx": "6067"}
{"func": "package googlejam6.p068;\nimport java.io.File;\r\nimport java.io.PrintStream;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tLocale.setDefault(Locale.US);\r\n\r\n\t\tScanner in = new Scanner(new File(\"problem.in\"));\r\n\t\tPrintStream out = new PrintStream(new File(\"problem.out\"));\r\n\r\n\t\tint T = in.nextInt();\r\n\r\n\t\tfor (int test = 1; test <= T; test++) {\r\n\t\t\tint[] count = new int[2501];\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tfor (int i = 0; i < (2 * n - 1) * n; i++) {\r\n\t\t\t\tint a = in.nextInt();\r\n\t\t\t\tcount[a]++;\r\n\t\t\t}\r\n\t\t\tint[] res = new int[n];\r\n\t\t\tint k = 0;\r\n\t\t\tfor (int i = 1; i <= 2500; i++) {\r\n\t\t\t\tif (count[i] % 2 == 1) {\r\n\t\t\t\t\tres[k] = i;\r\n\t\t\t\t\tk++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tout.printf(\"Case #%d:\", test);\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tout.printf(\" %d\", res[i]);\r\n\t\t\t}\r\n\t\t\tout.println();\r\n\t\t}\r\n\r\n\t}\r\n}\r\n", "idx": "6068"}
{"func": "package googlejam6.p069;\n\n\nimport com.google.common.base.Joiner;\n\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\nimport static java.util.stream.Collectors.toList;\n\npublic class B {\n    private static final String INPUT = \"B-large.in\";\n    private static final String OUTPUT = \"B-large.out\";\n\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new File(INPUT));\n        StringBuilder sb = new StringBuilder();\n        int cases = sc.nextInt();\n        for (int c = 0; c < cases; c++) {\n            int n = sc.nextInt();\n            int[][] lists = new int[2 * n - 1][n];\n            for (int i = 0; i < 2 * n - 1; i++) {\n                for (int j = 0; j < n; j++) {\n                    lists[i][j] = sc.nextInt();\n                }\n            }\n            String line = \"Case #\" + (c + 1) + \": \" + solve(lists);\n            sb.append(line).append('\\n');\n            System.out.println(line);\n        }\n        Files.write(Paths.get(OUTPUT), sb.toString().getBytes());\n    }\n\n    private static String solve(int[][] lists) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int[] list : lists) {\n            for (int i : list) {\n                int count = map.getOrDefault(i, 0);\n                map.put(i, count + 1);\n            }\n        }\n\n        List<Integer> list = map.keySet().stream().filter(k -> map.get(k) % 2 == 1).sorted().collect(toList());\n\n        return Joiner.on(' ').join(list);\n    }\n}", "idx": "6069"}
{"func": "package googlejam6.p071;\nimport java.util.*;\r\npublic class B {\r\n\tpublic static void main (String [] arg) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint T = Integer.parseInt(sc.nextLine());\r\n\t\tfor (int ii = 1; ii<=T; ++ii) {\r\n\t\t\t\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tint [] heights = new int [3000];\r\n\t\t\tfor (int i = 0; i<2*N-1; ++i) {\r\n\t\t\t\tfor (int j = 0; j<N; ++j) {\r\n\t\t\t\t\tint height = sc.nextInt();\r\n\t\t\t\t\theights[height]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint [] ans = new int [N+1];\r\n\t\t\tint ptr = 0;\r\n\t\t\tSystem.err.print(ii + \" : \");\r\n\t\t\tfor (int i = 0; i<heights.length; ++i) {\r\n\t\t\t\tif (heights[i] % 2 == 1) {\r\n\t\t\t\t\tans[ptr] = i;\r\n\t\t\t\t\tptr++;\r\n\t\t\t\t\tSystem.err.print(i + \" \");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.err.println();\r\n\t\t\t\r\n\t\t\tSystem.out.printf(\"Case #%d: \", ii);\r\n\t\t\tfor (int i = 0; i<N; ++i) {\r\n\t\t\t\tSystem.out.print(ans[i]);\r\n\t\t\t\tif (i != N-1) System.out.print(\" \");\r\n\t\t\t\tif (i == N-1) System.out.println();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}", "idx": "6071"}
{"func": "package googlejam6.p074;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.*;\r\n\r\npublic class RankAndFile {\r\n\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n//        Scanner cin = new Scanner(new File(\"B-small-attempt1.in\"));\r\n//        PrintStream cout = new PrintStream(\"B-small-attempt1.out.1\");\r\n        Scanner cin = new Scanner(new File(\"B-large.in\"));\r\n        PrintStream cout = new PrintStream(\"B-large.out\");\r\n//        Scanner cin = new Scanner(System.in);\r\n//        PrintStream cout = System.out;\r\n\r\n        int _case = 0;\r\n        for (int T = cin.nextInt(); T > 0; T--) {\r\n            _case++;\r\n            StringBuilder ans = new StringBuilder();\r\n\r\n            int n = cin.nextInt();\r\n            int[] cnt = new int[10000];\r\n            for (int i=0; i<2*n-1; i++)\r\n                for (int j=0; j<n; j++)\r\n                    cnt[cin.nextInt()]++;\r\n            for (int i=0; i<cnt.length; i++)\r\n                if (cnt[i] %2 == 1) {\r\n                    ans.append(\" \");\r\n                    ans.append(i);\r\n                }\r\n\r\n            cout.printf(\"Case #%d:%s%n\", _case, ans.toString());\r\n        }\r\n\r\n        cin.close();\r\n        cout.close();\r\n    }\r\n}\r\n", "idx": "6074"}
{"func": "package googlejam6.p075;\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Round_1A_B {\r\n\r\n\tstatic BufferedReader br;\r\n\tstatic PrintWriter out;\r\n\tstatic StringTokenizer st;\r\n\r\n\tstatic int T;\r\n\t\r\n\tpublic static void main (String[] args) throws IOException {\r\n\t\t//br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t//out = new PrintWriter(new OutputStreamWriter(System.out));\r\n\t\tbr = new BufferedReader(new FileReader(\"in.txt\"));\r\n\t\tout = new PrintWriter(new FileWriter(\"out.txt\"));\r\n\r\n\t\tT = Integer.parseInt(next());\r\n\t\t\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tint N = Integer.parseInt(next());\r\n\t\t\tint[] val = new int[2501];\r\n\t\t\tfor (int i = 0; i < 2 * N - 1; i++)\r\n\t\t\t\tfor (int j = 0; j < N; j++)\r\n\t\t\t\t\tval[Integer.parseInt(next())]++;\r\n\t\t\tout.printf(\"Case #%d: \", t);\r\n\t\t\tfor (int i = 1; i <= 2500; i++)\r\n\t\t\t\tif (val[i] > 0 && val[i] % 2 == 1)\r\n\t\t\t\t\tout.printf(\"%d \", i);\r\n\t\t\tout.println();\r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t}\r\n\r\n\tstatic String next () throws IOException {\r\n\t\twhile (st == null || !st.hasMoreTokens())\r\n\t\t\tst = new StringTokenizer(br.readLine().trim());\r\n\t\treturn st.nextToken();\r\n\t}\r\n}\r\n\r\n", "idx": "6075"}
{"func": "package googlejam6.p077;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new FileReader(new File(\"B.in\")));\n\t\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(new File(\"B.out\"))));\n\n\t\tint T = Integer.parseInt(br.readLine());\n\t\t\n\t\tfor (int t = 0; t < T; t++) {\n\t\t\tint[] count = new int[2500+1];\n\t\t\tint N = Integer.parseInt(br.readLine());\n\t\t\tfor (int i = 0; i < N*2-1; i++) {\n\t\t\t\tString[] str = br.readLine().split(\" \");\n\t\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\t\tcount[Integer.parseInt(str[j])]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpw.print(\"Case #\"+(t+1)+\":\");\n\t\t\tfor (int i = 1; i < count.length; i++) {\n\t\t\t\tif (count[i] % 2 > 0) pw.print(\" \"+i);\n\t\t\t}\n\t\t\tpw.println();\n\t\t\tpw.flush();\n\t\t}\n\t\t\n\t\tpw.close();\n\t\tbr.close();\n\t}\n}\n", "idx": "6077"}
{"func": "package googlejam6.p078;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class B {\r\n\r\n\tpublic static void main(String args[]) throws Exception {\r\n\t\tString fn = args.length > 0 ?  args[0] :\r\n\t\t//\t\"B-.in\";\r\n\t\t//\t\"B-small-attempt1.in\";\r\n\t\t\t\"B-large.in\";\r\n\t\tLineNumberReader in = new LineNumberReader(new FileReader(fn));\r\n\t\tPrintWriter out = new PrintWriter(new FileWriter(fn.replace(\".in\", \".out\")));\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor(int i = 0; i < T; i++) {\r\n\t\t\tout.print(\"Case #\" + (i+1) + \":\");\r\n\t\t\tfinal int N = Integer.parseInt(in.readLine());\r\n\t\t\tArrayList<Integer> missing = new ArrayList<Integer>();\r\n\t\t\tfor(int l = 2*N-1; --l >= 0; ) {\r\n\t\t\t\tStringTokenizer st = new StringTokenizer(in.readLine());\r\n\t\t\t\tfor(int k = 0; k < N; k++) {\r\n\t\t\t\t\tint s = Integer.parseInt(st.nextToken());\r\n\t\t\t\t\tint n = missing.indexOf(s);\r\n\t\t\t\t\tif(n < 0)\r\n\t\t\t\t\t\tmissing.add(s);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tmissing.remove(n);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tCollections.sort(missing);\r\n\t\t\tfor(int k = 0; k < N; k++) {\r\n\t\t\t\tout.print(' ');\r\n\t\t\t\tout.print(missing.get(k));\r\n\t\t\t}\r\n\t\t\tout.println();\r\n\t\t\tout.flush();\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "6078"}
{"func": "package googlejam6.p081;\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Rank {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner s = new Scanner(new File(\"B-large.in\"));\r\n\t\tint numCases = Integer.parseInt(s.nextLine());\r\n\t\tfor(int c = 1;c<=numCases;c++) {\r\n\t\t\tint n = Integer.parseInt(s.nextLine());\r\n\t\t\tHashMap<Integer,Integer> counts = new HashMap<>();\r\n\t\t\tfor(int i = 0;i<2*n-1;i++) {\r\n\t\t\t\tString line = s.nextLine();\r\n\t\t\t\tString[] lineArr = line.split(\"\\\\s+\");\r\n\t\t\t\tfor(String xs : lineArr) {\r\n\t\t\t\t\tint x = Integer.parseInt(xs);\r\n\t\t\t\t\tif(!counts.containsKey(x)) {\r\n\t\t\t\t\t\tcounts.put(x, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcounts.put(x,counts.get(x)+1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tArrayList<Integer> missing = new ArrayList<Integer>();\r\n\t\t\tfor(int x : counts.keySet()) {\r\n\t\t\t\tif(counts.get(x) % 2 == 1) {\r\n\t\t\t\t\tmissing.add(x);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tCollections.sort(missing);\r\n\t\t\tSystem.out.print(\"Case #\" + c + \":\");\r\n\t\t\tfor(int x : missing) {\r\n\t\t\t\tSystem.out.print(\" \" + x);\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6081"}
{"func": "package googlejam6.p083;\nimport java.io.*;\nimport java.util.*;\n\npublic class RankAndFile {\n    public static final PrintStream out = System.out;\n    public static final BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n    public int numCases;\n    \n    public static void main(String[] args) throws Exception {\n        RankAndFile r = new RankAndFile();\n\t\tr.numCases = Integer.parseInt(RankAndFile.in.readLine().trim());\n\t\tfor (int i = 1; i <= r.numCases; i++) {\n\t\t    RankAndFile.out.print(\"Case #\" + i + \":\");\n\t\t    String line = RankAndFile.in.readLine();\n\t\t\tScanner scan = new Scanner(line);\n\t\t\tint N = scan.nextInt();\n\t\t\tint[] count = new int[2501];\n\t\t\tfor (int i1 = 0; i1 < 2 * N - 1; i1++) {\n\t\t\t    line = RankAndFile.in.readLine();\n\t\t\t    scan = new Scanner(line);\n\t\t\t    for (int j = 0; j < N; j++) {\n\t\t\t        int height = scan.nextInt();\n\t\t\t        count[height]++;\n\t\t\t    }\n\t\t\t}\n\t\t\tfor (int i2 = 0; i2 < 2501; i2++) {\n\t\t\t    if (count[i2] % 2 == 1) {\n\t\t\t        System.out.print(\" \" + i2);\n\t\t\t    }\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n    }\n\n}\n", "idx": "6083"}
{"func": "package googlejam6.p086;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class B {\r\n\r\n  public static void main(String[] args) throws Exception {\r\n    //Scanner in = new Scanner(System.in);\r\n    Scanner in = new Scanner(new File(\"B-large.in\"));\r\n    PrintWriter out = new PrintWriter(new FileWriter(\"out.txt\"));\r\n    int tests = in.nextInt();\r\n    for (int t = 1; t <= tests; t++) {\r\n      int n = in.nextInt();\r\n      int[] count = new int[2501];\r\n      for (int i = 0; i < 2*n-1; i++) {\r\n        for (int j = 0; j < n; j++) {\r\n          count[in.nextInt()]++;\r\n        }\r\n      }\r\n      out.print(\"Case #\" + t + \":\");\r\n      for (int i = 1; i <= 2500; i++) {\r\n        if (count[i] % 2 != 0) out.print(\" \" + i);\r\n      }\r\n      out.println();\r\n    }\r\n    in.close();\r\n    out.close();\r\n  }\r\n}", "idx": "6086"}
{"func": "package googlejam6.p087;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Scanner;\n\npublic class Round1B {\n\tpublic static void main(String[] args) {\n\t\t\t\n\t    Scanner sc = new Scanner(System.in);\n\t    int T = sc.nextInt();\n\t    sc.nextLine();\n\t    Writer writer = null;\n\t    try {\n\t        writer = new BufferedWriter(new OutputStreamWriter(\n\t              new FileOutputStream(\"filename.txt\"), \"utf-8\"));\n\t        for(int k = 0;k < T; k ++){\n\t        \tSystem.out.println(k);\n\t        \tint N = sc.nextInt();\n\t \t        StringBuilder sb = new StringBuilder();\n\t     \t\tHashSet<Integer> set = new HashSet<Integer>();\n\t \t        for(int i = 0; i < N*(2*N-1); i++){\n\t \t        \tint t = sc.nextInt();\n\t \t\t\t\tif(set.contains(t))\n\t \t\t\t\t\tset.remove(t);\n\t \t\t\t\telse \n\t \t\t\t\t\tset.add(t);\n\t \t\t\t}\n\t     \t\tArrayList<Integer> res = new ArrayList<Integer>();\n\t     \t\tres.addAll(set);\n\t     \t\tCollections.sort(res);\n\t     \t\tfor(int i = 0;i < res.size()-1;i ++){\n\t     \t\t\tsb.append(res.get(i));\n\t     \t\t\tsb.append(' ');\n\t     \t\t}\n\t     \t\tsb.append(res.get(res.size()-1));\n\t     \t\twriter.write(\"Case #\" + (k+1) + \": \" + sb.toString()+\"\\n\");\n\t        }\n\t       \n\t    } catch (IOException ex) {\n\t    } finally {\n\t       try {writer.close();} \n\t       catch (Exception ex) {/*ignore*/}\n\t    }\n\t}\n}\n", "idx": "6087"}
{"func": "package googlejam6.p093;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\n\r\n\r\npublic class B {\r\n\r\n\r\n\r\n    public static void main(String[] args) throws NumberFormatException, IOException {\r\n        String name = \"B\";\r\n\r\n        // TODO READER\r\n        boolean isSmall = false;\r\n        BufferedReader br;\r\n\r\n        //br= new BufferedReader(new FileReader(\"bum.in\"));\r\n        if(isSmall) br = new BufferedReader(new FileReader(name+\"-small-attempt0 (2).in\"));\r\n        else br = new BufferedReader(new FileReader(name+\"-large (1).in\"));\r\n\r\n        PrintWriter pw;\r\n        if(isSmall) pw = new PrintWriter(name+\"-small.txt\", \"UTF-8\");\r\n        else pw = new PrintWriter(name+\"-large.txt\", \"UTF-8\");\r\n\r\n        int T=Integer.parseInt(br.readLine());\r\n        for(int i = 0; i < T; i++){\r\n            int N = Integer.parseInt(br.readLine());\r\n            int[][] vrst = new int[2*N-1][N];\r\n            for(int j=0;j<2*N-1;j++){\r\n                String[] tab =br.readLine().split(\" \");\r\n\r\n                for(int k=0;k<N;k++) {\r\n                    //System.out.println(\"\"+j+k);\r\n                    vrst[j][k]=Integer.parseInt(tab[k]);\r\n                }\r\n            }\n\t\t\tboolean[] bool = new boolean[2501];\n\t\t\tfor(int i1 = 0;i1<2*N-1;i1++){\n\t\t\t    for(int j = 0;j<N;j++){\n\t\t\t        bool[vrst[i1][j]]=!bool[vrst[i1][j]];\n\t\t\t    }\n\t\t\t\n\t\t\t}\n\t\t\tStringBuilder st = new StringBuilder();\n\t\t\tfor(int i2 = 0; i2<bool.length;i2++){\n\t\t\t    if(bool[i2]) st.append(i2 + \" \");\n\t\t\t}\r\n            String a = st.toString();\r\n\r\n\r\n            System.out.print(\"Case #\"+(i+1)+\": \"+a+\"\\n\");\r\n            pw.write(\"Case #\"+(i+1)+\": \"+a+\"\\n\");\r\n\r\n        }\r\n        pw.close();\r\n    }\r\n}", "idx": "6093"}
{"func": "package googlejam6.p104;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.StringTokenizer;\n\npublic class B\n{\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tout = new PrintWriter(new FileWriter(\"out.txt\"));\n\t\tint t = Integer.parseInt(next());\n\t\tfor (int r = 1; r <= t; r++)\n\t\t{\n\t\t\tint n = Integer.parseInt(next());\n\t\t\tint[] heights = new int[2501];\n\t\t\tfor (int i = 0; i < 2 * n - 1; i++)\n\t\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\t\theights[Integer.parseInt(next())]++;\n\t\t\t\n\t\t\tArrayList<Integer> missing = new ArrayList<Integer>();\n\t\t\tfor (int i = 1; i <= 2500; i++)\n\t\t\t\tif (heights[i] % 2 != 0)\n\t\t\t\t\tmissing.add(i);\n\t\t\tCollections.sort(missing);\n\t\t\t\n\t\t\tString ans = \"\";\n\t\t\tfor (int num : missing)\n\t\t\t\tans += num + \" \";\n\t\t\tans = ans.trim();\n\t\t\tout.printf(\"Case #%d: %s\\n\", r, ans);\n\t\t}\n\t\tout.close();\n\t}\n\n\tstatic BufferedReader br = new BufferedReader(new InputStreamReader(\n\t\t\tSystem.in));\n\tstatic PrintWriter out;\n\tstatic StringTokenizer st;\n\n\tstatic String next() throws IOException\n\t{\n\t\twhile (st == null || !st.hasMoreTokens())\n\t\t\tst = new StringTokenizer(br.readLine().trim());\n\t\treturn st.nextToken();\n\t}\n}\n", "idx": "6104"}
{"func": "package googlejam6.p108;\nimport java.io.FileNotFoundException;\nimport java.io.PrintStream;\nimport java.util.*;\n\n/**\n * Created by slycer on 4/1/16.\n */\npublic class RankandFile {\n\n    public static void main ( String [] args ) throws FileNotFoundException {\n        System.setOut( new PrintStream( \"RankandFile.out\" ));\n        Scanner s = new Scanner( System.in ) ;\n        int tests = s.nextInt();\n        for ( int  test=1; test<=tests; test++ ){\n\n            int n = s.nextInt();\n            int [] count = new int[3000];\n            for ( int i=0; i<n*2-1; i++ ){\n\n                for ( int j=0; j<n; j++ ){\n                   count[ s.nextInt() ]++;\n                }\n            }\n            ArrayList<Integer> answer = new ArrayList<>();\n            for ( int i=0; i<count.length; i++ ){\n                if ( count[i]%2==1 ){\n                    answer.add( i );\n                }\n            }\n            Collections.sort(answer );\n            String k = \"\";\n            for ( int i=0; i<answer.size(); i++ ){\n                k = k + answer.get(i)+\" \";\n            }\n            System.err.println(\"Case #\"+test + \": \" +  k );\n            System.out.println(\"Case #\"+test + \": \" + k  );\n        }\n    }\n\n    //public static void go ( int [][] data )\n\n}\n", "idx": "6108"}
{"func": "package googlejam6.p109;\nimport java.io.BufferedOutputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class B {\r\n\tpublic static void main(String[] args) {\r\n\t\tboolean printToFile = true;\r\n\t\ttry {\r\n\t\t\tif(printToFile){\r\n\t\t\t\tSystem.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(\"out.txt\")), true));\r\n\t\t\t}\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tnew B();\r\n\t}\r\n\t\r\n\tpublic B() {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint nbProblems = sc.nextInt();\r\n\t\tfor(int caseNb = 1; caseNb <= nbProblems; caseNb++){\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint[][] lists = new int[2*n-1][n];\r\n\t\t\tfor(int i = 0; i < n; i++){\r\n\t\t\t\tfor(int j = 0; j < n; j++){\r\n\t\t\t\t\tlists[i][j] = sc.nextInt();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int i = n; i < 2*n-1; i++){\r\n\t\t\t\tfor(int j = 0; j < n; j++){\r\n\t\t\t\t\tlists[i][j] = sc.nextInt();\r\n\t\t\t\t}\r\n\t\t\t}\n\t\t\tHashMap<Integer, Integer> rv = new HashMap<>();\n\t\t\tfor(int i1 = 0; i1 < lists.length; i1++){\n\t\t\t\tfor(int j = 0; j < lists[0].length; j++){\n\t\t\t\t\tif(!rv.containsKey(lists[i1][j])){\n\t\t\t\t\t\trv.put(lists[i1][j], 0);\n\t\t\t\t\t}\n\t\t\t\t\trv.put(lists[i1][j], rv.get(lists[i1][j])+1);\n\t\t\t\t}\n\t\t\t}\r\n\t\t\tHashMap<Integer, Integer> counts = rv;\r\n\t\t\tArrayList<Integer> answer = new ArrayList<>();\r\n\t\t\tfor(int key : counts.keySet()){\r\n\t\t\t\tif(counts.get(key) %2 == 1){\r\n\t\t\t\t\tanswer.add(key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(answer.size() != n){\r\n\t\t\t\tSystem.err.println(\"niet juist\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tCollections.sort(answer);\r\n\t\t\tStringBuilder solution = new StringBuilder();\r\n\t\t\tfor(Integer i : answer){\r\n\t\t\t\tsolution.append(i + \" \");\r\n\t\t\t}\r\n\t\t\tsolution.deleteCharAt(solution.length()-1);\r\n\t\t\tSystem.out.println(\"Case #\" + caseNb + \": \" + solution.toString());\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6109"}
{"func": "package googlejam6.p113;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/**\n * Created by russinko on 4/15/16.\n */\npublic class RankAndFile {\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new File(\"B-large.in\"));\n        PrintWriter pw = new PrintWriter(new File(\"output.txt\"));\n        int caseCount = sc.nextInt();\n        for(int i = 0; i < caseCount; i++) {\n           int N = sc.nextInt();\n            Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n            for(int j = 0; j < N*2 - 1; j++) {\n                for(int k = 0; k < N; k++) {\n                    int val = sc.nextInt();\n                    int count = map.getOrDefault(val, 0);\n                    map.put(val, count + 1);\n                }\n            }\n            pw.printf(\"Case #%d:\", i + 1);\n            List<Integer> list = new ArrayList<Integer>();\n            for(Map.Entry<Integer,Integer> entry : map.entrySet()) {\n                if((entry.getValue() % 2) == 1) list.add(entry.getKey());\n            }\n\n            Collections.sort(list);\n            for(int l : list) {\n                pw.printf(\" %d\", l);\n            }\n            pw.append(\"\\n\");\n\n        }\n        pw.close();\n    }\n\n\n\n}\n", "idx": "6113"}
{"func": "package googlejam6.p115;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Locale;\nimport java.util.Random;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\npublic class GCJ_RankFile {\n\n\t// Global vars\n\tStringTokenizer st;\n\tBufferedReader in;\n\tBufferedWriter out;\n\tint min;\n\tint max;\n\n\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tGCJ_RankFile J=new GCJ_RankFile();\n\n\t\tLocale.setDefault(Locale.US);\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t//File inputFile=new File(\"B-large.in\");\n\t\tFile inputFile=new File(\"B.in\");\n\t\t\n\t\t\n\t\t\n\t\t//\t\tPrintWriter outputFile= new PrintWriter(\"B-large.out\",\"UTF-8\");\n\t\tPrintWriter outputFile= new PrintWriter(\"B.out\",\"UTF-8\");\n\t\t\n\t\t\n\t\tScanner sc=new Scanner(inputFile);\n\t\tsc.useLocale(Locale.US);\n\t\t\n\t\tint T=sc.nextInt();\n\t\tfor (int t=1;t<=T;t++){\n\t\t\tJ.min=Integer.MAX_VALUE;\n\t\t\tJ.max=Integer.MIN_VALUE;\n\t\t\n\t\t\tint N=sc.nextInt();\n\t\t\tint[][] list=new int[2*N-1][N];\n\t\t\tfor (int i=0;i<2*N-1;i++){\n\t\t\t\tfor (int j=0;j<N;j++) {\n\t\t\t\t\tint x=sc.nextInt();\n\t\t\t\t\tlist[i][j]=x;\n\t\t\t\t\tif (x<J.min)\n\t\t\t\t\t\tJ.min=x;\n\t\t\t\t\tif (x>J.max)\n\t\t\t\t\t\tJ.max=x;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[] cnt=new int[2501];\n\t\t\tfor (int i=0;i<2*N-1;i++)\n\t\t\t\tfor (int j=0;j<N;j++){\n\t\t\t\t\tcnt[list[i][j]]++;\n\t\t\t\t}\n\t\t\tint[] tmp=new int[N];\n\t\t\tint st=0;\n\t\t\tfor (int u=0;u<2501;u++){\n\t\t\t\tif (cnt[u]%2==1){\n\t\t\t\t\ttmp[st++]=u;\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrays.sort(tmp);\n\t\t\tString res=\"\";\n\t\t\tfor (int u:tmp){\n\t\t\t\tres+=u+\" \";\n\t\t\t}\n\t\t\tString s=res;\n\t\t\n\t\t\tSystem.out.println(\"Case #\"+t+\": \"+s);\n\t\t\toutputFile.println(\"Case #\"+t+\": \"+s);\n\t\t\n\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tsc.close();\n\t\toutputFile.close();\n\n\n\t}\n\n\n\n\n\n\n}\n", "idx": "6115"}
{"func": "package googlejam6.p118;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tScanner file = new Scanner(new File(\"b-large.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new FileWriter(new File(\"out.txt\")));\r\n\t\tint zz = file.nextInt();\r\n\t\tfor(int i = 1;i<=zz;i++)\r\n\t\t{\r\n\t\t\tint[] n = new int[2501];\r\n\t\t\tint N = file.nextInt();\r\n\t\t\tfor(int j = 0;j<N*N*2-N;j++)\r\n\t\t\t{\r\n\t\t\t\tint next = file.nextInt();\r\n\t\t\t\t//System.out.println(next);\r\n\t\t\t\tn[next]++;\r\n\t\t\t}\r\n\t\t\tString ans = \"\";\r\n\t\t\tfor(int j = 0;j<2501;j++)\r\n\t\t\t{\r\n\t\t\t\tif(n[j]%2==1)\r\n\t\t\t\t\tans+=j+\" \";\r\n\t\t\t}\r\n\t\t\tout.printf(\"Case #%d: %s%n\",i,ans);\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n\t\r\n}\r\n", "idx": "6118"}
{"func": "package googlejam6.p121;\nimport static java.lang.Math.*;\r\n\r\nimport java.io.BufferedInputStream;\r\nimport java.io.BufferedOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.*;\r\n\r\npublic class B {\r\n\tScanner scan;\r\n\r\n\tpublic B(Scanner s) {\r\n\t\tscan = s;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tLocale.setDefault(Locale.US);\r\n\t\tString cn = \"src/\"+B.class.getName();\r\n\t\tString sampleName = cn+\"-sample.in\";\r\n\t\tString smallName = cn+\"-small-attempt0.in\";\r\n\t\tString largeName = cn+\"-large.in\";\r\n\t\tString name = largeName;\r\n\t\tString outName = name.substring(0, name.indexOf('.'))+\".out\";\r\n\t\tInputStream in = new BufferedInputStream(new FileInputStream(name));\r\n\t\tPrintStream out = new PrintStream(new File(outName));\r\n\t\t//PrintStream out = System.out;\r\n\t\tScanner scan = new Scanner(in);\r\n\t\t\r\n\t\tint N = Integer.parseInt(scan.nextLine());\r\n\t\tfor(int c=1;c<=N;c++) {\r\n\t\t\tB r = new B(scan);\n\t\t\tint n = r.scan.nextInt();\n\t\t\tint[]C = new int[3000];\n\t\t\tfor(int i=0;i<n*(2*n-1);i++){\n\t\t\t\tint x = r.scan.nextInt();\n\t\t\t\tC[x]++;\n\t\t\t}\n\t\t\tString res1=\"\";\n\t\t\tfor(int i=0;i<C.length;i++){\n\t\t\t\tif(C[i]%2==1)res1+= i+ \" \";\n\t\t\t}\n\t\t\tString res = res1;\r\n\t\t\tout.printf(\"Case #%d: %s\\n\",c, res);\r\n\t\t\tif(out!=System.out)System.err.println(c + \" done\");\r\n\t\t}\r\n\t\tif(out!=System.out)System.err.println(\"All done\");\r\n\t\t\r\n\t}\r\n}\r\n", "idx": "6121"}
{"func": "package googlejam6.p122;\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\r\n\tstatic FileReader fr;\r\n\tstatic Scanner sc;\r\n\tstatic FileWriter fw;\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tfr = new FileReader(\"B-large.in\");\n\t\tfw = new FileWriter(\"output.txt\");\n\t\tsc = new Scanner(fr);\n\t\tsc.useLocale(Locale.US);\r\n\r\n\t\tint t = sc.nextInt();\r\n\t\tsc.nextLine();\r\n\r\n\t\tfor (int i=1; i<=t; i++) {\r\n\t\t\tString str = \"Case #\"+i+\": \";\n\t\t\tSystem.out.print(str);\n\t\t\tfw.write(str);\r\n\t\t\tint n = sc.nextInt();\n\t\t\tint heights[] = new int[2501];\n\t\t\t\n\t\t\tfor (int l=0; l<2*n-1; l++) {\n\t\t\t\tfor (int i1=0; i1<n; i1++) {\n\t\t\t\t\tint height = sc.nextInt();\n\t\t\t\t\theights[height]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tboolean first = true;\n\t\t\tfor (int height=0; height<heights.length; height++) {\n\t\t\t\tif (heights[height] % 2 != 0) {\n\t\t\t\t\tif (!first) {\n\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\tfw.write(\" \");\n\t\t\t\t\t}\n\t\t\t\t\tString str2 = height+\"\";\n\t\t\t\t\tSystem.out.print(str2);\n\t\t\t\t\tfw.write(str2);\n\t\t\t\t\tfirst = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString str1 = \"\" + \"\\n\";\r\n\t\t\tSystem.out.print(str1);\n\t\t\tfw.write(str1);\r\n\t\t}\r\n\r\n\t\tsc.close();\n\t\tfw.close();\n\t\tfr.close();\r\n\t}\r\n}\r\n", "idx": "6122"}
{"func": "package googlejam6.p124;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class B {\n    public static void main(String[] args) throws FileNotFoundException {\n        FileInputStream fin = new FileInputStream(\"B-large.in.txt\");\n        Scanner scanner = new Scanner(fin);\n        FileOutputStream fout = new FileOutputStream(\"B-large.out.txt\");\n        PrintWriter writer = new PrintWriter(fout);\n        int testCount = scanner.nextInt();\n        for (int testCase = 1; testCase <= testCount; ++testCase) {\n            int n = scanner.nextInt();\n            int[][] a = new int[2*n-1][n];\n            for (int i = 0; i < 2*n-1; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    a[i][j] = scanner.nextInt();\n                }\n            }\n\t\t\tMap<Integer, Integer> m = new HashMap<>();\n\t\t\tfor (int[] ar : a) {\n\t\t\t    for (int e : ar) {\n\t\t\t        if (!m.containsKey(e)) {\n\t\t\t            m.put(e, 0);\n\t\t\t        }\n\t\t\t        m.put(e, m.get(e) + 1);\n\t\t\t    }\n\t\t\t}\n\t\t\tint[] res1 = new int[a[0].length];\n\t\t\tint i1 = 0;\n\t\t\tfor (int e : m.keySet()) {\n\t\t\t    if (m.get(e) % 2 == 1) {\n\t\t\t        res1[i1++] = e;\n\t\t\t    }\n\t\t\t}\n\t\t\tArrays.sort(res1);\n            int[] res = res1;\n            String out = \"\" + res[0];\n            for (int i = 1; i < res.length; ++i) {\n                out += \" \" + res[i];\n            }\n            writer.printf(\"Case #%d: %s\\n\", testCase, out);\n        }\n        writer.close();\n    }\n}\n", "idx": "6124"}
{"func": "package googlejam6.p128;\n\nimport java.util.Scanner;\nimport java.io.PrintStream;\nimport java.util.Arrays;\n\npublic class Rank {\n    \n    public static void main(String[] args) {\n        Rank r = new Rank();\n\t\tint i,T;\n\t\tT=r.sc.nextInt();\n\t\tfor (i=1;i<=T;i++) {\n\t\t    r.out.printf(\"Case #%d: \",i);\n\t\t    r.N=r.sc.nextInt();\n\t\t\tint allsize=(2*r.N-1)*r.N;\n\t\t\tint i1,i0,j;\n\t\t\tr.all=new int[allsize];\n\t\t\tr.missing=new int[r.N];\n\t\t\tfor (i1=0;i1<allsize;i1++) r.all[i1]=r.sc.nextInt();\n\t\t\ti1=j=i0=0;\n\t\t\tArrays.sort(r.all);\n\t\t\twhile (true) {\n\t\t\t    i0=i1;\n\t\t\t    if (i0>=allsize) break;\n\t\t\t    while (i1<allsize && r.all[i0]==r.all[i1]) i1++;\n\t\t\t    int count=i1-i0;\n\t\t\t    if ((count & 1)==1) r.missing[j++]=r.all[i0]; \n\t\t\t}\n\t\t\tfor (int x : r.missing) r.out.printf(\"%d \",x);\n\t\t\tr.out.println();\n\t\t}\n    }\n    \n    Scanner sc=new Scanner(System.in);\n    PrintStream out=System.out;\n    \n    int N;\n    int[] all;\n    int[] missing;\n    \n}\n", "idx": "6128"}
{"func": "package googlejam6.p130;\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n    \r\n    private static String fn = \"B-large\";\r\n    private static boolean isSubmit = true;\r\n    \r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        if (isSubmit) {\r\n            System.setIn(new FileInputStream(\"test/\" + fn + \".in\"));\r\n            System.setOut(new PrintStream(\"test/\" + fn + \".out\"));\r\n        }\r\n        \r\n        Scanner in = new Scanner(System.in);\r\n        int t0 = in.nextInt();\r\n        for (int i0 = 1; i0 <= t0; i0++) {\r\n            int n = in.nextInt();\r\n            int[] a = new int[2510];\r\n            for (int i = 0; i < n * (2 * n - 1); i++) {\r\n                a[in.nextInt()]++;\r\n            }\r\n            \r\n            System.out.print(\"Case #\" + i0 + \":\");\r\n            for (int i = 1; i <= 2500; i++) {\r\n                if (a[i] % 2 != 0) {\r\n                    System.out.print(\" \" + i);\r\n                }\r\n            }\r\n            System.out.println();\r\n        }\r\n        \r\n        in.close();\r\n    }\r\n}\r\n", "idx": "6130"}
{"func": "package googlejam6.p131;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class probB {\r\n\tstatic  String input = \"probB.in\";\r\n\tstatic  String output = \"probB.out\";\r\n\tpublic static void main(String[] args) throws IOException{\r\n//\t\tBufferedReader in =new BufferedReader(new InputStreamReader(System.in));\r\n//\t\tPrintWriter out = new PrintWriter(System.out);\r\n\t\tBufferedReader in =new BufferedReader(new FileReader(input));\r\n\tPrintWriter out = new PrintWriter(new FileWriter(output));\r\n\t\t\r\n\t\tint t = Integer.parseInt(in.readLine());\r\n\t\t\r\n\t\tfor(int i=1; i<=t; i++){\r\n\t\t\tout.print(\"Case #\"+i+\": \");\r\n\t\t\tint n = Integer.parseInt(in.readLine());\r\n\t\t\tHashMap<Integer, Integer> map = new HashMap<>();\n\t\t\t\n\t\t\tfor(int i1=1; i1<n*2; i1++){\n\t\t\t\tStringTokenizer tok = new StringTokenizer(in.readLine());\n\t\t\t\twhile(tok.hasMoreTokens()){\n\t\t\t\t\tint a = Integer.parseInt(tok.nextToken());\n\t\t\t\t\tif(map.containsKey(a)){\n\t\t\t\t\t\tmap.put(a, map.get(a)+1);\n\t\t\t\t\t}\telse {\n\t\t\t\t\t\tmap.put(a, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrayList<Integer> res = new ArrayList<>();\n\t\t\t\n\t\t\tIterator<Integer> iter = map.keySet().iterator();\n\t\t\twhile(iter.hasNext()){\n\t\t\t\tint height = iter.next();\n\t\t\t\tint count = map.get(height);\n\t\t\t\t\n\t\t\t\tif(count%2==1){\n\t\t\t\t\tres.add(height);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(res);\n\t\t\tfor(int a: res){\n\t\t\t\tout.print(a+\" \");\n\t\t\t}\n\t\t\t\n\t\t\tif(res.size()!=n){\n\t\t\t\tSystem.out.println(\"error\");\n\t\t\t}\r\n\t\t\tout.println();\r\n\t\t}\r\n\t\tout.flush();\r\n\t}\r\n\t\r\n}\r\n", "idx": "6131"}
{"func": "package googlejam6.p132;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Soldiers {\n\tpublic static void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint t = Integer.parseInt(in.nextLine());\n\t\t\n\t\tfor(int caseNum = 1; caseNum<=t; caseNum++){\n\t\t\tint q =(Integer.parseInt(in.nextLine()) * 2) -1 ;\n\t\t\tint[] heights = new int[2500];\n\t\t\tfor(int i = 0; i<q; i++){\n\t\t\t\tString[] args1 = in.nextLine().split(\" \");\n\t\t\t\tfor(String s : args1){\n\t\t\t\t\tint foo = Integer.parseInt(s);\n\t\t\t\t\theights[foo-1]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tList<String> ans = new ArrayList<String>();\n\t\t\tfor(int i =0; i<heights.length; i++){\n\t\t\t\tif(heights[i]%2!=0){\n\t\t\t\t\tans.add(String.valueOf(i+1));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\" + caseNum+\":\");\n\t\t\tfor(String s : ans){\n\t\t\t\tSystem.out.print(\" \" + s);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\n\t}\n}\n", "idx": "6132"}
{"func": "package googlejam6.p134;\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class RankandFile {\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tSystem.setOut(new PrintStream(new File(\"ans2.txt\")));\n\t\tScanner a=new Scanner(new BufferedInputStream(new FileInputStream(\"2.txt\")));\n\t\tint caseNum=a.nextInt();\n\t\tfor (int i=1;i<=caseNum;i++) {\n\t\t\tint n=a.nextInt();\n\t\t\tSystem.out.print(\"Case #\"+i+\": \");\n\t\t\tHashMap<Integer,Integer> myMap=new HashMap<Integer,Integer>();\n\t\t\tfor (int j=0;j<2*n-1;j++) {\n\t\t\t\tfor (int k=0;k<n;k++) {\n\t\t\t\t\tint s=a.nextInt();\n\t\t\t\t\tif (myMap.containsKey(s)) {\n\t\t\t\t\t\tmyMap.put(s, myMap.get(s)+1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmyMap.put(s,1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrayList<Integer> b=new ArrayList<Integer>();\n\t\t\tfor (Integer p:myMap.keySet()) {\n\t\t\t\t//System.out.println(p+\" \"+myMap.get(p));\n\n\t\t\t\tif (myMap.get(p) % 2!=0) {\n\t\t\t\t\tb.add(p);\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(b);\n\t\t\tfor (int k=0;k<b.size();k++) {\n\t\t\t\tSystem.out.print(b.get(k)+\" \");\n\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "idx": "6134"}
{"func": "package googlejam6.p027;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class B\r\n{\r\n   static int N;\r\n   static int [][]grid;\r\n   static int [][] inputs;\r\n   public static void main(String[] args) throws Exception\r\n   {\r\n      System.setOut(new PrintStream(new File(\"a.out\")));\r\n      Scanner scan = new Scanner(new File(\"a.in\"));\r\n      int numCases = scan.nextInt();\r\n      for (int z = 1; z <= numCases; z++)\r\n      {\r\n         int [] count = new int[2501];\r\n         N = scan.nextInt();\r\n         grid = new int[N][N];\r\n         inputs = new int[2*N-1][N];\r\n         for (int i = 0 ; i < 2*N-1; i++)\r\n         {\r\n            for (int j = 0; j < N; j++) \r\n            {\r\n               inputs[i][j] = scan.nextInt();\r\n               count[inputs[i][j]]++;\r\n            }\r\n         }\r\n\r\n         System.out.print(\"Case #\" + z + \":\");\r\n         for (int i = 0; i < count.length; i++) \r\n         {\r\n            if (count[i] % 2 != 0)\r\n            {\r\n               System.out.print(\" \" + i);\r\n            }\r\n         }\r\n         System.out.println();\r\n         \r\n      }\r\n      scan.close();\r\n   }\r\n}\r\n", "idx": "6027"}
{"func": "package googlejam6.p065;\nimport java.io.*;\nimport java.util.Scanner;\n\n\npublic class B {\n\n    public static void main(String [] args) throws IOException {\n            //Scanner s = new Scanner(new BufferedReader(new FileReader(\"B-small-attempt0.in\")));\n            Scanner s = new Scanner(new BufferedReader(new FileReader(\"B-large.in\")));\n           // Scanner s = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n            int ncase = s.nextInt();\n            for (int i = 1; i <= ncase; i++) {\n                int N = s.nextInt();\n                int[] Height = new int[2501];\n\t\t\t\tfor (int i1 = 1; i1 <= 2*N - 1; i1++) {\n\t\t\t\t    for (int j = 1; j <= N; j++) {\n\t\t\t\t        int h = s.nextInt();\n\t\t\t\t        Height[h-1]++;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.printf(\"Case #%d:\", i);\n\t\t\t\tfor (int i2 = 0; i2 <= 2500; i2++) {\n\t\t\t\t    if( Height[i2] % 2 == 1 ) {\n\t\t\t\t        System.out.printf(\" %d\", i2+1);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tSystem.out.printf(\"\\n\");\n            }\n            s.close();\n    }\n\n}\n", "idx": "6065"}
{"func": "package googlejam6.p096;\nimport java.io.*;\nimport java.util.*;\n\npublic class rank {\n\n    public static void main (String[] args) {\n\n\tScanner in = new Scanner(System.in);\n\n\tint count = in.nextInt();\n\tfor (int l = 0; l < count; l++) {\n\n\t    int n = in.nextInt();\n\n\t    int[] array = new int[2501];\n\t    for (int i = 0; i < 2501; i++) {\n\t\tarray[i] = 0;\n\t    }\n\n\t    for (int j = 0; j < ((2*n*n)-n); j++) {\n\t\tint next = in.nextInt();\n\t\tarray[next] = array[next]+1;\n\t    }\n\n\t    System.out.print(\"Case #\" + (l+1) + \":\");\n\n\t    for (int i = 0; i < 2501; i++) {\n\t\tif (array[i]%2 == 1)\n\t\t    System.out.print(\" \" + i);\n\t    }\n\n\t    System.out.println();\n\n\n\t}\n\n    }\n\n}\n", "idx": "6096"}
{"func": "package googlejam6.p135;\nimport java.io.*;\nimport java.util.*;\nimport java.util.regex.Pattern;\n\npublic class B {\n    public static void main(String[] args) throws Exception {\n//        InputStream in = System.in;\n        InputStream in = new FileInputStream(\"/home/floris/Downloads/B-large.in\");\n        System.setOut(new PrintStream(\"/home/floris/dev/java/Codejam2016/src/B.out\"));\n        Scanner sc = new Scanner(in);\n        sc.useDelimiter(Pattern.compile(\"[\\n /]\"));\n\n        for (int c = 1, cases = sc.nextInt(); c <= cases; c++) {\n            int n = sc.nextInt();\n            int[] heights = new int[2501];\n\n            for (int i = 0; i < 2*n-1; i++) {\n                for (int j = 0; j < n; j++) {\n                    heights[sc.nextInt()]++;\n                }\n            }\n\n            System.out.printf(\"Case #%d:\", c);\n            for (int i = 0; i < heights.length; i++) {\n                if (heights[i] %2 ==1) System.out.print(\" \" + i);\n            }\n            System.out.println(\"\");\n\n        }\n    }\n}\n", "idx": "6135"}
{"func": "package googlejam6.p162;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class CodeJam2016R1AP2 {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint T = Integer.parseInt(br.readLine());\r\n\t\tfor(int caseid=1; caseid<=T; caseid++)\r\n\t\t{\r\n\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\tint[] count = new int[2501];\r\n\t\t\tfor(int i = 0; i < 2*N -1;i++) {\r\n\t\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\r\n\t\t\t\tfor(int j = 0; j < N; j++) {\r\n\t\t\t\t\tint c = Integer.parseInt(st.nextToken());\r\n\t\t\t\t\tcount[c]++;\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t\tSystem.out.print(\"Case #\"+caseid + \":\");\r\n\t\t\tint counter = 0;\r\n\t\t\tfor(int i = 0; i < 2501; i++) {\r\n\t\t\t\t\r\n\t\t\t\tif(count[i] % 2 ==1) {\r\n\t\t\t\t\tcounter++;\r\n\t\t\t\t\tSystem.out.print(\" \"+i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\tif(counter != N) System.out.println(\"WJDALSKDJALKSDJAS\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6162"}
{"func": "package googlejam6.p187;\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintStream;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class RankandFile {\r\n    public static void main(String[] args) throws IOException {\r\n        Scanner scanner = new Scanner(new FileReader(\"smallB.in\"));\r\n        PrintStream out = new PrintStream(new FileOutputStream(\"B.out\"));\r\n        int T = scanner.nextInt();\r\n        scanner.nextLine();\r\n        for (int t = 1; t <= T; t++) {\r\n            int N = scanner.nextInt();\r\n            HashMap<Integer,Integer> counts = new HashMap<>();\r\n            for (int i = 1; i < 2 * N; i++) {\r\n                for (int i1 = 0; i1 < N; i1++) {\r\n                    int n = scanner.nextInt();\r\n                    int c = counts.getOrDefault(n, 0);\r\n                    counts.put(n, c+1);\r\n                }\r\n            }\r\n            out.println(\"Case #\" + t + \": \" + counts.entrySet().stream().filter(e -> e.getValue()%2 == 1).mapToInt(Map.Entry::getKey).sorted().boxed().map(String::valueOf).collect(\r\n                    Collectors.joining(\" \")));\r\n        }\r\n    }\r\n}\r\n", "idx": "6187"}
{"func": "package googlejam6.p207;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.math.BigInteger;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\nimport java.util.TreeMap;\r\n\r\n\r\npublic class RankFile {\r\n\tpublic static void main(String[] args){\r\n\t\tFile a = new File(\"B-large.in\");\r\n\t\tScanner input = null;\r\n\t\ttry {\r\n\t\t\tinput = new Scanner(a);\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t//Scanner input = new Scanner(System.in);\r\n\t\t\r\n\t\tFile b = new File(\"B-output.txt\");\r\n\t\tFileWriter fw = null;\r\n\t\ttry {\r\n\t\t\tfw = new FileWriter(b);\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tint number = input.nextInt();\r\n\t\tinput.nextLine();\r\n\t\tint cases = number;\r\n\t\t\r\n\t\twhile(number > 0){\r\n\t\t\tint n = input.nextInt();\r\n\t\t\tString result = \"\";\r\n\t\t\t\r\n\t\t\tHashSet<Integer> present = new HashSet<Integer>();\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < 2*n-1; i++){\r\n\t\t\t\tfor (int j = 0; j < n; j++){\r\n\t\t\t\t\tint d = input.nextInt();\r\n\t\t\t\t\tif(present.contains(d)){\r\n\t\t\t\t\t\tpresent.remove(d);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpresent.add(d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tList<Integer> sortList = new ArrayList<Integer>(present);\r\n\t\t\tCollections.sort(sortList);\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < sortList.size(); i++){\r\n\t\t\t\tresult += sortList.get(i) + \" \";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tfw.write(\"Case #\" + (cases - number + 1) + \": \" + result + \"\\n\");\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tnumber--;\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tfw.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6207"}
{"func": "package googlejam6.p227;\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n    private static final String FORMAT = \"Case #%d: %s\\n\";\n\n    public static void main(String[] args) throws FileNotFoundException {\n        PrintWriter writer = new PrintWriter(new FileOutputStream(\"output\"));\n        Scanner in = new Scanner(new FileInputStream(\"B-large.in\"));\n        int t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\n\n        for (int i = 1; i <= t; ++i) {\n            int col = in.nextInt();\n\n            Map<Integer, Integer> map = new HashMap<>();\n            for (int j = 0; j < 2 * col - 1; j++) {\n                for (int k = 0; k < col; k++) {\n                    int num = in.nextInt();\n                    if (!map.containsKey(num)) {\n                        map.put(num, 1);\n                    } else {\n                        int count = map.get(num);\n                        map.put(num, count + 1);\n                    }\n                }\n            }\n            TreeSet<Integer> missing = new TreeSet<>();\n            for (Map.Entry<Integer, Integer> entry: map.entrySet()) {\n                if (entry.getValue() % 2 == 1) {\n                    missing.add(entry.getKey());\n                }\n            }\n            StringBuilder output = new StringBuilder();\n            for (int num: missing) {\n                output.append(num).append(\" \");\n            }\n            writer.printf(FORMAT, i, output.toString());\n        }\n        writer.flush();\n        writer.close();\n    }\n}", "idx": "6227"}
{"func": "package googlejam6.p249;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.StringJoiner;\n\n/**\n * Copyright 2016, Emory University\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @author \tHenry(Yu-Hsin) Chen ({@code yu-hsin.chen@emory.edu})\n * @version\t1.0\n * @since \tApr 15, 2016\n */\npublic class RankFile {\n\tpublic static void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint i, j, k, C = in.nextInt(), N, num; StringJoiner joiner;\n\t\tSet<Integer> set = new HashSet<>(); List<Integer> list;\n\t\tfor(i = 1; i <= C; i++){\n\t\t\tN = in.nextInt(); set.clear();\n\t\t\tfor(j = 0; j < 2* N-1; j++){\n\t\t\t\tfor(k = 0; k < N; k++){\n\t\t\t\t\tnum = in.nextInt();\n\t\t\t\t\tif(set.contains(num))\n\t\t\t\t\t\tset.remove(num);\n\t\t\t\t\telse set.add(num);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist = new ArrayList<>(set);\n\t\t\tCollections.sort(list);\n\t\t\tSystem.out.print(\"Case #\" + i + \": \");\n\t\t\t\n\t\t\tjoiner = new StringJoiner(\" \");\n\t\t\tfor(int nn : list) joiner.add(Integer.toString(nn));\n\t\t\tSystem.out.println(joiner.toString());\n\t\t}\n\t\tin.close();\n\t}\n}\n", "idx": "6249"}
{"func": "package googlejam6.p272;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\npublic class RankAndFile {\r\n\tstatic PrintWriter writer;\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\r\n\t\tScanner sc = new Scanner(new File(\"in.txt\"));\r\n\t\twriter = new PrintWriter(\"out.txt\", \"UTF-8\");\r\n\t\tint T = sc.nextInt();\r\n\t\tfor (int t = 0; t < T; t++) {\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tArrayList<Integer> al = new ArrayList<>();\r\n\t\t\tfor (int i = 0; i < 2 * n - 1; i++) {\r\n\t\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\t\tal.add(sc.nextInt());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tCollections.sort(al);\r\n\t\t\tArrayList<Integer> left = new ArrayList<>();\r\n\t\t\tfor (int i = 0; i < al.size(); i++) {\r\n\t\t\t\tint bb = al.get(i);\r\n\t\t\t\tif (i == al.size() - 1) {\r\n\t\t\t\t\tleft.add(bb);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tint cc = al.get(i + 1);\r\n\t\t\t\tif (bb == cc) {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tleft.add(bb);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tString m = \"\";\r\n\t\t\tfor (Integer g : left)\r\n\t\t\t\tm += g + \" \";\r\n\t\t\tm=m.substring(0,m.length()-1);\r\n\t\t\tString s = \"Case #\" + (t+1) + \": \" + m;\n\t\t\twriter.println(s);\n\t\t\tSystem.out.println(s);\r\n\r\n\t\t}\r\n\t\twriter.close();\r\n\t}\r\n}\r\n", "idx": "6272"}
{"func": "package googlejam6.p296;\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\npublic class Sheep {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tfinal int T = Integer.parseInt(sc.nextLine());\r\n\t\tfor (int caseCount = 1; caseCount <= T; caseCount++) {\r\n\t\t\tSystem.out.print(\"Case #\" + caseCount + \":\");\r\n\t\t\tfinal int N = sc.nextInt();\r\n\t\t\tint[] arr = new int[2501];\r\n\t\t\tfor (int i = 0; i < 2*N*N - N; i++) {\r\n\t\t\t\tarr[sc.nextInt()]++;\r\n\t\t\t}\r\n\t\t\tArrayList<Integer> al = new ArrayList<Integer>();\r\n\t\t\tfor (int i = 0; i < arr.length; i++) {\r\n\t\t\t\tif (arr[i] % 2 != 0) {\r\n\t\t\t\t\tal.add(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tCollections.sort(al);\r\n\t\t\tfor (int i = 0; i < al.size(); i++) {\r\n\t\t\t\tSystem.out.print(\" \" + al.get(i));\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6296"}
{"func": "package googlejam6.p319;\nimport java.util.*;\n\npublic class B\n{\n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n\n        int T = sc.nextInt();\n\n        for(int i = 0; i < T; i++)\n        {\n            String res = \"\";\n            int N = sc.nextInt();\n            int d[] = new int[2500];\n            List<Integer> r = new ArrayList<>();\n\n            for(int j = 0; j < (2*N-1)*N; j++)\n            {\n                d[sc.nextInt()-1]++;\n            }\n            for(int j = 0; j < 2500; j++)\n            {\n                if(d[j]%2 != 0) r.add(j+1);\n            }\n            Collections.sort(r);\n            res += r.get(0);\n            for(int j = 1; j < r.size(); j++) res += \" \"+r.get(j);\n\n            System.out.println(\"Case #\"+(i+1)+\": \"+res);\n        }\n    }\n}\n", "idx": "6319"}
{"func": "package googlejam6.p347;\nimport java.util.*;\nimport java.io.*;\npublic class G2{\n\tpublic static void main(String args[])throws IOException{\n\t\t//Scanner in=new Scanner(System.in);\n\t\tScanner in=new Scanner(new File(\"input.in\"));\n\t\tPrintWriter pw=new PrintWriter(new FileWriter(new File(\"output.out\")));\n\t\tint T=in.nextInt();\n\t\tfor(int t=1;t<=T;t++){\n\t\t\tint n=in.nextInt();\n\t\t\tHashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();\n\t\t\tfor(int i=0;i<2*n-1;i++){\n\t\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\t\tint tmp=in.nextInt();\n\t\t\t\t\tInteger obj=new Integer(tmp);\n\t\t\t\t\tif(hm.containsKey(obj)){\n\t\t\t\t\t\thm.put(obj,hm.get(obj)+1);\n\t\t\t\t\t}else\n\t\t\t\t\t\thm.put(obj,1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tList<Integer> list=new ArrayList<Integer>();\n\t\t\tfor (Map.Entry<Integer, Integer> entry : hm.entrySet()) {\n\t\t\t\tif ( (Integer)entry.getValue()%2!=0) {\n\t\t\t\t\tlist.add(entry.getKey());\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(list);\n\t\t\tString res=list.toString();\n\t\t\t//System.out.println(\"Case #\"+t+\": \"+res.substring(1,res.length()-1).replaceAll(\",\",\"\"));\n\t\t\tpw.println(\"Case #\"+t+\": \"+res.substring(1,res.length()-1).replaceAll(\",\",\"\"));\n\t\t}\n\t\t\tSystem.out.println(\"Done\");\n\t\tpw.close();\t\t\t\t\t\t\t\t\t   \n\t}\n}\n", "idx": "6347"}
{"func": "package googlejam6.p138;\nimport java.util.*;\n\npublic class B\n{\n  private int N;\n  \n  List<List<Integer>> slips = new ArrayList<>();\n\n  public B(int N)\n  {\n    this.N = N;\n  }\n  \n  public static void main(String[] args)\n  {\n    Scanner in = new Scanner(System.in);\n    \n    int N = in.nextInt();\n    \n    for(int i = 0; i < N; ++i)\n    {\n      int inputN = in.nextInt();\n      int caseN = i+1;\n      \n      B b = new B(inputN);\n      \n      for(int e = 0; e < (2*inputN-1); ++e)\n      {\n        List<Integer> slip = new ArrayList<>();\n        \n        for(int f = 0; f < inputN; ++f)\n          slip.add(in.nextInt());\n          \n        b.slips.add(slip);\n      }\n\tint[] counts = new int[10000];\n\t\n\tfor(List<Integer> slip : b.slips)\n\t{\n\t  for(Integer i1 : slip)\n\t    counts[i1]++;\n\t}\n\t\n\tStringBuilder result1 = new StringBuilder();\n\t\n\tfor(int i2 = 1; i2 <= 2500; ++i2)\n\t{\n\t  if(counts[i2]%2 != 0)\n\t  {\n\t    if(result1.length() > 0)\n\t      result1.append(\" \");\n\t      \n\t    result1.append(\"\"+i2);\n\t  }\n\t}\n      \n      String result = result1.toString();\n      \n      String resultString = result;\n      \n      System.out.println(\"Case #\"+caseN+\": \"+resultString);\n    }\n  }\n}\n", "idx": "6138"}
{"func": "package googlejam6.p139;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\npublic class B {\n\n    Scanner scanner;\n\n\n    public static void main(String[] args) throws FileNotFoundException {\n        B r = new B();\n\t\tFile input = new File(\"data/gcj/2016/r1a/B-large.in\");\n\t\tr.scanner = new Scanner(input);\n\t\t\n\t\tFile test = new File(\"data/gcj/2016/r1a/B.out\");\n\t\tPrintStream out = new PrintStream(new FileOutputStream(test));\n\t\tSystem.setOut(out);\n\t\t\n\t\tint testCase = r.scanner.nextInt();\n\t\tr.scanner.nextLine();\n\t\t\n\t\tfor (int i = 1; i <= testCase; i++) {\n\t\t    System.out.printf(\"Case #%d:\", i);\n\t\t    int[] count = new int[3000];\n\t\t\tint n = r.scanner.nextInt();\n\t\t\tfor (int i2 = 0; i2 < n * (n + n - 1); i2++) {\n\t\t\t    int a = r.scanner.nextInt();\n\t\t\t    count[a]++;\n\t\t\t}\n\t\t\tfor (int i1 = 0; i1 < count.length; i1++) {\n\t\t\t    if (count[i1] % 2 == 1) {\n\t\t\t        System.out.print(\" \" + i1);\n\t\t\t    }\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n    }\n\n}\n", "idx": "6139"}
{"func": "package googlejam6.p140;\n// Code by PepeOfMath\n//\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class Problem2 {\n    public static void main(String[] args) throws FileNotFoundException {\n    \t\n        //hard code the file location\n        //open file\n        //get number of test cases\n        File f = new File(\"B-large.in\");\n        Scanner s = new Scanner(f);\n        String line = s.nextLine();\n        int T = Integer.parseInt(line);\n        \n        //open output file\n        File f2 = new File(\"largeoutput.txt\");\n        PrintWriter p = new PrintWriter(f2);\n        \n        \n        for ( int j = 1; j <= T; j++) {\n        \tint[] counts = new int[2500];\n        \tint n = s.nextInt();\n        \tfor (int i = 0; i < 2*n*n-n; i++) {\n        \t\tint tmp = s.nextInt();\n        \t\tcounts[tmp-1]++;\n        \t}\n        \tString result = \"\";\n        \tfor (int i = 0; i < counts.length; i++) {\n        \t\tif (counts[i] % 2 != 0) {\n        \t\t\tresult += (i+1) + \" \";\n        \t\t}\n        \t}\n\t\t\tp.println(\"Case #\" + j + \": \" + result);\n\t\t   \t\n        \n        }\n        \n        p.close();\n        s.close();\n    }\n    \n}\n", "idx": "6140"}
{"func": "package googlejam6.p143;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\n\npublic class MakeLoveNotWar {\n\n  public static void main(String[] args) throws FileNotFoundException {\n    Scanner in = new Scanner(new File(\"B-large (1).in\"));\n    PrintWriter out = new PrintWriter(new File(\"hippieOutL.txt\"));\n    long numTests = in.nextLong();\n\n    for (long test = 0; test < numTests; test++) {\n      in.nextLine();\n      long testSize = in.nextLong();\n      ArrayList<Integer> heights = new ArrayList<Integer>();\n      for(long linenum = 0; linenum < 2*testSize-1; linenum++){\n\n        in.nextLine();\n        for(int col = 0; col < testSize; col++){\n          Integer h = in.nextInt();\n          if(heights.contains(h)){\n            heights.remove(h);\n          }\n          else{\n            heights.add(h);\n          }\n        }\n\n      }\n      Collections.sort(heights);\n      out.print(\"Case #\" + (test+1) + \": \");\n      if(heights.size() > 0){\n        out.print(heights.get(0));\n        for(int i = 1; i < heights.size(); i++){\n          out.print(\" \" + heights.get(i));\n        }\n      }\n      out.println();\n    }\n    out.close();\n    in.close();\n  }\n\n}\n", "idx": "6143"}
{"func": "package googlejam6.p144;\n\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\nclass B {\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    int T = scanner.nextInt();\n    for (int t = 1; t <= T; t++) {\n\n      int N = scanner.nextInt();\n      HashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n\n      for (int row = 0; row < N * 2 - 1; row ++) {\n        for (int col = 0; col < N; col ++) {\n          int height = scanner.nextInt();\n          if (count.containsKey(height)) {\n            count.put(height, count.get(height) + 1);\n          }\n          else {\n            count.put(height, 1);\n          }\n        }\n      }\n\n      ArrayList<Integer> miss = new ArrayList<Integer>(N);\n      for (Integer key: count.keySet()) {\n        if (count.get(key) % 2 == 1) {\n          miss.add(key);\n        }\n      }\n\n      Collections.sort(miss);\n\n      System.out.printf(\"Case #%d:\", t);\n      for (Integer height: miss) {\n        System.out.print(\" \" + height);\n      }\n      System.out.print(\"\\n\");\n    }\n  }\n}", "idx": "6144"}
{"func": "package googlejam6.p145;\n\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by luult on 4/9/2016.\r\n */\r\npublic class ProblemB\r\n{\r\n    static String inputPath = \"D:\\\\contest\\\\trainning\\\\round1a2016\\\\src\\\\main\\\\resources\\\\B-large.in\";\r\n    static String outputPath = \"D:\\\\contest\\\\trainning\\\\round1a2016\\\\src\\\\main\\\\resources\\\\B-large.out\";\r\n\r\n    static Scanner in;\r\n    static BufferedWriter bw;\r\n    static int numberTest;\r\n\r\n\r\n    static Integer n;\r\n    static int[] numberApper = new int[2600];\r\n    static List<Integer> result = new ArrayList();\r\n\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        bw = new BufferedWriter(new FileWriter(outputPath));\r\n        in = new Scanner(new BufferedReader(new FileReader(inputPath)));\r\n\r\n        numberTest = in.nextInt();\r\n        for (int i = 0; i < numberTest; i++)\r\n        {\r\n            System.out.println(\"test :\" + (i + 1));\r\n            n = in.nextInt();\n\t\t\tfor (int i1 = 0; i1 < 2500; i1++)\n\t\t\t{\n\t\t\t    numberApper[i1] = 0;\n\t\t\t}\n\t\t\tfor (int i2 = 0; i2 < 2 * n - 1; i2++)\n\t\t\t{\n\t\t\t    int pre = 0;\n\t\t\t    for (int j = 0; j < n; j++)\n\t\t\t    {\n\t\t\t        int x = in.nextInt();\n\t\t\t        if (x == pre)\n\t\t\t        {\n\t\t\t            System.out.println(\"-----------------------------\");\n\t\t\t        }\n\t\t\t        pre = x;\n\t\t\t        numberApper[x]++;\n\t\t\t    }\n\t\t\t}\r\n            result = new ArrayList();\n\t\t\tfor (int i1 = 0; i1 < 2500; i1++)\n\t\t\t    if (numberApper[i1] > 0 && numberApper[i1] % 2 == 1)\n\t\t\t    {\n\t\t\t        result.add(i1);\n\t\t\t    }\r\n            String list = \"\";\n\t\t\tfor (Integer s : result)\n\t\t\t    list += s + \" \";\n\t\t\tString result1 = \"Case #\" + (i + 1) + \": \" + list + \"\\n\";\n\t\t\tbw.write(result1);\r\n        }\r\n\r\n        bw.close();\r\n    }\r\n}\r\n", "idx": "6145"}
{"func": "package googlejam6.p147;\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint T = sc.nextInt();\r\n\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tHashMap<Integer, Integer> map = new HashMap<>();\r\n\t\t\tfor (int j = 0; j < N * (2 * N - 1); j++) {\r\n\t\t\t\tint n = sc.nextInt();\r\n\t\t\t\tif (map.containsKey(n)) {\r\n\t\t\t\t\tmap.put(n, map.get(n) + 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmap.put(n, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tArrayList<Integer> list = new ArrayList<>();\r\n\t\t\tfor (int k : map.keySet()) {\r\n\t\t\t\tif (map.get(k) % 2 == 1) {\r\n\t\t\t\t\tlist.add(k);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tCollections.sort(list);\r\n\t\t\tSystem.out.print(\"Case #\" + i + \":\");\r\n\t\t\tfor (int k : list) {\r\n\t\t\t\tSystem.out.print(\" \" + k);\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\tsc.close();\r\n\t}\r\n}", "idx": "6147"}
{"func": "package googlejam6.p151;\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.util.Scanner;\r\n\r\npublic class Solve2016R1A_B {\r\n\tprivate static String filePath = \"B-large.in\";\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tStringBuffer answer = new StringBuffer();\r\n\t\tfinal int MAXH = 2501;\r\n\r\n\t\ttry (Scanner sc = new Scanner(new File(filePath))) {\r\n\t\t\tint T = sc.nextInt();\r\n\t\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\t\tanswer.append(\"Case #\" + i + \":\");\r\n\t\t\t\tint N = sc.nextInt();\r\n\t\t\t\t\r\n\t\t\t\tint lineCnt = 2 * N - 1;\r\n\t\t\t\tint[] heights = new int[MAXH];\r\n\t\t\t\tfor (int j = 0; j < lineCnt; j++) {\r\n\t\t\t\t\tfor (int k = 0; k < N; k++) {\r\n\t\t\t\t\t\tint h = sc.nextInt();\r\n\t\t\t\t\t\theights[h]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int h = 0; h < MAXH; h++) {\r\n\t\t\t\t\tif (heights[h] % 2 != 0) {\r\n\t\t\t\t\t\tanswer.append(\" \").append(h);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tanswer.append(\"\\n\");\r\n\t\t\t}\r\n\t\t\tString outPath = \"answer.out\";\n\t\t\tif (filePath != null && !filePath.equals(\"\")) {\n\t\t\t\toutPath = filePath.substring(0, filePath.length() - 2) + \"out\";\n\t\t\t}\n\t\t\ttry (FileOutputStream fos = new FileOutputStream(outPath, false)) {\n\t\t\t\tfos.write(answer.toString().getBytes());\n\t\t\t}\n\t\t\tSystem.out.println(answer);\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6151"}
{"func": "package googlejam6.p152;\nimport java.io.*;\nimport java.util.*;\nimport java.lang.*;\n\npublic class Rank {\n\n    public static void main(String args[]) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st;\n        Scanner sc;\n        int cases = Integer.parseInt(br.readLine());\n        for (int i = 1; i <= cases; i++) {\n            System.out.print(String.format(\"Case #%d:\", i));\n            int n = Integer.parseInt(br.readLine());\n\t\t\tint[] counts = new int[3000];\n\t\t\tfor (int i2 = 0; i2 < 2*n - 1; i2++) {\n\t\t\t    StringTokenizer st1 = new StringTokenizer(br.readLine());\n\t\t\t\tint[] arr = new int[n];\n\t\t\t\tfor (int i11 = 0; i11 < n; i11++) {\n\t\t\t\t    arr[i11] = Integer.parseInt(st1.nextToken());\n\t\t\t\t}\n\t\t\t\tint[] line = arr;\n\t\t\t    for (int sol : line) {\n\t\t\t        counts[sol]++;\n\t\t\t    }\n\t\t\t}\n\t\t\tint[] out = new int[n];\n\t\t\tint j = 0;\n\t\t\tfor (int i1 = 0; i1 < 3000; i1++) {\n\t\t\t    if (counts[i1] % 2 == 1) {\n\t\t\t        out[j++] = i1;\n\t\t\t    }\n\t\t\t}\n\t\t\tfor (int q : out) {\n\t\t\t    System.out.print(\" \" + q);\n\t\t\t}\n\t\t\tSystem.out.println();\n        }\n    }\n}\n", "idx": "6152"}
{"func": "package googlejam6.p154;\n\nimport java.util.Scanner;\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner sc = new Scanner(System.in);\n\t\tint tests = sc.nextInt();\n\t\tint maxHeight = 2500;\n\t\tfor(int testNum = 1; testNum <= tests; testNum++)\n\t\t{\n\t\t\tint n = sc.nextInt();\n\t\t\tint[] heightCounts = new int[maxHeight + 1];\n\t\t\tfor(int i = 0; i < 2*n - 1; i++)\n\t\t\t{\n\t\t\t\tfor(int j = 0; j < n; j++)\n\t\t\t\t{\n\t\t\t\t\tint nextHeight = sc.nextInt();\n\t\t\t\t\theightCounts[nextHeight]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\" + testNum + \": \");\n\t\t\tfor(int i = 0; i <= maxHeight; i++)\n\t\t\t{\n\t\t\t\tif(heightCounts[i] % 2 == 1)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.print(i + \" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t\tsc.close();\n\t}\n}\n", "idx": "6154"}
{"func": "package googlejam6.p156;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class B {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner s = new Scanner(new File(\"b.in\"));\r\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"b.out\"));\r\n\t\tint T = s.nextInt();\r\n\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\tout.write(\"Case #\"+i+\":\");\r\n\t\t\tint N = s.nextInt();\r\n\t\t\tboolean[] heights = new boolean[2501];\r\n\t\t\tfor(int j=0; j<2*N-1; j++){\r\n\t\t\t\tfor(int k=0; k<N; k++){\r\n\t\t\t\t\tint h = s.nextInt();\r\n\t\t\t\t\theights[h]=!heights[h];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int j=0; j<2500; j++){\r\n\t\t\t\tif(heights[j]){\r\n\t\t\t\t\tout.write(\" \"+j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.write(\"\\n\");\r\n\t\t}\r\n\t\tout.close();\t\r\n\t}\r\n}\r\n", "idx": "6156"}
{"func": "package googlejam6.p158;\n\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.Vector;\n\npublic class rankAndFile {\n\t\n\tpublic static void main(String[] args) throws IOException {\n\tFileInputStream in = null;\n\tPrintWriter out = null;\n\n      try {\n         in = new FileInputStream(\"B-large.in\");\n         out = new PrintWriter( \"outputB-large.txt\" );\n\n         Scanner sc = new Scanner (in);\n         String line = sc.nextLine();\n\n         int T = Integer.parseInt(line);\n\n         for(int i=1; i<=T; i++) {\n        \t int N = Integer.parseInt(sc.nextLine());\n        \t \n        \t HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();\n        \t \n        \t for (int x=0; x < 2*N-1; x++) {\n        \t\t line = sc.nextLine();\n        \t\t for (int y=0; y < N; y++) {\n        \t\t\t int key = Integer.parseInt(line.split(\" \")[y]);\n        \t\t\t if(m.containsKey(key)) {\n        \t\t\t\t int val = m.get(key);\n        \t\t\t\t m.put(key, ++val);\n        \t\t\t } else {\n        \t\t\t\t m.put(key, 1);\n        \t\t\t }\n        \t\t }\n        \t }\n        \t \n        \t Vector<Integer> vector = new Vector<>();\n        \t Iterator it = m.entrySet().iterator();\n        \t while (it.hasNext()) {\n        \t\tMap.Entry pair = (Entry) it.next();\n        \t\tint key = (int) pair.getKey();\n        \t\tint val = (int) pair.getValue();\n        \t\t\n        \t\tif( val%2 == 1 ) {\n        \t\t\tvector.add(key);\n        \t\t}\n        \t }\n        \t     \t    \n             Collections.sort(vector);\n        \t \n             String output = \"Case #\" + i + \":\";\n        \t for(int j=0; j<vector.size(); j++) {\n        \t\t output = output + \" \" + vector.elementAt(j);\n        \t }\n        \t \n        \t out.println( output );\n         }\n      } finally {\n         if (in != null) {\n            in.close();\n         }\n         if (out != null) {\n            out.close();\n         }\n      }\n\t}\n}\n", "idx": "6158"}
{"func": "package googlejam6.p159;\nimport java.io.*;\nimport java.util.*;\nimport java.math.BigInteger;\n\n/*\nProblem B. Rank and File\n1\n3\n1 2 3\n2 3 5\n3 5 6\n2 3 4\n1 2 3\n\n */\n\npublic class r1ab {\n\t\n\t\n\t\n\tpublic static void main(String[] args) throws IOException{\n\t\t// TODO Auto-generated method stub\n\t\t// For STDIN, put two stars below.\n\t\t// For File In, put one star below.\n\t\t/*/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\t/*/\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/sample.in\"))));\n\t\t/**/\n\t\tint t,n,i,j,k;\n\t\tt=sc.nextInt();\n\t\tfor(i=1;i<=t;i++){\n\t\t\tif(i!=1)\n\t\t\t\tSystem.out.println();\n\t\t\tSystem.out.print(\"Case #\"+i+\": \");\n\t\t\tn=sc.nextInt();\n\t\t\tint[] g = new int[2510];\n\t\t\tArrays.fill(g, 0);\n\t\t\tint tot=2*n*n-n;\n\t\t\tint tmp;\n\t\t\tfor(j=0;j<tot;j++){\n\t\t\t\ttmp=sc.nextInt();\n\t\t\t\tg[tmp]++;\n\t\t\t}\n\t\t\tfor(j=0;j<=2500;j++)\n\t\t\t\tif(g[j]%2==1)\n\t\t\t\t\tSystem.out.print(\" \"+j);\n\t\t}\n\t\t\n\t}\n\n}\n", "idx": "6159"}
{"func": "package googlejam6.p161;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\n\r\n/**\r\n * Created by Nicholas on 4/15/2016.\r\n */\r\npublic class RankAndFile {\r\n\r\n    static final boolean CONSOLE_MODE = false;\r\n    static String fileName = \"B-large\";\r\n\r\n    static File in, out;\r\n    static PrintWriter writer;\r\n    static Scanner reader;\r\n\r\n    public static void main(String[] args) throws Exception{\r\n        if(CONSOLE_MODE) {\r\n            writer = new PrintWriter(System.out);\r\n            reader = new Scanner(System.in);\r\n        } else {\r\n            in = new File(\"C:/Codejam/in/\" + fileName + \".in\");\r\n            out = new File(\"C:/Codejam/result.out\");\r\n            writer = new PrintWriter(new FileOutputStream(out));\r\n            reader = new Scanner(new FileInputStream(in));\r\n        }\r\n\r\n        int cases = reader.nextInt();\n\t\t\n\t\tSystem.out.println(\"Cases: \" + cases);\n\t\t\n\t\tfor(int i = 1; i <= cases; i++) {\n\t\t    System.out.println(\"On case \" + i);\n\t\t\tint n = reader.nextInt();\n\t\t\t\n\t\t\tHashMap<Integer, Integer> set = new HashMap<>();\n\t\t\t\n\t\t\tint inputs = n * (2 * n - 1);\n\t\t\t\n\t\t\tfor(int i1 = 0; i1 < inputs; i1++) {\n\t\t\t    int in = reader.nextInt();\n\t\t\t    set.put(in, set.getOrDefault(in, 0) + 1);\n\t\t\t}\n\t\t\t\n\t\t\tArrayList<Integer> result1 = new ArrayList<>();\n\t\t\t\n\t\t\tfor(Integer i2 : set.keySet()) {\n\t\t\t    if(set.get(i2) % 2 != 0)\n\t\t\t        result1.add(i2);\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(result1);\n\t\t    List<Integer> result = result1;\n\t\t    writer.print(\"Case #\" + i + \": \");\n\t\t    for(int j : result)\n\t\t        writer.print(j + \" \");\n\t\t    writer.println();\n\t\t}\r\n\r\n        writer.close();\r\n        reader.close();\r\n    }\r\n\r\n}\r\n", "idx": "6161"}
{"func": "package googlejam6.p164;\nimport java.io.*;\nimport java.util.*;\n\npublic class B {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tint N = 2500;\n\t\tfor (int t = 1; t <= T; t++) {\n\t\t\tint n = Integer.parseInt(br.readLine());\n\t\t\tint[] aa = new int[N + 1];\n\t\t\tfor (int i = 0; i < 2 * n - 1; i++) {\n\t\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\t\t\taa[a]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tsb.append(\"Case #\" + t + \":\");\n\t\t\tfor (int i = 1; i <= N; i++)\n\t\t\t\tif (aa[i] % 2 == 1)\n\t\t\t\t\tsb.append(\" \" + i);\n\t\t\tpw.println(sb);\n\t\t}\n\t\tpw.close();\n\t}\n}\n", "idx": "6164"}
{"func": "package googlejam6.p165;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Rank {\r\n\tpublic static void main (String[] args) throws IOException {\r\n\t\tFileReader fin = new FileReader(\"RankInput.txt\");\r\n\t\tBufferedReader bin = new BufferedReader (fin);\r\n\t\tint t = Integer.parseInt(bin.readLine());\r\n\t\tFileWriter fout = new FileWriter(\"RankOutput.txt\");\r\n\t\tBufferedWriter bout = new BufferedWriter(fout);\r\n\t\tPrintWriter pout = new PrintWriter(bout);\r\n\t\tfor (int i = 0; i < t; i++) {\r\n\t\t\tint n = Integer.parseInt(bin.readLine());\r\n\t\t\tString answer = \"\";\r\n\t\t\tint count[] = new int[2501];\r\n\t\t\tfor (int j = 0; j < 2501; j++) count[j] = 0;\r\n\t\t\tfor (int j = 0; j < 2*n-1; j++) {\r\n\t\t\t\tString s = bin.readLine();\r\n\t\t\t\tStringTokenizer sb = new StringTokenizer(s);\r\n\t\t\t\tfor (int k = 0; k < n; k++) {\r\n\t\t\t\t\tint l = Integer.parseInt(sb.nextToken());\r\n\t\t\t\t\tcount[l]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (int j = 1; j < 2501; j++) {\r\n\t\t\t\tif (count[j]%2 == 1) {\r\n\t\t\t\t\tanswer = answer + \"\" + j + \" \";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpout.println(\"Case #\"+(i+1)+\": \"+answer.trim());\r\n\t\t}\r\n\t\tpout.close();\r\n\t}\r\n}\r\n", "idx": "6165"}
{"func": "package googlejam6.p167;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\n/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n/**\r\n *\r\n * @author Madi\r\n */\r\npublic class RA2016P2 {\r\n    public static void main(String[] args) throws FileNotFoundException, IOException {\r\n        BufferedReader br = new BufferedReader(new FileReader(\"C:/Projects/AdExtractor/src/codejam/B-small-practice.in\"));\r\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"C:/Projects/AdExtractor/src/codejam/B-small-practice.out\"));\r\n\r\n        int t = Integer.parseInt(br.readLine());\r\n        for (int x = 0; x < t; x++) {\r\n            int n = Integer.parseInt(br.readLine());\r\n            int[] cnt = new int[2501];\r\n            for (int i = 0; i < 2 * n - 1; i++) {\r\n                String[] s = br.readLine().split(\" \");\r\n                for (int j = 0; j < n; j++) {\r\n                    cnt[Integer.parseInt(s[j])]++;\r\n                }\r\n            }\r\n            \r\n            int[] res = new int[n];\r\n            int j = 0;\r\n            for (int i = 0; i < 2501; i++) {\r\n                if (cnt[i] % 2 != 0 && j < n) {\r\n                    res[j] = i;\r\n                    j++;\r\n                }\r\n            }\r\n            bw.write(\"Case #\" + (x + 1) + \": \");\r\n            for (int i = 0; i < n; i++) {\r\n                bw.write(res[i] + \" \"); \r\n            }\r\n            bw.write(\"\\n\"); \r\n            bw.flush();\r\n        }\r\n\r\n    }\r\n}\r\n", "idx": "6167"}
{"func": "package googlejam6.p170;\nimport java.util.*;\nimport java.io.*;\nimport java.math.*;\n\npublic class B {\n  \n  public static void main(String cmdArgs[]) throws Exception {\n    long time = System.currentTimeMillis();\n\n    String filename = cmdArgs[0];\n\n    BufferedWriter writer =\n      new BufferedWriter(new PrintWriter(filename + \"-output.txt\", \"UTF-8\"));\n    BufferedReader reader = new BufferedReader(new FileReader(filename));\n\n    String nextLine;\n    nextLine = reader.readLine(); // ignore count\n    int caseNum = 1;\n    while ((nextLine = reader.readLine()) != null) {\n      int rows = Integer.valueOf(nextLine);\n\n      TreeSet<Integer> soldiers = new TreeSet<Integer>();\n      for (int i = 0; i < 2 * rows - 1 ; i++) {\n        nextLine = reader.readLine();\n        String[] row = nextLine.split(\" \");\n        for (String soldier : row) {\n          int height = Integer.valueOf(soldier);\n          if (soldiers.contains(height)) {\n            soldiers.remove(height);\n          } else {\n            soldiers.add(height);\n          }\n        }\n      }\n      if (soldiers.size() != rows) {\n        System.out.println(\"BUG\");\n      }\n      writer.write(\"Case #\" + caseNum + \":\");\n      for (Integer soldier : soldiers) {\n        writer.write(\" \" + soldier);\n      }\n      caseNum++;\n      writer.newLine();\n    }\n    writer.close();\n    long elapsed = System.currentTimeMillis() - time;\n    System.out.println(\"millis elapsed: \" + elapsed);\n  }\n}\n", "idx": "6170"}
{"func": "package googlejam6.p171;\nimport java.util.*;\nimport java.io.*;\n\npublic class gcj2016r1ab {\n\t\n\tprivate static Scanner sc;\n\tprivate static PrintStream ps;\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tsc = new Scanner(new File(\"infile.txt\"));\n\t\tps = new PrintStream(new FileOutputStream(new File(\"outfile.txt\")));\n\t\t//\n\t\tint T = sc.nextInt();\n\t\tfor (int t = 1; t <= T; t++) {\n\t\t\tps.format(\"Case #%d:\", t);\n\t\t\t//\n\t\t\tint n = sc.nextInt();\n\t\t\tint n2 = (2 * n - 1) * n;\n\t\t\t//int[][] grid = new int[n][n];\n\t\t\tMap<Integer, Integer> count = new TreeMap<>();\n\t\t\tfor (int i = 0; i < n2; i++) {\n\t\t\t\tint j = sc.nextInt();\n\t\t\t\tif (!count.containsKey(j))\n\t\t\t\t\tcount.put(j, 0);\n\t\t\t\tcount.put(j, count.get(j) + 1);\n\t\t\t}\n\t\t\t//\n\t\t\tList<Integer> ans = new ArrayList<>();\n\t\t\tfor (Integer i : count.keySet()) {\n\t\t\t\tif (count.get(i) % 2 == 1)\n\t\t\t\t\tans.add(i);\n\t\t\t}\n\t\t\tfor (Integer i : ans)\n\t\t\t\tps.print(\" \" + i);\n\t\t\tps.println();\n\t\t}\n\t}\n\n}\n", "idx": "6171"}
{"func": "package googlejam6.p172;\nimport java.io.*;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class B {\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br = new BufferedReader(new FileReader(\"D:\\\\B-large.in\"));\r\n        PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(\"D:\\\\Blarge.txt\")));\r\n        int cases = Integer.parseInt(br.readLine());\r\n        for(int t = 1; t <= cases; t++) {\r\n            int n = Integer.parseInt(br.readLine());\r\n            HashSet<Integer> hs = new HashSet<Integer>();\r\n            for(int i = 0; i < 2*n-1; i++) {\r\n                StringTokenizer st = new StringTokenizer(br.readLine());\r\n                for(int j = 0; j < n; j++) {\r\n                    int tmp = Integer.parseInt(st.nextToken());\r\n                    if(hs.contains(tmp)) {\r\n                        hs.remove(tmp);\r\n                    }\r\n                    else hs.add(tmp);\r\n                }\r\n            }\r\n            int[] rc = new int[n];\r\n            int index = 0;\r\n            for(int num : hs) {\r\n                rc[index] = num;\r\n                index++;\r\n            }\r\n            Arrays.sort(rc);\r\n            pw.print(\"Case #\" + t + \":\");\r\n            for(int i = 0; i < n; i++) {\r\n                pw.print(\" \" + rc[i]);\r\n            }\r\n            pw.println();\r\n        }\r\n        pw.close();\r\n    }\r\n}\r\n", "idx": "6172"}
{"func": "package googlejam6.p175;\nimport java.io.BufferedReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class RankAndFile {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttry\r\n\t\t{\r\n\t\t\tBufferedReader f = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\tint t = Integer.parseInt(f.readLine());\r\n\t\t\tFileWriter fout = new FileWriter(\"rankandfile.out\");\r\n\t\t\tfor(int i = 1; i <= t; i++)\r\n\t\t\t{\r\n\t\t\t\tint n = Integer.parseInt(f.readLine());\r\n\t\t\t\tint[] count = new int[2501];\r\n\t\t\t\tfor(int j = 0; j < 2*n - 1; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tStringTokenizer st = new StringTokenizer(f.readLine());\r\n\t\t\t\t\tfor(int k = 0; k < n; k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint height = Integer.parseInt(st.nextToken());\r\n\t\t\t\t\t\tcount[height]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tStringBuffer s = new StringBuffer(\"\");\r\n\t\t\t\tfor(int j = 1; j <= 2500; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(count[j]%2 == 1)\r\n\t\t\t\t\t\ts.append(j + \" \");\r\n\t\t\t\t}\r\n\t\t\t\tString output = s.toString().trim();\r\n\t\t\t\tSystem.out.println(\"Case #\" + i + \": \" + output);\r\n\t\t\t\tfout.write(\"Case #\" + i + \": \" + output + \"\\n\");\r\n\t\t\t}\r\n\t\t\tf.close();\r\n\t\t\tfout.close();\r\n\t\t}\r\n\t\tcatch(IOException e)\r\n\t\t{\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "6175"}
{"func": "package googlejam6.p177;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Map;\r\nimport java.util.TreeMap;\r\n\r\n/**\r\n * Created by Nejc on 16.04.2016.\r\n */\r\npublic class B1A {\r\n    public static void main(String[]args) throws IOException {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine());\r\n        for(int t = 1; t <= T; t++){\r\n            int N = Integer.parseInt(br.readLine());\r\n            TreeMap<Integer, Integer> count = new TreeMap<Integer, Integer>();\r\n            for(int i = 0; i < N*2-1; i++){\r\n                String[] split = br.readLine().split(\" \");\r\n                for(String s : split){\r\n                    int num = Integer.parseInt(s);\r\n                    if(count.containsKey(num)){\r\n                        count.put(num, count.get(num)+1);\r\n                    }\r\n                    else{\r\n                        count.put(num, 1);\r\n                    }\r\n                }\r\n            }\r\n            System.out.print(\"CASE #\" + t + \":\");\r\n            for(Map.Entry<Integer, Integer> e : count.entrySet()){\r\n                if(e.getValue() % 2 == 1) System.out.print(\" \"+ e.getKey());\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n", "idx": "6177"}
{"func": "package googlejam6.p179;\nimport java.util.*;\nimport java.math.BigInteger;\n//import edu.princeton.cs.algs4.*;\n\n\npublic class B\n{\n\n    public static void main (String [] args)\n    {\n        Scanner sc = new Scanner(System.in);\n\n        int nocase = sc.nextInt();\n        sc.nextLine();\n        for(int ind=1; ind<=nocase; ind++)\n        {\n            \n            int N = sc.nextInt();\n            HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n            for(int r=0; r<2*N-1; r++)\n            for(int c=0; c<N; c++)\n            {\n                int n = sc.nextInt();\n                int count = 0;\n                if(hm.containsKey(n)) count = hm.get(n);\n                hm.put(n, count+1);\n            }\n\n            Set<Integer> ks = hm.keySet();\n            ArrayList<Integer> L = new ArrayList<Integer>();\n            for(Integer n: ks)\n            {\n                int count = hm.get(n);\n                if(count%2 != 0)\n                    L.add(n);\n            }\n            Collections.sort(L);\n\n            StringBuffer sb = new StringBuffer();\n            for(Integer n: L)\n            {\n                sb.append(n);\n                sb.append(' ');\n            }\n            String soln = sb.toString();\n            System.out.printf(\"Case #%d: %s\\n\", ind, soln);\n        }\n    }\n\n}\n", "idx": "6179"}
{"func": "package googlejam6.p180;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class RankAndFile {\n\n\tprivate static final int MAX_HEIGHT = 2501;\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint t = in.nextInt();\n\n\t\tfor (int i = 1; i <= t; ++i) {\n\t\t\tint n = in.nextInt();\n\t\t\tboolean[] odd = new boolean[MAX_HEIGHT]; \n\t\t\tfor(int j = 0; j < 2*n-1; j++){\n\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\tint h = in.nextInt();\n\t\t\t\t\todd[h] = !odd[h];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString answer = \"\";\n\t\t\t\n\t\t\tfor(int j = 1; j < MAX_HEIGHT; j++){\n\t\t\t\tif(odd[j]){\n\t\t\t\t\tanswer+=j+\" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + i + \": \"+answer.substring(0, answer.length()-1));\n\t\t}\n\n\t\tin.close();\n\t}\n\t\n}\n", "idx": "6180"}
{"func": "package googlejam6.p181;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\n\r\npublic class RankAndFile\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n        try\r\n        {\r\n            File file = new File(\"input.txt\");\r\n            FileReader fileReader = new FileReader(file);\r\n            BufferedReader bufferedReader = new BufferedReader(fileReader);\r\n            StringBuffer output = new StringBuffer();\r\n            \r\n            int lines = Integer.parseInt(bufferedReader.readLine());\r\n            for(int i = 1; i <= lines; i++)\r\n            {\r\n                HashMap<Integer, Boolean> map = new HashMap<Integer, Boolean>();\r\n                int size = Integer.parseInt(bufferedReader.readLine());\r\n                for(int j = 0; j < 2 * size - 1; j++)\r\n                {\r\n                    String[] line = bufferedReader.readLine().split(\" \");\r\n                    for(String soldier : line)\r\n                    {\r\n                        int value = Integer.parseInt(soldier);\r\n                        if(map.get(value) == null || map.get(value) == false)\r\n                        {\r\n                            map.put(value, true);\r\n                        }\r\n                        else\r\n                        {\r\n                            map.put(value, false);\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                ArrayList<Integer> array = new ArrayList<Integer>();\r\n                for(Integer soldier : map.keySet())\r\n                {\r\n                    if(map.get(soldier) == true)\r\n                    {\r\n                        array.add(soldier);\r\n                    }\r\n                }\r\n                Collections.sort(array);\r\n                String line = \"\";\r\n                for(Integer value : array)\r\n                {\r\n                    line += \" \" + value;\r\n                }\r\n                \r\n                output.append(\"Case #\" + i + \": \" + line.substring(1) + \"\\n\");\r\n            }\r\n            fileReader.close();\r\n            \r\n            file = new File(\"output.txt\");\r\n            FileWriter fileWriter = new FileWriter(file);\r\n            fileWriter.write(output.toString());\r\n            fileWriter.flush();\r\n            fileWriter.close();\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}", "idx": "6181"}
{"func": "package googlejam6.p183;\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.HashSet;\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\n\r\npublic class B {\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString filename = \"B-large\";\r\n        Scanner scan = new Scanner(new FileReader(filename + \".in\"));\r\n        PrintWriter out = new PrintWriter(filename + \".out\");\r\n        int problems = scan.nextInt();\r\n        for (int count = 0; count < problems; count++) {\r\n            System.out.print(\"Case #\" + (count+1) + \":\");\r\n            out.print(\"Case #\" + (count+1) + \":\");\n\t\t\tB r = new B();\r\n            int n = scan.nextInt();\n\t\t\tSet<Integer> set = new HashSet<>();\n\t\t\tfor (int i = 0; i < 2*n - 1; i++) {\n\t\t\t    for (int j = 0; j < n; j++) {\n\t\t\t        int current = scan.nextInt();\n\t\t\t        if (!set.contains(current)) {\n\t\t\t            set.add(current);\n\t\t\t        } else {\n\t\t\t            set.remove(current);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\tint[] array = new int[n];\n\t\t\tint i = 0;\n\t\t\tfor (int element : set) {\n\t\t\t    array[i] = element;\n\t\t\t    i++;\n\t\t\t}\n\t\t\tArrays.sort(array);\n\t\t\tfor (int element : array) {\n\t\t\t    System.out.print(\" \" + element);\n\t\t\t    out.print(\" \" + element);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tout.println();\r\n        }\r\n        out.flush();\r\n        out.close();\r\n        scan.close();\r\n    }\r\n\t\r\n}", "idx": "6183"}
{"func": "package googlejam6.p184;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Scanner;\n\npublic class ProblemB {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n        \n        for (int i = 1; i <= numCases; i++) {\n            int N = input.nextInt();\n            HashSet<Integer> set = new HashSet<Integer>();\n            for (int j = 0; j < 2 * N - 1; j++) {\n                for (int k = 0; k < N; k++) {\n                    int temp = input.nextInt();\n                    if (set.contains(temp)) {\n                        set.remove(temp);\n                    } else {\n                        set.add(temp);\n                    }\n                }\n            }\n            int[] remaining = new int[N];\n            int index = 0;\n            for (int num : set) {\n                remaining[index++] = num;\n            }\n            Arrays.sort(remaining);\n            System.out.print(\"Case #\" + i + \": \");\n            for (int k = 0; k < remaining.length; k++) {\n                System.out.print(remaining[k]);\n                if (k != remaining.length - 1) {\n                    System.out.print(' ');\n                } else {\n                    System.out.println();\n                }\n            }\n        }\n        \n        input.close();\n    }\n}\n", "idx": "6184"}
{"func": "package googlejam6.p186;\nimport java.util.*;\r\nimport java.awt.*;\r\nimport java.io.*;\r\n\r\npublic class ProblemB\r\n{\r\n    public static void main (String args[])\r\n    {\r\n\tBufferedReader in;\r\n\tPrintWriter out;\r\n\tStringTokenizer a;\r\n\tint [] num = new int [2500];\r\n\tint [] finalArray;\r\n\tint currNum, count;\r\n\ttry\r\n\t{\r\n\t    in = new BufferedReader (new FileReader (\"B-large.in\"));\r\n\t    out = new PrintWriter (new FileWriter (\"out.txt\"));\r\n\t    int lines = Integer.parseInt(in.readLine());\r\n\t    for (int x = 1 ; x <= lines ; x++)\r\n\t    {\r\n\t\tint numRow = Integer.parseInt (in.readLine());\r\n\t\tArrays.fill(num, 0);\r\n\t\tfinalArray = new int [numRow];\r\n\t\tfor (int y = 1; y <= numRow*2-1; y++)\r\n\t\t{\r\n\t\t    a = new StringTokenizer(in.readLine());\r\n\t\t    for (int z = 0; z < numRow; z++)\r\n\t\t    {\r\n\t\t\tcurrNum = Integer.parseInt (a.nextToken());\r\n\t\t\tnum [currNum-1]++;\r\n\t\t    }\r\n\t\t}\r\n\t\tcount = 0;\r\n\t\tfor (int y = 1; y <= 2500; y++)\r\n\t\t{\r\n\t\t    if ((num[y-1]%2)!=0)\r\n\t\t    {\r\n\t\t\tfinalArray[count] = y;\r\n\t\t\tcount++;\r\n\t\t    }\r\n\t\t}\r\n\t\tArrays.sort(finalArray);\r\n\t\tout.print(\"Case #\"+x+\":\");\r\n\t\tfor (int y = 0; y < numRow; y++)\r\n\t\t    out.print(\" \"+finalArray[y]);\r\n\t\tout.println();\r\n\t    }\r\n\t    in.close ();\r\n\t    out.close ();\r\n\t}\r\n\r\n\r\n\tcatch (FileNotFoundException e)\r\n\t{\r\n\t}\r\n\r\n\r\n\tcatch (IOException i)\r\n\t{\r\n\t}\r\n    }\r\n}\r\n", "idx": "6186"}
{"func": "package googlejam6.p188;\nimport java.util.*;\r\n\r\npublic class RankAndFile {\r\n  public static void main(String []args) {\r\n    Scanner in = new Scanner(System.in);\r\n    final int T = in.nextInt();\r\n    for (int i = 1; i <= T; i++) {\r\n      final int N = in.nextInt();\r\n      int []h = new int[2501];\r\n      for (int j = 0; j < (2 * N - 1) * N; j++)\r\n        h[in.nextInt()]++;\r\n      System.out.print(\"Case #\" + i + \":\");\r\n      for (int j = 0; j < h.length; j++)\r\n        if (h[j] % 2 == 1)\r\n          System.out.print(\" \" + j);\r\n      System.out.println();\r\n    }\r\n  }\r\n}", "idx": "6188"}
{"func": "package googlejam6.p190;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\n/**\n * Google code jam problem solver.\n * Template generated by <a href=\"https://github.com/Faylixe/jammy\">Jammy</a> plugin.\n * \n * @author\n */\npublic final class RankandFileSolver {\n\n\t/** Scanner instance that allows to parse problem input. **/\n\tprivate final Scanner scanner;\n\n\t/**\n\t * Default constructor.\n\t * \n\t * @param scanner Scanner instance that allows to parse problem input. \n\t */\n\tprivate RankandFileSolver(final Scanner scanner) {\n\t\tthis.scanner = scanner;\n\t}\n\n\t/**\n\t * Solver entry point.\n\t * \n\t * @param args Command line parameters.\n\t * @throws FileNotFoundException If input file could not be parsed.\n\t */\n\tpublic static void main(final String [] args) throws FileNotFoundException {\n\t\tfinal File file = new File(args[0]);\n\t\tfinal Scanner scanner = new Scanner(file);\n\t\tfinal int n = scanner.nextInt();\n\t\tfinal RankandFileSolver solver = new RankandFileSolver(scanner);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tSystem.out.print(\"Case #\" + (i + 1) + \": \");\n\t\t\tint n1 = solver.scanner.nextInt();\n\t\t\tboolean[] m = new boolean[2501];\n\t\t\tfor (int i3 = 1; i3 <= 2500; i3++) {\n\t\t\t\tm[i3] = false;\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i2 = 0; i2 < n1 * 2 - 1; i2++) {\n\t\t\t\tfor (int j = 0; j < n1; j++) {\n\t\t\t\t\tint t = solver.scanner.nextInt();\t\n\t\t\t\t\tm[t] = !m[t];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tboolean first = true;\n\t\t\tfor (int i1 = 1; i1 <= 2500; i1++) {\n\t\t\t\tif (m[i1]) {\n\t\t\t\t\tif (first) {\n\t\t\t\t\t\tSystem.out.print(i1);\n\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.print(\" \" + i1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tscanner.close();\n\t}\n\n}", "idx": "6190"}
{"func": "package googlejam6.p192;\n\n\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Small {\n  static boolean IS_DEBUG = false;\n  public static void main(String[] args) throws Exception{\n//    int[][] aii = new int[][]{\n//        {1,2,3},\n//        {2,3,5},\n//        {3,5,6},\n//        {2,3,4},\n//        {1,2,3}\n//    };\n//    solve(aii);\n    //// GCJ\u5171\u901a \u3053\u3053\u304b\u3089\n    //String filename = \"src/year2016/r1a/b/B-small-attempt0\";\n    String filename = \"src/year2016/r1a/b/B-large\";\n    try(PrintWriter out = new PrintWriter(new File(filename + \".out\")); Scanner scan = new Scanner(new File(filename + \".in\"))){\n      \n      final int T = scan.nextInt();\n      StringBuilder ret = new StringBuilder();\n      for (int i = 0; i < T; i++) {\n        ret.append(\"Case #\"+(i+1)+\": \");\n        //// \u554f\u984c\ufffd\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\ufffd\u3092\u8aad\u3093\u3067solve()\u306b\u6e21\u3059 \u3053\u3053\u304b\u3089\n        int N = scan.nextInt();\n        int[][] aai = new int[2*N-1][N];\n        for(int j=0; j<2*N-1; j++) {\n          int[] ai = new int[N];\n          for(int k=0; k<N; k++) ai[k] = scan.nextInt();\n          aai[j] = ai;\n        }\n\t\t// \u5947\u6570\u56de\u3057\u304b\u767b\u5834\u3057\u306a\u3044\u6570\u5024\u304cN\u500b\u3042\u308b\u306f\u305a\n\t\tMap<Integer, Integer> m = new HashMap<>();\n\t\tfor(int[] ai: aai) for(int i2: ai) {\n\t\t  m.computeIfPresent(i2, (k,v) -> v+1);\n\t\t  m.putIfAbsent(i2, 1);\n\t\t}\n\t\tList<Integer> l = new ArrayList<>();\n\t\tfor(Map.Entry<Integer, Integer> e : m.entrySet()) {\n\t\t  if(e.getValue()%2==1) {\n\t\t    l.add(e.getKey());\n\t\t  }\n\t\t}\n\t\tCollections.sort(l);\n\t\tStringBuilder ret1 = new StringBuilder();\n\t\tfor(Integer i1 : l){\n\t\t  ret1.append(i1.toString());\n\t\t  ret1.append(' ');\n\t\t}\n\t\tif(IS_DEBUG) System.out.println(ret1.substring(0, ret1.length()-1));\n        String ans = ret1.substring(0, ret1.length()-1);\n        if( IS_DEBUG ) System.out.println(ans);\n        ret.append(ans);\n        //// \u554f\u984c\u6587\u3092\u8aad\u3093\u3067solve()\u306b\u6e21\u3059 \u3053\u3053\u307e\u3067\n        ret.append(\"\\n\");\n      }\n      out.write(ret.substring(0, ret.length()-1));\n      out.flush();\n    }\n    //// GCJ\u5171\u901a \u3053\u3053\u307e\u3067\n  }\n}\n", "idx": "6192"}
{"func": "package googlejam6.p193;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\n\npublic class B\n{\n    public static void main(String[] args) throws Exception\n    {\n        String round = \"large\";\n        String baseName = B.class.getName().replace('.', '/');\n        Scanner scanner = new Scanner(new BufferedReader(new FileReader(baseName + \"-\" + round + \".in\")));\n        PrintWriter writer = new PrintWriter(new FileWriter(baseName + \"-\" + round + \".out\"));\n\n        System.out.println(\"Running: \" + round);\n\n        int count = scanner.nextInt();\n        for (int i = 0; i < count; i++)\n        {\n            writer.print(\"Case #\" + (i + 1) + \":\");\n            int N = scanner.nextInt();\n            Map<Integer, Integer> map = new HashMap<>();\n            for (int j = 0; j < (2 * N - 1) * N; j++)\n            {\n                int v = scanner.nextInt();\n                if (map.containsKey(v))\n                    map.put(v, map.get(v) + 1);\n                else\n                    map.put(v, 1);\n            }\n            List<Integer> heights = new ArrayList<Integer>();\n            for (Entry<Integer, Integer> entry : map.entrySet())\n                if (entry.getValue() % 2 > 0)\n                    heights.add(entry.getKey());\n            heights.sort(new Comparator<Integer>()\n            {\n                @Override\n                public int compare(Integer o1, Integer o2)\n                {\n                    return o1 - o2;\n                }\n            });\n            for(int result : heights)\n                writer.print(\" \" + result);\n            writer.println();\n        }\n        writer.close();\n        scanner.close();\n    }\n}\n", "idx": "6193"}
{"func": "package googlejam6.p195;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Driver {\r\n\tprivate static BufferedReader br;\r\n\tprivate static BufferedWriter bw;\r\n\r\n\t/*\r\n\t * Apache Commons Lang Availble @\r\n\t * https://commons.apache.org/proper/commons-lang/\r\n\t */\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tbr = new BufferedReader(new FileReader(new File(\"input.txt\")));\r\n\t\t\tbw = new BufferedWriter(new FileWriter(new File(\"output.txt\")));\r\n\r\n\t\t\tfinal long numCases = Long.parseLong(br.readLine());\r\n\t\t\tfor (long i = 1; i <= numCases; i++) {\r\n\t\t\t\t// read the inputs\r\n\t\t\t\tfinal int n = Integer.parseInt(br.readLine());\r\n\r\n\t\t\t\t// do stuff\r\n\t\t\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\r\n\r\n\t\t\t\tfor (int j = 0; j < (n * 2) - 1; j++) {\r\n\t\t\t\t\tString s = br.readLine();\r\n\t\t\t\t\tStringTokenizer st = new StringTokenizer(s, \" \");\r\n\t\t\t\t\twhile (st.hasMoreTokens()) {\r\n\t\t\t\t\t\tInteger key = Integer.parseInt(st.nextToken());\r\n\t\t\t\t\t\tif (map.containsKey(key)) {\r\n\t\t\t\t\t\t\tmap.put(key, map.get(key) + 1);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tmap.put(key, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tList<Integer> results = new ArrayList<Integer>();\r\n\t\t\t\tfor (Integer key : map.keySet()) {\r\n\t\t\t\t\tif (map.get(key) % 2 == 0) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresults.add(key);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresults.sort(new Comparator<Integer>() {\r\n\r\n\t\t\t\t\t@Override\r\n\t\t\t\t\tpublic int compare(Integer o1, Integer o2) {\r\n\t\t\t\t\t\treturn o1.compareTo(o2);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tString result = \"\";\r\n\t\t\t\tfor (Integer height : results) {\r\n\t\t\t\t\tresult += height + \" \";\r\n\t\t\t\t}\r\n\t\t\t\t// write the results\r\n\t\t\t\tString caseString = String.format(\"Case #%s: %s\\r\\n\", i, result);\n\t\t\t\tSystem.out.print(caseString);\n\t\t\t\tbw.write(caseString);\r\n\t\t\t}\r\n\t\t\tbw.flush();\r\n\t\t\tbw.close();\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6195"}
{"func": "package googlejam6.p196;\nimport java.util.*;\r\n\r\npublic class rank\r\n{\r\n\tstatic Scanner scan;\r\n\tstatic int N, T;\r\n\t\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\t\r\n\t\tscan= new Scanner(System.in);\n\t\tT= scan.nextInt();\r\n\t\t\r\n\t\tfor(int zz=1; zz<=T; zz++)\r\n\t\t{\r\n\t\t\tN= scan.nextInt();\r\n\t\t\tint[] s= new int[2501];\r\n\t\t\t\r\n\t\t\tfor(int i=0; i<(2*N-1)*N; i++)\r\n\t\t\t{\r\n\t\t\t\tint a= scan.nextInt();\r\n\t\t\t\ts[a]++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString ans=\"\";\r\n\t\t\t\r\n\t\t\tint j=0;\r\n\t\t\tfor(int i=1; i<s.length; i++)\r\n\t\t\t\tif(s[i]%2==1)\r\n\t\t\t\t{\r\n\t\t\t\t\tans+= i+\" \";\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\t\t\t\r\n\t\t\tans= ans.trim();\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\"+zz+\": \"+ans);\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}", "idx": "6196"}
{"func": "package googlejam6.p198;\nimport java.util.*;\r\npublic class soldiers {\r\n\r\n\tpublic static void main(String[] args){\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint t = in.nextInt();\r\n\t\tfor(int i = 1; i<t+1; i++){\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] sol = new int[2501];\r\n\t\t\tfor(int j = 0; j<(2*n)-1; j++){\r\n\t\t\t\tfor(int k = 0; k<n; k++){\r\n\t\t\t\t\tint x = in.nextInt();\r\n\t\t\t\t\tsol[x] += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\"+i+\": \");\r\n\t\t\tfor(int j = 0; j<2501; j++){\r\n\t\t\t\tif(sol[j]%2 != 0){\r\n\t\t\t\t\tSystem.out.print(j+\" \");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6198"}
{"func": "package googlejam6.p199;\nimport java.io.*;\nimport java.util.Scanner;\n\nclass round1_2\n{\npublic static void main(String args[])throws IOException\n{ \nFileInputStream in =new FileInputStream(\"B-large.in\");\nFileOutputStream outer =  new FileOutputStream(\"output.txt\");\nInputStreamReader inn=new InputStreamReader(in);\nBufferedReader br=new BufferedReader(inn);\nPrintWriter ob=new PrintWriter(outer,true);\nString bb=br.readLine();int i;\nint t=Integer.parseInt(bb);int j=0;\nwhile(t-->0)\n{\n++j;\nString a=br.readLine();\nint n=Integer.parseInt(a);\nint k[]=new int[2501];\nfor(i=1;i<2*n;i++)\n{\nString b[]=br.readLine().split(\" \");\nfor(int l=0;l<n;l++)\nk[Integer.parseInt(b[l])]++;\n}\nob.print(\"Case #\"+j+\": \");\nfor(i=1;i<=2500;i++)\n{\nif(k[i]%2!=0)\nob.print(i+\" \");\n}\nob.println();\n}\nin.close();\nouter.flush();\nouter.close();\n}\n\n}", "idx": "6199"}
{"func": "package googlejam6.p201;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\n\r\n\r\npublic class soldoers {\r\n\tpublic static void main( String args[]) throws NumberFormatException, IOException\r\n\t{\r\n\t\tBufferedReader br=new BufferedReader(new FileReader(\"C:\\\\Users\\\\manas\\\\Downloads\\\\blrg.in\"));\r\n\t\tBufferedWriter bw=new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\manas\\\\Documents\\\\google code jams\\\\second_large.txt\"));\r\n\t\t//BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint t=Integer.parseInt(br.readLine());\r\n\t\tint a=1;\r\n\t\twhile(t>0)\r\n\t\t{\r\n\r\n\t\t\tint n=Integer.parseInt(br.readLine());\r\n\t\t\tHashMap<Integer,Integer> count=new HashMap<Integer,Integer>();\r\n\t\t\tArrayList<Integer> list=new ArrayList<Integer>();\r\n\t\t\tfor(int i=0;i<2*n-1;i++)\r\n\t\t\t{\r\n\t\t\t\tString[] nums=br.readLine().split(\" \");\r\n\t\t\t\tfor(String n1:nums)\r\n\t\t\t\t{\r\n\t\t\t\t\tint val=Integer.parseInt(n1);\r\n\t\t\t\t\tif(count.containsKey(val))\r\n\t\t\t\t\t\tcount.put(val, count.get(val)+1);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tcount.put(val,1);\r\n\t\t\t\t\tif(count.get(val)%2==1)\r\n\t\t\t\t\t\tlist.add(val);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tlist.remove(new Integer(val));\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tCollections.sort(list);\r\n\t\t\t\r\n\r\n\t\t\tbw.write(\"Case #\"+a+\": \");\r\n\t\t\tSystem.out.print(\"Case #\"+a+\": \");\r\n\t\t\tfor(int a1:list)\r\n\t\t\t{\r\n\t\t\t\tbw.write(a1+\" \");\r\n\t\t\t\tSystem.out.print(a1+\" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\ta++;\r\n\r\n\t\t\tbw.newLine();\r\n\t\t\tt--;\r\n\t\t}\r\n\t\tbw.close();\r\n\t}\r\n\r\n}\r\n", "idx": "6201"}
{"func": "package googlejam6.p202;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\nclass B\r\n{\r\n\tprivate static final String FILE = \"B-large\";\r\n\tprivate static final String FILEIN = FILE + \".in\";\r\n\tprivate static final String FILEOUT = FILE + \".out\";\r\n\tprivate static Scanner in;\r\n\tprivate static PrintWriter out;\r\n\t\r\n\tpublic static void main(String[] args) throws Exception\r\n\t{\t\r\n\t\tin = new Scanner(new File(FILEIN));\r\n\t\tout = new PrintWriter(FILEOUT);\r\n\t\tint tests = in.nextInt();\r\n\t\tin.nextLine();\r\n\t\tfor (int i=1;i<=tests;i++)\r\n\t\t{\r\n\t\t\tout.print( \"Case #\"+i+\":\");\r\n\t\t\tint n = in.nextInt();\n\t\t\tboolean[] a = new boolean[2501];\n\t\t\tfor (int i3=0;i3<2*n*n-n;i3++)\n\t\t\t{\n\t\t\t\tint h = in.nextInt();\n\t\t\t\ta[h] = !a[h];\n\t\t\t}\n\t\t\tList<Integer> l = new ArrayList<Integer>();\n\t\t\tfor (int i1=1;i1<=2500;i1++)\n\t\t\t{\n\t\t\t\tif (a[i1])\n\t\t\t\t{\n\t\t\t\t\tl.add(i1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(l);\n\t\t\tfor (int i2:l)\n\t\t\t{\n\t\t\t\tout.print(\" \"+i2);\n\t\t\t}\n\t\t\tout.println();\n\t\t\tin.nextLine();\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}", "idx": "6202"}
{"func": "package googlejam6.p203;\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Map.Entry;\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\npublic class RankAndFile {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner inputFile = null;\r\n\r\n\t\tPrintWriter fileWriter = null;\r\n\t\ttry {\r\n\t\t\tfileWriter = new PrintWriter(\"B-large-1.out\");\r\n\t\t\tinputFile = new Scanner(new FileReader(\"B-large-1.in\"));\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tint numberCases = inputFile.nextInt();\r\n\t\tinputFile.nextLine();\r\n\t\t\r\n\t\tfor (int i = 0; i < numberCases; i++) {\r\n\t\t\tint number = inputFile.nextInt();\r\n\t\t\tinputFile.nextLine();\r\n\r\n\t\t\tHashMap<Integer, Integer> map = new HashMap<>();\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < number * 2 - 1; j++) {\r\n\t\t\t\tString line = inputFile.nextLine();\r\n\t\t\t\tScanner lineScanner = new Scanner(line);\r\n\t\t\t\twhile(lineScanner.hasNext()) {\r\n\t\t\t\t\tint value = lineScanner.nextInt();\r\n\t\t\t\t\tif (map.containsKey(value)) {\r\n\t\t\t\t\t\tint freq = map.get(value);\r\n\t\t\t\t\t\tmap.put(value, freq+1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmap.put(value, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlineScanner.close();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSet<Entry<Integer, Integer>> setOfValues = map.entrySet();\r\n\t\t\tIterator<Entry<Integer, Integer>> iterator = setOfValues.iterator();\r\n\t\t\t\r\n\t\t\tArrayList<Integer> resultList = new ArrayList<>();\r\n\t\t\t\r\n\t\t\twhile(iterator.hasNext()) {\r\n\t\t\t\tEntry<Integer, Integer> tempEntry = iterator.next();\r\n\t\t\t\tif (tempEntry.getValue() % 2 != 0) {\r\n\t\t\t\t\tresultList.add(tempEntry.getKey());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tCollections.sort(resultList);\r\n\t\t\tString resultString = \"\";\r\n\t\t\tfor (int j = 0; j < resultList.size() - 1; j++) {\r\n\t\t\t\tresultString += resultList.get(j) + \" \";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresultString += resultList.get(resultList.size() - 1);\r\n\t\t\t\r\n\t\t\tfileWriter.println(\"Case #\" + (i+1) + \": \" + resultString);\r\n\t\t}\r\n\t\tfileWriter.close();\r\n\t\tinputFile.close();\r\n\t}\r\n}\r\n", "idx": "6203"}
{"func": "package googlejam6.p204;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.HashSet;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemB {\r\n\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        ProblemB r = new ProblemB();\n\t\tString name = \"B-large\";\n\t\t        String path = \"\";\n\t\t\n\t\t        Locale.setDefault(Locale.US);\n\t\t\n\t\t        Scanner sc = new Scanner(new File(path + name + \".in\"));\n\t\t        PrintWriter pw = new PrintWriter(path + name + \".out\");\n\t\t//\t\tScanner sc = new Scanner(System.in);\n\t\t//\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t\n\t\t        int testCases = sc.nextInt();\n\t\t        for (int testCase = 1; testCase <= testCases; testCase++) {\n\t\t            int N = sc.nextInt();\n\t\t            pw.print(\"Case #\" + testCase + \": \");\n\t\t            int[] counts = new int[2501];\n\t\t\t\t\tArrays.fill(counts, 0);\n\t\t\t\t\t\n\t\t\t\t\tfor (int k=0; k<((2*N-1)*N); k++) {\n\t\t\t\t\t    int current = sc.nextInt();\n\t\t\t\t\t    counts[current]++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (int k=0; k< counts.length; k++) {\n\t\t\t\t\t    if (counts[k] %2 == 1) {\n\t\t\t\t\t        pw.print(k + \" \");\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\tpw.println();\n\t\t            pw.flush();\n\t\t        }\n\t\t\n\t\t        pw.close();\n\t\t        sc.close();\r\n    }\r\n}", "idx": "6204"}
{"func": "package googlejam6.p205;\nimport java.util.*;\nimport java.lang.*;\nimport java.math.*;\n\npublic class rankAndFile\n{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        int numberOfTests = in.nextInt();\n\n        // in.nextLine();\n        for (int i = 0; i < numberOfTests; i++)\n        {\n        \tint n = in.nextInt();\n            int [] arr = new int[2500];\n            for (int j = 1; j < 2 * n; j++){\n                for (int k = 1; k <= n; k++){\n                    arr[in.nextInt() - 1]++;\n                }\n            }\n\n            System.out.print(\"Case #\" + (i + 1) + \":\");\n\n            int found = 0;\n            for (int k = 0; k < 2500; k++){\n                if (arr[k] != 0 && arr[k] % 2 != 0){\n                    System.out.print(\" \" + (k + 1));\n                    found++;\n                    if (found == n){\n                        break;\n                    }\n                }\n            }\n            System.out.println(\"\");\n        }  \n    }\n}", "idx": "6205"}
{"func": "package googlejam6.p206;\n\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.Random;\nimport java.util.Collections;\n\npublic class RP2 {\npublic static void main(String[] args)throws IOException{\n\t\n     try {\n        \n         File newTextFile = new File(\"/Users/classxiaoli/Downloads/output.txt\");\n         FileWriter fw = new FileWriter(newTextFile);\n         BufferedReader reader = new BufferedReader(new FileReader(\"/Users/classxiaoli/Downloads/B-large.in\"));\n       //  BufferedReader reader = new BufferedReader(new FileReader(\"/Users/classxiaoli/Downloads/input.in\"));\n      //   BufferedReader reader = new BufferedReader(new FileReader(\"/Users/classxiaoli/Downloads/B-small-attempt0.in\"));\n         int i=0;\n        \n         String line;\n         reader.readLine();\n         \n         while ((line= reader.readLine()) != null) {\n        \t i++;\n        \t int a =Integer.parseInt(line);\n        \t Map<Integer,Integer> map=new HashMap<Integer,Integer>();\n        \t for(int j=0;j<2*a-1;j++){\n        \t\t line= reader.readLine();\n        \t\t for(String str:line.split(\" \")){\n        \t\t\t int k=Integer.parseInt(str);\n        \t\t\t if(!map.containsKey(k)) map.put(k, 1);\n        \t\t\t else map.put(k,map.get(k)+1);\n        \t\t }\n        \t }\n        \t ArrayList<Integer> r=new ArrayList<>();\n        \t\n        \t for(int k:map.keySet()){\n        \t\t if(map.get(k)%2==1) r.add(k);\n        \t }\n        \t Collections.sort(r);\n        \t String result=\"\"+r.get(0);\n        \t for(int j=1;j<r.size();j++) result+=\" \"+r.get(j);\n            fw.write(\"Case #\"+i+\": \"+result+\"\\n\"); \n         \n         }\n         fw.close();\n      }finally {\n         \n      }\n}\n}\n", "idx": "6206"}
{"func": "package googlejam6.p210;\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class ProblemB {\r\n\tstatic Scanner in=new Scanner(System.in);\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tjava.io.PrintStream out=new java.io.PrintStream(\"C:/users/Josh/documents/output.txt\");\r\n\t\tint run=in.nextInt();\r\n\t\tfor(int p=0;p<run;p++)\r\n\t\t{\r\n\t\t\tint lists=in.nextInt();\r\n\t\t\tint slots[][]=new int[lists][2501];\r\n\t\t\tint slots1[]=new int[2501];\r\n\t\t\tfor(int c=0;c<(2*lists)-1;c++)\r\n\t\t\t{\r\n\t\t\t\tfor(int d=0;d<lists;d++)\r\n\t\t\t\t{\r\n\t\t\t\t\tint temp=in.nextInt();\r\n\t\t\t\t\tslots[d][temp]++;\r\n\t\t\t\t\tslots1[temp]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString outp=\"\";\r\n\t\t\tint arr[]=new int[lists];\r\n\t\t\tint count=0;\r\n\t\t\tfor(int b=0;b<2500;b++)\r\n\t\t\t{\r\n\t\t\t\tif(slots1[b]%2!=0)\r\n\t\t\t\t{\r\n\t\t\t\t\tarr[count]=b;\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int x=0;x<lists;x++)\r\n\t\t\t{\r\n\t\t\t\tfor(int y=0;y<lists-1;y++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(arr[y]>arr[y+1])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint temp=arr[y];\r\n\t\t\t\t\t\tarr[y]=arr[y+1];\r\n\t\t\t\t\t\tarr[y+1]=temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int x=0;x<lists;x++)\r\n\t\t\t{\r\n\t\t\t\toutp+=arr[x];\r\n\t\t\t\toutp+=\" \";\r\n\t\t\t}\r\n\t\t\tout.println(\"Case #\"+(p+1)+\": \"+outp);\r\n\t\t}\r\n\t\r\n\t}\r\n}\r\n", "idx": "6210"}
{"func": "package googlejam6.p211;\nimport java.util.*;\n\npublic class C {\n\tpublic static void main(String[] unused) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint t = scanner.nextInt();\n\t\tfor (int i = 1; i <= t; i++) {\n\t\t\tint N = scanner.nextInt();\n\t\t\tMap<Integer, Integer> m = new HashMap<Integer,Integer>();\n\t\t\tfor (int j = 0; j < (2 * N - 1) * N; j++) {\n\t\t\t\tint x = scanner.nextInt();\n\t\t\t\tInteger v = m.get(x);\n\t\t\t\tif (v == null) {\n\t\t\t\t\tm.put(x, 1);\n\t\t\t\t} else {\n\t\t\t\t\tm.put(x,  v + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tList<Integer> l = new ArrayList<Integer>();\n\t\t\tfor (Map.Entry<Integer, Integer> entry : m.entrySet()) {\n\t\t\t\tint v = entry.getValue();\n\t\t\t\tif (v % 2 == 1) {\n\t\t\t\t\tl.add(entry.getKey());\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(l);\n\t\t\tSystem.out.printf(\"Case #%d:\", i);\n\t\t\tfor (int j = 0; j < N; j++){\n\t\t\t\tSystem.out.printf(\" %s\",l.get(j));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tscanner.close();\n\t}\n\n}\n", "idx": "6211"}
{"func": "package googlejam6.p212;\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class QB {\r\n\tprivate static Reader in;\r\n\tprivate static PrintWriter out;\r\n\tpublic static final String NAME = \".\\\\codeJamRound1\\\\B-large\";\r\n\r\n\tpublic static void main(String[] args) throws IOException {\t\r\n\t\t\r\n\t\tout = new PrintWriter(new BufferedWriter(new FileWriter(NAME + \".out\")));\r\n\t\tFile file = new File(NAME+\".in\");\r\n\t\t\r\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(file))) {\r\n\t\t    int T = Integer.parseInt(br.readLine());\r\n\t\t    String line;\r\n\t\t    for(int i=0; i<T; i++){\r\n\t\t    \tint N = Integer.parseInt(br.readLine());\r\n\t\t    \tMap<Integer, Integer> map = new HashMap<>();\r\n\t\t    \t\r\n\t\t    \tfor(int k=0; k<2*N-1; k++){\r\n\t\t    \t\tline = br.readLine();\t\t    \t\r\n\t\t\t    \tString[] numStr = line.split(\" \");\r\n\r\n\t\t\t    \tfor(int j=0; j<numStr.length; j++){\r\n\t\t\t    \t\tint key = Integer.parseInt(numStr[j]);\r\n\t\t\t    \t\t//System.out.println(key);\r\n\t\t\t    \t\t//System.out.println(map);\r\n\t\t\t    \t\tif(map.containsKey(key)){\r\n\t\t\t    \t\t\tmap.remove(key);\r\n\t\t\t    \t\t}else{\r\n\t\t\t    \t\t\tmap.put(key, 1);\r\n\t\t\t    \t\t}\r\n\t\t\t    \t}\r\n\t\t    \t}\r\n\r\n\t\t    \t//System.out.println(map);\r\n\t\t    \t\r\n\t    \t\tList<Integer> singleNum = new ArrayList<>(map.keySet());\r\n\t    \t\tCollections.sort(singleNum);\r\n\t    \t\tStringBuilder result = new StringBuilder();\r\n\t    \t\tfor(int e: singleNum){\r\n\t    \t\t\tresult.append(\" \" + e);\r\n\t    \t\t}\r\n\t    \t\t\r\n\t    \t\tout.println(\"Case #\" + (i+1) + \":\" + result.toString());\r\n\t\t    }\r\n\t\t    \r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t    System.exit(0);\r\n\t\t\r\n\t}\r\n}\r\n\r\n", "idx": "6212"}
{"func": "package googlejam6.p213;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\npublic class Q2 {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader bf = new BufferedReader(new FileReader(\"input.in\"));\r\n\t\tString count = null;\r\n\t\tFileWriter fw = new FileWriter(\"output.out\");  \r\n\t\tcount = bf.readLine();\r\n\t\tArrayList<Integer> times = new ArrayList<Integer>();\r\n\t\tfor (int i = 0; i < Integer.parseInt(count); i++) {\r\n\t\t\t\ttimes.clear();\r\n\t\t\t\tfor (int i1 = 0; i1 < 2501 ;i1++) {\r\n\t\t\t\t\tInteger a = new Integer(0);\r\n\t\t\t\t\ttimes.add(i1, a);\r\n\t\t\t\t}\r\n\t\t\t\tInteger n = Integer.parseInt(bf.readLine());\r\n\t\t\t\tfor (int i2 = 1; i2 < 2*n; i2++) {\r\n\t\t\t\t\tString lines = bf.readLine();\r\n\t\t\t\t\tString []nums = lines.split(\" \");\r\n\t\t\t\t\tfor (int i1 = 0; i1 < nums.length; i1++) {\r\n\t\t\t\t\t\tInteger temp = Integer.parseInt(nums[i1]);\r\n\t\t\t\t\t\ttimes.set(temp, times.get(temp) + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tString buffers = \"\";\r\n\t\t\t\tfor (Integer i1 = 0; i1 < 2501; i1 ++) {\r\n\t\t\t\t\tif (times.get(i1) % 2 != 0) {\r\n\t\t\t\t\t\tbuffers += i1.toString() + \" \";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfw.write(\"Case #\" + (i + 1) + \": \" + buffers + \"\\n\");\r\n\r\n\t\t}\r\n\t\tbf.close();\r\n\t\tfw.close();\r\n\t}\r\n}\r\n", "idx": "6213"}
{"func": "package googlejam6.p214;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\n\r\n\r\n\r\n\r\npublic class Main {\r\n\r\n\tstatic int[][] map;\r\n\tstatic int index;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException{\r\n        Scanner scan = new Scanner(System.in);\r\n        int cases =scan.nextInt();\r\n        for(int round = 1; round <= cases; round++) {\r\n        \tint n = scan.nextInt();\r\n        \tint[] arr = new int[2501];\r\n        \tArrays.fill(arr, 0);\r\n        \tfor(int i = 0; i < n * (2*n-1); i++) {\r\n        \t\tarr[scan.nextInt()]++;\r\n        \t}\r\n        \t\r\n        \tArrayList<Integer> list = new ArrayList<Integer>();\r\n        \tfor(int i = 0; i < arr.length; i++) {\r\n        \t\tif(arr[i] % 2 == 1) list.add(i);\r\n        \t}\r\n        \t\r\n        \t\r\n//        \tmap = new int[2 * n - 1][n];\r\n//        \tfor(int i = 0; i < 2 * n - 1; i++) {\r\n//        \t\tfor(int j = 0; j < n; j++) {\r\n//        \t\t\tmap[i][j] = scan.nextInt();\r\n//        \t\t}\r\n//        \t}\r\n//        \tfor(int i = 0; i < n; i++) {\r\n//        \t\tindex = i;\r\n//            \tArrays.sort(map, new Comparator<int[]>() {\r\n//            \t\t@Override\r\n//            \t\tpublic int compare(int[] o1, int[] o2) {\r\n//            \t\t\treturn Integer.compare(o1[index], o2[index]);\r\n//            \t\t}\r\n//            \t});\r\n//        \t\t\r\n//            \tint(i =)\r\n//        \t\t\r\n//        \t}\r\n        \t\r\n        \tCollections.sort(list);\r\n        \t\r\n        \tSystem.out.printf(\"Case #\" + round + \":\");\r\n        \tfor(Integer i: list) {\r\n        \t\tSystem.out.printf(\" %d\", i);\r\n        \t}\r\n        \tSystem.out.println();\r\n        }\r\n\t}\r\n\r\n}\r\n ", "idx": "6214"}
{"func": "package googlejam6.p215;\nimport java.util.*;\r\npublic class LinkedList {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        int cases = in.nextInt();\r\n        int[] inte;\r\n        int counter = 1;\r\n        ArrayList<Integer> arr;\r\n        while(cases-- > 0){\r\n            inte = new int[2501];\r\n            int n = in.nextInt();\r\n            for(int i = 0; i < 2*n-1; i++){\r\n                for(int j = 0; j < n; j++){\r\n                    int a = in.nextInt();\r\n                    inte[a]++;\r\n                }\r\n            }\r\n            arr = new ArrayList<>();\r\n            for (int i = 0; i < 2501; i++){\r\n                if (inte[i]%2 ==1)\r\n                    arr.add(i);\r\n            }\r\n            Collections.sort(arr);\r\n            System.out.print(\"Case #\"+counter+\": \");\r\n            for (int i = 0; i < n; i++){\r\n                System.out.print(arr.get(i)+\" \");\r\n            }\r\n            System.out.println(\"\");\r\n            counter++;\r\n        }\r\n    \r\n    }\r\n    \r\n}\r\n", "idx": "6215"}
{"func": "package googlejam6.p216;\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\npublic class B{\r\n    static {\r\n        try {\r\n            System.setIn(new FileInputStream(new File(\"B-large.in\")));\r\n        }\r\n        catch(Exception e){\r\n            System.err.println(\"Error setting input\");\r\n        }\r\n        try {\r\n            System.setOut(new PrintStream(new File(\"B-large.out\")));\r\n        }\r\n        catch(Exception e){\r\n            System.err.println(\"Error setting output\");\r\n        }\r\n    }\r\n    public static void main(String[]args)throws Exception{\r\n        Scanner sc = new Scanner(System.in);\r\n        int cases = Integer.parseInt(sc.nextLine());\r\n\r\n        for(int Case=1;Case<=cases;++Case){\r\n            int count = sc.nextInt();\r\n            ArrayList<Integer> all = new ArrayList<>();\r\n            int total = (count*2-1)*count;\r\n            for(int i=0;i<total;++i){\r\n                all.add(sc.nextInt());\r\n            }\r\n            //System.err.println(all);\r\n            Collections.sort(all);\r\n            int ind = 0;\r\n            out: while(all.size()>count){\r\n                int val = all.get(ind);\r\n                for(int i=ind+1;i<all.size();++i){\r\n                    if(all.get(i)==val){\r\n                        all.remove(i);\r\n                        all.remove(ind);\r\n                        ind = 0;\r\n                        continue out;\r\n                    }\r\n                }\r\n                ind++;  \r\n                //System.err.println(all);\r\n\r\n            }\r\n            Collections.sort(all);\r\n\r\n            System.out.print(\"Case #\"+Case+\":\");\r\n            for(int i=0;i<all.size();++i){\r\n                System.out.print(\" \"+all.get(i));\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n", "idx": "6216"}
{"func": "package googlejam6.p218;\nimport java.util.Scanner;\r\n\r\npublic class RankandFile {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint T = Integer.parseInt(in.nextLine());\r\n\t\tfor (int t = 0; t < T; t++) {\r\n\t\t\tint N = Integer.parseInt(in.nextLine());\r\n\t\t\tint[] heights = new int[2501];\r\n\t\t\tfor (int i = 0; i < 2 * N - 1; i++) {\r\n\t\t\t\tString[] inp = in.nextLine().split(\" \");\r\n\t\t\t\tfor (int j = 0; j < inp.length; j++) {\r\n\t\t\t\t\theights[Integer.parseInt(inp[j])]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tStringBuilder sb = new StringBuilder(\"\");\r\n\t\t\tfor (int i = 1; i < heights.length; i++) {\r\n\t\t\t\tif(heights[i]%2==1)\r\n\t\t\t\t\tsb.append(i+\" \");\r\n\t\t\t}\r\n\t\t\tsb.deleteCharAt(sb.length()-1);\r\n\t\t\tSystem.out.println(\"Case #\" + (t + 1) + \": \" + sb);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "6218"}
{"func": "package googlejam6.p219;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Set;\n\npublic class rankfile {\n\n  public static void main(String[] args) throws IOException{\n   \n    BufferedReader br = null;\n    \n    File fout = new File(\"output.txt\");\n    FileOutputStream fos = new FileOutputStream(fout);\n   \n    BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));    \n    \n    try {\n      \n      String sCurrentLine;\n\n      br = new BufferedReader(new FileReader(\"B-large.in\"));\n      \n      String testCases = sCurrentLine = br.readLine();\n      int testNum = Integer.parseInt(testCases);\n      for(int i=0; i<testNum; i++){\n        int startNum = Integer.parseInt(br.readLine());\n        ArrayList<String> lists = new ArrayList<String>();\n        for(int j=0; j<2*startNum-1; j++){\n          lists.add(br.readLine());\n        }\n\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor(int i1=0; i1<lists.size(); i1++){\n\t\t  String[] item = lists.get(i1).split(\" \");\n\t\t  for(String valstr : item){\n\t\t    int val = Integer.parseInt(valstr);\n\t\t    if(map.containsKey(val)){\n\t\t      map.put(val, map.get(val)+1);\n\t\t    }else{\n\t\t      map.put(val,1);\n\t\t    }       \n\t\t  }\n\t\t}\n\t\tArrayList<Integer> rnt = new ArrayList<Integer>();\n\t\tfor(Integer val : map.keySet()){\n\t\t  if(map.get(val)%2==1){\n\t\t    rnt.add(val);\n\t\t  }\n\t\t}\n\t\t\n\t\tCollections.sort(rnt);\n\t\tString target = new String();\n\t\tfor(int i2=0; i2<rnt.size(); i2++){\n\t\t  if(i2!=rnt.size()-1){\n\t\t    target = target + rnt.get(i2)+ \" \";\n\t\t  }else{\n\t\t    target = target + rnt.get(i2);\n\t\t  }\n\t\t}\n        String lastRead = target;\n        System.out.println(lastRead);\n        bw.write(\"Case #\"+(i+1)+\": \"+lastRead);\n        if(i!=testNum-1)\n        bw.newLine();\n      }\n      bw.close();\n      \n\n    } catch (IOException e) {\n      e.printStackTrace();\n    } finally {\n      try {\n        if (br != null)br.close();\n      } catch (IOException ex) {\n        ex.printStackTrace();\n      }\n    }\n  }\n}\n", "idx": "6219"}
{"func": "package googlejam6.p220;\n\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\nimport static java.lang.Integer.valueOf;\n\npublic class ProblemB {\n\n    public static void main(String[] args) throws Exception {\n        InputStream stream = ProblemB.class.getClassLoader().getResourceAsStream(\"problemB-test\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));\n        int testCases = valueOf(reader.readLine());\n        for(int i=0; i< testCases; i++) {\n            System.out.print(\"Case #\" + (i+1) + \":\");\n\t\t\tMap<Integer, Integer> count = new HashMap<>();\n\t\t\tint size = valueOf(reader.readLine());\n\t\t\tfor(int i1=0; i1<2*size-1; i1++) {\n\t\t\t    String[] split = reader.readLine().split(\" \");\n\t\t\t    for(int j=0; j<split.length; j++) {\n\t\t\t        count.compute(valueOf(split[j]), (key, val) -> val==null?1:val+1);\n\t\t\t    }\n\t\t\t}\n\t\t\tList<Integer> result = new ArrayList<>();\n\t\t\tfor(Map.Entry<Integer, Integer> entry : count.entrySet()) {\n\t\t\t    if(entry.getValue()%2==1) {\n\t\t\t        result.add(entry.getKey());\n\t\t\t    }\n\t\t\t}\n\t\t\tCollections.sort(result);\n            Integer[] solve = result.toArray(new Integer[size]);\n            for(int a : solve) {\n                System.out.print(\" \" + a);\n            }\n            System.out.println();\n        }\n    }\n}\n", "idx": "6220"}
{"func": "package googlejam6.p221;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\nimport java.io.PrintWriter;\r\n\r\npublic class ProblemB {\r\n\r\nstatic final String FILENAME = \"B-large\";\r\nstatic final String IN = FILENAME + \".in\";\r\nstatic final String OUT = FILENAME + \".out\";\r\n//static PrintStream out = System.out;\r\nstatic Scanner sc;\r\nstatic PrintWriter out;\r\n\r\npublic static void main(String args[]) throws Exception {\r\n\tsc = new Scanner(new File(IN));\r\n\tout = new PrintWriter(OUT);\n\tProblemB r = new ProblemB();\r\n\t// out = new PrintStream(new FileOutputStream(OUT));\n\tint t = ProblemB.sc.nextInt();\n\tfor (int i = 1; i <= t; i++) {\n\t\tProblemB.out.print(\"Case #\" + i + \": \");\n\t\tint ans = 0;\n\t\tint n = ProblemB.sc.nextInt();\n\t\tint marks[] = new int[2501];\n\t\t\n\t\tfor (int i1 = 0; i1 < n*2 - 1; ++i1) {\n\t\t\tfor (int j = 0; j < n; ++j) {\n\t\t\t\tint tmp = ProblemB.sc.nextInt();\n\t\t\t\tmarks[tmp] ++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i2 = 1; i2 <= 2500; i2++) {\n\t\t\tif (marks[i2]%2 != 0) {\n\t\t\t\tProblemB.out.print(i2);\n\t\t\t\tProblemB.out.print(\" \");\n\t\t\t}\n\t\t}\n\t\t\n\t\tProblemB.out.println();\n\t}\n\tProblemB.sc.close();\n\tProblemB.out.close();\r\n}\r\n\r\n}", "idx": "6221"}
{"func": "package googlejam6.p223;\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args){\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tint t = scanner.nextInt();\r\n\t\tfor(int x = 1; x <= t; ++x){\r\n\t\t\tint n = scanner.nextInt();\r\n\t\t\tboolean[] soldiers = new boolean[2500];\r\n\t\t\tfor(int i = 0; i < 2 * n - 1; ++i){\r\n\t\t\t\tfor(int j = 0; j < n; ++j){\r\n\t\t\t\t\tint s = scanner.nextInt();\r\n\t\t\t\t\tsoldiers[s-1] = !soldiers[s-1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint count = 0;\r\n\t\t\tSystem.out.print(\"Case #\" + x + \": \");\r\n\t\t\tfor(int i = 1; i <= 2500; ++i){\r\n\t\t\t\tif(soldiers[i-1]){\r\n\t\t\t\t\t++count;\r\n\t\t\t\t\tif(count < n){\r\n\t\t\t\t\t\tSystem.out.print(i + \" \");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tSystem.out.println(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6223"}
{"func": "package googlejam6.p224;\nimport java.io.FileInputStream;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.PriorityQueue;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\t// Scanner s = new Scanner(System.in);\r\n\t\tInputStream is = new FileInputStream(\".\\\\input_and_output\\\\1A2016\\\\B-large-1A2016.in\");\r\n\t\tFileWriter fr = new FileWriter(\".\\\\input_and_output\\\\1A2016\\\\B-large-1A2016.out\");\r\n\t\tScanner s = new Scanner(is);\r\n\t\t\r\n\t\tint n = s.nextInt();\r\n\t\tfor (int i = 1; i <= n; ++i){\t\t\t\r\n\t\t\tint N = s.nextInt();\r\n\r\n\t\t\tMap<Integer, Integer> map = new HashMap<>();\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < (2 * N - 1) * N; ++j){\r\n\t\t\t\tint num = s.nextInt();\r\n\t\t\t\tif (!map.containsKey(num)){\r\n\t\t\t\t\tmap.put(num, 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmap.put(num, map.get(num) + 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tPriorityQueue<Integer> pq = new PriorityQueue<>();\r\n\t\t\t\r\n\t\t\tfor (int key : map.keySet()){\r\n\t\t\t\tif (map.get(key) % 2 != 0) pq.add(key);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfr.write(String.format(\"Case #%d:\", i));\r\n\t\t\twhile (!pq.isEmpty()){\r\n\t\t\t\tfr.write(String.format(\" %d\", pq.poll()));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfr.write(String.format(\"\\n\"));\r\n\t\t\t// System.out.print(String.format(\"Case #%d: %s\\n\", i, dp[l-1]));\r\n\t\t}\r\n\t\t\r\n\t\tfr.close();\r\n\t\ts.close();\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n", "idx": "6224"}
{"func": "package googlejam6.p226;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.io.RandomAccessFile;\r\nimport java.math.BigInteger;\r\nimport java.util.InputMismatchException;\r\n\r\npublic class Main {\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tPrintWriter pr = new PrintWriter(System.out, true);\r\n\r\n\t//\tFileInputStream fin=new FileInputStream(\"C:/Users/4dm1n/Desktop/B-large(1).in\");\r\n\t//\tFile myfile=new File(\"C:/Users/4dm1n/Desktop/A.out\");\r\n\t\t\r\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n\t//\tRandomAccessFile rand=new RandomAccessFile(myfile,\"rw\");\r\n\t\t\r\n\t\tint t,n,m,j,l,i,c,r,tt,ht[];\r\n\t\tlong nm;\r\n\t\tchar ch[];\r\n\t\tString s[];\r\n\t\tStringBuilder sb;\r\n\t\tt=Integer.parseInt(br.readLine());\r\n\t\tfor(tt=1;tt<=t;tt++){\r\n\t\t\tsb=new StringBuilder(\"Case #\"+tt+\": \");ht=new int[2600];\r\n\t\t\tn=Integer.parseInt(br.readLine());\r\n\t\t\tm=2*n-1;\r\n\t\t\tfor(i=0;i<m;i++){\r\n\t\t\t\ts=br.readLine().split(\" \");\r\n\t\t\t\tfor(j=0;j<n;j++){\r\n\t\t\t\t\tht[Integer.parseInt(s[j])]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(i=0;i<2502;i++){\r\n\t\t\t\tif((ht[i]&1)>0) sb.append(i+\" \");\r\n\t\t\t}\r\n\t\t\tsb.append(\"\\n\");\r\n\t\t//\trand.writeBytes(sb.toString());\r\n\t\t\tSystem.out.print(sb);\r\n\t\t}\r\n\t}\r\n}", "idx": "6226"}
{"func": "package googlejam6.p230;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) throws FileNotFoundException {\n        Scanner sc=new Scanner(System.in);\n        String loopS = sc.nextLine();\n        \n        int loops = Integer.parseInt(loopS);\n        for (int j=0; j<loops; j++) {\n\t        String N = sc.nextLine();\n\t        int nums = Integer.parseInt(N);\n\t        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer> ();\n        \tList<Integer> soln = new ArrayList<Integer> ();\n        \t\n\t        for (int i=0; i < 2*nums-1; i++) {\n\t        \tString line = sc.nextLine();\n\t        \tString[] strArray = line.split(\" \");\n\t        \tfor(int k = 0; k < strArray.length; k++) {\n\t        \t    int key = Integer.parseInt(strArray[k]);\n\t        \t    if (hm.containsKey(key)) {\n\t        \t    \thm.put(key, hm.get(key)+1);\n\t        \t    } else {\n\t        \t    \thm.put(key,1);\n\t        \t    }\n\t        \t}\t        \t\n\t        }\n\t        \n        \tfor(Map.Entry<Integer, Integer> entry : hm.entrySet()){\n//        \t\tSystem.out.println(entry.getKey() + \" \" + entry.getValue());\n        \t\tif (entry.getValue()%2 != 0)\n        \t\t{\n        \t\t\tsoln.add(entry.getKey());\n        \t\t}\n        \t}        \t\n        \tCollections.sort(soln);\n\t\t\tint counter = j;\t        \n\t        counter++;\n\t\t\tSystem.out.print(\"Case #\"+ counter + \": \");\n\t\t\tfor (int i = 0; i < soln.size()-1; i++) {\n\t\t\t\tSystem.out.print(soln.get(i) + \" \");\n\t\t\t}\n\t\t\tSystem.out.println(soln.get(soln.size()-1));\n        }\n        sc.close();        \n\n\t}\n\n\n}", "idx": "6230"}
{"func": "package googlejam6.p231;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Map;\r\nimport java.util.Map.Entry;\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\n\r\n\r\npublic class BSol {\r\n\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tDate d1 = new Date();\r\n\t\t//solveB(\"b.in\", \"b.out\");\r\n\t\ttry {\n\t\t\t\n\t\t\tFileWriter fw = new FileWriter(\"B-large.out\");\n\t\t\tBufferedWriter bw = new BufferedWriter(fw);\n\t\t\t\n\t\t\tScanner sc = new Scanner(new File(\"B-large.in\"));\n\t\t\n\t\t\tlong t = sc.nextLong();\n\t\t\tsc.nextLine();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t//System.out.println(t);\n\t\t\tfor (long i2 = 0; i2 < t; i2++) {\n\t\t\t\t\n\t\t\t\tint n = sc.nextInt();\n\t\t\t\tsc.nextLine();\n\t\t\n\t\t\t\tint lines [][] = new int [2*n-1][n];\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < 2*n-1; i++) {\n\t\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\t\tint a = sc.nextInt();\n\t\t\t\t\t\tlines[i][j] = a;\n\t\t\t\t\t}\n\t\t\t\t\t//sc.nextLine();\n\t\t\t\t}\n\t\t\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\t\t\tfor (int i = 0; i < lines.length; i++) {\n\t\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\t\tint h = lines[i][j];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!map.containsKey(h)) {\n\t\t\t\t\t\t\tmap.put(h, 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmap.put(h, map.get(h)+1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//System.out.print(lines[i][j] + \" \");\n\t\t\t\t\t}\n\t\t\t\t\t//System.out.println();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t//System.out.println(\"missing heights: \");\n\t\t\t\tSet<Entry<Integer, Integer>> entrySet = map.entrySet();\n\t\t\t\tArrayList<Integer> m = new ArrayList<Integer>();\n\t\t\t\tfor (Entry<Integer, Integer> entry : entrySet) {\n\t\t\t\t\tif (entry.getValue() % 2 == 1) {\n\t\t\t\t\t\t//System.out.println(entry.getKey()  + \" \" + entry.getValue());\n\t\t\t\t\t\tm.add(entry.getKey());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tCollections.sort(m);\n\t\t\t\t\n\t\t\t\tString result = \"\";\n\t\t\t\tif (m.size() == n) {\n\t\t\t\t\t//System.out.println(m);\n\t\t\t\t\tfor (int i = 0; i < m.size(); i++) {\n\t\t\t\t\t\tresult += m.get(i);\n\t\t\t\t\t\tif (i != m.size()-1) {\n\t\t\t\t\t\t\tresult += \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult = null;\n\t\t\t\t\tSystem.out.println(\"Error \");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString rez =  result;\n\t\t\t\t//System.out.println(\"result: \" + rez);\n\t\t\t\tbw.write(\"Case #\" + (i2+1) + \": \" +  rez + \"\\n\");\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tbw.flush();\n\t\t\tbw.close();\n\t\t\tfw.close();\n\t\t\tsc.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\t\n\t\t} finally {\n\t\t\t\n\t\t}\t\t\r\n\t\t//solveB(\"B-small-attempt0.in\", \"B-small-attempt0.out\");\r\n\t\t\r\n\t\tDate d2 = new Date();\r\n\t\t//System.out.println(\"time: \" + (d2.getTime() - d1.getTime()));\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\r\n\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n", "idx": "6231"}
{"func": "package googlejam6.p233;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class CodeJam {\r\n\t public static void main(String[] args) throws NumberFormatException, IOException {\r\n\t     \tBufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\r\n\t     \tBufferedWriter bw=new BufferedWriter(new FileWriter(\"soldiers.txt\"));\r\n\t        \r\n\t        int T,N=0;\r\n\t        String l;\r\n\t       \tT = Integer.valueOf(br.readLine());\r\n\t        for (int i=0;i<T;i++)\r\n\t            {\r\n\t        \tString s=\"\";\r\n\t        \tN = Integer.valueOf(br.readLine());\r\n\t            int[][] lists = new int[2*N -1][N];\r\n\t        \tfor(int j=0;j<(2*N-1);j++){\r\n\t        \t\tl=br.readLine();\r\n\t        \t\tfor(int k=0;k<N;k++)\r\n\t        \t\t\tlists[j][k]=Integer.valueOf(l.split(\" \")[k]);\r\n\t        \t}\r\n\t        \t\r\n\t        \tint c=0;\r\n\t        \tfor (int m=1;m<2501;m++){\r\n\t        \t\tc=0;\r\n\t        \t\tfor(int j=0;j<(2*N-1);j++)\r\n\t\t        \t\tfor(int k=0;k<N;k++)if(lists[j][k]==(m))c++;\r\n\t\t        \t\tif(c%2!=0)s=s+m+\" \";\r\n\t        \t\t}\r\n\t        \t\r\n\t        \t\r\n\t            bw.write(\"Case #\"+(i+1)+\": \"+s);bw.newLine();\r\n\t        }\r\n\t        br.close();\r\n\t        bw.close();\r\n\t   }\r\n}\r\n", "idx": "6233"}
{"func": "package googlejam6.p234;\n/**\r\n * File Name: Main.java\r\n * Package Name: com.ncfxy.codejam\r\n * Description\uff1a TODO \r\n *\r\n *   ver\t\t\t\t\tdate\t\t\tauthor\r\n * \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n *   1.0-SNAPSHOT\t\t\t2016\u5e744\u670816\u65e5\t\t\tAdministrator\r\n *\r\n * Copyright (c) 2016, ncfxy All Rights Reserved.\r\n */\r\n\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * ClassName: Main<br/>\r\n * Description: TODO ADD Description\r\n *\r\n * @author Administrator\r\n * @version 1.0-SNAPSHOT\r\n * @Date 2016 2016\u5e744\u670816\u65e5 \u4e0a\u53488:45:47\r\n */\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner cin = new Scanner(System.in);\r\n\t\twhile (cin.hasNext()) {\r\n\t\t\tint t = cin.nextInt();\r\n\t\t\tfor(int caseNumber = 1;caseNumber <= t;caseNumber++){\r\n\t\t\t\tint pool[] = new int[3000];\n\t\t\t\tArrays.fill(pool, 0);\n\t\t\t\tint N = cin.nextInt();\n\t\t\t\tfor(int i = 1;i < 2 * N;i++){\n\t\t\t\t\tfor(int j = 0;j < N;j++){\n\t\t\t\t\t\tint x = cin.nextInt();\n\t\t\t\t\t\tpool[x]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString result = \"\";\n\t\t\t\tfor(int i = 0;i < 3000;i++){\n\t\t\t\t\tif((pool[i] & 1) == 1){\n\t\t\t\t\t\tresult = result + i + \" \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString output = result.substring(0,result.length()-1);\r\n\t\t\t\tSystem.out.println(\"Case #\"+caseNumber+\": \"+output);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6234"}
{"func": "package googlejam6.p235;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Iterator;\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\nimport java.util.TreeSet;\r\n\r\n\r\npublic class RankFile {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner sc = new Scanner(new File (\"B-large.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new File(\"B-large.out\"));\r\n\t\tPrintWriter debug = new PrintWriter(new File(\"debug-bl.txt\"));\r\n\t\t\r\n\t\tint a = sc.nextInt();\r\n\t\tsc.nextLine();\r\n\t\t\r\n\t\tfor (int i = 0; i < a; i++) {\r\n\t\t\tint size = sc.nextInt();\r\n\t\t\tsc.nextLine();\r\n\t\t\t\r\n\t\t\tSet<Integer> odds = new TreeSet<>();\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < size*2-1; j++) {\r\n\t\t\t\tfor (int k = 0; k < size; k++) {\r\n\t\t\t\t\tint h = sc.nextInt();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (odds.contains(h))\r\n\t\t\t\t\t\todds.remove(h);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\todds.add(h);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tIterator<Integer> left = odds.iterator();\r\n\t\t\tString output = \"\";\r\n\t\t\twhile(left.hasNext()) \r\n\t\t\t\toutput += (left.next() + \" \");\r\n\t\t\t\r\n\t\t\tout.printf(\"CASE #%d: %s%n\", i + 1, output.trim());\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tsc.close();\r\n\t\tout.close();\r\n\t\tdebug.close();\r\n\t}\r\n}\r\n", "idx": "6235"}
{"func": "package googlejam6.p236;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class ArmyProject {\r\n\t\r\n\tScanner in;\tpublic static void main(String[] args){\r\n\t\tArmyProject myClass = new ArmyProject();\r\n\t\ttry {\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tmyClass.in =  new Scanner(new BufferedReader(new FileReader(\"B-large.in\")));\n\t\t\t\t\t//in = new Scanner(System.in);\n\t\t\t\tmyClass.writer = new FileWriter(\"the-file-name.txt\");\n\t\t\t\tint T = myClass.in.nextInt();\n\t\t\t\t\tfor(int i = 1; i <= T; i++){\n\t\t\t\t\tint N = myClass.in.nextInt();\n\t\t\t\t\t\n\t\t\t\t\tHashMap<Integer, Integer> countHeights = new HashMap<Integer, Integer>();\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor(int j = 1; j <= (2*N - 1); j++){\n\t\t\t\t\t\tfor(int k = 1; k <= N; k++){\n\t\t\t\t\t\t\tint h = myClass.in.nextInt();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(!countHeights.containsKey(h)){\n\t\t\t\t\t\t\t\tcountHeights.put(h, 0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcountHeights.put(h, countHeights.get(h)+1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tArrayList<Integer> list = new ArrayList<Integer>();\n\t\t\t\t\t\n\t\tfor(Integer k : countHeights.keySet()){\n\t\t\tif((countHeights.get(k) % 2) != 0){\n\t\t\t\tlist.add(k);\n\t\t\t}\n\t\t}\n\t\t\t\t\tCollections.sort(list);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tStringBuilder s = new StringBuilder();\n\t\t\n\t\t\t\t\ts.append(\"Case #\");\n\t\t\t\t\ts.append(i);\n\t\t\t\t\ts.append(\": \");\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor(int j = 0; j < list.size(); j++){\n\t\t\t\t\t\ts.append(list.get(j) + \" \");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ts.append(\"\\n\");\n\t\t\t\t\t\n\t\t\tmyClass.writer.write(s.toString());\n\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\tmyClass.writer.close();\t\t\t\n\t\t\t\t}\n\t\t\t\t\tcatch (IOException e) {\n\t\t\t\t\t}\r\n\t}\r\n\t\r\n\tFileWriter writer;\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\r\n", "idx": "6236"}
{"func": "package googlejam6.p237;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class B\r\n{\r\n\tstatic String FILE_IN = \"B-large.in\";\r\n\tstatic String FILE_OUT = \"B.out\";\r\n\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader in = new BufferedReader\r\n\t\t\t\t(new FileReader(\"files/\" + FILE_IN));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter\r\n\t\t\t\t(new FileWriter(\"files/\" + FILE_OUT)));\r\n\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor (int t = 1; t <= T; t++)\r\n\t\t{\r\n\t\t\tint N = Integer.parseInt(in.readLine());\n\t\t\tint lines = 2 * N - 1;\n\t\t\t\n\t\t\tArrayList<Integer> set = new ArrayList<Integer>();\n\t\t\tStringTokenizer st;\n\t\t\t\n\t\t\tfor(int i = 1; i <= lines; i++)\n\t\t\t{\n\t\t\t\tst = new StringTokenizer(in.readLine());\n\t\t\t\tint next, index;\n\t\t\t\t\n\t\t\t\tfor(int j = 1; j <= N; j++)\n\t\t\t\t{\n\t\t\t\t\tnext = Integer.parseInt(st.nextToken());\n\t\t\t\t\t\n\t\t\t\t\tindex = set.indexOf(next);\n\t\t\t\t\tif(index >= 0)\n\t\t\t\t\t\tset.remove(index);\n\t\t\t\t\telse\n\t\t\t\t\t\tset.add(next);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(set);\n\t\t\tStringBuilder res = new StringBuilder(Integer.toString(set.get(0)));\n\t\t\t\n\t\t\tint length = set.size();\n\t\t\tfor(int i = 1; i < length; i++)\n\t\t\t\tres.append(\" \").append(set.get(i));\n\t\t\tString result = res.toString();\r\n\t\t\tSystem.out.printf(\"Case #%d: %s%n\", t, result);\r\n\t\t\tout.printf(\"Case #%d: %s%n\", t, result);\r\n\t\t}\r\n\r\n\t\tSystem.out.println(\"Complete\");\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "6237"}
{"func": "package googlejam6.p238;\n\r\n//count_sheep\r\nimport java.util.*;\r\nimport java.io.*;\r\npublic class rank_and_file {\r\n  public static void main(String[] args) {\r\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n    int num = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\r\n    \r\n    for (int i = 1 ; i<= num; i++){\r\n    \tint N = in.nextInt();\r\n    \tHashSet<Integer> set = new HashSet<Integer>();\r\n    \tfor (int j=0; j<2*N-1; j++){\r\n    \t\tfor (int k = 0; k < N; k ++){\r\n    \t\t\tint cur = in.nextInt();\r\n    \t\t\tif (set.contains(cur)){\r\n    \t\t\t\tset.remove(cur);\r\n    \t\t\t}\r\n    \t\t\telse {\r\n    \t\t\t\tset.add(cur);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \tint[] rst = new int[set.size()];\r\n    \tint index = 0;\r\n    \tfor (int j : set){\r\n    \t\trst[index] = j;\r\n    \t\tindex++;\r\n    \t}\r\n    \tArrays.sort(rst);\r\n    \tStringBuilder sb = new StringBuilder();\r\n    \tfor (int j = 0; j < rst.length; j++){\r\n    \t\tsb.append(rst[j] + \" \");\r\n    \t}\r\n\t\tSystem.out.println(\"Case #\" + i + \": \" + sb.toString().trim());\t\r\n    \t\r\n    }\r\n    \r\n  }\r\n}", "idx": "6238"}
{"func": "package googlejam6.p239;\nimport java.util.Scanner;\npublic class B {\n\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\tfor(int i = 1; i<= T; i++) {\n\t\t\tint N = sc.nextInt();\n\t\t\tint[] in = new int[2501];\n\t\t\tfor(int j = 0; j<2*N-1; j++) {\n\t\t\t\tfor(int k = 0; k<N; k++) {\n\t\t\t\t\tin[sc.nextInt()]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString s = \"Case #\" + i + \":\";\n\t\t\tfor(int j = 1; j<2501; j++) {\n\t\t\t\tif(in[j]%2 != 0) {\n\t\t\t\t\ts = s + \" \" + j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(s);\n\t\t\t\n\t\t}\n\t}\n}", "idx": "6239"}
{"func": "package googlejam6.p240;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\n\n\npublic class Round1A_2 {\n\tpublic static void main(String args[]) throws FileNotFoundException, UnsupportedEncodingException{\n\t\tScanner scan = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(\"output.txt\", \"UTF-8\");\n\t\t\n\t\tSystem.out.println(\"Input Filename: \");\n\t\tString filename = scan.nextLine();\n\t\ttry {scan = new Scanner(new File(filename));}\n\t\tcatch(Exception e){\n\t\t\tSystem.out.println(\"Invalid File Input\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tint sets = scan.nextInt();\n\t\tfor(int k = 1; k <= sets; ++k){\n\t\t\tint n = scan.nextInt(); scan.nextLine();\n\t\t\tint files = (2*n) - 1;\n\t\t\tHashMap<Integer, Integer> soldiers = new HashMap<Integer, Integer>();\n\t\t\tfor(int j = 0; j < files; ++j){\n\t\t\t\tfor(int l = 0; l < n; ++l){\n\t\t\t\t\tint i = scan.nextInt();\n\t\t\t\t\tif(soldiers.containsKey(i)){\n\t\t\t\t\t\tsoldiers.put(i, soldiers.get(i)+1);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsoldiers.put(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint[] missing = new int[n];\n\t\t\tint index = 0;\n\t\t\tIterator entries = soldiers.entrySet().iterator();\n\t\t\twhile(entries.hasNext()){\n\t\t\t\tEntry e = (Entry) entries.next();\n\t\t\t\tif((Integer)e.getValue() % 2 == 1){\n\t\t\t\t\tmissing[index] = (Integer)e.getKey();\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(missing);\n\t\t\tout.print(\"Case #\" +k +\": \");\n\t\t\tfor(int i = 0; i < n; ++i){\n\t\t\t\tout.print(missing[i]);\n\t\t\t\tif(i < n-1) out.print(\" \");\n\t\t\t}\n\t\t\tout.println();\n\t\t\t\n\t\t}\n\t\tout.close();\n\t}\n}\n", "idx": "6240"}
{"func": "package googlejam6.p242;\nimport java.util.*;\r\n\r\npublic class rankandfile {\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tScanner scn = new Scanner(System.in);\r\n\t\t\r\n\t\tint T = scn.nextInt();\r\n\t\t\r\n\t\tfor( int c = 1; c <= T; c++ )\r\n\t\t{\r\n\t\t\tHashMap<Integer, Integer> hM = new HashMap<Integer, Integer>();\r\n\t\t\t\r\n\t\t\tint N = scn.nextInt();\r\n\t\t\t\r\n\t\t\tfor( int i = 0; i < 2*N - 1; i++ )\r\n\t\t\t{\r\n\t\t\t\tfor( int j = 0; j < N; j++ )\r\n\t\t\t\t{\r\n\t\t\t\t\tint number = scn.nextInt();\r\n\t\t\t\t\t\r\n\t\t\t\t\t//System.out.println(number);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!hM.containsKey(number))\r\n\t\t\t\t\t\thM.put(number, 1);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\thM.put(number, hM.get(number) + 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint[] list = new int[N];\r\n\t\t\tint counter = 0;\r\n\t\t\t//System.out.println(hM.keySet().size());\r\n\t\t\tfor( Integer number : hM.keySet() )\r\n\t\t\t{\r\n\t\t\t\t//System.out.println(\" \" + number);\r\n\t\t\t\tif( hM.get(number)%2 != 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tlist[counter] = number;\r\n\t\t\t\t\t//System.out.println(list[counter]);\r\n\t\t\t\t\tcounter++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tArrays.sort(list);\r\n\t\t\t\r\n\t\t\tSystem.out.print(\"Case #\" + c + \": \");\r\n\t\t\tfor( int i = 0; i < list.length; i++ )\r\n\t\t\t{\r\n\t\t\t\tSystem.out.print( list[i] + \" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6242"}
{"func": "package googlejam6.p245;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Scanner;\n\n\npublic class test6 {\n\t\n\tpublic static void main(String[] args) {\n\t    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t    Long t = in.nextLong();  // Scanner has functions to read ints, longs, strings, chars, etc.\n\t    for (int i = 1; i <= t; ++i) {\n\t      int line = in.nextInt();\n\t      System.out.print(\"Case #\" + i + \":\");\n\t      int[] result = new int[line];\n\t      HashSet<Integer> hs = new HashSet<Integer>();\n\t      for (int j = 1; j <= line * 2 - 1; j++) {\n\t    \t  for (int k = 1; k <= line; k++) {\n\t    \t\t  int number = in.nextInt();\n\t    \t\t  if (hs.contains(number)) {\n\t    \t\t\t  hs.remove(number);\n\t    \t\t  } else {\n\t    \t\t\t  hs.add(number);\n\t    \t\t  }\n\t    \t  }\n\t      }\n\t      int j = 0;\n\t      for (Integer ele : hs) {\n\t    \t  result[j] = ele;\n\t    \t  j++;\n\t      }\n\t      Arrays.sort(result);\n\t      for (Integer ele : result) {\n\t    \t  System.out.print(\" \" + ele);\n\t      }\n\t      System.out.println();\n\t    }\n\t}\n}\n", "idx": "6245"}
{"func": "package googlejam6.p246;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class B {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = null;\n\t\tB b = new B();\n\t\ttry {\n\t\t\tin = new Scanner(System.in);\n\t\t\tint count = in.nextInt();\n\t\t\tfor (int test = 1; test <= count; test++) {\n\t\t\t\tint N = in.nextInt();\n\t\t\t\tint[][] lists = new int[2 * N - 1][N];\n\t\t\t\tfor (int j = 0; j < 2 * N - 1; j++) {\n\t\t\t\t\tfor (int k = 0; k < N; k++) {\n\t\t\t\t\t\tlists[j][k] = in.nextInt();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tHashMap<Integer, Integer> map = new HashMap<>();\n\t\t\t\tint[] result1 = new int[N];\n\t\t\t\tStringBuilder res = new StringBuilder();\n\t\t\t\tint pivot = 0;\n\t\t\t\tfor (int j = 0; j < lists.length; j++) {\n\t\t\t\t\tfor (int k = 0; k < N; k++) {\n\t\t\t\t\t\tif (map.containsKey(lists[j][k])) {\n\t\t\t\t\t\t\tint count1 = map.get(lists[j][k]);\n\t\t\t\t\t\t\tmap.put(lists[j][k], count1 + 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmap.put(lists[j][k], 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Integer key : map.keySet()) {\n\t\t\t\t\tint count2 = map.get(key);\n\t\t\t\t\tif (count2 % 2 != 0) {\n\t\t\t\t\t\tresult1[pivot] = key;\n\t\t\t\t\t\tpivot++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tArrays.sort(result1);\n\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t\tres.append(\" \" + result1[i]);\n\t\t\t\t}\n\t\t\t\tString result = res.toString();\n\t\t\t\tSystem.out.println(\"Case #\" + test + \":\" + result);\n\t\t\t}\n\t\t\tin.close();\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "6246"}
{"func": "package googlejam6.p247;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class B {\r\n\tpublic static void main(String args[])throws IOException{\r\n\t\tScanner scan = new Scanner(new File(\"B.txt\"));\r\n\t\tPrintWriter pw = new PrintWriter(\"B.out\");\r\n\t\tint cases = scan.nextInt();\r\n\t\tfor(int i =1; i <= cases; i++){\r\n\t\t\tint N = scan.nextInt();\r\n\t\t\tint[] totals = new int[10_000];\r\n\t\t\tfor(int z = 0; z < N*2-1; z++){\r\n\t\t\t\tfor(int l = 0; l < N; l++){\r\n\t\t\t\t\ttotals[scan.nextInt()]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tArrayList<Integer>answers = new ArrayList<Integer>();\r\n\t\t\tfor(int z = 0; z < totals.length; z++){\r\n\t\t\t\tif(totals[z]%2==1){\r\n\t\t\t\t\tanswers.add(z);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpw.print(\"Case #\"+i+\": \");\r\n\t\t\tfor(Integer z : answers){\r\n\t\t\t\tpw.print(z+\" \");\r\n\t\t\t}\r\n\t\t\tpw.println();\r\n\t\t}\r\n\t\tpw.close();\r\n\t}\r\n}\r\n", "idx": "6247"}
{"func": "package googlejam6.p252;\nimport java.util.*;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int t = scanner.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int length = scanner.nextInt();\n            int[][] c = new int [2*length-1][length];\n            int[] p = new int[2501];\n            for (int j = 0; j < 2501; j++) {\n                p[j] = 0;\n            }\n            for (int j = 0; j < 2*length-1; j++) {\n                for (int k = 0; k < length; k++) {\n                    c[j][k] = scanner.nextInt();\n                    p[c[j][k]] ++;\n                }\n            }\n            int[] pc = new int[length];\n            int x = 0;\n            for (int j = 1; j < 2501; j++) {\n                if (p[j] %2 != 0) {\n                    pc[x++] = j;\n                }\n            }\n            Arrays.sort(pc);\n            System.out.print(\"Case #\" + i + \":\");\n            for (int j = 0; j < length; j++) {\n                System.out.print(\" \" + pc[j]);\n            }\n            System.out.println(\"\");\n        }\n    }\n\n}\n\n", "idx": "6252"}
{"func": "package googlejam6.p254;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.*;\n\n/**\n * Created by wagner on 04/16/16.\n */\npublic class RankAndFile {\n    public static void main(String[] args) throws FileNotFoundException {\n        File file = new File(args[0]);\n        Scanner scanner = new Scanner(file);\n        long nCases = scanner.nextLong();\n        scanner.nextLine();\n        for (int i = 1; i <= nCases; i++) {\n            long n = scanner.nextLong();\n            scanner.nextLine();\n            Map<Integer, Integer> counter = new HashMap<>();\n            for(int j = 0; j < 2 * n - 1; j++) {\n                for(int k = 0; k < n; k++) {\n                    int value = scanner.nextInt();\n                    Integer count = counter.get(value);\n                    if(count == null) {\n                        counter.put(value, 1);\n                    } else {\n                        counter.put(value, count + 1);\n                    }\n                }\n            }\n            SortedSet<Integer> out = new TreeSet<>();\n            for(Integer key : counter.keySet()) {\n                if(counter.get(key) % 2 == 1) {\n                    out.add(key);\n                }\n            }\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Case #\").append(i).append(\":\");\n            out.stream().forEach(v -> sb.append(\" \").append(v));\n            System.out.println(sb.toString());\n        }\n    }\n}\n", "idx": "6254"}
{"func": "package googlejam6.p256;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\n\npublic class ProbB\n{\n\n\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer myTokens = new StringTokenizer(in.readLine());\n\t\t\n\t\tint T = Integer.parseInt(myTokens.nextToken());\n\t\t\n\t\tfor (int i=0; i<T; i++)\n\t\t{\n\t\t\tmyTokens = new StringTokenizer(in.readLine());\n\t\t\t\n\t\t\tint N = Integer.parseInt(myTokens.nextToken());\n\t\t\t\t\t\t\n\t\t\tint[] heights = new int[2501];\n\t\t\t\n\t\t\tfor (int j=0; j<2*N-1; j++)\n\t\t\t{\n\t\t\t\tmyTokens = new StringTokenizer(in.readLine());\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor (int k=0; k<N; k++)\n\t\t\t\t{\n\t\t\t\t\theights[Integer.parseInt(myTokens.nextToken())]++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \":\");\n\t\t\t\n\t\t\tfor (int q=0; q<2501; q++)\n\t\t\t{\n\t\t\t\tif (heights[q]%2 == 1)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.print(\" \" + q);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"\");\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\n\t}\n\t\n\n}\n", "idx": "6256"}
{"func": "package googlejam6.p257;\nimport java.util.*;\n\n/**\n * Created by BinghongFu on 4/15/16.\n */\npublic class RankAndFile {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int m = Integer.valueOf(s.nextInt());\n        String[] result = new String[m];\n        for(int i = 0; i < m; ++i){\n            int n = Integer.valueOf(s.nextInt());\n            int[] input = new int[n * (2 * n - 1)];\n            for(int j = 0; j < n * (2 * n - 1); ++j){\n                input[j] = s.nextInt();\n            }\n\t\t\tHashMap<Integer, Integer> counter = new HashMap<>();\n\t\t\tfor(int i1 : input){\n\t\t\t    if(!counter.containsKey(i1))\n\t\t\t        counter.put(i1, 0);\n\t\t\t    counter.put(i1, counter.get(i1) + 1);\n\t\t\t}\n\t\t\t\n\t\t\tArrayList<Integer> result1 = new ArrayList<>();\n\t\t\t\n\t\t\tfor(HashMap.Entry<Integer, Integer> entry : counter.entrySet()){\n\t\t\t    if(entry.getValue() % 2 != 0){\n\t\t\t        result1.add(entry.getKey());\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(result1);\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor(int i2 : result1){\n\t\t\t    sb.append(i2);\n\t\t\t    sb.append(\" \");\n\t\t\t}\n\t\t\tsb.deleteCharAt(sb.length() - 1);\n            result[i] = sb.toString();\n        }\n\n\n        for(int i = 0; i < m; ++i){\n            System.out.print(\"Case #\" + String.valueOf(i + 1) + \": \");\n            System.out.println(result[i]);\n        }\n\n    }\n}\n", "idx": "6257"}
{"func": "package googlejam6.p258;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\nimport java.util.HashSet;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * @author Poirot\r\n *\r\n */\r\npublic class RankandFile {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\r\n\t\tint t = in.nextInt();\r\n\t\tfor (int i = 1; i <= t; ++i) {\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tHashSet<Integer>  set = new HashSet<>();\r\n\t\t\tfor (int j = 0; j < N * 2 - 1; j++) {\r\n\t\t\t\tfor (int j2 = 0; j2 < N; j2++) {\r\n\t\t\t\t\tint num = in.nextInt();\r\n\t\t\t\t\tif (set.contains(num)) {\r\n\t\t\t\t\t\tset.remove(num);\r\n\t\t\t\t\t}  else {\r\n\t\t\t\t\t\tset.add(num);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint[] nums = new int[N];\r\n\t\t\tint k = 0;\r\n\t\t\tfor (int key : set) {\r\n\t\t\t\tnums[k++] = key;\r\n\t\t\t}\r\n\t\t\tArrays.sort(nums);\r\n\t\t\tSystem.out.print(\"Case #\" + i + \": \");\r\n\t\t\tfor (int j = 0; j < nums.length - 1; j++) {\r\n\t\t\t\tSystem.out.print(nums[j] + \" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println(nums[nums.length -1]);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6258"}
{"func": "package googlejam6.p259;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\n\r\npublic class RankAndFile {\r\n\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint numCases = Integer.parseInt(in.readLine());\r\n\t\tfor (int caseNumber = 1; caseNumber <= numCases; caseNumber++) {\r\n\t\t   int[] sol = new int[2502];\r\n\t\t   int N = Integer.parseInt(in.readLine());\r\n\t\t   for(int i=0;i<(2*N-1);i++)\r\n\t\t   {\r\n\t\t\t   String s = in.readLine();\r\n\t\t\t   String[] t = s.split(\" \");\r\n\t\t\t   for(String r : t)\r\n\t\t\t   {\r\n\t\t\t\t   int l = Integer.parseInt(r);\r\n\t\t\t\t   sol[l]++;\r\n\t\t\t   }\r\n\t\t   }\r\n\t\t   \r\n\t\t   ArrayList<Integer> res = new ArrayList<>();\r\n\t\t   \r\n\t\t   for(int j=0;j<sol.length;j++)\r\n\t\t   {\r\n\t\t\t   if(sol[j]!=0 && sol[j]%2==1)\r\n\t\t\t   {\r\n\t\t\t\t   res.add(j);\r\n\t\t\t   }\r\n\t\t   }\r\n\t\t   \r\n\t\t   String result = \"\";\r\n\t\t   for(int k=0;k<res.size();k++)\r\n\t\t\t\tresult+=\" \" + res.get(k);\r\n\t\t   System.out.println(\"Case #\" + caseNumber + \":\" + result);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6259"}
{"func": "package googlejam6.p260;\nimport java.io.BufferedInputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\nimport java.util.TreeMap;\r\n\r\n\r\npublic class TaskB {\r\n\r\n    public static void main(String[] args) {\r\n        long time = System.currentTimeMillis();\r\n        Scanner sc = new Scanner(new BufferedInputStream(System.in));\r\n        int t = sc.nextInt();\r\n        for (int i = 1; i <= t; i++) {\r\n            int n = sc.nextInt();\n\t\t\tint[] result = new int[2*n*n - n];\n\t\t\tfor (int i2 = 0; i2 < 2*n*n - n; i2++) {\n\t\t\t    result[i2] = sc.nextInt();\n\t\t\t}\r\n            int[] heights = result;\r\n            int[] counts = new int[2501];\r\n            for (int h : heights) {\r\n                counts[h]++;\r\n            }\r\n            ArrayList<Integer> answer = new ArrayList<>(n);\r\n            for (int j = 1; j < 2501; j++) {\r\n                if (counts[j] % 2 == 1) {\r\n                    answer.add(j);\r\n                    if (answer.size() == n) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            StringBuilder sb = new StringBuilder();\n\t\t\tsb.append(\"Case #\").append(i).append(\":\");\n\t\t\tfor (Integer i1 : answer) {\n\t\t\t    sb.append(' ').append(i1);\n\t\t\t}\n\t\t\tSystem.out.println(sb.toString());\r\n        }\r\n        sc.close();\r\n        System.err.println(System.currentTimeMillis() - time);\r\n    }\r\n\r\n}\r\n", "idx": "6260"}
{"func": "package googlejam6.p261;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Round1B {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner sc = new Scanner(new File(\"D:\\\\Downloads\\\\B-small-attempt0.in\"));\r\n\t\t// Scanner sc = new Scanner(new File(\"small2.in\"));\r\n\t\t\r\n\t\tint T = sc.nextInt();\r\n\t\t\r\n\t\tfor (int x = 1; x <= T; ++x) {\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\t\r\n\t\t\tint[][] arr = new int[2*N-1][N];\r\n\t\t\t\r\n\t\t\t// 2 * N - 1 line with N numbers\r\n\t\t\tfor (int i = 0; i < 2 * N - 1; ++i) {\r\n\t\t\t\tfor (int j = 0; j < N; ++j) {\r\n\t\t\t\t\tarr[i][j] = sc.nextInt();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// \uac1c\uc218\ub97c \uc13c\ub2e4. \ubaa8\ub450 2N\uac1c\uac00 \ub098\uc640\uc57c \ud55c\ub2e4.\r\n\t\t\tHashMap<Integer, Integer> map = new HashMap<>();\r\n\t\t\tfor (int i = 0; i < 2 * N - 1; ++i) {\r\n\t\t\t\tfor (int j = 0; j < N; ++j) {\r\n\t\t\t\t\tif (map.get(arr[i][j]) == null) {\r\n\t\t\t\t\t\tmap.put(arr[i][j], 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tint k = map.get(arr[i][j]);\r\n\t\t\t\t\t\tmap.put(arr[i][j], k + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tArrayList<Integer> r = new ArrayList<Integer>();\r\n\t\t\t\r\n\t\t\tfor (int i : map.keySet()) {\r\n\t\t\t\tif (map.get(i) % 2 != 0) {\r\n\t\t\t\t\tr.add(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tCollections.sort(r);\r\n\t\t\t\r\n\t\t\tSystem.out.print(\"Case #\" + x + \":\");\r\n\t\t\tfor (int i = 0; i < r.size(); ++i) {\r\n\t\t\t\tSystem.out.print(\" \" + r.get(i));\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\r\n\t\tsc.close();\r\n\t}\r\n}\r\n", "idx": "6261"}
{"func": "package googlejam6.p263;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Round1B {\n\tpublic static void main(String[] args) throws NumberFormatException, IOException\n\t{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"input\")));\n\t\t\n\t\tint test_no = Integer.parseInt(br.readLine());\n\t\t\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\n\t\t\n\t\tfor(int i = 1; i <= test_no; i++)\n\t\t{\n\t\t\tint N = Integer.parseInt(br.readLine());\n\t\t\tArrayList<String> alllist = new ArrayList<String>();\n\t\t\tint[] count = new int[2500];\n\t\t\tfor(int j = 0; j < 2 * N - 1;j++)\n\t\t\t{\n\t\t\t\tString[] oneline = br.readLine().split(\" \");\n\t\t\t\tfor(int k = 0; k < N; k++)\n\t\t\t\t\tcount[Integer.parseInt(oneline[k]) - 1]++;\n\t\t\t}\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\t//System.out.println(count[14]);\n\t\t\tfor(int m = 0; m < 2500; m++)\n\t\t\t{\n\t\t\t\tif(count[m] % 2 == 1)\n\t\t\t\t{\n\t\t\t\t\tresult.append(String.valueOf(m+1));\n\t\t\t\t\tresult.append(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(result.toString().trim());\n\t\t\t\t\n\n\t\t    out.write(\"Case #\");\n\t\t\tout.write(String.valueOf(i));\n\t\t\tout.write(\": \");\n\t\t\tout.write(result.toString().trim());\n\t\t\tout.write(\"\\n\");\t\n//\t\t    System.out.println(result.toString());\n\t\t}\n\t\tbr.close();\n\t\tout.close();\t\t\n\t}\n\n}\n", "idx": "6263"}
{"func": "package googlejam6.p264;\nimport java.util.*;\nclass B{\n\tpublic static void main(String []args){\n\t\tScanner s=new Scanner(System.in);\n\t\tint T=s.nextInt();\n\t\tfor(int i=1; i<=T; i++){\n\t\t\tint n=s.nextInt();\n\t\t\tint k=((n*2)-1)*n;\n\t\t\tint arreglo[]=new int[2501];\n\t\t\tfor(int j=0; j<2501; j++){\n\t\t\t\tarreglo[j]=0;\n\t\t\t}\n\t\t\tfor(int j=0; j<k; j++){\n\t\t\t\tint alt=s.nextInt();\n\t\t\t\tarreglo[alt]++;\n\t\t\t}\n\t\t\tSystem.out.print(\"Case #\"+i+\":\");\n\t\t\tfor(int j=0; j<2501; j++){\n\t\t\t\tif( arreglo[j]%2==1 ){\n\t\t\t\t\tSystem.out.print(\" \"+j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "idx": "6264"}
{"func": "package googlejam6.p265;\nimport java.util.*;\npublic class b {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner input = new Scanner(System.in);\n\t\tint numCases = input.nextInt();\n\t     \n\t    for (int n = 0; n < numCases; n++){\n\t    \t\n\t    \tint N = input.nextInt();\n\t    \tint t;\n\t    \tint [] hei = new int [2501];\n\t    \tfor (int i = 0; i < (2*N-1)*N; i++){\n\t    \t\tt = input.nextInt();\n\t    \t\thei[t]++;\n\t    \t}\n\t    \tint [] ans = new int [50];\n\t    \tint mm=0;\n\t    \tfor (int i = 1; i < 2501; i++){\n\t    \t\tif(hei[i]%2==1){\n\t    \t\t\tans[mm]=i;\n\t    \t\tmm++;\n\t    \t\t}\n\t    \t}\n\t\t    \t\n\t    \tSystem.out.printf(\"Case #%d:\", n + 1);\n\t    \tfor (int i = 0; i < N; i++)\n\t    \t\tSystem.out.printf(\" %d\",ans[i]);\n\t    \tSystem.out.println();\n\t    }\n\t}\n\n}\n", "idx": "6265"}
{"func": "package googlejam6.p268;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.StringTokenizer;\n\npublic class RankAndFile {\n    private static final String CASE = \"Case #\";\npublic static void main(String[] args) throws Exception {\n\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n    PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out), true);\n\n    int tcs  = Integer.parseInt(br.readLine());\n    \n    for(int t=1;t<=tcs;++t){\n        String opFormat = CASE + t + \":\";\n        HashMap<Integer, Integer> heights = new HashMap<Integer, Integer>();\n        int N = Integer.parseInt(br.readLine());\n        for(int i=0,iLen=((2*N)-1);i<iLen;++i){\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            for(int j=0;j<N;++j){\n                int currentHeight = Integer.parseInt(st.nextToken());\n                if(heights.containsKey(currentHeight)){\n                    heights.put(currentHeight, heights.get(currentHeight) + 1);\n                }else{\n                    heights.put(currentHeight, 1);\n                }\n            }\n        }\n            ArrayList<Integer> missingHeights = new ArrayList<Integer>(N);\n            \n            Iterator<Integer> heightsIterator = heights.keySet().iterator();\n            while(heightsIterator.hasNext()){\n                int currentHeight = heightsIterator.next();\n                int currentHeightVal = heights.get(currentHeight);\n                if((currentHeightVal%2)==1){\n                    missingHeights.add(currentHeight);\n                }\n            }\n            Collections.sort(missingHeights);\n            pw.print(opFormat);\n            for(int i=0;i<N;++i){\n                pw.print(\" \"+missingHeights.get(i));\n            }\n            pw.println();\n    }\n    \n    pw.flush();\n    pw.close();\n    br.close();\n}\n}\n\n", "idx": "6268"}
{"func": "package googlejam6.p269;\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.math.BigInteger;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class B {\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tSystem.setIn(new FileInputStream(new File(\"in.txt\")));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tSystem.setOut(new PrintStream(new File(\"out.txt\")));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tScanner s = new Scanner(System.in);\r\n\t\t\r\n\t\tint t = s.nextInt();\r\n\t\tfor (int c = 0; c < t; c++) {\r\n\t\t\tint n = s.nextInt();\r\n\t\t\tint[] good = new int[3000];\r\n\t\t\tfor (int i = 0;i < 2 * n * (n-1) + n; i++) {\r\n\t\t\t\tint aa = s.nextInt();\r\n\t\t\t\tgood[aa]++;\r\n\t\t\t\t//System.out.println(aa);\r\n\t\t\t}\r\n\t\t\t//System.out.println(Arrays.toString(good));\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\tsb.append(\"Case #\" + (c + 1) + \":\");\r\n\t\t\tfor (int i = 0;i < good.length; i++) {\r\n\t\t\t\tif (good[i] % 2 == 1) {\r\n\t\t\t\t\tsb.append(\" \" + i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sb);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6269"}
{"func": "package googlejam6.p271;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class List {\r\n\r\n\tstatic StringTokenizer st;\r\n\tstatic BufferedReader sc;\r\n\tstatic PrintWriter pw;\r\n\r\n\tpublic static void main(String args[]) throws Exception {sc = new BufferedReader(new InputStreamReader(System.in));\r\n\tBufferedReader in = new BufferedReader(new FileReader(\"F:\\\\JAVA\\\\eclipse\\\\input.in\")); \r\n\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(\r\n\t\t\tSystem.out)));\r\n\tString str;\r\n\tint [] a = new int [2510];\r\n\tString text = in.readLine(); \r\n\tint T=Integer.parseInt(text); \t\r\n\tfor (int tc=0;tc<T;tc++) {\r\n\t\tint n = Integer.parseInt(in.readLine()); \r\n\t\tint[] out = new int[n];\r\n\t\tfor (int i=0;i<2*n-1;i++) {\r\n\t\t\ttext = in.readLine();\r\n\t\t\tString [] tmp = text.split(\" \");\r\n\t\t\tfor (int j=0;j<tmp.length;j++) {\r\n\t\t\t\ta[Integer.parseInt(tmp[j])]++;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\tint cnt = 0;\r\n\t\tfor (int i=0;i<a.length;i++) {\r\n\t\t\tif (a[i]!=0) {\r\n\t\t\t\tif (a[i]%2==1) {\r\n\t\t\t\t\tout[cnt]=i;\r\n\t\t\t\t\tcnt++;\r\n\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\tArrays.sort(out);\r\n\t\tString s = \"\";\r\n\t\tfor (int i=0;i<out.length;i++) {\r\n\t\t\ts += Integer.toString(out[i])+ \" \";\r\n\t\t}\r\n\t\tpw.println(\"Case #\"+(tc+1)+\": \"+s.substring(0,s.length()-1));\r\n\t}\r\n\t//pw.println(arr.size());\r\n\tpw.close();\r\n\r\n\t}\r\n\r\n\r\n\r\n}\r\n", "idx": "6271"}
{"func": "package googlejam6.p273;\nimport java.util.Scanner;\r\n\r\n\r\npublic class B_RankAndFile {\r\npublic static void main(String args[]){\r\n\tScanner sc=new Scanner(System.in);\r\n\tint t,n,min ,max;\r\n\tt=sc.nextInt();\r\n\tint arr[];\r\n\tint ans[];\r\n\tfor(int i=1;i<=t;i++){\r\n\t\tn=sc.nextInt();\r\n\t\tarr=new int[2501];\r\n\t\tmin=Integer.MAX_VALUE;\r\n\t\tmax=Integer.MIN_VALUE;\r\n\t\tfor(int j=0;j<(2*n-1);j++){\r\n\t\t\tfor(int k=0;k<n;k++){\r\n\t\t\t\tint x=sc.nextInt();\r\n\t\t\t\tarr[x]++;\r\n\t\t\t\tmin=Math.min(min,x);\t \r\n\t\t\t\tmax=Math.max(max,x);\r\n\t\t\t}\r\n\t\t}\r\n\t\t//System.out.println(min+\" \"+max);\r\n\t\tans=new int[n];\r\n\t\tfor(int k=min,l=0;k<=max;k++){\r\n\t\t\tif(arr[k]%2!=0){\r\n\t\t\t\tans[l]=k;\r\n\t\t\t\tl++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tSystem.out.print(\"Case #\"+i+\": \");\r\n\t\tfor(int k=0;k<n;k++){\r\n\t\t\tSystem.out.print(ans[k]+\" \");\r\n\t\t}\r\n\t\tSystem.out.println();\r\n\t\t\t\t\t\r\n\t}\r\n\t\r\n\t\r\n\tsc.close();\r\n}\r\n}\r\n", "idx": "6273"}
{"func": "package googlejam6.p275;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class RankAndFile {\r\n\r\n\tstatic Scanner input;\r\n\tstatic PrintWriter output;\r\n\tstatic int testCases;\r\n\tstatic final String inFileName = \"in.txt\";\r\n\tstatic final String outFileName = \"RankAndFile.txt\";\r\n\t\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\t\r\n\t\tinput = new Scanner(new File(inFileName));\n\t\toutput = new PrintWriter(new File(outFileName));\n\t\ttestCases = input.nextInt();\r\n\t\t\r\n\t\tStringBuilder answer;\n\t\tint N;\n\t\t\n\t\tint[] list;\n\t\t\n\t\t\n\t\tfor(int i = 0; i<testCases; i++)\n\t\t{\n\t\t\tN = input.nextInt();\n\t\t\tinput.nextLine();\n\t\t\t\n\t\t\tanswer = new StringBuilder();\n\t\t\tlist = new int[2*N*N-N];\n\t\t\tfor(int x = 0; x<2*N*N-N; x++)\n\t\t\t{\n\t\t\t\tlist[x] = input.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(list);\n\t\t\tint temp,count=1;\n\t\t\ttemp = list[0];\n\t\t\tfor(int y = 1; y<list.length; y++)\n\t\t\t{\n\t\t\t\tif(temp == list[y])\n\t\t\t\t\tcount++;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif(count%2 != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tanswer.append(temp + \" \");\n\t\t\t\t\t}\n\t\t\t\t\tcount = 1;\n\t\t\t\t\ttemp = list[y];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count%2 != 0)\n\t\t\t{\n\t\t\t\tanswer.append(temp + \" \");\n\t\t\t}\n\t\t\t\n\t\t\toutput.write(\"Case #\" + (i+1) + \": \" + answer.toString().trim() + \"\\n\");\n\t\t}\r\n\t\t\r\n\t\tinput.close();\n\t\toutput.close();\r\n\t}\r\n\t\r\n}\r\n\r\n", "idx": "6275"}
{"func": "package googlejam6.p277;\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\n\r\npublic class Round1A2 {\r\n\tpublic static void main(String... strings) {\r\n\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tPrintStream ps = System.out;\r\n\t\ttry {\r\n\t\t\tSystem.setOut(new PrintStream(new FileOutputStream(\"out2.txt\")));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tps.close();\r\n\t\tint numCases = Integer.valueOf(sc.nextLine());\r\n\r\n\t\tfor (int i = 0; i < numCases; i++) {\r\n\t\t\tHashMap<Integer, Integer> hm = new HashMap<>();\t\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tfor (int j = 0; j < N*(2 * N - 1); j++) {\r\n\t\t\t\tint a = sc.nextInt();\r\n\t\t\t\tif (hm.get(a) == null) {\r\n\t\t\t\t\thm.put(a, 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\thm.put(a, hm.get(a) + 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tArrayList<Integer> al = new ArrayList<>();\r\n\t\t\tfor (Map.Entry<Integer, Integer> entry : hm.entrySet()) {\r\n\t\t\t\tif (entry.getValue() % 2 == 1) {\r\n\t\t\t\t\tal.add(entry.getKey());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tCollections.sort(al);\r\n\t\t\tint len = al.size();\r\n\t\t\tSystem.out.printf(\"Case #%d: %d\", i + 1, al.get(0));\r\n\t\t\tfor(int k = 1;k<len;k++){\r\n\t\t\t\tSystem.out.printf(\" %d\", al.get(k));\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\tsc.close();\r\n\t}\r\n}\r\n", "idx": "6277"}
{"func": "package googlejam6.p278;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\n\r\nimport java.util.*;\r\n\r\npublic class Problem2 {\r\n\r\n  public static void main(String[] args) {\r\n\r\n    Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\r\n    int i = 0;\r\n    int cases = Integer.parseInt(sc.nextLine());\r\n\r\n    while (i < cases) {\r\n\r\n      String line = sc.nextLine();\r\n      int qtd = Integer.parseInt(line);\r\n\r\n      String[] lines = new String[(qtd*2)-1];\r\n      for (int j = 0; j < (qtd*2)-1; j++) lines[j] = sc.nextLine();\n\tint[] qtds = new int[2500];\n\t\n\tfor (String line1 : lines) {\n\t\n\t  String[] values = line1.split(\" \");\n\t\n\t  for (String value : values) {\n\t\n\t    int val = Integer.parseInt(value);\n\t    qtds[val-1]++;\n\t\n\t  }\n\t\n\t}\n\t\n\tArrayList<Integer> results = new ArrayList<>();\n\t\n\tfor (int i2 = 0; i2 < qtds.length; i2++) {\n\t\n\t  if (qtds[i2]%2 != 0) {\n\t\n\t    results.add(i2+1);\n\t\n\t  }\n\t\n\t}\n\t\n\tObject[] ints = results.toArray();\n\tArrays.sort(ints);\n\t\n\tString result1 = \"\";\n\tfor (int i1 = 0; i1 < results.size(); i1++) {\n\t\n\t  if (i1 != 0) result1 = result1 + \" \";\n\t  result1 = result1 + ints[i1];\n\t\n\t}\r\n\r\n      String result = result1;\r\n      i++;\r\n\r\n      System.out.println(\"Case #\" + i + \": \" + result);\r\n\r\n    }\r\n\r\n  }\r\n\r\n}\r\n", "idx": "6278"}
{"func": "package googlejam6.p283;\nimport java.awt.Image;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\n\r\nimport javax.swing.text.html.MinimalHTMLWriter;\r\n\r\n\r\npublic class Q2 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tString input=\"d:\\\\B-large.in\";\r\n\t\t    String output=\"d:\\\\output.out\";\r\n\t\t    \r\n            Scanner sc = new Scanner(new FileReader(input));\r\n            PrintWriter pw = new PrintWriter(output);\r\n            \r\n            int n = sc.nextInt();\r\n            sc.nextLine();\r\n            \r\n            \r\n            for (int c=0; c<n; c++) {\r\n            \tint len = sc.nextInt();\r\n            \tsc.nextLine();\r\n                pw.print(\"Case #\" + (c+1) + \": \");\r\n                List<String> list = new ArrayList<>();\n\t\t\t\tMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\t\t\tfor(int i = 0;i<2*len-1;i++){\n\t\t\t\t\tString z = sc.nextLine();\n\t\t\t\t\tString[] all = z.split(\" \");\n\t\t\t\t\tfor(String j : all){\n\t\t\t\t\t\tif(!j.isEmpty()){\n\t\t\t\t\t\t\tint x = Integer.parseInt(j);\n\t\t\t\t\t\t\tif(!map.containsKey(x)){\n\t\t\t\t\t\t\t\tmap.put(x, 1);\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tmap.put(x, map.get(x)+1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tList<Integer> tosort = new ArrayList<>(len);\n\t\t\t\tfor(int key : map.keySet()){\n\t\t\t\t\tif(map.get(key) % 2 == 1){\n\t\t\t\t\t\ttosort.add(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tCollections.sort(tosort);\n\t\t\t\tfor(int key : tosort){\n\t\t\t\t\tpw.print(key + \" \");\n\t\t\t\t}\n\t\t\t\tpw.println();\r\n            }\r\n            pw.println();\r\n            pw.flush();\r\n            pw.close();\r\n            sc.close();\r\n        } catch (FileNotFoundException ex) {\r\n            \r\n        }\r\n\r\n\t}\r\n\t\r\n\r\n}\r\n", "idx": "6283"}
{"func": "package googlejam6.p284;\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\n\r\npublic class Solution2 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint t = in.nextInt();\r\n\t\t\r\n\t\tfor(int i=0;i<t;i++)\r\n\t\t{\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint [][] arr = new int [2*n-1][n];\r\n\t\t\tfor(int x=0;x<2*n-1;x++)\r\n\t\t\t\tfor(int y=0;y<n;y++)\r\n\t\t\t\t\tarr[x][y]=in.nextInt();\r\n\t\t\tHashMap<Integer,Integer> h = new HashMap<Integer,Integer>();\n\t\t\tArrayList<Integer> a = new ArrayList<Integer>();\n\t\t\tfor(int i3=0;i3<2*n-1;i3++)\n\t\t\t\tfor(int j=0;j<n;j++)\n\t\t\t\t{\n\t\t\t\t\tif(h.containsKey(arr[i3][j]))\n\t\t\t\t\t\th.put(arr[i3][j],h.get(arr[i3][j])+1);\n\t\t\t\t\telse\n\t\t\t\t\t\th.put(arr[i3][j],1);\n\t\t\t\t}\n\t\t\tSet<Integer> keyset = h.keySet();\n\t\t\tArrayList<Integer> array = new ArrayList<Integer>(keyset);\n\t\t\tfor(int i2=0;i2<array.size();i2++){\n\t\t\t\tif(h.get(array.get(i2))%2==1){\n\t\t\t\t\ta.add(array.get(i2));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tint[] newarr= new int[a.size()];\n\t\t\tfor(int i4=0;i4<n;i4++)\n\t\t\t\tnewarr[i4] = a.get(i4);\n\t\t\tArrays.sort(newarr);\n\t\t\tSystem.out.print(\"Case #\"+(i+1)+\":\");\n\t\t\tfor(int i1=0;i1<newarr.length;i1++)\n\t\t\t\tSystem.out.print(\" \"+newarr[i1]);\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6284"}
{"func": "package googlejam6.p287;\nimport java.io.*;\nimport java.lang.reflect.Array;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Arrays;\n\n/**\n * Created by talik on 16.04.16.\n */\npublic class Main {\n\n\n    public static void main(String[] args) {\n        String line;\n        int tab[] = new int[2500];\n        int tmp;\n        int n=0;\n        try {\n            BufferedReader reader = new BufferedReader(new FileReader(new File(\"/home/talik/Dokumenty/1RoundB/B-large.in\")));\n            Path path = Paths.get(\"/home/talik/Dokumenty/1RoundB/output.txt\");\n            // Path file = Files.createFile(path);\n            PrintWriter writer = new PrintWriter(path.toString());\n            int numberOfLines = Integer.parseInt(reader.readLine());\n            for(int i=1;i<=numberOfLines;i++){\n                Arrays.fill(tab,0);\n                line = reader.readLine();\n                n = Integer.parseInt(line);\n                for(int j=0;j<(2*n-1);j++) {\n                    line = reader.readLine();\n                    String[] cos = line.split(\"\\\\s+\");\n                    for (String x: cos) {\n                        tmp = Integer.parseInt(x);\n                        tab[tmp-1]++;\n                    }\n                }\n                writer.print(\"Case #\"+i+\":\");\n                for (int j=0;j<tab.length;j++){\n                    if(tab[j]%2==1){\n                        writer.print(\" \"+(j+1));\n                    }\n                }\n                writer.println();\n            }\n            writer.flush();\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException io){\n            io.printStackTrace();\n        }\n\n\n    }\n\n\n}\n", "idx": "6287"}
{"func": "package googlejam6.p288;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.Writer;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n\r\npublic class q2 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tBufferedReader reader = null;\r\n\t\tFile file = new File(\"C:\\\\Users\\\\vincent\\\\workspace\\\\code jam\\\\src\\\\r1a\\\\B-large.txt\");\r\n\t\tFile answer = new File(\"C:\\\\Users\\\\vincent\\\\workspace\\\\code jam\\\\src\\\\r1a\\\\output.txt\");\r\n\t    Writer writer = null;\r\n\t\ttry{\r\n\t\t\treader = new BufferedReader(new FileReader(file));\r\n\t\t\twriter = new BufferedWriter(new OutputStreamWriter(\r\n\t\t    \t\tnew FileOutputStream(answer), \"utf-8\"));\r\n\t\t    String text = null;\r\n\t\t    \r\n\t\t    text = reader.readLine();\r\n\t\t    int numberOfTestCases = Integer.parseInt(text);\r\n\t\t    int index = 1;\r\n\r\n\t\t    while (numberOfTestCases > 0) {\r\n\t\t\t    text = reader.readLine();\r\n\t\t\t    int N = Integer.parseInt(text);\n\t\t\t\tList<Integer> digits = new ArrayList<Integer>();\n\t\t\t\tfor (int i = 0; i < 2*N-1; i++) {\n\t\t\t\t\tString entry = reader.readLine();\n\t\t\t\t\tString[] entries = entry.split(\" \");\n\t\t\t\t\tfor (int j = 0; j < entries.length; j++) {\n\t\t\t\t\t\tint number = Integer.valueOf(entries[j]);\n\t\t\t\t\t\tif (digits.contains(number)) {\n\t\t\t\t\t\t\tdigits.remove((Integer) number);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdigits.add(number);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tCollections.sort(digits);\n\t\t\t\tString answer2 = \"\"; \n\t\t\t\tfor (int digit : digits) {\n\t\t\t\t\tanswer2 = answer2 + digit + \" \";\n\t\t\t\t}\r\n\t\t    \tString answer1 = answer2.substring(0, answer2.length()-1);\n\t\t\t\twriter.write(\"Case #\" + String.valueOf(index) + \": \" + answer1 + \"\\n\");\r\n\t\t    \tnumberOfTestCases--;\r\n\t\t        index++;\r\n\t\t    }\r\n\t\t} catch (IOException x) {\r\n\t\t    System.err.format(\"IOException: %s%n\", x);\r\n\t\t} finally {\r\n\t\t    try {\r\n\t\t        if (reader != null) {\r\n\t\t            reader.close();\r\n\t\t        }\r\n\t\t        if (writer != null) {\r\n\t\t        \twriter.close();\r\n\t\t        }\r\n\t\t    } catch (IOException e) {\r\n\t\t    }\r\n\t\t}\r\n\t\tSystem.out.println(\"done\");\r\n\t}\r\n\r\n}\r\n", "idx": "6288"}
{"func": "package googlejam6.p289;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\n\r\n/**\r\n * @author Cheng Chen\r\n * @since Apr 15, 2016\r\n */\r\n\r\npublic class RankAndFile {\r\n\t\r\n\tpublic static void main(String[] args) throws FileNotFoundException, IOException {\r\n\t\tint casetotal = 0;\r\n\t\tint casenumber = 1;\r\n\t\tint totalline = 0;\r\n\t\tString line = \"\";\r\n\t\t\r\n\t\ttry (FileReader fr = new FileReader(\"data/B-large.in\"); BufferedReader br = new BufferedReader(fr); FileWriter fw = new FileWriter(\"data/B-large.out\"); PrintWriter bw = new PrintWriter(fw);) {\r\n\t\t\twhile ((line = br.readLine()) != null) {\r\n\t\t\t\tif (totalline == 0) {\r\n\t\t\t\t\tcasetotal = Integer.parseInt(line);\r\n\t\t\t\t\ttotalline++;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (casenumber > casetotal) {\r\n\t\t\t\t\tSystem.out.println(\"###Error: The casenumber has problem!!!\");\r\n\t\t\t\t\tSystem.out.println(\"###Error: This error happened in line number\" + totalline);\r\n\t\t\t\t\tSystem.exit(0);\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * processing\r\n\t\t\t\t */\r\n\t\t\t\tHashMap<Integer, Integer> count=new HashMap<Integer,Integer>();\r\n\t\t\t\tint N=Integer.parseInt(line);\r\n\t\t\t\tfor(int i=0;i<2*N-1;i++){\r\n\t\t\t\t\tline = br.readLine();\r\n\t\t\t\t\tString[] arrS=line.split(\" \",N);\r\n\t\t\t\t\tfor(String s:arrS){\r\n\t\t\t\t\t\tint no=Integer.parseInt(s);\r\n\t\t\t\t\t\tif(count.get(no)!=null)\r\n\t\t\t\t\t\t\tcount.put(no, count.get(no)+1);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tcount.put(no,1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttotalline++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tArrayList<Integer> list=new ArrayList<Integer>();\r\n\t\t\t\tfor(int key:count.keySet()){\r\n\t\t\t\t\tif(count.get(key)%2==1)\r\n\t\t\t\t\t\tlist.add(key);\r\n\t\t\t\t}\r\n\t\t\t\tCollections.sort(list);\r\n\t\t\t\t\r\n\t\t\t\tbw.print(\"Case #\"+casenumber+\": \");\r\n\t\t\t\tfor(int no:list){\r\n\t\t\t\t\tbw.print(no);\r\n\t\t\t\t\tbw.print(\" \");\r\n\t\t\t\t}\r\n\t\t\t\tbw.println();\r\n\t\t\t\t\r\n\t\t\t\tcasenumber++;\r\n\t\t\t\ttotalline++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n", "idx": "6289"}
{"func": "package googlejam6.p290;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tString file = \"B-large.in\";\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(file));\r\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"out.txt\"));\r\n\t\tint n = Integer.parseInt(br.readLine());\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\tint len = Integer.parseInt(br.readLine());\r\n\t\t\tArrayList<Integer> nums = new ArrayList<>();\r\n\t\t\tArrayList<Integer> shows = new ArrayList<>();\r\n\t\t\tfor (int j = 0; j < len * 2 - 1; j++) {\r\n\t\t\t\tString s = br.readLine();\r\n\t\t\t\tString[] ss = s.split(\" \");\r\n\t\t\t\tfor (int k = 0; k < ss.length; k++) {\r\n\t\t\t\t\tint a = Integer.parseInt(ss[k]);\r\n\t\t\t\t\tif (nums.contains(a)) {\r\n\t\t\t\t\t\tshows.set(nums.lastIndexOf(a), shows.get(nums.lastIndexOf(a)) + 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnums.add(a);\r\n\t\t\t\t\t\tshows.add(1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint[] ints = new int[len];\r\n\t\t\tfor (int j = 0, k = 0; j < nums.size(); j++) {\r\n\t\t\t\tif (shows.get(j) % 2 != 0)\r\n\t\t\t\t\tints[k++] = nums.get(j);\r\n\t\t\t}\r\n\t\t\tArrays.sort(ints);\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\tsb.append(ints[0]);\r\n\t\t\tfor (int j = 1; j < ints.length; j++) {\r\n\t\t\t\tsb.append(\" \").append(ints[j]);\r\n\t\t\t}\r\n\t\t\tbw.write(\"Case #\" + (i + 1) + \": \" + sb.toString());\r\n\t\t\tbw.newLine();\r\n\t\t}\r\n\t\tbr.close();\r\n\t\tbw.close();\r\n\t}\r\n}\r\n", "idx": "6290"}
{"func": "package googlejam6.p292;\nimport java.io.*;\nimport java.util.*;\n\npublic class RankAndFile {\n\n    public static void main(String[] args) throws FileNotFoundException{\n      Scanner in = new Scanner(new File(args[0]));\n      int t = in.nextInt();\n      \n     for(int i = 0; i < t; i++) {\n       int n = in.nextInt();\n       \n       int[][] lists = new int[2*n - 1][n];\n       for(int j = 0 ; j < 2 * n - 1; j++) {\n          for(int k = 0; k < n; k++) {\n            lists[j][k] = in.nextInt();            \n          }\n       }\n       \n       int[] heightOccurences = new int[2501];\n       for(int j = 0 ; j < 2 * n - 1; j++) {\n          for(int k = 0; k < n; k++) {\n            heightOccurences[lists[j][k]]  += 1;\n          }\n       }\n       System.out.format(\"Case #%d:\", i + 1);\n       for(int j = 1; j < heightOccurences.length; j++) {\n         if(heightOccurences[j] % 2 != 0) {\n          System.out.format(\" %d\", j);\n         }\n       }\n       System.out.format(\"%n\");       \n       \n     }\n    }\n\n}", "idx": "6292"}
{"func": "package googlejam6.p294;\nimport java.util.*;\nimport java.io.*;\npublic class RankAndFile {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();    // Scanner has functions to read ints, longs, strings, chars, etc.\n        for (int i = 1; i <= t; ++i) {\n            int n = in.nextInt();\n\n            HashMap<Integer, Integer> seen = new HashMap<Integer, Integer>();            \n\n            for (int j = 0; j < 2*n -1; j++) {\n                for (int k = 0; k < n; k++) {\n                    int m = in.nextInt();\n                    if (seen.get(m) == null) {\n                        seen.put(m, 1);\n                    } else {\n                        seen.put(m, seen.get(m) + 1);    \n                    }\n                }\n            }\n\n            PriorityQueue<Integer> q = new PriorityQueue<Integer>();\n            \n            Set<Integer> entrySet = seen.keySet();\n            for (Integer key : entrySet) {\n                if (seen.get(key) % 2 == 1) {\n                    q.add(key);\n                }\n            }\n\n            String res = \"\";\n            while(q.size() > 0) {\n                res += q.poll() + \" \";\n            }\n\n            System.out.println(\"Case #\" + i + \": \" + res);\n        }\n    }\n}", "idx": "6294"}
{"func": "package googlejam6.p295;\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tPrintWriter writer = new PrintWriter(\"output\", \"UTF-8\");\r\n\t\tint T = input.nextInt();\r\n\t\tfor(int i = 1; i <= T; i++){\r\n\t\t\tint N = input.nextInt();\r\n\t\t\t// read each line\r\n\t\t\tboolean line[] = new boolean[2501];\r\n\t\t\tfor(int j = 0; j < line.length; j++) line[j] = true;// true means even\r\n\t\t\tfor(int j = 0; j < 2 * N - 1; j++){\r\n\t\t\t\t// read each int\r\n\t\t\t\tfor(int k = 0; k < N; k++){\r\n\t\t\t\t\tint n = input.nextInt();\r\n\t\t\t\t\tline[n] = (line[n] == false);// flip the value\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\twriter.print(\"Case #\" + i + \":\");\r\n\t\t\tfor(int j = 1; j < line.length; j++){\r\n\t\t\t\tif(line[j] == false) writer.print(\" \" + j);\r\n\t\t\t}\r\n\t\t\twriter.println();\r\n\t\t}\r\n\t\tinput.close();\r\n\t\twriter.close();\r\n\t}\r\n}\r\n", "idx": "6295"}
{"func": "package googlejam6.p297;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class RankAndFile {\n\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(new File(\"/home/mbroshi/Downloads/B-large.in\"));\n        int numCases = sc.nextInt();\n        StringBuffer output = new StringBuffer();\n        for (int i = 1; i <= numCases; i++) {\n            int numRows = sc.nextInt();\n            int[] intCounts = new int[2501];\n            for (int h = 0; h < (2 * numRows - 1) * numRows; h++) {\n                int next = sc.nextInt();\n                intCounts[next] += 1;\n            }\n            List<Integer> missing = new ArrayList<>(numRows);\n            for (int j = 1; j < 2501; j++) {\n                if (intCounts[j] % 2 == 1) {\n                    missing.add(j);\n                }\n            }\n            Collections.sort(missing);\n            StringBuilder builder = new StringBuilder(2 * numRows);\n            for (int m : missing) {\n                builder.append(\" \").append(m);\n            }\n            output.append(String.format(\"Case #%d: %s\\n\", i, builder));\n        }\n        System.out.println(output);\n        FileWriter fw = new FileWriter(new File(\"/home/mbroshi/Downloads/B-large.out\"));\n        BufferedWriter bw = new BufferedWriter(fw);\n        bw.write(output.toString());\n        bw.close();\n    }\n}\n", "idx": "6297"}
{"func": "package googlejam6.p299;\n\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.*;\n\n/**\n * Created by Sahil on 16/04/16.\n */\npublic class Soldier {\n    public static void main(String[] args) throws IOException {\n        {\n            {\n                String fileAddr = \"/users/sahil/Desktop/filename.txt\";\n                Scanner scanner = new Scanner(System.in).useDelimiter(System.getProperty(\"line.separator\"));\n                int numTestcases = scanner.nextInt();\n                File file = new File(fileAddr);\n                if (!file.exists()) {\n                    file.createNewFile();\n                }\n                FileWriter fw = new FileWriter(file.getAbsoluteFile());\n                BufferedWriter bw = new BufferedWriter(fw);\n                for (int j = 0; j < numTestcases; j++) {\n                    int N = scanner.nextInt();\n                    HashMap<String, Integer> dictionary = new HashMap<String, Integer>();\n                    for (int i = 0; i < 2 * N - 1; i++) {\n                        String[] listHeight = scanner.next().split(\" \");\n                        for (int k = 0; k < N; k++) {\n                            if (dictionary.get(listHeight[k]) == null)\n                                dictionary.put(listHeight[k], 1);\n                            else\n                                dictionary.put(listHeight[k], dictionary.get(listHeight[k]) + 1);\n                        }\n                    }\n                    Iterator it = dictionary.entrySet().iterator();\n                    List<Integer> missList = new ArrayList<Integer>();\n                    while (it.hasNext()) {\n                        Map.Entry pair = (Map.Entry) it.next();\n                        if ((Integer) pair.getValue() % 2 != 0)\n                            missList.add(Integer.parseInt((String)pair.getKey()));\n                    }\n                    Collections.sort(missList);\n                    bw.write(\"Case #\" + (j + 1) + \": \");\n                    for (int i : missList) {\n                        System.out.print(i);\n                        bw.write(Integer.toString(i));\n                        bw.write(\" \");\n                    }\n                    bw.newLine();\n\n                }\n                bw.close();\n                scanner.close();\n            }\n        }\n    }\n}\n", "idx": "6299"}
{"func": "package googlejam6.p301;\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.HashSet;\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\n\r\n\r\npublic class Round1B {\r\n\tpublic static void main(String[] args){\r\n\t\tRound1B t = new Round1B();\r\n\t\tScanner scan;\n\t\ttry {\n\t\t\tscan = new Scanner(new File(\"input.txt\"));\n\t\t\tPrintStream p = new PrintStream(\"output.txt\");\n\t\t\tlong num = scan.nextLong();\n\t\t\tfor(long i = 1; i <= num; i++){\n\t\t\t\tscan.nextLine();\n\t\t\t\t\n\t\t\t\tint sizeN = scan.nextInt();\n\t\t\t\tint[] array = new int[2501];\n\t\t\t\t\n\t\t\t\tfor (int j = 0; j < 2 * sizeN - 1; j++) {;\n\t\t\t\t\tfor (int k = 0; k < sizeN; k++) {\n\t\t\t\t\t\tint current = scan.nextInt();\n\t\t\t\t\t\tarray[current]++;\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\t\n\t\t\t\tString answer = \"\";\n\t\t\t\tfor (int r = 1; r <= 2500; r++) {\n\t\t\t\t\tif (array[r] % 2 != 0) {\n\t\t\t\t\t\tanswer += r + \" \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tp.println(\"Case #\" + i + \": \" + answer);\n\t\t\t\tSystem.out.println(\"Case #\" + i + \": \" + answer);\n\t\t\n\t\t\t}\n\t\t\tp.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\n", "idx": "6301"}
{"func": "package googlejam6.p302;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\n\npublic class RankAndFile {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint runs = Integer.parseInt(sc.nextLine().trim());\n\t\tfor(int run = 1 ; run <= runs ; run++) {\n\t\t\tSystem.out.print(\"Case #\" + run + \":\");\n\t\t\t\n\t\t\tint N = Integer.parseInt(sc.nextLine().trim());\n\t\t\tTreeSet<Integer> list = new TreeSet<Integer>();\n\t\t\t\n\t\t\tfor(int i = 0 ; i < 2*N - 1 ; i++) {\n\t\t\t\tString[] line = sc.nextLine().split(\"\\\\s+\");\n\t\t\t\tfor(String sNum : line) {\n\t\t\t\t\tint num = Integer.parseInt(sNum);\n\t\t\t\t\tif(list.contains(num)) {\n\t\t\t\t\t\tlist.remove(num);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlist.add(num);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int num : list) {\n\t\t\t\tSystem.out.print(\" \" + num);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "idx": "6302"}
{"func": "package googlejam6.p306;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Q2 {\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\ttry (BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {\n\t\t\tint T = Integer.parseInt(br.readLine());\n\t\t\tfor (int i = 1; i <= T; i++) {\n\t\t\t\tint N = Integer.parseInt(br.readLine());\n\t\t\t\tint toIter = 2 * N - 1;\n\t\t\t\tString[] line;\n\t\t\t\tint[] arr = new int[2501];\n\t\t\t\tint[] naya = new int[N];\n\t\t\t\tfor (int j = 0; j < toIter; j++) {\n\t\t\t\t\tline = br.readLine().split(\"\\\\s+\");\n\t\t\t\t\tfor (int k = 0; k < N; k++) {\n\t\t\t\t\t\tarr[Integer.parseInt(line[k])]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint counter = 0;\n\t\t\t\tfor (int z = 0; z < 2501; z++) {\n\t\t\t\t\tif (arr[z] % 2 != 0)\n\t\t\t\t\t\tnaya[counter++] = z;\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\"Case #\" + i + \":\");\n\t\t\t\tfor (int x = 0; x < N; x++) {\n\t\t\t\t\tSystem.out.print(\" \" + naya[x]);\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"\");\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t}\n\t}\n\n}\n", "idx": "6306"}
{"func": "package googlejam6.p307;\nimport java.util.Scanner;\nimport java.util.Arrays;\nimport java.util.Comparator;\n\npublic class RankAndFile {\n\t\n\tpublic RankAndFile(Scanner f) {\n\t\tint cases = f.nextInt();\n\t\tfor(int ii=1; ii <= cases; ii++) {\n\t\t\t\n\t\t\tint n = f.nextInt();\n\t\t\tint numSheets = 2*n-1;\n\t\t\t\n\t\t\tint[][] rows = new int[numSheets][n];\n\t\t\t\n\t\t\tfor(int i = 0; i < numSheets; i++)\n\t\t\t\tfor(int j = 0; j < n; j++)\n\t\t\t\t\trows[i][j] = f.nextInt();\n\t\t\t\n\t\t\tint[] peopleMap = new int[2501];\n\t\t\tfor(int i = 0; i <= 2500; i++)\n\t\t\t\tpeopleMap[i] = 0;\n\t\t\t\n\t\t\tfor(int i = 0; i < numSheets; i++) {\n\t\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\t\tpeopleMap[rows[i][j]]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint printCount = 0;\n\t\t\tSystem.out.printf(\"Case #%d: \", ii);\n\t\t\tfor(int i = 0; i <= 2500; i++) {\n\t\t\t\tif(peopleMap[i] % 2 != 0) {\n\t\t\t\t\tprintCount++;\n\t\t\t\t\tSystem.out.printf(\"%d%s\", i, printCount==n ? \"\\n\" : \" \");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/*\n\tvoid printArray(int[][] rows) {\n\t\tfor(int i = 0; i < rows.length; i++)\n\t\t\tfor(int j = 0; j < rows[0].length; j++)\n\t\t\t\tSystem.out.printf(\"%d%s\", rows[i][j], j==rows[0].length-1 ? \"\\n\" : \" \");\n\t}*/\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner f = new Scanner(System.in);\n\t\tnew RankAndFile(f);\n\t\tf.close();\n\t}\n\n}", "idx": "6307"}
{"func": "package googlejam6.p309;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class RankAndFile {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tint caseNo = 1;\r\n\t\tboolean noRead = false;\r\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(\r\n\t\t\t\t\"C:\\\\Users\\\\fengze\\\\scala_workspace\\\\jam\\\\input.txt\"));\r\n\t\t\t\tFileWriter fw = new FileWriter(\"output.txt\")) {\r\n\t\t\tString line;\r\n\t\t\twhile ((line = br.readLine()) != null) {\r\n\t\t\t\tif (!noRead) {\r\n\t\t\t\t\tnoRead = true;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tint n = Integer.parseInt(line);\r\n\t\t\t\t\tString[] lines = new String[2 * n - 1];\r\n\t\t\t\t\tfor (int i = 0; i < lines.length; i++) {\r\n\t\t\t\t\t\tlines[i] = br.readLine();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tRankAndFile rf = new RankAndFile(n, lines);\n\t\t\t\t\tint[] result = new int[rf.n];\n\t\t\t\t\t\n\t\t\t\t\tMap<Integer, Integer> map = new HashMap<>();\n\t\t\t\t\t\n\t\t\t\t\tfor (int i1 = 0; i1 < 2 * rf.n - 1; i1++) {\n\t\t\t\t\t\tString[] temp = rf.list[i1].split(\"\\\\s+\");\n\t\t\t\t\t\tfor (int j = 0; j < rf.n; j++) {\n\t\t\t\t\t\t\tInteger height = Integer.parseInt(temp[j]);\n\t\t\t\t\t\t\tif (map.containsKey(height)) {\n\t\t\t\t\t\t\t\tInteger count = map.get(height);\n\t\t\t\t\t\t\t\tmap.put(height, count + 1);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmap.put(height, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tint i2 = 0;\n\t\t\t\t\tfor (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\t\t\t\t\t\tif (entry.getValue() % 2 != 0) {\n\t\t\t\t\t\t\tresult[i2] = entry.getKey();\n\t\t\t\t\t\t\ti2++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tArrays.sort(result);\n\t\t\t\t\tint[] array = result;\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\tfor(int i = 0; i < array.length; i ++) {\n\t\t\t\t\t\tsb.append(' ');\n\t\t\t\t\t\tsb.append(array[i]);\n\t\t\t\t\t}\n\t\t\t\t\tfw.write(\"Case #\" + caseNo + \":\" + sb.toString() + \"\\r\\n\");\r\n\t\t\t\t\tcaseNo++;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate int n;\r\n\tprivate String[] list;\r\n\r\n\tpublic RankAndFile(int n, String[] list) {\r\n\t\tthis.n = n;\r\n\t\tthis.list = list;\r\n\t}\r\n}\r\n", "idx": "6309"}
{"func": "package googlejam6.p311;\nimport java.util.*;\nimport java.io.*;\npublic class B{\n  public static void main(String[] args) throws Exception{\n    BufferedReader in = new BufferedReader(new FileReader(\"B-large.in\"));\n    int t = Integer.parseInt(in.readLine());\n    String[] input = new String[t];\n    int[] sizes = new int[t];\n    PrintWriter out = new PrintWriter(\"output.txt\");\n    for (int i = 0; i < t; i++){\n\tint size = Integer.parseInt(in.readLine());\n\tsizes[i] = size;\n\tString temp = in.readLine();\n\tfor(int j = 1;j<2*size-1;j++){\n        \ttemp+= \" \"+in.readLine();\n\t}\n\tinput[i] = temp;\n    }\n    for(int i = 0;i<t;i++){\n\tint n = sizes[i];\n\tString j = input[i];\n\tint[] list = new int[2501];\n\tfor(int i2 = 0;i2<2501;i2++){\n\t    list[i2] = 0;\n\t}\n\tString[] lst = j.split(\" \");\n\tint l = lst.length;\n\tfor(int i1 = 0;i1<l;i1++){\n\t    int temp = Integer.parseInt(lst[i1]);\n\t    list[temp]++;\n\t}\n\tint[] ans = new int[n];\n\tint count = 0;\n\tint i3 = 0;\n\twhile(count<n){\n\t    i3++;\n\t    if(list[i3]%2==1){\n\t\tans[count] = i3;\n\t\tcount++;\n\t    }\n\t}\n\tArrays.sort(ans);\n\tString res = \"\";\n\tfor(int d = 0;d<n-1;d++){\n\t    res+=ans[d]+\" \";\n\t}\n\tres+=ans[n-1];\n\tString output = res;\n\tout.println(\"Case #\"+(i+1)+\": \"+output);\n    }\n    out.close();\n    }\n}\n", "idx": "6311"}
{"func": "package googlejam6.p312;\nimport java.util.Scanner;\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\n\r\npublic class Height {\r\n\t\t\r\n\t\t\r\n\tpublic static void main(String[] args){\r\n\t\t\r\n\t\t\r\n\t\t Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t\t \r\n\t\t int problemcount  = scan.nextInt();\r\n\t\t int i = 1;\r\n\t\t \r\n\t\t\r\n\t\t \r\n\t\t while(i <= problemcount)\r\n\t\t {\r\n\r\n\t\t\tint count = scan.nextInt() ;\r\n\t\t\tint countmen = count;\r\n\t\t\t\r\n\t\t\tcount *= count;\r\n\t\t\t\r\n\t\t\tcount *= 2;\r\n\t\t\tcount -= countmen;\r\n\t\t\t\r\n\t\t\tint[] heights  = new int[2501];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\twhile(count > 0){\r\n\t\t\t\t\r\n\t\t\t\tint height = scan.nextInt();\r\n\t\t\t\t\r\n\t\t\t\theights[height]++;\r\n\t\t\t\t\r\n\t\t\t\tcount--;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint[] missing = new int[countmen];\r\n\t\t\tint index = 0;\r\n\t\t\t\r\n\t\t\tfor(int k = 0; k<heights.length;k++){\r\n\t\t\t\tif(heights[k] % 2 == 1){\r\n\t\t\t\t\tmissing[index] = k;\r\n\t\t\t\t\tindex++;\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tArrays.sort(missing);\r\n\t\t\t\r\n\t\t\tString aux = \"\";\r\n\t\t\t\r\n\t\t\tfor(Integer k : missing){\r\n\t\t\t\t\r\n\t\t\t\taux += k + \" \";\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\taux.trim();\r\n\t\t\t\r\n\t\t\t System.out.println(\"Case #\" + i + \": \" + aux);\r\n\t\t\t \r\n\t\t\t i++;\r\n\t\t }\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "6312"}
{"func": "package googlejam6.p313;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class RankAndFile {\r\n\tpublic static void main(String args[]){\r\n\r\n\t\tString path = \"round1A/RankAndFile/\";\r\n\t\tString filename = path + \"B-large.in\";\r\n\t\tString out = path + \"result_large.txt\";\r\n\t\tFile file = new File(filename);\r\n\t\tFile outfile = new File(out);\r\n\r\n\t\tBufferedReader br = null;\r\n\t\tPrintWriter pw = null;\r\n\r\n\t\ttry {\r\n\t\t\tbr = new BufferedReader(new FileReader(file));\r\n\t\t\tpw = new PrintWriter(new BufferedWriter(new FileWriter(outfile)));\r\n\r\n\t\t\tint testCase = Integer.parseInt(br.readLine());\r\n\r\n\t\t\tfor(int t=1;t<=testCase;t++){\r\n\t\t\t\tSystem.out.println(\"test \"+ t);\r\n\r\n\t\t\t\tint[] count = new int[2501];\r\n\t\t\t\tArrays.fill(count, 0);\r\n\r\n\t\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\t\tfor(int i=0;i<2*N-1;i++){\r\n\t\t\t\t\tString[] numbers = br.readLine().split(\" \");\r\n\t\t\t\t\tfor(String tmp : numbers){\r\n\t\t\t\t\t\tint number = Integer.parseInt(tmp);\r\n\t\t\t\t\t\tcount[number]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tList<Integer> list = new ArrayList<Integer>();\r\n\r\n\t\t\t\tfor(int i=1;i<=2500;i++){\r\n\t\t\t\t\tif(count[i]==0){\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(count[i] % 2 != 0){\r\n\t\t\t\t\t\tlist.add(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tCollections.sort(list);\r\n\r\n\t\t\t\tString result = \"\";\r\n\t\t\t\tfor(int i=0;i<N;i++){\r\n\t\t\t\t\tresult += list.get(i) + \" \";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpw.println(\"Case #\"+ t + \": \" + result);\r\n\t\t\t}\r\n\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tSystem.exit(1);\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tSystem.exit(1);\r\n\t\t} finally {\r\n\t\t\tif(br != null){\r\n\t\t\t\ttry {\r\n\t\t\t\t\tbr.close();\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\tSystem.exit(1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(pw != null){\r\n\t\t\t\tpw.close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6313"}
{"func": "package googlejam6.p314;\n\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.stream.Collectors;\n\npublic class RankAndFile {\n    public static void main(String[] args) throws IOException {\n        Scanner sc = new Scanner(System.in);\n        int numTests = sc.nextInt();\n        for (int numTest = 0; numTest < numTests; numTest++) {\n            int numHeights = sc.nextInt();\n\t\t\tMap<Integer, Integer> heightToCount = new HashMap<>();\n\t\t\tfor (int numList = 0; numList < (2 * numHeights - 1); numList++) {\n\t\t\t    for (int numHeight = 0; numHeight < numHeights; numHeight++) {\n\t\t\t        int height = sc.nextInt();\n\t\t\t        if (!heightToCount.containsKey(height)) {\n\t\t\t            heightToCount.put(height, 1);\n\t\t\t        } else {\n\t\t\t            heightToCount.put(height, heightToCount.get(height) + 1);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\t//System.out.println(heightToCount);\n\t\t\tList<Integer> missingRowOrColumn = heightToCount.entrySet().stream()\n\t\t\t        .filter(entry -> entry.getValue() % 2 == 1)\n\t\t\t        .map(Entry::getKey)\n\t\t\t        .sorted()\n\t\t\t        .collect(Collectors.toList());\n\t\t\tStringBuilder out = new StringBuilder();\n\t\t\tfor (int integer : missingRowOrColumn) {\n\t\t\t    out.append(integer).append(\" \");\n\t\t\t}\n            String answer = out.toString();\n            System.out.format(\"Case #%d: %s%n\", numTest + 1, answer);\n        }\n    }\n}\n", "idx": "6314"}
{"func": "package googlejam6.p315;\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(\n\t\t\t\tSystem.in)));\n\t\tint testCases = in.nextInt();\n\t\tfor (int i = 1; i <= testCases; i++) {\n\t\t\tint N = in.nextInt();\n\n\t\t\tMap<Integer, Boolean> temp = new HashMap<Integer, Boolean>();\n\t\t\tfor (int j = 1; j <= (2 * N - 1); j++) {\n\t\t\t\tfor (int k = 1; k <= N; k++) {\n\t\t\t\t\tint soldHeight = in.nextInt();\n\t\t\t\t\tif (temp.containsKey(soldHeight)) {\n\t\t\t\t\t\ttemp.remove(soldHeight);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttemp.put(soldHeight, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tList<Integer> sortedKeys = new ArrayList<Integer>(temp.keySet());\n\t\t\tCollections.sort(sortedKeys);\n\t\t\t\n\t\t\tString missingRowOrCol = \"\";\n\n\t\t\tfor (int k = 0; k < sortedKeys.size();k++) {\n\t\t\t\tmissingRowOrCol += \" \" + sortedKeys.get(k);\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Case #\" + i + \":\" + missingRowOrCol);\n\t\t}\n\t}\n}", "idx": "6315"}
{"func": "package googlejam6.p317;\n\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\nimport java.util.TreeSet;\r\n\r\npublic class B_RankAndFile {\r\n\r\n\tprivate final String missingLine;\r\n\r\n\tpublic B_RankAndFile(final int N, int[][] lines) {\r\n\t\tsuper();\r\n\t\tSet<Integer> oddNumbers = new TreeSet<>();\r\n\t\tfor (int j = 0; j < 2 * N - 1; j++) {\r\n\t\t\tfor (int k = 0; k < N; k++) {\r\n\t\t\t\tif (oddNumbers.contains(lines[j][k])) {\r\n\t\t\t\t\toddNumbers.remove(lines[j][k]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\toddNumbers.add(lines[j][k]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tStringBuilder missingLineBuilder = new StringBuilder();\r\n\t\tfor (Integer n : oddNumbers) {\r\n\t\t\tmissingLineBuilder.append(String.format(\"%d \", n.intValue()));\r\n\t\t}\r\n\t\tthis.missingLine = missingLineBuilder.substring(0, missingLineBuilder.length() - 1);\r\n\t}\r\n\r\n\tpublic static void main(final String[] args) {\r\n\t\ttry (final Scanner sc = new Scanner(args.length > 0 ? new FileInputStream(args[0]) : System.in);\r\n\t\t\t\tfinal PrintStream pr = args.length > 1 ? new PrintStream(args[1]) : System.out;) {\r\n\t\t\tfinal int nb_test = sc.nextInt();\r\n\t\t\tfor (int i = 1; i <= nb_test; i++) {\r\n\t\t\t\tfinal int nb = sc.nextInt();\r\n\t\t\t\tfinal int[][] matrix = new int[2 * nb - 1][nb];\r\n\t\t\t\tfor (int j = 0; j < 2 * nb - 1; j++) {\r\n\t\t\t\t\tfor (int k = 0; k < nb; k++) {\r\n\t\t\t\t\t\tmatrix[j][k] = sc.nextInt();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tB_RankAndFile test = new B_RankAndFile(nb, matrix);\r\n\t\t\t\tStringBuilder output = new StringBuilder(\r\n\t\t\t\t\t\tString.format(\"Case #%d: %s\", i, test.missingLine));\r\n\t\t\t\tSystem.out.println(output.toString());\r\n\t\t\t}\r\n\t\t} catch (final FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6317"}
{"func": "package googlejam6.p318;\n/**\n * File Name: Round1A2016B.java\n * Package Name: yz.google.codejam\n * Project Name: Algorithm\n * Purpose:\n * Created Time: 8:10:09 PM Apr 15, 2016\n * Author: Yaolin Zhang\n */\n\nimport java.util.*;\n\n/**\n * @author Yaolin Zhang\n * @time 8:10:09 PM Apr 15, 2016\n */\npublic class Round1A2016B {\n\tpublic static void main(String args[]){\n\t\tScanner scan = new Scanner(System.in);\n\t\tint T = scan.nextInt();\n\t\tfor(int t = 1; t <= T; ++t){\n\t\t\tint N = scan.nextInt();\n\t\t\tscan.nextLine();\n\t\t\tHashMap<Integer, Integer> map = new HashMap<>();\n\t\t\tfor(int i = 0; i < 2 * N - 1; ++i){\n\t\t\t\tString[] str = scan.nextLine().split(\" \");\n\t\t\t\t//System.out.println(str);\n\t\t\t\tfor(String s : str){\n\t\t\t\t\tint cur = Integer.parseInt(s);\n\t\t\t\t\tif(map.containsKey(cur)){\n\t\t\t\t\t\tmap.put(cur, map.get(cur) + 1);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tmap.put(cur, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[] result = new int[N];\n\t\t\tint index = 0;\n\t\t\tfor(Map.Entry<Integer, Integer> e : map.entrySet()){\n\t\t\t\t//System.out.println(e.getKey() + \" \" + e.getValue());\n\t\t\t\tif(e.getValue() % 2 != 0){\n\t\t\t\t\tresult[index++] = e.getKey();\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrays.sort(result);\n\t\t\tString s = \"\";\n\t\t\tfor(int i = 0; i < N - 1; ++i){\n\t\t\t\ts += result[i] + \" \";\n\t\t\t}\n\t\t\ts += result[N - 1];\n\t\t\tSystem.out.printf(\"Case #%d: %s\\n\", t, s);\n\t\t}\n\t\tscan.close();\n\t}\n}\n", "idx": "6318"}
{"func": "package googlejam6.p321;\n\n\nimport java.util.*;\npublic class Solution {\n\tpublic static void main(String[] args){\n\t\t\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\tfor(int i = 1; i <= T; i++){\n\t\t\t\n\t\t\tint numR = sc.nextInt();\n\t\t\t//number of lines\n\t\t\tint[] arr = new int[2505];\n\t\t\tfor(int j = 0; j < numR*2-1; j++){\n\t\t\t\t//number of integers\n\t\t\t\tfor(int k = 0; k < numR; k++){\n\t\t\t\t\tint temp = sc.nextInt();\n\t\t\t\t\t//System.out.println(\"Here\"+ temp);\n\t\t\t\t\tarr[temp]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrayList<Integer> list = new ArrayList<Integer>();\n\t\t\tfor(int x = 0; x < arr.length; x++){\n\t\t\t\tif( arr[x] % 2 == 1){\n\t\t\t\t\tlist.add(x);\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(list);\n\t\t\tSystem.out.print(\"Case #\"+i+\": \");\n\t\t\tint p = 0;\n\t\t\tfor( p = 0; p < list.size()-1; p++){\n\t\t\t\tSystem.out.print(list.get(p)+\" \");\n\t\t\t}\n\t\t\tSystem.out.println(list.get(p));\n\t\t}\n\t\t\n\t\t\n\t}\n}\n", "idx": "6321"}
{"func": "package googlejam6.p324;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class RankAndFile {\r\n\r\n\tstatic String smallIn = \"small_input1AB.txt\";\r\n\tstatic String largeIn = \"large_input1AB.txt\";\r\n\tstatic String smallOut = \"small_output1AB.txt\";\r\n\tstatic String largeOut = \"large_output1AB.txt\";\r\n\tpublic static void main(String[] args) {\r\n\t\tPath p = Paths.get(largeIn);\r\n\t\ttry {\r\n\t\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(Files.newInputStream(p))));\r\n\t\t\tint test = sc.nextInt();\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\tfor(int t = 1; t <= test; t++) {\r\n\t\t\t\tint N = sc.nextInt();\r\n\t\t\t\tint nums = N * N + N * (N - 1);\r\n\t\t\t\tHashMap<Integer, Integer> map = new HashMap();\r\n\t\t\t\tfor(int i = 0; i < nums; i++) {\r\n\t\t\t\t\tint num = sc.nextInt();\r\n\t\t\t\t\tif(!map.containsKey(num)) {\r\n\t\t\t\t\t\tmap.put(num, 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmap.put(num, map.get(num) + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tArrayList<Integer> ret = new ArrayList();\r\n\t\t\t\tfor(Integer i : map.keySet()) {\r\n\t\t\t\t\tif(map.get(i)%2 == 1) {\r\n\t\t\t\t\t\tret.add(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tCollections.sort(ret);\r\n\t\t\t\tsb.append(\"Case #\" + t +\": \");\r\n\t\t\t\tfor(int i = 0; i < ret.size(); i++) {\r\n\t\t\t\t\tsb.append(ret.get(i));\r\n\t\t\t\t\tif(i != ret.size() - 1) {\r\n\t\t\t\t\t\tsb.append(\" \");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(t != test) {\r\n\t\t\t\t\tsb.append(\"\\n\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tPath p1 = Paths.get(largeOut);\n\t\t\ttry {\n\t\t\t\tFiles.write(p1, sb.toString().getBytes());\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\r\n\t\t\tsc.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6324"}
{"func": "package googlejam6.p326;\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class BRank_File {\r\n\tstatic Scanner reader;\r\n\tstatic PrintWriter outWrite;\r\n\tstatic int n,res[],m,a[][];\r\n\tstatic int c[]=new int[3000];\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\treader=new Scanner(new File(\"B-large.in\"));\r\n\t\toutWrite=new PrintWriter(new File(\"B-output.txt\"));\r\n\t\tint nTest=reader.nextInt();\r\n\t\tint i,j;\r\n\t\tfor (int test=1;test<=nTest;test++){\r\n\t\t\tn=reader.nextInt();\r\n\t\t\tm=(2*n)-1;\r\n\t\t\ta=new int[m][n];\r\n\t\t\tfor (i=0;i<m;i++){\r\n\t\t\t\tfor (j=0;j<n;j++) \r\n\t\t\t\t\ta[i][j]=reader.nextInt();\r\n\t\t\t}\r\n\t\t\tif (test>1) outWrite.println();\r\n\t\t\tint i1,j1;\n\t\t\tArrays.fill(c, 0);\n\t\t\tres=new int[n];\n\t\t\tfor (i1=0;i1<m;i1++)for (j1=0;j1<n;j1++)\n\t\t\t\tc[a[i1][j1]]++;\n\t\t\tj1=0;\n\t\t\tfor (i1=0;i1<c.length;i1++){\n\t\t\t\tif ((c[i1]%2)==1){\n\t\t\t\t\tres[j1]=i1; j1++;\n\t\t\t\t}\n\t\t\t}\r\n\t\t\toutWrite.print(\"Case #\" + test+\": \");\r\n\t\t\tfor (j=0;j<res.length;j++){\r\n\t\t\t\tif (j>0) outWrite.print(\" \");\r\n\t\t\t\toutWrite.print(res[j]);\r\n\t\t\t}\r\n\t\t}\r\n\t\toutWrite.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "6326"}
{"func": "package googlejam6.p329;\nimport java.util.*;\nimport java.io.*;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\n    for (int i = 1; i <= t; ++i) {\n      HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n      int n = in.nextInt();\n      // 2*n - 1\n      for(int j = 0; j < 2*n-1; j++) {\n          // n\n          for(int k = 0; k < n; k++) {\n              int current = in.nextInt();\n              if(!map.containsKey(current)) {\n                  map.put(current, 1);\n              }else{\n                  int temp = map.get(current);\n                  map.put(current, temp+1);\n              }\n          }\n      }\n      // traver map\n      ArrayList<Integer> list = new ArrayList<Integer>();\n      for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n          int val = entry.getValue();\n          int key = entry.getKey();\n          if(val%2 != 0)\n              list.add(key);\n      }\n      Collections.sort(list);\n\n      System.out.print(\"Case #\" + i + \": \");\n      for(int z = 0; z < list.size(); z++){\n          if(z != list.size()-1)\n              System.out.print(list.get(z) + \" \");\n          else\n              System.out.print(list.get(z)+ \"\\n\");\n      }\n    }\n  }\n}\n", "idx": "6329"}
{"func": "package googlejam6.p330;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\tstatic Scanner scan;\r\n\tstatic PrintWriter writer;\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tFile file = new File(\"D://B-large.in\");\r\n\t\tFile out = new File(\"D://outBL.txt\");\r\n\t\ttry {\r\n\t\t\tscan = new Scanner(file);\r\n\t\t\twriter = new PrintWriter(out);\r\n\t\t\tint t = scan.nextInt();\r\n\t\t\tfor (int i = 1; i <= t; i++) {\r\n\t\t\t\twriter.print(\"Case #\" + i + \": \");\r\n\t\t\t\tint n = scan.nextInt();\r\n\t\t\t\tMap<Integer, Integer>  map = new HashMap<Integer, Integer>();\r\n\t\t\t\tfor(int j=0; j<2*n-1; j++) {\r\n\t\t\t\t\tfor(int k=0; k<n; k++) {\r\n\t\t\t\t\t\tint a = scan.nextInt();\r\n\t\t\t\t\t\tInteger m = map.get(a);\r\n\t\t\t\t\t\tif(m == null) {\r\n\t\t\t\t\t\t\tm = 1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tm++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tmap.put(a, m);\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\tList<Integer> ret = new ArrayList<Integer>();\r\n\t\t\t\tfor(int k : map.keySet()) {\r\n\t\t\t\t\tif(map.get(k) % 2 == 1) {\r\n\t\t\t\t\t\tret.add(k);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tCollections.sort(ret);\r\n\t\t\t\tfor(int j=0; j<ret.size(); j++) {\r\n\t\t\t\t\twriter.print(ret.get(j)+\" \");\r\n\t\t\t\t}\r\n\t\t\t\twriter.println();\r\n\t\t\t\t// solve go here\r\n\t\t\t}\r\n\t\t} catch (Exception ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t} finally {\r\n\t\t\tscan.close();\r\n\t\t\twriter.close();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6330"}
{"func": "package googlejam6.p332;\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class RankAndFile {\n\n  public static void main(String args[]) {\n    Scanner in = new Scanner(System.in);\n    int T = Integer.parseInt(in.nextLine());\n\n    for (int i = 1; i <= T; i++) {\n      Set<Integer> odd = new HashSet<>();\n      int N = Integer.parseInt(in.nextLine());\n      for (int j = 0; j < 2 * N - 1; j++) {\n        for (int k = 0; k < N; k++) {\n          int x = in.nextInt();\n          if (odd.contains(x)) {\n            odd.remove(x);\n          } else {\n            odd.add(x);\n          }\n        }\n\n        in.nextLine();\n      }\n\n      StringBuilder sb = new StringBuilder();\n      for (int x : odd.stream().sorted().collect(Collectors.toList())) {\n        sb.append(x);\n        sb.append(\" \");\n      }\n\n      sb.deleteCharAt(sb.length() - 1);\n      System.out.printf(\"Case #%d: %s%n\", i, sb.toString());\n    }\n\n    in.close();\n  }\n}\n", "idx": "6332"}
{"func": "package googlejam6.p333;\n\n\nimport java.util.*;\n\npublic class RankAndFile {\n\tpublic static void main(String[] args){\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint testcases = Integer.parseInt(scanner.nextLine());\n\t\tfor(int i=1; i<=testcases; i++){\n\t\t\tint N = Integer.parseInt(scanner.nextLine());\n\t\t\tList<List<Integer>> matrix = new ArrayList<List<Integer>>();\n\t\t\t\n\t\t\tfor(int j=0; j<2*N-1; j++){\n\t\t\t\tString[] arr = scanner.nextLine().split(\" \");\n\t\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\t\tfor(int k=0; k<arr.length; k++){\n\t\t\t\t\tlist.add(Integer.parseInt(arr[k]));\n\t\t\t\t}\n\t\t\t\tmatrix.add(list);\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.print(String.format(\"Case #%d: \", i));\n\t\t\tSet<Integer> set = new HashSet<Integer>();\n\t\t\t\n\t\t\tfor(int i1=0; i1<matrix.size(); i1++){\n\t\t\t\tfor(int j=0; j<matrix.get(i1).size(); j++){\n\t\t\t\t\tint num = matrix.get(i1).get(j);\n\t\t\t\t\tif(set.contains(num)){\n\t\t\t\t\t\tset.remove(num);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tset.add(num);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint[] arr = new int[N];\n\t\t\tint index = 0;\n\t\t\tfor(int num : set){\n\t\t\t\tarr[index++] = num;\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(arr);\n\t\t\t\n\t\t\tfor(int i2=0; i2<arr.length; i2++){\n\t\t\t\tSystem.out.print(arr[i2] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tscanner.close();\n\t}\n\t\n}\n", "idx": "6333"}
{"func": "package googlejam6.p336;\n\r\nimport java.util.*;\r\n\r\n/**\r\n * Created by akshitsharma on 4/16/2016.\r\n */\r\npublic class Main {\r\n\r\n\r\n\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        int trys, cases;\r\n        trys = scanner.nextInt();\r\n        cases = 0;\r\n        while (cases < trys) {\r\n            cases++;\r\n            int n = scanner.nextInt();\r\n            //int [][] solders = new int[2*n-1][n];\r\n\r\n            ArrayList input = new ArrayList<>();\r\n            Integer temp;\r\n            for(int i=0;i<2*n-1;i++)\r\n                for(int j=0;j<n;j++) {\r\n                    temp = scanner.nextInt();\r\n                    if(!input.contains(temp)){\r\n                        input.add(temp);\r\n                    }else{\r\n                        input.remove(temp);\r\n                    }\r\n                }\r\n\r\n            Collections.sort(input);\r\n\r\n            Iterator<Integer> values = input.iterator();\r\n\r\n            System.out.print(\"Case #\"+cases+\":\");\r\n\r\n            while (values.hasNext()){\r\n                System.out.print(\" \"+values.next());\r\n            }\r\n            System.out.println();\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n", "idx": "6336"}
{"func": "package googlejam6.p337;\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author bartosz\n */\npublic class B {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        for(int i=0;i<t;i++){\n            int n = in.nextInt();\n            int[] ar = new int[2501];\n            for(int j=0;j<2*n-1;j++){\n                for(int k=0;k<n;k++)\n                    ar[in.nextInt()]++;\n            }\n            int[] ans = new int[n];\n            int count=0;\n            for(int j=1;j<2501;j++){\n                //System.out.println(ar[j]);\n                if(ar[j]!=0 && ar[j]%2!=0){\n                    ans[count]=j;\n                    count++;\n                }\n            }\n            Arrays.sort(ans);\n            System.out.print(\"Case #\"+(i+1)+\": \");\n            for(int j=0;j<n;j++)\n                System.out.print(ans[j]+\" \");\n            System.out.println();\n        \n        }\n        \n    }\n    \n}\n", "idx": "6337"}
{"func": "package googlejam6.p338;\n\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\n\npublic class Rank {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\t// TODO Auto-generated method stub\n\t\tString inputFile = \"B-large1.in\";\n\t\tBufferedInputStream bs = new BufferedInputStream(new FileInputStream(inputFile));\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(bs, StandardCharsets.UTF_8));\n\t\tint t = Integer.parseInt(r.readLine());\n\t\tint count=1;\n\t\tString outputFile = \"B-large_output1.txt\";\n\t\tPrintWriter p = new PrintWriter(outputFile);\n\t\t\n\t\twhile(t > 0) {\n\t\t\tint n = Integer.parseInt(r.readLine());\n\t\t\tMap<Integer,Integer> countMap = new HashMap<>();\n\t\t\tfor(int i=0;i<2*n-1;i++) {\n\t\t\t\t\n\t\t\t\tString str[] = r.readLine().split(\" \");\n\t\t\t\tfor(int j=0;j<str.length;j++) {\n\t\t\t\t\tint num = Integer.parseInt(str[j]);\n\t\t\t\t\tif(countMap.get(num) == null) \n\t\t\t\t\t\tcountMap.put(num, 0);\n\t\t\t\t\tcountMap.put(num, countMap.get(num)+1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tList<Integer> l = new ArrayList<>();\n\t\t\tPriorityQueue<Integer> q = new PriorityQueue<>();\n\t\t\tfor(Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n\t\t\t\tif(entry.getValue()%2 == 1)\n\t\t\t\t\tl.add(entry.getKey());\n\t\t\t}\n\t\t\tCollections.sort(l);\n\t\t\tString ans = \"\";\n\t\t\tfor(Integer num : l) {\n\t\t\t\tans+= num + \" \";\n\t\t\t}\n\t\t\tp.write(\"Case #\"+count+\": \" + ans.substring(0,ans.length()-1)+\"\\n\");\n\t\t\tt--;\n\t\t\tcount++;\n\t\t}\n\t\tp.close();\n\t\tr.close();\n\t}\n\n}\n", "idx": "6338"}
{"func": "package googlejam6.p339;\nimport java.io.*;\nimport java.util.*;\n\npublic class RankAndFile {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner sc = new Scanner(new FileReader(args[0]));\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(args[0]+\".out.txt\"));\n\n\t\tint numOfCase = sc.nextInt();\n\t\tList<Character> list = null;\n\t\tStringBuilder sb = new StringBuilder();\n\n\t\tfor (int i = 0; i < numOfCase; i++) {\n\t\t\tint size = sc.nextInt();\n\t\t\tint numOfNum = (2 * size - 1) * size;\n\t\t\tTreeSet<Integer> set = new TreeSet<Integer>();\n\n\t\t\tfor (int j = 0; j < numOfNum; j++) {\n\t\t\t\tint height = sc.nextInt();\n\t\t\t\tif (set.contains(height)) set.remove(height);\n\t\t\t\telse set.add(height);\n\t\t\t}\n\t\t\tsb.setLength(0);\n\t\t\twhile (!set.isEmpty()) {\n\t\t\t\tsb.append(' ');\n\t\t\t\tsb.append(set.pollFirst());\n\t\t\t}\n\t\t\tpw.println(\"Case #\" + (i + 1) + \":\" + sb.toString());\n\t\t}\n\n\t\tpw.flush();\n\t\tpw.close();\n\t\tsc.close();\n\t}\n}", "idx": "6339"}
{"func": "package googlejam6.p340;\n\n\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Scanner;\n\n/**\n * Created by popcorny on 4/16/16.\n */\npublic class RandAndFile {\n\n    private final int[][] lists;\n    private final int n;\n\n    public RandAndFile(int n, int[][] lists) {\n        this.lists = lists;\n        this.n = n;\n    }\n\n\n    public static void main(String[] args) throws Exception {\n        Scanner scanner;\n        PrintWriter writer;\n        String quizname = \"randandfile\";\n        String testname = \"large\";\n        String input   = String.format(\"quiz/%s/%s.in\", quizname, testname);\n        String output  = String.format(\"quiz/%s/%s.out\", quizname, testname);\n\n        if (new File(input).exists()) {\n            scanner = new Scanner(new File(input));\n            if (testname.equals(\"sample\")) {\n                writer = new PrintWriter(System.out);\n            } else {\n                writer = new PrintWriter(output);\n            }\n        } else {\n            scanner = new Scanner(System.in);\n            writer = new PrintWriter(System.out);\n        }\n\n\n        int t = scanner.nextInt();\n\n        for (int i = 0; i < t; i++) {\n            int n = scanner.nextInt();\n\n            int[][] lists = new int[2*n-1][n];\n            for (int j=0; j<2*n-1; j++) {\n\n                for (int k=0; k<n; k++) {\n                    int h = scanner.nextInt();\n                    lists[j][k] = h;\n                }\n            }\n\t\t\tRandAndFile r = new RandAndFile(n, lists);\n\t\t\tHashMap<Integer, Integer> map = new HashMap<>();\n\t\t\t\n\t\t\tfor (int i1=0; i1<r.lists.length; i1++) {\n\t\t\t    for (int j=0; j<r.n; j++) {\n\t\t\t        int h = r.lists[i1][j];\n\t\t\t        if (map.containsKey(h)) {\n\t\t\t            map.put(h, map.get(h) + 1);\n\t\t\t        } else {\n\t\t\t            map.put(h, 1);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tint[] result = new int[r.n];\n\t\t\tint top=0;\n\t\t\tfor (int key: map.keySet()) {\n\t\t\t    if (map.get(key) % 2 == 1) {\n\t\t\t        result[top++] = key;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(result);\n\n            int[] list = result;\n            writer.printf(\"Case #%d: \", i + 1);\n            for(int l=0;l<n;l++) {\n                writer.printf(\"%d \", list[l]);\n            }\n            writer.println();\n        }\n        writer.flush();\n    }\n}\n", "idx": "6340"}
{"func": "package googlejam6.p343;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\n\npublic class Soldiers {\n\tpublic static void main(String [] args)\n\t{\t\t\n\n\t\t// Input\n\n\t\tFile file = new File(\"soldiers/large.txt\");\n\n\t\tString[] problem = null;\n\t\tint size = 0;\n\t\tArrayList<Integer>[] sol = null;\n\t\ttry {\n\n\t\t\tScanner sc = new Scanner(file);\n\n\t\t\tsize = sc.nextInt();\n\n\t\t\tsc.nextLine();\n\n\t\t\tproblem = new String[size];\n\n\t\t\tsol =  new ArrayList[size];\n\t\t\t\n\t\t\tfor (int i=0; i<size; i++) {\n\t\t\t\tsol[i] = new ArrayList<Integer>();\n\t\t\t\tint N = sc.nextInt();\n\t\t\t\tint[] digits = new int[3000];\n\t\t\t\tfor(int j=0; j<N*(2*N-1); j++) {\n\t\t\t\t\tdigits[sc.nextInt()]++;\n\t\t\t\t}\n\t\t\t\tfor(int j=0; j<3000; j++) {\n\t\t\t\t\tif(digits[j]%2==1) {\n\t\t\t\t\t\tsol[i].add(j);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tCollections.sort(sol[i]);\n\t\t\t}\n\t\t\tsc.close();\n\t\t} \n\t\tcatch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\n\t\t// Output\n\n\t\tPrintWriter writer = null;\n\t\ttry {\n\t\t\twriter = new PrintWriter(\"sol.txt\", \"UTF-8\");\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tfor (int i=0; i<size; i++) {\n\n\t\t\twriter.print(\"Case #\" + (i+1) + \":\");\n\t\t\tlong index = i+1;\n\t\t\tSystem.out.print(\"Case #\" + index + \":\");\n\n\t\t\tfor(int j : sol[i]) {\n\t\t\t\twriter.print(\" \" + j);\n\t\t\t\tSystem.out.print(\" \" + j);\n\t\t\t}\n\t\t\twriter.println(\"\");\n\t\t\tSystem.out.println(\"\");\n\t\t}\n\t\twriter.close();\n\n\t}\n}\n", "idx": "6343"}
{"func": "package googlejam6.p344;\nimport java.util.Scanner;\n\n\npublic class Jam2016_1AB {\n\tpublic static void main(String[] args) {\n\t\tScanner\tscanIn\t= new Scanner(System.in);\n\t\t\n\t\tint T\t= scanIn.nextInt();\n\t\t\n\t\tfor(int i=0; i<T; ++i) {\n\t\t\tJam2016_1AB\tinst\t= new Jam2016_1AB();\n\t\t\tint\t\tn\t\t= scanIn.nextInt();\n\t\t\tint N = 2*n-1;\n\n\t\t\tint[][]\t\td\t= new int[N][n];\n\t\t\t\n\t\t\tfor(int j=0; j<N; ++j) {\n\t\t\t\tfor(int k=0; k<n; ++k) {\n\t\t\t\t\td[j][k]\t= scanIn.nextInt();\n\t\t\t\t}\n\t\t\t}\n\t\t\tint\tn1 = d[0].length;\n\t\t\tint[] h = new int[2501];\n\t\t\t\n\t\t\tfor(int i1=0; i1<d.length; ++i1) {\n\t\t\t\tfor(int j1=0; j1<n1; ++j1) {\n\t\t\t\t\th[d[i1][j1]]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint idx = 0;\n\t\t\tint[] ret1 = new int[n1];\n\t\t\tfor(int i2=0; i2<2501; ++i2) {\n\t\t\t\tint dd = h[i2];\n\t\t\t\tif(dd%2 != 0)\n\t\t\t\t\tret1[idx++] = i2;\n\t\t\t}\n\t\t\t\n\t\t\tint[] ret = ret1;\n\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \":\");\n\t\t\tfor(int j: ret)\n\t\t\t\tSystem.out.print(\" \" + j);\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t\tscanIn.close();\n\t}\n\n}\n", "idx": "6344"}
{"func": "package googlejam6.p348;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Hashtable;\r\nimport java.util.Scanner;\r\n\r\n/** https://code.google.com/codejam/contest/4304486/dashboard#s=p1 */\r\n\r\npublic class RankFile {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tif(args.length == 0) {\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"No arguments provided\");\r\n\t\t\treturn;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tFile file = new File(args[0]);\r\n\t\t\tScanner input = new Scanner(file);\r\n\t\t\tFileWriter fileOut = new FileWriter(\"output.txt\");\r\n\t\t\tBufferedWriter writer = new BufferedWriter(fileOut);\r\n\t\t\t\t\t\t\r\n\t\t\t//Simple. Find the numbers which appear an odd number of times in the given lists then order them.\r\n\t\t\t\r\n\t\t\tint numTests = input.nextInt();\r\n\t\t\t\r\n\t\t\tint i;\r\n\t\t\t\r\n\t\t\tfor(i = 0; i < numTests; i++) {\r\n\t\t\t\t\r\n\t\t\t\tint lineLength = input.nextInt();\r\n\t\t\t\t\r\n\t\t\t\t//Read in the 2*n - 1 lines. Storing the heights in a hashtable\r\n\t\t\t\t//key =  height, value =  num occurances\r\n\t\t\t\tHashtable<Integer, Integer> heights = new Hashtable<Integer, Integer>();\r\n\t\t\t\tint j;\r\n\t\t\t\t\r\n\t\t\t\tfor(j = 0; j < (2*lineLength - 1)*lineLength; j++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tInteger nextHeight = input.nextInt();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(heights.containsKey(nextHeight)) {\r\n\t\t\t\t\t\theights.put(nextHeight, new Integer(heights.get(nextHeight)+1));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\theights.put(nextHeight, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Put all odd occurance heights in an arrayList\r\n\t\t\t\tArrayList<Integer> oddHeights = new ArrayList<Integer>();\r\n\t\t\t\t\r\n\t\t\t\tfor(Integer height : heights.keySet()) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(heights.get(height)%2 == 1) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\toddHeights.add(height);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Sort the arrayList\r\n\t\t\t\tCollections.sort(oddHeights);\r\n\t\t\t\t\r\n\t\t\t\t//Print it\r\n\t\t\t\twriter.write(\"Case #\" + (i+1) +  \":\");\r\n\t\t\t\tfor(j = 0; j < oddHeights.size(); j++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\twriter.write(\" \" + oddHeights.get(j));\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\twriter.write(\"\\n\");\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twriter.close();\r\n\t\t\tfileOut.close();\r\n\t\t\tinput.close();\r\n\t\t\t\r\n\t\t} catch(FileNotFoundException e) {\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Error reading input file\");\r\n\t\t\t\r\n\t\t} catch(IOException e) {\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Error writing output\");\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "6348"}
{"func": "package googlejam6.p350;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class Jam5 {\n\n\t\n   \n  public static void main(String[] args){\n\t\n\t\n\t\n\tScanner in=new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\n\tint t=in.nextInt();\n\tin.nextLine();\n\t\n\tfor(int k=1; k<=t;k++){\n\t\tSystem.out.print(\"Case #\"+ k + \": \");\n\t\tint[] height=new int[2501];\n\t\tfor(int temp=0;temp<=2500;temp++){\n\t\t\theight[temp]=0;\n\t\t}\n\t\t\n\t\tint n=in.nextInt();//size\n\t\tin.nextLine();\n\t\t//String n = in.nextLine();\n\t    for(int j=1;j<=2*n-1;j++){\n\t    \tfor(int x=1;x<=n;x++){\n\t    \t\tint h=in.nextInt();//hright\n\t    \t\theight[h]++;\n\t    \t}\n\t    \tin.nextLine();\n\t    }\n\t    \n\t    \n\t    for(int temp=0;temp<=2500;temp++){\n\t\t\tif(height[temp]%2==1){\n\t\t\t\tSystem.out.print(temp+\" \");\n\t\t\t}\n\t\t}\n\t    \n\t    System.out.println();\n\t\t//String ans=calculate(n);\n\t\t\n        \n\t}\n    \n\tin.close();\n  }\n  \n \n}\n", "idx": "6350"}
{"func": "package googlejam6.p351;\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class B {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tArrayList<Integer> hash = new ArrayList<Integer>();\r\n\t\tfor(int aux=0;aux<2501;aux++){\r\n\t\t\thash.add(0);\r\n\t\t}\r\n\t\tint numCases = input.nextInt();\r\n\t\tfor(int n =0;n<numCases;n++){\r\n\t\t\t\r\n\t\t\tInteger num = input.nextInt();\r\n\t\t\t//RESET\r\n\t\t\tfor(int aux=0;aux<2501;aux++){\r\n\t\t\t\thash.set(aux,0);\r\n\t\t\t}\r\n\t\t\tfor(int i =0;i<num*2-1;i++){\r\n\t\t\t\tfor(int j =0;j<num;j++){\r\n\t\t\t\t\tInteger numerito = input.nextInt();\r\n\t\t\t\t\t\r\n\t\t\t\t\thash.set(numerito,hash.get(numerito)+1);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tArrayList<Integer> lista = new ArrayList<Integer>();\r\n\t\t\tfor(int aux=0;aux<2501;aux++){\r\n\t\t\t\tif(hash.get(aux) % 2 == 1){\r\n\t\t\t\t\tlista.add(aux);\r\n\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlista.sort(null);\r\n\t\t\t\r\n\t\t\tSystem.out.printf(\"Case #\"+(n+1)+\":\");\r\n\t\t\tfor (Integer jojo:lista){\r\n\t\t\t\tSystem.out.print(\" \"+jojo);\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "6351"}
{"func": "package googlejam6.p352;\n\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\r\n        Scanner scan = new Scanner(System.in);\r\n        int T = scan.nextInt();\r\n        PrintWriter writer = new PrintWriter(\"outputB.txt\", \"UTF-8\");\r\n       \r\n        for (int k = 1; k <= T; k++) {   \r\n            int[] heights = new int[2501];\r\n             int N = scan.nextInt();\r\n            for (int i = 0; i < 2 * N - 1; i++) {\r\n                for (int j = 0; j < N; j++) {\r\n                    int currNum = scan.nextInt();\r\n                    heights[currNum]++;\r\n                }\r\n            }\r\n            int c = 0;\r\n            int[] missed = new int[N];\r\n            for (int i = 1; i < 2501; i++) {\r\n                if (heights[i] % 2 == 1) {\r\n                    missed[c] = i;\r\n                    c++;\r\n                }\r\n            }\r\n            Arrays.sort(missed);\r\n            writer.print(\"Case #\" + k + \": \");\r\n            for (int i = 0; i < N; i++) {\r\n                if (i == N - 1) {\r\n                    writer.print(missed[i]);\r\n                } else {\r\n                    writer.print(missed[i] + \" \");\r\n                }\r\n            }\r\n            writer.println();\r\n        }\r\n        writer.close();\r\n    }\r\n}", "idx": "6352"}
{"func": "package googlejam6.p353;\nimport java.util.*;\r\n\r\npublic class b {\r\n    private static int flipCount;\r\n    \r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        int caseNumber = in.nextInt();\r\n        \r\n        for(int i = 0; i < caseNumber; i++) {\r\n            int N = in.nextInt();\r\n            Map<Integer, Integer> map = new HashMap<Integer, Integer>();\r\n            for(int j = 0; j < (2 * N - 1) * N; j++) {\r\n                int k = in.nextInt();\r\n                if(map.containsKey(k)) map.put(k, map.get(k) + 1);\r\n                else map.put(k, 1);\r\n            }\r\n            \r\n            int[] miss = new int[N];\r\n            int index = 0;\r\n            for(int key : map.keySet()) {\r\n                if(map.get(key) % 2 == 1) miss[index++] = key;\r\n            } \r\n            Arrays.sort(miss);\r\n            \r\n            System.out.print(\"Case #\" + (i+1) + \":\");\r\n            for(int t = 0; t < N; t++) {\r\n                System.out.print(\" \" + miss[t]);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n    \r\n}", "idx": "6353"}
{"func": "package googlejam6.p355;\n\r\n\r\nimport java.io.*;\r\nimport java.math.BigInteger;\r\nimport java.util.*;\r\nimport java.util.stream.IntStream;\r\n\r\n/**\r\n * Created by Jeff on 4/15/2016.\r\n */\r\npublic class RankAndFile {\r\n\r\n    public static void main(String[] args) {\r\n        String problemSet = \"B-large\";\r\n\r\n        File inFile = new File(\"inputs/\" + problemSet + \".in\");\r\n        File outFile = new File(\"outputs/\" + problemSet + \".out\");\r\n\r\n        try (PrintStream out = new PrintStream(new FileOutputStream(outFile))) {\r\n            outFile.createNewFile();\r\n            Scanner sc = new Scanner(inFile);\r\n\r\n            int numberOfTests = sc.nextInt();\r\n            for (int t = 0; t < numberOfTests; t++) {\r\n                int n = sc.nextInt();\r\n                Map<Integer, Integer> counts = new HashMap<Integer, Integer>();\r\n                for (int i = 0; i < 2*(n*n)-n; i++) {\r\n                    int value = sc.nextInt();\r\n                    Integer entry = counts.get(value);\r\n                    if (entry == null) {\r\n                        counts.put(value, 1);\r\n                    } else {\r\n                        counts.put(value, entry + 1);\r\n                    }\r\n                }\r\n\r\n                int[] answer = new int[n];\r\n                int numFound = 0;\r\n                for (Map.Entry<Integer, Integer> entry: counts.entrySet()) {\r\n                    if (entry.getValue() % 2 > 0) {\r\n                        answer[numFound++] = entry.getKey();\r\n                    }\r\n                    if (numFound == n) {\r\n                        break;\r\n                    }\r\n                }\r\n                Arrays.sort(answer);\r\n                out.printf(\"Case #%d:\", t+1);\r\n                Arrays.stream(answer).forEach( v -> out.printf(\" %d\", v));\r\n                out.print(\"\\n\");\r\n            }\r\n        } catch (FileNotFoundException e1) {\r\n            e1.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n", "idx": "6355"}
{"func": "package googlejam6.p356;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\n\r\n\r\npublic class RankAndFile {\r\n\tprivate static BufferedReader br = null;\r\n\tprivate static BufferedWriter bw = null;\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tbr = new BufferedReader(new FileReader(\"B-large.in\"));\r\n\t\tbw = new BufferedWriter(new FileWriter(\"result.txt\"));\r\n\t\tint size = Integer.parseInt(br.readLine());\r\n\t\tString line = \"\";\r\n\t\tint index = 0;\r\n\t\twhile(size !=0 ){\r\n\t\t\tindex++;\r\n\t\t\tline = br.readLine();\r\n\t\t\tint length = Integer.parseInt(line);\r\n\t\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\r\n\t\t\tfor(int j=0;j<2*length-1;j++){\r\n\t\t\t\tline = br.readLine();\r\n\t\t\t\tString[] strs = line.split(\" \");\r\n\t\t\t\tint[] hes = new int[strs.length];\r\n\t\t\t\tfor(int i=0;i<hes.length;i++){\r\n\t\t\t\t\thes[i] = Integer.parseInt(strs[i]);\r\n\t\t\t\t\tif(map.containsKey(hes[i])){\r\n\t\t\t\t\t\tmap.put(hes[i], map.get(hes[i])+1);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tmap.put(hes[i], 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tIterator<Integer> iterator = map.keySet().iterator();\r\n\t\t\tArrayList<Integer> res = new ArrayList<Integer>();\r\n\t\t\twhile(iterator.hasNext()){\r\n\t\t\t\tint key = iterator.next();\r\n\t\t\t\tif(map.get(key)%2==1)\r\n\t\t\t\t\tres.add(key);\r\n\t\t\t}\r\n\t\t\tCollections.sort(res);\r\n\t\t\tString finalres = \"\";\r\n\t\t\tfor(Integer i : res){\r\n\t\t\t\tfinalres += (i+\" \");\r\n\t\t\t}\r\n\t\t\tString info =\"Case #\"+index+\": \"+finalres;\r\n\t\t\tSystem.out.println(info);\r\n\t\t\tbw.write(info);\r\n\t\t\tbw.newLine();\r\n\t\t\tsize--;\r\n\t\t}\r\n\t\tif(bw != null){\r\n\t\t\tbw.close();\t\t\t\r\n\t\t}\r\n\t\tif(br != null){\r\n\t\t\tbr.close();\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n", "idx": "6356"}
{"func": "package googlejam6.p358;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class SolutionB {\r\n\r\n\tprivate File input;\r\n\t\r\n\tprivate File output;\r\n\t\r\n\tprivate String inputSource = \"input/B/in.txt\";\r\n\t\r\n\tprivate String outputSource = \"output/B/out.txt\";\r\n\r\n\tprivate int N;\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tSolutionB r = new SolutionB();\n\t\t\tr.input = new File(r.inputSource);\n\t\t\tScanner s1 = new Scanner(r.input);\n\t\t\tr.N = s1.nextInt();\n\t\t\tScanner s = s1;\n\t\t\tr.output = new File(r.outputSource);\n\t\t\tPrintWriter w1 = new PrintWriter(r.output);\n\t\t\tPrintWriter w = w1;\n\t\t\tfor(int i = 1; i <= r.N; i++) {\n\t\t\t\tint c = s.nextInt();\n\t\t\t\tint[] p1 = new int[(2*c-1)*c+1];\n\t\t\t\tp1[0] = c;\n\t\t\t\tfor(int i1=1; i1<=(2*c-1)*c;i1++) {\n\t\t\t\t\tp1[i1] = s.nextInt();\n\t\t\t\t}\n\t\t\t\tint[] p = p1;\n\t\t\t\tint c1 = p[0];\n\t\t\t\tint[] h = new int[2501];\n\t\t\t\tfor(int j=0; j<=2500; j++) {\n\t\t\t\t\th[j] = 0;\n\t\t\t\t}\n\t\t\t\tfor(int i1=1; i1<p.length; i1++) {\n\t\t\t\t\th[p[i1]]++;\n\t\t\t\t}\n\t\t\t\tint[] sol1 = new int[c1];\n\t\t\t\tint ind = 0;\n\t\t\t\tfor(int j=0; j<=2500; j++) {\n\t\t\t\t\tif(h[j]%2 != 0) {\n\t\t\t\t\t\tsol1[ind] = j;\n\t\t\t\t\t\tind++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint[] sol = sol1;\n\t\t\t\tw.print(\"Case #\" + i + \":\");\n\t\t\t\tArrays.stream(sol).forEach(s11 -> w.print(\" \" + s11));\n\t\t\t\tw.println();\n\t\t\t}\n\t\t\tw.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6358"}
{"func": "package googlejam6.p361;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n/**\r\n * Hello world!\r\n *\r\n */\r\npublic class Task2 {\r\n\tpublic static void main(String[] args) throws FileNotFoundException, IOException {\r\n\t\tList<List<Integer>> testCaseAll = new ArrayList<List<Integer>>();\r\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(\"D:\\\\input.txt\"))) {\r\n\t\t\tString line;\r\n\t\t\tbr.readLine();\r\n\t\t\twhile ((line = br.readLine()) != null) {\r\n\t\t\t\tList<Integer> base = new ArrayList<Integer>();\r\n\t\t\t\tfor (int i = 0; i < (Integer.valueOf(line)*2-1); i++) {\r\n\t\t\t\t\tString[] parts = br.readLine().split(\" \");\r\n\t\t\t\t\tfor (String string : parts) {\r\n\t\t\t\t\t\tbase.add(Integer.valueOf(string));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\ttestCaseAll.add(base);\r\n\t\t\t}\r\n\t\t\tList<String> result = new ArrayList<>();\r\n\r\n\t\t\t\r\n\t\t\tfor (List<Integer> numbers : testCaseAll) {\r\n\t\t\t\tList<Integer> clone = new ArrayList<Integer>(numbers);\n\t\t\t\tCollections.sort(clone);\n\t\t\t\tInteger highest = clone.get(clone.size()-1);\r\n\t\t\t\tString resultValue = \"\";\r\n\t\t\t\tfor (int i = 0; i <= highest; i++) {\r\n\t\t\t\t\tint amount = Collections.frequency(numbers, Integer.valueOf(i));\r\n\t\t\t\t\tif (amount != 0 && amount%2 != 0)\r\n\t\t\t\t\t\tresultValue = resultValue + \" \" + String.valueOf(i);\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(\"done\");\r\n\t\t\t\tresult.add(resultValue);\r\n\t\t\t}\r\n\r\n\t\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"D:\\\\outPut.txt\"));\r\n\r\n\t\t\tint i = 1;\r\n\t\t\tfor (String string : result) {\r\n\t\t\t\tpw.println(\"Case #\" + i + \": \" + string);\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tpw.close();\r\n\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6361"}
{"func": "package googlejam6.p362;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class BB {\r\n\tprivate static Scanner in;\r\n\tprivate static PrintWriter out;\r\n\tprivate static final boolean USE_FILE = true;\r\n\tprivate static final String FILE_NAME = \"B-large\";\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tin = new Scanner(new BufferedReader(new InputStreamReader(USE_FILE ? new FileInputStream(FILE_NAME + \".in\") : System.in)));\r\n\t\tout = new PrintWriter(new BufferedWriter(new OutputStreamWriter(USE_FILE ? new FileOutputStream(FILE_NAME + \".out\") : System.out)));\r\n\t\t\r\n\t\tint testCount = in.nextInt();\r\n\t\tfor (int test = 0; test < testCount; test++) {\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] a = new int[2501];\r\n\t\t\tfor (int i = 0; i < (2*n-1)*n; i++) {\r\n\t\t\t\ta[in.nextInt()]++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tList<Integer> list = new ArrayList<>();\n\t\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\t\tif (a[i] > 0 && a[i] % 2 == 1) {\n\t\t\t\t\tlist.add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(list);\n\t\t\tString s = list.toString().replace(\",\", \"\").replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\tout.println(\"Case #\" + (test + 1) + \": \" + s);\r\n\t\t}\r\n\t\t\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "6362"}
{"func": "package googlejam6.p364;\n//package com.smart.autoserver;\r\n\r\n//import android.support.annotation.NonNull;\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.math.BigInteger;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.ListIterator;\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\n\r\npublic class MainClass {\r\n    static Scanner scan;\r\n    static PrintWriter writer;\r\n\r\n    public static void main(String[] args) {\r\n        File file = new File(\"E://B-large.in\");\r\n        try {\r\n            writer = new PrintWriter(\"E://B-large.out\");\r\n            scan = new Scanner(file);\r\n            int test = scan.nextInt();\r\n            scan.nextLine();\r\n            for(int i=0;i<test;i++) {\r\n                writer.print(\"Case #\" + (i + 1) + \": \");\r\n                int n = scan.nextInt();\n\t\t\t\t        HashMap<Integer, Integer> M = new HashMap<>();\n\t\t\t\t        int[][] A = new int[n*2-1][n];\n\t\t\t\t        for(int i2=0;i2<n*2-1;i2++) {\n\t\t\t\t            for(int j=0;j<n;j++) {\n\t\t\t\t                int tmp = scan.nextInt();\n\t\t\t\t                if(M.containsKey(tmp)) {\n\t\t\t\t                    int t = M.get(tmp);\n\t\t\t\t                    M.remove(tmp);\n\t\t\t\t                    M.put(tmp, t+1);\n\t\t\t\t                } else {\n\t\t\t\t                    M.put(tmp, 1);\n\t\t\t\t                }\n\t\t\t\t                //A[i][j] = scan.nextInt();\n\t\t\t\t            }\n\t\t\t\t        }\n\t\t\t\t        Set<Integer> K = M.keySet();\n\t\t\t\t        List<Integer> KQ = new ArrayList<>();\n\t\t\t\t        for (Integer i3 : K) {\n\t\t\t\t            int t = M.get(i3);\n\t\t\t\t            if(t%2==1)\n\t\t\t\t                KQ.add(i3);\n\t\t\t\t        }\n\t\t\t\t        Collections.sort(KQ);\n\t\t\t\t        for(int i1=0;i1<KQ.size();i1++) {\n\t\t\t\t            writer.print(KQ.get(i1) + \" \");\n\t\t\t\t        }\n\t\t\t\t        writer.println();\n\t\t\t\t//        for(int i=1;i<n*2-1;i++) {\n\t\t\t\t//            if(A[i-1][0] > A[i][0]) {\n\t\t\t\t//                int[] B = new int[n];\n\t\t\t\t//                for(int j = 0;j < n;j++)\n\t\t\t\t//                    B[j] = A[i-1][j];\n\t\t\t\t//                for(int j = 0;j < n;j++)\n\t\t\t\t//                    A[i-1][j] = A[i][j];\n\t\t\t\t//                for(int j = 0;j < n;j++)\n\t\t\t\t//                    A[i][j] = B[j];\n\t\t\t\t//            }\n\t\t\t\t//        }\n\t\t\t\t//        int[][] C = new int[n][n];\n\t\t\t\t//        for(int i=0;i<n;i++)\n\t\t\t\t//            C[0][i] = A[0][i];\n\t\t\t\t//        int i = 0;\n\t\t\t\t//        int j = 1;\n\t\t\t\t//        while (true) {\n\t\t\t\t//            if(A[j][0] == C[i][0]) {\n\t\t\t\t//                for(int k=0;k<n;k++)\n\t\t\t\t//                    C[i][k] = A[j][k];\n\t\t\t\t//            } else {\n\t\t\t\t//\n\t\t\t\t//            }\n\t\t\t\t//        }\r\n            }\r\n            writer.close();\r\n        } catch (Exception e1) {\r\n            e1.printStackTrace();\r\n        }\r\n    }\r\n}\r\n", "idx": "6364"}
{"func": "package googlejam6.p365;\n\r\n\r\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.math.BigInteger;\r\nimport java.text.DecimalFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class Main {\r\n\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\t// Construct BufferedReader from FileReader\n\t\tString fileName = \"C://GoogleCodeJam/input.in\";\n\t\tBufferedReader br;\n\t\ttry {\n\t\t\tbr = new BufferedReader(new FileReader(fileName));\n\t\t\n\t\tString line1 = null;\n\t\tint nLine = 0;\n\t\tint nCases = 0;\n\t\t\n\t\tint currentCase = 0;\n\t\tint currentN = 0;\n\t\tint N = 0;\n\t\tboolean readN = false;\n\t\t\n\t\twhile ((line1 = br.readLine()) != null) {\n\t\t\tif(nLine > 0){\n\t\t\t\tif(currentCase < nCases){\n\t\t\t\t//System.out.println(line);\n\t\t\t\tif(!readN){\n\t\t\t\t\tN = Integer.valueOf(line1);\n\t\t\t\t\tInputUtils.inputs[currentCase] = new String[2*N-1];\n\t\t\t\t\treadN = true;\n\t\t\t\t}else{\n\t\t\t\t\tInputUtils.inputs[currentCase][currentN] = line1;\n\t\t\t\t\tcurrentN++;\n\t\t\t\t\tif(currentN >= 2*N-1){\n\t\t\t\t\t\tcurrentN = 0;\n\t\t\t\t\t\treadN = false;\n\t\t\t\t\t\tN = 0;\n\t\t\t\t\t\tcurrentCase++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tnCases = Integer.valueOf(line1);\n\t\t\t\tInputUtils.inputs = new String[nCases][];\n\t\t\t}\n\t\t\tnLine++;\n\t\t}\n\t\t\n\t\tbr.close();\n\t\t\n\t\t} catch (FileNotFoundException e1) {\n\t\t\te1.printStackTrace();\n\t\t} catch (IOException e2) {\n\t\t\te2.printStackTrace();\n\t\t}\r\n\t\tList<String> solutionList = new ArrayList<String>();\r\n\t\tint T = InputUtils.inputs.length;\r\n\r\n\t\tSystem.out.println(\"COMPUTING...\");\r\n\t\tfor (int nCase = 1; nCase <= T; nCase ++) {\r\n\t\t\t// CODE STARTS HERE //\r\n\t\t\t  int NumMax = InputUtils.inputs[nCase-1].length;\r\n\t\t\t  boolean[] numbers = new boolean[2501];\r\n\t\t\t  Arrays.fill(numbers, false);\r\n\t\t\t  List<Integer> solution = new ArrayList<Integer>();\r\n\t\t\t  \r\n\t\t\t  for(int i = 0; i < NumMax; i++){\r\n\t\t\t\t  String[] line = InputUtils.inputs[nCase-1][i].split(\" \");\r\n\t\t\t\t  for(int j = 0; j < line.length; j++){\r\n\t\t\t\t\t  if(numbers[Integer.valueOf(line[j])]){\r\n\t\t\t\t\t\t  numbers[Integer.valueOf(line[j])] = false;\r\n\t\t\t\t\t  }else{\r\n\t\t\t\t\t\t  numbers[Integer.valueOf(line[j])] = true;\r\n\t\t\t\t\t  }\r\n\t\t\t\t  }\r\n\t\t\t  }\r\n\t\t\t  \r\n\t\t\t  for(int k = 0; k < numbers.length; k++){\r\n\t\t\t\t  if(numbers[k]) solution.add(k);\r\n\t\t\t  }\r\n\t\t\t  \r\n\t\t\t  Collections.sort(solution);\r\n\t\t      \r\n\t\t\t  String caseString = \"\";\r\n\r\n\t\t\t  for (int s : solution)\r\n\t\t\t  {\r\n\t\t\t\t  caseString += s + \" \";\r\n\t\t\t  }\r\n\t\t\t  \r\n\t\t\t  caseString = caseString.trim();\r\n\t\t\t   \r\n\t\t      System.out.println(\"Case #\"+nCase+\": \"+caseString);\r\n\t\t      solutionList.add(\"Case #\"+nCase+\": \"+caseString);\r\n\t\t      // CODE ENDS HERE //\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(\"DONE!\");\r\n\t\t\r\n\t\tFileWriter writer;\r\n\t\ttry {\r\n\t\t\twriter = new FileWriter(\"C://GoogleCodeJam/output.in\");\r\n\t\t\tfor(String str: solutionList) {\r\n\t\t\t\t  writer.write(str + System.getProperty(\"line.separator\"));\r\n\t\t\t\t}\r\n\t\t\t\twriter.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} \r\n\t\t\r\n\t}\r\n}\r\n\r\n", "idx": "6365"}
{"func": "package googlejam6.p367;\n\n\n/**\n * Created by vbhavsar on 4/15/16.\n */\n\nimport java.util.*;\n\npublic class RankAndFile {\n\n    private static boolean debug = false;\n\n    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt();\n\n        for (int _t = 1; _t <= t; _t++) {\n\n            int n = sc.nextInt();\n            sc.nextLine();\n\n            List<Integer> list = new ArrayList<>(2*n-1);\n            for (int _n=0; _n<2*n-1; _n++) {\n                String[] arr = sc.nextLine().split(\" \");\n                for (int i=0; i<arr.length; i++) {\n                    list.add(Integer.parseInt(arr[i]));\n                }\n            }\n\t\t\t// Build histo\n\t\t\tMap<Integer, Integer> histo = new HashMap<>();\n\t\t\tfor (int i=0; i<list.size(); i++) {\n\t\t\t    int key = list.get(i);\n\t\t\t    if (histo.containsKey(key)) {\n\t\t\t        histo.put(key, histo.get(key)+1);\n\t\t\t    } else {\n\t\t\t        histo.put(key, 1);\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tList<Integer> odd = new ArrayList<>();\n\t\t\tfor (Map.Entry<Integer, Integer> e : histo.entrySet()) {\n\t\t\t    if (e.getValue() % 2 == 1) {\n\t\t\t        odd.add(e.getKey());\n\t\t\t    }\n\t\t\t}\n\t\t\tCollections.sort(odd);\n\t\t\t\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor (int i=0; i<odd.size(); i++) {\n\t\t\t    sb.append(String.format(\"%d \", odd.get(i)));\n\t\t\t}\n\n            String result = sb.toString().trim();\n            System.out.printf(\"Case #%d: %s%n\", _t, result);\n        }\n    }\n}\n", "idx": "6367"}
{"func": "package googlejam6.p371;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.DataInputStream;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\n\r\npublic class Q2 {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tFileInputStream in = null;\r\n\t\tin = new FileInputStream(\"input.in\");\r\n\t\tDataInputStream input = new DataInputStream(in);\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(in));\r\n\t\tString line = \"\";\r\n\t\tline = br.readLine();\r\n\t\tint numberOfCases = Integer.parseInt(line);\r\n\t\tFileOutputStream out = null;\r\n\t\tout = new FileOutputStream(\"out.txt\");\r\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(out));\r\n\t\tfor(int i =0;i<numberOfCases;i++){\r\n\t\t\tint n = Integer.parseInt(br.readLine());\r\n\t\t\tint[] heights = new int[2501];\r\n\t\t\tfor(int j=0;j<2*(n)-1;j++){\r\n\t\t\t\tline = br.readLine();\r\n\t\t\t\t//System.out.println(line);\r\n\t\t\t\tString[] intsString = line.split(\" \");\r\n\t\t\t\t//System.out.println(line);\r\n\t\t\t\tfor(int k=0;k<intsString.length;k++){\r\n\t\t\t\t\theights[Integer.parseInt(intsString[k])]+=1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tString answer = \"\";\r\n\t\t\tfor(int j=0;j<2501;j++){\r\n\t\t\t\tif(heights[j]%2!=0){\r\n\t\t\t\t\tanswer += j+\" \";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tbw.write(\"Case #\"+(i+1)+\": \"+answer+\"\\n\");\r\n\t\t}\r\n\t\tbr.close();\r\n\t\tbw.close();\r\n\t}\r\n}\r\n", "idx": "6371"}
{"func": "package googlejam6.p374;\n\n\nimport javax.swing.text.html.HTMLDocument;\nimport java.io.*;\nimport java.util.*;\n\n/**\n * Created by AmesingFlank on 4/16/16.\n */\npublic class RankFile {\n\n    public static void main(String [] args){\n        LinkedList<String> s=new LinkedList<String>();\n\t\t\n\t\t\n\t\ttry {\n\t\t    String encoding=\"GBK\";\n\t\t    File file=new File(\"/Users/AmesingFlank/Downloads/qbtest.in\");\n\t\t    if(file.isFile() && file.exists()){ //\u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728\n\t\t        InputStreamReader read = new InputStreamReader(\n\t\t                new FileInputStream(file),encoding);//\u8003\u8651\u5230\u7f16\u7801\u683c\u5f0f\n\t\t        BufferedReader bufferedReader = new BufferedReader(read);\n\t\t        String lineTxt = null;\n\t\t        while((lineTxt = bufferedReader.readLine()) != null){\n\t\t            s.add(lineTxt);\n\t\t        }\n\t\t        read.close();\n\t\t    }\n\t\t} catch (Exception e) {\n\t\t    System.out.println(\"\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\u51fa\u9519\");\n\t\t    e.printStackTrace();\n\t\t}\n\t\t\n\t\tString[] ans1=new String[s.size()];\n\t\tfor (int i1 = 0; i1 < s.size(); i1++) {\n\t\t    ans1[i1]=s.get(i1);\n\t\t}\n\t\tString raw[] = ans1;\n        int cases=Integer.valueOf(raw[0]);\n\n        int index=1;\n        String[] ans=new String[cases];\n        for (int i = 0; i < cases; i++) {\n            int N=Integer.valueOf(raw[index]);\n            String vals[]=new String[2*N-1];\n            for (int j = index+1; j <index+1+2*N-1 ; j++) {\n                vals[j-index-1]=raw[j];\n            }\n            index+=2*N;\n            ans[i]=solveOne(N,vals);\n        }\n        try {\n\t\t\n\t\t    int trial=ans.length;\n\t\t    File file = new File(\"/Users/AmesingFlank/cj2016/QuestionB-test.txt\");\n\t\t    BufferedWriter ow = new BufferedWriter(new FileWriter(file));\n\t\t\n\t\t    for(int i=0;i<trial;i++){\n\t\t\n\t\t        String temp=\"Case \"+\"#\"+String.valueOf(i+1)+\": \"+ans[i];\n\t\t        System.out.println(temp);\n\t\t        ow.write(temp);\n\t\t\n\t\t        ow.newLine();\n\t\t    }\n\t\t\n\t\t    ow.close();\n\t\t    System.out.println(\"Finished Writing\");\n\t\t\n\t\t} catch (IOException e) {\n\t\t    e.printStackTrace();\n\t\t}\n    }\n\n    public static String solveOne(int N,String[] files){\n        HashMap<Integer,Integer> counts=new HashMap<>();\n        for (int i = 0; i <files.length ; i++) {\n            int[] arr=get\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000arr(files[i]);\n            for (int j = 0; j < arr.length; j++) {\n                //counts[arr[j]]++;\n                if (counts.get(arr[j])==null){\n                    counts.put(arr[j],1);\n                }\n                else\n                counts.put(arr[j],counts.get(arr[j])+1);\n            }\n        }\n\n        LinkedList<Integer> ansArr=new LinkedList<>();\n\n        Iterator iter =counts.keySet().iterator();\n        while (iter.hasNext()){\n            Integer key=(Integer) iter.next();\n            Integer value=counts.get(key);\n            if (value%2!=0){\n                ansArr.add(key);\n            }\n        }\n\n        Collections.sort(ansArr);\n        String ans=\"\";\n        for (int i = 0; i <ansArr.size() ; i++) {\n            if(i==ansArr.size()-1){\n                ans+=String.valueOf(ansArr.get(i));\n            }\n            else\n            ans+=String.valueOf(ansArr.get(i))+\" \";\n        }\n        return ans;\n    }\n}\n", "idx": "6374"}
{"func": "package googlejam6.p375;\nimport java.util.*;\npublic class rank{\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n        int num = sc.nextInt();\n        for(int i=0;i<num;i++){\n            System.out.print(\"Case #\"+(i+1)+\": \");\n            int n = sc.nextInt();\n            int[] ar = new int[2505]; \n            int max = 0;\n            for(int j=0;j<(2*n-1)*n;j++){\n                int temp = sc.nextInt();\n                ar[temp]++;\n                if(temp>max){\n                    max = temp;\n                }\n            }\n\n            ArrayList<Integer> arr = new ArrayList<Integer>();\n            for(int m= 0;m<=max;m++){\n                if(ar[m]%2!=0){\n                    arr.add(m);\n                }\n            }\n\n            for(int nn=0;nn<arr.size()-1;nn++){\n                System.out.print(arr.get(nn)+\" \");\n            }\n            System.out.println(arr.get(arr.size()-1));\n        }\n    \n    }\n}\n", "idx": "6375"}
{"func": "package googlejam6.p377;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * \r\n */\r\n\r\n/**\r\n * @author Sagar\r\n *\r\n */\r\npublic class Main {\r\n\r\n\t/**\r\n\t * @param args\r\n\t * @throws IOException \r\n\t */\r\n\tpublic static void main(String[] args){\r\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t\tint t = in.nextInt();\r\n\t\tfor(int i = 1 ; i <= t; i++){\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] a = new int[n*(n+(n-1))];\r\n\t\t\tfor(int j = 0; j < n*(n+(n-1)); j++){\r\n\t\t\t\ta[j] = in.nextInt();\r\n\t\t\t}\r\n\t\t\tArrays.sort(a);\r\n\t\t\tSystem.out.print(\"Case #\" + i + \": \" );\r\n\t\t\tfor(int j=0; j < n*(n+(n-1));){\r\n\t\t\t\tif((j+1) != n*(n+(n-1)) && a[j] == a[j+1]){\r\n\t\t\t\t\tj+=2;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tSystem.out.print(a[j] + \" \");\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\tin.close();\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "6377"}
{"func": "package googlejam6.p380;\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class RankFile {\n\n  public static void main( String[] args ) {\n    Scanner in = new Scanner( System.in );\n    int t = in.nextInt();\n    int max = 0;\n\n    for ( int testCase = 1; testCase <= t; testCase++ ) {\n      int n = in.nextInt();\n      int[] heights = new int[2501];\n\n      for ( int i = 0; i < 2 * n - 1; i++ ) {\n        for ( int k = 0; k < n; k++ ) {\n          int height = in.nextInt();\n          heights[height] += 1;\n          if ( height > max ) {\n            max = height;\n          }\n        }\n      }\n\n      System.out.format( \"Case #%d: \", testCase );\n      for ( int j = 1; j <= max; j++ ) {\n        if ( heights[j] % 2 != 0 ) {\n          System.out.format( \"%d \", j );\n        }\n      }\n      System.out.format( \"\\n\" );\n    }\n  }\n\n}\n", "idx": "6380"}
{"func": "package googlejam6.p381;\n\r\n\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Second {\r\n    private static final String dir = \"C:\\\\Users\\\\Sasidharan\\\\Downloads\\\\Code\\\\B\\\\\";\r\n\r\n    public static int mins = 0;\r\n    public static void main(String[] args) throws Exception {\r\n    \tSecond o = new Second();\r\n    \tScanner sc = new Scanner(new FileReader(dir + \"B-large.in\"));\r\n\r\n    \tPrintWriter pw = new PrintWriter(new FileWriter(dir + \"output.txt\"));\r\n    \tint caseCnt = sc.nextInt();\r\n    \tsc.nextLine();\r\n    \tfor(int n = 0; n < caseCnt; n++) {\r\n    \t\t//sc.nextLine();\r\n    \t\t//System.out.println(\"Test cases \" + (n + 1));\r\n    \t\tpw.print(\"Case #\" + (n+1) + \": \");\r\n    \t\t//mins = 0;\r\n    \t\tint no = sc.nextInt();\n\t\t\tint[][] a = new int[2 * no - 1][no];\n\t\t\tint b[] = new int[2502];\n\t\t\t\n\t\t\tfor(int i = 0; i < 2* no - 1; i++) {\n\t\t\t\tsc.nextLine();\n\t\t\t\tfor(int k = 0; k < no; k++) {\n\t\t\t\t\tint j = sc.nextInt();\n\t\t\t\t\tif(b[j] == 0) {\n\t\t\t\t\t\tb[j] = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tb[j] = b[j] - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t    //a[i][0] = sc.nextInt();\n\t\t\t\t//a[i][1] = sc.nextInt();\n\t\t\t\t//a[i][2] = sc.nextInt();\n\t\t\t\t//System.out.println(a[i][0] +\" \" + a[i][1] + \" \" + a[i][2]);\n\t\t\t\t//sc.nextLine();\n\t\t\t}\n\t\t\tfor(int i =0; i < 2502; i++)\n\t\t\t{\n\t\t\t\tif(b[i] == 1) {\n\t\t\t\t\tSystem.out.print(i + \" \");\n\t\t\t\t\tpw.print(i + \" \");\n\t\t\t\t}\n\t\t\t\t//String text = sc.nextLine();\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tpw.println();\r\n    \t}\r\n    \tpw.flush();\r\n    \tpw.close();\r\n    \tsc.close();\r\n    }\r\n\r\n}\r\n", "idx": "6381"}
{"func": "package googlejam6.p382;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class B_problem {\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tFileReader fr = new FileReader(\n\t\t\t\t\"/Users/SISQUAKE/workspace/code_jam/input/B-small-attempt0_1.in\");\n\n\t\tBufferedReader br = new BufferedReader(fr);\n\t\tint n;\n\n\t\tn = Integer.parseInt(br.readLine());\n\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tint N  = Integer.parseInt(br.readLine());\n\t\t\tint[][] m = new int[2*N-1][N];\n\t\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\t\tfor(int j =0 ; j < 2*N-1 ; j++){\n\t\t\t\tString str = br.readLine();\n\t\t\t\tint k = 0 ;\n\t\t\t\t//l.add(Integer.parseInt(str.replaceAll(\" \", \"\")));\n\t\t\t\tString[] s = str.split(\" \");\n\t\t\t\tfor(String st : s){\n\t\t\t\t\tint number = Integer.parseInt(st);\n\t\t\t\t\tif(map.containsKey(number)){\n\t\t\t\t\t\tint tmp = map.get(number);\n\t\t\t\t\t\tmap.put(number, tmp+1);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tmap.put(number, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrayList<Integer> l = new ArrayList<Integer>();\n\t\t\tfor (Map.Entry<Integer, Integer> entry : map.entrySet())\n\t\t\t{\n\t\t\t    if(entry.getValue()%2!=0){\n\t\t\t    \tl.add(entry.getKey());\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(l);\n\t\t\tSystem.out.print(\"Case #\"+i+\": \"+l.get(0));\n\t\t\t\n\t\t\tfor(int k = 1 ; k < l.size() ; k ++ ){\n\t\t\t\tSystem.out.print(\" \"+l.get(k));\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"\");\n\t\t\t\n\t\t\t\n\n\t\t}\n\t\tfr.close();\n\n\t}\n}\n", "idx": "6382"}
{"func": "package googlejam6.p385;\nimport java.util.*;\nimport java.io.*;\npublic class Round1A {\npublic static void main(String[] args) throws Exception{\n\tScanner input = new Scanner(System.in);\n\tPrintWriter out = new PrintWriter(\"A.txt\");\n\tint numCases = input.nextInt();\n\tfor (int i = 0 ; i < numCases; i++) {\n\t\tint N = input.nextInt();\n\n\t\tHashSet<Integer> st = new HashSet<Integer>();\n\t\tfor (int j = 0; j < (2*N -1) * N; j++) {\n\t\t\tint n = input.nextInt();\n\t\t\t\n\t\t\t\t\n\t\t\t\t\tif (st.contains(n)) {\n\t\t\t\t\t\tst.remove(n);\n\t\t\t\t\t}else {\n\t\t\t\t\t\tst.add(n);\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\n\n\t\t}\n\t\tArrayList<Integer> subres = new ArrayList<>();\n\t\tfor (Integer num : st) {\n\t\t\tsubres.add(num);\n\t\t}\n\t\tCollections.sort(subres);\n\t\tString res1 = \"\";\n\t\tfor (Integer num: subres) {\n\t\t\tres1 = res1 + num + \" \";\n\t\t\t\n\t\t}\n\t\tres1.trim();\n\t\tString res = res1;\n\t\tint index = i+1;\n\t\tout.print(\"Case #\" + index + \": \"+res+\"\\n\");\n\t}\n\tinput.close();\n\tout.close();\n}\n\n}", "idx": "6385"}
{"func": "package googlejam6.p386;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class B{\r\n\t\r\n  public static void main(String[] args) {\r\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n    int t = in.nextInt();\r\n\t\r\n    for (int i = 1; i <= t; ++i) {\r\n\t\tint n = in.nextInt();\r\n\t\tSystem.out.print(\"Case #\" + i + \": \");\r\n\t\tint p=0;\r\n\t\tHashMap<Integer,Integer> map=new HashMap<Integer,Integer>();\r\n\t\twhile(p<2*n*n-n){\r\n\t\t\tp++;\r\n\t\t\tint key=in.nextInt();\r\n\t\t\tif(map.containsKey(key))map.put(key,map.get(key)+1);\r\n\t\t\telse map.put(key,1);\r\n\t\t}\r\n\t\tIterator it = map.entrySet().iterator();\r\n\t\tint[] missing=new int[n];\r\n\t\tint j=0;\r\n\t\twhile (it.hasNext()) {\r\n\t\t\tMap.Entry pair = (Map.Entry)it.next();\r\n\t\t\t\r\n\t\t\tif((int)pair.getValue()%2==1){\r\n\t\t\t\tmissing[j]=(int)pair.getKey();\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\tit.remove(); \r\n\t\t}\r\n\t\tArrays.sort(missing);\r\n\t\t\r\n\t\tfor(int k=0;k<n;k++){\r\n\t\t\tSystem.out.print(missing[k]+\" \");\r\n\t\t}\r\n\t\tSystem.out.println(\"\");\r\n\t}\r\n\t\r\n\t\r\n  }\r\n  \r\n}", "idx": "6386"}
{"func": "package googlejam6.p387;\nimport java.util.*;\n\npublic class RankAndFile {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = Integer.parseInt(sc.nextLine());\n        for (int i = 0; i < t; i++) {\n            int n = Integer.parseInt(sc.nextLine());\n            ArrayList<Integer> lists = new ArrayList<>();\n            for (int j = 0; j < n * n * 2 - n; j++) {\n                lists.add(sc.nextInt());\n            }\n            sc.nextLine();\n\t\t\tHashSet<Integer> heights = new HashSet<>();\n\t\t\tfor (Integer height1: lists) {\n\t\t\t    if (heights.contains(height1)) {\n\t\t\t        heights.remove(height1);\n\t\t\t    } else {\n\t\t\t        heights.add(height1);\n\t\t\t    }\n\t\t\t}\n\t\t\tInteger[] list = heights.toArray(new Integer[heights.size()]);\n\t\t\tArrays.sort(list);\n            Integer[] missingList = list;\n            System.out.printf(\"Case #%d:\", i + 1);\n            for (int height: missingList) {\n                System.out.printf(\" %d\", height);\n            }\n            System.out.println();\n        }\n    }\n}\n", "idx": "6387"}
{"func": "package googlejam6.p388;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\n\r\npublic class ProblemB {\r\n\tstatic BufferedReader buffReader = null;\r\n\tstatic BufferedWriter buffWriter = null;\r\n\tstatic FileReader fileReader = null;\r\n\tstatic FileWriter fileWriter = null;\r\n\tstatic String input_test = \"D:/Programming/workspace/test/test.in\";\r\n\tstatic String input_small =  \"D:/Programming/workspace/test/B-small-attempt0.in\";\r\n\tstatic String input_large = \"D:/Programming/workspace/test/B-large.in\";\r\n\r\n\tpublic static final void main(String[] args){\r\n\t\ttry {\r\n//\t\t\tfileReader = new FileReader(input_test);\r\n//\t\t\tfileReader = new FileReader(input_small);\r\n\t\t\tfileReader = new FileReader(input_large);\r\n\t\t\tbuffReader = new BufferedReader(fileReader);\r\n\t\t\tfileWriter = new FileWriter(\"D:/Programming/workspace/test/problem_B.out\");\r\n\t\t\tbuffWriter = new BufferedWriter(fileWriter);\r\n\r\n\t\t\tint total_size = Integer.parseInt(buffReader.readLine());\r\n\t\t\t//iterate through every input line\r\n\t\t\tfor(int i=1; i<=total_size; i++){\r\n\t\t\t\tint N = Integer.parseInt(buffReader.readLine());\r\n\t\t\t\tint size = N * (2 * N - 1);\r\n\t\t\t\tint index = 0;\r\n\t\t\t\tint[] arr = new int[size];\r\n\t\t\t\tfor(int j=0; j<2*N-1; j++){\r\n\t\t\t\t\tString[] line = buffReader.readLine().split(\" \");\r\n\t\t\t\t\tfor(int k=0; k<N; k++){\r\n\t\t\t\t\t\tarr[index] = Integer.parseInt(line[k]);\r\n//\t\t\t\t\t\tSystem.out.println(arr[index]);\r\n\t\t\t\t\t\tindex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tArrays.sort(arr);\r\n\t\t\t\tint count = 1;\r\n\t\t\t\tint pre = arr[0];\r\n\t\t\t\tint cur = -2;\r\n\t\t\t\tString result = \"\";\r\n\t\t\t\tfor(int x=1; x<size; x++){\r\n\t\t\t\t\t\r\n\t\t\t\t\tcur = arr[x];\r\n//\t\t\t\t\tSystem.out.println(\"cur = \" + cur + \" pre = \" + pre);\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(cur == pre){\r\n\t\t\t\t\t\tcount++ ;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tif ((count & 1) != 0) {\r\n\t\t\t\t\t\t\tresult = result + \" \"+ pre;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpre = cur;\r\n\t\t\t\t\t\tcount = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((x == size -1) && (count == 1)) {\r\n\t\t\t\t\t\tresult = result + \" \"+ pre;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\r\n\t\t\t\tSystem.out.println(\"Case #\" +i+\":\"+ result);\r\n\t\t\t\tbuffWriter.write(\"Case #\" +i+\":\" + result);\r\n\t\t\t\tbuffWriter.newLine();\r\n\t\t\t\tbuffWriter.flush();\r\n\t\t\t}\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} finally {\r\n\t\t\ttry {\r\n\t\t\t\tbuffWriter.flush();\t\t\r\n\t\t\t\tbuffWriter.close();\r\n\t\t\t\tbuffReader.close();\r\n\t\t\t\tfileReader.close();\r\n\t\t\t\tfileWriter.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "idx": "6388"}
{"func": "package googlejam6.p389;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Set;\n\n\npublic class main_22_2 {\n\tpublic static void main(String[] args) {\n\t\tmain_22_2 m = new main_22_2();\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(\n\t\t\t\tSystem.in)));\n\t\tint t = in.nextInt(); // Scanner has functions to read ints, longs,\n\t\t\t\t\t\t\t\t// strings, chars, etc.\n\t\tfor (int i = 1; i <= t; ++i) {\n\t\t\tint times = in.nextInt();\n\t\t\tint total = 2*times*times-times;\n\t\t\tint[] input = new int[total];\n\t\t\tfor (int j = 0; j < total; j++) {\n\t\t\t\tinput[j] = in.nextInt();\n\t\t\t}\n\t\t\tSet<Integer> set = new HashSet<Integer>();\n\t\t\tfor(int i3 = 0; i3 < input.length; i3++){\n\t\t\t\tif(!set.contains(input[i3])){\n\t\t\t\t\tset.add(input[i3]);\n\t\t\t\t} else {\n\t\t\t\t\tset.remove(input[i3]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint[] ans1 = new int[set.size()];\n\t\t\tint index = 0;\n\t\t\tfor(int i1 : set){\n\t\t\t\tans1[index++] = i1;\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(ans1);\n\t\t\tStringBuffer sb = new StringBuffer();\n\t\t\tfor(int i2 = 0; i2 < ans1.length; ++i2){\n\t\t\t\tsb.append(ans1[i2]).append(\" \");\n\t\t\t}\n\n\t\t\tString ans = sb.substring(0, sb.length() - 1);\n\t\t\tSystem.out.print(\"Case #\" + i + \": \" + ans);\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\t\n}\n", "idx": "6389"}
{"func": "package googlejam6.p390;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class B {\n\n\tpublic static void main(String[] args) throws FileNotFoundException\n\t{\n\t\tScanner sc = new Scanner(new File(\"input.in\"));\n\t\tPrintWriter pw = new PrintWriter(\"output.out\");\n\t\tint n_case = sc.nextInt();\n\t\tfor(int i=1;i<=n_case;i++)\n\t\t{\n\t\t\tint[] count = new int[2501];\n\t\t\tint n = sc.nextInt();\n\n\t\t\tfor(int r=0;r<2*n-1;r++)\n\t\t\t{\n\t\t\t\tfor(int k=0;k<n;k++)\n\t\t\t\t{\n\t\t\t\t\tint v = sc.nextInt();\n\t\t\t\t\tcount[v]++;\n\t\t\t\t\tcount[v] = count[v]%2;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString ris =\"\";\n\t\t\tfor(int el=1;el<=2500;el++)\n\t\t\t{\n\t\t\t\tif(count[el]!=0)\n\t\t\t\t{\n\t\t\t\t\tris+=el+\" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\tpw.println(\"Case #\"+i+\": \"+ris);\n\t\t}\n\t\tsc.close();\n\t\tpw.close();\n\t}\n\n}\n", "idx": "6390"}
{"func": "package googlejam6.p391;\n\n/**\n * https://code.google.com/codejam/contest/dashboard?c=32003#s=p0\n */\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class RankAndFile {\n\tstatic String inputFile = \"\";\n\tstatic String outputFile = \"\";\n\tstatic Scanner in;\n\n\tstatic {\n\t\toutputFile = \"B.out\";\n\t}\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tin = new Scanner(new BufferedReader((new FileReader(\"/Users/sandz/Downloads/B-large.in\"))));\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(outputFile));\n\t\tint testCases = in.nextInt();\n\t\tStringBuilder stringBuilder = new StringBuilder();\n\t\tfor (int i = 1; i <= testCases; i++) {\n\t\t\tint n = in.nextInt();\n\t\t\tMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\t\tfor (int i1 = 0; i1 < 2 * n - 1; i1++) {\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tint row = in.nextInt();\n\t\t\t\t\tInteger count = map.get(row);\n\t\t\t\t\tif (count == null) {\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t}\n\t\t\t\t\tmap.put(row, ++count);\n\t\t\t\t}\n\t\t\t}\n\t\t\tList<Integer> x = new LinkedList<Integer>();\n\t\t\tfor (Integer key : map.keySet()) {\n\t\t\t\tint count = map.get(key);\n\t\t\t\tif (count % 2 == 1) {\n\t\t\t\t\tx.add(key);\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(x);\n\t\t\t\n\t\t\tStringBuffer buffer = new StringBuffer();\n\t\t\tfor (Integer integer : x) {\n\t\t\t\tbuffer.append(integer + \" \");\n\t\t\t}\n\t\t\tString ans = buffer.toString();\n\t\t\tstringBuilder.append(\"CASE #\" + (i) + \": \" + ans + \"\\n\");\n\t\t}\n\t\tSystem.out.println(stringBuilder.toString());\n\t\tout.write(stringBuilder.toString());\n\t\tout.flush();\n\t\tin.close();\n\t\tout.close();\n\t}\n\n}", "idx": "6391"}
{"func": "package googlejam6.p392;\n\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Map.Entry;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemB {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner inputScanner = new Scanner(System.in);\r\n\t\t\r\n\t\t// Get the number of test cases\r\n\t\tint totalCases = inputScanner.nextInt();\r\n\t\tfor (int caseId = 1; caseId <= totalCases; caseId++) {\r\n\t\t\t// Read the word set\r\n\t\t\tint n = inputScanner.nextInt();\r\n\t\t\tInteger[] numbers = new Integer[n * (2 * n - 1)];\r\n\t\t\tfor (int i = 0; i < numbers.length; i++) {\r\n\t\t\t\tnumbers[i] = inputScanner.nextInt();\r\n\t\t\t}\n\t\t\tHashMap<Integer, Integer> timesMap = new HashMap<Integer, Integer>();\n\t\t\t\n\t\t\tfor (Integer num : numbers) {\n\t\t\t\tInteger times = timesMap.get(num);\n\t\t\t\tif (times == null)\n\t\t\t\t\ttimes = 1;\n\t\t\t\telse\n\t\t\t\t\ttimes++;\n\t\t\t\ttimesMap.put(num, times);\n\t\t\t}\n\t\t\t\n\t\t\tInteger[] oddTimesNums = new Integer[n];\n\t\t\tint count = 0;\n\t\t\tfor (Entry<Integer, Integer> entry : timesMap.entrySet()) {\n\t\t\t\tInteger num = entry.getKey();\n\t\t\t\tInteger times = entry.getValue();\n\t\t\t\t\n\t\t\t\tif (times % 2 != 0) {\n\t\t\t\t\toddTimesNums[count] = num;\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(oddTimesNums);\r\n\t\t\tInteger[] result = oddTimesNums;\r\n\t\t\t\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\tsb.append(result[0]);\r\n\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\tsb.append(' ');\r\n\t\t\t\tsb.append(result[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Print the result\r\n\t\t\tSystem.out.println(\"Case #\" + caseId + \": \" + sb.toString());\r\n\t\t}\r\n\t\t\r\n\t\tinputScanner.close();\r\n\t}\r\n}\r\n", "idx": "6392"}
{"func": "package googlejam6.p395;\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.Map.Entry;\r\nimport java.util.Scanner;\r\n\r\npublic class Solution {\r\n\tpublic static void main(String[] args){ \r\n\t\tScanner scan = new Scanner(System.in);\r\n\t\tint total = scan.nextInt();\r\n\t\tfor(int i=0; i<total;i++){\r\n\t\t\tint sizeForList = scan.nextInt();\r\n\t\t\tHashMap<Integer, Integer> values = new HashMap<Integer, Integer>();\r\n\t\t\tfor(int j=0;j<sizeForList*(sizeForList*2-1);j++){\r\n\t\t\t\tint tempValue = scan.nextInt();\r\n\t\t\t\tif(values.containsKey(tempValue)){\r\n\t\t\t\t\tint val = values.get(tempValue);\r\n\t\t\t\t\tval++;\r\n\t\t\t\t\tvalues.put(tempValue, val);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvalues.put(tempValue, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint [] list = new int[sizeForList];\r\n\t\t\tint index = 0;\r\n\t\t\tfor(Entry<Integer, Integer> tempVal : values.entrySet()) {\r\n\t\t\t    if(tempVal.getValue()%2==1){\r\n\t\t\t    \tlist[index] = tempVal.getKey();\r\n\t\t\t    \tindex++;\r\n\t\t\t    }\r\n\t\t\t}\r\n\t\t\tArrays.sort(list);\r\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \": \");\r\n\t\t\tfor(int j=0;j<list.length;j++){\r\n\t\t\t\tif(j==0){\r\n\t\t\t\t\tSystem.out.print(list[j]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tSystem.out.print(\" \"+list[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n}", "idx": "6395"}
{"func": "package googlejam6.p399;\nimport java.util.Scanner;\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\n\r\npublic class Main\r\n{\r\n   public static void main(String[] args) throws Exception\r\n   {\r\n      Scanner inp = new Scanner(new File(\"inLarge.txt\"));\r\n      PrintWriter pw = new PrintWriter(new File(\"outLarge.txt\"));\r\n      int c = 0;\r\n      int cases = inp.nextInt();\r\n      while( c < cases )\r\n      {\r\n         int n = inp.nextInt();\r\n         int[] h = new int[2501];\r\n         int[] m = new int[n];\r\n         for( int i=0; i<2*n*n-n; i++ )\r\n         {\r\n            h[inp.nextInt()]++;\r\n         }\r\n         int p = 0;\r\n         for( int i=0; i<2500; i++ )\r\n         {\r\n            if( h[i] % 2 != 0 )\r\n            {\r\n               m[p] = i;\r\n               p++;\r\n            }\r\n         }\r\n         String r = \"\";\r\n         for( int i=0; i<n; i++ ) \r\n         {\r\n            r += \" \" + m[i];\r\n         }\r\n         System.out.println(\"Case #\" + (c+1) + \":\" + r );\r\n         pw.println(\"Case #\" + (c+1) + \":\" + r );\r\n         \r\n         c++;\r\n      }\r\n      pw.close();\r\n   }\r\n}", "idx": "6399"}
{"func": "package googlejam6.p400;\nimport java.math.BigInteger;\nimport java.util.*;\nimport java.io.*;\npublic class B {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        for (int i = 1; i <= t; ++i) {\n\n            Set<Integer> set = new TreeSet<>();\n            int k = in.nextInt();\n//            Set<Integer> set = new HashSet<>();\n            for(int l=0; l< (k *2)-1; l++ ){\n//                int[] array = new int[k];\n\n                for(int n =0; n<k;n++){\n                    int num = in.nextInt();\n                    boolean remove = false;\n\n                    for(int a : set){\n                        if(a == num){\n                            remove = true;\n                            break;\n                        }\n                    }\n\n                    if(remove){\n                        set.remove(num);\n                    }else{\n                        set.add(num);\n                    }\n\n                }\n\n\n            }\n            String str = \"\";\n            for(int n : set){\n\n               str += \" \" + n;\n            }\n\n            System.out.println(\"Case #\" + i + \": \" + str.trim());\n        }\n    }\n\n}\n", "idx": "6400"}
{"func": "package googlejam6.p403;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Scanner;\n\npublic class RankAndFile {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tFileInputStream fstream = new FileInputStream(\"B-large.in\");\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(fstream));\n\t\t\n\t\tFile fout = new File(\"out.txt\");\n\t\tFileOutputStream fos = new FileOutputStream(fout);\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));\n\t\t\n\t\tint count = Integer.parseInt(br.readLine());\n\t\tfor (int i = 1; i <= count; i++) {\n\t\t\tint lineNum = Integer.parseInt(br.readLine());\n\t\t\tHashSet<Integer> set = new HashSet<Integer>();\n\t\t\tfor (int j = 0; j < lineNum*2-1; j++) {\n\t\t\t\tScanner scanner = new Scanner(br.readLine());\n\t\t\t\twhile (scanner.hasNextInt()) {\n\t\t\t\t\tint height = scanner.nextInt();\n\t\t\t\t\tif (set.contains(height)) {\n\t\t\t\t\t\tset.remove(height);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tset.add(height);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[] arr = new int[lineNum];\n\t\t\tint k = 0;\n\t\t\tfor (int height : set) {\n\t\t\t\tarr[k++] = height;\n\t\t\t}\n\t\t\tArrays.sort(arr);\n\t\t\tbw.write(\"Case #\" + i + \": \");\n\t\t\tfor (k = 0; k < lineNum; k++) {\n\t\t\t\tbw.write(arr[k] + \" \");\n\t\t\t}\n\t\t\tbw.newLine();\n\t\t}\n\t\tbr.close();\n\t\tbw.close();\n\t}\n}\n", "idx": "6403"}
{"func": "package googlejam6.p404;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport java.io.*;\nimport java.util.*;\nimport java.math.*;\nimport java.util.regex.*;\nimport java.text.*;\n\npublic class B {\n\n\tpublic static void main(String[] args) throws Exception{\n\n\t\tScanner scanner = new Scanner(new File(\"B-large.in\"));\n\n\t\tint cases = scanner.nextInt();\n\n\t\tfor (int t = 0; t < cases; t++) {\n\t\t\tint rows = scanner.nextInt();\n\t\t\tint[] nums = new int[2501];\n\t\t\tString output = \"\";\n\n\t\t\tfor (int r = 0; r < 2*rows - 1; r++) {\n\t\t\t\tfor (int k = 0; k < rows; k++){\n\t\t\t\t\tint currnum = scanner.nextInt();\n\t\t\t\t\tnums[currnum]++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\t\tif ((nums[i] % 2) != 0) {\n\t\t\t\t\toutput += \" \" + Integer.toString(i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.printf(\"Case #%d:%s\\n\", t + 1, output);\n\t\t}\n\t}\n}", "idx": "6404"}
{"func": "package googlejam6.p405;\n\n\nimport javafx.beans.binding.StringBinding;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class RankOfFile {\n\n    public static void main(String[] args) throws IOException {\n\n        Scanner in = new Scanner(new File(\"B-large.in\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n        RankOfFile test = new RankOfFile();\n\n        int n = in.nextInt();\n\n        for (int i = 0; i < n ;i++) {\n            int k = in.nextInt();\n            Map<Integer, Integer> map = new TreeMap<Integer, Integer>() {\n            };\n            for (int j = 0; j < (2*k-1)*k; j++) {\n                String s = in.next();\n                int num = Integer.parseInt(s);\n                if (map.containsKey(num)) {\n                    map.put(Integer.parseInt(s),map.get(num)+1);\n                } else {\n                    map.put(Integer.parseInt(s), 1);\n                }\n            }\n            String[] sb = new String[k];\n            int kk = 0;\n            Set set2 = map.entrySet();\n            Iterator iterator2 = set2.iterator();\n            while(iterator2.hasNext()) {\n                Map.Entry me2 = (Map.Entry)iterator2.next();\n                if ((int)me2.getValue() % 2 != 0) {\n                    sb[kk] = String.valueOf(me2.getKey());\n                    kk++;\n                }\n\n            }\n\n\n            pw.print(\"Case #\" + (i + 1) + \": \");\n            pw.println(String.join(\" \", sb));\n        }\n        pw.flush();\n        pw.close();\n        in.close();\n\n    }\n}\n", "idx": "6405"}
{"func": "package googlejam6.p406;\nimport java.util.*;\r\n\r\npublic class Main {\r\n\r\n  public static void main(String args[]) {\r\n    Main r = (new Main());\n\tScanner cin = new Scanner(System.in);\n\t\n\tint T = cin.nextInt();\n\tfor(int C=1; C<=T; ++C) {\n\t\n\t  int N = cin.nextInt();\n\t\n\t  int size = N * 2 - 1;\n\t  int count[] = new int[2501];\n\t\n\t  for(int i=0; i<size; ++i) {\n\t    for(int j=0; j<N; ++j) {\n\t      ++count[ cin.nextInt() ];\n\t    }\n\t  }\n\t\n\t  List<Integer> ans = new ArrayList<Integer>();\n\t  for(int i=1; i<=2500; ++i) {\n\t    if( count[i] % 2 != 0 ) { ans.add(i); }\n\t  }\n\t\n\t  System.out.print(\"Case #\" + C + \":\");\n\t  for( int v : ans ) {\n\t    System.out.print(\" \" + v);\n\t  }\n\t  System.out.println();\n\t\n\t}\r\n  }\r\n\r\n}\r\n", "idx": "6406"}
{"func": "package googlejam6.p408;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\nimport java.util.Random;\r\n\r\n\r\npublic class argus {\r\n\t\r\n\tpublic static void main(String args[]){\r\n\t\tFile input=new File(\"F:\\\\CodeJam\\\\argusIn.txt\");\r\n\t\tFile output=new File(\"F:\\\\CodeJam\\\\argusOut.txt\");\r\n\t\tBufferedWriter out=null;\r\n\t\tScanner s1;\r\n\t\ttry {\r\n\t\t\ts1 = new Scanner(input);\r\n\t\t\tString x=s1.nextLine();\r\n\t\t\tlong t=Long.parseLong(x);\r\n\t\t\ttry{\r\n\t\t\t\tout=new BufferedWriter(new FileWriter(output));\r\n\t\t\t\tfor(int i=0;i<t;i++){\r\n\t\t\t\t\tout.write(\"Case #\"+(i+1)+\": \");\r\n\t\t\t\t\t//out.newLine();\r\n\t\t\t\t\tint n=s1.nextInt();\r\n\t\t\t\t\tHashMap<Integer,Integer> a=new HashMap<Integer,Integer>();\r\n\t\t\t\t\tfor(int j=0;j<((2*n)-1)*n;j++){\r\n\t\t\t\t\t\tint temp=s1.nextInt();\r\n\t\t\t\t\t\t//System.out.println(temp);\r\n\t\t\t\t\t\tif(a.containsKey(temp)){\r\n\t\t\t\t\t\t\ta.put(temp, (a.get(temp))+1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\ta.put(temp, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tint arr[]=new int[n];\r\n\t\t\t\t\tint ct=0;\r\n\t\t\t\t\tfor(int p:a.keySet()){\r\n\t\t\t\t\t\tif(a.get(p)%2==1){\r\n\t\t\t\t\t\t\tSystem.out.println(p);\r\n\t\t\t\t\t\t\tarr[ct]=p;\r\n\t\t\t\t\t\t\tct++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tArrays.sort(arr);\r\n\t\t\t\t\tfor(int k=0;k<n;k++){\r\n\t\t\t\t\t\tout.write(arr[k]+\" \");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tout.newLine();\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\tout.close();\r\n\t\t\t\t\r\n\t\t\t}catch(Exception e){\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t} catch (FileNotFoundException e1) {\r\n\t\t\t\r\n\t\t\te1.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n", "idx": "6408"}
{"func": "package googlejam6.p409;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class Main6 {\n\tpublic static void main(String[] args) {\n\t\tMain6 m = new Main6();\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(\n\t\t\t\tSystem.in)));\n\t\tint t = in.nextInt(); // Scanner has functions to read ints, longs,\n\t\t\t\t\t\t\t\t// strings, chars, etc.\n\t\tfor (int i = 1; i <= t; ++i) {\n\t\t\tint times = in.nextInt();\n\t\t\tint total = 2*times*times-times;\n\t\t\tint[] input = new int[total];\n\t\t\tfor (int j = 0; j < total; j++) {\n\t\t\t\tinput[j] = in.nextInt();\n\t\t\t}\n\t\t\tSystem.out.print(\"Case #\" + i + \": \");\n\t\t\tint[] ans = new int[times];\n\t\t\tSet<Integer> set = new HashSet<Integer>();\n\t\t\tfor (int i1 = 0; i1 < input.length; i1++) {\n\t\t\t\tif(set.contains(input[i1])){\n\t\t\t\t\tset.remove(input[i1]);\n\t\t\t\t}else{\n\t\t\t\t\tset.add(input[i1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint t1 = 0;\n\t\t\tfor(int s : set){\n\t\t\t\tans[t1] = s;\n\t\t\t\tt1++;\n\t\t\t}\n\t\t\tArrays.sort(ans);\n\t\t\tfor (int i2 = 0; i2 < ans.length; i2++) {\n\t\t\t\tSystem.out.print(ans[i2]);\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}", "idx": "6409"}
{"func": "package googlejam6.p410;\n\r\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\nimport java.util.TreeSet;\r\nimport java.io.IOException;\r\n\r\n\r\npublic class RankAndFile {\r\n\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t\r\n\t\tString path =  \"B-large.in\";\r\n\t\tFile f = new File(path);\r\n\t\tPrintWriter out = null;\r\n\t\t\r\n\t\t\r\n\t\ttry{\r\n\t\t\tFile fi = new File(\"resultBlarge.txt\");\r\n\t\t\tfi.createNewFile();\r\n\t\t\tout = new PrintWriter(fi);\r\n\t\t\tScanner sc = new Scanner(f);\r\n\t\t\tint num = sc.nextInt();\r\n\t\t\t//sc.nextLine();\r\n\t\t\t\r\n\t\t\tfor(int k=0; k<num; k++){\r\n\t\t\t\t\r\n\t\t\t\tint n = sc.nextInt();\r\n\t\t\t\t// sc.nextLine();\r\n\t\t\tTreeSet<Integer> lista = new TreeSet<>();\t\r\n\t\t\t\t\r\n\t\t\t\tfor(int i=0; i<(2*n)-1; i++){\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(int j=0; j<n; j++){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tint z = sc.nextInt();\r\n\t\t\t\t\t//\tSystem.out.println(z);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(lista.contains(z)){\r\n\t\t\t\t\t\t\t//System.out.println(\"Removing: \" + lista.toString());\r\n\t\t\t\t\t\t\t//boolean flag = lista.remove(z);\r\n\t\t\t\t\t\t\tlista.remove(z);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\t//System.out.println(\"Adding: \" + lista.toString());\r\n\t\t\t\t\t\t\tlista.add(z);\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t//\tCollections.sort(lista);\r\n\r\n\t\t\t\tout.printf(\"Case #%d: \", (k+1));\r\n\t\t\t\tfor(Integer i : lista){\r\n\t\t\t\t\t\r\n\t\t\t\t\tout.print(i + \" \");\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\tout.println();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tsc.close();\r\n\t\t} catch (FileNotFoundException e){\r\n\t\t\tSystem.out.println(\"File not found.\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\tout.close();\r\n\t\t\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\t\r\n}\r\n", "idx": "6410"}
{"func": "package googlejam6.p411;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n/**\r\n * Created by Hojae Jung on 4/15/2016.\r\n */\r\npublic class RankAndFile {\r\n    public static void main(String... args) throws Exception {\r\n        Scanner scan = new Scanner(new File(\"B-large.in\"));\r\n        PrintWriter pout = new PrintWriter(new FileWriter(new File(\"output.txt\")));\r\n        int cases = Integer.parseInt(scan.nextLine());\r\n        int n;\r\n        short[] check;\r\n        String[][] nums;\r\n        String result;\r\n        for(int bb = 0; bb < cases; bb++){\r\n            result = \"\";\r\n            check = new short[2500];\r\n            n = Integer.parseInt(scan.nextLine());\r\n            nums = new String[2*n-1][];\r\n            for(int i=0; i<2*n-1; i++){\r\n                nums[i] = scan.nextLine().trim().split(\" \");\r\n                for(int j=0; j<n; j++){\r\n                    check[Integer.parseInt(nums[i][j])-1]++;\r\n                }\r\n            }\r\n            for(int i=0; i<2500; i++){\r\n                if(check[i]%2 == 1)\r\n                    result += (i+1) + \" \";\r\n            }\r\n            result = result.trim();\r\n            if(result.length() > 2*n){\r\n                System.out.println(\"error\");\r\n            }\r\n            pout.println(\"Case #\" + (bb+1) + \": \" + result);\r\n        }\r\n\r\n\r\n\r\n        pout.close();\r\n    }\r\n}\r\n", "idx": "6411"}
{"func": "package googlejam6.p416;\n\n\nimport java.io.BufferedOutputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.TreeMap;\n\n\npublic class B {\n\n\tpublic static void main(String args[]) {\n\n\t\tPrintStream printStream = null;\n\t\ttry {\n\t\t\tprintStream = new PrintStream(new BufferedOutputStream(new FileOutputStream(\"result/B-large.out\")));\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.setOut(printStream);\n\n\t\tScanner scInput = new Scanner(System.in);\n\t\tint T = scInput.nextInt() + 1;\n\t\tfor(int i = 1 ; i < T ; i++) {\n\t\t\tint N = scInput.nextInt();\n\t\t\tint listSize = N * 2 - 1;\n\t\t\tTreeMap<Integer, Integer> countMap = new TreeMap<Integer, Integer>();\n\t\t\tfor (int j = 0 ; j < listSize ; j++) {\n\t\t\t\tfor (int k = 0 ; k < N ; k++) {\n\t\t\t\t\tint currentNumber = scInput.nextInt();\n\t\t\t\t\tInteger currentNumberCount = countMap.get(currentNumber);\n\t\t\t\t\tif (currentNumberCount == null) {\n\t\t\t\t\t\tcountMap.put(currentNumber, 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcountMap.put(currentNumber, ++currentNumberCount);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\tfor(Entry<Integer, Integer> entry : countMap.entrySet()) {\n\t\t\t\tif (entry.getValue() % 2 == 1) {\n\t\t\t\t\tresult.append(\" \").append(entry.getKey());\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.format(\"Case #%d: %s\\n\", i, result.toString().trim());\n\t\t}\n\t\tscInput.close();\n\n\t\tprintStream.close();\n\n\t}\n\n}\n", "idx": "6416"}
{"func": "package googlejam6.p417;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class RankFile {\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\t//BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tPrintWriter out = new PrintWriter(new File(\"largeout.txt\"));\r\n\t\tint t = in.nextInt();\r\n\t\tfor(int i = 0;i<t;i++){\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] tracker = new int[2501];\r\n\t\t\tint end = (2*n-1)*n;\r\n\t\t\tint k;\r\n\t\t\tfor(int j = 0;j<end;j++){\r\n\t\t\t\tk = in.nextInt();\r\n\t\t\t\ttracker[k] = (++tracker[k])%2;\r\n\t\t\t}\r\n\t\t\tout.print(\"Case #\" + (i+1) + \":\");\r\n\t\t\tfor(int j = 0;j<2501;j++){\r\n\t\t\t\tif(tracker[j]!=0){\r\n\t\t\t\t\tout.print(\" \" + j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.print(\"\\n\");\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "6417"}
{"func": "package googlejam6.p418;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.util.HashSet;\r\nimport java.util.ArrayList;\r\nimport java.util.*;\r\nimport java.lang.StringBuilder;\r\nimport java.lang.Math;\r\nclass MyClass \r\n{\r\n\r\n\r\n\r\npublic static void main(String[] arguments) throws Exception\r\n{\r\nBufferedReader br=new BufferedReader(new FileReader(new File(\"C:\\\\Java\\\\A-small-attempt0.in\")));\r\nBufferedWriter bw=new BufferedWriter(new FileWriter(new File(\"C:\\\\Java\\\\A-large.out\")));\r\nBufferedWriter bw2=new BufferedWriter(new FileWriter(new File(\"C:\\\\Java\\\\PractiseData2.out\")));\t\r\n\r\nint T = java.lang.Integer.parseInt(br.readLine());\r\nString[] Line;\r\nint[] Arr = new int[2501];\r\nfor(int t=0;t<T;++t)\r\n{\r\n\r\n//initialize zero\r\nfor(int j=0;j<2501;j++)\r\n{\r\nArr[j]=0;\r\n}\r\n\r\nint N = java.lang.Integer.parseInt(br.readLine());\r\n\tfor(int n=0;n<(N*2-1);++n)\r\n\t{\r\n\t\tLine=br.readLine().split(\" \");\r\n\t\tfor(int i=0;i<N;i++)\r\n\t\t{\r\n\t\tArr[java.lang.Integer.parseInt(Line[i])]++;\r\n\t\t}\r\n\t}\r\n\r\n\r\nbw.write(\"Case #\"+(t+1)+\": \");\r\nint count=1;\r\nfor(int k=0;k<2501;k++)\r\n{\r\nif(Arr[k]>0)\r\nbw2.write(\"\"+k+\"=\"+Arr[k]+\" \");\r\nif(Arr[k]>0)\r\n{\r\nif(Arr[k]%2!=0)\r\n{\r\nif(count == N)\r\nbw.write(\"\"+(k));\r\nelse\r\nbw.write(\"\"+(k)+\" \");\r\ncount++;\r\n}\r\n}\r\n}\r\n\r\nbw.newLine();\r\n\r\n}\r\nbw.close();\r\nbw2.close();\r\n}\r\n}\r\n\r\n\r\n", "idx": "6418"}
{"func": "package googlejam6.p425;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class RankAndFile {\n    public static void main(String[] args) throws FileNotFoundException {\n\t// TODO Auto-generated method stub\n\tScanner sc = new Scanner(new File(\"B-large.in\"));\n\tint max = sc.nextInt();\n\tfor (int kkkk = 0; kkkk < max; kkkk++) {\n\t    // int a = sc.nextInt();\n\t    int lineNumber = sc.nextInt();\n\t    sc.nextLine();\n\t    HashMap<String, Integer> map = new HashMap<String, Integer>();\n\t    String[] line = new String[2 * lineNumber];\n\t    for (int i = 0; i < 2 * lineNumber - 1; i++) {\n\t\tString[] m = sc.nextLine().split(\" \");\n\t\tfor (String s : m) {\n\t\t    if (map.get(s) == null) {\n\t\t\tmap.put(s, 1);\n\t\t    } else {\n\t\t\tif (map.get(s) == 0) {\n\t\t\t    map.put(s, 1);\n\n\t\t\t} else {\n\t\t\t    map.put(s, 0);\n\n\t\t\t}\n\t\t    }\n\n\t\t}\n\t    }\n\t    ArrayList<Integer> arr = new ArrayList<Integer>();\n\t    for (String key : map.keySet()) {\n\t\tif(map.get(key)==1 && key !=\"\"){\n\t\t    \n\t\t    arr.add(Integer.parseInt(key));\n\t\t}\n\t    }\n\t    Collections.sort(arr);\n\t    StringBuilder sb = new StringBuilder();\n\t    sb.append(\"Case #\" + (kkkk + 1) + \": \");\n\t    \n\t    for(Integer k:arr){\n\t\tsb.append(k+\" \");\n\t    }\n\t    String str = sb.toString();\n\t    System.out.println(str.substring(0,str.length()-1));\n\t    \n\n\t    \n\t}\n\n    }\n\n}\n", "idx": "6425"}
{"func": "package googlejam6.p427;\n/* Filename: GCJ2016R1A_B.java\r\n * Author: Mushiyo\r\n */\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class GCJ2016R1A_B {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n//\t\t Scanner input = new Scanner(System.in);\r\n//\t\t PrintWriter out = new PrintWriter(System.out);\r\n\t\t Scanner input = new Scanner(new File(\"B-large.in\"));\r\n\t\t PrintWriter out = new PrintWriter(new File(\"pB.out\"));\r\n\r\n\t\twhile (input.hasNext()) {\r\n\t\t\tint T = input.nextInt();\r\n\r\n\t\t\tfor (int t = 1; t <= T; ++t) {\r\n\t\t\t\tint N = input.nextInt();\r\n\t\t\t\tint lineNum = 2 * N - 1;\r\n\t\t\t\tint[] countHeight = new int[2500+1];\r\n\t\t\t\t\r\n\t\t\t\tfor(int i = 0; i < lineNum; ++i){\r\n\t\t\t\t\tfor(int j = 0; j < N; ++j){\r\n\t\t\t\t\t\t++countHeight[input.nextInt()];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tout.printf(\"Case #%d: \", t);\r\n\t\t\t\tboolean isFirstNum = true;\r\n\t\t\t\tfor(int i = 0; i < countHeight.length; ++i){\r\n\t\t\t\t\tif(countHeight[i] % 2 == 1){\r\n\t\t\t\t\t\tif(isFirstNum){\r\n\t\t\t\t\t\t\tout.print(i);\r\n\t\t\t\t\t\t\tisFirstNum = false;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tout.printf(\" %d\", i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tout.println();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tout.close();\r\n\t\tinput.close();\r\n\t}\r\n}\r\n", "idx": "6427"}
{"func": "package googlejam6.p428;\nimport java.io.*;\nimport java.util.*;\n\npublic class RANK_AND_FILE {\n  public static void main (String [] t) throws IOException {\n    BufferedReader in = new BufferedReader (new InputStreamReader (System.in));\n    NavigableSet <Integer> set;\n    int T = Integer.parseInt (in.readLine ()), N, X;\n    \n    for (int i = 1; i <= T; i++) {\n      N = Integer.parseInt (in.readLine ());\n      set = new TreeSet <Integer> ();\n      \n      for (int n = 0; n < 2 * N - 1; n++) {\n        t = in.readLine ().split (\" \");\n        \n        for (int x = 0; x < t.length; x++) {\n          X = Integer.parseInt (t [x]);\n          \n          if (!set.add (X)) {\n            set.remove (X);\n          }\n        }\n      }\n      \n      System.out.print (\"Case #\" + i + \":\");\n      \n      for (int y : set) {\n        System.out.print (\" \" + y);\n      }\n      System.out.println ();\n    }\n  }\n}", "idx": "6428"}
{"func": "package googlejam6.p429;\n\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * Created by suleymanuslu on 4/15/16.\n * CJ16 R1A 2\n */\npublic class B {\n\n    String smallInput = \"res/r1A/B/b_small.in\";\n    String smallOutput = \"res/r1A/B/b_small.out\";\n    String bigInput = \"res/r1A/B/b_big.in\";\n    String bigOutput = \"res/r1A/B/b_big.out\";\n\n    int n;  // number of cases\n    int d;\n    int a[] = new int[2501];\n\n\n    public static void main(String[] args) {\n\n        B b = new B();\n        try {\n\t\t    Scanner sc = new Scanner(new FileReader(b.smallInput));\n\t\t    PrintWriter pw = new PrintWriter(b.smallOutput);\n\t\t    b.n = sc.nextInt();\n\t\t\n\t\t    for(int c=1; c<=b.n; c++) {\n\t\t        b.d = sc.nextInt();\n\t\t        for(int i1=0; i1<2501; i1++) {\n\t\t\t\t    b.a[i1] = 0;\n\t\t\t\t}\n\t\t        for (int i = 0; i < 2 * b.d * b.d - b.d; i++) {\n\t\t            int r = sc.nextInt();\n\t\t            b.a[r]++;\n\t\t        }\n\t\t        pw.print(\"Case #\"+c+\":\");\n\t\t        for(int j=0; j<2501; j++) {\n\t\t            if(b.a[j]%2==1)\n\t\t                pw.print(\" \"+j);\n\t\t        }\n\t\t        pw.println();\n\t\t    }\n\t\t    sc.close();\n\t\t    pw.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t    e.printStackTrace();\n\t\t}\n        //b.solve();\n        //b.writeOutput();\n    }\n}\n", "idx": "6429"}
{"func": "package googlejam6.p430;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\n/**\r\n * Created by Victor on 4/15/2016.\r\n */\r\npublic class rankandfile {\r\n\r\n    public static void main(String [] args) {\r\n        String filePath = \"C:\\\\Users\\\\Victor\\\\IdeaProjects\\\\googleJam\\\\files\\\\B-large (1).in\";\r\n        try {\r\n            BufferedReader br = new BufferedReader(new FileReader(filePath));\r\n            BufferedWriter bw = new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\Victor\\\\IdeaProjects\\\\googleJam\\\\files\\\\rankandfileresults.txt\"));\r\n            int count = 1;\r\n            Integer t = Integer.parseInt(br.readLine());\r\n\r\n            for (int tt =0; tt<t; tt++){\r\n                int[] heightArray = new int[2500];\r\n                Integer n = Integer.parseInt(br.readLine());\r\n                ArrayList<Integer> missing = new ArrayList<Integer>();\r\n\r\n                StringBuilder sb = new StringBuilder();\r\n                for (int nn = 0; nn < 2*n-1; nn++) {\r\n                    String list = br.readLine();\r\n                    for (int nnn = 0; nnn < n; nnn++) {\r\n                        Integer height = Integer.parseInt(list.split(\"\\\\s+\")[nnn]);\r\n                        heightArray[height-1] = heightArray[height-1] + 1;\r\n                    }\r\n                }\r\n                for (int i=0; i< heightArray.length; i++) {\r\n                    if (heightArray[i]%2 != 0 ){\r\n                        missing.add(i+1);\r\n                    }\r\n                }\r\n\r\n                Collections.sort(missing);\r\n                for (Integer height : missing){\r\n                    sb.append(height);\r\n                    sb.append(\" \");\r\n                }\r\n                bw.write(\"Case #\" + count + \": \" + sb.toString());\r\n                count++;\r\n                bw.newLine();\r\n\r\n\r\n            }\r\n            br.close();\r\n            bw.close();\r\n\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n\r\n    }\r\n}\r\n", "idx": "6430"}
{"func": "package googlejam6.p433;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Problem_B_Rank_and_File {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader leer = new BufferedReader(new FileReader(\"B-small-attempt0.in\"));\r\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"B-small-attempt0.out\"));\r\n\t\tStringBuilder salida = new StringBuilder();\r\n\t\tint casos = Integer.parseInt(leer.readLine());\r\n\t\tint [] pesos;\r\n\t\tint cont = 0, n;\r\n\t\tStringTokenizer partes;\r\n\t\twhile(casos-- != 0){\r\n\t\t\tpesos = new int[3000];\r\n\t\t\tn = Integer.parseInt(leer.readLine());\r\n\t\t\tfor(int i=0; i<2*n-1; i++){\r\n\t\t\t\tpartes = new StringTokenizer(leer.readLine());\r\n\t\t\t\twhile(partes.hasMoreTokens())\r\n\t\t\t\t\tpesos[Integer.parseInt(partes.nextToken())]++;\r\n\t\t\t}\r\n\t\t\tsalida.append(\"Case #\").append(++cont).append(\":\");\r\n\t\t\tfor(int i=0; i<pesos.length; i++){\r\n\t\t\t\tif(pesos[i] != 0 && pesos[i]%2 != 0)\r\n\t\t\t\t\tsalida.append(\" \").append(i);\r\n\t\t\t}\r\n\t\t\tsalida.append(\"\\n\");\r\n\t\t}\r\n\t\tout.append(salida);\r\n\t\tout.close();\r\n\t\tleer.close();\r\n\t\tSystem.out.print(salida);\r\n\t}\r\n}\r\n", "idx": "6433"}
{"func": "package googlejam6.p434;\n\n\nimport java.math.BigInteger;\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    public static Map<BigInteger, BigInteger> map = new HashMap<BigInteger, BigInteger>();\n    public static void main(String[] args) {\n        try {\n\n            String filePath = \"/Users/jimmychou516/Downloads/\";\n            String inputFileName = \"B-large.in.txt\";\n//            String inputFileName = \"D-small-attempt0.in.txt\";\n//            String inputFileName = \"D-large.in.txt\";\n            String outputFileName = \"output.txt\";\n            //File file = new File(args[0]);\n\n            // Uncomment to output the file\n            PrintStream myconsole = new PrintStream(new File(filePath+outputFileName));\n            System.setOut(myconsole);\n\n            Scanner in = new Scanner(new BufferedReader(new FileReader(new File(filePath + inputFileName))));\n\n            //Your Code Here\n            int n = in.nextInt(); // number of cases\n            for (int i = 1; i <= n; i++) {\n                int size = in.nextInt(); // number of N\n                List<Integer> list = new LinkedList<Integer>();\n\n                for (int cases = 1; cases <= size*size*2-size; cases++) {\n                    int num = in.nextInt();\n                    list.add(num);\n                }\n\n                Collections.sort(list);\n                int index = 0;\n                List<Integer> temp = new LinkedList<Integer>();\n                while (index < list.size() - 1) {\n                    if (list.get(index).equals(list.get(index + 1)) && index < list.size()) {\n                        index = index + 2;\n                    } else {\n                        temp.add(list.get(index));\n                        index++;\n                    }\n                }\n                if (temp.size() != size) {\n                    temp.add(list.get(list.size() - 1));\n                }\n\n                Collections.sort(temp);\n\n                String str = \"\";\n                for (Integer number : temp) {\n                    str = str + \" \" + number;\n                }\n                System.out.println(\"Case #\" + i + \": \"+ str.trim());\n\n            }\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n\n}\n", "idx": "6434"}
{"func": "package googlejam6.p435;\n\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class RankandFile {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint T = sc.nextInt();\r\n\t\t//sc.next();\r\n\t\tfor (int cases = 1; cases <= T; cases++) {\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\t/*int[][] arr = new int[2*N-1][N];\r\n\t\t\tint[][] sorted = new int[N][N];\r\n\t\t\tfor (int i = 0; i < 2*N-1; i++) {\r\n\t\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\t\tarr[i][j] = sc.nextInt();\r\n\t\t\t\t\t//System.out.print(s + \" \");\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t//System.out.println();\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < 2*N-1; i++) {\r\n\t\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\t\tSystem.out.print(arr[i][j] + \" \");\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t}\r\n\t\t\tfor (int round = 0; round < N; round++) {\r\n\t\t\t\tint min = 5000;\r\n\t\t\t\tint row = -1, col = -1;\r\n\t\t\t\tfor (int i = 0; i < 2*N-1; i++) {\r\n\t\t\t\t\tfor (int j = 0; j < round; j++)\r\n\t\t\t\t\t\tif (arr[i][j] != sorted[])\r\n\t\t\t\t\tif (arr[i][round] < min) {\r\n\t\t\t\t\t\tmin = arr[i][round];\r\n\t\t\t\t\t\trow = i;\r\n\t\t\t\t\t} else if (arr[i][round] <= min) {\r\n\t\t\t\t\t\tcol = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int i = round; i < N; i++)\r\n\t\t\t\t\tsorted[round][i] = arr[row][i];\r\n\t\t\t\tfor (int i = round; i < N; i++)\r\n\t\t\t\t\tsorted[i][round] = arr[col][i];\r\n\r\n\t\t\t\tSystem.out.println(\"BBBBBB\");\r\n\t\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\t\t\tSystem.out.print(sorted[i][j] + \" \");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t}*/\r\n\t\t\tint[] seen = new int[2501];\r\n\t\t\tfor (int i = 0; i < 2*N-1; i++) {\r\n\t\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\t\tint k = sc.nextInt();\r\n\t\t\t\t\tseen[k]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\" + cases + \":\");\r\n\t\t\tfor (int i = 0; i <= 2500; i++) {\r\n\t\t\t\tif (seen[i] % 2 == 1)\r\n\t\t\t\t\tSystem.out.print(\" \" + i);\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\t\r\n\t\t\t/*System.out.println(\"Case #\" + cases + \": \");\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\t\tSystem.out.print(sorted[i][j] + \" \");\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t}*/\r\n\t\t}\r\n\t\tsc.close();\r\n\t}\r\n\r\n}\r\n/*\r\n1\r\n3\r\n1 2 3\r\n2 3 5\r\n3 5 6\r\n2 3 4\r\n1 2 3\r\n*/", "idx": "6435"}
{"func": "package googlejam6.p437;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class RoundOneProblemTwo {\n\n    public static void main(String[] args) {\n\n//        String inPutFile = \"/Users/KiRaN/Desktop/CodeBase/Google_CodeBase/SheepSleep/src/small.in\";\n//        String outPutFile = \"/Users/KiRaN/Desktop/CodeBase/Google_CodeBase/SheepSleep/src/small.out\";\n        \n        String inPutFile = \"/Users/KiRaN/Desktop/CodeBase/Google_CodeBase/SheepSleep/src/large.in\";\n        String outPutFile = \"/Users/KiRaN/Desktop/CodeBase/Google_CodeBase/SheepSleep/src/large.out\";\n        \n        \n        try {\n\n            BufferedReader bufferedReader = new BufferedReader(new FileReader(inPutFile));\n            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(outPutFile));\n\n            // Total number of test cases\n            int noOfTestCases = Integer.valueOf(bufferedReader.readLine());\n            \n            \n            \n            for (int testCase = 0; testCase < noOfTestCases; testCase++){\n                \n                Set<Integer> distinctHeights = new HashSet<>();\n                Map<Integer,Integer> repetitionCount = new HashMap<>();\n                TreeSet<Integer> resultSet = new TreeSet<Integer>();\n                \n                int gridSize = Integer.parseInt(bufferedReader.readLine());\n                int noOfLinesToRead = 2*gridSize-1;\n                for(int i=0; i<noOfLinesToRead; i++){\n                    String currRow = bufferedReader.readLine();\n                    String[] heightsInCurrentRow = currRow.split(\" \");\n                    for(String a:heightsInCurrentRow) {\n                        int currHeight = Integer.valueOf(a);\n                        if(distinctHeights.contains(currHeight)) {\n                            int heightCount = repetitionCount.get(currHeight);\n                            repetitionCount.put(currHeight,heightCount+1);\n                        } else {\n                            distinctHeights.add(currHeight);\n                            repetitionCount.put(currHeight, 1);\n                        }\n                    }\n                    \n                }\n                \n                repetitionCount.entrySet().stream().filter(currRecord -> \n                    ((currRecord.getValue() & 1)!=0?true:false) == true\n                ).forEach(currRecord -> resultSet.add(currRecord.getKey()));\n                \n                bufferedWriter.write(\"Case #\" + (testCase + 1) + \": \" + resultSet.toString().replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\", \",\" \"));\n                System.out.print(\"Case #\" + (testCase + 1) + \": \" + resultSet.toString().replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\", \",\" \"));\n                bufferedWriter.write(\"\\n\");\n                System.out.print(\"\\n\");\n\n                \n\n            }\n                \n            bufferedReader.close();\n            bufferedWriter.close();\n\n        } catch (FileNotFoundException fileNotFoundException) {\n\n            System.out.println(\"Some Exception: \" + fileNotFoundException.getMessage());\n            fileNotFoundException.printStackTrace();\n\n        } catch (IOException ioException) {\n\n            System.out.println(\"Some Exception: \" + ioException.getMessage());\n            ioException.printStackTrace();\n\n        } catch (Exception exception) {\n            \n            System.out.println(\"Some Exception: \" + exception.getMessage());\n            exception.printStackTrace();\n        }\n\n    }\n\n}\n", "idx": "6437"}
{"func": "package googlejam6.p438;\n\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\n\npublic class RankAndFile {\n\n\tpublic static void main(String s[]) {\n\t\tRankAndFile solution = new RankAndFile();\n\t\tScanner scanner = null;\n\t\tStringBuilder builder = new StringBuilder();\n\t\ttry {\n\t\t\tscanner = new Scanner(new File(\"B-large.in\"));\n\t\t\tint T = scanner.nextInt();\n\t\t\tfor (int i = 0; i < T; i++) {\n\t\t\t\tint N = scanner.nextInt();\n\t\t\t\tint repeat = 2 * N - 1;\n\t\t\t\tint[][] lists = new int[repeat][N];\n\t\t\t\tfor (int j = 0; j < repeat; j++) {\n\t\t\t\t\tfor (int k = 0; k < N; k++) {\n\t\t\t\t\t\tlists[j][k] = scanner.nextInt();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbuilder.setLength(0);\n\t\t\t\tMap<Integer, Integer> countMap = new HashMap<>();\n\t\t\t\t\n\t\t\t\tfor (int j = 0; j < 2 * N - 1; j++) {\n\t\t\t\t\tfor (int k = 0; k < N; k++) {\n\t\t\t\t\t\tif (countMap.containsKey(lists[j][k])) {\n\t\t\t\t\t\t\tint count = countMap.get(lists[j][k]);\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\tcountMap.put(lists[j][k], count);\n\t\t\t\t\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcountMap.put(lists[j][k], 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tIterator<Entry<Integer, Integer>> iterator = countMap.entrySet().iterator();\n\t\t\t\tList<Integer> missingElements = new ArrayList<Integer>();\n\t\t\t\t\n\t\t\t\twhile (iterator.hasNext()) {\n\t\t\t\t\tEntry<Integer, Integer> entry = iterator.next();\n\t\t\t\t\tif (entry.getValue() % 2 == 1) {\n\t\t\t\t\t\tmissingElements.add(entry.getKey());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tCollections.sort(missingElements);\n\t\t\t\tList<Integer> missingList = missingElements;\n\t\t\t\tfor (int num : missingList) {\n\t\t\t\t\tbuilder.append(num + \" \");\n\t\t\t\t}\n\t\t\t\tSystem.out.println(String.format(\"Case #%d: %s\", i + 1, builder.toString()));\n\n\t\t\t}\n\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (scanner != null) {\n\t\t\t\tscanner.close();\n\t\t\t}\n\t\t}\n\t}\n}\n", "idx": "6438"}
{"func": "package googlejam6.p439;\nimport java.util.*;\nimport java.io.*;\nimport java.lang.StringBuffer;\n//import java.math.BigInteger;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int t = in.nextInt(); \n    for (int i = 1; i <= t; i++) {\n      int n = in.nextInt(); \n      \n      // use a counter for each number\n      // each number that has an odd count is in the missing list \n      Hashtable<Integer,Integer> counts = new Hashtable<Integer,Integer>();\n      int length = 2 * n * n - n;\n      for (int j = 1; j <= length; j++) {\n        int cur = in.nextInt();\n        if (counts.containsKey(cur)) {\n          int c = counts.get(cur);\n          c++;\n          counts.put(cur, c);\n        }else{\n          counts.put(cur, 1);\n        }\n      }\n      int[] list = new int[n];\n      int k = 0;\n      Set<Integer> keys = counts.keySet();\n      for (int key : keys) {\n        if (counts.get(key) % 2 != 0) {\n          list[k] = key;\n          k++;\n        }\n      }\n      Arrays.sort(list);\n      System.out.print(\"Case #\" + i + \": \");\n      for (int j = 0; j < n; j++) {\n        System.out.print(list[j] + \" \");\n\n      }\n      System.out.println();\n    }\n  }\n}\n", "idx": "6439"}
{"func": "package googlejam6.p440;\nimport java.io.*;\nimport java.util.*;\n\npublic class Q2 {\n\tprivate static int [] inputN;\n\tprivate static String [] inputH;\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = null;\n\t\ttry {\n\t\t\tsc = new Scanner(new FileReader(\"B-large.in\"));\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tString tStr = sc.nextLine();\n\t\tint t = 0;\n\t\ttry{\n\t\t\tt = Integer.parseInt(tStr);\n\t\t}catch(NumberFormatException nfe){\n\t\t\tnfe.printStackTrace();\n\t\t}\n\t\t\n\t\tinputH = new String[t];\n\t\tinputN = new int[t];\n\t\tfor(int i3 = 0; i3 < t ; i3++){\n\t\t\tint input = 0;\n\t\t\ttry{\n\t\t\t\tinput = Integer.parseInt(sc.nextLine());\n\t\t\t}catch(NumberFormatException nfe){\n\t\t\t\tnfe.printStackTrace();\n\t\t\t}\n\t\t\tinputN[i3] = input;\n\t\t\tinputH[i3] = \"\";\n\t\t\tfor(int j = 0; j< 2*inputN[i3] -1; j++)\n\t\t\t\tinputH[i3] += \" \" + sc.nextLine();\n\t\t}\n\t\t\n\t\tsc.close();\n\t\t//return in;\n\t\t\n\t\tString[] res = new String[inputN.length];\n\t\t\n\t\tfor(int i = 0; i < inputN.length; i++){\n\t\t\tString [] input = inputH[i].trim().split(\" \");\n\t\t\tSystem.out.println(Arrays.toString(input));\n\t\t\tArrayList<Integer> l = new ArrayList<Integer>();\n\t\t\tfor(String is : input){\n\t\t\t\tint input1 = 0;\n\t\t\t\ttry{\n\t\t\t\t\tinput1 = Integer.parseInt(is);\n\t\t\t\t}catch(NumberFormatException nfe){\n\t\t\t\t\tnfe.printStackTrace();\n\t\t\t\t}\n\t\t\t\tint v = input1;\n\t\t\t\tif(l.contains(new Integer(v))){\n\t\t\t\t\tl.remove(new Integer(v));\n\t\t\t\t}else{\n\t\t\t\t\tl.add(v);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tInteger [] miss = l.toArray(new Integer[0]);\n\t\t\tSystem.out.println(Arrays.toString(miss));\n\t\t\tint [] misslist = new int[miss.length];\n\t\t\tfor(int i1 = 0; i1 < miss.length; i1++){\n\t\t\t\tmisslist[i1] = miss[i1];\n\t\t\t}\n\t\t\tArrays.sort(misslist);\n\t\t\tString res1 = \"\";\n\t\t\tfor(int i2 : misslist){\n\t\t\t\tres1 += i2 + \" \";\n\t\t\t}\n\t\t\tres[i] = res1; \n\t\t\tSystem.out.println(res[i]);\n\t\t}\n\t\t\n\t\tFile out = new File(\"testOut.txt\");\n\t\tif(!out.exists()){\n\t\t\ttry {\n\t\t\t\tout.createNewFile();\n\t\t\t} catch (IOException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tPrintWriter pw = null;\n\t\ttry {\n\t\t\tpw = new PrintWriter(new FileWriter(out));\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfor(int i = 0; i < res.length ; i++){\n\t\t\tpw.write(\"Case #\" + (i+1) + \": \"+ res[i] + \"\\n\");\n\t\t}\n\t\t\n\t\tpw.close();\n\t\t\n\t}\n}\n", "idx": "6440"}
{"func": "package googlejam6.p441;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.lang.reflect.Array;\nimport java.util.Arrays;\nimport java.util.BitSet;\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\n\npublic class Q2 {\n\n\t// passed: small, large - 15 points\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tFileReader fileReader = new FileReader(\"/Users/joy/Documents/workspace/GCJ2016R1/B-large.in\");\n\t\tFileWriter fileWriter = new FileWriter(\"/Users/joy/Documents/workspace/GCJ2016R1/B-large.out\");\n\t\tBufferedReader in = new BufferedReader(fileReader);\n\t\tBufferedWriter out = new BufferedWriter(fileWriter);\n\t\t\n\t\tint t = Integer.parseInt(in.readLine());\n\t\t\n\t\t// per testcase\n\t\tfor(int i=0; i<t; i++) {\n\t\t\tint n = Integer.parseInt(in.readLine());\n\t\t\t\n\t\t\t//per line\n\t\t\tint[] missing = new int[n];\n\t\t\tBitSet b = new BitSet(2500);\n\t\t\tfor(int j=0; j<2*n-1; j++) {\n\t\t\t\tString[] input = in.readLine().split(\" \");\n\t\t\t\tfor(int k=0; k<n; k++) {\n\t\t\t\t\tb.flip(Integer.parseInt(input[k]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tint idx = 0;\n\t\t\tfor(int j=1; j<=2500; j++) {\n\t\t\t\tif(b.get(j)) {\n\t\t\t\t\tmissing[idx] = j;\n\t\t\t\t\tidx++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrays.sort(missing);\n\t\t\t\n\t\t\tString output = \"\";\n\t\t\tfor(int j: missing) {\n\t\t\t\toutput+=(j+\" \");\n\t\t\t}\n\t\t\tSystem.out.println(output);\n\t\t\tout.write(String.format(\"Case #%d: %s\",i+1, output.substring(0,output.length()-1)));\n\t\t\tif(i<t-1) \n\t\t\t\tout.write(\"\\n\");\n\t\t}\n\t\tin.close();\n\t\tout.close();\n\t}\n}\n", "idx": "6441"}
{"func": "package googlejam6.p442;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class B\r\n{\r\n    public static void main(String[] args) throws IOException {\r\n        long start = System.currentTimeMillis();\r\n        Scanner scanner = new Scanner(new File(\"./input_large.txt\"));\r\n        PrintWriter writer = new PrintWriter(\"./output_large.txt\");\r\n        int nTests = scanner.nextInt();\r\n        scanner.nextLine(); //skip line (i.e., next line)\r\n        \r\n        int bigN;\r\n        int numSheets;\r\n        \r\n        int[] possibleHeights; \r\n        \r\n        for (int i = 0; i < nTests; i++) {\r\n            bigN = scanner.nextInt();\r\n            numSheets = 2*bigN - 1;\r\n            \r\n            possibleHeights = new int[2501];\r\n            \r\n            writer.print(\"Case #\" + (i+1) + \":\");\r\n            \r\n            for(int j = 0; j < numSheets; j++)\r\n            {\r\n                scanner.nextLine(); //skip line (i.e., next line)\r\n                for(int k = 0; k < bigN; k++)\r\n                {\r\n                    possibleHeights[scanner.nextInt()]++;\r\n                }\r\n            }\r\n            \r\n            for(int height = 0; height < possibleHeights.length; height++)\r\n            {\r\n                if(possibleHeights[height]%2 == 1) writer.print(\" \" + height);\r\n            }\r\n             \r\n            writer.println(); //next line of output...\r\n        }\r\n        scanner.close();\r\n        writer.close();\r\n        long finish = System.currentTimeMillis();\r\n        System.out.println(\"Time=\" + (finish - start) + \"ms\");\r\n    }\r\n}\r\n", "idx": "6442"}
{"func": "package googlejam6.p446;\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.InputStreamReader;\n\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.ArrayList;\n\npublic class RankFile {\n\n\tpublic RankFile () {\n\t}\n\n\tpublic static void main(String [] argv) {\n\t\tRankFile t = new RankFile();\n\t\ttry {\n\t\t\t//BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"B-small-attempt0.in\")));\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"B-large.in\")));\n\t\t\t//BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"test.in\")));\n\t\t\tString line = br.readLine();\n\t\t\tint numCases = Integer.parseInt(line);\n\t\t\tint N = 0;\n\t\t\tfor(int i=0; i<numCases; i++) {\n\t\t\t\tN = Integer.parseInt(br.readLine());\n\t\t\t\tint [] n = new int [2501];\n\t\t\t\tfor(int j=0; j<2*N-1; j++) {\n\t\t\t\t\tline = br.readLine();\n\t\t\t\t\tString [] tokens = line.split(\" \"); \n\t\t\t\t\tfor(int k=0;k<N;k++)\n\t\t\t\t\t\tn[ Integer.parseInt(tokens[k]) ] ++;\n\t\t\t\t}\n\t\t\t\tStringBuffer sb = new StringBuffer();\n\t\t\t\tfor(int k=0; k<2501; k++) {\n\t\t\t\t\tif(n[k] % 2 == 1)\n\t\t\t\t\t\tsb.append(Integer.toString(k) + \" \");\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" +sb.toString().trim() );\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "6446"}
{"func": "package googlejam6.p449;\nimport java.util.Scanner;\n\n/**\n *\n * @author rahuljaisingh\n */\npublic class code {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int i = 1; i <= T; i++)\n        {\n            System.out.print(\"Case #\" + i + \": \");\n            int N = sc.nextInt();\n            int max = 0;\n            int C[][] = new int[2*N-1][N];\n            for(int j = 0; j < 2 * N - 1; j++)\n            {\n                for(int k = 0; k < N; k++)\n                {\n                    int F = sc.nextInt();\n                    if(F > max)\n                    {\n                        max = F;\n                    }\n                    C[j][k] = F;\n                }\n            }\n            int A[] = new int[max];\n            for(int j = 0; j < max; j++)\n            {\n                int check = j + 1;\n                for(int k = 0; k < 2 * N - 1; k++)\n                {\n                    for(int l = 0; l < N; l++)\n                    {\n                        if(C[k][l] == check)\n                        {\n                            A[j] = A[j] + 1;\n                        }\n                    }\n                }\n            }\n            for(int j = 0; j < max; j++)\n            {\n                if(A[j] % 2 == 1)\n                {\n                    System.out.print(j+1 + \" \");\n                }\n            }\n            System.out.println();\n        }\n    }\n    \n}\n", "idx": "6449"}
{"func": "package googlejam6.p453;\n\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Problem_B {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t    String s;\n\t    try {\n\t    \ts = in.readLine();\n\t    \tint case_num = Integer.parseInt(s);\n\t    \tfor (int kk = 0; kk < case_num; kk++) {\n\t    \t\ts = in.readLine();\n\t    \t\tint num = Integer.parseInt(s);\n\t    \t\t\n\t    \t\tint[] count = new int [2500];\n//\t    \t\tSystem.out.println(count[2500]);\n\t    \t\tfor (int row = 0; row < (2*num-1); row++) {\n\t    \t\t\ts = in.readLine();\n\t    \t\t\tString[] height = s.split(\" \");\n\t    \t\t\t\n\t    \t\t\tfor (int i = 0; i < height.length; i++) {\n//\t    \t\t\t\tSystem.out.print(height[i]);\n\t\t\t\t\t\tcount[Integer.parseInt(height[i])-1]++;\n\t\t\t\t\t}\n//\t    \t\t\tSystem.out.println();\n\t    \t\t}\n\t    \t\t\n\t    \t\tString ans = \"\";\n\t    \t\t\n\t    \t\tfor (int i = 0; i < count.length; i++) {\n//\t    \t\t\tSystem.out.println((i+1)+\" \"+count[i]);\n\t\t\t\t\tif (count[i]%2!=0) {\n\t\t\t\t\t\tans = ans + \" \" + (i+1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t    \t\t\n\t    \t\tSystem.out.println(\"Case #\"+(kk+1)+\":\"+ans);\n\t    \t}\n\t\t\t\n\t    } catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n", "idx": "6453"}
{"func": "package googlejam6.p454;\n\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by \u0421\u00f4 on 2016/4/16.\r\n */\r\npublic class RankAndFile {\r\n    public static void main(String[] args) {\r\n        FileInputStream fis = null;\r\n        try {\r\n            fis = new FileInputStream(\"B/B-large.in\");\r\n            PrintStream ps = new PrintStream(new FileOutputStream(\"B/large-result.out\"));\r\n            System.setIn(fis);\r\n            System.setOut(ps);\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        Scanner in = new Scanner(System.in);\r\n        PrintStream out = System.out;\r\n\r\n        int t = in.nextInt();\r\n        for (int i = 1; i <= t; i++){\r\n            int n = in.nextInt();\r\n            int[] height = new int[2501];\r\n            int num = (2 * n - 1) * n;\r\n            for (int j = 0; j < num; j++) {\r\n                int h = in.nextInt();\r\n                height[h]++;\r\n            }\r\n\r\n            out.format(\"Case #%d:\", i);\r\n            for (int j = 1; j < height.length; j++) {\r\n                if (height[j] % 2 == 1) out.format(\" %d\", j);\r\n            }\r\n            out.println();\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "6454"}
{"func": "package googlejam6.p456;\nimport java.util.*;\nimport java.io.*;\n\nimport javax.swing.text.TableView;\n\npublic class P2{\n\n   public static void main(String[] args){\n\t   \n      Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n      int T=in.nextInt();\n      \n      \n      for(int i=0;i<T;i++){\n    \t  int N=in.nextInt();\n    \t  HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();   \n    \t  HashSet<Integer> numbers=new HashSet<Integer>();\n    \t  int index0=0;\n    \t  for(int j=0;j<2*N-1;j++){\n    \t\t  for(int k=0;k<N;k++){\n    \t\t\t  int s=in.nextInt();\n    \t\t\t  if(hm.containsKey(s)){\n    \t\t\t\t  int number=hm.get(s)+1;\n    \t\t\t\t  hm.remove(s);\n    \t\t\t\t  hm.put(s, number);\n    \t\t\t  }\n    \t\t\t  else{\n    \t\t\t\t  hm.put(s, 1);\n    \t\t\t\t  numbers.add(s);\n    \t\t\t  }\n    \t\t\t      \n    \t\t  }\n    \t  }\n    \t  \n    \t  \n    \t  int[] missing=new int[N];\n    \t  int index=0;\n    \t  for(int num:numbers){\n    \t\t  int value=hm.get(num);\n    \t\t  if(value%2==1){\n    \t\t\t  missing[index]=num;\n    \t\t\t  index+=1;\n    \t\t  }\n    \t  }\n    \t \n    \t java.util.Arrays.sort(missing);\n    \t \n    \t String out=\"\";\n    \t for(int missed:missing){\n    \t\t out=out+missed+\" \";\n    \t }\n    \t  \n    \t System.out.println(\"Case #\"+(i+1)+\": \"+out);\n      }\n\n      in.close();\n      \n   }\n}\n", "idx": "6456"}
{"func": "package googlejam6.p457;\n\r\nimport java.util.Scanner;\r\npublic class RankAndFile {\r\n\r\n\tstatic Scanner sc=new Scanner(System.in);\r\n\tpublic static void main(String[] runOnce){\r\n\t\tint testCases=Integer.parseInt(sc.nextLine());\r\n\t\tfor(int caseNo=0;caseNo<testCases;caseNo++) {\n\t\t\tint N;\n\t\t\tboolean[] height=new boolean[2501];\n\t\t\tint[] remainingPeople,arrangedPeople;\n\t\t\t\n\t\t\tint currentRead,ram1,ram2,z;\n\t\t\t\n\t\t\t\n\t\t\tN=Integer.parseInt(sc.nextLine());\n\t\t\tfor(int y=0;y<((2*N)-1);y++){\n\t\t\t\tfor(int x=0;x<N;x++){\n\t\t\t\t\tcurrentRead=sc.nextInt();\n\t\t\t\t\t/*\n\t\t\t\t\tif(height[currentRead]) System.out.println(\"removing \"+currentRead);\n\t\t\t\t\telse System.out.println(\"adding \"+currentRead);*/\n\t\t\t\t\theight[currentRead]=!height[currentRead];\t\n\t\t\t\t}\n\t\t\t\tsc.nextLine();\n\t\t\t}\n\t\t\tremainingPeople=new int[N];\n\t\t\tint y=0;\n\t\t\tfor(int x=0;x<2501;x++){\n\t\t\t\tif(height[x]){\n\t\t\t\t\tremainingPeople[y]=x;\n\t\t\t\t\ty++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tram1=Integer.MAX_VALUE;\n\t\t\t\n\t\t\tfor(int x=0;x<N;x++) if(remainingPeople[x]<ram1) ram1=remainingPeople[x];\n\t\t\tarrangedPeople=new int[N];\n\t\t\tarrangedPeople[0]=ram1;\n\t\t\t\n\t\t\tfor(y=1;y<N;y++){\n\t\t\t\tram2=Integer.MAX_VALUE;\n\t\t\t\tfor(int x=0;x<N;x++){\n\t\t\t\t\tz=remainingPeople[x];\n\t\t\t\t\tif(z<ram2&&z>ram1){\n\t\t\t\t\t\tram2=z;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarrangedPeople[y]=ram1=ram2;\n\t\t\t}\n\t\t\tSystem.out.print(\"Case #\"+(caseNo+1)+\": \");\n\t\t\tfor(y=0;y<N;y++){\n\t\t\t\tSystem.out.print(arrangedPeople[y]);\n\t\t\t\tif(y!=N-1) System.out.print(\" \");\n\t\t\t}\n\t\t\tSystem.out.println(\"\");\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6457"}
{"func": "package googlejam6.p458;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\npublic class B {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tB b = new B();\r\n\t\ttry{\n\t\t\tBufferedReader br=new BufferedReader(new FileReader(\"B-large.in\"));\n\t\t\tBufferedWriter out=new BufferedWriter(new FileWriter(\"B-large.in\".split(\"\\\\.\")[0]+\"_output.txt\"));\n\t\t\tString s;\n\t\t\n\t\t\tif((s=br.readLine())!=null){\n\t\t\t\tint noLines = Integer.parseInt(s);\n\t\t\t\tif(noLines!=0){\n\t\t\t\t\tfor (int index = 0; index < noLines; index++) {\n\t\t\t\t\t\tif ((s = br.readLine()) != null) {\n\t\t\t\t\t\t\tint[][] inputMatrix = new int[2*Integer.parseInt(s.trim()) - 1][Integer.parseInt(s.trim())];\n\t\t\t\t\t\t\tfor(int i=0;i<(2*Integer.parseInt(s.trim()) - 1);i++){\n\t\t\t\t\t\t\t\tString inA = br.readLine();\n\t\t\t\t\t\t\t\tString[] tokenizer = inA.split(\" \");\n\t\t\t\t\t\t\t\tfor(int j =0;j<tokenizer.length;j++){\n\t\t\t\t\t\t\t\t\tinputMatrix[i][j] = Integer.parseInt(tokenizer[j]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tString outputString = \"Case #\" + (index + 1) + \": \";\n\t\t\t\t\t\t\tHashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();\n\t\t\t\t\t\t\tfor(int[] in : inputMatrix){\n\t\t\t\t\t\t\t\tfor(int key : in){\n\t\t\t\t\t\t\t\t\tif(hm.containsKey(key)){\n\t\t\t\t\t\t\t\t\t\thm.put(key, hm.get(key)+1);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\thm.put(key, 1);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tList<Integer> tempList = new ArrayList<>();\n\t\t\t\t\t\t\tfor(int key:hm.keySet()){\n\t\t\t\t\t\t\t\tif(hm.get(key)%2 != 0){\n\t\t\t\t\t\t\t\t\ttempList.add(key);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCollections.sort(tempList);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString returnStr = \"\";\n\t\t\t\t\t\t\tfor(int rI:tempList){\n\t\t\t\t\t\t\t\treturnStr += rI+\" \";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tString output1 = returnStr.trim();\n\t\t\t\t\t\t\toutputString += output1;\n\t\t\t\t\t\t\tSystem.out.println(outputString);\n\t\t\t\t\t\t\tout.write(outputString);\n\t\t\t\t\t\t\tout.newLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.close();\n\t\t\tbr.close();\n\t\t}\n\t\tcatch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6458"}
{"func": "package googlejam6.p459;\nimport java.util.*;\n\nclass Rank_And_File {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint t, n, i, j;\n\n\t\tt = sc.nextInt();\n\t\tfor(i=1; i<=t; i++) {\n\t\t\tn = sc.nextInt();\n\t\t\tint[] arr = new int[(2*n-1)*n];\n\t\t\tfor(j=0; j<arr.length; j++)\n\t\t\t\tarr[j] = sc.nextInt();\n\t\t\tint[] distinct = new int[arr.length]; \n\t\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\t\tint p = 0;\n\t\t\tfor(j=0; j<arr.length; j++) {\n\t\t\t\tif(!map.containsKey(arr[j])) {\n\t\t\t\t\tdistinct[p++] = arr[j];\n\t\t\t\t\tmap.put(arr[j], 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tmap.put(arr[j], map.get(arr[j]) + 1);\n\t\t\t}\n\t\t\tint cnt = 0;\n\t\t\tint[] missing = new int[n];\n\t\t\tfor(j=0; j<p; j++)\n\t\t\t\tif(map.get(distinct[j]) % 2 != 0)\n\t\t\t\t\tmissing[cnt++] = distinct[j];\n\t\t\tArrays.sort(missing);\n\n\t\t\tSystem.out.print(\"Case #\" + i + \":\");\n\t\t\tfor(j=0; j<n; j++)\n\t\t\t\tSystem.out.print(\" \" + missing[j]);\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n\n\n", "idx": "6459"}
{"func": "package googlejam6.p460;\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n  public static void main(String[] args) {\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    int testCaseNum = in.nextInt();\n\n    for (int i = 1; i <= testCaseNum; i++) {\n      int n = in.nextInt();\n      TreeMap<Integer, Integer> note = new TreeMap<Integer, Integer>();\n      for(int j = 0; j < 2 * n - 1; j++) {\n        for (int x = 0; x < n; x++) {\n          int soldier = in.nextInt();\n          if (note.containsKey(soldier)) {\n            note.put(soldier, note.get(soldier) + 1);\n          } else {\n            note.put(soldier, 1);\n          }\n        }\n      }\n\n      StringBuffer ret = new StringBuffer(\"Case #\");\n\tret.append(i);\n\tret.append(\": \");\n\t\n\tArrayList<Integer> missing = new ArrayList<Integer>();\n\tfor(Map.Entry<Integer, Integer> entry : note.entrySet()) {\n\t  if (entry.getValue() % 2 == 1) {\n\t    missing.add(entry.getKey());\n\t  }\n\t}\n\t\n\tCollections.sort(missing);\n\t\n\tSystem.out.print(ret);\n\tfor (int i1 = 0; i1 < missing.size(); i1++) {\n\t  System.out.print(missing.get(i1));\n\t  if(i1 != missing.size() -1) System.out.print(\" \");\n\t}\n\tSystem.out.println(\"\");\n    }\n  }\n}\n", "idx": "6460"}
{"func": "package googlejam6.p462;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.text.MessageFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.TreeMap;\r\n\r\npublic class ProblemB {\r\n\r\n    private static final String PROBLEM_CODE = \"B\";\r\n    private static final String INPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-large.in\", PROBLEM_CODE);\r\n//    private static final String INPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-small-attempt0.in\", PROBLEM_CODE);\r\n    private static final String OUTPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-out%s.txt\", PROBLEM_CODE, System.currentTimeMillis());\r\n\r\n\r\n    private static final String FORMAT = \"Case #{0}: {1}\";\r\n\r\n    public static void main(String[] args) {\r\n        ProblemB app = new ProblemB();\r\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(ProblemB.INPUT_PATH))))) {\n\t\t    List<String> answerList = new ArrayList<String>();\n\t\t    int testCaseCount = Integer.parseInt(br.readLine());\n\t\t    for (int testCaseIndex = 0; testCaseIndex < testCaseCount; testCaseIndex++) {\n\t\t        \n\t\t        int n = Integer.parseInt(br.readLine());\n\t\t        int[][] elem = new int[2*n-1][n];\n\t\t        for(int i = 0 ; i < 2*n-1;i++) {\n\t\t            String[] line = br.readLine().split(\" \");\n\t\t            for(int j = 0 ; j < n; j++) {\n\t\t                elem[i][j] = Integer.parseInt(line[j]);\n\t\t            }\n\t\t        }\n\t\t\t\tMap<Integer, Integer> map = new HashMap<>();\n\t\t\t\tfor(int[] eA: elem) {\n\t\t\t\t    for(int e : eA) {\n\t\t\t\t        Integer num = map.get(e);\n\t\t\t\t        if(num == null) {\n\t\t\t\t            num = 0;\n\t\t\t\t        }\n\t\t\t\t        num++;\n\t\t\t\t        map.put(e, num);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tMap<Integer, Integer> useMap = new TreeMap<>();\n\t\t\t\tfor(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\t\t\t\t    if(entry.getValue() % 2 == 1) {\n\t\t\t\t        Integer useNum = useMap.get(entry.getKey());\n\t\t\t\t        if(useNum == null) {\n\t\t\t\t            useNum = new Integer(0);\n\t\t\t\t        }\n\t\t\t\t        useNum++;\n\t\t\t\t        useMap.put(entry.getKey(), useNum);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tfor(int k : useMap.keySet()) {\n\t\t\t\t    int v = useMap.get(k);\n\t\t\t\t    for(int i = 0 ; i < v; i++) {\n\t\t\t\t        sb.append(k + \" \");\n\t\t\t\t    }\n\t\t\t\t}\n\t\t        String answer = sb.substring(0, sb.length() - 1); \n\t\t        answerList.add(answer);\n\t\t        \n\t\t        System.out.printf(\"%s: %s : %s \\r\\n\", testCaseIndex + 1, elem, answer);\n\t\t    }\n\t\t    try (BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File (ProblemB.OUTPUT_PATH))))){\n\t\t\t    for (int i = 0; i < answerList.size(); i++) {\n\t\t\t        Object[] ans = new Object[2];\n\t\t\t        ans[0] = String.valueOf(i + 1);\n\t\t\t        ans[1] = answerList.get(i);\n\t\t\t        String write = MessageFormat.format(ProblemB.FORMAT, ans);\n\t\t\t        bufferedWriter.write(write);\n\t\t\t        bufferedWriter.newLine();\n\t\t\t    }\n\t\t\t} catch (Exception e) {\n\t\t\t    e.printStackTrace();\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t    e.printStackTrace();\n\t\t}\r\n//        int n = 3;\r\n//        int[][] elem= new int[][]{\r\n//            {2, 3, 5},\r\n//            {2, 3, 4},\r\n//            {1, 2, 3},\r\n//            {3, 5, 6},\r\n//            {1, 2, 3},\r\n//        };\r\n//        System.out.println(app.solveProblem(n, elem));\r\n        \r\n        \r\n    }\r\n}\r\n\r\n", "idx": "6462"}
{"func": "package googlejam6.p463;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Scanner;\nimport java.util.TreeMap;\n\npublic class Round1A2 {\n\tpublic static void main(String[] args) {\n\t\tRound1A2 q1 = new Round1A2();\n\t\tScanner in = new Scanner(System.in).useDelimiter(\"\\\\n\");\n\t\tint numLines = in.nextInt();\n\t\t\n\t\t\n\t\tfor (int currLine = 0; currLine < numLines; currLine++) {\n\t\t\tint numRow = in.nextInt();\n\t\t\tTreeMap<Integer, Integer> hmap = new TreeMap<Integer,Integer>();\n\t\t\t\n\t\t\tint[][] array = new int[3][numRow * 2 - 1];\n\t\t\t\n\t\t\tfor (int i = 0; i < numRow * 2 - 1; i++) {\n\t\t\t\tString userInput = in.next();\n\t\t\t\tString[] tokens = userInput.split(\"\\\\s\");\n\t\t\t\t\n\t\t\t\tfor (int j = 0; j < tokens.length; j++) {\n\t\t\t\t\tif (hmap.containsKey(Integer.valueOf(tokens[j]))) {\n\t\t\t\t\t\tint value = hmap.get(Integer.valueOf(tokens[j])) + 1;\n\t\t\t\t\t\thmap.put(Integer.valueOf(tokens[j]), value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\thmap.put(Integer.valueOf(tokens[j]), 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/*for (int j = 0; j < tokens.length; j++) {\n\t\t\t\t\tarray[j][i] = Integer.valueOf(tokens[j]);\n\t\t\t\t}*/\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t/*for (int j = 0; j < numRow * 2 - 1; j++) {\n\t\t\t\tfor (int i = 0; i < 3; i++) {\n\t\t\t\t\tSystem.out.print(array[i][j]);\n\t\t\t\t}\n\t\t\t\tSystem.out.println();\n\t\t\t}*/\n\n\t\t\tint tempLine = currLine + 1;\n\t\t\tSystem.out.print(\"Case #\" + tempLine + \": \");\n\t\t\t\n\t\t\tString result = \"\";\n\t\t\tfor (int k : hmap.keySet()) {\n\t\t\t\tif (hmap.get(k) % 2 == 1) {\n\t\t\t\t\tresult += k + \" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult = result.substring(0, result.length()-1);\n\t\t\tSystem.out.println(result);\n\t\t}\n\t}\n}\n", "idx": "6463"}
{"func": "package googlejam6.p464;\n\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\t\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint testCases = in.nextInt();\n\t\tfor (int t=1; t<=testCases; t++) {\n\t\t\tint N = in.nextInt();\n\t\t\t\n\t\t\tint [][] a = new int [2*N-1][N];\n\t\t\t\n\t\t\tSet<Integer> marks = new HashSet<Integer>();\n\t\t\tfor (int i=0; i<2*N-1; i++) {\n\t\t\t\tfor (int j=0; j<N; j++) {\n\t\t\t\t\tint next = in.nextInt();\n\t\t\t\t\tif (marks.contains(next)) {\n\t\t\t\t\t\tmarks.remove(next);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmarks.add(next);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.print(\"Case #\"+t+\": \");\n\t\t\tfor (int i=0; i<N; i++) {\n\t\t\t\tint smallest = -1;\n\t\t\t\tfor (Integer mark : marks) {\n\t\t\t\t\tif (smallest == -1) smallest = mark;\n\t\t\t\t\telse if (mark<smallest) smallest = mark;\n\t\t\t\t}\n\t\t\t\tmarks.remove(smallest);\n\t\t\t\tSystem.out.print(smallest+(i==N-1 ? \"\" : \" \"));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t}\n\t\n}\n", "idx": "6464"}
{"func": "package googlejam6.p465;\nimport java.util.*;\nimport java.io.*;\npublic class Gcj {\n  private int T;\n  private BufferedReader buff;\n  final static private boolean IS_DEBUG=false;\n  // final static private boolean IS_DEBUG=true;\n  private String[] list;\n  private int N;\n  private int MAX_HEIGHT=2501;\n  private int[] soldiers=new int[MAX_HEIGHT];\n\n  Gcj(){\n    buff=new BufferedReader(new InputStreamReader(System.in));\n    try{\n      T=Integer.parseInt(buff.readLine());\n    }\n    catch(Exception e){\n      System.err.println(e);\n    }\n  }\n\n  public static final void main(final String[] args) {\n    Gcj r = new Gcj();\n\tfor(int i=0; i<r.T; i++){\n\t  System.out.print(String.format(\"Case #%d: \", i+1));\n\t  try{\n\t  // INIT VARIABLES HERE\n\t  r.soldiers=new int[r.MAX_HEIGHT];\n\t  r.N=Integer.parseInt(r.buff.readLine());\n\t  r.list=new String[2*r.N-1];\n\t  for(int i1=0; i1<2*r.N-1; i1++) r.list[i1]=r.buff.readLine();\n\t  if(Gcj.IS_DEBUG){\n\t  System.err.println(\"debug: \"+\"list=\"+Arrays.toString(r.list));\n\t  // System.out.format(\"       \"+\"variable=\\n\");\n\t}\n\t}\n\tcatch(Exception e){\n\t  System.err.println(e);\n\t}\n\t  PriorityQueue<Integer> set=new PriorityQueue<Integer>();\n\t\n\tfor(int i2=0; i2<2*r.N-1; i2++){\n\t  String[] line=r.list[i2].split(\" \");\n\t  for(int j=0; j<line.length; j++)\n\t    r.soldiers[Integer.parseInt(line[j])]++;\n\t}\n\t// debugInfo(Arrays.toString(soldiers));\n\tfor(int i1=0; i1<r.MAX_HEIGHT; i1++){\n\t  if(r.soldiers[i1]%2==1) set.add(i1);\n\t}\n\tif(Gcj.IS_DEBUG){\n\t  System.err.println(\"debug: \"+\"N=\"+r.N);\n\t  // System.out.format(\"       \"+\"variable=\\n\");\n\t}\n\tif(Gcj.IS_DEBUG){\n\t  System.err.println(\"debug: \"+\"set=\"+set);\n\t  // System.out.format(\"       \"+\"variable=\\n\");\n\t}\n\tSystem.out.println(set.toString().replaceAll(\", \", \" \").replace(\"[\", \"\").replace(\"]\", \"\"));\n\t}\n    return;\n  }\n}\n", "idx": "6465"}
{"func": "package googlejam6.p466;\nimport java.io.*;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n * Created by FengZH on 4/15/16.\n */\npublic class RankAndFile {\n\n    public static void main(String[] args) {\n        File input = new File(\"B-large.in copy.txt\");\n\t\ttry {\n\t\t    Scanner in = new Scanner(input);\n\t\t    int total = in.nextInt();\n\t\t    Writer writer = new BufferedWriter(new OutputStreamWriter(\n\t\t            new FileOutputStream(\"RankAndFileLargeOutput.out\"), \"utf-8\"));\n\t\t    for (int i = 1; i <= total; i++) {\n\t\t        int N = in.nextInt();\n\t\t        int[][] reminderList = new int[2 * N - 1][N];\n\t\t        for (int j = 0; j < 2 * N - 1; j++) {\n\t\t            for (int k = 0; k < N; k++) {\n\t\t                reminderList[j][k] = in.nextInt();\n\t\t            }\n\t\t        }\n\t\t\t\tint[] missing = new int[N];\n\t\t\t\tint[] height = new int[2500]; // default:0\n\t\t\t\tfor (int i1 = 0; i1 < 2500; i1++) {\n\t\t\t\t    height[i1] = 0;\n\t\t\t\t}\n\t\t\t\tint missIndex = 0;\n\t\t\t\tfor (int j1 = 0; j1 < 2 * N - 1; j1++) {\n\t\t\t\t    for (int k = 0; k < N; k++) {\n\t\t\t\t        height[reminderList[j1][k] - 1]++;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tfor (int i2 = 0; i2 < 2500; i2++) {\n\t\t\t\t    if (height[i2] % 2 != 0) {\n\t\t\t\t        missing[missIndex] = i2 + 1;\n\t\t\t\t        missIndex++;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tSystem.out.println(Arrays.toString(missing));\n\t\t        int[] missingList = missing;\n\t\t        String temp = String.format(\"Case #%d:\", i);\n\t\t        writer.write(temp);\n\t\t        for (int j = 0; j < N; j++) {\n\t\t            temp = String.format(\" %d\", missingList[j]);\n\t\t            writer.write(temp);\n\t\t        }\n\t\t        temp = String.format(\"%n\");\n\t\t        writer.write(temp);\n\t\t    }\n\t\t    writer.close();\n\t\t    in.close();\n\t\t} catch (IOException ioe) {\n\t\t    ioe.printStackTrace();\n\t\t}\n    }\n}\n", "idx": "6466"}
{"func": "package googlejam6.p471;\n\r\nimport java.util.Scanner;\r\n\r\npublic class Solution2 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tScanner scanner=new Scanner(System.in);\r\n\t\tint t=scanner.nextInt();\r\n\t\tfor(int i=0; i<t; i++){\r\n\t\t\tint n=scanner.nextInt();\r\n\t\t\tint[] ht = new int[2501];\r\n\t\t\tfor(int x=0; x<n; x++){\r\n\t\t\t\tfor(int y=0; y<(2*n-1); y++){\r\n\t\t\t\t\tht[scanner.nextInt()]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\"+(i+1)+\": \");\r\n\t\t\tfor(int j=1; j<ht.length; j++){\r\n\t\t\t\tif(ht[j]<1 || ht[j]%2==0){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.print(j+\" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n", "idx": "6471"}
{"func": "package googlejam6.p472;\nimport java.util.*;\r\n\r\n/**\r\n * Author: Destiner\r\n * Date: 16.04.2016\r\n */\r\npublic class A1_B_L {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        int T = scanner.nextInt();\r\n        for (int k = 0; k < T; k++) {\r\n            Map<Integer, Integer> mentionsMap = new HashMap<>();\r\n            int n = scanner.nextInt();\r\n            for (int i = 0; i < 2*n - 1; i++) {\r\n                for (int j = 0; j < n; j++) {\r\n                    int x = scanner.nextInt();\r\n                    if (!mentionsMap.containsKey(x)) {\r\n                        mentionsMap.put(x, 0);\r\n                    }\r\n                    // Increase mentions number\r\n                    mentionsMap.put(x, mentionsMap.get(x) + 1);\r\n                }\r\n            }\r\n            System.out.print(\"Case #\");\r\n            System.out.print(k + 1);\r\n            System.out.print(\": \");\r\n            List<Integer> weirdoList = new ArrayList<>();\r\n            for (int i = 1; i <= 2500; i++) {\r\n                if (!mentionsMap.containsKey(i)) {\r\n                    continue;\r\n                }\r\n                if (mentionsMap.get(i) % 2 != 0) {\r\n                    weirdoList.add(i);\r\n                }\r\n            }\r\n            for (Integer weirdo : weirdoList) {\n\t\t\t    System.out.print(weirdo);\n\t\t\t    System.out.print(' ');\n\t\t\t}\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n", "idx": "6472"}
{"func": "package googlejam6.p473;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Collections;\nimport java.util.LinkedList;\n\npublic class Main\n{\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\t//-----------------------------------------------------------\n\t\tint casos=Integer.parseInt(br.readLine()), N;\n\t\t\n\t\tString rta, aux[];\n\t\tLinkedList<Integer> soldados=new LinkedList<Integer>(), segunda=new LinkedList<Integer>();\n\t\t\n\t\tfor(int c=1; c<=casos; c++)\n\t\t{\n\t\t\tN=Integer.parseInt(br.readLine());\n\t\t\tsoldados.clear();\n\t\t\tsegunda.clear();\n\t\t\trta=\"\";\n\t\t\t\n\t\t\tfor(int i=0; i<2*N-1; i++)\n\t\t\t{\n\t\t\t\taux=br.readLine().split(\"\\\\s+\");\n\t\t\t\tfor(int j=0; j<N; j++)\n\t\t\t\t\tsoldados.add(Integer.parseInt(aux[j]));\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(soldados);\n\t\t\twhile(!soldados.isEmpty())\n\t\t\t{\n\t\t\t\tint este=soldados.poll();\n\t\t\t\tif(!soldados.isEmpty())\n\t\t\t\t{\n\t\t\t\t\tint otro=soldados.peek();\n\t\t\t\t\tif(este==otro) soldados.poll();\n\t\t\t\t\telse segunda.add(este);\n\t\t\t\t}\n\t\t\t\telse segunda.add(este);\n\t\t\t}\n\t\t\t\n\t\t\trta=segunda.toString();\n\t\t\trta=rta.substring(1, rta.length()-1).replaceAll(\",\",\"\");\n\t\t\t\n\t\t\tSystem.out.printf(\"Case #%d: %s\\n\", c, rta);\n\t\t}\n\t\t//-----------------------------------------------------------\n\t\tbr.close();\n\t}\n}\n", "idx": "6473"}
{"func": "package googlejam6.p474;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\n\r\n/**\r\n * Created by Vo Minh Khoi, SMU, minhkhoi.vo.2013@sis.smu.edu.sg\r\n */\r\npublic class B {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = null;\r\n        PrintWriter w = null;\r\n        try {\r\n            w = new PrintWriter(\r\n                    new BufferedWriter(\r\n                            new FileWriter(\"out-rankfile-l.txt\", false)));\r\n            sc = new Scanner(new File(\"B-large.in\"));\r\n//             sc = new Scanner(\"1\\n\" +\r\n//                     \"3\\n\" +\r\n//                     \"1 2 3\\n\" +\r\n//                     \"2 3 5\\n\" +\r\n//                     \"3 5 6\\n\" +\r\n//                     \"2 3 4\\n\" +\r\n//                     \"1 2 3\\n\"\r\n//             );\r\n\r\n            sc.useDelimiter(\" |\\n\");\r\n\r\n            int T = sc.nextInt();\r\n            for (int z = 0; z < T; z++) {\r\n                N = sc.nextInt();\r\n                sc.nextLine();\r\n                list = new ArrayList<>(2*N - 1);\r\n                for(int i=0;i< 2*N - 1;i++){\r\n                    String s = sc.nextLine();\r\n                    list.add(s.split(\" \"));\r\n                }\n\t\t\t\tString result = \"\";\n\t\t\t\tTreeSet<Integer> res = new TreeSet<>();\n\t\t\t\tHashSet<String> set = new HashSet<>();\n\t\t\t\t\n\t\t\t\tfor(String[] s: list){\n\t\t\t\t    for(String ss : s){\n\t\t\t\t        if(set.contains(ss)) set.remove(ss);\n\t\t\t\t        else set.add(ss);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(String ss: set){\n\t\t\t\t    res.add(Integer.valueOf(ss));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(Integer in : res){\n\t\t\t\t    result += (in + \" \");\n\t\t\t\t}\n\t\t\t\tresult = result.substring(0, result.length() - 1);\r\n\r\n                ////////////////////////////////////////////////////\r\n                String ress = result;\r\n                System.out.println(\"Case #\" + (z + 1) + \": \" + ress);\r\n                w.println(\"Case #\" + (z + 1) + \": \" + ress);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            sc.close();\r\n            w.close();\r\n        }\r\n    }\r\n\r\n    ///////////variables\r\n    static int N;\r\n//    static int[] Ns;\r\n    static ArrayList<String[]>  list;\r\n\r\n}\r\n", "idx": "6474"}
{"func": "package googlejam6.p475;\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.Enumeration;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner scn = new Scanner(System.in);\r\n\t\tint t = Integer.parseInt(scn.nextLine());\r\n\t\tString str;\r\n\t\tString arr[];\r\n\t\tfor(int i=1;i<=t;i++){\r\n\t\t\tint n = Integer.parseInt(scn.nextLine());\r\n\t\t\tHashMap<Integer, Integer> data = new HashMap<Integer, Integer>();\r\n\t\t\tfor(int j=1;j<2*n;j++){\r\n\t\t\t\tstr = scn.nextLine();\r\n\t\t\t\tarr = str.split(\" \");\r\n\t\t\t\tfor(int k=0;k<n;k++){\r\n\t\t\t\t\tint val = Integer.parseInt(arr[k]);\r\n\t\t\t\t\tif(data.containsKey(val)){\r\n\t\t\t\t\t\tdata.put(val, data.get(val)+1);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tdata.put(val, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tArrayList<Integer> missingList = new ArrayList<Integer>();\r\n\t\t\tIterator<Integer> ite = data.keySet().iterator();\r\n\t\t\twhile (ite.hasNext()) {\r\n\t\t\t\tInteger key = (Integer) ite.next();\r\n\t\t\t\tInteger cnt = data.get(key);\r\n\t\t\t\tif(cnt%2==1)\r\n\t\t\t\t\tmissingList.add(key);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tCollections.sort(missingList);\r\n\t\t\t\r\n\t\t\tSystem.out.print(\"Case #\" + i + \": \");\r\n\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\tif(j>0)\r\n\t\t\t\t\tSystem.out.print(\" \"); \r\n\t\t\t\tSystem.out.print(missingList.get(j));\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\t\r\n\t\tscn.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "6475"}
{"func": "package googlejam6.p476;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.util.Map.Entry;\r\n\r\npublic class Round1Rank {\r\n\r\n\tstatic BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\r\n\r\n\tstatic ArrayList<String> list = new ArrayList<String>();\r\n\r\n\tstatic Map<Integer, Integer> map = new HashMap<Integer, Integer>();\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\t// TODO Auto-generated method stub\r\n\r\n\t\tint n = Integer.parseInt(bf.readLine());\r\n\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\r\n\t\t\tint m = Integer.parseInt(bf.readLine());\r\n\t\t\tint Len = (2 * m) - 1;\r\n\t\t\tint[] ans = new int[m];\r\n\t\t\tint ansC = 0;\r\n\t\t\tfor (int j = 0; j < Len; j++) {\r\n\t\t\t\tfor (String s : bf.readLine().split(\" \")) {\r\n\t\t\t\t\tint c = Integer.parseInt(s);\r\n\t\t\t\t\tif (map.containsKey(c)) {\r\n\t\t\t\t\t\tint val = map.get(c);\r\n\t\t\t\t\t\tmap.put(c, val + 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmap.put(c, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (Entry<Integer, Integer> item : map.entrySet()) {\r\n\t\t\t\tif (item.getValue() % 2 != 0)\r\n\t\t\t\t\tans[ansC++] = item.getKey();\r\n\t\t\t}\r\n\t\t\tArrays.sort(ans);\r\n\t\t\tString fans = \"\";\r\n\t\t\tfor (int j = 0; j < ans.length; j++) {\r\n\t\t\t\tfans += \" \" + ans[j];\r\n\t\t\t}\r\n\t\t\tmap.clear();\r\n\t\t\tlist.add(fans);\r\n\t\t}\r\n\t\tfor (int i = 0; i < list.size(); i++) {\r\n\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \":\" + list.get(i));\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6476"}
{"func": "package googlejam6.p479;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\n\npublic class RankFiles {\n\tpublic static void main(String[] args) throws IOException{\n\t\tRankFiles rf = new RankFiles();\n\t\t//System.out.println(lw.lastWord(\"CAB\"));\n\t\tString inputPath = args[0];\n\t\tString outputPath = args[1];\n\t\tFileReader fileReader = new FileReader(inputPath);\n        BufferedReader bufferedReader = new BufferedReader(fileReader);\n        String line = null;\n        int size = Integer.parseInt(bufferedReader.readLine());\n        //String[] tests = new String[size];\n        ArrayList<ArrayList<ArrayList<Integer>>> tests = new ArrayList<ArrayList<ArrayList<Integer>>>();\n        int i = 0;\n        while(i < size) {\n        \tint d = Integer.parseInt(bufferedReader.readLine());\n        \tArrayList<ArrayList<Integer>> test = new ArrayList<ArrayList<Integer>>();\n        \tfor (int j = 2*d - 1; j > 0; j--){\n        \t\tline = bufferedReader.readLine();\n        \t\tArrayList<Integer> lineHeights = new ArrayList<Integer>();\n        \t\tfor (String s : line.split(\" \")) lineHeights.add(Integer.parseInt(s));\n        \t\ttest.add(lineHeights);\n        \t}\n        \ttests.add(test);\n            i++;\n        }   \n        // Always close files.\n        bufferedReader.close();\n\t\tArrayList<String> output = new ArrayList<String>();\n\t\tfor (int j = 0; j < size; j++) {\n\t\t\t//int out = pc.flipAllPancakes(tests[j]);\n\t\t\tArrayList<ArrayList<Integer>> test = tests.get(j);\n\t\t\tHashMap<Integer, Integer> stats = new HashMap<Integer, Integer>();\n\t\t\tint[] res = new int[(test.size()+1)/2];\n\t\t\tfor (ArrayList<Integer> ai : test){\n\t\t\t\tfor (Integer h : ai){\n\t\t\t\t\tif (stats.containsKey(h)) stats.put(h, stats.get(h)+1);\n\t\t\t\t\telse stats.put(h, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint k = 0;\n\t\t\tfor (Integer h : stats.keySet()){\n\t\t\t\tif (stats.get(h)%2 == 1) res[k++] = h; \n\t\t\t}\n\t\t\tArrays.sort(res);\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor (int ni : res) sb.append(\" \"+ni);\n\t\t\tString out = sb.toString();\n            output.add(\"Case #\"+(j+1)+\":\"+out);\n            System.out.println(out);\n\t\t}\n\t\t\n\t\tPath file = Paths.get(outputPath);\n\t\tFiles.write(file, output, Charset.forName(\"UTF-8\"));\n\t}\n}\n", "idx": "6479"}
{"func": "package googlejam6.p482;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.Writer;\r\nimport java.util.*;\r\npublic class RankAndFile {\r\n\r\n\tpublic static void main(String args[]) throws Exception {\r\n\t\tWriter writer = null;\r\n\t\tScanner scanner = null;\r\n\t\ttry{\r\n\t\t\tscanner= new Scanner(new BufferedReader(new FileReader(\"input_files/B-large.in\")));\r\n\t\t\twriter = new BufferedWriter(new OutputStreamWriter(\r\n\t\t\t\t\tnew FileOutputStream(\"output_files/rankfile_output_large.txt\"), \"utf-8\")); \r\n\r\n\t\t\tint noOfTestCases = scanner.nextInt();\r\n\t\t\tSystem.out.println(noOfTestCases);\r\n//\t\t\tSet<Integer> set =null;\r\n\t\t    SortedSet<Integer> sortedSet =null; \r\n\r\n\t\t\tfor(int i =0;i<noOfTestCases;i++){\r\n\t\t\t\tHashMap<Integer, Integer> map = new HashMap<>();\r\n//\t\t\t\tset = new HashSet<>();\r\n\t\t\t\tsortedSet = new TreeSet<>(); \r\n\t\t\t\tint noOfValues = scanner.nextInt();\r\n//\t\t\t\tSystem.out.println(\"no of values : \"+noOfValues);\r\n\t\t\t\tfor(int j=0;j<(noOfValues*2-1)*noOfValues;j++){\r\n\t\t\t\t\tint val = scanner.nextInt();\r\n\t\t\t\t\tif(!map.containsKey(val))\r\n\t\t\t\t\t\tmap.put(val, 1);\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tint value = map.get(val);\r\n\t\t\t\t\t\tmap.put(val, value+1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (Map.Entry<Integer, Integer> entry : map.entrySet()) {\r\n\t\t\t\t\tint key = entry.getKey();\r\n\t\t\t\t\tint value = entry.getValue();\r\n//\t\t\t\t\tSystem.out.println(key + \" : \"+value);\r\n\t\t\t\t\tif(value%2!=0){\r\n\t\t\t\t\t\tsortedSet.add(key);\r\n\t\t\t\t\t\tif(sortedSet.size()==noOfValues)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tString printLine = \"Case #\"+(i+1)+\": \";\r\n//\t\t\t\tSystem.out.println(Arrays.toString(sortedSet.toArray()));\r\n//\t\t\t\tfor(int p =0;p<set.size();p++)\r\n\t\t\t\t\tfor(Integer in : sortedSet)\r\n\t\t\t\t\t\tprintLine+=in+\" \";\r\n\t\t\t\t\tprintLine = printLine.trim();\r\n\t\t\t\t\tprintLine+=\"\\n\";\r\n\t\t\t\t\twriter.write(printLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcatch (Exception e){\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tscanner.close();\r\n\t\t\twriter.close();\t\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6482"}
{"func": "package googlejam6.p483;\nimport java.util.Scanner;\r\nimport java.util.List;\r\nimport java.util.ArrayList;\r\n/* Kristin Hamilton\r\n * 15-Apr-2016\r\n */\r\npublic class RankAndFile\r\n{\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tStringBuilder sb = new StringBuilder();\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint t = sc.nextInt();\r\n\t\tString [] soldiers = new String[]{};\r\n\t\tList<Integer> soldierList = new ArrayList<Integer>();\r\n\t\tint n = 0;\r\n\t\tint intCount = 0;\r\n\t\tint sld = 0;\r\n\t\tint sldIndex = 0;\r\n\t\t\r\n\t\tfor(int i = 1; i < t + 1; i++)\r\n\t\t{\r\n\t\t\tsb.append(\"Case #\" + i + \": \");\r\n\t\t\tn = sc.nextInt();\r\n\t\t\tsc.nextLine();\r\n\t\t\tsoldierList.clear();\r\n\t\t\tintCount = ((n * n) + (n * (n - 1)));\r\n\t\t\t\r\n\t\t\tfor(int j = 0; j < intCount; j++)\r\n\t\t\t{\r\n\t\t\t\tsld = (Integer) sc.nextInt();\r\n\t\t\t\tsldIndex = soldierList.indexOf(sld);\r\n\t\t\t\t\r\n\t\t\t\tif(sldIndex > -1)\r\n\t\t\t\t{\r\n\t\t\t\t\tsoldierList.remove(sldIndex);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tsoldierList.add(sld);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tsoldierList.sort(null);\r\n\t\t\tfor(int j = 0; j < soldierList.size(); j++)\r\n\t\t\t{\r\n\t\t\t\tsb.append(soldierList.get(j));\r\n\t\t\t\tif(j < soldierList.size() - 1) sb.append(\" \");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(i < t) sb.append(\"\\n\");\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(sb);\r\n\t}\r\n}\r\n", "idx": "6483"}
{"func": "package googlejam6.p484;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class B {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tScanner input = new Scanner(new File(\"D:/x\u0467\u03f0/eclipse2/eclipseWorkSpace/GoogleCodeJam2016/src/input/roundA1/B-large.in\"));\r\n\t\t\ttry {\r\n\t\t\t\tFileWriter fw = new FileWriter(new File(\"D:/x\u0467\u03f0/eclipse2/eclipseWorkSpace/GoogleCodeJam2016/src/output/roundA1/B-large.out\"));\r\n\t\t\t\tint caseNum = Integer.parseInt(input.nextLine());\r\n\t\t\t\tfor(int i = 1; i <= caseNum; i++) {\r\n\t\t\t\t\tint N = Integer.parseInt(input.nextLine());\r\n\t\t\t\t\tint[] cnt = new int[2501];\r\n\t\t\t\t\tint total = 2 * N - 1;\r\n\t\t\t\t\tfor(int j = 0; j < total; j++) {\r\n\t\t\t\t\t\tString list = input.nextLine();\r\n\t\t\t\t\t\tString[] strArray = list.split(\"\\\\s{1,}\");\r\n\t\t\t\t\t\tfor(int k = 0; k < N; k++) {\r\n\t\t\t\t\t\t\tcnt[Integer.parseInt(strArray[k])]++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tint[] missingList = new int[N];\r\n\t\t\t\t\tint k = 0;\r\n\t\t\t\t\tfor(int j = 1; j < 2501; j++) {\r\n\t\t\t\t\t\tif(cnt[j] % 2 != 0) {\r\n\t\t\t\t\t\t\tmissingList[k++] = j;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(k == N) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tArrays.sort(missingList);\r\n\t\t\t\t\tString output = \"\";\r\n\t\t\t\t\tfor(int j = 0; j < N; j++) {\r\n\t\t\t\t\t\toutput += missingList[j] + \" \";\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutput = \"Case #\" + i + \": \" + output + \"\\n\";\r\n\t\t\t\t\tfw.write(output);\r\n\t\t\t\t}\r\n\t\t\t\tfw.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tinput.close();\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6484"}
{"func": "package googlejam6.p485;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintStream;\nimport java.util.*;\n\n/**\n * Created by roide on 4/15/16.\n */\npublic class RandAndFile {\n    public static void main(String args[]) {\n        RandAndFile obj = new RandAndFile();\n        try {\n            System.setOut(new PrintStream(new File(\"/home/roide/codejam/src/roide/rankfile/output_large.txt\")));\n\t\t\tString fileName = \"/home/roide/codejam/src/roide/rankfile/B-large.txt\";\n\t\t\tFile f = new File(fileName);\n\t\t\tScanner scan = new Scanner(f);\n\t\t\tint nCases = scan.nextInt();\n\t\t\tfor(int i=1; i<=nCases; i++) {\n\t\t\t    int N = scan.nextInt();\n\t\t\t    int count = (2*N-1) * N;\n\t\t\t    TreeSet<Integer> set = new TreeSet<>();\n\t\t\t    for(int j=0;j<count;j++) {\n\t\t\t        int next = scan.nextInt();\n\t\t\t        if(set.contains(next)) {\n\t\t\t            set.remove(next);\n\t\t\t        } else {\n\t\t\t            set.add(next);\n\t\t\t        }\n\t\t\t    }\n\t\t\t\tStringBuilder ans = new StringBuilder();\n\t\t\t\tfor(Integer i1:set) {\n\t\t\t\t    ans.append(i1).append(\" \");\n\t\t\t\t}\n\t\t\t    String val = ans.toString();\n\t\t\t    System.out.println(\"Case #\" + i + \": \" + val);\n\t\t\t}\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": "6485"}
{"func": "package googlejam6.p486;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.math.BigInteger;\r\nimport java.util.StringTokenizer;\r\nimport java.util.Collection;\r\nimport java.lang.Object;\r\nimport java.util.Arrays;\r\nimport java.lang.Math;\r\nimport java.util.*;\r\n \r\nclass maxisum\r\n{\r\n\tstatic int[] freq=new int[10005];\r\n\tstatic int[] ans=new int[10005];\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n        StringTokenizer st=new StringTokenizer(br.readLine());\r\n        int t = Integer.parseInt(st.nextToken());\r\n        int i,j;\r\n        int k;\r\n        for(i=1;i<=t;i++)\r\n        {\r\n        \t//System.out.print(\"Case #\"+i+\": \");\r\n        \tArrays.fill(freq,0);\r\n        \tArrays.fill(ans,0);\r\n        \tst=new StringTokenizer(br.readLine());\r\n        \tint n = Integer.parseInt(st.nextToken());\r\n        \t//freq = new int[n*n+1];\r\n        \t//ans = new int[n*n+1];\r\n        \tfor(j=0;j<2*n-1;j++)\r\n        \t{\r\n        \t\tst=new StringTokenizer(br.readLine());\r\n        \t\tfor(k=0;k<n;k++)\r\n        \t\t{\r\n        \t\t\tint temp = Integer.parseInt(st.nextToken());\r\n        \t\t\tfreq[temp]++;\r\n        \t\t}\r\n        \t}\r\n        \t//System.out.println(\"fre \"+Arrays.toString(freq));\r\n        \tint m =0;\r\n        \tfor(k=0;k<freq.length;k++)\r\n        \t{\r\n        \t\t\r\n        \t\t//System.out.println(\"frrqk= \"+freq[k]);\r\n        \t\tif(freq[k]%2 != 0)\r\n        \t\t{\r\n        \t\t\t//System.out.println(\"k= \"+k);\r\n        \t\t\tans[m++] = k;\r\n        \t\t}\r\n        \t}\r\n        \tArrays.sort(ans);\r\n        \t//System.out.println(Arrays.toString(ans));\r\n        \tSystem.out.print(\"Case #\"+i+\": \");\r\n        \tfor(k=0;k<ans.length;k++)\r\n        \t{\r\n        \t\tif(ans[k]!=0)\r\n        \t\t\tSystem.out.print(ans[k]+\" \");\r\n        \t}\r\n        \tSystem.out.println();\r\n        }\r\n    }\r\n} ", "idx": "6486"}
{"func": "package googlejam6.p487;\n\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class QuestionTwo {\n\n    public static void main(String[] args) throws Exception {\n\n        QuestionTwo questionTwo = new QuestionTwo();\n//        String fileName = \"B-small-attempt1\";\n//        String fileName = \"small\";\n        String fileName = \"B-large\";\n        String inputFile = \"codeJam/2016/round_one/question_two/\" + fileName + \".in\";\n        String outputFIle = \"/Users/sdu/Dropbox/workspace/eclipse/JavaPractice/src/main/java/com/sdu/practice/codeJam/round_one/q2_\" + fileName + \".out\";\n\n        ClassLoader classLoader = questionTwo.getClass().getClassLoader();\n\t\tFile file = new File(classLoader.getResource(inputFile).getFile());\n\t\t\n\t\ttry (Scanner scanner = new Scanner(file)) {\n\t\t\n\t\t    String line = scanner.nextLine();\n\t\t    int t = Integer.parseInt(line.trim());\n\t\t\n\t\t    int caseT = 0;\n\t\t\n\t\t    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(\n\t\t            new FileOutputStream(outputFIle), \"utf-8\"));\n\t\t\n\t\t    while (++caseT <= t) {\n\t\t        int[] array = new int[2501];\n\t\t        ArrayList<Integer> result = new ArrayList<>();\n\t\t        String rStr = \"\";\n\t\t\n\t\t        line = scanner.nextLine();\n\t\t        int n = Integer.parseInt(line.trim());\n\t\t        int r = 0;\n\t\t        while (++r < 2*n) {\n\t\t            line = scanner.nextLine();\n\t\t            String[] chars = line.trim().split(\" \");\n\t\t            for (int j = 0; j < n; j++) {\n\t\t                array[Integer.valueOf(chars[j])]++;\n\t\t            }\n\t\t\n\t\t        }\n\t\t\n\t\t        for (int j=0; j< 2500; j++) {\n\t\t            if (array[j] % 2 != 0) {\n\t\t                result.add(j);\n\t\t            }\n\t\t        }\n\t\t\n\t\t        for (int j = 0; j < result.size(); j++) {\n\t\t            rStr = rStr + result.get(j) + \" \";\n\t\t        }\n\t\t\n\t\t        rStr = rStr.trim();\n\t\t\n\t\t        writer.write(\"Case #\" + caseT + \": \" + rStr);\n\t\t        writer.newLine();\n\t\t    }\n\t\t    scanner.close();\n\t\t    writer.close();\n\t\t} catch (IOException e) {\n\t\t    e.printStackTrace();\n\t\t}\n\n    }\n}\n\n", "idx": "6487"}
{"func": "package googlejam6.p489;\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemB {\r\n    private static final String FILENAME = \"B-large\";\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner input = new Scanner(new FileReader(FILENAME + \".in\"));\r\n        PrintWriter output = new PrintWriter(new FileWriter(FILENAME + \".out\"));\r\n\r\n        long start = System.currentTimeMillis();\r\n        int testCase = input.nextInt();\r\n        for (int t=1; t<=testCase; t++) {\r\n        \tint N = input.nextInt();\r\n        \tboolean[] check = new boolean[2501];\r\n        \tArrays.fill(check, false);\r\n        \tfor (int i=0; i<(2*N-1); i++) {\r\n        \t\tfor (int j=0; j<N; j++) {\r\n        \t\t\tint n = input.nextInt();\r\n        \t\t\tcheck[n] = !check[n];\r\n        \t\t}\r\n        \t}\r\n        \toutput.print(\"Case #\"+t+\":\");\r\n        \tfor (int i=1; i<=2500; i++) {\r\n        \t\tif (check[i]) output.print(\" \" + i); \r\n        \t}\r\n        \toutput.print(\"\\n\");\r\n        }\r\n        System.out.printf(\"Total duration: %dms\\n\", System.currentTimeMillis() - start);\r\n\r\n        input.close();\r\n        output.close();\r\n\t}\r\n}\r\n", "idx": "6489"}
{"func": "package googlejam6.p491;\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Army {\n    public static void main(String[] args) throws Exception {\n        String line;\n        String fileName = args[0];\n        System.out.println(\"fileName=\" + fileName);\n\n        FileWriter fw = new FileWriter(fileName + \".out.txt\");\n\n        // fw.write(\"something\");\n\n        InputStream fis = new FileInputStream(fileName);\n        InputStreamReader isr = new InputStreamReader(fis, Charset.forName(\"UTF-8\"));\n        BufferedReader br = new BufferedReader(isr);\n\n        try {\n            line = br.readLine();\n            Long count = Long.valueOf(line);\n\n            System.out.println(\"count=\" + count);\n\n            Long current = 0L;\n            while (current++ < count) {\n\n                line = br.readLine();\n                final int N = Integer.valueOf(line);\n                final int rowNum = 2* N -1;\n\t\t\t\tMap<Integer, Integer> countMap = new HashMap<Integer, Integer>();\n\t\t\t\tint i = 0;\n\t\t\t\twhile (i< rowNum) {\n\t\t\t\t    String line1 = br.readLine();\n\t\t\t\t    \n\t\t\t\t    //System.out.println(line);\n\t\t\t\t    \n\t\t\t\t    String[] numbers = line1.split(\"\\\\s+\");\n\t\t\t\t\tfor (int i1=0; i1<numbers.length; i1++) {\n\t\t\t\t\t    int currentNumber = Integer.valueOf(numbers[i1]);\n\t\t\t\t\t    \n\t\t\t\t\t    int oldCount = 0;\n\t\t\t\t\t    if (countMap.containsKey(currentNumber)) {\n\t\t\t\t\t        oldCount = countMap.get(currentNumber);\n\t\t\t\t\t    }\n\t\t\t\t\t    \n\t\t\t\t\t    countMap.put(currentNumber, oldCount+1);\n\t\t\t\t\t}\n\t\t\t\t    \n\t\t\t\t    i++;\n\t\t\t\t}\n\t\t\t\tint[] result2 = new int[N];\n\t\t\t\tint i1=0;\n\t\t\t\tfor (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n\t\t\t\t    \n\t\t\t\t    if (entry.getValue()%2 != 0) {\n\t\t\t\t        result2[i1++] = entry.getKey();\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint[] result1 = result2;\n\t\t\t\tArrays.sort(result1);\n\t\t\t\t\n\t\t\t\tStringBuilder tmp = new StringBuilder();\n\t\t\t\tfor(int j=0; j<result1.length; j++) {\n\t\t\t\t    tmp.append(String.valueOf(result1[j])).append(\" \");\n\t\t\t\t}\n                \n                String result = tmp.toString().trim();\n                \n                \n                fw.write(\"Case #\" + current + \": \" + result + \"\\n\");\n            }\n            fw.close();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n    \n    \n}\n", "idx": "6491"}
{"func": "package googlejam6.p492;\nimport java.io.*;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class RankFile {\n    // final static String PROBLEM_NAME = \"GCJTemplate\";\n    // final static String WORK_DIR = \"/Users/anishnag/Desktop/Google Code Jam 2016/Round 1\" + PROBLEM_NAME + \"/\";\n\n    public static void main(String[] args) throws Exception{\n        Scanner sc = new Scanner(new FileReader(\"input.txt\"));\n        PrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n        int caseCnt = sc.nextInt();\n        for (int caseNum=0; caseNum<caseCnt; caseNum++){\n            System.out.println(\"Processing Test Case \" + (caseNum + 1));\n            pw.print(\"Case #\" + (caseNum + 1) + \": \");\n\t\t\tRankFile r = new RankFile();\n            int n = sc.nextInt();\n\t\t\t  Integer[][] input = new Integer[2 * n - 1][n];\n\t\t\t  int[] count = new int[2501];\n\t\t\t  String result = \"\";\n\t\t\t\n\t\t\t  for (int i = 0; i < input.length; i++) {\n\t\t\t    for (int j = 0; j < input[i].length; j++) {\n\t\t\t      input[i][j] = sc.nextInt();\n\t\t\t      count[input[i][j]]++;\n\t\t\t    }\n\t\t\t  }\n\t\t\t\n\t\t\t  for (int i = 1; i < count.length; i++) {\n\t\t\t    if (count[i] % 2 != 0) {\n\t\t\t      result += (i + \" \");\n\t\t\t    }\n\t\t\t  }\n\t\t\t\n\t\t\t  pw.write(result.substring(0, result.length() - 1) + \"\\n\");\n        }\n        pw.flush();\n        pw.close();\n        sc.close();\n    }\n}\n", "idx": "6492"}
{"func": "package googlejam6.p495;\n\n\nimport java.io.*;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class RankAndFile {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        PrintWriter out = new PrintWriter(new File(\"RankAndFile.out\"));\n\t\tRankAndFile r = new RankAndFile();\n        int T = in.nextInt();\n\t\tfor (int i=0; i<T; i++) {\n\t\t    int N = in.nextInt();\n\t\t    HashMap<Integer, Integer> heightCounts = new HashMap<>();\n\t\t    for (int j=0; j<(2*N-1)*N; j++) {\n\t\t        int h = in.nextInt();\n\t\t        if (heightCounts.containsKey(h)) {\n\t\t            int count = heightCounts.get(h);\n\t\t            heightCounts.put(h, count+1);\n\t\t        } else {\n\t\t            heightCounts.put(h, 1);\n\t\t        }\n\t\t    }\n\t\t    int missingNumbers[] = new int[N];\n\t\t    int j=0;\n\t\t    for (Map.Entry<Integer, Integer> entry: heightCounts.entrySet()) {\n\t\t        if (entry.getValue() % 2 == 1) {\n\t\t            missingNumbers[j] = entry.getKey();\n\t\t            j++;\n\t\t        }\n\t\t    }\n\t\t    Arrays.sort(missingNumbers);\n\t\t    StringBuilder sb = new StringBuilder();\n\t\t    for (j=0; j<N; j++) {\n\t\t        sb.append(\" \");\n\t\t        sb.append(missingNumbers[j]);\n\t\t    }\n\t\t    out.println(String.format(\"Case #%d:%s\", i+1, sb.toString()));\n\t\t}\n        out.close();\n    }\n}\n", "idx": "6495"}
{"func": "package googlejam6.p496;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.Map;\r\n\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\nimport java.util.SortedMap;\r\nimport java.util.SortedSet;\r\n\r\n\r\npublic class Bsmall {\r\n    public Bsmall() {\r\n        super();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Bsmall bsmall = new Bsmall();\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n        int t = in.nextInt(); // Scanner has functions to read ints, longs, strings, chars, etc.\r\n        Map<Integer,Integer> map=new HashMap<Integer,Integer>();\r\n        \r\n        for (int i = 1; i <= t; ++i) {\r\n            map.clear();\r\n            int n=in.nextInt();\r\n            for (int j=0;j<n*(2*n-1);j++) {\r\n               \r\n                String s=in.next();              \r\n               \r\n                    Integer integ=Integer.valueOf(s);\r\n                    if(map.get(integ)==null)\r\n                    map.put(integ,1);\r\n                    else {\r\n                       int val= map.get(integ);\r\n                        val=(val+1)%2;\r\n                        map.put(integ, val);\r\n                    }\r\n                \r\n            }\r\n            Set<Integer> keySet = map.keySet();\r\n            Iterator<Integer> iterator = keySet.iterator();\r\n            String result =\"\";\r\n            while(iterator.hasNext()) {\r\n                Integer integer = iterator.next();\r\n                if(map.get(integer)==1)\r\n                result+=\" \"+integer;\r\n            }\r\n            System.out.println(\"Case #\"+i+\":\"+result);\r\n          \r\n        }\r\n    }\r\n}\r\n", "idx": "6496"}
{"func": "package googlejam6.p497;\n\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class RankAndFile {\r\n//\tstatic private final String INPUT = \"G:/C-competitions/CodeJam/2016/Round 1A/Problem 2/sample_input.txt\";\r\n//\tstatic private final String OUTPUT = \"G:/C-competitions/CodeJam/2016/Round 1A/Problem 2/sample_output.txt\";\r\n\r\n//\tstatic private final String INPUT = \"G:/C-competitions/CodeJam/2016/Round 1A/Problem 2/s_input_attempt0.in\";\r\n//\tstatic private final String OUTPUT = \"G:/C-competitions/CodeJam/2016/Round 1A/Problem 2/s_output_attempt0.txt\";\r\n\t\r\n\tstatic private final String INPUT = \"G:/C-competitions/CodeJam/2016/Round 1A/Problem 2/b_input.in\";\r\n\tstatic private final String OUTPUT = \"G:/C-competitions/CodeJam/2016/Round 1A/Problem 2/b_output.txt\";\r\n\t\r\n\tstatic private Scanner in;\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tFileInputStream instream = null;  \r\n\t      PrintStream outstream = null;  \r\n\t     \r\n\t      try {  \r\n\t          instream = new FileInputStream(INPUT);  \r\n\t          outstream = new PrintStream(new FileOutputStream(OUTPUT));  \r\n\t          System.setIn(instream);  \r\n\t          System.setOut(outstream);  \r\n\t      } catch (Exception e) {  \r\n\t          System.err.println(\"Error Occurred.\");  \r\n\t      }  \r\n\t     \r\n\t      in = new Scanner(System.in);  \r\n\t      int T=in.nextInt();\r\n\t      \r\n\t      for (int t=1;t<=T;t++) {  \r\n\t    \t  System.out.print(\"Case #\"+t+\":\");\r\n\t    \t  int N=in.nextInt();\n\t\t\tint[] flags=new int[2502];\n\t\t\tfor(int i=0;i<N*(2*N-1);i++) {\n\t\t\t\tint x=in.nextInt();\n\t\t\t\tflags[x]++;\n\t\t\t}\n\t\t\tfor(int i=1;i<2501;i++) {\n\t\t\t\tif((flags[i]%2)!=0)\n\t\t\t\t\tSystem.out.print(\" \"+i);\n\t\t\t}\n\t\t\tSystem.out.println();\t         \t              \t    \r\n\t      }\r\n\t      System.err.println(\"done.\");\r\n\t      in.close();\r\n\t      return;\r\n\t}\r\n\r\n}\r\n", "idx": "6497"}
{"func": "package googlejam6.p499;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\r\n\t\tprivate static String path = \"C:\\\\Users\\\\m.omodei\\\\Downloads\\\\Round 1A\\\\\";\r\n\t\tprivate static String file = \"large\"; //\"small-attempt0\"; //\"Test\"; //  \r\n\t\t\r\n\t\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\t\t\r\n\t\t\tlong start = System.nanoTime();\r\n\t\t\tScanner in = new Scanner(new File(path + B.class.getSimpleName() + \"-\" + file + \".in\"));\r\n\t\t\tPrintWriter out = new PrintWriter(path + B.class.getSimpleName() + \"-\" + file + \".out\");\r\n\t\t\tint T = in.nextInt();\r\n\t\t\tfor(int i = 1; i <= T; i++) {\r\n\t\t\t\tint N = in.nextInt();\r\n\t\t\t\tint[] heightCount = new int[2500];\r\n\t\t\t\tfor(int j = 0; j < 2 * N - 1; j++) {\r\n\t\t\t\t\tfor(int k = 0; k < N; k++)\r\n\t\t\t\t\t\theightCount[in.nextInt() - 1]++;\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.print(\"Case #\" + i + \":\");\r\n\t\t\t\tout.print(\"Case #\" + i + \":\");\r\n\t\t\t\tfor(int j = 0; j < 2500; j++) {\r\n\t\t\t\t\tif(heightCount[j] % 2 != 0) {\r\n\t\t\t\t\t\tSystem.out.print(\" \" + (j + 1));\r\n\t\t\t\t\t\tout.print(\" \" + (j + 1));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t\tout.println();\r\n\t\t    }\r\n\t\t    in.close();\r\n\t\t    out.close();\r\n\t\t    System.out.println(\"Elapsed time: \" + (System.nanoTime() - start) / 1000000000.0 + \" seconds\");\r\n\r\n\t\t}\r\n\r\n\t}\r\n", "idx": "6499"}
{"func": "package googlejam6.p500;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.Writer;\r\nimport java.util.Arrays;\r\n\r\npublic class RankNFile {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t\tString fileName = \"B-large.in\"; \r\n        String line = null;\r\n        int tempInt= 0;\r\n        Writer writer = null;\r\n        boolean[] boolArr= new boolean[2501];\r\n        try {\r\n\t\t    writer = new BufferedWriter(new OutputStreamWriter(\r\n\t\t          new FileOutputStream(\"B-large.out\"), \"utf-8\"));\r\n\t        try {\r\n\t            // FileReader reads text files in the default encoding.\r\n\t            FileReader fileReader = new FileReader(fileName);\r\n\t\r\n\t            // Always wrap FileReader in BufferedReader.\r\n\t            BufferedReader bufferedReader =  new BufferedReader(fileReader);\r\n\t            \r\n\t            int a = Integer.parseInt(bufferedReader.readLine());\r\n\t            System.out.println(\"There are \" + a +\" entries.\");\r\n\t\t            for (int e=0; e<a;e++) {\r\n\t\t            \tArrays.fill(boolArr, false);\r\n\t\t\t            int b = Integer.parseInt(bufferedReader.readLine());\r\n\t\t\t            System.out.println(\"N :\" +b);\t\t\t    \t\t\r\n\t\t\t            for (int i = 0; i<(2*b-1); i++) { //for number of stacks of pancakes\r\n\t\t\t            \tline=bufferedReader.readLine();\r\n\t\t\t            \tString[] nums = line.split(\" \");\r\n\t\t\t            \tfor (int j = 0; j < nums.length; j++) { \r\n\t\t\t            \t\ttempInt = Integer.parseInt(nums[j]);\r\n\t\t\t            \t\tif (boolArr[tempInt]) {\r\n\t\t\t            \t\t\tboolArr[tempInt]=false;\r\n\t\t\t            \t\t} else {\r\n\t\t\t            \t\t\tboolArr[tempInt]=true;\r\n\t\t\t            \t\t}; \r\n\t\t\t            \t}\r\n\t\t\t            }\r\n\t\t            \t//System.out.println(line);\r\n\t\t\t\t\t\twriter.write(\"Case #\" + (e+1) + \":\");\r\n\t\t        \t\tfor (int k=0; k<2500;k++) {\r\n\t\t        \t\t\tif (boolArr[k]) {\r\n\t\t\t\t\t\t\t\twriter.write(\" \"+k);\r\n\t\t        \t\t\t}\r\n\t\t        \t\t}\r\n\t\t        \t\twriter.append(System.lineSeparator());\t            \t\r\n\t\t    \t\t}   \r\n\t\t            // Always close files.\r\n\t\t            bufferedReader.close();         \r\n\t\t        }\r\n\t\t        catch(FileNotFoundException ex) {\r\n\t            System.out.println(\"Unable to open file '\" +  fileName + \"'\");                \r\n\t        }\r\n\t        catch(IOException ex) {\r\n\t            System.out.println(\"Error reading file '\" + fileName + \"'\");                  \r\n\t            // Or we could just do this: \r\n\t            // ex.printStackTrace();\r\n\t        }    \r\n\t\t} catch (IOException ex) {\r\n\t\t\t  // report\r\n\t\t} finally {\r\n\t\t\ttry {writer.close();} catch (Exception ex) {/*ignore*/}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6500"}
{"func": "package googlejam6.p503;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Round1A_RankFile {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\t// TODO Auto-generated method stub\r\n\r\n\t\tScanner scan = new Scanner(new File(\"src/Input.txt\"));\r\n\t\tint T = Integer.parseInt(scan.nextLine());\r\n\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\tint N = Integer.parseInt(scan.nextLine());\r\n\t\t\tList<String> list = new ArrayList<String>();\r\n\t\t\tfor (int j = 0; j < (2*N - 1) ; j++) {\r\n\t\t\t\tString line = scan.nextLine();\r\n\t\t\t\tStringTokenizer str = new StringTokenizer(line);\r\n\t\t\t\t\r\n\t\t\t\twhile(str.hasMoreTokens()) {\r\n\t\t\t\t\tString check = str.nextToken();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (list.contains(check)) {\r\n\t\t\t\t\t\tlist.remove(check);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlist.add(check);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint array[] = new int[N];\r\n\t\t\tint j = 0;\r\n\t\t\tfor (String l : list) {\r\n\t\t\t\tarray[j] = Integer.parseInt(l);\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\tArrays.sort(array);\r\n\t\t\tString ans = \"Case #\"+i+\":\";\r\n\t\t\tfor (int l : array) {\r\n\t\t\t\tans = ans + \" \" + l;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(ans);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6503"}
{"func": "package googlejam6.p505;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/*\n *\n * @author gitanshu.behal\n * Created on : 09-Apr-2016\n *\n */\n\npublic class Ques2 {\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\n\t\t@SuppressWarnings(\"resource\")\n\t\tBufferedReader br = new BufferedReader(\n\t\t\t\tnew FileReader(\"/home/local/JASPERINDIA/gitanshu.behal/Desktop/Jam/1A/Q2/input1.in\"));\n\t\tBufferedWriter wr = new BufferedWriter(\n\t\t\t\tnew FileWriter(\"/home/local/JASPERINDIA/gitanshu.behal/Desktop/Jam/1A/Q2/output1.out\"));\n\n\t\tint testCases = Integer.parseInt(br.readLine());\n\t\tfor (int I = 1; I <= testCases; I++) {\n\n\t\t\tint N = Integer.parseInt(br.readLine());\n\t\t\tint[] array = new int[2 * N * N];\n\t\t\tint[] flag = new int[3000];\n\t\t\tint J = 0;\n\t\t\tfor (int i = 0; i < (2 * N - 1); i++) {\n\t\t\t\tString[] arr = br.readLine().split(\" \");\n\t\t\t\tfor (int j = 0; j < arr.length; j++) {\n\t\t\t\t\tarray[J] = Integer.parseInt(arr[j]);\n\t\t\t\t\tif (flag[array[J]] == 0) {\n\t\t\t\t\t\tflag[array[J]] = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflag[array[J]] = 0;\n\t\t\t\t\t}\n\t\t\t\t\tJ++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tInteger[] answer = new Integer[N];\n\t\t\tint K=0;\n\t\t\tfor (int i = 1; i < 2501; i++) {\n\t\t\t\tif(flag[i] == 1){\n\t\t\t\t\tanswer[K++] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrays.sort(answer);\n\t\t\t\n\t\t\twr.write(\"Case #\" + I + \": \");\n\t\t\tfor(int i=0 ; i < answer.length; i++){\n\t\t\t\twr.write(answer[i].toString() + \" \");\n\t\t\t}\n\t\t\twr.newLine();\n\t\t}\n\t\twr.close();\n\t}\n}\n", "idx": "6505"}
{"func": "package googlejam6.p507;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class B {\n\tpublic static void main(String[] args) throws IOException {\n\t\tif (args == null || args.length == 0) {\n\t\t\tSystem.err.println(\"dude, I need to know the input file name\");\n\t\t\tSystem.exit(-1);\n\t\t}\n\n\t\tBufferedReader br = new BufferedReader(new FileReader(args[0]));\n\t\ttry {\n\t\t    String input = br.readLine();\n\t\t    \n\t\t    // first line is # of cases.\n\t\t    int numCases = Integer.parseInt(input);\n\t\t    input = br.readLine();\n\t\t    for (int i = 1; i <= numCases; i++) {\n\t\t    \tint n = Integer.parseInt(input); //n\n\t\t    \tList<String> lists = new ArrayList<String>(2*n-1);\n\t\t    \tfor (int j = 1; j < 2*n; j++) {\n\t\t    \t\tlists.add(br.readLine());\n\t\t    \t}\n\t\t\t\tMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\t\t\tfor (int i2= 0; i2< lists.size(); i2++) {\n\t\t\t\t\t@SuppressWarnings(\"resource\")\n\t\t\t\t\tScanner ss = new Scanner(lists.get(i2));\n\t\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\t\tint found = ss.nextInt();\n\t\t\t\t\t\tif (map.containsKey(found)) {\n\t\t\t\t\t\t\tint val = map.get(found)+1;\n\t\t\t\t\t\t\tmap.put(found, val);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmap.put(found, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tList<Integer> out = new ArrayList<Integer>(n);\n\t\t\t\tfor (Integer in : map.keySet()) {\n\t\t\t\t\tif ((map.get(in).intValue()&1) != 0) out.add(in);\n\t\t\t\t}\n\t\t\t\tCollections.sort(out);\n\t\t\t\tList<Integer> missing = out;\n\t\t    \tStringBuilder output = new StringBuilder(\"Case #\");\n\t\t\t\toutput.append(i).append(\":\");\n\t\t\t\tfor (int i1 =0; i1 < missing.size(); i1++) {\n\t\t\t\t\toutput.append(\" \").append(missing.get(i1));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.println(output.toString());\n\t\t        input = br.readLine();\n\t\t    }\n\t\t} finally {\n\t\t    br.close();\n\t\t}\n\t}\n}\n", "idx": "6507"}
{"func": "package googlejam6.p510;\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint t = in.nextInt(); // Scanner has functions to read ints, longs,\n\t\t\t\t\t\t\t\t// strings, chars, etc.\n\t\tfor (int i = 1; i <= t; ++i) {\n\t\t\tint n = in.nextInt();\n\t\t\t\n\t        int count[] = new int[2501] ;\n\t        for (int j=0; j<2*n-1; j++) {\n\t            for(int k=0; k< n; k++) {\n\t                int temp = in.nextInt();\n\t                count[temp]++;\n\n\t            }\n\t        }\n\t        \n\t        System.out.print(\"Case #\"+ i + \": \");\n\t        int missing[] = new int[n];\n\t        int c =0;\n\t        for(int j=0; j<2501; j++) {\n\t        \tif(count[j]%2 != 0) {\n\t        \t\tmissing[c++] = j;\n\t        \t\tSystem.out.print(j + \" \");\n\t        \t}\n\t        }\n\t        System.out.println(\"\");\n\t\t}\n\t}\n}", "idx": "6510"}
{"func": "package googlejam6.p511;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\n\npublic class main {\n\t\n\tpublic static int[] numbers;\n\t\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tBufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\n\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"out.txt\", true));\n\t\t\tPrintWriter out = new PrintWriter(bw);\n\t\t    int cases = Integer.parseInt(br.readLine());\n\t\t    int caseNo = 1;\n\t\t    for(int i = 0; i < cases; i++) {\n\t\t    \tint N = Integer.parseInt(br.readLine());\n\t\t    \tnumbers = new int[2501];\n\t\t    \tfor(int j = 0; j < (2*N)-1; j++) {\n\t\t    \t\tString line = br.readLine();\n\t\t    \t\t//System.out.println(line);\n\t\t\t\t\tfor(String number: line.split(\" \")) {\n\t\t\t\t\t\tint numberInt = Integer.parseInt(number);\n\t\t\t\t\t\tnumbers[numberInt] = numbers[numberInt] + 1;\n\t\t\t\t\t}\n\t\t\t\t\t//System.out.println(Arrays.toString(numbers));\n\t\t    \t}\n\t\t    \tString answer = \"\";\n\t\t    \tfor(int k = 0; k < numbers.length; k++) {\n\t\t    \t\tif(numbers[k] % 2 > 0) {\n\t\t    \t\t\tanswer = answer + k + \" \";\n\t\t    \t\t}\n\t\t    \t}\n\t\t    \tout.println(\"Case #\" + caseNo + \": \" + answer);\n\t\t    \tcaseNo++;\n\t\t    }\n\t\t    out.close();\n\t\t} catch(IOException e) {\n\t\t\tSystem.out.println(\"nooo\");\n\t\t}\n\t}\n\n}\n", "idx": "6511"}
{"func": "package googlejam6.p513;\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class rankandfile {\r\n\r\n\r\n\t  public static void main (String [] args) throws IOException {\r\n\t    // Use BufferedReader rather than RandomAccessFile; it's much faster\r\n\t    BufferedReader f = new BufferedReader(new FileReader(\"B-large(1).in\"));\r\n\t                                                  // input file name goes above\r\n\t    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"rankandfile.out\")));\r\n\t    // Use StringTokenizer vs. readLine/split -- lots faster\r\n\t    StringTokenizer st = new StringTokenizer(f.readLine());\r\n\t\t\t\t\t\t\t  // Get line, break into tokens\r\n\t    \r\n\t   //enter program here\r\n\t    int cases = Integer.parseInt(st.nextToken());\r\n\t    for (int i = 0; i<cases; i++){\r\n\t    \tst = new StringTokenizer(f.readLine());\r\n\t    \tint n = Integer.parseInt(st.nextToken());\r\n\t    \tLinkedList<int[]> vals = new LinkedList<int[]>();\r\n\t    \tfor (int j = 0 ; j<2*n-1; j++){\r\n\t    \t\tst = new StringTokenizer(f.readLine());\r\n\t    \t\tint[] holder = new int[n];\r\n\t    \t\tfor (int k = 0; k<n; k++){\r\n\t    \t\t\tholder[k] =(Integer.parseInt(st.nextToken()));\r\n\t    \t\t}\r\n\t    \t\t\r\n\t    \t\tvals.add(holder);\r\n\t    \t\t\r\n\t    \t\t\r\n\t    \t}\r\n\t    \t/**\r\n\t    \tfor (int j = 0; j<vals.size(); j++){\r\n\t    \t\tfor (int k = 0; k<n; k++){\r\n\t    \t\t\tSystem.out.print(vals.get(j)[k]+\" \");\r\n\t    \t\t}System.out.println();\r\n\t    \t}**/\r\n\t    \t\r\n    \t\tLinkedList<int[]> store1 = new LinkedList<int[]>();\r\n    \t\tLinkedList<int[]> store2 = new LinkedList<int[]>();\r\n\t    \tint index = 0;\r\n\t    \tint missing = -1;\r\n    \t\twhile (index<n){\r\n\t    \t\t\r\n\t    \t\tint min = Integer.MAX_VALUE;\r\n\t    \t\tfor (int j = 0; j<vals.size(); j++){\r\n\t    \t\t\tif (vals.get(j)[index]<min){\r\n\t    \t\t\t\tmin = vals.get(j)[index];\r\n\t    \t\t\t}\r\n\t    \t\t}\r\n\t    \t\t\r\n\t    \t\tint count = 0;\r\n\t    \t\tfor (int j = 0; j<vals.size(); j++){\r\n\t    \t\t\t//System.out.println(count+\" \"+j+\" \"+vals.size());\r\n\r\n\t    \t\t\tif (vals.get(j)[index]==min){\r\n\t    \t\t\t\tif (count == 0) store1.add(Arrays.copyOf(vals.get(j),n));\r\n\t    \t\t\t\tif (count == 1) store2.add(Arrays.copyOf(vals.get(j),n));\r\n\t    \t\t\t\tvals.remove(j); j-=1;\r\n\t    \t\t\t\t\t    \t\t\t\tcount++;\r\n\t    \t\t\t}\r\n\t    \t\t\t\r\n\t    \t\t}\r\n\t    \t\t\r\n\t    \t\tint[] holder = {};\r\n    \t\t\tif (count<2) store2.add(holder);\r\n\t    \t\tif (count<2) missing = index;\r\n\t    \t\t\r\n\t    \t\tindex++;\r\n\t    \t}\r\n\t    \t\r\n    \t\tString ans = \"\";\r\n    \t\tfor (int j = 0; j<n; j++){\r\n    \t\t\tif (j==missing) ans+= store1.get(missing)[missing]+\" \";\r\n    \t\t\telse if (store1.get(j)[missing] == store1.get(missing)[j]) ans+=store2.get(j)[missing]+\" \";\r\n    \t\t\telse ans+= store1.get(j)[missing]+\" \";\r\n    \t\t\t//System.out.println(ans);\r\n    \t\t}\r\n\t    \tSystem.out.println(\"Case #\"+(i+1)+\": \"+ans.trim());\r\n\t    \tout.println(\"Case #\"+(i+1)+\": \"+ans.trim());\r\n\t    }\r\n\t\r\n\t    \r\n\t    // answer output\r\n\r\n    \tout.close();\t    \r\n\t    System.exit(0);                               // don't omit this!\r\n\t  }\r\n\r\n}", "idx": "6513"}
{"func": "package googlejam6.p514;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.*;\n\npublic class RankAndFile {\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tScanner sc = new Scanner(new File(\"B-large.in\"));\n\t\tint numberOfCases = sc.nextInt();\n\t\tString[] result = new String[numberOfCases];\n\t\t//sc.nextLine();\n\t\tfor (int i=0; i<numberOfCases; i++) {\n\t\t\tint numberOfLines = sc.nextInt();\n\t\t\tsc.nextLine();\n\t\t\tString tempIn = \"\";\n\t\t\tfor (int j=0; j<(numberOfLines*2-1); j++) {\n\t\t\t\tString temp = sc.nextLine();\n\t\t\t\ttempIn += temp +\" \";\n\t\t\t}\n\t\t\tString[] input = tempIn.split(\"\\\\s+\");\n\t\t\tint[] intInput = new int[input.length];\n\t\t\tfor (int i1=0; i1<input.length; i1++) {\n\t\t\t\tintInput[i1] = Integer.parseInt(input[i1]);\n\t\t\t}\n\t\t\tMap<Integer, Integer> map = new HashMap<>();\n\t\t\tfor (int i2=0; i2<intInput.length; i2++) {\n\t\t\t\tif (map.get(intInput[i2])==null) {\n\t\t\t\t\tmap.put(intInput[i2], 1);\n\t\t\t\t} else {\n\t\t\t\t\tmap.put(intInput[i2], map.get(intInput[i2])+1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tList<Integer> res = new ArrayList<>();\n\t\t\tfor (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\t\t\t\tint value = entry.getValue();\n\t\t\t\tif (value%2!=0) {\n\t\t\t\t\tres.add(entry.getKey());\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(res);\n\t\t\tStringBuilder finalResult = new StringBuilder();\n\t\t\tfor (Integer e:res) {\n\t\t\t\tfinalResult.append(e);\n\t\t\t\tfinalResult.append(\" \");\n\t\t\t}\n\t\t\tresult[i] = finalResult.toString();\n\t\t}\n\t\tfor (int i=0; i<numberOfCases; i++) {\n\t\t\tint caseNumber = i+1; \n\t\t\tSystem.out.format(\"Case #%d: %s\\n\", caseNumber, result[i]);\n\t\t}\n\t}\n}\n", "idx": "6514"}
{"func": "package googlejam6.p517;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Jam16_2_1A {\r\n\tstatic BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n\tpublic static void main(String[]args)throws Exception{\r\n\t\tint t=(int)getInt();\r\n\t\t\r\n\t\tfor(int c=0;c<t;c++) {\r\n\t\t\tSet<Integer> s=new TreeSet<Integer>();\r\n\t\t\tArrayList<Integer> arr=new ArrayList<Integer>();\r\n\t\t\tSystem.out.print(\"Case #\"+(c+1)+\": \");\r\n\t\t\tint n=(int)getInt();\r\n\t\t\tfor(int i=0;i<(2*n-1);i++) {\r\n\t\t\t\tString arr1[]=br.readLine().split(\" \");\n\t\t\t\tint a[]=new int[arr1.length];\n\t\t\t\tfor(int i1=0;i1<a.length;i1++){\n\t\t\t\t\ta[i1]=Integer.parseInt(arr1[i1]);\n\t\t\t\t}\n\t\t\t\tint par[]=a;\r\n\t\t\t\tfor(int j=0;j<n;j++) {\r\n\t\t\t\t\ts.add(par[j]);\r\n\t\t\t\t\tarr.add(par[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int i:s) {\r\n\t\t\t\tif(Collections.frequency(arr, i)%2==1) {\r\n\t\t\t\t\tSystem.out.print(i+\" \");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n\tstatic long getInt()throws Exception{\r\n\t\tint n=Integer.parseInt(br.readLine());\r\n\t\treturn n;\r\n\t}\r\n\r\n\r\n}\r\n", "idx": "6517"}
{"func": "package googlejam6.p520;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n\r\n    private static HashSet<Integer> sSet = new HashSet<Integer>();\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n        int t = in.nextInt();\r\n        for (int i = 1; i <= t; ++i) {\r\n\t\t    int n = in.nextInt();\r\n\t\t    sSet.clear();\r\n\t\t\tint totalNumber = n * (2 * n - 1);\r\n\t\t\tfor (int count = 0; count < totalNumber; count++) {\r\n\t\t\t    int current = in.nextInt();\r\n\t\t\t    if (sSet.contains(current)) {\r\n\t\t\t\t    sSet.remove(current);\r\n\t\t\t\t} else {\r\n\t\t\t\t    sSet.add(current);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tInteger[] sorted = sSet.toArray(new Integer[]{});\r\n\t\t\tArrays.sort(sorted);\r\n            System.out.print(\"Case #\" + i + \":\");\r\n\t\t\tfor (int c : sorted) {\r\n\t\t\t    System.out.print(\" \");\r\n\t\t\t    System.out.print(c);\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"\\n\");\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "6520"}
{"func": "package googlejam6.p522;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.util.stream.Collector;\r\nimport java.util.stream.Collectors;\r\n\r\n/**\r\n * Created by andyyzhengg on 4/15/2016.\r\n */\r\npublic class LastWord {\r\n    public static void main(String[] args) {\r\n        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))) {\r\n            int t = Integer.parseInt(br.readLine());\r\n            BufferedWriter bw = new BufferedWriter(new FileWriter(\"out.txt\"));\r\n            for(int i = 1; i <= t; i++) {\r\n                int n = Integer.parseInt(br.readLine());\r\n                HashMap<String, Integer> heightsToCount = new HashMap<>();\r\n                for(int j = 0; j < 2 * n - 1; j ++) {\r\n                    String[] split = br.readLine().split(\" \");\r\n                    for(String s : split) {\r\n                        if(heightsToCount.containsKey(s))\r\n                            heightsToCount.put(s, heightsToCount.get(s) + 1);\r\n                        else\r\n                            heightsToCount.put(s, 1);\r\n                    }\r\n                }\r\n                List<Integer> collect = heightsToCount.entrySet().stream().filter(set -> set.getValue() % 2 != 0).map(Map.Entry::getKey).map(s -> Integer.parseInt(s)).collect(Collectors.toList());\r\n                Collections.sort(collect);\r\n                bw.write(String.format(\"Case #%d:\", i));\r\n                for(Integer c : collect) bw.write( String.format(\" %d\", c));\r\n                bw.write(\"\\n\");\r\n            }\r\n            bw.close();\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n", "idx": "6522"}
{"func": "package googlejam6.p523;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.util.*;\n\n\npublic class B {\n\n\tpublic static void main(String[] args) {\n\n//\t\tString in = \"/Users/Moshin/Code Jam//small.in\";\n//\t\tString out = \"/Users/Moshin/Code Jam/small.out\";\n\t\tString in = \"/Users/Moshin/Code Jam/large.in\";\n\t\tString out = \"/Users/Moshin/Code Jam/large.out\";\n\t\n\t\ttry {\n\n\t\t\tBufferedReader bufferedReader = new BufferedReader(new FileReader(in));\n\t        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(out));\n\n\t\t\t// Total number of test cases\n\t\t\tint noOfTestCases = Integer.valueOf(bufferedReader.readLine());\n\t\t\t\n\t\t\t\n\t\t\n\t\t\tfor (int t = 0; t < noOfTestCases; t++){\n                \n                List<Integer> distinctHeights = new ArrayList<>();\n                Map<Integer,Integer> heightCounts = new HashMap<>();\n                List<Integer> resultArray = new ArrayList<>();\n                \n                int n = Integer.parseInt(bufferedReader.readLine());\n                int l = 2*n-1;\n                for(int i=0; i<l; i++){\n                \t\n                    String line = bufferedReader.readLine();\n                    String[] heights = line.split(\" \");\n                    \n                    for(String tempHeight:heights) {\n                    \t\n                        int height = Integer.valueOf(tempHeight);\n                        \n                        if(distinctHeights.contains(height)) heightCounts.put(height,heightCounts.get(height)+1);\n\n                        else {\n                        \n                        \tdistinctHeights.add(height);\n                            heightCounts.put(height, 1);\n                        \n                        }\n                    }\n                    \n                }\n                \n                for(Integer tempHeight:distinctHeights)\n                \tif(heightCounts.get(tempHeight)%2==1)\n                \t\tresultArray.add(tempHeight);\n                \n                Collections.sort(resultArray);\n                \n                \n                bufferedWriter.write(\"Case #\" + (t + 1) + \": \" + resultArray.toString().replace(\"[\", \"\").replace(\"]\", \"\").replaceAll(\",\",\"\") + \"\\n\");\n\n                \n\n            }\n                \n            bufferedReader.close();\n            bufferedWriter.close();\n\n\t\t}catch (Exception exception) {\n\t\t\t\n\t\t\texception.printStackTrace();\n\t\t\n\t\t}\n\n\t}\n\n\n\n}\n", "idx": "6523"}
{"func": "package googlejam6.p524;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Scanner;\n\n\npublic class RankAndFile {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\t\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tint x = input.nextInt();\n\t\t\tList<Integer> numbers = new LinkedList<Integer>();\n\t\t\t\n\t\t\tfor (int j = 0; j < (2*x-1)*x; j++) {\n\t\t\t\tnumbers.add(input.nextInt());\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(numbers);\n\t\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\t\t\n\t\t\tfor (Integer i1 : numbers) {\n\t\t\t\tif (map.containsKey(i1)) {\n\t\t\t\t\tmap.put(i1, map.get(i1) + 1);\n\t\t\t\t} else {\n\t\t\t\t\tmap.put(i1, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tList<Integer> result = new LinkedList<Integer>();\n\t\t\t\n\t\t\tfor (Integer i2 : map.keySet()) {\n\t\t\t\tif (map.get(i2) % 2 == 0) continue;\n\t\t\t\tresult.add(i2);\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(result);\n\t\t\t\n\t\t\tStringBuilder formatter = new StringBuilder();\n\t\t\t\n\t\t\tfor (Integer c : result) {\n\t\t\t\tformatter.append(c);\n\t\t\t\tformatter.append(\" \");\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(String.format(\"Case #%s: %s\", i, formatter.toString()));\n\t\t}\n\t\t\n\t\tinput.close();\n\t}\n\n}\n", "idx": "6524"}
{"func": "package googlejam6.p525;\nimport java.util.*;\r\n\r\npublic class B {\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        int numCases = in.nextInt();\r\n        for (int thisNum = 1; thisNum <= numCases; thisNum++) {\r\n            int numRows = in.nextInt();\r\n            Integer[][] allRows = new Integer[numRows * 2 - 1][numRows];\r\n            for ( int i = 0; i < numRows * 2 - 1; i++ )\r\n            {\r\n                Integer[] nextRow = new Integer[ numRows ];\r\n                for ( int row = 0; row < numRows; row++ )\r\n                    nextRow[ row ] = in.nextInt();\r\n                allRows[ i ] = nextRow;\r\n            }\r\n            for ( int row = 0; row < numRows; row++ ) {\r\n                for (int col = 0; col < numRows; col++) {\r\n                    for ( int j = 0; j < numRows * 2 - 1; j++ ) {\r\n                        Integer[] testRow = allRows[ j ];\r\n                        for ( int k = 0; k < numRows * 2 - 1; k++ ) {\r\n                            if ( k != j && allRows[ k ][row].equals( allRows[ j ][col] ) ) {\r\n                                allRows[k][row] = -1;\r\n                                allRows[j][col] = -1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            Vector<Integer> result = new Vector<Integer>(numRows);\r\n\r\n            for ( int j = 0; j < numRows * 2 - 1; j++ ) {\r\n                for (int col = 0; col < numRows; col++) {\r\n                    if ( allRows[ j ][col] != -1 )\r\n                        result.add( allRows[ j ][ col ]);\r\n                }\r\n            }\r\n\r\n            Integer[] resultArray = (Integer[]) result.toArray(new Integer[ numRows]);\r\n            Arrays.sort( resultArray );\r\n\r\n            String output = \"\";\r\n            for (int col = 0; col < numRows; col++) {\r\n                output += resultArray[ col ] + \" \";\r\n            }\r\n\r\n            output = output.trim();\r\n\r\n            // Print results\r\n            System.out.format(\"Case #%d: %s\\n\", thisNum, output);\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "6525"}
{"func": "package googlejam6.p526;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.*;\r\n\r\n/**\r\n * Created by Mvsmark on 4/16/2016.\r\n */\r\npublic class B_1A_RankAndFile {\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n        int t = in.nextInt();\r\n\r\n        for (int i = 1; i <= t; ++i) {\r\n            int n = in.nextInt();\r\n            HashMap<Integer, Integer> hmap = new HashMap<>();\r\n            for (int j = 0; j < n * (2 * n - 1); j++) {\r\n                int x = in.nextInt();\r\n                Integer value = hmap.get(x);\r\n                if (value != null) {\r\n                    hmap.put(x, ++value);\r\n                } else {\r\n                    hmap.put(x, 1);\r\n                }\r\n            }\r\n            ArrayList<Integer> result = new ArrayList<>();\r\n            for (Map.Entry<Integer, Integer> entry : hmap.entrySet()) {\r\n                if (entry.getValue() % 2 != 0) {\r\n                    result.add(entry.getKey());\r\n                }\r\n            }\r\n            Collections.sort(result);\r\n            StringBuilder sb = new StringBuilder();\r\n            for (Integer a : result)\r\n            {\r\n                sb.append(\" \");\r\n                sb.append(a);\r\n            }\r\n            System.out.println(\"Case #\" + i + \":\" + sb.toString());\r\n        }\r\n    }\r\n}\r\n", "idx": "6526"}
{"func": "package googlejam6.p527;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class rank {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tBufferedReader f = new BufferedReader(new FileReader(\"C:/Users/John/Documents/Java/2016/der.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"C:/Users/John/Documents/Java/2016/outlarge.out\")));\r\n\t\tint cases = Integer.parseInt(f.readLine());\r\n\t\t\r\n\t\tfor(int q = 0; q< cases; q++){\r\n\t\tint n = Integer.parseInt(f.readLine());\r\n\t\tList<Integer> master =new ArrayList<Integer>();\r\n\t\tList<Integer> solution =new ArrayList<Integer>();\r\n\t\t\r\n\t\tfor(int w = 0; w < (n+n-1); w++){\r\n\t\t\tString in = f.readLine();\r\n\t\t\tString[] parts = in.split(\" \");\r\n\t\t\tfor(int i= 0; i<parts.length; i++){\r\n\t\t\t\tmaster.add(Integer.parseInt(parts[i]));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(master);\r\n\t\tdo{\r\n\t\t\tif(master.size()==1){\r\n\t\t\t\tsolution.add(master.get(0));\r\n\t\t\t\tSystem.out.println(\"IN HERE\" + master);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tint j = master.get(0);\r\n\t\t\tmaster.remove(0);\r\n\t\t\tif(master.contains(j)){\r\n\t\t\t\tfor(int p = 0; p <master.size();p++){\r\n\t\t\t\t\tif(master.get(p).equals(j)){\r\n\t\t\t\t\t\tmaster.remove(p);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tsolution.add(j);\r\n\t\t\t}\r\n\t\t}while(master.size()!=0);\r\n\t\tCollections.sort(solution);\r\n\t\tSystem.out.println(solution);\r\n\t\tString output1 = \"\";\r\n\t\tfor(int y = 0; y< solution.size();y++){\r\n\t\t\tif((y+1)==solution.size()){\r\n\t\t\t\toutput1 = output1 + solution.get(y);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\toutput1 = output1 + solution.get(y) + \" \";\r\n\t\t}\r\n\t\tout.write(\"Case #\" + (q+1) + \": \" + output1);\r\n\t\tif((q+1)!=cases){\r\n\t\t\tout.write(\"\\n\");\r\n\t\t}\r\n\t\t}\r\n\t\tout.close();\r\n\t\tf.close();\r\n\t}\r\n\r\n}\r\n", "idx": "6527"}
{"func": "package googlejam6.p528;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Map.Entry;\r\nimport java.util.Set;\r\nimport java.util.TreeSet;\r\n\r\n\r\npublic class Rank {\r\n\r\n\t/**\r\n\t * @param args\r\n\t * @throws IOException \r\n\t */\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tFile file = new File(\"C:\\\\Users\\\\manju\\\\Downloads\\\\B-large.in.txt\");\r\n\t    File outFile = new File(\"C:\\\\Users\\\\manju\\\\Downloads\\\\B-large.out.txt\");\r\n\t    BufferedReader br = new BufferedReader(new FileReader(file));\r\n\t    BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\r\n\t    int testCases = Integer.parseInt(br.readLine());\r\n\t    for(int t=1;t<=testCases;t++)\r\n\t    {\r\n\t        String line = br.readLine().trim();\r\n\t        Integer n = Integer.parseInt(line);\r\n\t        int endIn = 2*n-1;\r\n\t\t\tint a[][] = new int [n][n];\r\n\t\t\tList<List<Integer>> inList = new ArrayList<List<Integer>>();\r\n\t\t\tSet<Integer> out = new TreeSet<Integer>();\r\n\t\t\t//Set<String> stList = new TreeSet<String>();\r\n\t\t\tMap<Integer, Integer> itMap = new HashMap<Integer, Integer>();\r\n\t        for(int i=0; i< endIn;i++)\r\n\t        {\r\n\t        \tline = br.readLine().trim();\r\n\t        \tString[] numberArray = line.split(\" \");\r\n\t        \t\r\n\t        \t\r\n\t        \tchar ch[] = line.toCharArray();\r\n\t        \t//List<Integer> list = new ArrayList<Integer>();\r\n\t        \tfor (String number : numberArray) {\r\n\t        \t\tint key = Integer.parseInt(number);\r\n\t        \t   // list.add(key);\r\n\t        \t    if(!(itMap.containsKey(key)))\r\n\t        \t    {\r\n\t        \t    \titMap.put(key, 1);\r\n\t        \t    }\r\n\t        \t    else\r\n\t        \t    {\r\n\t        \t    \titMap.put(key, itMap.get(key)+1);\r\n\t        \t    }\r\n\t        \t}\r\n\t        \t//inList.add(list);\r\n\t        \t//System.out.println(list);\r\n\t        }\r\n\t        System.out.println(itMap);\r\n\t        \r\n\t        for(Entry<Integer, Integer> entry : itMap.entrySet())\r\n\t        {\r\n\t        \tif (entry.getValue()%2!=0)\r\n\t        \t{\r\n\t        \t\tout.add(entry.getKey());\r\n\t        \t}\r\n\t        }\r\n\t        System.out.println(out);\r\n\t        \r\n\r\n\t\t\tbw.write(\"Case #\" + t +\": \");\r\n\t\t\tfor(Integer i : out)\r\n\t\t\t{\r\n\t\t\t\tbw.write(i + \" \");\r\n\t\t\t}\r\n\t        if(t !=testCases)\r\n\t        {\r\n\t        \tbw.newLine();\r\n\t        }\r\n\r\n\t        \r\n\t    }\r\n\t    br.close();\r\n\t    bw.close();\r\n\t    \r\n\t    \r\n\t\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "6528"}
{"func": "package googlejam6.p530;\nimport java.io.BufferedInputStream;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedList;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(new BufferedInputStream(System.in));\r\n        int nCases = sc.nextInt();\r\n        sc.nextLine();\r\n        for (int i = 0; i < nCases; i++) {\r\n            int n = sc.nextInt();\r\n            int totalN = n * (2 * n - 1);\r\n            System.out.print(\"Case #\" + String.valueOf(i + 1) + \":\");\r\n            HashMap<Integer, Integer> counter = new HashMap<>();\r\n            for (int j = 0; j < totalN; j++) {\r\n                int curr = sc.nextInt();\r\n                if (counter.containsKey(curr) && counter.get(curr) == 1) {\r\n                    counter.put(curr, 0);\r\n                } else {\r\n                    counter.put(curr, 1);\r\n                }\r\n            }\r\n            LinkedList<Integer> list = new LinkedList<>();\r\n            counter.forEach((h, fl) -> { if (fl > 0) list.add(h); });\r\n            list.sort(Integer::compareTo);\r\n            list.forEach(h -> System.out.print(\" \" + String.valueOf(h)));\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n", "idx": "6530"}
{"func": "package googlejam6.p532;\n\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class RankAndFile {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n\r\n        for (int i = 0; i < t; i++) {\r\n            int N = sc.nextInt();\r\n            int[] count = new int[2501];\r\n            int[] arr = new int[N];\r\n            for (int j = 0; j < 2 * N - 1; j++) {\r\n                for (int k = 0; k < N; k++) {\r\n                    count[sc.nextInt()]++;\r\n                }\r\n            }\r\n            int initial = -1;\r\n            int s = 0;\r\n            for (int j = 0; j < 2501; j++) {\r\n                if (count[j] % 2 == 1) {\r\n                    arr[s++] = j;\r\n                    if (s == N) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            Arrays.sort(arr);\r\n            System.out.print(\"Case #\"+(i+1)+\":\");\r\n            for(int j=0;j<N;j++){\r\n                System.out.print(\" \"+arr[j]);\r\n            }\r\n            System.out.println(\"\");\r\n        }\r\n\r\n    }\r\n\r\n}\r\n", "idx": "6532"}
{"func": "package googlejam6.p533;\nimport java.util.*;\r\n\r\npublic class GCJ2016B1 {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        for (int k = 1; k <= t; k++) {\r\n            int n = sc.nextInt();\r\n            TreeSet<Integer> set = new TreeSet<>();\r\n            for (int i = 0; i < 2 * n - 1; i++) {\r\n                for (int j = 0; j < n; j++) {\r\n                    int a = sc.nextInt();\r\n                    if (set.contains(a)) {\r\n                        set.remove(a);\r\n                    } else {\r\n                        set.add(a);\r\n                    }\r\n                }\r\n            }\r\n            System.out.print(\"Case #\" + k + \":\");\r\n            for (int a : set) {\r\n                System.out.print(\" \" + a);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "6533"}
{"func": "package googlejam6.p534;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\nimport java.io.PrintWriter;\nimport java.io.IOException;\n\nimport java.util.HashMap;\nimport java.util.Arrays;\n\n\npublic class RankFile{\n\n    public static void main(String[] args){\n        try{\n            File inputFile = new File(\"B-large.in\");\n            FileInputStream streamin = new FileInputStream(inputFile);\n            BufferedReader br = new BufferedReader(new InputStreamReader(streamin));\n            String line = br.readLine();\n            int numTests = Integer.parseInt(line);\n            int testNum = 0;\n            File outputFile = new File(\"B-large-solution.txt\");\n            PrintWriter writer = new PrintWriter(outputFile);\n            while ((line = br.readLine()) != null){\n                testNum++;\n                int N = Integer.parseInt(line);\n                int[][] input = new int[2*N-1][N];\n                for(int i = 0; i < 2*N-1; i++){\n                    line = br.readLine();\n                    String[] parts = line.split(\" \");\n                    for(int j = 0; j < N; j++){\n                        input[i][j] = Integer.parseInt(parts[j]);\n                    }\n                }\n\t\t\t\tHashMap<Integer,Integer> map = new HashMap<>();\n\t\t\t\tfor(int i = 0; i < 2*N-1; i++){\n\t\t\t\t    for(int j1 = 0; j1 < N; j1++){\n\t\t\t\t        Integer count = map.get(input[i][j1]);\n\t\t\t\t        if(count != null){\n\t\t\t\t            map.put(input[i][j1], count+1);\n\t\t\t\t        }else{\n\t\t\t\t            map.put(input[i][j1], 1);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tint[] res1 = new int[N];\n\t\t\t\tint count = 0;\n\t\t\t\tfor(int key : map.keySet()){\n\t\t\t\t    if(map.get(key) % 2 != 0){\n\t\t\t\t        res1[count] = key;\n\t\t\t\t        count++;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tArrays.sort(res1);\n                int[] res = res1;\n                String out;\n                out = \"Case #\" + testNum + \":\";\n                for(int j = 0; j < N; j++){\n                    out = out + \" \" + res[j];\n                }\n                writer.println(out);\n            }\n            writer.close();\n        }catch (IOException e){\n            System.out.println(\"IOException\");\n        }\n    }\n}\n", "idx": "6534"}
{"func": "package googlejam6.p535;\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\nimport java.util.Vector;\r\n\r\n/**\r\n * Created by Skipper on 4/15/2016.\r\n */\r\npublic class B2 {\r\n\r\n    public static void main(String[] args) {\r\n\r\n//Find the numbers that are not in even values\r\n        //sort those rows\r\n\r\n        Scanner sc = new Scanner(System.in);\r\n        int T = sc.nextInt();\r\n        for( int i = 0; i < T; i++ ){\r\n            int n = sc.nextInt();\r\n            Vector<Integer> numbers = new Vector<Integer>();\r\n            int amount = ( 2 * n ) - 1;\r\n            while( amount != 0 ){\r\n\r\n                for( int j = 0; j < n; j++ ){\r\n                    int temp = sc.nextInt();\r\n\r\n                    numbers.add( temp );\r\n                }\r\n                amount--;\r\n            }\r\n            int[] num = new int[ numbers.size() ];\r\n            for( int ni = 0; ni < numbers.size(); ni++ ){\r\n                num[ ni ] = numbers.get( ni );\r\n            }\n\t\t\tint[] sorted = num.clone();\n\t\t\tArrays.sort(sorted);\n\t\t\t\n\t\t\tboolean odd = true;\n\t\t\tint len = 0;\n\t\t\tfor (int i1 = 1; i1 < sorted.length; ++i1) {\n\t\t\t    if (sorted[i1] == sorted[i1 - 1]) {\n\t\t\t        odd = !odd;\n\t\t\t    } else {\n\t\t\t        if (odd) {\n\t\t\t            sorted[len++] = sorted[i1 - 1];\n\t\t\t        }\n\t\t\t        odd = true;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tif (odd) {\n\t\t\t    sorted[len++] = sorted[sorted.length - 1];\n\t\t\t}\r\n            int[] done = Arrays.copyOf(sorted, len);\r\n\r\n            //System.out.println(\"please work\");\r\n            String finaldone = \"\";\r\n            for( int joe = 0; joe < done.length; joe++ ){\r\n                finaldone = finaldone +  done[joe] + \" \";\r\n            }\r\n\r\n            Arrays.sort( done );\r\n\r\n/*\r\n            System.out.println(\"Should have a list of numbers\");\r\n            for( int q1= 0; q1 < numbers.size(); q1++ ){\r\n                System.out.println( numbers.get( q1 ) );\r\n                */\r\n\r\n\r\n            //First find the row with the smalled calumn\r\n            //look for integers that appear in odd numbers, those are the odd numbers and will need a second integer\r\n            int index = i + 1;\r\n            System.out.println( \"Case #\" + index + \": \" + finaldone );\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n", "idx": "6535"}
{"func": "package googlejam6.p538;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\n\r\npublic class B {\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            Scanner scan = new Scanner(new File(\"roundA/B.in\"));\r\n            PrintWriter w = new PrintWriter(new FileWriter(\"roundA/B.out\"));\r\n            int caseC = scan.nextInt();\r\n            for (int i = 1; i <= caseC; i++) {\r\n                HashSet<Integer> set = new HashSet<Integer>();\r\n                int n = scan.nextInt();\r\n                for(int j=0;j<(2*n-1)*n;j++){\r\n                    int no = scan.nextInt();\r\n                    if(set.contains(no)){\r\n                        set.remove(no);\r\n                    }else{\r\n                        set.add(no);\r\n                    }\r\n                }\r\n\r\n                Integer[] list = set.toArray(new Integer[set.size()]);\r\n                Arrays.sort(list);\r\n                w.print(String.format(\"Case #%d:\", i));\r\n                for(Integer number: list){\r\n                    w.print(String.format(\" %d\", number));\r\n                }\r\n                w.println();\r\n            }\r\n            scan.close();\r\n            w.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n", "idx": "6538"}
{"func": "package googlejam6.p539;\n\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class RankAndFile {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint numberOfTestCases = in.nextInt();\n\t\tint x = 1;\n\t\tMap<Integer, List<List<Integer>>> testCaseMap = new HashMap<Integer, List<List<Integer>>>();\n\t\tfor (int i = 0; i < numberOfTestCases; i++) {\n\t\t\tList<List<Integer>> inputRowColumnList = new ArrayList<List<Integer>>();\n\t\t\tInteger gridSize = in.nextInt();\n\t\t\tfor (int j = 0; j < (2*gridSize - 1) ; j ++) {\n\t\t\t\tList<Integer> inputList = new ArrayList<Integer>();\n\t\t\t\tfor (int k = 0; k < gridSize; k++) {\n\t\t\t\t\tinputList.add(in.nextInt());\n\t\t\t\t}\n\t\t\t\tinputRowColumnList.add(inputList);\n\t\t\t}\n\t\t\ttestCaseMap.put(i, inputRowColumnList);\n\t\t}\n\t\tfor (int i = 0; i< numberOfTestCases; i++) {\n\t\t\tList<Integer> missingList1 = new ArrayList<Integer>();\n\t\t\tMap<Integer, Integer> oddEvenMap = new HashMap<Integer, Integer>();\n\t\t\tfor (List<Integer> list : testCaseMap.get(i)) {\n\t\t\t\tfor (Integer height : list) {\n\t\t\t\t\tInteger oddEvenCount = oddEvenMap.get(height);\n\t\t\t\t\tif (null == oddEvenCount) {\n\t\t\t\t\t\toddEvenCount = 1;\n\t\t\t\t\t\toddEvenMap.put(height, oddEvenCount);\n\t\t\t\t\t} else {\n\t\t\t\t\t\toddEvenCount = oddEvenCount + 1;\n\t\t\t\t\t\toddEvenMap.put(height, oddEvenCount);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (Map.Entry<Integer, Integer> entry : oddEvenMap.entrySet()) {\n\t\t\t\tInteger height = entry.getKey();\n\t\t\t\tInteger oddEven = entry.getValue();\n\t\t\t\tif (oddEven % 2 != 0) {\n\t\t\t\t\tmissingList1.add(height);\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(missingList1);\n\t\t\tList<Integer> missingList = missingList1;\n\t\t\tSystem.out.print(\"Case #\" + x + \":\");\n\t\t\tfor (Integer temp : missingList) {\n\t\t\t\tSystem.out.print(\" \" + temp);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tx++;\n\t\t}\n\t}\n\n}\n", "idx": "6539"}
{"func": "package googlejam6.p543;\n\r\n\timport java.util.*;\r\n\timport java.io.*;\r\n\r\n\tpublic class  Round1AProblemB {\r\n\t\tpublic static void main(String[] args) throws Exception {\r\n\t\t\tRound1AProblemB r = (new  Round1AProblemB());\n\t\t\tScanner sc = new Scanner(new FileReader(\"input.in\"));\n\t\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n\t\t\tint T = sc.nextInt();\n\t\t\tfor (int t=0; t<T; t++) {\n\t\t\t\tString ans = \"\";\n\t\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\t\tSystem.out.println(\"Now case \" + (t+1));\n\t\t\t\tint N = sc.nextInt();\n\t\t\t\tfor(int i=0; i<(2*N-1)*N;i++){\n\t\t\t\t\tString s = sc.next();\n\t\t\t\t\tif(list.contains(Integer.valueOf(s))){\n\t\t\t\t\t\tlist.remove(list.indexOf(Integer.valueOf(s)));\n\t\t\t\t\t}else{\n\t\t\t\t\t\tlist.add(Integer.valueOf(s));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tCollections.sort(list);\n\t\t\t\tpw.print(\"Case #\" + (t+1) + \":\");\n\t\t\t    Iterator<Integer> it = list.iterator();\n\t\t\t    while (it.hasNext()) {\n\t\t\t        pw.print( \" \" + it.next());\n\t\t\t    }\n\t\t\t\tpw.println();\n\t\t\t}\n\t\t\tpw.flush();\n\t\t\tpw.close();\n\t\t\tsc.close();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n", "idx": "6543"}
{"func": "package googlejam6.p544;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class prblmB {\r\n    final static String PROBLEM_NAME = \"prblmB\";\r\n    final static String WORK_DIR = \"F:\\\\GCJ\\\\\" + PROBLEM_NAME + \"\\\\\";\r\n  \t\r\n    public static void main(String[] args) throws Exception {\r\n        //Scanner sc = new Scanner(new FileReader(WORK_DIR + \"B-small-attempt0.in\"));\r\n        //Scanner sc = new Scanner(new FileReader(WORK_DIR + \"B-small-attempt1.in\"));\r\n\t\tScanner sc = new Scanner(new FileReader(WORK_DIR + \"B-large.in\"));\r\n\t\t//Scanner sc = new Scanner(new FileReader(WORK_DIR + \"input.txt\"));\r\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\r\n        int caseCnt = sc.nextInt();\r\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\r\n            System.out.println(\"Processing test case \" + (caseNum + 1));\r\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n\t\t\tprblmB r = new prblmB();\r\n            int N = sc.nextInt();\n\t\t\t\t\t\tint ar[][] = new int[2*N-1][N];\n\t\t\t\t\t\tint br[] = new int[2501];\n\t\t\t\t\t\tfor(int i=0;i<2*N-1;i++)\n\t\t\t\t\t\t{ for(int j=0;j<N;j++)\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\t ar[i][j] = sc.nextInt();\n\t\t\t\t\t\t\t if(br[ar[i][j]]==0)\n\t\t\t\t\t\t\t\t br[ar[i][j]]=1;\n\t\t\t\t\t\t\t else\n\t\t\t\t\t\t\t\t br[ar[i][j]]=0;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t }\t\t\t\t \n\t\t\t\t       }\n\t\t\t\t\t   \n\t\t\t\t\t for(int i=0;i<2501;i++)\n\t\t\t\t\t\t {\n\t\t\t\t\t\t\tif(br[i]==1)\n\t\t\t\t\t\t\t pw.print(i+\" \");\n\t\t\t\t\t\t }\t\t\t\t \n\t\t\tpw.println();\r\n        }\r\n        pw.flush();\r\n        pw.close();\r\n        sc.close();\r\n    }\r\n}\r\n", "idx": "6544"}
{"func": "package googlejam6.p545;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class B {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t//BufferedReader f = new BufferedReader(new FileReader(\"B-small-attempt1.in\"));\r\n\t\t//PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\r\n\t\t\t//\t\"B-small.out\")));\r\n\t\t BufferedReader f=new BufferedReader(new FileReader(\"B-large.in\"));\r\n\t\t PrintWriter out=new PrintWriter(new BufferedWriter(new\r\n\t\t FileWriter(\"B-large.out\")));\r\n\r\n\t\tint t,n;\r\n\t\tt = Integer.parseInt(f.readLine());\r\n\t\tfor(int tt = 1; tt <= t; tt++) {\r\n\t\t\tint[] dp=new int[2501];\r\n\t\t\tn=Integer.parseInt(f.readLine());\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor(int j=0;j<2*n-1;j++){\r\n\t\t\t\tStringTokenizer st=new StringTokenizer(f.readLine());\r\n\t\t\t\tfor(int k=0;k<n;k++){\r\n\t\t\t\t\t\r\n\t\t\t\t\tdp[Integer.parseInt(st.nextToken())]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tint l=1;StringBuffer buf=new StringBuffer();\r\n\t\t\t\r\n\t\t\t//critical code\r\n\t\t\twhile(l<2501){\r\n\t\t\t\tif(dp[l]!=0 && dp[l]%2==1){\r\n\t\t\t\t\t/*\r\n\t\t\t\t\tif(buf.length()==n){\r\n\t\t\t\t\t\tbuf.append(l);break;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse*/\r\n\t\t\t\t\t\r\n\t\t\t\t\tbuf.append(l+\" \");\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tl++;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tbuf.deleteCharAt(buf.length()-1);\r\n\t\tSystem.out.println(\"Case #\" + (tt) + \": \"+buf);\r\n\t\t\tout.println(\"Case #\" + (tt) + \": \" + buf);\r\n\t\t}\r\n\r\n\t\t f.close();out.close();\r\n\t\t System.out.println(\"done bro!\");\r\n\t}\r\n\r\n}\r\n", "idx": "6545"}
{"func": "package googlejam6.p546;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class Rank {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tList<String[]> lines = new ArrayList<String[]>();\r\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(new File(\r\n\t\t\t\t\"round1/B-large.in\")))) {\r\n\t\t\tString line;\r\n\t\t\twhile ((line = br.readLine()) != null) {\r\n\t\t\t\tlines.add(line.split(\" \"));\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\n\t\tString h = \"\";\n\t\tint testCases = Integer.valueOf(lines.get(0)[0].trim());\n\t\tint prevN = 0;\n\t\tfor (int z = 0; z < testCases; z++) {\n\t\t\tint n = Integer.valueOf(lines.get(z + 1 + prevN)[0].trim());\n\t\t\tint p = n * 2 - 1;\n\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\tfor (int i = 0; i < p; i++) {\n\t\t\t\tString[] st = lines.get(z + i + 2 + prevN);\n\t\t\t\tfor (String s : st) {\n\t\t\t\t\tInteger a = Integer.valueOf(s);\n\t\t\t\t\tif (list.contains(a)) {\n\t\t\t\t\t\tlist.remove(a);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlist.add(a);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tCollections.sort(list);\n\t\t\tStringBuilder sb = new StringBuilder(list.size());\n\t\t\tfor (Integer c : list)\n\t\t\t\tsb.append(c + \" \");\n\t\t\tString result1 = sb.toString();\n\t\t\n\t\t\th += \"Case #\" + (z + 1) + \": \" + new String(result1) + \"\\n\";\n\t\t\tprevN += 2 * n - 1;\n\t\t}\r\n\t\tString result = h;\r\n\t\tSystem.out.println(result);\r\n\t\tPrintWriter writer = new PrintWriter(\"round1/B-large.txt\", \"UTF-8\");\r\n\t\twriter.println(result);\r\n\t\twriter.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "6546"}
{"func": "package googlejam6.p547;\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        final String FILE = \"B-large\";\r\n        PrintWriter outPrinter = new PrintWriter(new File(\"C:\\\\Users\\\\ivo.correia\\\\Downloads\\\\\" + FILE  + \".out\"));\r\n\r\n        Scanner scanIn = new Scanner(new File(\"C:\\\\Users\\\\ivo.correia\\\\Downloads\\\\\" + FILE + \".in\"));\r\n        final int T = Integer.parseInt(scanIn.nextLine());\r\n\r\n        for (int entry = 0; entry < T; entry++) {\r\n            final int N = Integer.parseInt(scanIn.nextLine());\r\n\r\n            int[] numbers = new int[2501];\r\n\r\n            for (int lines = 0; lines < N*2 -1; lines++)  {\r\n                String[] rawIn = scanIn.nextLine().split(\" \");\r\n                for (int i = 0; i < N; i++) {\r\n                    int number = Integer.parseInt(rawIn[i]);\r\n                    numbers[number] = numbers[number] + 1;\r\n                }\r\n            }\r\n\r\n            outPrinter.write(\"Case #\" + (entry + 1) + \":\");\r\n            for (int i = 0; i < 2501; i++) {\r\n                if (numbers[i] > 0 && numbers[i] % 2 == 1) {\r\n                    outPrinter.write(\" \" + i);\r\n                }\r\n            }\r\n\r\n            outPrinter.write(\"\\n\");\r\n        }\r\n\r\n        outPrinter.close();\r\n        scanIn.close();\r\n    }\r\n\r\n}\r\n", "idx": "6547"}
{"func": "package googlejam6.p549;\nimport java.util.Scanner;\r\n\r\npublic class TaskB {\r\n\tpublic static Scanner in = new Scanner(System.in);\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\tint numOfCases = in.nextInt();\r\n\t\tfor(int i = 0 ; i < numOfCases; i++){\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] res = new int[n];\r\n\t\t\tint lists[][] = new int[2*n-1][n];\r\n\t\t\tint[] nums = new int[2501];\r\n\t\t\tfor(int j = 0 ; j < 2*n-1;j++){\r\n\t\t\t\tfor(int k = 0 ; k < n ; k++){\r\n\t\t\t\t\tlists[j][k] = in.nextInt();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int j = 0 ; j < 2*n-1;j++){\r\n\t\t\t\tfor(int k = 0 ; k < n ; k++){\r\n\t\t\t\t\tnums[lists[j][k]] ++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint cnt = 0;\r\n\t\t\tfor(int j = 0 ; j < nums.length;j++){\r\n\t\t\t\tif(nums[j]%2 != 0){\r\n\t\t\t\t\tres[cnt] = j;\r\n\t\t\t\t\tcnt++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \": \");\r\n\t\t\tfor(int j  = 0 ; j < res.length ; j++){\r\n\t\t\t\tSystem.out.print(res[j] + \" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6549"}
{"func": "package googlejam6.p551;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.util.*;\r\n\r\npublic class google_rankandfile {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\r\ntry{\r\n\t\t\t\r\n\t\t\tBufferedReader br = new BufferedReader(new FileReader(\"B-large0.in\"));\r\n\t\t\tint l=0;\r\n\t\t\tString line=\"\";\r\n\t\t\tint t = Integer.parseInt(br.readLine());\r\n\t\t\tString[] s = new String[t];\r\n\t\t\t/*while ((line = br.readLine()) != null) {\r\n\t\t\t\t//System.out.println(line);\r\n\t\t\t\t\r\n\t\t\t\ts[l] = line;\r\n\t\t\t\tl++;\r\n\t\t\t}*/\r\n\t\t\t\r\n\t\t\tfor(int i=0;i<t;i++)\r\n\t\t\t{\r\n\t\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\t\t//System.out.println(N);\r\n\t\t\t\tList<String> matrix =new ArrayList<String>();\r\n\t\t\t\tMap<String,Integer> hm = new HashMap<String,Integer>();\r\n\t\t\t\t//System.out.println(N);\r\n\t\t\t\tint lines = 2*N-1;\r\n\t\t\t\tfor(int j=0;j<lines;j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tmatrix.add(br.readLine());\r\n\t\t\t\t//\tSystem.out.println(matrix.get(j));\r\n\t\t\t\t\tString[] temp = matrix.get(j).split(\" \");\r\n\t\t\t\t\tfor(int k=0;k<temp.length;k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(!hm.containsKey(temp[k]))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//System.out.println(\"arr: \"+temp[k]);\r\n\t\t\t\t\t\t\thm.put(temp[k],1);\r\n\t\t\t\t\t\t\t//System.out.println(\"hm: \"+hm.get(arr[i][j]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\thm.put(temp[k], hm.get(temp[k])+1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// System.out.println(matrix.get(j));\r\n\t\t\t\t\r\n\t\t\t\t \r\n\t\t\t\tList<String> res = new ArrayList<String>();\r\n\t\t\t\t//System.out.println(\"key: \"+1+\" value: \"+hm.get(1));\r\n\t\t\t\tfor(String k : hm.keySet())\r\n\t\t\t\t{\r\n\t\t\t\t\t//System.out.println(\"key: \"+k+\" value: \"+hm.get(k));\r\n\t\t\t\t\tif(hm.get(k)%2!=0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tres.add(k);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tList<Integer> res1 = new ArrayList<Integer>();\r\n\t\t\t\tfor(int z=0;z<res.size();z++)\r\n\t\t\t\t{\r\n\t\t\t\t\tres1.add(Integer.parseInt(res.get(z)));\r\n\t\t\t\t}\r\n\t\t\t\tCollections.sort(res1);\r\n\t\t\t\tSystem.out.print(\"Case #\"+(i+1)+\": \"); // change case number\r\n\t\t\t\tfor(int p=0;p<res1.size();p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tSystem.out.print(res1.get(p)+\" \");\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println();\r\n\r\n\t\t\t\t//char[] \r\n\t\t\t\t\r\n\t\t\t\t//System.out.println(\"Case #\"+(i+1)+\": \"+count);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}catch (Exception e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\r\n\t\t\r\n\t\t/*\r\n\t\tint arr[][] = {{1,2,3},{2,3,5},{3,5,6},{2,3,4},{1,2,3}};\r\n\t\t\r\n\t\tMap<Integer,Integer> hm = new HashMap<Integer,Integer>();\r\n\t\tfor(int i=0;i<arr.length;i++)\r\n\t\t{\r\n\t\t\tfor(int j=0;j<arr[0].length;j++)\r\n\t\t\t{\r\n\t\t\t\tif(!hm.containsKey(arr[i][j]))\r\n\t\t\t\t{\r\n\t\t\t\t\t//System.out.println(\"arr: \"+arr[i][j]);\r\n\t\t\t\t\thm.put(arr[i][j],1);\r\n\t\t\t\t\t//System.out.println(\"hm: \"+hm.get(arr[i][j]));\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\thm.put(arr[i][j], hm.get(arr[i][j])+1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tList<Integer> res = new ArrayList<Integer>();\r\n\t\t//System.out.println(\"key: \"+1+\" value: \"+hm.get(1));\r\n\t\tfor(Integer k : hm.keySet())\r\n\t\t{\r\n\t\t\t//System.out.println(\"key: \"+k+\" value: \"+hm.get(k));\r\n\t\t\tif(hm.get(k)%2!=0)\r\n\t\t\t{\r\n\t\t\t\tres.add(k);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tCollections.sort(res);\r\n\t\tSystem.out.print(\"Case #\"+(1)+\": \"); // change case number\r\n\t\tfor(int i=0;i<res.size();i++)\r\n\t\t{\r\n\t\t\tSystem.out.print(res.get(i)+\" \");\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n}\r\n", "idx": "6551"}
{"func": "package googlejam6.p553;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\npublic class soldier{\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\r\n\t\tint count = in.nextInt();\r\n\r\n\t\tfor (int k = 0; k < count; k++) {\r\n\r\n\t\tint sideSize = in.nextInt();\r\n\t\tint[] side = new int[sideSize * (2 * sideSize - 1)];\r\n\t\tArrayList<Integer> sideToSort = new ArrayList<>();\r\n\r\n\t\t\tfor (int i = 0; i < side.length; i++) {\r\n\t\t\t\tside[i] = in.nextInt();\r\n\t\t\t}\r\n\r\n\t\t\tfor (int i = 0; i < side.length; i++) {\r\n\t\t\t\tint counter = 1;\r\n\r\n\t\t\t\tfor (int j = 0; j < side.length; j++) {\r\n\t\t\t\t\tif (i != j && side[i] == side[j]) {\r\n\t\t\t\t\t\tcounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (counter % 2 != 0 && !sideToSort.contains(side[i])) {\r\n\t\t\t\t\tsideToSort.add(side[i]);\r\n\t\t\t\t}\r\n\t\t\t\tif (sideToSort.size() == sideSize) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tCollections.sort(sideToSort);\r\n\r\n\t\t\t\tSystem.out.print(\"Case #\" + (k + 1) +\": \");\r\n\t\t\t\tfor (int j = 0; j < sideToSort.size(); j++) {\r\n\t\t\t\t\tSystem.out.print(sideToSort.get(j) + \" \");\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6553"}
{"func": "package googlejam6.p555;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\n/**\n * Created by saikat on 16/4/16.\n */\npublic class Rank_File {\n\n    public static void main(String arg[]) throws IOException {\n        FileReader f = new FileReader(\"B-large(1).in\");\n        BufferedReader br = new BufferedReader(f);\n        FileWriter fw = new FileWriter(\"output\");\n\n        int T,N,t,n;\n        String[] temp;\n        int[] arr;\n        T=Integer.parseInt(br.readLine());\n        t=T;\n        while(T-->0){\n            arr=new int[2500];\n            N=Integer.parseInt(br.readLine());\n            n=2*N-1;\n            fw.write(\"Case #\" + (t - T) + \": \");\n\n            while(n-->0) {\n                //System.out.println(\"n = \"+n);\n                temp = br.readLine().split(\" \");\n                for (String s : temp) {\n                    //System.out.println(s);\n                    arr[Integer.parseInt(s)-1]++;\n                }\n            }\n\n            for(int i=0;i<2500;i++){\n                //System.out.print(\"  \"+(arr[i]));\n                if(arr[i]%2!=0){\n                    fw.write(\" \"+(i+1));\n                }\n                arr[i]=0;\n            }\n            fw.write(\"\\n\");\n        }\n        fw.close();\n    }\n}\n", "idx": "6555"}
{"func": "package googlejam6.p557;\nimport java.util.*;\nimport java.io.*;\n\npublic class Round1AB {\n  \n  public static void main(String[] args) {\n    \n    Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    \n    int amount = scan.nextInt();\n    scan.nextLine();\n    \n    for (int i = 0; i < amount; i++) {\n      \n      int cases = scan.nextInt();\n      scan.nextLine();\n      \n      int[] arr = new int[2501];\n      \n      for (int x = 0; x < 2*cases-1; x++) {\n        \n        String[] curr = scan.nextLine().split(\" \");\n        \n        // find the smallest for ROW\n        for (String r : curr) {\n          arr[Integer.parseInt(r)]++;\n        }\n        \n      }\n      \n      String f = \"\";\n      for (int num = 1; num < arr.length; num++) {\n        if (arr[num] == 1 || (arr[num] > 2 && arr[num]%2 != 0)) {\n          f += \" \" + num;\n        \n        }\n        \n      }\n      System.out.println(\"Case #\" + (i+1) + \":\" + f);\n\n      \n    }\n    \n  }\n}", "idx": "6557"}
{"func": "package googlejam6.p558;\nimport java.util.*;\r\npublic class Rank_Files {\r\npublic static void main(String ar[])\r\n{\r\n\tScanner input=new Scanner(System.in);\r\n\tint t=input.nextInt();\r\n\tint n;\r\n\tfor(int i=1;i<=t;i++)\r\n\t{\r\n\t\tSystem.out.print(\"Case #\"+i+\": \");\r\n\t\tn=input.nextInt();\r\n\t\tint a[]=new int[2501];\r\n\t\tfor(int j=0;j<2501;j++)\r\n\t\ta[j]=0;\r\n\t\tint l=(2*n*n-n);\r\n\t\tfor(int j=0;j<l;j++)\r\n\t\t{\r\n\t\t\tint k=input.nextInt();\r\n\t\t\ta[k]++;\r\n\t\t}\r\n\t\tfor(int j=0;j<2501;j++)\r\n\t\t{\r\n\t\t\tif(a[j]%2!=0)\r\n\t\t\t\tSystem.out.print(j+\" \");\r\n\t\t}\r\n\t\tSystem.out.println();\r\n\t}\r\n}\r\n}\r\n", "idx": "6558"}
{"func": "package googlejam6.p559;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.HashSet;\nimport java.util.Scanner;\n\npublic class rankAndFile {\n\tpublic static void main(String[] args) throws IOException {\n\t\tStringBuffer sb; \n\t\tScanner sc = new Scanner(new FileReader(\"B-large (1).in\"));\n\t\tint N=Integer.valueOf(sc.nextLine());\n\t\tFileOutputStream fs = new FileOutputStream(new File(\"202.txt\"));\n\t\tPrintStream p = new PrintStream(fs);\n\t\tHashSet<String> set=new HashSet<>();\n\t\tloop:for(int i=1;i<=N;i++){\n\t\t\tset=new HashSet<>();\n\t\t\tint people=sc.nextInt();\n\t\t\tint[] height=new int [3000];\n\t\t\tfor(int j=0;j<2*people-1;j++){\n\t\t\t\tfor(int k=0;k<people;k++){\n\t\t\t\t\theight[sc.nextInt()]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.print(\"Case #\"+i+\": \");\n\t\t\tp.print(\"Case #\"+i+\": \");\n\t\t\tfor(int m=0;m<height.length;m++){\n\t\t\t\tif(height[m]%2!=0){\n\t\t\t\t\tSystem.out.print(m+\" \");\n\t\t\t\t\tp.print(m+\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tp.println();\n\t\t}\n\t}\n}\n", "idx": "6559"}
{"func": "package googlejam6.p561;\nimport java.util.*;\r\n\r\nclass Main {\r\n\tpublic static void main (String args[]) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint numCases = sc.nextInt();\r\n\t\t// System.out.println(\"here\");\r\n\t\tStringBuilder out = new StringBuilder();\r\n\t\tfor (int h = 1; h <= numCases; h++) {\r\n\t\t\tint [] heights = new int[2501];\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tfor (int i = 0; i < (2*n)-1; i++) {\r\n\t\t\t\tfor (int k = 0; k < n; k++) {\r\n\t\t\t\t\tint val = sc.nextInt();\r\n\t\t\t\t\theights[val]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// System.out.println(\"Heights: \" + Arrays.toString(heights));\r\n\t\t\t\r\n\t\t\tout.append(String.format(\"Case #%d:\", h));\r\n\t\t\tfor (int i = 0; i < heights.length; i++) {\r\n\t\t\t\tif (heights[i] % 2 == 1) {\r\n\t\t\t\t\tout.append(\" \" + i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.append(\"\\n\");\r\n\t\t}\r\n\t\tSystem.out.print(out+\"\");\r\n\t}\r\n}", "idx": "6561"}
{"func": "package googlejam6.p564;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\n\r\nclass RankAndFile {\r\n\tpublic final static int MAX = 2500;\r\n\tpublic static void main(String[] args) throws java.lang.Exception {\r\n\t\tBufferedReader rd = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tPrintWriter wr = new PrintWriter(System.out);\r\n\r\n\t\tint testCases = Integer.parseInt(rd.readLine());\r\n\t\tint testCase = 1;\r\n\t\t\r\n\t\twhile (testCases-- > 0) {\r\n\t\t\twr.print(\"Case #\" + testCase++ + \": \");\r\n\t\t\tint n = Integer.parseInt(rd.readLine());\r\n\t\t\t\r\n\t\t\tint[] array = new int[MAX + 1];\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < 2 * n - 1; i++) {\r\n\t\t\t\tString[] tokens = rd.readLine().split(\" \");\r\n\t\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\t\tarray[Integer.parseInt(tokens[j])]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tArrayList<Integer> list = new ArrayList<Integer>();\r\n\t\t\t\r\n\t\t\tfor (int i = 1; i <= MAX; i++) {\r\n\t\t\t\tif (array[i] % 2 != 0) { \r\n\t\t\t\t\tlist.add(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tCollections.sort(list);\r\n\t\t\t\r\n\t\t\tfor (int i : list) {\r\n\t\t\t\twr.print(i + \" \");\r\n\t\t\t}\r\n\t\t\twr.println();\r\n\t\t}\r\n\r\n\t\twr.close();\r\n\t}\r\n}\r\n\r\n", "idx": "6564"}
{"func": "package googlejam6.p565;\n\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class RankAndFile {\n\tpublic static void main(String args[] ) throws Exception {\n//\t\tFile output_file = new File(\"RankAndFile_test.txt\");\n//\t\tFile output_file = new File(\"RankAndFile_small.txt\");\n\t\tFile output_file = new File(\"RankAndFile_large.txt\");\n\t\tFileWriter filewriter = new FileWriter(output_file);\n\t\tBufferedWriter bw = new BufferedWriter(filewriter);\n\t\tPrintWriter pw = new PrintWriter(bw);\n\n//\t\tFile input_file = new File(\"B-test.txt\");\n//\t\tFile input_file = new File(\"B-small-attempt0.in.txt\");\n\t\tFile input_file = new File(\"B-large.in.txt\");\n\t\tScanner sc = new Scanner(input_file);\n\t\tint T = sc.nextInt();\n\t\t\n\t\tfor (int i = 1; i <= T; i++) {\n\t\t\tint N = sc.nextInt();\n\t\t\tint checkNumber[] = new int[2501];\n\t\t\tint input_number = N*(2*N-1);\n\t\t\t\t\t\n\t\t\tfor (int j = 0; j < input_number; j++) {\n\t\t\t\tint target = sc.nextInt();\n\t\t\t\tcheckNumber[target] += 1;\n\t\t\t}\n\t\t\t\n\t\t\tStringBuilder answer = new StringBuilder();\n\t\t\tfor (int k = 1; k <= 2500; k++) {\n\t\t\t\tif (checkNumber[k] % 2 == 1) {\n\t\t\t\t\tString new_answer = \" \" + String.valueOf(k); \n\t\t\t\t\tanswer.append(new_answer);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tpw.println(\"Case #\" + String.valueOf(i) + \":\" + answer);\n\t\t}\n\t\tpw.close();\n    }\n}\n", "idx": "6565"}
{"func": "package googlejam6.p566;\nimport java.awt.HeadlessException;\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.Map;\r\nimport java.util.Map.Entry;\r\nimport java.util.Set;\r\nimport java.util.TreeSet;\r\n\r\npublic class RankandFile {\r\n\r\n\tprivate static String infileName, outFileName;\r\n\tprivate static BufferedReader reader;\r\n\tprivate static BufferedWriter writer;\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tinfileName = args[0];\r\n\t\toutFileName = infileName.substring(0, infileName.indexOf('.')).concat(\r\n\t\t\t\t\".out\");\r\n\t\treader = Files.newBufferedReader(Paths.get(infileName));\r\n\t\twriter = Files.newBufferedWriter(Paths.get(outFileName));\r\n\t\tint numTests = Integer.parseInt(reader.readLine());\r\n\t\tfor (int i = 0; i < numTests; i++) {\r\n\t\t\tint len = Integer.parseInt(reader.readLine());\n\t\t\tint[][] in = new int[2*len - 1][len];\n\t\t\tint count = 0;\n\t\t\tint j1 = 0;\n\t\t\tfor (; count < 2*len - 1; count++) {\n\t\t\t\tfor (String s1 : reader.readLine().split(\"\\\\s\")) {\n\t\t\t\t\tin[count][j1++] = Integer.parseInt(s1);\n\t\t\t\t}\n\t\t\t\tj1 = 0;\n\t\t\t}\r\n\t\t\tint hights[][] = in;\n\t\t\tMap<Integer, Integer> m = new HashMap<Integer, Integer>();\n\t\t\tfor (int i1 = 0; i1 < 2*len - 1; i1++)\n\t\t\t\tfor (int j = 0; j < len; j++) {\n\t\t\t\t\tint num = hights[i1][j];\n\t\t\t\t\tif (m.get(num) == null)\n\t\t\t\t\t\tm.put(num, 1);\n\t\t\t\t\telse {\n\t\t\t\t\t\tm.put(num, m.get(num) + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSet<Integer> s = new TreeSet<Integer>();\n\t\t\tfor (Entry<Integer, Integer> e : m.entrySet()) {\n\t\t\t\tif (e.getValue() % 2 != 0)\n\t\t\t\t\ts.add(e.getKey());\n\t\t\t}\n\t\t\tIterator<Integer> iterator = s.iterator();\n\t\t\tString str = \"\";\n\t\t\twhile (iterator.hasNext()) {\n\t\t\t\tstr = str + iterator.next() +\" \";\n\t\t\t}\r\n\t\t\tString ans = str.trim();\r\n\t\t\twriter.write(\"Case #\" + (i + 1) + \": \" + (ans));\n\t\t\twriter.newLine();\r\n\t\t}\r\n\t\treader.close();\n\t\twriter.close();\r\n\t}\r\n}\r\n", "idx": "6566"}
{"func": "package googlejam6.p568;\n\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\npublic class RankFile {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tFile inFile = new File(\"yearOf2016/B-large.in\");\r\n\t\tFile outFile = new File(\"yearOf2016/testOutput.txt\");\r\n\t\tif (!outFile.exists()) {\r\n\t\t     outFile.createNewFile();\r\n\t\t  }\r\n\t\t\r\n\t\tScanner reader = new Scanner(inFile);\r\n\t\tPrintWriter writer = new PrintWriter(outFile);\r\n\t\t\r\n\t\tint cases = reader.nextInt();\r\n\t\tint caseIdx = 1;\r\n\t\t\r\n\t\twhile(caseIdx <= cases){\r\n\t\t\tint N = reader.nextInt();\r\n\t\t\tHashMap<Integer, Integer> numList = new HashMap<>();\r\n\t\t\tfor(int n = 0; n < (2*N - 1)*N; n++){\r\n\t\t\t\tint s = reader.nextInt();\r\n\t\t\t\tif(!numList.containsKey(s)){\r\n\t\t\t\t\tnumList.put(s, 1);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tint temp = numList.get(s);\r\n\t\t\t\t\tnumList.put(s, temp+1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tArrayList<Integer> result = new ArrayList<>();\r\n\t\t\t\r\n\t\t\tfor(int key : numList.keySet()){\r\n\t\t\t\tif(numList.get(key) % 2 != 0){\r\n\t\t\t\t\tresult.add(key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tCollections.sort(result);\r\n\t\t\twriter.print(\"Case #\" + caseIdx + \":\");\r\n\t\t\t\r\n\t\t\tfor(int r : result){\r\n\t\t\t\twriter.print(\" \"+ r);\r\n\t\t\t}\r\n\t\t\twriter.println(\" \");\r\n\t\t\t\r\n\t\t\tcaseIdx += 1;\r\n\t\t}\r\n\t\t\r\n\t\treader.close();\r\n\t\twriter.close();\r\n\r\n\t}\r\n\r\n}", "idx": "6568"}
{"func": "package googlejam6.p569;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Round1A_RankFile {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\t// TODO Auto-generated method stub\r\n\r\n\t\tScanner scan = new Scanner(new File(\"src/Input.txt\"));\r\n\t\tint T = Integer.parseInt(scan.nextLine());\r\n\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\tint N = Integer.parseInt(scan.nextLine());\r\n\t\t\tList<String> list = new ArrayList<String>();\r\n\t\t\tfor (int j = 0; j < (2*N - 1) ; j++) {\r\n\t\t\t\tString line = scan.nextLine();\r\n\t\t\t\tStringTokenizer str = new StringTokenizer(line);\r\n\t\t\t\t\r\n\t\t\t\twhile(str.hasMoreTokens()) {\r\n\t\t\t\t\tString check = str.nextToken();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (list.contains(check)) {\r\n\t\t\t\t\t\tlist.remove(check);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlist.add(check);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint array[] = new int[N];\r\n\t\t\tint j = 0;\r\n\t\t\tfor (String l : list) {\r\n\t\t\t\tarray[j] = Integer.parseInt(l);\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\tArrays.sort(array);\r\n\t\t\tString ans = \"Case #\"+i+\":\";\r\n\t\t\tfor (int l : array) {\r\n\t\t\t\tans = ans + \" \" + l;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(ans);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6569"}
{"func": "package googlejam6.p570;\n\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n\r\n\r\npublic class main{\r\n    public static void main(String[] args){\r\n        Scanner in = new Scanner(System.in);\r\n        int T = in.nextInt();\r\n        int n;\r\n        for (int i = 1; i <= T; i++)\r\n        {\r\n            System.out.printf(\"Case #%d:\",i);\r\n            int N = in.nextInt();\r\n            int[]  arr= new int[(2*N-1)*N];\r\n            for (int j = 0; j < arr.length ; j++) {\r\n                arr[j]=in.nextInt();\r\n            }\r\n            Arrays.sort(arr);\r\n\r\n            int count=0;\r\n            for (int j = 1; j <arr.length ; j+=2) {\r\n                if(arr[j-1]!=arr[j]) {\r\n                    System.out.print(\" \"+arr[j-1]);\r\n                    j--;\r\n                    count++;\r\n                }\r\n            }\r\n            if(count!=N){\r\n                System.out.print(\" \"+arr[arr.length-1]);\r\n            }\r\n\r\n            System.out.println();\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\n", "idx": "6570"}
{"func": "package googlejam6.p574;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class probB \r\n{\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tScanner in = new Scanner(new File(\"B-large.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new File(\"fileBoutput.txt\"));\r\n\t\tint times = Integer.parseInt(in.nextLine());\r\n\t\tfor(int i = 0; i<times; i++)\r\n\t\t{\r\n\t\t\tint size = in.nextInt();\r\n\t\t\tin.nextLine();\r\n\t\t\t\r\n\t\t\tSet<Integer> odds = new TreeSet<>();\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < size*2-1; j++) \r\n\t\t\t{\r\n\t\t\t\tfor (int k = 0; k < size; k++) \r\n\t\t\t\t{\r\n\t\t\t\t\tint h = in.nextInt();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (odds.contains(h))\r\n\t\t\t\t\t\todds.remove(h);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\todds.add(h);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tIterator<Integer> remain = odds.iterator();\r\n\t\t\tString result = \"\";\r\n\t\t\twhile(remain.hasNext()) \r\n\t\t\t\tresult += (remain.next() + \" \");\r\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + result);\r\n\t\t\tout.println(\"Case #\" + (i+1) + \": \" + result);\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\t\r\n}\r\n", "idx": "6574"}
{"func": "package googlejam6.p578;\nimport java.util.*;\nimport java.io.*;\n\npublic class B\n{\n    public static void main(String ... orange) throws Exception\n    {\n\t\t//System.setIn(new FileInputStream(\"B-small-attempt0.in\"));\n\t\t//System.setOut(new PrintStream(new File(\"B-small-output-file.txt\")));\n\n\n\t\tSystem.setIn(new FileInputStream(\"B-large.in\"));\n\t\tSystem.setOut(new PrintStream(new File(\"B-large-output-file.txt\")));\n\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n\n\n\n        for (int n = 0; n < numCases; n++)\n        {\n\n            //String s = input.next();\n\t\t\t//long N = input.nextLong();\n            int N = input.nextInt();\n\n\n\n\t\t\t//\t\tSystem.out.printf(\"Case #%d: INSOMNIA\\n\", n + 1);\n\n\t\tint a;\n        int[] b= new int[2501];\n        int[] c= new int[N];\n\n        for(int j=0; j<2*N-1; j++){\n            for(int k=0; k<N; k++){\n                a = input.nextInt();\n                b[a]++;\n            }\n        }\n\n        int index=0;\n        for(int j=0; j<2501; j++)\n            if(b[j]!=0&&b[j]%2!=0)\n                    c[index++]=j;\n\n       System.out.printf(\"Case #%d: \", n + 1);\n        for(int j=0; j<N; j++)\n        \tSystem.out.printf(\"%d \", c[j]);\n\n        System.out.print(\"\\n\");\n\n        } // cases\n    } // main\n\n\n}\n", "idx": "6578"}
{"func": "package googlejam6.p579;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class Program {\t\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\t\t\r\n\t\tFile inFile = new File(args[0]);\r\n\t//\tFile inFile = new File(\"B.in\");\r\n\t\tScanner in = new Scanner(new BufferedReader(new FileReader(inFile)));\t\t//\r\n\t\tint t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\r\n\t\t//in.nextLine();\r\n\t\t\r\n\t//\t/*\r\n        File outFile = new File(args[1]);\r\n        if (!outFile.exists()) {\r\n        \toutFile.createNewFile();\r\n\t\t}\r\n\t\tFileWriter fw = new FileWriter(outFile.getAbsoluteFile());\r\n\t\tBufferedWriter bw = new BufferedWriter(fw);\r\n      //  */\r\n\t\tSet<Integer> set = new HashSet<>();\r\n\t\tfor (int i = 1; i <= t; ++i) {\r\n\t\t\tset.clear();\r\n\t\t\tint N = in.nextInt();\t\r\n\t\t\tin.nextLine();\r\n\t\t\tfor (int k = 0; k < 2 * N - 1; k++) {\r\n\t\t\t\tString[] s = in.nextLine().split(\" \");\t\t\t\t\r\n\t\t\t\tfor (String str : s) {\r\n\t\t\t\t\tif (str.length() == 0) continue;\r\n\t\t\t\t\tint num = Integer.parseInt(str);\r\n\t\t\t\t\tif (set.contains(num)) set.remove(num);\r\n\t\t\t\t\telse set.add(num);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tList<Integer> num = new ArrayList<>();\r\n\t\t\tfor (int n : set) {\r\n\t\t\t\tnum.add(n);\r\n\t\t\t}\r\n\t\t\tCollections.sort(num);\t\t\t\t\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\tfor (int n : num) sb.append(n).append(\" \");\r\n\t\t\tsb.setLength(sb.length() - 1);\r\n\t\t\tString res = \"Case #\" + i + \": \" + sb.toString();\r\n\t\t\t//String res = s;\r\n\t\t\tbw.write(res);\r\n\t\t    bw.newLine();\r\n\t\t}\t\t\t\r\n\t\tin.close();  \r\n\t\tbw.close();\r\n\t\t\r\n\t\t/*\r\n\t\tString s = \"--+-\";\r\n\t\tSystem.out.println(flipCakes(s));\r\n\t\t*/\r\n\t}\t\r\n\t\r\n}\r\n", "idx": "6579"}
{"func": "package googlejam6.p582;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\n/**\r\n * Created by Timur on 16.04.2016.\r\n */\r\npublic class TaskB {\r\n    public static void main(String args[]){\r\n        try {\r\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\r\n            int test = Integer.parseInt(in.readLine());\r\n            int a[];\r\n            for (int t = 1; t <= test; t++) {\r\n                int n = Integer.parseInt(in.readLine());\r\n                a = new int [3000];\r\n                for (int i = 0; i < (2 * n - 1); i++) {\r\n                    StringTokenizer st = new StringTokenizer(in.readLine());\r\n                    for (int j =0 ;j < n; j++) {\r\n                        int x = Integer.parseInt(st.nextToken());\r\n                        a[x]++;\r\n                    }\r\n                }\r\n\r\n                int pos = 0;\r\n                int ans[] = new int [n];\r\n                for (int i = 0; i < a.length; i++) {\r\n                    if (a[i] % 2 == 1) {\r\n                        ans[pos++] = i;\r\n                    }\r\n                }\r\n\r\n\r\n                Arrays.sort(ans);\r\n                System.out.print(\"Case #\" + t + \": \");\r\n                for (int i = 0; i < n; i++) {\r\n                    System.out.print(ans[i]+\" \");\r\n                }\r\n                System.out.println();\r\n            }\r\n\r\n            in.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n", "idx": "6582"}
{"func": "package googlejam6.p583;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();\n        for (int i = 1; i <= t; ++i) {\n            int n = in.nextInt();\n            int[][] lists = new int[2 * n - 1][n];\n            int[][] result = new int[n][n];\n\n            Map<Integer, Integer> amounts = new HashMap<Integer, Integer>();\n            for (int j = 0; j < 2 * n - 1; j++) {\n                for (int k = 0; k < n; k++) {\n                    int v = in.nextInt();\n                    lists[j][k] = v;\n                    if (amounts.containsKey(v)) {\n                        amounts.put(v, amounts.get(v) + 1);\n                    } else {\n                        amounts.put(v, 1);\n                    }\n\n                }\n            }\n\n            int j = 0;\n            int[] missingRow = new int[n];\n            for (Integer v : amounts.keySet()) {\n                if (amounts.get(v) % 2 == 1) {\n                    missingRow[j++] = v;\n                }\n            }\n            Arrays.sort(missingRow);\n            System.out.print(\"Case #\" + i + \": \");\n            for (j = 0; j < n; j++) {\n                System.out.print(missingRow[j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n", "idx": "6583"}
{"func": "package googlejam6.p584;\nimport java.util.*;\r\npublic class B {\r\n\r\n\tpublic static void main(String args[]){\r\n\t\t\r\n\t\tScanner s = null;\r\n\t\ttry{\r\n\t\t\ts = new Scanner(System.in);\r\n\t\t\tint T = s.nextInt();\r\n\t\t\tint N;\r\n\t\t\t\r\n\t\t\tint index=0;\r\n\t\t\tArrayList<TreeSet<Integer>> output = new ArrayList<TreeSet<Integer>>();\r\n\t\t\twhile(index<T){\t\t\t\t\r\n\t\t\t\tN = s.nextInt();\r\n\t\t\t\tint innerIndex=0;\r\n\t\t\t\tTreeSet<Integer> heightSet = new TreeSet<Integer>();\r\n\t\t\t\tint height;\r\n\t\t\t\twhile(innerIndex< ((2*N)-1)*N){\r\n\t\t\t\t\theight = s.nextInt();\r\n\t\t\t\t\tif(heightSet.contains(height))\r\n\t\t\t\t\t\theightSet.remove(height);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\theightSet.add(height);\r\n\t\t\t\t\t\r\n\t\t\t\t\tinnerIndex++;\r\n\t\t\t\t\t//System.out.println(innerIndex);\r\n\t\t\t\t}\r\n\t\t\t\toutput.add(heightSet);\r\n\t\t\t\tindex++;\t\t\t\t\r\n\t\t\t}\r\n\t\t\tindex=0;\r\n\t\t\twhile(index<T){\r\n\t\t\t\tTreeSet<Integer> heightSet = output.get(index);\r\n\t\t\t\tSystem.out.print(\"Case #\"+(index+1)+\":\");\r\n\t\t\t\t\r\n\t\t\t\tfor(Integer height:heightSet){\r\n\t\t\t\t\tSystem.out.print(\" \"+height);\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}catch(Exception e){\r\n\t\t\te.printStackTrace();\r\n\t\t}finally{\r\n\t\t\ts.close();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\t\r\n\t\r\n}\r\n", "idx": "6584"}
{"func": "package googlejam6.p586;\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class round1ad {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner s = new Scanner(System.in);\r\n\t\tint t = s.nextInt();\r\n\t\tfor(int i=0; i<t; i++) {\r\n\t\t\tint n = s.nextInt();\r\n\t\t\tint a[] = new int[3000];\r\n\t\t\tfor(int j=0; j<3000; j++) {\r\n\t\t\t\ta[j]=0;\r\n\t\t\t}\r\n\t\t\tfor(int j=0; j<n*((2*n)-1); j++) {\r\n\t\t\t\tint x = s.nextInt();\r\n\t\t\t\ta[x]++;\r\n\t\t\t}\r\n\t\t\tint y[] = new int[n];\r\n\t\t\tint count=0;\r\n\t\t\tfor(int j=0; j<3000; j++) {\r\n\t\t\t\tif(a[j]%2==1) {\r\n\t\t\t\t\ty[count]=j;\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tArrays.sort(y);\r\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \": \");\r\n\t\t\tfor(int j=0; j<n; j++) {\r\n\t\t\t\tSystem.out.print(y[j] + \" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6586"}
{"func": "package googlejam6.p588;\nimport java.io.*;\r\nimport java.util.*;\r\npublic class B {\r\n\tpublic static void main(String[]args)throws Exception\r\n\t{\r\n\t\tScanner scan=new Scanner(new File(\"B-large.in\"));\r\n\t\tPrintWriter out=new PrintWriter(new File(\"B-out.txt\"));\r\n\t\tint n=Integer.parseInt(scan.nextLine());\r\n\t\tfor(int i=1;i<=n;i++)\r\n\t\t{\r\n\t\t\tint size=Integer.parseInt(scan.nextLine());\r\n\t\t\tint[]counts=new int[2500];\r\n\t\t\tfor(int j=0;j<2*size-1;j++)\r\n\t\t\t{\r\n\t\t\t\tString[]heights=scan.nextLine().split(\" \");\r\n\t\t\t\tfor(int k=0;k<heights.length;k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tcounts[Integer.parseInt(heights[k])-1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tArrayList<Integer>solution=new ArrayList<Integer>();\r\n\t\t\tfor(int j=0;j<counts.length;j++)\r\n\t\t\t{\r\n\t\t\t\tif(counts[j]%2!=0)\r\n\t\t\t\t\tsolution.add(j+1);\r\n\t\t\t}\r\n\t\t\tCollections.sort(solution);\r\n\t\t\tout.print(\"Case #\"+i+\": \"+solution.get(0));\r\n\t\t\tfor(int j=1;j<solution.size();j++)\r\n\t\t\t{\r\n\t\t\t\tout.print(\" \"+solution.get(j));\r\n\t\t\t}\r\n\t\t\tout.println();\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "6588"}
{"func": "package googlejam6.p589;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Hashtable;\nimport java.util.Scanner;\n\npublic class Solution {\n    public static void main(String[] args) {\n        File f = new File(args[0] + \".in\");\n        try (Scanner in = new Scanner(new FileInputStream(f));\n                BufferedWriter out = new BufferedWriter(\n                        new FileWriter(new File(args[0] + \".out\")))) {\n            int T = in.nextInt();\n            for (int i = 0; i < T; i++) {\n                int N = in.nextInt();\n                int rows = 2*N-1;               \n\n                int[] vals = new int[rows*N];\n                int idx = 0;\n                int max = Integer.MIN_VALUE;\n                for (int row = 0; row < rows; row++) {\n                    for (int col = 0; col < N; col++){\n                        vals[idx] = in.nextInt();\n                        if (vals[idx] > max)\n                            max = vals[idx];\n                        idx++;\n                    }\n                }\n                \n                int[] count = new int[max+1];\n                for (int j : vals) \n                    count[j]++;\n                \n                int[] solution = new int[N];\n                idx = 0;\n                for (int j = 0; j < count.length; j++)\n                    if (count[j] % 2 != 0)\n                        solution[idx++] = j;\n                \n                Arrays.sort(solution);\n                \n                String str = \"Case #\" + (i + 1) + \":\";\n                for (int j : solution)\n                    str += \" \" + j;\n                out.write(str);\n                out.newLine();\n                System.out.println(str);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": "6589"}
{"func": "package googlejam6.p590;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileWriter;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\npublic class Problem2 {\r\n\r\n\tpublic static final String fileName=\"./round1a/\"+\"B-large.in\";\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tArrayList<String> values = new ArrayList<String>();;\r\n\t\ttry {\r\n\t\tFileInputStream fis = new FileInputStream(fileName);\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(fis));\r\n\t\tFileWriter fw = new FileWriter(fileName+\".out\");\r\n\t\tBufferedWriter bw = new BufferedWriter(fw);\r\n\t\tint count = Integer.parseInt(br.readLine());\r\n\t\tfor(int i=0;i<count;i++) {\r\n\t\t\tint n = Integer.parseInt(br.readLine());\r\n\t\t\tHashMap<Integer,Integer> heights = new HashMap<Integer,Integer> ();\r\n\t\t\tfor(int j=0;j<2*n-1;j++) {\r\n\t\t\t\tString line = br.readLine();\r\n\t\t\t\tString[] hvalues=line.split(\" \");\r\n\t\t\t\tfor(int k=0;k<hvalues.length;k++) {\r\n\t\t\t\t\tint val = Integer.parseInt(hvalues[k]);\r\n\t\t\t\t\tif(heights.containsKey(val))\r\n\t\t\t\t\t\theights.remove(val);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\theights.put(val, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tArrayList<Integer> list = new ArrayList<Integer>(heights.keySet());\r\n\t\t\tCollections.sort(list);\r\n\t\t\tbw.write(\"Case #\"+(i+1)+\": \"+list.toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\",\", \"\")+\"\\n\");\r\n\t\t\tbw.flush();\r\n\t\t}\r\n\t\tbr.close();\r\n\t\tbw.close();\r\n\t\t}catch(Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\r\n\t}\r\n}\r\n", "idx": "6590"}
{"func": "package googlejam6.p591;\nimport java.io.File;\nimport java.util.*;\n\nclass Soldiers {\n    static HashMap<Integer, Integer> check = new HashMap<Integer, Integer>();\n\n    public static void main(String[] args) throws Exception {\n        File file = new File(\"/Volumes/Macintosh HD/Users/avorobyev/Downloads/B-large.in\");\n        Scanner input = new Scanner(file);\n\n        int totalCases = input.nextInt();\n\n        for (int i = 1; i < totalCases + 1; i++) {\n\n            check = new HashMap<Integer, Integer>();\n\n            int n = input.nextInt();\n            for (int j = 0; j < 2 * n - 1; j++) {\n                for (int k = 0; k < n; k++) {\n                    Integer m = input.nextInt();\n                    if (check.get(m) == null) {\n                        check.put(m, 1);\n                    } else {\n                        Integer old = check.get(m);\n                        Integer newOld = old + 1;\n                        check.put(m, newOld);\n                    }\n                }\n            }\n\n            ArrayList<Integer> toSort = new ArrayList<>();\n\n            Iterator it = check.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry pair = (Map.Entry) it.next();\n                Integer toCheck = (Integer) pair.getValue();\n                if ((toCheck % 2) != 0) {\n                    toSort.add((Integer) pair.getKey());\n                }\n            }\n\n            Collections.sort(toSort);\n\n            System.out.print(\"Case #\" + i + \": \");\n\n            for (int j = 0; j < n; j++) {\n                System.out.print(toSort.get(j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}", "idx": "6591"}
{"func": "package googlejam6.p592;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Collections;\r\nimport java.util.LinkedList;\r\nimport java.util.ListIterator;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Missing_list {\r\n\tprivate static BufferedReader fr;\r\n\tstatic BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\r\nstatic LinkedList<Integer> num_list = new LinkedList<Integer>();\r\nstatic LinkedList<Integer> missing_list = new LinkedList<Integer>();\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t\tSystem.out.println(\"Enter File Name = \");\r\n\t\tString ipfile = br.readLine();\r\n\t\tSystem.out.println(\"File Name = \"+ipfile);\r\n\t\tfr = new BufferedReader(new FileReader(ipfile));\r\n\t\tInteger cases = Integer.parseInt(fr.readLine());\r\n\t\tSystem.out.println(\"Cases = \"+cases);\r\n\t\tMissing_list myvar = new Missing_list();\r\n\t\tString line;\r\n\t\tInteger cnt=1;\r\n\t\tfor(int i=1;i<=cases;i++)\r\n\t\t{\r\n\t\t\tInteger nums = Integer.parseInt(fr.readLine());\r\n\t\t\t\r\n\t\t\tfor(int j=0;j<(nums*2)-1;j++)\r\n\t\t\t{\r\n\t\t\t\tline = fr.readLine();\r\n\t\t\t\tScanner s = new Scanner(line);\r\n\t\t\t\tfor(int k=0;k<nums;k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tInteger number = s.nextInt();\r\n\t\t\t\t\tnum_list.add(number);\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tListIterator<Integer> it = num_list.listIterator();\r\n\t\t\tmissing_list.clear();\r\n\t\t\twhile(it.hasNext())\r\n\t\t\t{\r\n\t\t\t\tInteger curr_num = it.next();\r\n\t\t\t\tInteger occr = Collections.frequency(num_list,curr_num);\r\n\t\t\t\tif(occr % 2 != 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tInteger dups=Collections.frequency(missing_list, curr_num);\r\n\t\t\t\t\tif(dups==0)\r\n\t\t\t\t\t\tmissing_list.add(curr_num);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tCollections.sort(missing_list);\t\r\n\t\t\tString res = missing_list.toString().replaceAll(\"[^a-zA-Z0-9 ]\",\"\").toUpperCase();\r\n\t\t\tSystem.out.println(\"Case #\"+i+\": \"+res);\r\n\t\t\tnum_list.clear();\r\n\t\t\t\r\n\t}\r\n\r\n\t\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\t}}\r\n", "idx": "6592"}
{"func": "package googlejam6.p594;\n\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\n\n/**\n *\n * @author jbuddha\n */\npublic class RankAndFile {\n\t\t\n\t// Fixed Code Begins *********\n\tprivate static int count = 0;\n\tprivate static final String INPUT_FILE = \"input.txt\";\n\tprivate static final Path OUTPUT_PATH = Paths.get(\"output.txt\");\n\t\n\tprivate static final List<String> TESTS = new ArrayList<>();\n\tprivate static final List<String> OUTPUT = new ArrayList<>();\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(INPUT_FILE))) {\n\t\t\tString line;\n\t\t\tint t = Integer.parseInt(br.readLine());\n\t\t    \n\t\t    for(int i = 0; i < t; i++){\n\t\t        int n = Integer.parseInt(br.readLine());\n\t\t        int matrix[][] = new int[2*n - 1][];\n\t\t        for(int j = 0; j < 2*n - 1; j++) {\n\t\t            matrix[j] = new int[n];\n\t\t            String[] row = br.readLine().split(\" \");\n\t\t            for(int k = 0; k < n; k++)\n\t\t            {\n\t\t                matrix[j][k] = Integer.parseInt(row[k]);\n\t\t            }\n\t\t        }\n\t\t        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\t\t\tfor(int i2 = 0; i2 < 2 * n - 1; i2++)\n\t\t\t\t{\n\t\t\t\t    for(int j = 0; j < n; j++)\n\t\t\t\t    {\n\t\t\t\t        int element = matrix[i2][j];\n\t\t\t\t        if(map.containsKey(element))\n\t\t\t\t            map.put(element,map.get(element)+1);\n\t\t\t\t        else\n\t\t\t\t            map.put(element,1);\n\t\t\t\t    }\n\t\t\t\t              \n\t\t\t\t}\n\t\t\t\tint[] arr = new int[n];\n\t\t\t\tint i1 = 0;\n\t\t\t\tfor(int height: map.keySet())\n\t\t\t\t{\n\t\t\t\t    if(map.get(height) % 2 == 0)\n\t\t\t\t        continue;\n\t\t\t\t    \n\t\t\t\t    arr[i1++] = height;\n\t\t\t\t}\n\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\tArrays.sort(arr);\n\t\t\t\tfor(int element: arr)\n\t\t\t\t    sb.append(element).append(\" \");\n\t\t\t\t\n\t\t\t\tint c = OUTPUT.size() + 1;\n\t\t\t\tOUTPUT.add(\"Case #\" + c + \": \" + sb.toString().trim());\n\t\t    }\n\t\t\t\n\t\t}\n\t\tFiles.write(OUTPUT_PATH, OUTPUT,Charset.defaultCharset());\n\t}\n}\n", "idx": "6594"}
{"func": "package googlejam6.p595;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class B\r\n{\r\n\tpublic static final String PROBLEM_NO = \"B\";\r\n\tpublic static final String BASE_FOLDER = \"C:\\\\Users\\\\Ash\\\\Ash\\\\Code Jam\\\\2016\\\\R1A\\\\Input\";\r\n\tpublic static final String FS = File.separator;\r\n\t\r\n//\tpublic static final String SMALL_IN_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-small-ash.in\";\r\n//\tpublic static final String SMALL_OUT_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-small-ash.out\";\r\n\tpublic static final String SMALL_IN_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-small-attempt0.in\";\r\n\tpublic static final String SMALL_OUT_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-small-attempt0.out\";\r\n\tpublic static final String LARGE_IN_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-large.in\";\r\n\tpublic static final String LARGE_OUT_FILE = BASE_FOLDER + FS + PROBLEM_NO + FS + PROBLEM_NO + \"-large.out\";\r\n\t\r\n\tpublic static void main(String[] args)\r\n\t{\r\n//\t\tprocessFile(SMALL_IN_FILE, SMALL_OUT_FILE);\r\n\t\ttry {\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(LARGE_IN_FILE));\n\t\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(LARGE_OUT_FILE));\n\t\t\t\n\t\t\tint cases = Integer.parseInt(reader.readLine());\n\t\t\t\n\t\t\tfor (int caseNum=1; caseNum<= cases; caseNum++) {\n\t\t\t\t\n\t\t\t\tint n = Integer.parseInt(reader.readLine());\n\t\t\t\tList<Integer> counts = new ArrayList<Integer>();\n\t\t\t\tfor (int i=1; i<=2500; i++) {\n\t\t\t\t\tcounts.add(0);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (int i=0; i<2*n-1; i++) {\n\t\t\t\t\tString in = reader.readLine();\n\t\t\t\t\tString[] split = in.split(\" \");\n\t\t\t\t\tfor (String tmp : split) {\n\t\t\t\t\t\tInteger integer = Integer.parseInt(tmp);\n\t\t\t\t\t\tcounts.set(integer-1, counts.get(integer-1)+1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString missing = \"\";\n\t\t\t\tint counter = 0;\n\t\t\t\tfor (int i=0; i<counts.size(); i++) {\n\t\t\t\t\tif (counts.get(i) % 2 != 0) {\n\t\t\t\t\t\tmissing += (i+1) + \" \";\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\tif (counter >= n) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twriter.write(\"Case #\" + caseNum + \": \" + missing.trim() + \"\\n\");\n\t\t\t}\n\t\t\t\n\t\t\twriter.flush();\n\t\t\twriter.close();\n\t\t\treader.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6595"}
{"func": "package googlejam6.p597;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Map;\r\n\r\npublic class RankFile {\r\n\r\n\tpublic static StringBuilder builder = new StringBuilder();\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(\"./input.txt\"))) {\r\n\t\t\tString line;\r\n\t\t\tint cases = Integer.parseInt(br.readLine());\r\n\r\n\t\t\tint i = 0;\r\n\t\t\twhile ((line = br.readLine()) != null && i < cases) {\r\n\t\t\t\tint N = Integer.parseInt(line);\r\n\t\t\t\tint count = 2 * N - 1;\r\n\t\t\t\tArrayList<String> list = new ArrayList<String>();\r\n\t\t\t\tfor (int j = 0; j < count; j++) {\r\n\t\t\t\t\tlist.add(br.readLine());\r\n\t\t\t\t}\n\t\t\t\tint caseNumber = i + 1;\r\n\r\n\t\t\t\tif (caseNumber != 1)\n\t\t\t\t\tbuilder.append(System.getProperty(\"line.separator\"));\n\t\t\t\tbuilder.append(\"Case #\" + caseNumber + \": \");\n\t\t\t\t\n\t\t\t\tHashMap<Integer, Integer> counts = new HashMap<Integer, Integer>();\n\t\t\t\t\n\t\t\t\tfor (int i1 = 0; i1 < list.size(); i1++) {\n\t\t\t\t\tString[] characters = list.get(i1).split(\" \");\n\t\t\t\t\tfor (String str : characters) {\n\t\t\t\t\t\tInteger val = Integer.parseInt(str);\n\t\t\t\t\t\tif (counts.containsKey(val)) {\n\t\t\t\t\t\t\tcounts.put(val, counts.get(val) + 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcounts.put(val, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tArrayList<Integer> odds = new ArrayList<Integer>();\n\t\t\t\tfor (Map.Entry<Integer, Integer> set : counts.entrySet()) {\n\t\t\t\t\tif (set.getValue() % 2 != 0) {\n\t\t\t\t\t\todds.add(set.getKey());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tCollections.sort(odds);\n\t\t\t\t\n\t\t\t\tStringBuilder aa = new StringBuilder();\n\t\t\t\tfor (Integer str : odds) {\n\t\t\t\t\taa.append(str+\" \");\n\t\t\t\t}\n\t\t\t\tbuilder.append(aa.toString().trim());\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\r\n\t\t\ttry {\n\t\t\t\tFile file = new File(\"./output.txt\");\n\t\t\t\tFileWriter fileWriter = new FileWriter(file);\n\t\t\t\tfileWriter.write(builder.toString());\n\t\t\t\tfileWriter.flush();\n\t\t\t\tfileWriter.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6597"}
{"func": "package googlejam6.p598;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Prg2 {\r\n\r\n\tprivate static final String INPUT_FILENAME = \"input.in\";\r\n\tprivate static final String OUTPUT_FILENAME = \"output.in\";\r\n\r\n\t// private static final String INPUT_FILENAME = \"A-small.in\";\r\n\t// private static final String OUTPUT_FILENAME = \"A-small-out.in\";\r\n\t//\r\n\t// private static final String INPUT_FILENAME = \"A-large.in\";\r\n\t// private static final String OUTPUT_FILENAME = \"A-large-out.in\";\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tBufferedReader reader = new BufferedReader(new FileReader(INPUT_FILENAME));\r\n\t\tBufferedWriter write = new BufferedWriter(new FileWriter(OUTPUT_FILENAME));\r\n\t\tScanner scanInput = new Scanner(reader);\r\n\r\n\t\tint t = scanInput.nextInt();\r\n\r\n\t\tfor (int i = 0; i < t; ++i) {\r\n\t\t\tint n = scanInput.nextInt();\r\n\t\t\tfinal int fixed = 2 * n - 1;\r\n\t\t\tList<Integer> output = new ArrayList<Integer>();\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\r\n\t\t\tint[] list = new int[n * fixed];\r\n\t\t\tfor (int j = 0; j < n * fixed; j++) {\r\n\t\t\t\tlist[j] = scanInput.nextInt();\r\n\t\t\t\t// System.out.println(list[j]);\r\n\t\t\t}\r\n\r\n\t\t\tArrays.sort(list);\r\n\r\n\t\t\tint count = 1;\r\n\t\t\tint k = 0;\r\n\t\t\tfor (k = 0; k < list.length - 1; k++) {\r\n\r\n\t\t\t\tif (list[k] == list[k + 1]) {\r\n\t\t\t\t\tcount++;\r\n//\t\t\t\t\tSystem.out.println(\"count \" + count);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (count % 2 != 0) {\r\n\t\t\t\t\t\toutput.add(list[k]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcount = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (output.size() != n) {\r\n\t\t\t\toutput.add(list[k]);\r\n\t\t\t}\r\n\r\n\t\t\tsb.append(\"Case #\" + (i + 1) + \": \");\r\n\t\t\tfor (int a : output) {\r\n\t\t\t\tsb.append(a + \" \");\r\n\t\t\t}\r\n\t\t\t// write.write(\"Case #\" + (t + 1) + \": \" + sb.toString() + \"\\n\");\r\n\t\t\twrite.write(sb.toString().trim() + \"\\n\");\r\n\t\t\t// System.out.println(sb.toString().trim() + \"\\n\");\r\n\t\t}\r\n\r\n\t\tscanInput.close();\r\n\t\twrite.flush();\r\n\t\twrite.close();\r\n\r\n\t}\r\n}", "idx": "6598"}
{"func": "package googlejam6.p599;\n\n\nimport java.io.*;\nimport java.util.*;\n\npublic class Solution {\n    public static void main(String[] args) throws Exception {\n        Solution solution = new Solution();\n        Solution solution1 = new Solution();\n\t\tString file = \"/Users/gaohan/Downloads/B-large.in\";\n\t\tScanner scanner = new Scanner(new FileInputStream(new File(file)));\n\t\tint T = scanner.nextInt();\n\t\tfor (int i = 0; i < T; i++) {\n\t\t    int N = scanner.nextInt();\n\t\t    int lines = 2 * N - 1;\n\t\t    int[][] array = new int[lines][N];\n\t\t    for (int m = 0; m < lines; m++) {\n\t\t        for (int n = 0; n < N; n++) {\n\t\t            array[m][n] = scanner.nextInt();\n\t\t        }\n\t\t    }\n\t\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\t\tfor (int[] row : array) {\n\t\t\t    for (int cell : row) {\n\t\t\t    \tInteger count = map.get(cell);\n\t\t\t        if (count == null) {\n\t\t\t            count = 0;\n\t\t\t        }\n\t\t\t        map.put(cell, count + 1);\n\t\t\t    }\n\t\t\t}\n\t\t\tList<Integer> res1 = new ArrayList<Integer>();\n\t\t\tfor (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\t\t\t    int val = entry.getValue();\n\t\t\t    if (val % 2 != 0) {\n\t\t\t        res1.add(entry.getKey());\n\t\t\t    }\n\t\t\t}\n\t\t\tCollections.sort(res1);\n\t\t    List<Integer> res = res1;\n\t\t    System.out.print(\"Case #\" + (i + 1) + \":\");\n\t\t    for (int num : res) {\n\t\t        System.out.print(\" \" + num);\n\t\t    }\n\t\t    System.out.println();\n\t\t}\n    }\n}\n", "idx": "6599"}
{"func": "package googlejam6.p600;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class RankAndFile {\n\t\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tfinal Scanner sc = new Scanner(new File(args[0]));\n\t\t\tfinal FileWriter writer = new FileWriter(new File(\"rankAndFile.out\"));\n\t\t\tfinal int numberOfCases = sc.nextInt();\n\t\t\tint currentCase = 0;\n\t\t\tsc.nextLine();\n\t\t\twhile(currentCase < numberOfCases){\n\t\t\t\tfinal int n = sc.nextInt();\n//\t\t\t\tSystem.out.println(n);\n\t\t\t\tMap<Integer, Integer> heights = new HashMap<>();\n\t\t\t\tfor (int i = 0; i < 2*n-1; i++){\n\t\t\t\t\tfor (int j = 0; j < n; j++){\n\t\t\t\t\t\tfinal int next = sc.nextInt();\n//\t\t\t\t\t\tSystem.out.println(next);\n\t\t\t\t\t\tif(heights.containsKey(next)){\n\t\t\t\t\t\t\theights.put(next, heights.get(next).intValue() + 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\theights.put(next, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\tfinal List<Integer> missingRow = new ArrayList<>();\n\t\t\t\t\t\tfor (Integer height:heights.keySet()){\n\t\t\t\t//\t\t\tSystem.out.println(\"height: \" + height + \"  number: \" + heights.get(height));\n\t\t\t\t\t\t\tif(heights.get(height)%2 != 0){\n\t\t\t\t\t\t\t\tmissingRow.add(height);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tCollections.sort(missingRow);\n\t\t\t\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\t\t\t\tfor(Integer integer:missingRow){\n\t\t\t\t\t\t\tbuilder.append(\"\" + integer + \" \");\n\t\t\t\t\t\t}\n\t\t\t\tfinal String result = builder.toString().trim();\n\t\t\t\tSystem.out.println(\"Case #\" + (currentCase + 1) + \": \" + result);\n\n\t\t\t\twriter.write(\"Case #\" + ++currentCase + \": \" + result + \"\\n\");\n\t\t\t}\n\t\t\n\t\t\twriter.close();\n\t\t\tsc.close();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n}\n", "idx": "6600"}
{"func": "package googlejam6.p601;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.*;\r\n\r\npublic class A2 {\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n        int t = in.nextInt();\r\n\r\n        for (int z = 1; z <= t; ++z) {\r\n            int N = in.nextInt();\r\n            int[][] arr = new int[N][N];\r\n            List<int[]> separate = new ArrayList<>();\r\n            List<int[]> rows = new ArrayList<>();\r\n            List<int[]> cols = new ArrayList<>();\r\n\r\n            HashMap<Integer, Integer> all = new HashMap<>();\r\n            for (int i = 0; i < 2*N - 1; i++) {\r\n                for (int j = 0; j < N; j++) {\r\n                    int n = in.nextInt();\r\n                    if (all.containsKey(n)) {\r\n                        all.put(n, all.get(n) + 1);\r\n                    } else {\r\n                        all.put(n, 1);\r\n                    }\r\n                }\r\n            }\r\n            List<Integer> missing = new ArrayList<>();\r\n\r\n\r\n            for (int n : all.keySet()) {\r\n                if (all.get(n) % 2 != 0) {\r\n                    missing.add(n);\r\n                }\r\n            }\r\n            Collections.sort(missing);\r\n//            List<Integer> fsts = new ArrayList<>();\r\n//            for (int i = 0; i < 2*N - 1; i++) {\r\n//                int[] temp = new int[N];\r\n//                for (int j = 0; j < N; j++) {\r\n//                    temp[j] = in.nextInt();\r\n//                }\r\n//                separate.add(temp);\r\n//                fsts.add(temp[0]);\r\n//            }\r\n//\r\n//            int fst = fsts.indexOf(Collections.min(fsts));\r\n//            int[] fstrow = separate.get(fst);\r\n//            rows.add(fstrow);\r\n//\r\n//            separate.remove(fst);\r\n//            fsts.remove(fst);\r\n//            List<Integer> missing = new ArrayList<>();\r\n//            int ind = -1;\r\n//            boolean valid = false;\r\n//            boolean rm = false;\r\n//\r\n//            for (int i = 0; i < fstrow.length; i++) {\r\n//                if (fsts.contains(fstrow[i])) {\r\n//                    int j = fsts.indexOf(fstrow[i]);\r\n//                    cols.add(separate.get(j));\r\n//                    separate.remove(j);\r\n//                    fsts.remove(j);\r\n//                } else {\r\n//                    missing.add(fstrow[i]);\r\n//                    ind = i;\r\n//                }\r\n//            }\r\n//            if (ind != -1) {\r\n//                for (int[] row : separate) {\r\n//                    missing.add(row[ind]);\r\n//                }\r\n//            }\r\n//\r\n//            if (ind == -1) {\r\n//                for (int[] row: separate) {\r\n//                    rows.add(row);\r\n//                }\r\n//                int[] col = cols.get(0);\r\n//                for (int i = 1; i < col.length; i++) {\r\n//                    if (! fsts.contains(col[i])) {\r\n//                        ind = i;\r\n//                        break;\r\n//                    }\r\n//                }\r\n//                System.out.println(cols.size());\r\n//                for (int[] c : cols){\r\n//                    missing.add(c[ind]);\r\n//                }\r\n//            }\r\n\r\n            System.out.print(\"Case #\" + z + \":\" );\r\n            for (int k : missing) {\r\n                System.out.print(\" \" + k);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n", "idx": "6601"}
{"func": "package googlejam6.p602;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n          \r\npublic class Main2 {\r\n\t\r\n\tpublic static int T, N, M;\r\n\tpublic static int[][] map;\r\n\tpublic static int[][] input;\r\n\tpublic static int[] minIndex;\r\n\tpublic static boolean[] visited;\r\n\tpublic static int cnt;\r\n\t\r\n    public static void main(String[] arg) throws IOException {\r\n         \r\n    \tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    \tStringBuffer sb = new StringBuffer();\r\n    \t\r\n    \tT = Integer.parseInt(br.readLine());\r\n    \t\r\n    \tfor(int t = 1 ; t <= T ; t++){\r\n    \t\tsb.append(\"Case #\"+t+\":\" );\r\n    \t\tN = Integer.parseInt(br.readLine());\r\n    \t\tM = 2*N-1;\r\n    \t\tinput = new int[M][N];\r\n    \t\tint[] height = new int[2501];  \r\n    \t\t\r\n    \t\tfor(int i = 0 ; i < M ; i++){\r\n    \t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\r\n    \t\t\t\r\n    \t\t\tfor(int j = 0 ; j < N ; j++){\r\n    \t\t\t\tinput[i][j] = Integer.parseInt(st.nextToken());\r\n    \t\t\t\theight[input[i][j]] += 1;\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\t\r\n    \t\tfor(int i = 0 ; i <= 2500 ; i++){\r\n    \t\t\tif(height[i]%2 == 1){\r\n    \t\t\t\tsb.append(\" \").append(i);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\tsb.append(\"\\n\");\r\n    \t}\r\n    \t\r\n    \tSystem.out.println(sb);\r\n\t}\r\n}", "idx": "6602"}
{"func": "package googlejam6.p603;\nimport java.util.*;\nimport java.io.*;\nimport java.math.*;\n\npublic class B {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\n\t\tfor (int i = 1; i <= t; ++i) {\n\t\t\tMap<Integer, Integer> map = new HashMap<>();\n\t\t\tSet<Integer> set = new HashSet<>();\n\t\t\tint n = in.nextInt();\n\t\t\tfor (int j = 0; j < n * 2 - 1; j++) {\n\t\t\t\tfor (int k = 0; k < n; k++) {\n\t\t\t\t\tint e = in.nextInt();\n\t\t\t\t\tset.add(e);\n\t\t\t\t\tif (map.containsKey(e)) map.put(e, map.get(e) + 1);\n\t\t\t\t\telse map.put(e, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[] numbers = new int[set.size()];\n\t\t\tint[] res = new int[n];\n\t\t\tint start = 0;\n\t\t\tfor (Integer p : set) {\n\t\t\t\tnumbers[start++] = p;\n\t\t\t}\n\t\t\tArrays.sort(numbers);\n\t\t\tstart = 0;\n\t\t\tfor (int j = 0; j < numbers.length; j++) {\n\t\t\t\tif (map.get(numbers[j]) % 2 != 0)  res[start++] = numbers[j];\n\t\t\t}\n\t\t\tSystem.out.print(\"Case #\" + i + \": \");\n\t\t\tfor (int j = 0; j < res.length; j++) {\n\t\t\t\tif (j == res.length - 1) System.out.println(res[j]);\n\t\t\t\telse System.out.print(res[j] + \" \");\n\t\t\t}\n\t\t}\n\t}\n}\n", "idx": "6603"}
{"func": "package googlejam6.p605;\n\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class RankAndFile {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tString s1 = \"B\", s2 = \"large\";\n\t\tString fileName = s1 + \"-\" + s2 + \".in\", outputFileName = s1 + \"-\" + s2 + \".out\";\n\t\t//String fileName = s1 + \"-\" + s2 + \"-attempt0.in\", outputFileName = s1 + \"-\" + s2 + \"-attempt0.out\";\n\t\t//String fileName = \"sample.in\", outputFileName = \"sample.out\";\n\t\tRankAndFile obj = new RankAndFile();\n\t\tPath path = Paths.get(fileName);\n\t\tScanner scanner = new Scanner(path);\n\t\tint numberOfCases = Integer.parseInt(scanner.nextLine());\n\t\tObject[] result = new Object[numberOfCases];\n\t\tfor (int i = 0; i < numberOfCases; i++) {\n\t\t\tint n = Integer.parseInt(scanner.nextLine());\n\t\t\tArrayList<int[]> rows = new ArrayList<>();\n\t\t\tint lines = n * 2 - 1;\n\t\t\tfor (int j = 0; j < lines; j++) {\n\t\t\t\tString[] heights = scanner.nextLine().split(\" \");\n\t\t\t\tint[] height = new int[n];\n\t\t\t\tfor (int k = 0; k < n; k++) {\n\t\t\t\t\theight[k] = Integer.parseInt(heights[k]);\n\t\t\t\t}\n\t\t\t\trows.add(height);\n\t\t\t}\n\t\t\tArrayList<int[]> rows1 = new ArrayList<>();\n\t\t\tfor (int[] a : rows) {\n\t\t\t\tint[] b = Arrays.copyOf(a, a.length);\n\t\t\t\trows1.add(b);\n\t\t\t}\n\t\t\tint target = 0, row = 0, min = 0;\n\t\t\tfor (int i1 = 0; i1 < rows1.get(0).length; i1++) {\n\t\t\t\tmin = 2500;\n\t\t\t\tboolean find = false;\n\t\t\t\tfor (int j = 0; j < rows1.size(); j++) {\n\t\t\t\t\tint cur = rows1.get(j)[i1];\n\t\t\t\t\tif (cur < min) {\n\t\t\t\t\t\tmin = cur;\n\t\t\t\t\t\trow = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint count = 0, first = 0, second = 0;\n\t\t\t\tfor (int j = 0; j < rows1.size(); j++) {\n\t\t\t\t\tint cur = rows1.get(j)[i1];\n\t\t\t\t\tif (cur == min) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tif (count == 2) {\n\t\t\t\t\t\t\tsecond = j;\n\t\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else \n\t\t\t\t\t\t\tfirst = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!find) {\n\t\t\t\t\ttarget = i1;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\trows1.remove(second);\n\t\t\t\t\trows1.remove(first);\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrayList<Integer> set = new ArrayList<>();\n\t\t\tfor (int[] a : rows) {\n\t\t\t\tset.add(a[target]);\n\t\t\t}\n\t\t\tfor (int a : rows1.get(row)) {\n\t\t\t\tif (a == min) continue;\n\t\t\t\tfor (int i2 = 0; i2 < set.size(); i2++) {\n\t\t\t\t\tif (set.get(i2) == a) {\n\t\t\t\t\t\tset.remove(i2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(set);\n\t\t\tStringBuilder result1 = new StringBuilder(set.size());\n\t\t\tfor (int a : set) {\n\t\t\t\tresult1.append(a + \" \");\n\t\t\t}\n\t\t\tresult[i] = result1;\n\t\t\tSystem.out.println(i);\n\t\t}\n\t\tPrintWriter out = new PrintWriter(outputFileName);\n\t\tfor (int i = 0; i < result.length; i++) {\n\t\t\tString s = \"Case #\" + (i + 1) + \": \" + result[i];\n\t\t\tout.println(s);\n\t\t}\n\t\tout.close();\n\t\tscanner.close();\n\t}\n\n}\n", "idx": "6605"}
{"func": "package googlejam6.p607;\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\npublic class RankFile {\r\n\r\n\tpublic static void main(String[]args)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tScanner sc = new Scanner(new FileReader(\"B-large (1).in\"));\r\n\t\t\tFileWriter fw = new FileWriter(new File(\"Output.txt\"));\r\n\t\t\tPrintWriter pw = new PrintWriter(fw);\r\n\t\t\t\t\r\n\t\t\tint t = sc.nextInt();\r\n\t\t\tsc.nextLine();\r\n\t\t\t\t\r\n\t\t\tfor(int r = 1; r <= t; r++)\r\n\t\t\t{\r\n\t\t\t\tint n = sc.nextInt();\r\n\t\t\t\tArrayList<Integer> list = new ArrayList<Integer>();\r\n\t\t\t\tfor(int i = 0; i < 2*n-1; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(int j = 0; j<n; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint temp = sc.nextInt();\r\n\t\t\t\t\t\tboolean add = true;\r\n\t\t\t\t\t\tfor (int k = 0; k < list.size();k++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(temp == list.get(k))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlist.remove(k);\r\n\t\t\t\t\t\t\t\tadd = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(add)\r\n\t\t\t\t\t\t\tlist.add(temp);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tCollections.sort(list);\r\n\t\t\t\t\r\n\t\t\t\tpw.print(\"Case #\" + r + \":\");\r\n\t\t\t\tfor(int i = 0; i < n; i++ )\r\n\t\t\t\t{\r\n\t\t\t\t\tpw.print(\" \"+list.get(i));\r\n\t\t\t\t}\r\n\t\t\t\tpw.println();\r\n\t\t\t}\r\n\t\t\tpw.flush();\t\r\n\t\t\tpw.close();\r\n\t\t}\r\n\t\t\tcatch(IOException ioe)\r\n\t\t\t{\r\n\t\t\t\tSystem.out.print(ioe);\r\n\t\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "6607"}
{"func": "package googlejam6.p608;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Solder {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader in = new BufferedReader(new FileReader(\"resources/A-large-solder.in\"));\r\n\t\tFileWriter fw = new FileWriter(\"resources/A-large-solder.out\");\r\n\t\tint C = new Integer(in.readLine());\t\t\r\n\r\n\t\tfor (int i = 1; i <= C; i++){\r\n\t\t\tint N = new Integer(in.readLine());\r\n\t\t\tint[][] heights = new int [2500*2500][2];\t\t\t\r\n\t    \tfor (int j = 0; j < 2*N - 1; j++){\r\n\t    \t\tStringTokenizer st = new StringTokenizer(in.readLine());\r\n\t    \t\tfor (int v = 0; v < N; v++){\r\n\t    \t\t\tint height = new Integer(st.nextToken());\r\n\t    \t\t\tboolean matched = false;\n\t\t\t\t\tint i1 = 0;\n\t\t\t\t\tfor (; i1 < N * N && heights[i1][0] > 0;  i1++){\n\t\t\t\t\t\tif (height == heights[i1][0]){\n\t\t\t\t\t\t\theights[i1][1]++;\t\n\t\t\t\t\t\t\tmatched = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!matched) {\n\t\t\t\t\t\theights[i1][0] = height;\n\t\t\t\t\t\theights[i1][1]++;\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t    \t}\t    \t\r\n\t    \tArrayList result = new ArrayList();\n\t\t\tfor(int i2 = 0; i2 < N * N && heights[i2][0] > 0; i2++){\n\t\t\t\tif (heights[i2][1] % 2 == 1)\n\t\t\t\t\tresult.add(heights[i2][0]);\n\t\t\t}\t\t\n\t\t\tCollections.sort(result);\n\t\t\tfw.write(\"Case #\" + i + \": \");\n\t\t\tfor (int i1 = 0; i1 < result.size(); i1++ ){\n\t\t\t\tfw.write(result.get(i1) + \" \");\n\t\t\t}\n\t\t\tfw.write(\"\\n\");\r\n\t\t}\t\t\r\n\t\tfw.flush();\r\n\t\tfw.close();\r\n\t}\r\n\t\r\n\r\n}\r\n", "idx": "6608"}
{"func": "package googlejam6.p609;\nimport java.util.Arrays;\r\nimport java.util.Hashtable;\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\n\r\npublic class Program2 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner sc=new Scanner(System.in);\n\t\tint T=sc.nextInt();\n\t\tfor(int i=1;i<=T;i++){\n\t\t\tint N=sc.nextInt();\n\t\t\tHashtable<Integer,Integer> numbers=new Hashtable<Integer,Integer>();\n\t\t\tfor(int iter=0;iter<(2*N*N-N);iter++){\n\t\t\t\tint input=sc.nextInt();\n\t\t\t\tint count=0;\n\t\t\t\tif(numbers.containsKey(input)){\n\t\t\t\t\tcount=numbers.get(input);\n\t\t\t\t}\n\t\t\t\tnumbers.put(input, count+1);\n\t\t\t}\n\t\t\tint[] finalList=new int[N];\n\t\t\tint index=0;\n\t\t\t Set<Integer> keys = numbers.keySet();\n\t\t        for(Integer key: keys){\n\t\t            int counter=numbers.get(key);\n\t\t            if(counter%2!=0){\n\t\t            \tfinalList[index++]=key;\n\t\t            }\n\t\t        }\n\t\t        Arrays.sort(finalList);\n\t\t        String output=(\"Case #\"+i+\":\");\n\t\t        \n\t\t        for(int k:finalList){\n\t\t        \toutput+=(\" \"+k);\t\n\t\t        }\n\t\t        System.out.println(output);\n\t\t}\r\n\t\t//Large();\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "6609"}
{"func": "package googlejam6.p610;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\nimport java.util.StringJoiner;\r\n\r\npublic class RankAndFile {\r\n\tstatic boolean fileOutput = true;\r\n\tstatic Path outputPath = Paths.get(\"output.txt\");\r\n\tstatic PrintWriter fileWriter;\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\ttry (Scanner scanner = new Scanner(new File(\"input/B-large.in\"))) {\r\n\t\t\tint T = scanner.nextInt();\r\n\r\n\t\t\tfor (int t = 0; t < T; ++t) {\r\n\t\t\t\tint N = scanner.nextInt(); scanner.nextLine();\r\n\t\t\t\tMap<Integer, Integer> map = new HashMap<>();\r\n\r\n\t\t\t\tint NN = N * (2*N - 1);\r\n\t\t\t\tfor (int i = 0; i < NN; ++i) {\r\n\t\t\t\t\tint n = scanner.nextInt();\r\n\t\t\t\t\t\r\n\t\t\t\t\tInteger I = map.get(n);\r\n\t\t\t\t\tif (I == null)\r\n\t\t\t\t\t\tI = 1;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tI += 1;\r\n\t\t\t\t\tmap.put(n, I);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfinal List<Integer> l = new ArrayList<>();\r\n\t\t\t\tmap.forEach((k, v) -> {\r\n\t\t\t\t\tif (v % 2 == 1)\r\n\t\t\t\t\t\tl.add(k);\r\n\t\t\t\t});\r\n\t\t\t\tCollections.sort(l);\r\n\t\t\t\t\r\n\t\t\t\tfinal StringJoiner sj = new StringJoiner(\" \");\r\n\t\t\t\tl.forEach(s -> { sj.add(s.toString()); });\n\t\t\t\tString txt = \"Case #\" + (t + 1) + \": \" + sj.toString();\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (fileOutput && fileWriter == null)\n\t\t\t\t\tfileWriter = new PrintWriter(outputPath.toFile());\n\t\t\t\t\n\t\t\t\tif (fileOutput)\n\t\t\t\t\tfileWriter.write(txt + \"\\n\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(txt);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (fileWriter != null)\n\t\t\tfileWriter.close();\r\n\t}\r\n}\r\n", "idx": "6610"}
{"func": "package googlejam6.p611;\nimport java.util.Scanner;\r\nimport java.util.Arrays;\r\npublic class Main{\r\n\tpublic static void main(String[] args){\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint cases = sc.nextInt();\r\n\t\tfor(int c=1;c<=cases;c++){\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint[] heights = new int[2501];\r\n\t\t\tfor(int i=0;i<2*n-1;i++){\r\n\t\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\t\theights[sc.nextInt()]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.printf(\"Case #%d:\",c);\r\n\t\t\tfor(int i=0;i<2501;i++) if(heights[i]%2!=0) System.out.print(\" \"+i);\r\n\t\t\tSystem.out.println();\t\t\r\n\t\t}\r\n\t}\r\n\r\n}", "idx": "6611"}
{"func": "package googlejam6.p613;\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\nimport java.util.Set;\r\n\r\npublic class RankAndFile {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner scan=new Scanner(System.in);\r\n\t\tint T=scan.nextInt();\r\n\t\t//\t\tscan.nextLine();\r\n\t\tfor(int i=1;i<=T;i++){\r\n\t\t\tint n=scan.nextInt();\r\n\t\t\tHashMap<Integer,Integer> hm=new HashMap<Integer,Integer>(); \r\n\t\t\tfor(int j=0;j<(2*n*n)-n;j++){\r\n\t\t\t\tint input=scan.nextInt();\r\n\t\t\t\tif(hm.containsKey(input)){\r\n\t\t\t\t\thm.put(input, hm.get(input)+1);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\thm.put(input,1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tIterator it = hm.entrySet().iterator();\r\n\t\t\tArrayList<Integer> aList=new ArrayList();\r\n\t\t    while (it.hasNext()) {\r\n\t\t        Map.Entry pair = (Map.Entry)it.next();\r\n\t\t        if(((int)pair.getValue())%2==1){\r\n\t\t        \taList.add((int)pair.getKey());\r\n\t\t        }\r\n\t\t        it.remove(); \r\n\t\t    }\r\n\t\t    Collections.sort(aList);\r\n\t\t    String s=\"\";\r\n\t\t    while(!aList.isEmpty()){\r\n\t\t    \ts=s+aList.remove(0)+\" \";\r\n\t\t    }\r\n\t\t    System.out.print(\"Case #\"+i+\": \"+s.trim()+\"\\n\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "6613"}
{"func": "package googlejam6.p614;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\npublic class RankFile {\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t\n\t\tBufferedReader br = new BufferedReader(new FileReader(args[0]));\n\n\t\tint numCases = Integer.parseInt(br.readLine());\n\n\t\tfor (int i = 0; i < numCases; i++) {\n\t\t\tint N = Integer.parseInt(br.readLine());\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \":\");\n\t\t\t\n\t\t\tint numRows = (N * 2) - 1;\n\t\t\t\n\t\t\tint[] sortedList = new int[N * ((2 * N) - 1)];\n\t\t\t\n\t\t\tint index = 0;\n\t\t\t\n\t\t\tfor (int j = 0; j < numRows; j++) {\n\t\t\t\tString[] s = br.readLine().split(\" \");\n\t\t\t\tfor (String st : s)\n\t\t\t\t\tsortedList[index++] = Integer.parseInt(st);\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(sortedList);\n\t\t\t\n\t\t\tindex = 0;\n\t\t\twhile (index < sortedList.length) {\n\t\t\t\tint a = sortedList[index];\n\t\t\t\tint b = 0;\n\t\t\t\tif (index + 1 >= sortedList.length) {\n\t\t\t\t\tb = -1;\n\t\t\t\t} else {\n\t\t\t\t\tb = sortedList[index + 1];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (a == b) {\n\t\t\t\t\tindex += 2;\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.print(\" \" + a);\n\t\t\t\t\tindex ++;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println();\n\t\t}\n\n\t}\n}\n", "idx": "6614"}
{"func": "package googlejam6.p618;\n\r\n\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.LinkedList;\r\nimport java.util.Scanner;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\n\r\npublic class test14 {\r\n\tpublic static void main(String[] arg) throws Exception{\r\n\t\tFileInputStream fis=new FileInputStream(\"B-large.in\");  \r\n        System.setIn(fis); \r\n        PrintStream ps=new PrintStream(new FileOutputStream(\"Output2\"));  \r\n        System.setOut(ps);\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint N =sc.nextInt();\t\t\r\n\t\tfor(int i=0;i<N;i++){\r\n\t\t\tint numsize = sc.nextInt();\r\n\t\t\tint[] nums = new int[(2*numsize-1)*numsize];\r\n\t\t\tfor(int j=0;j<nums.length;j++){\r\n\t\t\t\tnums[j]=sc.nextInt();\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\"+(i+1)+\": \");\n\t\t\tHashMap<Integer,Integer> map = new HashMap<Integer,Integer>();\n\t\t\tfor(int i1 = 0; i1 < nums.length; i1++){\n\t\t\t    if(!map.containsKey(nums[i1])){\n\t\t\t        map.put(nums[i1],1);\n\t\t\t    }else{\n\t\t\t        map.put(nums[i1],map.get(nums[i1])+1);\n\t\t\t    }\n\t\t\t}\n\t\t\tIterator it= map.keySet().iterator();\n\t\t\tint sizeone = 0;\n\t\t\twhile(it.hasNext())\n\t\t\t{\n\t\t\t\tint key = (int)it.next();\n\t\t\t    if(map.get(key)%2==1){sizeone+=1;}\n\t\t\t}\n\t\t\tint[] res1=new int[sizeone];\n\t\t\tint k=0;\n\t\t\tIterator it2= map.keySet().iterator();\n\t\t\twhile(it2.hasNext())\n\t\t\t{\n\t\t\t    int key2 = (int)it2.next();\n\t\t\t    if(map.get(key2)%2==1){\n\t\t\t        res1[k]=key2;\n\t\t\t        ++k;\n\t\t\t    }\n\t\t\t}\r\n\t\t\tint[] res=res1;\r\n\t\t\tArrays.sort(res);\r\n\t\t\tfor(int j=0;j<res.length;j++){\r\n\t\t\t\tSystem.out.print(res[j]+\" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6618"}
{"func": "package googlejam6.p620;\nimport java.io.*;\nimport java.util.*;\n\npublic class BB {\n    \n//    private static PrintWriter out;\n    \n    public static void main(String[] args) throws IOException{\n\tString filename = \"B-large\";\n//\tString filename = \"1A/A-small\";\n//\tout = new PrintWriter(new BufferedWriter(new FileWriter(filename + \".out\")));\n\tSystem.setIn(new FileInputStream(filename + \".in\"));\n\tScanner in = new Scanner(System.in);\n\tint T = in.nextInt();\t\t\n\tString line = in.nextLine();\n\tfor(int z = 1; z <= T; z++){\n\t    System.out.print(\"Case #\"+z+\": \");\n\t    int N = in.nextInt();\n\t    line = in.nextLine();\n\t    HashSet nums = new HashSet(); \n\t    for (int i = 0; i < (2 * N) - 1; i++) {\n\t\tfor (int j = 0; j < N; j++) {\n\t\t    int num = in.nextInt();\t\t    \n\t\t    if(nums.contains(num))\n\t\t\tnums.remove(num);\n\t\t    else\n\t\t\tnums.add(num);\n\t\t    \n\t\t    \n\t\t}\t\t\n\t    }\n\t    TreeSet myTreeSet = new TreeSet();\n\t    myTreeSet.addAll(nums);\n\t    for (Object n : myTreeSet) {\n\t\tSystem.out.print(n);\n\t\tSystem.out.print(\" \");\n\t    }\n\t    System.out.println(\"\");\n\t}\n\t\n//\tout.close();\n\tSystem.exit(0);\n    }\n    \n//    public static void print(String str){\n//\tSystem.out.print(str);\n//\tout.print(str);\n//    }\n//    public static void println(String str){\n//\tSystem.out.println(str);\n//\tout.println(str);\n//    }\n}\n", "idx": "6620"}
{"func": "package googlejam6.p623;\n\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class heights {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tstatic String INPUT_LOCATION = \"C:\\\\Users\\\\srihari\\\\workspace\\\\codejam2016\\\\\";\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\t// TODO Auto-generated method stub\r\n\r\n\t\tScanner sc = new Scanner(new FileReader(INPUT_LOCATION\r\n\t\t\t\t+ \"B-large.in\"));\r\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(INPUT_LOCATION\r\n\t\t\t\t+ \"B-large.in.out\"));\r\n\t\t\r\n//\t\tScanner sc = new Scanner(new FileReader(INPUT_LOCATION\r\n//\t\t\t\t+ \"B-small-attempt0.in\"));\r\n//\t\tPrintWriter pw = new PrintWriter(new FileWriter(INPUT_LOCATION\r\n//\t\t\t\t+ \"B-small-attempt0.in.out\"));\r\n\t\t \r\n\t\t//Scanner sc=new Scanner(System.in);\r\n\t\tint cnttests = sc.nextInt();\r\n\t\t//sc.nextLine();\r\n\t\tfor (int i = 0; i < cnttests; i++) \r\n\t\t\t{\r\n\t\t\t\tint[] trackcounts = new int [2501];\r\n\t\t\t\tint j = sc.nextInt();\r\n\t\t\t\tint x = (2*j-1)*j;\r\n\t\t\t\tfor(int k = 0;k < x; k++)\r\n\t\t\t\t\t\ttrackcounts[sc.nextInt()] += 1;\r\n\t\t\t\t    \r\n\t\t\t\t    pw.print(\"Case #\"+(i+1)+\":\");\r\n\t\t\t\t    //System.out.print(\"Case #\"+(i+1)+\":\");\r\n\t\t\t\t    for(int p = 1; p<2500;p++)\r\n\t\t\t\t    {\r\n\t\t\t\t    \tif(trackcounts[p]%2==1)\r\n\t\t\t\t    \t   pw.print(\" \" +p);\r\n\t\t\t\t    \t\t//System.out.print(\" \" +p);\r\n\t\t\t\t    }\r\n\t\t\t\t   \r\n\t\t\t\t    pw.println();\r\n\t\t\t\t    //System.out.println();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\tpw.flush();\r\n\t\tpw.close();\r\n\t\tsc.close();\r\n\r\n\t   }\r\n}\r\n", "idx": "6623"}
{"func": "package googlejam6.p624;\nimport java.util.*;\nimport java.io.*;\n\npublic class Soldier {\n\n\n\tpublic static void main(String []args) throws IOException {\n\n\t\tFileReader fr = new FileReader(\"B-large.in\");\n\t\tBufferedReader br = new BufferedReader(fr);\n\t\tString s;\n\n\n\t\t//Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint T;\n\t\tif((s = br.readLine()) != null)\n\t\t\tT = Integer.parseInt(s);//c.nextInt();\n\t\telse\n\t\t{\n\t\t\tSystem.out.println(\"File has nothing to read.\");\n\t\t\treturn;\n\t\t}\n\t\tif(T < 1 || T > 100) {\n\t\t\tSystem.out.println(\"Improper number of test cases.\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tHashMap<Integer, Integer>  obj = new HashMap<Integer, Integer>();\n\t\tint N;\n\t\tInteger arr[][];int one = 1;\n\t\tString strarr[];// = new String();\n\t\tfor(int k = 0;k < T;k++) {\n\t\t\tobj.clear();\n\t\t\tif((s = br.readLine()) != null)\n\t\t\t\tN = Integer.parseInt(s);//c.nextInt();\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"File has nothing to read.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tarr = new Integer[2 * N - 1][N];\n\t\t\tfor(int i = 0;i < 2 * N - 1;i++) {\n\t\t\t\tif((s = br.readLine()) == null) {\n\t\t\t\t\tSystem.out.println(\"File has nothing to read.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tstrarr = null;\n\t\t\t\tstrarr = s.split(\" \");\n\t\t\t\tfor(int j = 0;j < N;j++) {\n\t\t\t\t\tarr[i][j] = Integer.parseInt(strarr[j]);\n\t\t\t\t\tif(!obj.containsKey(arr[i][j]))\n\t\t\t\t\t\tobj.put((Integer) arr[i][j],(Integer)  1);\n\t\t\t\t\telse\n\t\t\t\t\t\tobj.put((Integer)arr[i][j], (Integer)(obj.get(arr[i][j]) + 1));\n\t\t\t\t}\t\n\t\t\t}\n\t\n\t\t\tSet setobj = obj.entrySet();\n\t\t\tIterator it = setobj.iterator();\n\t\t\tint out[] = new int[N];int i = 0;\n\t\t\twhile(it.hasNext()) {\n\t\t\t\tMap.Entry me = (Map.Entry) it.next();\n\t\t\t\tint temp = (int)me.getValue();\n\t\t\t\tif(temp % 2  == 1) {\n\t\t\t\t\tout[i] = (int)me.getKey(); i++;\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t}\n\t\t\tArrays.sort(out);\n\t\t\tSystem.out.print(\"Case #\" + (k + 1) + \": \");\n\t\t\tfor(int j = 0;j < N;j++)\n\t\t\t\tSystem.out.print(out[j] + \" \");\n\t\t\tSystem.out.println();\n\t\t\t\n\t\t\t\n\t\t}\n\n\t}\n\n}\n", "idx": "6624"}
{"func": "package googlejam6.p625;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\npublic class RankAndFile {\r\n\r\n\tpublic RankAndFile() {\r\n\t\t// TODO Auto-generated constructor stub\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\tRankAndFile yessir=new RankAndFile();\r\n\t\tFileReader fr;\n\t\ttry {\n\t\t\tfr = new FileReader(\"B-large.in\");\n\t\t\tBufferedReader br=new BufferedReader(fr);\n\t\t\tFileWriter fw=new FileWriter(\"data-B-large.txt\");\n\t\t\tBufferedWriter bw=new BufferedWriter(fw);\n\t\t\tint inputs=Integer.parseInt(br.readLine());\n\t\t\tfor(int i=0; i<inputs; i++){\n\t\t\t\tint rows=Integer.parseInt(br.readLine());\n\t\t\t\tArrayList<Integer> list=new ArrayList<Integer>();\n\t\t\t\tfor (int j=0; j<rows*2-1; j++){\n\t\t\t\t\tString[] line=br.readLine().split(\" \");\n\t\t\t\t\tfor(String x: line){\n\t\t\t\t\t\tlist.add(Integer.parseInt(x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tStringBuilder output1=new StringBuilder();\n\t\t\t\tArrayList<Integer> missingRow=new ArrayList<Integer>();\n\t\t\t\tArrayList<Integer> distinctHeights=new ArrayList<Integer>();\n\t\t\t\tIterator<Integer> theIter=list.iterator();\n\t\t\t\twhile(theIter.hasNext()){\n\t\t\t\t\tint next=theIter.next();\n\t\t\t\t\tif(distinctHeights.contains(next)){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tdistinctHeights.add(next);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//System.out.println(distinctHeights.toString());\n\t\t\t\tCollections.sort(distinctHeights);\n\t\t\t\tint index=0;\n\t\t\t\twhile (missingRow.size()<rows){\n\t\t\t\t\tint currentHeight=distinctHeights.get(index);\n\t\t\t\t\tint parity=0;\n\t\t\t\t\tfor(int i1=0; i1<list.size(); i1++){\n\t\t\t\t\t\tint x=list.get(i1);\n\t\t\t\t\t\tif(x==currentHeight){\n\t\t\t\t\t\t\tparity++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (parity%2==1){\n\t\t\t\t\t\tmissingRow.add(currentHeight);\n\t\t\t\t\t}\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int i2=0; i2<missingRow.size(); i2++){\n\t\t\t\t\tSystem.out.print(missingRow.get(i2)+\" \");\n\t\t\t\t\toutput1.append(missingRow.get(i2)+\" \");\n\t\t\t\t}\n\t\t\t\tString output=output1.toString();\n\t\t\t\t\n\t\t\t\tbw.write(\"Case #\"+(i+1)+\": \");\n\t\t\t\tbw.write(output+\"\\n\");\n\t\t\t}\n\t\t\tbr.close();\n\t\t\tbw.close();\n\t\t\t\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "6625"}
{"func": "package googlejam6.p626;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n\npublic class PanCakes\n{\n\tHashMap<Integer, Integer> result;\n\tprivate Scanner scan;\n\tprivate int length, cases=0;\n\tprivate String inS;\n\tprivate char lastSeen; \n\tprivate FileWriter fw;\n\tprivate ArrayList<Integer> output;\n\t\n\tpublic PanCakes() throws IOException\n\t{\n\t\tFile outputFile = new File(\"/home/devil/java/testjava/src/Result.txt\");\n\t\tthis.fw = new FileWriter(outputFile);\n\t\tthis.scan = new Scanner(new BufferedReader(new FileReader(new File(\"/home/devil/java/testjava/src/B-large.in\"))));\n\t\tthis.length = this.scan.nextInt();\n\t\tthis.output= new ArrayList<Integer>();\n\t\tthis.result = new HashMap<Integer, Integer>();\n\t}\n\t\n\tpublic static void main(String args[])\n\t{\n\t\t\n\t\tPanCakes flip;\n\t\ttry {\n\t\t\tflip = new PanCakes();\n\t\t\tfor(int i=0;i<flip.length;i++)\n\t\t\t{\n\t\t\t\tflip.cases++;\n\t\t\t\tInteger input = flip.scan.nextInt();\n\t\t\t\tint read = 0;\n\t\t\t\tfor(int i1=0;i1<input*((2*input)-1);i1++)\n\t\t\t\t{\n\t\t\t\t\tread = flip.scan.nextInt();\n\t\t\t\t\tif(flip.result.containsKey(read))\n\t\t\t\t\t\tflip.result.put(read, flip.result.get(read)+1);\n\t\t\t\t\telse\n\t\t\t\t\t\tflip.result.put(read, 1);\n\t\t\t\t}\n\t\t\t\tfor (Map.Entry<Integer, Integer> entry : flip.result.entrySet())\n\t\t\t\t{\n\t\t\t\t\tif(entry.getValue()%2==1)\n\t\t\t\t\t\tflip.output.add(entry.getKey());\n\t\t\t\t}\n\t\t\t\tCollections.sort(flip.output);\n\t\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\t\tfor(Integer fi: flip.output)\n\t\t\t\t{\n\t\t\t\t\tbuilder.append(fi);\n\t\t\t\t\tbuilder.append(\" \");\n\t\t\t\t}\n\t\t\t\tflip.fw.write(\"Case #\" + flip.cases + \": \"+builder+ \"\\n\");\n\t\t\t\tflip.output.clear();\n\t\t\t\tflip.result.clear();\n\t\t\t}\n\t\t\tflip.fw.close();\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "6626"}
{"func": "package googlejam6.p628;\n\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.FileWriter;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Hashtable;\r\nimport java.util.Iterator;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tFileInputStream fs = new FileInputStream(\"B-large.in\");\r\n\t\tFileWriter fw = new FileWriter(\"B-large.txt\");\r\n\t\tScanner s = new Scanner(fs);\r\n\t\tint num = s.nextInt();\r\n\t\tfor(int i = 0; i < num; i++){\r\n\t\t\tint lineNum = s.nextInt();\r\n\t\t\tHashMap<Integer, Integer> hs = new HashMap<Integer, Integer>();\r\n\t\t\tfor(int j = 0; j < (lineNum * 2 - 1) * lineNum; j++){\r\n\t\t\t\tint n = s.nextInt();\r\n\t\t\t\tif(hs.containsKey(n)){\r\n\t\t\t\t\ths.put(n, hs.get(n) + 1);\r\n\t\t\t\t}else{\r\n\t\t\t\t\ths.put(n, 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint[] ans = new int[lineNum];\r\n\t\t\tint index = 0;\r\n\t\t\tIterator it = hs.entrySet().iterator();\r\n\t\t\twhile(it.hasNext()){\r\n\t\t\t\tMap.Entry entry = (Map.Entry)it.next();\r\n\t\t\t\tif((Integer)entry.getValue() % 2 == 1){\r\n\t\t\t\t\tans[index++] = (Integer)entry.getKey();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tArrays.sort(ans);\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\tfor(int k = 0; k < lineNum; k++)\r\n\t\t\t\tsb.append(ans[k] + \" \");\r\n\t\t\tfw.write(\"Case #\" + (i + 1) +\": \" + sb.toString() + \"\\n\");\r\n\t\t}\r\n\t\tfs.close();\r\n\t\tfw.close();\r\n\t}\r\n}\r\n", "idx": "6628"}
{"func": "package googlejam6.p629;\nimport java.util.*;\nimport java.io.*;\n\npublic class Rank {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint t = in.nextInt();\n\t\tfor (int testCase = 1; testCase <= t; ++testCase) {\n\t\t\tint n = in.nextInt();\n\t\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\t\tfor (int i = 0; i < 2 * n - 1; i++) {\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tint a = in.nextInt();\n\t\t\t\t\tif (!map.containsKey(a)) {\n\t\t\t\t\t\tmap.put(a, 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tint count = map.get(a);\n\t\t\t\t\t\tmap.put(a, ++count);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tIterator it = map.entrySet().iterator();\n\t\t\tint result[] = new int[n];\n\t\t\tint i = 0;\n\t\t\twhile(it.hasNext()) {\n\t\t\t\tMap.Entry pair = (Map.Entry)it.next();\n\t\t\t\tint key = (int) pair.getKey();\n\t\t\t\tint value = (int) pair.getValue();\n\t\t\t\tif (value % 2 != 0) {\n\t\t\t\t\tresult[i] = key;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\tit.remove();\n\t\t\t}\n\t\t\tArrays.sort(result);\n\t\t\tSystem.out.print(\"Case #\" + testCase + \":\");\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tSystem.out.print(\" \" + result[j]);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tin.close();\n\t}\n\t\n}\n", "idx": "6629"}
{"func": "package googlejam6.p630;\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by Igor Cha on 4/15/2016.\r\n */\r\npublic class ProblemB {\r\n    public static void main (String[] args) throws FileNotFoundException {\r\n\r\n        FileReader file = new FileReader(\"B-large.in\");\r\n        Scanner in = new Scanner(file);\r\n        PrintWriter out = new PrintWriter(\"output.txt\");\r\n\r\n        int t = in.nextInt();\r\n\r\n        for(int b = 1; b<=t; b++) {\r\n            int n = in.nextInt();\r\n            int[] a = new int[2501];\r\n            int[] result = new int[n];\r\n            int k = 0;\r\n            for (int i = 0; i < ((2 * n - 1) * n); i++) {\r\n                a[in.nextInt()] += 1;\r\n\r\n            }\r\n\r\n            for(int j = 0; j<a.length; j++)\r\n            {\r\n                if(!((a[j] % 2)== 0))\r\n                {\r\n                    result[k] = j;\r\n                    k++;\r\n                }\r\n\r\n            }\r\n            String output =\"\";\r\n            for(int s = 0; s<result.length; s++)\r\n            {\r\n                output += \" \" + result[s];\r\n            }\r\n            out.println(\"Case #\" + b +\":\" + output);\r\n        }\r\n\r\n        in.close();\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "6630"}
{"func": "package googlejam6.p632;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class Main {\r\n  static int n;\r\n  static Map<Integer, Integer> count1 = new HashMap<>();\r\n  static Map<Integer, Integer> count2 = new HashMap<>();\r\n\r\n\r\n  public static void main(String[] args) throws IOException {\r\n    File out = new File(\"out.out\");\r\n    out.createNewFile();\r\n    BufferedWriter output = new BufferedWriter(new FileWriter(out));\r\n    Scanner sc = new Scanner(new File(\"inLarge\"));\r\n    int numCases = Integer.valueOf(sc.nextLine());\r\n    List<String> answers = new ArrayList<String>();\r\n\r\n    cases:\r\n    for (int test = 1; test <= numCases; test++) {\r\n      Map<Integer, Integer> countTotal = new HashMap<>();\r\n      String line = sc.nextLine();\r\n      n = Integer.valueOf(line);\r\n      int numPapers = n * 2 - 1;\r\n      List<List<Integer>> papers = new ArrayList<>();\r\n      for (int i = 0; i < numPapers; i++) {\r\n        line = sc.nextLine();\r\n        String[] tokens = line.split(\" \");\r\n        List<Integer> paper = new ArrayList<>();\r\n        for (int i2 = 0; i2 < n; i2++) {\r\n          paper.add(Integer.valueOf(tokens[i2]));\r\n        }\r\n        papers.add(paper);\r\n      }\r\n\r\n      for(int p = 0; p < numPapers; p++) {\r\n        List<Integer> paper = papers.get(p);\r\n        for (int i = 0; i < n; i++) {\r\n          Integer mou = countTotal.get(paper.get(i));\r\n          if (mou == null) {\r\n            countTotal.put(paper.get(i), 1);\r\n          } else {\r\n            countTotal.put(paper.get(i), mou + 1);\r\n          }\r\n        }\r\n      }\r\n      List<Integer> pot = new ArrayList<>();\r\n      for (Map.Entry<Integer, Integer> e : countTotal.entrySet()) {\r\n        if (e.getValue() % 2 == 1) {\r\n          pot.add(e.getKey());\r\n        }\r\n      }\r\n\r\n\r\n      pot.sort(Integer::compare);\r\n      answers.add(String.join(\" \", pot.stream().map(Object::toString).collect(Collectors.toList())));\r\n    }\r\n\r\n    for (int i = 0; i < numCases; i++) {\r\n      output.write(String.format(\"Case #%d: %s\", i + 1, answers.get(i)));\r\n      output.newLine();\r\n      output.flush();\r\n    }\r\n  }\r\n\r\n\r\n}\r\n", "idx": "6632"}
{"func": "package googlejam6.p634;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.*;\n\n/**\n * Created by xy on 4/15/16.\n */\npublic class RankAndFile {\n    public static void main(String[] args) throws FileNotFoundException {\n        File input = new File(\"in.txt\");\n        Scanner in = new Scanner(input);\n        PrintWriter writer = new PrintWriter(\"out.txt\");\n        int T = in.nextInt();\n        in.nextLine();\n        RankAndFile r = new RankAndFile();\n        for (int i = 1; i<= T; i++){\n\n\n            writer.print(\"Case #\"+i+\": \");\n            int N = in.nextInt();\n\t\t\tin.nextLine();\n\t\t\tHashMap<Integer,Integer> m = new HashMap<Integer, Integer>();\n\t\t\tfor (int row = 0; row < 2*N-1; row++){\n\t\t\t    for (int i3 = 0; i3 < N; i3++){\n\t\t\t        int tmp = in.nextInt();\n\t\t\t        if (m.containsKey(tmp))\n\t\t\t            m.put(tmp, m.get(tmp) + 1);\n\t\t\t        else\n\t\t\t            m.put(tmp,1);\n\t\t\t    }\n\t\t\t    in.nextLine();\n\t\t\t}\n\t\t\t\n\t\t\tList<Integer> l = new LinkedList<Integer>();\n\t\t\tfor (int i1 : m.keySet()){\n\t\t\t    if (m.get(i1)%2 == 1)\n\t\t\t        l.add(i1);\n\t\t\t}\n\t\t\tCollections.sort(l);\n\t\t\tfor (int i2 = 0; i2 < N; i2++){\n\t\t\t    if (i2 < N-1)\n\t\t\t        writer.print(l.get(i2)+\" \");\n\t\t\t    else\n\t\t\t        writer.println(l.get(i2));\n\t\t\t}\n\n        }\n\n\n        in.close();\n        writer.close();\n    }\n\n}\n", "idx": "6634"}
{"func": "package googlejam6.p635;\n\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class B {\n\tpublic static void main(String[] args) throws IOException {\n\t\tfinal BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tfinal PrintStream ps = new PrintStream(System.out);\n\t\tfinal StringBuilder solution = new StringBuilder();\n\t\t\n\t\tfinal int T = Integer.parseInt(br.readLine());\n\t\tfor (int t = 1; t <= T; t++) {\n\t\t\tsolution.append(\"Case #\" + t + \":\");\n\t\t\tfinal int N = Integer.parseInt(br.readLine());\n\t\t\tHashMap<Integer, Integer> numAppearances = new HashMap<Integer, Integer>();\n\t\t\tfor (int i = 0; i < (2 * N) - 1; i++) {\n\t\t\t\tfinal String input = br.readLine();\n\t\t\t\tfinal String[] inputArray = input.split(\" \");\n\t\t\t\t// Each number is seen twice\n\t\t\t\tfor (String s : inputArray) {\n\t\t\t\t\tint sInt = Integer.parseInt(s);\n\t\t\t\t\tif (!numAppearances.containsKey(sInt)) {\n\t\t\t\t\t\tnumAppearances.put(sInt, 1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnumAppearances.put(sInt, numAppearances.get(sInt) + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t\tArrayList<Integer> solutionList = new ArrayList<Integer>();\n\t\t\tfor (Map.Entry<Integer, Integer> entry : numAppearances.entrySet()) {\n\t\t\t\tint key = entry.getKey();\n\t\t\t\tint value = entry.getValue();\n\t\t\t\tif (value % 2 == 1) {\n\t\t\t\t\tsolutionList.add(key);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(solutionList);\n\t\t\tfor (int i : solutionList) {\n\t\t\t\tsolution.append(\" \" + i);\n\t\t\t}\n\t\t\tsolution.append(\"\\n\");\n\t\t}\n\t\tps.print(solution);\n\t}\n}\n", "idx": "6635"}
{"func": "package googlejam6.p636;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class RankAndFile {\r\n    \r\n    public static void main(String[] args) {\r\n        \r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n        int t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\r\n        for (int i = 1; i <= t; ++i) {\r\n            int N = in.nextInt();\r\n            int[][] data = new int[2*N - 1][N];\r\n            int[] map = new int[2501];\r\n            for (int j = 0; j < 2*N-1; j++)\r\n                for (int j2 = 0; j2 < N; j2++) {\r\n                    data[j][j2] = in.nextInt();\r\n                    map[data[j][j2]]++;\r\n                }\r\n            int[] finalArr = new int[N];\r\n            int idx = 0;\r\n            for (int j = 0; j < 2501; j++) {\r\n                if((map[j]&1) == 1)\r\n                    finalArr[idx++] = j;\r\n            }\r\n            Arrays.sort(finalArr);\r\n            System.out.print(\"Case #\" + i + \": \");\r\n            for (int j = 0; j < finalArr.length; j++) {\r\n                System.out.print(finalArr[j] + \" \");\r\n            }\r\n            System.out.println();\r\n         }\r\n     }\r\n}", "idx": "6636"}
{"func": "package googlejam6.p638;\n//trashcansaretasty\n/* \nimport java.io.*;\nimport java.util.*;\n\n\npublic class AAA {\n\tstatic final String FILENAME = \"A-small-attempt0\";\n\tstatic BufferedReader in; static StringTokenizer st; static PrintWriter out;\n\tstatic void newST() throws IOException {st = new StringTokenizer(in.readLine());}\n\tstatic int stInt() {return Integer.parseInt(st.nextToken());}\n\tstatic int readInt() throws IOException {return Integer.parseInt(in.readLine());}\n\tstatic void println(Object o) {System.out.println(o);} static void println() {System.out.println();} static void print(Object o) {System.out.print(o);}\n    public static void main(String[] args) throws IOException {\n    \tin = new BufferedReader(new FileReader(FILENAME+\".in.txt\"));\n\t\t//out = new PrintWriter(new BufferedWriter(new FileWriter(FILENAME+\".out.txt\")));\n    \tout = new PrintWriter(new BufferedWriter(new FileWriter(\"@generic.out.txt\")));\t\n\t\t//out = new PrintWriter(System.out, true);\n\t\t\n\t\tint TC = readInt();\n\t\tfor (int tc = 1; tc <= TC; tc++) {\n\t\t\tout.print(\"Case #\"+tc+\": \");\n\t\t\tsolve();\n\t\t}\n\t\tin.close();\n\t\tout.close();\n    }\n    static void solve() throws IOException {\n    \tlong n = readInt();\n\n    \tout.println(n);\n    }\n}\n*/\n\n/*\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\n\npublic class AAA {\n\tstatic final String FILENAME = \"A-small-attempt0\";\n\tstatic BufferedReader in; static StringTokenizer st; static PrintWriter out;\n\tstatic void newST() throws IOException {st = new StringTokenizer(in.readLine());}\n\t//String str = in.readLine();\n\t//int n = str.length();\n\tstatic int stInt() {return Integer.parseInt(st.nextToken());}\n\t//newST();\n\t//int K = stInt(), C = stInt(), S = stInt();\n\tstatic int nextInt() throws IOException {return Integer.parseInt(in.readLine());}\n\tstatic long nextLong() throws IOException {return Long.parseLong(in.readLine());}\n\tstatic double nextDouble() throws IOException {return Double.parseDouble(in.readLine());}\n\tstatic BigInteger BigInt(int n) throws IOException {return new BigInteger(Integer.toString(n));}\n\t//ans = ans.multiply(bigInt(K)).add(bigInt(i%K));\n\t//ans = BigInteger.ZERO;\n\t//ans = ans.add(BigInteger.ONE);\n\t\n\tstatic void println(Object o) {System.out.println(o);} static void println() {System.out.println();} static void print(Object o) {System.out.print(o);}\n    public static void main(String[] args) throws IOException {\n    \tin = new BufferedReader(new FileReader(FILENAME+\".in.txt\"));\n    \tout = new PrintWriter(new BufferedWriter(new FileWriter(\"@generic.out.txt\")));\t\n    \t//out = new PrintWriter(new BufferedWriter(new FileWriter(FILENAME+\".out.txt\")));\n\t\t//out = new PrintWriter(System.out, true);\n\t\t\n\t\tint TC = nextInt();\n\t\tfor (int tc = 1; tc <= TC; tc++) {\n\t\t\tout.print(\"Case #\"+tc+\": \");\n\t\t\tsolve();\n\t\t}\n\t\tin.close();\n\t\tout.close();\n    }\n    static void solve() throws IOException {\n    \t//long n = nextInt();\n    \tString str = in.readLine();\n\n    \t\n    \tout.println(str);\n    }\n}*/\n\n/*\n//exo1\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\n\npublic class AAA {\n\tstatic final String FILENAME = \"A-large\";\n\tstatic BufferedReader in; static StringTokenizer st; static PrintWriter out;\n\tstatic void newST() throws IOException {st = new StringTokenizer(in.readLine());}\n\t//String str = in.readLine();\n\t//int n = str.length();\n\tstatic int stInt() {return Integer.parseInt(st.nextToken());}\n\t//newST();\n\t//int K = stInt(), C = stInt(), S = stInt();\n\tstatic int nextInt() throws IOException {return Integer.parseInt(in.readLine());}\n\tstatic long nextLong() throws IOException {return Long.parseLong(in.readLine());}\n\tstatic double nextDouble() throws IOException {return Double.parseDouble(in.readLine());}\n\tstatic BigInteger BigInt(int n) throws IOException {return new BigInteger(Integer.toString(n));}\n\t//ans = ans.multiply(bigInt(K)).add(bigInt(i%K));\n\t//ans = BigInteger.ZERO;\n\t//ans = ans.add(BigInteger.ONE);\n\t\n\tstatic void println(Object o) {System.out.println(o);} static void println() {System.out.println();} static void print(Object o) {System.out.print(o);}\n    public static void main(String[] args) throws IOException {\n    \tin = new BufferedReader(new FileReader(FILENAME+\".in.txt\"));\n    \tout = new PrintWriter(new BufferedWriter(new FileWriter(\"@generic.out.txt\")));\t\n    \t//out = new PrintWriter(new BufferedWriter(new FileWriter(FILENAME+\".out.txt\")));\n\t\t//out = new PrintWriter(System.out, true);\n\t\t\n\t\tint TC = nextInt();\n\t\tfor (int tc = 1; tc <= TC; tc++) {\n\t\t\tout.print(\"Case #\"+tc+\": \");\n\t\t\tsolve();\n\t\t}\n\t\tin.close();\n\t\tout.close();\n    }\n    static void solve() throws IOException {\n    \t//long n = nextInt();\n    \tString str = in.readLine();\n    \t\n    \tString lastWord = \"\"+ str.charAt(0);\n    \t\n    \t\n    \tfor (int i=1 ; i<str.length() ; i++ ){\n    \t\tif (lastWord.charAt(0) <= str.charAt(i)){\n    \t\t\tlastWord = str.charAt(i) + lastWord ;\n    \t\t}\n    \t\telse{\n    \t\t\tlastWord = lastWord + str.charAt(i)  ;\n\n    \t\t}\n    \t}\n    \t\n    \t\n    \t\t\t\n    \tout.println(lastWord);\n    }\n}\n\n*/\n//exo2\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\n\npublic class AAA {\n\tstatic final String FILENAME = \"B-large\";\n\tstatic BufferedReader in; static StringTokenizer st; static PrintWriter out;\n\tpublic static void main(String[] args) throws IOException {\n    \tin = new BufferedReader(new FileReader(FILENAME+\".in.txt\"));\n    \tout = new PrintWriter(new BufferedWriter(new FileWriter(\"@generic.out.txt\")));\t\n    \t//out = new PrintWriter(new BufferedWriter(new FileWriter(FILENAME+\".out.txt\")));\n\t\t//out = new PrintWriter(System.out, true);\n\t\t\n\t\tint TC = Integer.parseInt(in.readLine());\n\t\tfor (int tc = 1; tc <= TC; tc++) {\n\t\t\tout.print(\"Case #\"+tc+\": \");\n\t\t\t//long n = nextInt();\n\t\t\t//String str = in.readLine();\n\t\t\tint N = Integer.parseInt(in.readLine()); \n\t\t\t\n\t\t\tHashMap <String, Integer> men = new HashMap();\n\t\t\t\n\t\t\tfor (int i = 0 ; i < 2*N-1; i++)\n\t\t\t{\n\t\t\t\tString[] str = in.readLine().split(\" \");  //lit la ligne\n\t\t\t\t\n\t\t\t\tfor (int c = 0; c< str.length ;c++ ){\n\t\t\t\t\tif (men.containsKey(str[c])){\n\t\t\t\t\t\tmen.put(str[c],men.get(str[c]) + 1);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmen.put(str[c],1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t//print the content of hashmap\n\t\t\tArrayList<Integer> result = new  ArrayList<Integer>();\n\t\t\tSet set = men.entrySet();\n\t\t\tIterator i = set.iterator();\n\t\t\twhile(i.hasNext()) {\n\t\t\t    Map.Entry me = (Map.Entry)i.next();\n\t\t\t    if ( (int) me.getValue() % 2 ==1){\n\t\t\t    \t//System.out.print(me.getKey() + \": \");\n\t\t\t    \t//System.out.println(me.getValue());\n\t\t\t    \tresult.add(Integer.parseInt((String) me.getKey()));\n\t\t\t    }\n\t\t\t}\n\t\t\t//System.out.println();\n\t\t\t\n\t\t\tCollections.sort(result);\n\t\t\t\n\t\t\tfor(int res : result){\n\t\t\t\tSystem.out.println(res);\n\t\t\t\tout.print(res +\" \");\n\t\t\t\n\t\t\t}\n\t\t\tout.println();\n\t\t}\n\t\tin.close();\n\t\tout.close();\n    }\n}\n\n//exo3\n\n\n\n\n/*import java.io.*;\nimport java.math.*;\nimport java.util.*;\n\nimport org.omg.CORBA.Current;\n\n\npublic class AAA {\n\tstatic final String FILENAME = \"A-small-attempt0\";\n\tstatic BufferedReader in; static StringTokenizer st; static PrintWriter out;\n\tstatic void newST() throws IOException {st = new StringTokenizer(in.readLine());}\n\t//String str = in.readLine();\n\t//int n = str.length();\n\tstatic int stInt() {return Integer.parseInt(st.nextToken());}\n\t//newST();\n\t//int K = stInt(), C = stInt(), S = stInt();\n\tstatic int nextInt() throws IOException {return Integer.parseInt(in.readLine());}\n\tstatic long nextLong() throws IOException {return Long.parseLong(in.readLine());}\n\tstatic double nextDouble() throws IOException {return Double.parseDouble(in.readLine());}\n\tstatic BigInteger BigInt(int n) throws IOException {return new BigInteger(Integer.toString(n));}\n\t//ans = ans.multiply(bigInt(K)).add(bigInt(i%K));\n\t//ans = BigInteger.ZERO;\n\t//ans = ans.add(BigInteger.ONE);\n\t\n\tstatic void println(Object o) {System.out.println(o);} static void println() {System.out.println();} static void print(Object o) {System.out.print(o);}\n    public static void main(String[] args) throws IOException {\n    \tin = new BufferedReader(new FileReader(FILENAME+\".in.txt\"));\n    \tout = new PrintWriter(new BufferedWriter(new FileWriter(\"@generic.out.txt\")));\t\n    \t//out = new PrintWriter(new BufferedWriter(new FileWriter(FILENAME+\".out.txt\")));\n\t\t//out = new PrintWriter(System.out, true);\n\t\t\n\t\tint TC = nextInt();\n\t\tfor (int tc = 1; tc <= TC; tc++) {\n\t\t\tout.print(\"Case #\"+tc+\": \");\n\t\t\tsolve();\n\t\t}\n\t\tin.close();\n\t\tout.close();\n    }\n    static void solve() throws IOException {\n    \tSystem.out.println();\n    \t//long n = nextInt();\n    \t//String str = in.readLine();\n    \tint N = nextInt(); \n    \t\n        HashMap <String, String> men = new HashMap<String, String>();\n\n        //I put all the data in a hashmap\n    \tString[] str = in.readLine().split(\" \");  //lit la ligne\n    \tfor (int c = 1; c<= N ;c++ ){\n    \t\tmen.put(Integer.toString(c),str[c-1]);\n    \t}\n    \t\n    \t//I check one by one.\n    \tString cur = \"\";\n    \tint maximum = 0 ;\n    \tfor (int current = 1 ; current <=N ; current++){\n    \t\tSystem.out.print(current + \": \");\n\n    \t\tint tmp_maximum = 0;\n    \t\tcur = Integer.toString(current); // just to convert;\n    \t\tHashMap <String, String> tmp = new HashMap<String, String>(men);\n    \t\tHashSet <String> already = new HashSet <String>();\n    \t\twhile (tmp.containsKey(cur)){\n    \t\t\tString old_cur = cur;\n    \t\t\tcur = tmp.get(cur);\n    \t\t\ttmp.remove(old_cur);\n\n    \t\t\t//if (already.contains(cur) == false){\n    \t\t\t\ttmp_maximum ++;\n    \t\t\t//}\n    \t\t\tSystem.out.print(\" \" + cur+\" \");\n    \t\t\talready.add(cur);\n    \t\t}\n    \t\tSystem.out.println();\n    \t\tmaximum = Math.max(maximum,tmp_maximum );\n\n    \t}\n\t\tout.println(maximum);\n    \t\n \n        \n    }\n}\n\n*/", "idx": "6638"}
{"func": "package googlejam6.p639;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\npublic class RankAndFile {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(args[0]));\r\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(args[1]));\r\n\t\t\r\n\t\tint totalCases = Integer.parseInt(br.readLine());\r\n\t\t\r\n\t\tfor(int i=0;i<totalCases;i++){\r\n\t\t\tint n = Integer.parseInt(br.readLine());\n\t\t\tint[] counter = new int[2501];\n\t\t\tint linesGiven = 2*n-1;\n\t\t\tString missingLine1 =\"\";\n\t\t\tfor(int i1=0;i1<linesGiven;i1++){\n\t\t\t\tString temp = br.readLine();\n\t\t\t\n\t\t\t\tString[] tempArray = temp.split(\" \");\n\t\t\t\t\n\t\t\t\tfor(int i2=0; i2<tempArray.length;i2++){\n\t\t\t\t\tint index = Integer.parseInt(tempArray[i2]);\n\t\t\t\t\tcounter[index]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString line = \"\";\n\t\t\tfor(int i1=0;i1<counter.length;i1++){\n\t\t\t\tif(counter[i1]!=0){\n\t\t\t\t\tif(counter[i1]%2!=0){\n\t\t\t\t\t\tline=line + \" \" + i1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmissingLine1 = line;\r\n\t\t\tString missingLine = missingLine1;\r\n\t\t\tString result = \"Case #\" + (i+1) + \": \" + missingLine;\r\n\t\t\tbw.write(result);\r\n\t\t\tbw.newLine();\r\n\t\t}\r\n\t\t\r\n\t\tbr.close();\r\n\t\tbw.flush();\r\n\t\tbw.close();\r\n\t}\r\n\r\n}\r\n", "idx": "6639"}
{"func": "package googlejam6.p640;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.Writer;\r\nimport java.nio.charset.Charset;\r\nimport java.util.Scanner;\r\n\r\nimport qualificationround.CountingSheep;\r\n\r\npublic class TheLastWord {\r\n\r\n\tprivate File file = null;\r\n\tprivate Scanner in = null;\r\n\tprivate Writer out = null;\r\n\tprivate Integer testCases = null;\r\n\tprivate String sequence = null;\r\n\tprivate String result = null;\r\n\r\n\tprivate int sizeLimit = 10;\r\n\tprivate boolean solution;\r\n\tprivate int count;\r\n\tprivate static Charset UTF8 = Charset.forName(\"UTF-8\");\r\n\r\n\tpublic static void main(String args[]) throws IOException {\r\n\r\n\t\ttry {\r\n\t\t\tTheLastWord word = new TheLastWord();\r\n\t\t\tword.file = new File(\"input.txt\");\n\t\t\tword.in = new Scanner(word.file);\n\t\t\tword.out = new FileWriter(\"output.txt\");\r\n\t\t\tint c;\n\t\t\tc = word.in.nextInt();\n\t\t\tword.testCases = new Integer(c);\n\t\t\tfor (int i = 1; i <= word.testCases; i++) {\n\t\t\t\tword.sequence = word.in.next();\n\t\t\t\tword.result = \"Case #\" + i + \": \";\n\t\t\t\t\n\t\t\t\tString sequenceSol=\"\";\n\t\t\t\tsequenceSol+=word.sequence.charAt(0);\n\t\t\t\tfor(int i1=1; i1<word.sequence.length(); i1++)\n\t\t\t\t{\n\t\t\t\t\tif(Integer.valueOf(word.sequence.charAt(i1))>=Integer.valueOf(sequenceSol.charAt(0)))\n\t\t\t\t\t{\n\t\t\t\t\t\tsequenceSol=word.sequence.charAt(i1)+sequenceSol;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tsequenceSol=sequenceSol+word.sequence.charAt(i1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tword.result +=sequenceSol;\n\t\t\t\n\t\t\t\tword.result = word.result + \"\\n\";\n\t\t\t\tword.out.write(word.result);\n\t\t\t\n\t\t\t}\r\n\t\t\tword.in.close();\n\t\t\tword.out.close();\r\n\t\t} catch (IOException ioe) {\r\n\t\t\tioe.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6640"}
{"func": "package googlejam6.p642;\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class C1 {\r\n\r\n\t/*\r\n\tpublic static ArrayList<boolean[]> combFinal = new ArrayList<>();\r\n\tpublic static ArrayList<Integer> choice = new ArrayList<>();\r\n\t*/\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t    int t = in.nextInt();\r\n\t    \r\n\t    for (int i = 1; i <= t; ++i) {\r\n\t    \tint n = in.nextInt();\r\n\t    \tint[][] lines = new int[2*n-1][n];\r\n\t    \t\r\n\t    \tfor(int j=0; j<2*n-1; j++){\r\n\t    \t\tfor(int k=0; k<n; k++){\r\n\t    \t\t\tlines[j][k] = in.nextInt();\r\n\t    \t\t}\r\n\t    \t}\r\n\t    \tSystem.out.print(\"Case #\" + i + \":\");\r\n\t    \tArrayList<Integer> val = new ArrayList<>();\n\t\t\tint m = 2*n-1;\n\t\t\t\n\t\t\tfor(int i1=0; i1<m; i1++){\n\t\t\t\tfor(int j=0; j<n; j++){\n\t\t\t\t\tval.add(lines[i1][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tArrayList<Integer> missing = new ArrayList<>();\n\t\t\tfor(int i2=0; i2<2500; i2++){\n\t\t\t\tint count = 0;\n\t\t\t\tfor(int j=0; j<val.size(); j++){\n\t\t\t\t\tif(val.get(j)==i2)\n\t\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(count%2!=0){\n\t\t\t\t\tSystem.out.print(\" \"+i2);\n\t\t\t\t\tmissing.add(i2);\n\t\t\t\t}\n\t\t\t}\r\n\t    \tSystem.out.println(\"\");\r\n\t    \t\r\n\t    }\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "6642"}
{"func": "package googlejam6.p643;\nimport java.util.*;\n\npublic class RandAndFile {\n\n    static int[][] matrix;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for(int testcase = 1; testcase <= t; testcase++) {\n\n            int n = sc.nextInt();\n            List<Integer> list = new ArrayList<Integer>();\n\n            //each list\n            for(int a=0; a<n*2-1; a++) {\n\n                //each element in the list\n                for(int b=0; b<n; b++) {\n                    list.add(sc.nextInt());\n                }\n\n            }\n\n            list.sort(new Comparator<Integer>() {\n                @Override\n                public int compare(Integer o1, Integer o2) {\n                    if(o1 > o2) return 1;\n                    else if(o1 < o2) return -1;\n                    else return 0;\n                }\n            });\n\n            List<Integer> answer = new ArrayList<Integer>();\n            int size = list.size();\n            int prev = list.get(0);\n            int count = 1;\n\n            for(int i=1; i<size; i++) {\n                if(list.get(i) != prev) {\n\n                    if(count % 2 == 1) {\n                        answer.add(prev);\n                    }\n\n                    count = 1;\n                    prev = list.get(i);\n\n                } else {\n                    count++;\n                }\n            }\n\n            if(count % 2 == 1) {\n                answer.add(prev);\n            }\n\n            System.out.printf(\"Case #%d:\", testcase);\n            for(int j=0; j<answer.size(); j++) {\n                System.out.print(\" \" + answer.get(j));\n            }\n            System.out.println();\n\n\n        }\n    }\n}\n", "idx": "6643"}
{"func": "package googlejam6.p644;\n\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\npublic class Soldier {\r\npublic static void main(String[] args) {\r\n\t\t\r\n\t\t\r\n        Scanner s = new Scanner(System.in);\r\n        int t = s.nextInt();\r\n        \r\n        for(int i = 1;i<=t;i++){\r\n        \tint n = s.nextInt();\r\n        \t\t\tint[][] a = new int[n+n][n];\r\n        \t\t\t\r\n        \t\t\t\t\tfor(int j=0;j<n+n-1;j++){\r\n        \t\t\t\t\t\tfor(int k =0;k<n;k++){\r\n        \t\t\t\t\t\t\ta[j][k] = s.nextInt();\r\n        \t\t\t\t\t\t}\r\n        \t\t\t\t\t}\r\n        \t\t\t\t\t\r\n        \t\t\t\t\tHashMap<Integer, Integer> h = new HashMap<Integer, Integer>();\r\n        \t\t\t\t\t\tfor(int j =0;j<n+n-1;j++){\r\n        \t\t\t\t\t\t\tfor(int k=0;k<n;k++){\r\n        \t\t\t\t\t\t\t\th.put(a[j][k], 0);\r\n        \t\t\t\t\t\t\t}\r\n        \t\t\t\t\t\t}\r\n        \t\t\t\t\t\t\r\n        \t\t\t\t\t\tfor(int j =0;j<n+n-1;j++){\r\n        \t\t\t\t\t\t\tfor(int k=0;k<n;k++){\r\n        \t\t\t\t\t\t\t\th.put(a[j][k], (h.get(a[j][k])+1));\r\n        \t\t\t\t\t\t\t}\r\n        \t\t\t\t\t\t}\r\n        \t\t\t\t\t\tint[] p = new int[n+n];\r\n        \t\t\t\t\t\tint g=0;\r\n        \t\t\t\t\t\tfor(int j=0;j<n+n-1;j++){\r\n        \t\t\t\t\t\t\tfor(int k=0;k<n;k++){\r\n        \t\t\t\t\t\t\tif((h.get(a[j][k]))%2!=0){ \r\n        \t\t\t\t\t\t\t\t\r\n        \t\t\t\t\t\t\t\tp[g]=a[j][k];\r\n        \t\t\t\t\t\t\t\t\r\n        \t\t\t\t\t\t\t\tg++;\r\n        \t\t\t\t\t\t\t\th.put(a[j][k],2);\r\n        \t\t\t\t\t\t\t\t}\r\n        \t\t\t\t\t\t}\r\n        \t\t\t\t\t\t\t}\r\n        \t\t\t\t\t\tfor(int m=1;m<n;m++){\r\n        \t\t\t                for(int j=m;j>0;j--){\r\n        \t\t\t                    if(p[j]<p[j-1]){\r\n        \t\t\t                        int temp = p[j-1];\r\n        \t\t\t                        p[j-1] = p[j];\r\n        \t\t\t                        p[j] =temp;\r\n        \t\t\t                    }\r\n        \t\t\t                }\r\n        \t\t\t           \r\n        \t\t\t            }\r\n        \t\t\t\t\t\t\r\n        \t\t\t\t\t\tSystem.out.print(\"Case #\" + i + \": \"); \r\n        \t\t\t\t\t\tfor(int k=0;k<n;k++){\r\n        \t\t\t\t\t\tSystem.out.print(p[k] + \" \");\r\n        \t\t\t\t\t\t}     \r\n        \t\t\t\t\t\tSystem.out.println();\r\n        \t\t\t\t\t\t}\r\n        }\r\n}\r\n", "idx": "6644"}
{"func": "package googlejam6.p646;\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class ProblemB {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\r\n\t\t\r\n\t\t//Scanner scanner = new Scanner(System.in);\r\n\t\tScanner scanner = new Scanner(new File(\"B-large.in\"));\r\n\t\tPrintWriter writer = new PrintWriter(\"B-large.out\", \"UTF-8\");\r\n\t\t\r\n\t\tint numberOfTestCases=scanner.nextInt();\r\n\t\t\r\n\t\tscanner.nextLine();\r\n\t\t\r\n\t\tfor(int testCaseCounter=1; testCaseCounter<=numberOfTestCases; testCaseCounter++){\r\n\t\t\t//long count=0;\r\n\t\t\t\r\n\t\t\tint n=Integer.parseInt(scanner.nextLine());\r\n\t\t\t\r\n\t\t\tMap<Integer, Integer> heightMap=new HashMap<Integer, Integer>();\r\n\t\t\t\r\n\t\t\tfor(int i=0; i<(2*n-1); i++){\r\n\t\t\t\t\r\n\t\t\t\tString[] line=scanner.nextLine().split(\" \");\r\n\t\t\t\t\r\n\t\t\t\tfor(int j=0; j<line.length; j++){\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tInteger count=heightMap.get(Integer.parseInt(line[j]));\r\n\t\t\t\t\tif(count==null){\r\n\t\t\t\t\t\tcount=1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\theightMap.put(Integer.parseInt(line[j]), count);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//StringBuilder outputBuilder2=new StringBuilder();\r\n\t\t\tint[] output=new int[n];\r\n\t\t\tint i=0;\r\n\t\t\tfor(Integer height:heightMap.keySet()){\r\n\t\t\t\t\r\n\t\t\t\tInteger count=heightMap.get(height);\r\n\t\t\t\tif((count%2)!=0){\t\r\n\t\t\t\t\t//System.out.println(heightMap.get(height));\r\n\t\t\t\t\t//outputBuilder2.append(height+\" \");\r\n\t\t\t\t\toutput[i]=height;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//System.out.println(outputBuilder2.length());\r\n\t\t\t//int[] output=outputBuilder.toString().trim().split(\" \");\r\n\t\t\t\r\n\t\t\t//outputChar=output.toCharArray();\r\n\t\t\tArrays.sort(output);\r\n\t\t\t\r\n\t\t\tStringBuilder outputBuilder=new StringBuilder();\r\n\t\t\tfor(int j=0; j<output.length; j++){\r\n\t\t\t\toutputBuilder.append(output[j]+\" \");\r\n\t\t\t}\r\n\t\t\tString res=outputBuilder.toString().trim();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\twriter.println(\"Case #\"+testCaseCounter+\": \"+res);\r\n\t\t\t//System.out.println(\"Case #\"+testCaseCounter+\": \"+res);\r\n\t\t}\r\n\t\t\r\n\t\t//close resources\r\n\t\tscanner.close();\r\n\t\twriter.close();\r\n\t}\r\n\r\n}", "idx": "6646"}
{"func": "package googlejam6.p648;\nimport java.io.File;\nimport java.util.Arrays;\nimport java.util.Formatter;\nimport java.util.Scanner;\n\n/**\n * Created by Derrick on 2016/04/16.\n */\npublic class RankAndFile {\n\n\n    public static void main(String[] args){\n\n\n        Scanner input;\n        Formatter output;\n        int b = 1;\n        try{\n            output = new Formatter( \"output.txt\" );\n            input = new Scanner(new File( \"B-large(1).in\" ));//Change to console while coding\n            //input = new Scanner(System.in);\n            int T = input.nextInt();\n\n            for (int i = 0 ; i < T ; i++ ) {\n                int N = input.nextInt();\n                int[][] grid = new int[(2*N)-1][N];\n                int[][] sqr = new int[N][N];\n                for(int j = 0 ; (j < (2*N)-1) ; j++){\n                    for( int k = 0 ; k < N ; k++ ){\n                        grid[j][k] = input.nextInt();\n                    }\n                }\n                int[] miss = new int[50000];\n                for (int c = 0; c < ((2*N)-1) ; c++) {\n                    for (int d = 0; d < N; d++) {\n                        miss[grid[c][d]]++;\n                    }\n                }\n                int []num = new int[N];\n                int count = 0;\n                for (int c = 0; c < 2500 ; c++) {\n                    if((miss[c]%2) != 0){\n                        num[count] = c;\n                        count++;\n                    }\n                }\n\n                output.format(\"Case #%d: \",(i+1));\n                for (int c = 0; c < N ; c++) {\n                    output.format(\"%d \",num[c]);\n                }\n                output.format(\"\\n\");\n\n            }\n            output.close();\n        }\n        catch (Exception e){\n            e.printStackTrace();\n        }\n\n\n\n\n    }\n}\n\n\n//    int largest = grid[0][0];\n//for (int j = 0 ; j < N ; j++ ){\n//        if(grid[j][N-1] > largest){\n//        largest = grid[j][N-1];\n//        }\n//        else if (grid[j][N-1] == largest){\n//        //last element exists\n//        }\n//        }", "idx": "6648"}
{"func": "package googlejam6.p650;\nimport java.lang.*;\nimport java.io.*;\nimport java.util.*;\n\npublic class RankAndFile {\n    public static void main(String[] args) {\n        try {\n            Scanner scanner = new Scanner(new File(\"/Users/xiangyixie/Documents/eclipse_workspace/2016CodeJamRound1A/bin/B-large.in\"));\n            FileWriter writer = new FileWriter(new File(\"/Users/xiangyixie/Documents/eclipse_workspace/2016CodeJamRound1A/bin/B-large-output.out\"));\n \n            // Scanner scanner = new Scanner(new File(\"input.txt\"));\n            // FileWriter writer = new FileWriter(new File(\"output.txt\"));\n\n            int T = scanner.nextInt();\n            for (int i = 0; i < T; i++) {\n                int N = scanner.nextInt();\n\n                int[] count = new int[3000];\n                for (int j = 0; j < count.length; j++) {\n                    count[j] = 0;\n                }\n\n                for (int j = 0; j < N * (2 * N - 1); j++) {\n                    count[scanner.nextInt()]++;\n                }\n\n                int[] array = new int[N];\n                int cur = 0;\n                for (int j = 0; j<count.length; j++) {\n                    if (count[j] % 2 != 0) {\n                        System.out.println(j);\n                        array[cur++] = j;\n                    }\n                }\n                Arrays.sort(array, 0, N);\n                writer.write(\"Case #\" + (i+1) + \":\");\n                for (int j = 0; j < N; j++) {\n                    writer.write(\" \" + array[j]);\n                }\n                writer.write(\"\\n\");\n            }\n\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": "6650"}
{"func": "package googlejam6.p651;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.text.*;\r\nimport java.math.*;\r\nimport java.util.Arrays;\r\n\r\n\r\n     class a {\r\n    \r\n    \r\n    public static void main(String[] args) {\r\n\r\n    Scanner sc=new Scanner(System.in);\r\n     int tt=sc.nextInt();\r\n     \r\n    \r\n   int c;\r\n     for(int z=0;z<tt;z++)\r\n     {\r\n          int n=sc.nextInt();\r\n          \r\n        \r\n         int[] a=new int[2501];\r\n         for(int i=0;i<(2*n)-1;i++)\r\n         {\r\n             for(int j=0;j<n;j++)\r\n             {\r\n                 c=sc.nextInt();\r\n                 a[c]+=1;\r\n                \r\n                 \r\n                \r\n                 \r\n                 \r\n                 \r\n             }\r\n                \r\n         }\r\n           \r\n       \r\n         Arrays.sort(a);\r\n           System.out.print(\"Case #\" + (z+1) + \":\" +\" \" );\r\n          for(int i=0;i<2501;i++)\r\n          if(a[i]%2!=0){\r\n           System.out.print(a[i] + \" \");}\r\n           System.out.println();\r\n         }\r\n         \r\n         \r\n}}", "idx": "6651"}
{"func": "package googlejam6.p652;\nimport java.io.*;\nimport java.util.*;\npublic class fileanddrill\n{\tpublic static void main(String args[])\n\t{\n\t\tScanner s=new Scanner(System.in);\n\t\tint t=s.nextInt();\n\t\tint c=1;\n\t\t\n\t\twhile(t>0)\n\t\t{\n\t\t\tSystem.out.print(\"Case #\"+c+\": \");\n\t\t\tint n=s.nextInt();\n\t\t\tint [][]a=new int[2*n-1][n];\n\t\t\tint []r=new int[2501];\n\t\t\tfor (int i =0;i<2*n-1 ;i++ ) {\n\t\t\t\tfor (int j=0;j<n; j++) {\n\t\t\t\t\ta[i][j]=s.nextInt();\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (int i =0;i<2*n-1 ;i++ ) {\n\t\t\t\tfor (int j =0;j<n; j++) {\n\t\t\t\t\tr[a[i][j]]=r[a[i][j]]+1;\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i=0; i<2501;i++ ) {\n\t\t\t\tif(r[i]%2==1)\n\t\t\t\t\tSystem.out.print(i+\" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tt--;\n\t\t\tc++;\n\t\t}\n\t}\n}", "idx": "6652"}
{"func": "package googlejam6.p654;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\npublic class Prob1B {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"C:/Users/Harish/Downloads/B-large.in\"));\r\n\t\tString line = br.readLine();\r\n\t\tint count = 1;\r\n\t\tint t = Integer.parseInt(line);\r\n\t\twhile (t-- > 0) {\r\n\t\t\tline = br.readLine();\r\n\t\t\tint n = Integer.parseInt(line);\r\n\t\t\tint size = 2 * n - 1;\r\n\t\t\tArrayList<String> list = new ArrayList<String>();\r\n\t\t\tfor (int i = 0; i < size; i++) {\r\n\t\t\t\tline = br.readLine();\r\n\t\t\t\tString[] arr = line.split(\" \");\r\n\t\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\t\tlist.add(arr[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint l = list.size();\r\n\t\t\tArrayList<Integer> list2 = new ArrayList<Integer>();\r\n\t\t\twhile (!list.isEmpty()) {\r\n\t\t\t\tint val = Integer.parseInt(list.get(0));\r\n\t\t\t\tint idx1 = list.indexOf(\"\"+val);\r\n\t\t\t\tlist.remove(idx1);\r\n\t\t\t\tint idx2 = list.indexOf(\"\"+val);\r\n\t\t\t\tif (idx2 == -1) {\r\n\t\t\t\t\tlist2.add(val);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlist.remove(\"\"+val);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tList<Integer> sorted = list2.subList(0, list2.size());\r\n\t\t\tCollections.sort(sorted);\r\n\t\t\tSystem.out.print(\"Case #\"+(count++)+\": \");\r\n\t\t\tint s = sorted.size();\r\n\t\t\tfor(int i=0;i<s;i++){\r\n\t\t\t\tSystem.out.print(sorted.get(i)+\" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6654"}
{"func": "package googlejam6.p655;\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class codejama12 {\r\n\t\r\n\tpublic static void main(String ... nopushupsformesarge) throws Exception\r\n\t{\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tfloat T = input.nextFloat();\r\n\t\tfor (int n = 0; n < T; n++)\r\n\t\t{\r\n\t\t\tint N=input.nextInt();\r\n\t\t\tint[] inarr=new int[(2*N-1)*N];\r\n\t\t\tfor(int i=0;i<(2*N-1)*N;i++)\r\n\t\t\t{ //first val is for findin if all list been traverse\r\n\t\t\t\t\tinarr[i]=input.nextInt();\r\n\t\t\t}//input of 2*n-1 list\r\n\t\t\t\r\n\t\t\tfor(int j=1;j<(2*N-1)*N;j++)\r\n\t\t\t{\r\n\t\t\t\tint key = inarr[j];\r\n\t            int i = j-1;\r\n\t            while ( (i > -1) && ( inarr [i] > key ) ) \r\n\t            {\r\n\t                inarr [i+1] = inarr [i];\r\n\t                i--;\r\n\t            }\r\n\t           inarr[i+1] = key;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString str=\"\";\r\n\t\t\tfor(int j=0;j<(2*N-1)*N;)\r\n\t\t\t{\r\n\t\t\t\tint key=inarr[j];\r\n\t\t\t\tint count=0;\r\n\t\t\t\twhile(j<(2*N-1)*N)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(inarr[j]!=key)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tj=j+1;\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif(count%2!=0)\r\n\t\t\t\t{\r\n\t\t\t\t\tstr=str+\" \"+key;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+(n+1)+\":\"+str);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6655"}
{"func": "package googlejam6.p656;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Problems {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        Problems r = new Problems();\n\t\tScanner sc = null;\n\t\tPrintWriter pw = null;\n\t\ttry {\n\t\t\tsc = new Scanner(new File(\"B-large.in\"));\n\t\t\tpw = new PrintWriter(new File(\"output.txt\"));\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tint t = sc.nextInt();\n\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor (int i = 1; i <= t; i++) {\n\t\t\tint n = sc.nextInt();\n\t\t\tint soldier;\n\t\t\tfor (int j = 0; j < n*(2*n-1); j++) {\n\t\t\t\tsoldier = sc.nextInt();\n\t\t\t\tif(map.containsKey(soldier)) {\n\t\t\t\t\tmap.put(soldier, map.get(soldier) + 1);\n\t\t\t\t} else {\n\t\t\t\t\tmap.put(soldier, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSet<Integer> answer = new TreeSet<Integer>();\n\t\t\tIterator it = map.entrySet().iterator();\n\t\t    while (it.hasNext()) {\n\t\t        Map.Entry pair = (Map.Entry)it.next();\n\t\t        if ((int)pair.getValue() % 2 != 0) {\n\t\t        \tanswer.add((int)pair.getKey());\n\t\t        }\n\t\t        it.remove();\n\t\t    }\n\t\t    pw.print(\"Case #\" + i + \":\");\n\t\t    for(int sd : answer) {\n\t\t    \tpw.print(\" \" + sd);\n\t\t    }\n\t\t    pw.println();\n\t\t}\n\t\t\n\t\tpw.close();\r\n    }\r\n}", "idx": "6656"}
{"func": "package googlejam6.p657;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport com.sun.xml.internal.ws.policy.privateutil.PolicyUtils.Collections;\n\npublic class RankAndFile {\n\tprivate int mT = -1;\n\tprivate int[] mN;\n\tprivate String[][] mNData;\n\t\n\tpublic static void main(String[] args) {\n\t\tRankAndFile countingSheep = new RankAndFile();\n\t\ttry {\n\t\t\tBufferedReader br = new BufferedReader(new FileReader(\"./src/rankandfile.txt\"));\n\t\t\tcountingSheep.mT = Integer.parseInt(br.readLine());\n\t\t\t\n\t\t\tcountingSheep.mN = new int[countingSheep.mT];\n\t\t\tcountingSheep.mNData = new String[countingSheep.mT][];\n\t\t\tfor(int i=0; i<countingSheep.mT; i++) {\n\t\t\t\tcountingSheep.mN[i] = Integer.parseInt(br.readLine());\n\t\t\t\tcountingSheep.mNData[i] = new String[2*countingSheep.mN[i]-1];\n\t\t\t\tfor(int j=0; j < 2*countingSheep.mN[i]-1; j++) {\n\t\t\t\t\tcountingSheep.mNData[i][j] = br.readLine();\n\t\t\t\t}\n\t\t\t}\n\t\t\tbr.close();\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(\"Total testcases: \" + countingSheep.mT);\n\t\t\tfor(int i=0; i<countingSheep.mT; i++) {\n\t\t\t\tSystem.out.println(\"Testcase #\" + i + \": \" + countingSheep.mN[i]);\n\t\t\t\tfor(int j=0; j<2*countingSheep.mN[i]-1; j++) {\n\t\t\t\t\tSystem.out.println(countingSheep.mNData[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i=0; i<countingSheep.mT; i++) {\n\t\t\t\t\t\tint N = countingSheep.mN[i];\n\t\t\t\t\t\tHashMap<String, Integer> mCountTable = new HashMap<>();\n\t\t\t\t\t\tfor(int j=0; j<2*N-1; j++) {\n\t\t\t\t\t\t\tString[] numbers = countingSheep.mNData[i][j].split(\" \");\n\t\t\t\t\t\t\tfor(int k =0; k<numbers.length; k++) {\n\t\t\t\t\t\t\t\tif(mCountTable.containsKey(numbers[k])) {\n\t\t\t\t\t\t\t\t\tmCountTable.put(numbers[k], mCountTable.get(numbers[k])+1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmCountTable.put(numbers[k], 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tSet<String> keys = mCountTable.keySet();\n\t\t\t\t\t\tArrayList<Integer> mMiss = new ArrayList<>();\n\t\t\t\t\t\tfor(String key : keys) {\n\t\t\t//\t\t\t\tSystem.out.println(key + \":\" + mCountTable.get(key));\n\t\t\t\t\t\t\tif(mCountTable.get(key) % 2 != 0) {\n\t\t\t\t\t\t\t\tmMiss.add(Integer.parseInt(key));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tjava.util.Collections.sort(mMiss);\n\t\t\t//\t\t\tfor(int l=0; l<mMiss.size()  ; l++) {\n\t\t\t//\t\t\t\tSystem.out.println(mMiss.get(l));\n\t\t\t//\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tString str = \"\";\n\t\t\t\t\t\tfor(int l=0; l<mMiss.size() -1 ; l++) {\n\t\t\t\t\t\t\tstr += mMiss.get(l) + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstr += mMiss.get(mMiss.size() -1);\n\t\t\t\t\t\t\n\t\t\t\t\t\tString data = \"Case #\" + (i+1) + \": \" + str;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tPrintWriter\twriter = new PrintWriter(new BufferedWriter(new FileWriter(\"./src/rankandfile_out.txt\", true)));\n\t\t\t\t\t\t\twriter.println(data);\n\t\t\t\t\t\t\twriter.close();\n\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t} catch (NumberFormatException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "6657"}
{"func": "package googlejam6.p658;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\npublic class code2 {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t\tint t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\r\n\t\tfor (int i = 1; i <= t; ++i) {\r\n\t\t\tint j = in.nextInt();\r\n\t\t\tSystem.out.print(\"Case #\"+i+\": \");\r\n\t\t\tArrayList<Integer> list = new ArrayList();\r\n\t\t\tfor(int a = 0; a<j*(2*j-1); a++) {\r\n\t\t\t\tlist.add(in.nextInt());\r\n\t\t\t}\r\n\t\t\tCollections.sort(list);\r\n\t\t\tint tmp = 0;\r\n\t\t\tfor(int a = 0; a<list.size(); a++) {\r\n\t\t\t\tif(tmp != list.get(a)) {\r\n\t\t\t\t\tint count = Collections.frequency(list, list.get(a));\r\n\t\t\t\t\tif(count %2 != 0) {\r\n\t\t\t\t\t\tSystem.out.print(list.get(a)+\" \");\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttmp = list.get(a);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "6658"}
{"func": "package googlejam6.p661;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\n\npublic class g2 {\n\tpublic static void main(String[] args) {\n\t    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t    int t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\n\t    for (int i = 1; i <= t; ++i) {\n\t    \t\n\t      int n = in.nextInt();\n\t      //System.out.println(n);\n\t      \n\t      HashMap<Integer, Integer> map=new HashMap<>();\n\t      for(int j=0;j<2*n-1;j++){\n\t    \t  for(int k=0;k<n;k++){\n\t    \t\t  int temp=in.nextInt();\n\t    \t\t  if(!map.containsKey(temp)){\n\t    \t\t\t  map.put(temp, 1);\n\t    \t\t  }else{\n\t    \t\t\t  map.put(temp, map.get(temp)+1);\n\t    \t\t  }\n\t    \t  }\n\t      }\n\t      \n\t      PriorityQueue<Integer> q=new PriorityQueue<>();\n\t      for(Entry<Integer, Integer> s: map.entrySet()){\n\t    \t  if(s.getValue()%2==1){\n\t    \t\t  q.add(s.getKey());\n\t    \t  }\n\t      }\n\t      \n\t     \n\t      System.out.print(\"Case #\" + i + \": \" );  \n\t     \n\t      int temp;\n\t      for(temp=q.poll();!q.isEmpty();temp=q.poll()){\n\t    \t  System.out.print(temp+\" \");\n\t      }\n\t      System.out.print(temp+\"\\n\");\n\t      \n\t    }\n\t  }\n}\n", "idx": "6661"}
{"func": "package googlejam6.p662;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Scanner;\n\n/**\n * \n */\n\n/**\n * @author andrew\n *\n */\npublic class ProblemA {\n\tstatic final String PROBLEM = \"rankfile\";\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tScanner s = new Scanner(new File(PROBLEM+\".in\"));\n\t\tint n = s.nextInt();\n\t\ts.nextLine();\n\t\t\n\t\tFileWriter fw = new FileWriter(new File(PROBLEM+\".out\"));\n\t\tfor (int i=0; i<n; i++) {\n\t\t\tint size = s.nextInt();\n\t\t\tArrayList<ArrayList<Integer>> data = new ArrayList<ArrayList<Integer>>();\n\t\t\tfor (int j=0; j<size * 2 - 1; j++) {\n\t\t\t\tArrayList<Integer> thisSet = new ArrayList<Integer>();\n\t\t\t\tfor (int p=0; p<size; p++) {\n\t\t\t\t\tthisSet.add(s.nextInt());\n\t\t\t\t}\n\t\t\t\tdata.add(thisSet);\n\t\t\t}\n\t\t\t\n\t\t\tint[] distributions = new int[2501];\n\t\t\t\tfor (ArrayList<Integer> arr: data) {\n\t\t\t\t\tfor (int x: arr) {\n\t\t\t\t\t\tSystem.out.print(x+\" \");\n\t\t\t\t\t\tdistributions[x]++;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t}\n\t\t\tint[] odd = new int[size * size];\n\t\t\tint oddCount = 0;\n\t\t\tfor (int p=0; p<distributions.length; p++) {\n\t\t\t\tif (distributions[p] % 2 == 1) {\n\t\t\t\t\todd[oddCount++] = p;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int p=0; p<odd.length; p++) {\n\t\t\t\tif (odd[p] == 0) {\n\t\t\t\t\todd[p] = Integer.MAX_VALUE;\n\t\t\t\t}\n\t\t\t}\n\t\t\tArrays.sort(odd);\n\t\t\tString output = \"\";\n\t\t\tfor (int p=0; p<size; p++) {\n\t\t\t\toutput+= \" \"+odd[p];\n\t\t\t}\n\t\t\tfw.write(\"Case #\"+(i+1)+\":\"+output+\"\\n\");\n\t\t}\n\t\t\n\t\t\n\t\t//fw.write(\"\"+answer);\n\t\tfw.close();\n\t\ts.close();\n\t}\n\n}\n", "idx": "6662"}
{"func": "package googlejam6.p663;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\nclass abc\r\n{\r\n\r\n\r\n  public static void main(String[] args) {\r\n  Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n  int io=in.nextInt();\r\n  for(int pq=1;pq<=io;pq++)\r\n  {\r\n    int tot=in.nextInt();\r\n    int ar[][]=new int[(2*tot)-1][tot];\r\n    int odd[]=new int[tot];\r\n    int even[]=new int[tot*tot];\r\n    int evennum=0,oddnum=0;\r\n    // int row[][]=new int[tot][tot];\r\n    // int col[][]=new int[tot][tot];\r\n    // int final[][] = new int[tot][tot];\r\n    for(int p=0;p<(2*tot)-1;p++)\r\n    {\r\n      for(int q=0;q<tot;q++)\r\n        ar[p][q]=in.nextInt();\r\n    }\r\n    for(int p=0;p<(2*tot)-1;p++)\r\n    {\r\n      AB:for(int q=0;q<tot;q++)\r\n      {\r\n        for(int k=0;k<evennum;k++)\r\n        {\r\n          if(ar[p][q]==even[k]) continue AB;\r\n        }\r\n        for(int k=0;k<oddnum;k++)\r\n        {\r\n          if(ar[p][q]==odd[k]) continue AB;\r\n        }\r\n        int total=0;\r\n        for(int m=0;m<(2*tot)-1;m++)\r\n        {\r\n          for(int n=0;n<tot;n++)\r\n          {\r\n            if(ar[p][q]==ar[m][n])\r\n              total++;\r\n          }\r\n        }\r\n        if(total%2==0)\r\n          {\r\n            even[evennum]=ar[p][q];\r\n            evennum++;\r\n          }\r\n          else\r\n          {\r\n            odd[oddnum]=ar[p][q];\r\n            oddnum++;\r\n          }\r\n      }\r\n    }\r\n    Arrays.sort(odd);\r\n    System.out.print(\"Case #\"+pq+\": \");\r\n    for(int o=0;o<odd.length;o++)\r\n    {\r\n      System.out.print(odd[o]+\" \");\r\n    }\r\n    System.out.println();\r\n  }\r\n}\r\n}\r\n    // for(int l=0;l<ar.length;l++)\r\n    // {\r\n    //   int small=ar[l][0];\r\n    //   int pos=l;\r\n    //   for(int m=l+1;m<ar.length;m++)\r\n    //   {\r\n    //     if(ar[m][0]<small)\r\n    //     {\r\n    //       small=ar[m][0];\r\n    //       pos=m;\r\n    //     }\r\n    //   }\r\n    //   for(int o=0;o<tot;o++)\r\n    //   {\r\n    //     int temp=ar[l][o];\r\n    //     ar[l][o]= ar[pos][o];\r\n    //     ar[pos][o]=temp;\r\n    //   }\r\n    // }\r\n    // }\r\n    //   int c=0,r=0;\r\n    //   for(int o=0;o<(2*tot-1);o++)\r\n    //   {\r\n    //       if(r==0)\r\n    //       {\r\n    //         for(int ro=0;ro<tot;ro++)\r\n    //           final[0][ro]=ar[o][ro];\r\n    //         r++;\r\n    //       }\r\n    //       else\r\n    //       {\r\n    //         for(int ro=0;ro<tot;ro++)\r\n    //         {\r\n    //           if(ar[o][0]==final[0][co])\r\n    //           {\r\n    //\r\n    //           }\r\n    //         }\r\n    //       }\r\n      //   if(c==0)\r\n      //   {\r\n      //     for(int ro=0;ro<tot;ro++)\r\n      //       row[0][ro]=ar[o][ro];\r\n      //     c++;\r\n      //   }\r\n      //   else\r\n      //   {\r\n      //     boolean n=false;\r\n      //     int m;\r\n      //     for(m=0;m<tot;m++)\r\n      //     {\r\n      //       if(ar[o][m]<=row[c-1][m])\r\n      //         n=true;\r\n      //     }\r\n      //     if(n==false)\r\n      //     {\r\n      //       for(m=0;m<tot;m++)\r\n      //       {\r\n      //         row[c][m]=ar[o][m];\r\n      //       }\r\n      //       c++;\r\n      //     }\r\n      //     else\r\n      //     {\r\n      //       for(m=0;m<tot;m++)\r\n      //       {\r\n      //         col[r][m]=ar[o][m];\r\n      //       }\r\n      //       r++;\r\n      //     }\r\n      //   }\r\n      // }\r\n      // if(c==tot)\r\n      // {\r\n      //   for(int y=0;y<tot;y++)\r\n      //   {\r\n      //     if(row[y][0]!=col[y][0])\r\n      //     {System.out.println(Arrays.deepToString(row));\r\n      //       System.out.println(Arrays.deepToString(col));\r\n      //       System.out.print(\"Case #\"+pq+\": \");\r\n      //       for(int u=0;u<tot;u++)\r\n      //       {\r\n      //         System.out.print(row[u][y]+\" \");\r\n      //       }\r\n      //       System.out.println();\r\n      //       break;\r\n      //     }\r\n      //   }\r\n      // }\r\n      // else\r\n      // {\r\n      //   for(int y=0;y<tot;y++)\r\n      //   {\r\n      //     if(row[y][0]!=col[y][0])\r\n      //     {System.out.println(Arrays.deepToString(row));\r\n      //       System.out.println(Arrays.deepToString(col));\r\n      //       System.out.print(\"Case #\"+pq+\": \");\r\n      //       for(int u=0;u<tot;u++)\r\n      //       {\r\n      //         System.out.print(col[u][y]+\" \");\r\n      //       }\r\n      //       System.out.println();\r\n      //       break;\r\n      //     }\r\n      //   }\r\n", "idx": "6663"}
{"func": "package googlejam6.p665;\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\npublic class Main {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tFileInputStream fis = null;\r\n\t\tfis = new FileInputStream(\"B-large.in\");\r\n\t\tPrintStream ps = new PrintStream(new FileOutputStream(\"B-large.out\"));\r\n\t\tSystem.setIn(fis);\r\n\t\tSystem.setOut(ps);\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tPrintStream out = System.out;\r\n\t\tint t = input.nextInt();\r\n\t\t// test\r\n\t\t\r\n\t\tfor (int i = 1; i <= t; i++){\r\n\t\t\tint n = input.nextInt();\r\n\t\t\tint[] height = new int[2501];\r\n\t\t\tint number = (2 * n - 1) * n;\r\n\t\t\tfor (int j = 0; j < number; j++) {\r\n\t\t\t\tint h = input.nextInt();\r\n\t\t\t\theight[h]++;\r\n\t\t\t}\r\n\t\t\tout.format(\"Case #%d:\", i);\r\n\t\t\t// \u8f93\u51fa\u683c\u5f0f\u63a7\u5236\r\n\t\t\t\r\n\t\t\tfor (int h = 1; h < height.length; h++) {\r\n\t\t\t\tif (height[h] % 2 == 1) out.format(\" %d\", h);\r\n\t\t\t}\r\n\t\t\tout.println();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6665"}
{"func": "package googlejam6.p666;\n\n\nimport java.io.*;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/**\n * Created by aneezjoseph on 16/04/16.\n */\npublic class RankAndFile {\n    public static void main(String a[]) throws IOException {\n        Scanner scanner = new Scanner(System.in);\n        File file = new File(\"RankAndFile.txt\");\n        FileOutputStream fileOutputStream = new FileOutputStream(file);\n        BufferedWriter bufferedWriter  = new BufferedWriter(new OutputStreamWriter(fileOutputStream));\n        int n = Integer.parseInt(scanner.nextLine());\n        int x=1;\n        while(n-->0) {\n            Map<String,Integer> map = new HashMap<>();\n            int arrLength=Integer.parseInt(scanner.nextLine());\n            int noOfLines = arrLength*2;\n            noOfLines--;\n            while(noOfLines-->0) {\n                String line = scanner.nextLine();\n                String str[] = line.split(\" \");\n                for (String s : str) {\n                    Integer count = map.get(s);\n                    if (count == null)\n                        count = 0;\n                    map.put(s, ++count);\n                }\n            }\n            int []arr=new int[arrLength];\n            int index=0;\n            for (Map.Entry<String, Integer> entry : map.entrySet())\n            {\n                if(entry.getValue()%2!=0)\n                    arr[index++]=Integer.valueOf(entry.getKey());\n                if(index==arrLength)\n                    break;\n\n            }\n            Arrays.sort(arr);\n            String temp=\"\";\n            for(int i:arr)\n                temp+=i+\" \";\n            bufferedWriter.write(\"Case #\" + x++ + \": \" +temp+\"\\n\");\n        }\n        bufferedWriter.flush();\n        bufferedWriter.close();\n        }\n}\n", "idx": "6666"}
{"func": "package googlejam6.p671;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.concurrent.CountDownLatch;\n\nimport javax.sql.rowset.CachedRowSet;\n\npublic class RankAndFile {\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException\n\n\t{\n\t\t\n\t      BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(\"input1.txt\")));\n\n\t      int test_num = Integer.parseInt(reader.readLine());\n\t      System.out.println(test_num);\n\t      BufferedWriter out = new BufferedWriter(new FileWriter(\"output.txt\"));\n\t     // out.write(\"Case #\" + test_num + \":\" + \"\\n\");\n\t      \n\t      for(int i = 1; i <= test_num; i++)\n\n\t      {\t  \n\t    \t  String input = reader.readLine();\n\t    \t  int n = Integer.parseInt(input);\n\t    \t // int[][] res = new int[n][n];\n\t    \t  HashMap<Integer, Integer> numcount = new HashMap<Integer, Integer>();\n\t    \t  int kk = 0;\n\t    \t  while( kk < 2*n - 1){\n\t    \t\t  \n\t    \t\t  String curline = reader.readLine();\n\t    \t\t  String[] current =  curline.split(\"\\\\s+\");\n\t    \t\t  \n\t    \t\t\n\t    \t\t  for(int j = 0; j < n; j++){\n\t    \t\t\t  \n\t    \t\t\t  if(!numcount.containsKey(Integer.parseInt(current[j]))){\n\t    \t\t\t\n\t    \t\t\t\t  numcount.put(Integer.parseInt(current[j]), 1);\n\t    \t\t\t  }else{\n\t    \t\t\t\t  numcount.remove(Integer.parseInt(current[j]));\n\t    \t\t\t  }\n\t    \t\t  }\n\t    \t\t  kk = kk + 1;\n\t    \t\t  \n\t    \t  }\n\t    \t  \n\t\t    \t  Set<Integer> keyset = numcount.keySet();\n\t\t    \t  ArrayList<Integer> res = new ArrayList<>();\n\t\t    \t  res.addAll(keyset);\n\t\t    \t  //String res = keyset.toString();\n\t\t   \t  \n\t\t    \t  Collections.sort(res);\n\t\t    \t \n\t\t    \t  out.write(\"Case #\" + String.valueOf(i) + \": \");\n\t\t    \t  for(int m = 0; m < res.size();m++)\n\t\t    \t  {\n\t\t    \t\t  out.write(res.get(m).toString());\n\t\t    \t\t  if(m != res.size() - 1)\n\t\t    \t\t      out.write(\" \");\n\t\t    \t  }\n\t\t    \t  out.write(\"\\n\");\n\t\t     \t  //System.out.println(res.toString());\n\t    \t  }\n\n\t      reader.close();\n\n\t      out.close();\n\t}\n}\n\n\n", "idx": "6671"}
{"func": "package googlejam6.p672;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class Round1B {\n\n\tpublic static void main(String[] args) throws IOException {\n\n\t\t// TODO try Files java 7\n\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(new File(\"output\")));\n\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint T = scanner.nextInt();\n\n\t\tfor (int t = 0; t < T; t++) {\n\t\t\tint N = scanner.nextInt();\n\n\t\t\tint[][] array = new int[2*N-1][N];\n\n\t\t\tfor (int i=0; i<2*N-1; i++) {\n\t\t\t\tfor (int j=0; j<N; j++) {\n\t\t\t\t\tarray[i][j] = scanner.nextInt();\n\t\t\t\t}\n\t\t\t}\n\t\t\tList<Integer> output = new ArrayList<>();\n\t\t\tString resultString1 = \"\";\n\t\t\tint[] heights = new int[2501];\n\t\t\t\n\t\t\tfor (int i=0; i<2*N-1; i++) {\n\t\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\t\theights[array[i][j]]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i=0; i<heights.length; i++) {\n\t\t\t\tif (heights[i] % 2 == 1) {\n\t\t\t\t\toutput.add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(output);\n\t\t\tfor (int value : output) {\n\t\t\t\tresultString1 += String.valueOf(value) + \" \";\n\t\t\t}\n\t\t\tString resultString = resultString1;\n\n\t\t\twriter.write(\"Case #\" + (t + 1) + \": \" + resultString + \"\\n\");\n\t\t}\n\t\twriter.close();\n\n\t\t//test\n\t\t/*for (int n=0; n<=1000000; n++) {\n\t\t\tcompute(n);\n\t\t}*/\n\t}\n\n}", "idx": "6672"}
{"func": "package googlejam6.p674;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class RankFile {\r\n\tpublic static void main(String args[]) throws NumberFormatException, IOException {\r\n\t\tBufferedReader bufferReader = new BufferedReader(new FileReader(\"C:\\\\Users\\\\anaka\\\\Desktop\\\\trial.in\"));\r\n\t\tint noOfTestCases = Integer.parseInt(bufferReader.readLine());\r\n\t\tList resultList = new ArrayList();\r\n\t\tfor (int count = 0; count < noOfTestCases; count++) {\r\n\t\t\tint number =  Integer.parseInt(bufferReader.readLine());\r\n\t\t\tint[] heights = new int[2501];\r\n\t\t\tfor(int i=1; i<=2*number-1; i++){\r\n\t\t\t\tString line = bufferReader.readLine();\r\n\t\t\t\tString[] splitLine = line.split(\"\\\\s+\");\r\n\t\t\t\tfor(int j=0; j<splitLine.length; j++){\r\n\t\t\t\t\tint parsedInt = Integer.parseInt(splitLine[j]);\r\n\t\t\t\t\tif(heights[parsedInt] == 0){\r\n\t\t\t\t\t\theights[parsedInt] = 1;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\theights[parsedInt] = heights[parsedInt] + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresultList.add(heights);\r\n\t\t}\r\n\t\tbufferReader.close();\r\n\t\tFile file = new File(\"C:\\\\Users\\\\anaka\\\\Desktop\\\\output.txt\");\n\t\tif (!file.exists()) {\n\t\t\tfile.createNewFile();\n\t\t}\n\t\tFileWriter fileWriter = new FileWriter(file.getAbsoluteFile());\n\t\tBufferedWriter bufferedWriter = new BufferedWriter(fileWriter);\n\t\tfor (int count = 0; count < resultList.size(); count++) {\n\t\t\tint testCaseNumber = count + 1;\n\t\t\tbufferedWriter.write(\"Case #\" + testCaseNumber + \": \");\n\t\t\tint[] result = (int[]) resultList.get(count);\n\t\t\tfor(int i=0; i<result.length; i++){\n\t\t\t\tif (result[i] % 2 != 0) {\n\t\t\t\t\tbufferedWriter.write(i + \" \");\n\t\t\t    }\n\t\t\t}\n\t\t\tbufferedWriter.write(System.lineSeparator());\n\t\t}\n\t\tbufferedWriter.close();\r\n\t}\r\n\r\n}\r\n", "idx": "6674"}
{"func": "package googlejam6.p676;\nimport java.util.*;\n\npublic class Main{\n  \n  public static void main(String[]args){\n    \n    Scanner in = new Scanner(System.in);\n    int T = in.nextInt();\n    \n    for(int zz = 1; zz <= T; zz++){\n      int N = in.nextInt();\n      \n      int[] soldiers = new int[N*(2*N-1)];\n      \n      for(int i = 0; i < N*(2*N-1); i++){\n        soldiers[i] = in.nextInt();\n      }\n      \n      Arrays.sort(soldiers);\n\tint[] found = new int[N];\n\tint foundIndex = 0;\n\t\n\tint currentNum = soldiers[0];\n\tint numSum = 1;\n\t\n\tfor(int i1 = 1, len = soldiers.length; i1 < len; i1++){\n\t  int currentCheck = soldiers[i1];\n\t  if(currentNum == currentCheck){\n\t    numSum++;\n\t  }else{\n\t    if(numSum % 2 == 1){\n\t      found[foundIndex] = currentNum;\n\t      foundIndex++;\n\t    }\n\t    numSum = 1;\n\t    currentNum = currentCheck;\n\t  }\n\t}\n\t\n\tif(numSum % 2 == 1){\n\t      found[foundIndex] = currentNum;\n\t    }\n      \n      int[] answer = found;\n      \n      System.out.printf(\"Case #%d: \", zz);\n      \n      for(int i = 0; i < N; i++){\n        System.out.printf(\"%d \", answer[i]);\n      }\n      System.out.println();\n    }\n    \n  }\n}\n", "idx": "6676"}
{"func": "package googlejam6.p677;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class main {\n\tpublic static void main(String[] args) throws IOException{\n\t\tBufferedReader bf = new BufferedReader(new FileReader(\"/Users/yonggoo/Desktop/B-large.in\"));\n\t\tFileWriter fw = new FileWriter(\"/Users/yonggoo/Desktop/1a_2_l.txt\", true);\n\t\tint T = Integer.parseInt(bf.readLine());\n\t\tfor(int i = 1; i <= T; i++){\n\t\t\tint N = Integer.parseInt(bf.readLine());\n\t\t\tList<Integer> result = new ArrayList<Integer>();\n\t\t\tfor(int k = 1; k <= 2*N-1; k++)\n\t\t\t\tfor(String val : bf.readLine().split(\" \"))\n\t\t\t\t\tresult.add(Integer.parseInt(val));\n\n\t\t\tSet<Integer> unqResult = new HashSet<Integer>(result);\n\t\t\tString result_str = \"\";\n\t\t\tfor(Integer v : unqResult)\n\t\t\t\tif(Collections.frequency(result, v)%2 == 1)\n\t\t\t\t\tresult_str += \" \" + v;\n\n\t\t\tresult_str = result_str.substring(1);\n\t\t\tString[] temp = result_str.split(\" \");\n\t\t\tint[] real = new int[temp.length];\n\t\t\tfor(int iii = 0; iii < temp.length; iii++)\n\t\t\t\treal[iii] = Integer.parseInt(temp[iii]);\n\t\t\t\t\n\t\t\tArrays.sort(real);\n\t\t\tString result_go = \"\";\n\t\t\tfor(int val : real){\n\t\t\t\tresult_go += \" \" + val;\n\t\t\t}\n\t\t\tfw.write(\"Case #\" + i + \":\");\n\t\t\tfw.write(result_go);\n\t\t\tfw.write(\"\\n\");\n\t\t}\n\t\tfw.flush();\n\t}\n}\n", "idx": "6677"}
{"func": "package googlejam6.p678;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\n//***********************************\n//\n// Bill Toth's RankAndFile\n// for Google Code Jam 2016\n// problem 1B\n//\n//***********************************\n\npublic class RankAndFileTester {\n\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tFile inputFile = new File(args[0]);//take in file\n\t\tRankAndFile t = new RankAndFile(inputFile);//parse it\n\t\tfor (int i=0; i < t.caseArray.length; i++){\n\t\t\tSystem.out.println(\"Case #\" + (i+1) + \": \" + \n\t\t\t\t\tt.caseArray[i].evaluateCase());\n\t\t}//evaluate it\n\t}\n\n}\n", "idx": "6678"}
{"func": "package googlejam6.p679;\n\r\n\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        Scanner sc = new Scanner(new FileReader(\"B-large (2).in\"));\r\n        PrintWriter pw=new PrintWriter(\"B-large.out\" );\r\n        String output = null;\r\n        int t = sc.nextInt();\r\n\r\n        for (int i = 0; i < t; i++) {\r\n            int n = sc.nextInt();\r\n            sc.nextLine();\r\n            int arr[][]=new int[2*n-1][n];\r\n            for (int j = 0; j < arr.length; j++) {\r\n                String line=sc.nextLine();\r\n                int numArr[] = Arrays.stream(line.split(\" \")).mapToInt(Integer::parseInt).toArray();//\u041c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u0435\u043b JAVA 8\r\n                arr[j]=numArr;\r\n//                System.out.println(Arrays.toString(numArr));\r\n            }\n\t\t\tString output1=\"\";\n\t\t\t        int n1=arr[0].length;\n\t\t\t        int result[]=new int[n1];\n\t\t\t        Map<Integer,Integer> m=new HashMap<Integer,Integer>();\n\t\t\t        for (int i2 = 0; i2 < arr.length; i2++) {\n\t\t\t            for (int j = 0; j < n1; j++) {\n\t\t\t                if(m.containsKey(arr[i2][j])){\n\t\t\t                    m.put(arr[i2][j],new Integer(m.get(arr[i2][j])+1));\n\t\t\t                }else{\n\t\t\t                    m.put(arr[i2][j],new Integer(1));\n\t\t\t                }\n\t\t\t            }\n\t\t\t        }\n\t\t\t\n\t\t\t//        System.out.println(m);\n\t\t\t        int resultN=0;\n\t\t\t        for (Integer key : m.keySet()) {\n\t\t\t            if(m.get(key)%2==1){\n\t\t\t                result[resultN]=key;\n\t\t\t                resultN++;\n\t\t\t            }\n\t\t\t        }\n\t\t\t        Arrays.sort(result);\n\t\t\t//        System.out.println(Arrays.toString(result));\n\t\t\t        for (int i1 = 0; i1 < result.length; i1++) {\n\t\t\t            output1+=\" \"+result[i1];\n\t\t\t        }\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t        output1 = \"Case #\" + (i+1) + \": \"+output1;\r\n\r\n\r\n            output=output1;\r\n            pw.print(output+\"\\n\");\r\n        }\r\n\r\n        pw.flush();\r\n        pw.close();\r\n        sc.close();\r\n\r\n\r\n    }\r\n}\r\n", "idx": "6679"}
{"func": "package googlejam6.p681;\nimport java.util.*;\r\n\r\npublic class B {\r\n    final Scanner sc = new Scanner(System.in);\r\n\r\n    Integer n;\r\n    HashMap<Integer,Integer> counter;\r\n    \r\n    public static void main (String[] args) {\r\n        B r = new B();\n\t\tfinal int cn = r.sc.nextInt();\n\t\tr.sc.nextLine();\n\t\tfor (int ci = 1; ci <= cn; ci++) {\n\t\t    r.counter = new HashMap<Integer,Integer>();\n\t\t\tr.n = Integer.parseInt(r.sc.nextLine());\n\t\t\tint length = 2*r.n-1;\n\t\t\tfor(int i = 0; i < length; i++){\n\t\t\t    String[] nums = r.sc.nextLine().split(\" \");\n\t\t\t    for(String num: nums){\n\t\t\t        int ni = Integer.parseInt(num);\n\t\t\t        if(r.counter.containsKey(ni)) {\n\t\t\t            r.counter.put(ni, r.counter.get(ni)+1);\n\t\t\t        } else {\n\t\t\t            r.counter.put(ni, 1);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t    System.out.printf(\"Case #%d: \", ci);\n\t\t    ArrayList<Integer> result = new ArrayList<Integer>();\n\t\t\tfor(Map.Entry<Integer,Integer> entry: r.counter.entrySet()){\n\t\t\t    if(entry.getValue() % 2 == 1){\n\t\t\t        result.add(entry.getKey());\n\t\t\t    }\n\t\t\t}\n\t\t\tCollections.sort(result);\n\t\t\tfor(int i = 0; i < result.size(); i++){\n\t\t\t    if(i !=0 ){\n\t\t\t        System.out.print(\" \");\n\t\t\t    }\n\t\t\t    System.out.print(result.get(i));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\r\n    }\r\n}\r\n", "idx": "6681"}
{"func": "package googlejam6.p683;\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.lang.*;\r\n/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n\r\n/**\r\n *\r\n * @author Admin\r\n */\r\npublic class Rank{\r\n\r\n    /**\r\n     * @param args the command line arguments\r\n     */\r\n    public static void main(String[] args) {\r\n        // TODO code application logic here\r\n        Scanner s=new Scanner(System.in);\r\n        int t=s.nextInt();\r\n        for(int f=1;f<=t;f++)\r\n        {\r\n            int n=s.nextInt();\r\n            //int[] arr=new int[(2*n-1)*3];\r\n            int[] arr1=new int[2501];\r\n            \r\n            int len=(2*n-1)*n;\r\n            for(int i=0;i<len;i++)\r\n            {             \r\n                arr1[s.nextInt()]++;\r\n            }\r\n            System.out.print(\"Case #\"+f+\": \");\r\n            for(int i=0;i<2501;i++)\r\n            {\r\n                if(arr1[i]%2!=0)\r\n                    System.out.print(i+\" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n        \r\n    }\r\n    \r\n}\r\n", "idx": "6683"}
{"func": "package googlejam6.p684;\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class R1A_2_1 {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner scanner = new Scanner(new File(\"D:/ForPrograms/java/TESTS/B-large.in\"));\r\n\t\tFileWriter writer = new FileWriter(\"D:/ForPrograms/java/TESTS/B-large.out\", false);\r\n\t\t\r\n\t\tint cases = scanner.nextInt();\r\n\t\t\r\n\t\t\r\n\t\r\n\t\t\r\n\t\tfor(int i=0;i<cases;i++){\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tint cell = scanner.nextInt();\r\n\t\t\t\r\n\t\t\tint[][] arr = new int[cell*2-1][cell];\r\n\t\t\tint[][] arrD = new int[cell*2-1][cell];\r\n\t\t\t\r\n\t\t\tint[] par = new int[cell];\r\n\t\t\tint parC = 0;\r\n\t\t\t\r\n\t\t\tint wrongC = 0;\r\n\t\t\t\r\n\t\t\tfor(int v=0;v<cell;v++){\r\n\t\t\t\tpar[v] = 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint[][] cols = new int[cell][cell];\r\n\t\t\tint[][] rows = new int[cell][cell];\r\n\t\t\t\r\n\t\t\tint[] allNums = new int[2600];\r\n\t\t\t\r\n\t\t\tfor(int g=0;g<cell*cell;g++){\r\n\t\t\t\tallNums[g] = 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int g=0;g<cell*2-1;g++){\r\n\t\t\t\t\r\n\t\t\t\tfor(int j=0;j<cell;j++){\r\n\t\t\t\t\tarr[g][j] = scanner.nextInt();\r\n\t\t\t\t\tarrD[g][j] = 1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tallNums[arr[g][j]]++;\r\n\t\t\t\t\t//scanner.next();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tfor(int g=0;g<cell*2-1;g++){\r\n\t\t\t\t\r\n\t\t\t\tfor(int j=0;j<cell*2-1;j++){\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(arr[g][0] < arr[j][0]){\r\n\t\t\t\t\t\tint[] temp = new int[cell];\r\n\t\t\t\t\t\ttemp = arr[g];\r\n\t\t\t\t\t\tarr[g] = arr[j];\r\n\t\t\t\t\t\tarr[j] = temp;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//scanner.next();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t\r\n\t\t\tint[] needed  = new int[cell];\r\n\t\t\tint nC = 0;\r\n\t\t\t\r\n\t\t\tfor(int v=0;v<allNums.length;v++){\r\n\t\t\t\tif(allNums[v] != 0 && allNums[v] % 2 == 1){\r\n\t\t\t\t\tneeded[nC] = v;\r\n\t\t\t\t\tnC++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tArrays.sort(needed);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tSystem.out.println(Arrays.toString(needed));\r\n\t\t\t\r\n\t\t\t\r\n\t\t\twriter.write(\"Case #\"+(i+1)+\": \");\r\n\t\t\t\r\n\t\t\tfor(int v=0;v<cell;v++){\r\n\t\t\t\twriter.write(needed[v]+\" \");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\twriter.append('\\r');\r\n\t\t\twriter.append('\\n');\r\n\t\t\t\r\n\t\t} \r\n\t\t\r\n\t\t\r\n\t\tscanner.close();\r\n\t\twriter.close();\r\n\t}\r\n}\r\n", "idx": "6684"}
{"func": "package googlejam6.p685;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\n\r\npublic class RankAndFile\r\n{\r\n\tprivate static final String PROBLEM_NAME = RankAndFile.class.getSimpleName();\r\n\tprivate static final String WORK_DIR = \"/Development/Projects/GCJ/16-1A/\" + PROBLEM_NAME + \"/\";\r\n//\tprivate static final String INPUT_PATH = WORK_DIR + \"sample.in\";\r\n//\tprivate static final String INPUT_PATH = WORK_DIR + \"B-small-attempt2.in\";\r\n\tprivate static final String INPUT_PATH = WORK_DIR + \"B-large.in\";\r\n//\tprivate static final String INPUT_PATH = WORK_DIR + \"debug.in\";\r\n\tprivate static final String OUTPUT_PATH = INPUT_PATH.replace(\".in\", \".out\");\r\n\t\r\n\tpublic static void main(String[] args) throws Exception\r\n\t{\r\n\t\tSystem.out.println(\"Solving \" + PROBLEM_NAME + \"...\");\r\n\t\tSystem.out.println(\"Input: \" + INPUT_PATH);\r\n\t\tSystem.out.println(\"Output: \" + OUTPUT_PATH);\r\n\t\t\r\n\t\tPrintWriter out = new PrintWriter(OUTPUT_PATH, \"US-ASCII\");\r\n\t\tScanner in = new Scanner(new File(INPUT_PATH), \"US-ASCII\");\r\n\t\tin.useLocale(Locale.US);\r\n\t\t\r\n\t\tint testCasesNumber = in.nextInt();\r\n\t\tin.nextLine();\r\n\t\tSystem.out.println(\"Test cases: \" + testCasesNumber);\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tfor (int testCase = 1; testCase <= testCasesNumber; testCase++)\r\n\t\t\t{\r\n\t\t\t\tSystem.out.println(\"Solving test case: \" + testCase + \"...\");\r\n\t\t\t\tout.print(\"Case #\" + testCase + \": \");\n\t\t\t\tRankAndFile r = new RankAndFile();\r\n\t\t\t\tint N = in.nextInt();\n\t\t\t\tMap<Integer, Integer> M = new HashMap<>((2 * N - 1) * N);\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < 2 * N - 1; i++)\n\t\t\t\t{\n\t\t\t\t\tfor (int j = 0; j < N; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tint h = in.nextInt();\n\t\t\t\t\t\tif (M.containsKey(h))\n\t\t\t\t\t\t\tM.put(h, M.get(h) + 1);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tM.put(h, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tArrayList<Integer> result = new ArrayList<>();\n\t\t\t\t\n\t\t\t\tfor (Map.Entry<Integer, Integer> entry : M.entrySet())\n\t\t\t\t{\n\t\t\t\t\tif (entry.getValue() % 2 != 0)\n\t\t\t\t\t\tresult.add(entry.getKey());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tCollections.sort(result);\n\t\t\t\t\n\t\t\t\tfor (Integer i : result)\n\t\t\t\t{\n\t\t\t\t\tout.print(i + \" \");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tout.println();\r\n\t\t\t\tout.flush();\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tin.close();\r\n\t\t\tout.close();\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(\"All test cases solved!\");\r\n\t}\r\n}\r\n", "idx": "6685"}
{"func": "package googlejam6.p686;\n\nimport java.io.*;\nimport java.util.*;\nclass Main{\n\n\tpublic static void main(String[] args)throws IOException{\n\t\tBufferedReader sc = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n, lim = Integer.parseInt(sc.readLine()), a, b, c;\n\t\tString cad;\n\t\tint [] array;\n\t\tArrayList<Integer> lista = new ArrayList<Integer>();\n\t\tStringTokenizer st;\n\t\tfor (int i = 1; i <= lim; i++) {\n\t\t\tn = Integer.parseInt(sc.readLine());\n\t\t\tarray = new int[2501];\n\t\t\tfor (int filas = 0; filas < 2*n-1; filas++) {\n\t\t\t\tcad = sc.readLine();\n\t\t\t\tst = new StringTokenizer(cad);\n\t\t\t\tfor (int datos = 0; datos < n; datos++) {\n\t\t\t\t\tarray[Integer.parseInt(st.nextToken())]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int r = 1; r < 2501; r++) {\n\t\t\t\tif (array[r] % 2 != 0) {\n\t\t\t\t\tlista.add(r);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.print(\"Case #\"+i+\":\");\n\t\t\tfor (Integer t: lista) {\n\t\t\t\tSystem.out.print(\" \"+t);\n\t\t\t}\n\t\t\tSystem.out.println(\"\");\n\t\t\tlista.clear();\n\t\t}\t\t\n\t}\n\t\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n\t\tdouble a, b, p;\n\t\tfinal double pi = 3.1415926535; \n\t\tIntervalo intervalo = new Intervalo(2.0, 3.0);\n\t\tFuncion funcion = new Funcion();\n\t\t\n\t\t// Biseccion\n\t\t/*\n\t\tBiseccion biseccion = new Biseccion(intervalo, 0.0001, funcion);\t\n\t\tbiseccion.ejecutar_Algoritmo();\t\n\t\tSystem.out.println(biseccion.getRespuesta());\n\t\t*/\n\n\t\t// Punto Fijo\n\t\t/*\n\t\tPuntoFijo algoritmo_PuntoFijo = new PuntoFijo(0.000000001, 1.5, 4, funcion);\n\t\talgoritmo_PuntoFijo.ejecutar_Algoritmo();\n\t\tSystem.out.println(algoritmo_PuntoFijo.getRespuesta());\n\t\t\n\n\t\tMetodoNewton algoritmo_MetodoNewton = new MetodoNewton(0.0001, 1, 10, funcion);\n\t\talgoritmo_MetodoNewton.ejecutar_Algoritmo();\n\t\tSystem.out.println(algoritmo_MetodoNewton.getRespuesta());\n\n*/", "idx": "6686"}
{"func": "package googlejam6.p694;\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.math.*;\n\npublic class Main {\n\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int T = sc.nextInt();\n    for(int test=1;test<=T;test++) {\n      int N = sc.nextInt();\n      int rows = 2*N-1;\n      int arr[][]=new int[rows][N];\n      for(int i=0;i<rows;i++) {\n        for(int j=0;j<N;j++) {\n          arr[i][j]=sc.nextInt();\n        }\n      }\n      for(int bm=0;bm<(1<<rows);bm++) {\n        if (Integer.bitCount(bm)!=N)\n          continue;\n        int Test[][]=new int[N][N];\n        int r=0;\n        for(int j=0;j<rows;j++) {\n          if ((bm&(1<<j))>0) {\n            for(int c=0;c<N;c++) {\n              Test[r][c]=arr[j][c];\n            }\n            r++;\n          }\n        }\n        /*System.out.println(\"===Before sort===\");\n        for(int i=0;i<N;i++) {\n          for(int j=0;j<N;j++) {\n            System.out.print(Test[i][j]+\" \");\n          }\n          System.out.println();\n        }*/\n        boolean continu=false;\n        for(int i=0;i<N;i++) {\n          for(int j=i+1;j<N;j++) {\n            for(int k=0;k<N;k++) {\n              if (Test[i][k]==Test[j][k]) {\n                continu=true;\n              }\n            }\n          }\n        }\n        if(continu)continue;\n        int cond = 0;\n        for(int i=0;i<N;i++) {\n          cond = 0;\n          for(int j=i+1;j<N;j++) {\n            for(int k=0;k<N;k++) {\n              if (Test[i][k]>Test[j][k]) {\n                for(int k1=0;k1<N;k1++) {\n                  int tmp=Test[i][k1];\n                  Test[i][k1]=Test[j][k1];\n                  Test[j][k1]=tmp;\n                }\n              }\n            }\n          }\n\n\n        }\n\n        /*System.out.println(\"===After sort===\");\n        for(int i=0;i<N;i++) {\n          for(int j=0;j<N;j++) {\n            System.out.print(Test[i][j]+\" \");\n          }\n          System.out.println();\n        }*/\n        boolean columns[]=new boolean[N];\n        int checkings=0;\n        for(int j=0;j<rows;j++) {\n          if ((bm&(1<<j))==0) {\n            for(int c=0;c<N;c++) {\n              int temp=0;\n              for(r=0;r<N;r++) {\n                if (Test[r][c]!=arr[j][r]) {\n                  break;\n                } else {\n                  temp++;\n                }\n              }\n              if (temp==N) {\n                if (!columns[c]){\n                  columns[c]=true;\n                  checkings++;\n                }\n              }\n            }\n          }\n        }\n        if (checkings!=(N-1)) {\n          continue;\n        }\n        boolean found=false;\n        for(int i=0;i<N;i++) {\n          if (!columns[i]) {\n            System.out.print(\"Case #\"+test+\": \");\n            for(int j=0;j<N;j++) {\n              // System.out.println(\"answer\");\n              System.out.print(Test[j][i]+\" \");\n            }\n            System.out.println();\n            found=true;\n          }\n        }\n        if(found) break;\n      }\n    }\n  }\n}\n", "idx": "6694"}
{"func": "package googlejam6.p698;\nimport java.util.*;\nimport java.io.*;\nimport java.math.BigInteger;\n\npublic class B {\n    \n    public static void main(String[] args) throws FileNotFoundException {\n\ttry (Scanner sc =\n\t     new Scanner(new BufferedReader(new FileReader(new File(args[0]))))\n\t     ) {\n\t\tint iterations = sc.nextInt();\n\t\tfor (int i = 0; i < iterations; i++) {\n\t\t    int N = sc.nextInt();\n\t\t    Map<Integer, Integer> m = new HashMap<>(); // height, count\n\t\t    int max = N * N * 2 - N;\n\t\t    for (int j = 0; j < max; j++) {\n\t\t\tint nxt = sc.nextInt();\n\t\t\tif (!m.containsKey(nxt)) {\n\t\t\t    m.put(nxt, 1);\n\t\t\t} else {\n\t\t\t    m.put(nxt, m.get(nxt) + 1);\n\t\t\t}\n\t\t    }\n\t\t    Set<Integer> anws = new TreeSet<>();\n\t\t    String ans = \"\";\n\t\t    for (Integer k : m.keySet()) {\n\t\t\tif (m.get(k) % 2 != 0)\n\t\t\t    anws.add(k);\n\t\t    }\n\t\t    \n\t\t    Integer[] is = new Integer[N];\n\t\t    Arrays.sort(anws.toArray(is));\n\n\t\t    for (int iis : is) {\n\t\t\tans += \" \" + iis;\n\t\t    }\n\t\t    System.out.printf(\"Case #%d:%s\\n\", i + 1, ans);\n\t\t}\n\t    }\n    }\n\n}", "idx": "6698"}
{"func": "package googlejam6.p700;\n/* package whatever; // don't place package name! */\n\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\n/* Name of the class has to be \"Main\" only if the class is public. */\nclass Test\n{\n\t\n\tpublic static void main (String[] args) throws java.lang.Exception\n\t{\nint a=4,b=0;\ntry{\n\tint c=a/b;\n}\ncatch (Exception e)\n{\n\tSystem.out.println(\"A\");\n}\nfinally\n{\n\tSystem.out.println(\"B\");\n}\n}\n\n}\n", "idx": "6700"}
{"func": "package googlejam6.p703;\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    public static void main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */\n    Scanner scnr=new Scanner(System.in);\n    \n    int t=scnr.nextInt();\n    String ans[]=new String[t];\n    scnr.nextLine();   \n    for(int i=0;i<t;i++){\n    \tHashMap<Integer,Boolean> data=new HashMap<>();\n    \tint n=scnr.nextInt();\n    \tInteger j=0;\n    \tInteger constant=2*n*n-n;\n    \twhile(j<constant){\n    \t\tInteger in=scnr.nextInt();\n    \t\tif(data.containsKey(in)){\n    \t\t\tdata.remove(in);\n    \t\t}\n    \t\telse{\n    \t\t\tdata.putIfAbsent(in, false);\n    \t\t}\n    \t\tj++;\n    \t}\n    \tStringBuilder reqString=new StringBuilder();\n    \tfor(j=1;j<=2500;j++){\n    \t\tif(data.containsKey(j)){\n    \t\t\treqString.append(j);\n    \t\t\treqString.append(\" \");\n    \t\t}\n    \t}\n    \t\n    \tans[i]=reqString.toString();\n    }\n    for(int i=0;i<t;i++){\n    \tSystem.out.println(\"Case #\"+(i+1)+\": \"+ans[i]);\n    }\n    } \n    }\n", "idx": "6703"}
{"func": "package googlejam6.p706;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.HashMap;\r\nimport java.util.Map.Entry;\r\nimport java.util.Scanner;\r\nimport java.util.TreeSet;\r\n\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t\t\r\n\t\tint T = sc.nextInt();\r\n\t\tfor(int test_case=1; test_case<=T; test_case++) {\r\n\t\t\t\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tHashMap<Integer, Integer> map = new HashMap<>();\r\n\t\t\t\r\n\t\t\tfor(int i=0; i<N*(2*N-1); i++) {\r\n\t\t\t\tInteger m = sc.nextInt();\r\n\t\t\t\tif(!map.containsKey(m)) {\r\n\t\t\t\t\tmap.put(m, 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tInteger cnt = map.remove(m);\r\n\t\t\t\t\tmap.put(m, cnt+1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tTreeSet<Integer> ts = new TreeSet<>();\r\n\t\t\tfor(Entry<Integer, Integer> entry : map.entrySet()) {\r\n\t\t\t\tif(entry.getValue() % 2 == 1) {\r\n\t\t\t\t\tts.add(entry.getKey());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\tint ts_size = ts.size();\r\n\t\t\tfor(int i=0; i<ts_size; i++) {\r\n\t\t\t\tint value = ts.pollFirst();\r\n\t\t\t\tsb.append(value);\r\n\t\t\t\tif(i < ts_size-1) {\r\n\t\t\t\t\tsb.append(\" \");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\"+test_case+\": \" + sb);\r\n\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "6706"}
{"func": "package googlejam6.p710;\nimport java.util.*;\r\nimport java.util.Set;\r\nimport java.io.*;\r\n\r\npublic class B\r\n{\r\n\r\n    public static void main(String[] args) throws Exception\r\n    {\r\n    \tFile file = new File(\"B-large.in\");\r\n        Scanner input = new Scanner(file);\r\n        int numCases = input.nextInt();\r\n        boolean[] digits = new boolean[2501];\r\n        for (int n = 0; n < numCases; n++)\r\n        {\r\n            String s = \"\";\r\n            for(int j=0;j<2501;j++)\r\n                digits[j]=false;\r\n            int r = input.nextInt();\r\n            int nums = 2*r*r-r;\r\n            for(int i=0;i<nums;i++){\r\n                int a = input.nextInt();\r\n                digits[a] = digits[a] ? false : true;\r\n            }\r\n            for(int i=0;i<2501;i++)\r\n                if(digits[i])\r\n                    s = s + i + \" \";\r\n            s = s.trim();\r\n            System.out.println(\"Case #\"+(n+1)+\": \"+s);\r\n        }\r\n    }\r\n}\r\n", "idx": "6710"}
{"func": "package googlejam6.p711;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.math.BigInteger;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedList;\r\n\r\npublic class Go \r\n{\r\n\tstatic LinkedList<BigInteger> divisorList=new LinkedList<BigInteger>();\r\n\tpublic static void main(String args[]) throws IOException\r\n\t{\r\n\t\tFile inputFileName = new File(\"D:\\\\Eclipse3\\\\CodeJam2016\\\\src\\\\Input\\\\B-large (1).in\");\r\n\t\tFile outputFileName = new File(\"D:\\\\Eclipse3\\\\CodeJam2016\\\\src\\\\Output\\\\B-large (1).out\");\r\n\r\n\t\tFileReader fileReader=null;\r\n\t\tBufferedReader bufferedReader=null;\r\n\t\t\r\n\t\tFileWriter fileWriter=null;\r\n\t\tBufferedWriter bufferedWriter=null;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\t\r\n\t        String line = null;\r\n\t        \r\n\t        int lineNo=0;\r\n\t        int caseNo=0,noOfCases;\r\n\t        \r\n\t        String string2Write;\r\n\t        \r\n\t        fileReader = new FileReader(inputFileName);\r\n\t        bufferedReader = new BufferedReader(fileReader);\r\n\t        \r\n\t        fileWriter = new FileWriter(outputFileName);\r\n\t        bufferedWriter = new BufferedWriter(fileWriter);\r\n\r\n\t        int argNo=0; //0 means Test cases, 1 means N, 2 means matrix\r\n\t        int matrixN=-1;\r\n\t        \r\n\t        while((line = bufferedReader.readLine()) != null) \r\n\t        {\r\n\t        \t\r\n\t        \tswitch(argNo)\r\n\t        \t{\r\n\t        \t\tcase 0:\r\n\t        \t\t\targNo=1;\r\n\t        \t\t\tbreak;\r\n\t        \t\tcase 1:\r\n\t        \t\t\tmatrixN=Integer.valueOf(line);\r\n\t        \t\t\tcaseNo++;\r\n\t        \t\t\targNo=2;\r\n\t        \t\tcase 2:\r\n\t        \t\t\tint[][] matrix=new int[2*matrixN-1][matrixN];\r\n\t        \t\t\t\r\n\t        \t\t\tfor(int i=0;i<(2*matrixN-1);i++)\r\n\t        \t\t\t{\r\n\t        \t\t\t\tline = bufferedReader.readLine();\r\n\t        \t\t\t\tString[] numbersInString=line.split(\" \");\r\n\t        \t\t\t\tint col=0;\r\n\t        \t\t\t\t\r\n\t        \t\t\t\tfor(String s:numbersInString)\r\n\t        \t\t\t\t{\r\n\t        \t\t\t\t\tmatrix[i][col]=Integer.valueOf(s);\r\n    \t\t\t\t\t\t\tcol++;\r\n\t        \t\t\t\t}\r\n\t        \t\t\t\t\r\n\t        \t\t\t}\n\t\t\t\t\tHashMap<Integer,Integer> countHeights=new HashMap<Integer,Integer>();\n\t\t\t\t\tint[] missingRowOrColumn1=new int[matrixN];\n\t\t\t\t\t\n\t\t\t\t\tfor(int r=0;r<matrix.length;r++)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(int c=0;c<matrix[r].length;c++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint currentHeight=matrix[r][c];\n\t\t\t\t\t\t\tif(countHeights.containsKey(currentHeight))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tint existingCounts=countHeights.get(currentHeight);\n\t\t\t\t\t\t\t\tcountHeights.put(currentHeight, (existingCounts+1));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcountHeights.put(currentHeight, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint i1=0;\n\t\t\t\t\t\n\t\t\t\t\tfor(int height:countHeights.keySet())\n\t\t\t\t\t{\n\t\t\t\t\t\tint count=countHeights.get(height);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(count%2!=0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmissingRowOrColumn1[i1]=height;\n\t\t\t\t\t\t\ti1++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tArrays.sort(missingRowOrColumn1);\r\n\t        \t\t\t\r\n\t        \t\t\tint[] missingRowOrColumn=missingRowOrColumn1;\r\n\t        \t\t\tstring2Write=\"Case #\"+String.valueOf(caseNo)+\": \";\r\n\t        \t\t\t\r\n\t        \t\t\tfor(int i=0;i<missingRowOrColumn.length;i++)\r\n\t        \t\t\t{\r\n\t        \t\t\t\tstring2Write=string2Write+(String.valueOf(missingRowOrColumn[i]))+\" \";\r\n\t        \t\t\t}\r\n\t        \t\t\tstring2Write=string2Write+\"\\n\";\r\n\t        \t\t\t\r\n\t        \t\t\tbufferedWriter.write(string2Write);\r\n\t        \t\t\targNo=1;\r\n\t        \t\t\tbreak;\r\n\t        \t}\r\n\t        \t\r\n\t        }\r\n\t\t}\r\n\t\tcatch(Exception ex)\r\n\t\t{\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tbufferedReader.close();\r\n\t\t\tbufferedWriter.close();\r\n\t\t}\r\n        \r\n        \r\n\t}\r\n\r\n}\r\n", "idx": "6711"}
{"func": "package googlejam6.p713;\nimport java.lang.*;\r\nimport java.util.*;\r\nimport java.text.*;\r\nimport java.io.*;\r\n\r\npublic class A2problem {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tString filename = args.length > 0 ? args[0] : \"A2\\\\B-large.in\";\r\n\t\tFile fout = new File(\"A2\\\\resultL.txt\");\r\n\t\tPrintStream out = new PrintStream(fout);\r\n\r\n\t\tScanner in = new Scanner(new File(filename));\r\n\t\tString text = in.next();\r\n\t\tint N = Integer.parseInt(text);\r\n\r\n\t\ttry{\r\n\t\tfor (int i = 0; i < N; i++) {\r\n\r\n\t\t\tString ma = in.next();\r\n\t\t\tint nn = Integer.parseInt(ma);\r\n\r\n\t\t\tint nums[] = new int[(2 * nn - 1)*nn];\r\n\t\t\tint k=0;\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < nums.length; j++) {\r\n\t\t\t\tma = in.next();\r\n\t\t\t\tnums[k++] = Integer.parseInt(ma);\r\n\t\t\t}\n\t\t\tArrays.sort(nums);\n\t\t\tint max = nums[nums.length-1];\n\t\t\tint count[] = new int[max];\n\t\t\tint count1[] = new int[max];\n\t\t\t\n\t\t\tfor(int i3=0;i3<nums.length; i3++){\n\t\t\t\tcount[nums[i3]-1]++;\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i1=0;i1<count.length; i1++){\n\t\t\t\tif(count[i1] % 2 == 1 ){ count1[i1] = 1; }\n\t\t\t}\n\t\t\t\n\t\t\tString s = \"\";\n\t\t\tfor(int i2=0;i2<count1.length; i2++){\n\t\t\t\tif(count1[i2] == 1 ){ s += i2+1 + \" \"; }\n\t\t\t}\r\n\r\n\t\t\tString outRes = s;\r\n\t\t\tout.println(\"Case #\" + (i + 1) + \": \" + outRes);\r\n\t\t\tSystem.out.println(\"Case #\" + (i + 1) + \": \" + outRes);\r\n\t\t}\r\n\t\t}catch(Exception ex){\r\n\t\t\tSystem.out.println(ex);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "6713"}
{"func": "package googlejam6.p715;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Map.Entry;\r\n\r\nimport javax.swing.text.html.HTMLDocument.Iterator;\r\n\r\n\r\npublic class Square {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tString filename = \"C:/Users/Administrator/Desktop/B-small-attempt1.in\";\r\n\t\tFileReader fr = new FileReader(filename);\r\n\t\tBufferedReader br =  new BufferedReader(fr);\r\n\t\t\r\n\t\tFileWriter fw = new FileWriter(\"C:/Users/Administrator/Desktop/out_b.txt\");\r\n\t\tBufferedWriter bw = new BufferedWriter(fw);\r\n\t\t\r\n\t\tString line;\r\n\t\tString inputs[] = new String[10000000];\r\n\t\tint N = 0;\r\n\t\twhile ( (line = br.readLine()) != null){\r\n\t\t\tinputs[N] = line;\r\n\t\t\tSystem.out.println(inputs[N]);\r\n\t\t\tN++;\r\n\t\t}\r\n\t\tint T = Integer.valueOf(inputs[0]);\r\n\t\tint case_num = 1;\r\n\t\tfor (int i=1;i<N;){\r\n\t\t\tint n = Integer.valueOf(inputs[i]);\r\n\t\t\ti++;\r\n\t\t\t//ArrayList<String> list = new ArrayList<String>();\r\n\t\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\r\n\t\t\tfor (int k=0;k<2*n-1;i++,k++){\r\n\t\t\t\tString array[] = inputs[i].split(\" \");\r\n\t\t\t\t\r\n\t\t\t\tfor (int m=0;m<array.length;m++){\r\n\t\t\t\t\tif (map.containsKey(array[m])){\r\n\t\t\t\t\t\tint times = map.get(array[m]);\r\n\t\t\t\t\t\tmap.put(array[m], times+1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap.put(array[m], 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tArrayList<String> list = new ArrayList<String>();\r\n\t\t\tfor (Map.Entry<String, Integer> entry : map.entrySet()) {\r\n\t\t\t\tString key = entry.getKey().toString();\r\n\t\t\t\tint times = entry.getValue();\r\n\t\t\t\t//System.out.println(key+\":::::\"+times);\r\n\t\t\t\tif (times%2 != 0)\r\n\t\t\t\t\tlist.add(key);\r\n\t\t\t}\r\n\t\t\tint array[] = new int [list.size()];\r\n\t\t\tfor (int j=0;j<array.length;j++)\r\n\t\t\t\tarray[j] = Integer.valueOf(list.get(j));\r\n\t\t\tArrays.sort(array);\r\n\t\t\tbw.write(\"Case #\"+case_num+\": \");\r\n\t\t\tfor (int j=0;j<array.length;j++){\r\n\t\t\t\tif (j<array.length-1)\r\n\t\t\t\t\tbw.write(array[j]+\" \");\r\n\t\t\t\telse\r\n\t\t\t\t\tbw.write(array[j]+\"\\n\");\r\n\t\t\t}\r\n\t\t\tcase_num++;\r\n\t\t}\r\n\t\tbw.flush();\r\n\t}\r\n\r\n}\r\n", "idx": "6715"}
{"func": "package googlejam6.p719;\nimport java.util.*;\r\nimport static java.lang.Math.*;\r\n\r\nimport java.io.File;\r\nimport java.io.PrintStream;\r\n\r\n\r\npublic class B {\r\n\t\r\n\tpublic static String FILENAME = \"B-small-attempt0\";\r\n\r\n\tpublic static String INPATH =  \"res/\" + FILENAME + \".in\";\r\n\tpublic static String OUTPATH = \"res/\" + FILENAME + \".out\";\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\t\r\n\t\tString workingDir = System.getProperty(\"user.dir\");\r\n\t\t\r\n\t\tSystem.setOut(new PrintStream(new File(workingDir,OUTPATH)));\r\n\t\tScanner in = new Scanner(new File(workingDir,INPATH));\r\n\t\t\r\n\t\tint T = in.nextInt();\r\n\t\t\r\n\t\tfor(int zz = 1; zz <= T;zz++){\r\n\t\t\t\r\n\t\t\tint size = in.nextInt();\r\n\r\n\t\t\tint[] number = new int[2500];\r\n\t\t\t\r\n\t\t\tfor(int i = 0; i < 2*size - 1; i++) {\r\n\t\t\t\t\r\n\t\t\t\tfor(int j = 0; j < size; j++) {\r\n\t\t\t\t\tint num = in.nextInt();\r\n\t\t\t\t\tnumber[num] = number[num] + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.format(\"Case #%d:\", zz);\r\n\t\t\t\r\n\t\t\tfor(int i = 0; i < 2500; i++) {\r\n\t\t\t\tif(number[i] % 2 != 0)\r\n\t\t\t\t\tSystem.out.format(\" %d\", i);\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.format(\"\\n\");\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tin.close();\r\n\t}\r\n}\r\n", "idx": "6719"}
{"func": "package googlejam6.p721;\n/* package whatever; // don't place package name! */\n\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\n/* Name of the class has to be \"Main\" only if the class is public. */\nclass Ideone\n{\n\tpublic static void main (String[] args) throws java.lang.Exception\n\t{\n\t\tDataInputStream in = new DataInputStream(System.in);\n\t\tint t,h;\n\t\tt= Integer.parseInt(in.readLine());\n\t\tint heights[]= new int[2502];\n\t\tfor(int k=0;k<2501;k++)\n\t\t\theights[k]=0;\n\t\tfor(int i=1;i<=t;i++)\n\t\t{\n\t\t\tint n;\n\t\t\tn= Integer.parseInt(in.readLine());\n\t\t\tfor(int j=1;j<2*n;j++)\n\t\t\t{\n\t\t\t\tString line=in.readLine();\n\t\t\t\tStringTokenizer st= new StringTokenizer(line);\n\t\t\t\tfor(int x=0;x<n;x++)\n\t\t\t\t{\n\t\t\t\t\th=Integer.parseInt(st.nextToken());\n\t\t\t\t\tSystem.out.print(h+\" \");\n\t\t\t\t\theights[h]=heights[h]+1;\n\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"\");\n\t\t\t}\n\t\t\tString s=\"\";\n\t\t\tfor(int k=0;k<2502;k++)\n\t\t\t{\n\t\t\t\tif(heights[k]%2!=0)\n\t\t\t\t\ts=s+k+\" \";\n\t\t\t\theights[k]=0;\n\t\t\t}\n\t\t\ts=s.trim();\n\t\t\tSystem.out.println(\"Case #\"+i+\": \"+s);\n\t\t}\n\t}\n}", "idx": "6721"}
{"func": "package googlejam6.p743;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass Codejam2\r\n{\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tScanner sc=new Scanner(System.in);\r\n\t\tint t=sc.nextInt();\r\n\t\tfor(int i=0;i<t;i++)\r\n\t\t{\r\n\t\t\tint n=sc.nextInt();\r\n\t\t\tint arr[][]=new int[((2*n)-1)][n];\r\n\t\t\tint a[]=new int[2501];\r\n\t\t\tfor(int j=0;j<(2*n)-1;j++)\r\n\t\t\t{\r\n\t\t\t\tfor(int k=0;k<n;k++)\r\n\t\t\t\t{\tarr[j][k]=sc.nextInt();\r\n\t\t\t\t\ta[arr[j][k]]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint b[]=new int[n];\r\n\t\t\tint z=0;\r\n\t\t\tfor(int j=1;j<=2500;j++)\r\n\t\t\t\tif(a[j]%2!=0)\r\n\t\t\t\t\tb[z++]=j;\r\n\t\t\tArrays.sort(b);\r\n\t\t\tSystem.out.print(\"Case #\"+(i+1)+\": \");\r\n\t\t\tfor(int j=0;j<n;j++)\r\n\t\t\t\tSystem.out.print(b[j]+\" \");\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n}", "idx": "6743"}
{"func": "package googlejam6.p745;\nimport java.util.*;\nimport java.io.*;\npublic class Main {\n  public static void main(String[] args) throws FileNotFoundException {\n\t  //new FileInputStream (new File(\"A-large.in\") ) \n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader( new FileInputStream (new File(\"B-small-attempt0.in\") )   ) ));\n    int t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\n    \n    for (int i = 1; i <= t; ++i) {\n    \tint n = in.nextInt();\n    \tHashMap<Integer, Integer> map = new HashMap<Integer,Integer>();\n    \tfor( int j =1; j<=n*(2*n-1);j++){\n    \t\tint num = in.nextInt();\n    \t\tint value = 1;\n    \t\tif( map.containsKey(num) ){\n    \t\t\tvalue += map.get(num);\n    \t\t}\n    \t\tmap.put(num, value);\n    \t}\n    \tint[] result = new int[n];\n    \tint k =0;\n    \tfor( int key: map.keySet() ){\n    \t\tint count = map.get(key);\n    \t\tif( count%2 != 0){\n    \t\t\tresult[k] = key;\n    \t\t\tk++;\n    \t\t}\n    \t}\n    \tArrays.sort(result);\n    \ttry\n\t\t  {\n\t\t  String path=\"1.txt\";\n\t\t  File file=new File(path);\n\t\t  if(!file.exists())\n\t\t      file.createNewFile();\n\t\t  FileOutputStream out=new FileOutputStream(file,true);        \n\t\t  out.write((\"Case #\"+i+\":\").getBytes(\"utf-8\"));\n\t\t  out.close();\n\t\t  }\n\t\t  catch(IOException e)\n\t\t  {\n\t\t      e.printStackTrace();\n\t\t  }\n    \tfor( int r:result){\n    \t\ttry\n\t\t\t  {\n\t\t\t  String path=\"1.txt\";\n\t\t\t  File file=new File(path);\n\t\t\t  if(!file.exists())\n\t\t\t      file.createNewFile();\n\t\t\t  FileOutputStream out=new FileOutputStream(file,true);        \n\t\t\t  out.write((\" \"+ r).getBytes(\"utf-8\"));\n\t\t\t  out.close();\n\t\t\t  }\n\t\t\t  catch(IOException e)\n\t\t\t  {\n\t\t\t      e.printStackTrace();\n\t\t\t  }\n    \t}\n    \ttry\n\t\t  {\n\t\t  String path=\"1.txt\";\n\t\t  File file=new File(path);\n\t\t  if(!file.exists())\n\t\t      file.createNewFile();\n\t\t  FileOutputStream out=new FileOutputStream(file,true);        \n\t\t  out.write(\"\\n\".getBytes(\"utf-8\"));\n\t\t  out.close();\n\t\t  }\n\t\t  catch(IOException e)\n\t\t  {\n\t\t      e.printStackTrace();\n\t\t  }\n    }\n  } \n}", "idx": "6745"}
{"func": "package googlejam6.p756;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class RankFile {\r\n  public static void main(String[] args) {\r\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n    int t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\r\n    for (int i = 1; i <= t; ++i) {\r\n        int n = in.nextInt();\r\n        ArrayList<Integer> ranks = new ArrayList<Integer>();\r\n    \tfor (int j = 0; j<n*(2*n-1); j++)\r\n    \t{\r\n    \t\tInteger rank = new Integer(in.nextInt());\r\n    \t\tif (ranks.contains(rank))\r\n    \t\t\tranks.remove(rank);\r\n    \t\telse\r\n    \t\t\tranks.add(rank);\r\n    \t}\r\n    \tCollections.sort(ranks);;\r\n    \tString output = \"\";\r\n    \tfor (int rank : ranks)\r\n    \t{\r\n    \t\toutput += rank + \" \";\r\n    \t}\r\n        System.out.println(\"Case #\" + i + \": \" + output.trim());\r\n    }\r\n  }\r\n}", "idx": "6756"}
{"func": "package googlejam6.p757;\n/* package whatever; // don't place package name! */\n\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\n/* Name of the class has to be \"Main\" only if the class is public. */\nclass Ideone\n{\n\tpublic static void main (String[] args) throws java.lang.Exception\n\t{\n\t\t// your code goes here\n\t\tScanner sc=new Scanner(System.in);\n      int t=sc.nextInt();\n      for(int k=1;k<=t;k++)\n      {\n          int n=sc.nextInt();\n          List al=new ArrayList();\n          int g=2*n-1;\n          while(g-->0)\n          {\n            for(int m=1;m<=n;m++)\n            {\n                \n                 int c=sc.nextInt();\n                //Integer b=new Integer(l);\n                al.add(c);\n            }\n          }\n          Set set=new TreeSet();\n          Collections.sort(al);\n          for(int i=0;i<al.size();i++)\n         {\n            int f= Collections.frequency(al,al.get(i));\n            //System.out.print(f+\" \");\n            if(f%2!=0)\n            {\n             set.add(al.get(i));\n            }\n            \n         }\n         System.out.print(\"Case #\"+k+\": \");\n         Iterator itr=set.iterator();\n         while(itr.hasNext())\n         {\n             System.out.print(itr.next()+\" \");\n         }\n         System.out.println();\n      }\n\n\t}\n}", "idx": "6757"}
{"func": "package googlejam6.p760;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\nimport java.util.TreeMap;\r\nimport java.util.TreeSet;\r\n\r\n\r\npublic class RankFile {\r\n\t public static void main(String[] args) {\r\n\t\t    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t\t //Scanner in = new Scanner(System.in);\r\n\t\t    int loops = in.nextInt();\r\n\t\t    //String line = in.nextLine();\r\n\t\t    for (int loop = 1; loop <= loops; ++loop) {\r\n\t\t       int n = in.nextInt();\r\n\t\t       //ArrayList<ArrayList<Integer>> lines = new ArrayList<ArrayList<Integer>>();\r\n\t\t       TreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();\r\n\t\t       \r\n\t\t       for (int i = 0; i < 2*n - 1; i++) { \r\n\t\t    \t   //lines.add(new ArrayList<Integer>());\r\n\t\t    \t   for (int j = 0; j < n; j++) {\r\n\t\t    \t\t   int temp = in.nextInt();\r\n\t\t    \t\t   if (!map.containsKey(temp)) \r\n\t\t    \t\t\t   map.put(temp, 0);\r\n\t\t    \t\t   int value = map.get(temp);\r\n\t\t    \t\t   map.put(temp, value+1);\r\n\t\t    \t\t   //lines.get(i).add(temp);\r\n\t\t    \t   }\r\n\t\t       }\r\n\t\t       \r\n\t\t       TreeSet<Integer> set = new TreeSet<Integer>();\r\n\t\t       for (Map.Entry<Integer, Integer> entry: map.entrySet()) {\r\n\t\t    \t   if (entry.getValue() % 2 == 1)\r\n\t\t    \t\t   set.add(entry.getKey());\r\n\t\t       }\r\n\t\t       \r\n\t\t       //lines.sort(Comparator.comparing(k -> k.get(0)));\r\n\t\t       \r\n\t\t       StringBuilder builder = new StringBuilder();\r\n\t\t       for (int value : set) {\r\n\t\t    \t   builder.append(\" \" + value);\r\n\t\t       }\r\n\t\t     \r\n\t\t\t       String out = String.format(\"Case #%1$s:%2$s\", loop, builder.toString());\r\n\t\t\t       System.out.println(out);\r\n\t\t    }\r\n\t\t    in.close();\r\n\t }\r\n}\r\n", "idx": "6760"}
{"func": "package googlejam6.p763;\n/* package whatever; // don't place package name! */\r\n\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\n/* Name of the class has to be \"Main\" only if the class is public. */\r\nclass RankAndFile\r\n{\r\n\tpublic static void main (String[] args) throws java.lang.Exception\r\n\t{\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\t\r\n\t\tint t = sc.nextInt();\r\n\t\tfor(int testCase = 1; testCase<=t; testCase++)\r\n\t\t{\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\t\r\n\t\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\r\n\t\t\tint temp;\r\n\t\t\tint x = 2*n-1;\r\n\t\t\tfor(int i = 0; i<x; i++)\r\n\t\t\t{\r\n\t\t\t\tfor(int j=0; j<n; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ttemp = sc.nextInt();\r\n\t\t\t\t\tif(map.containsKey(temp))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmap.put(temp, map.get(temp)+1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmap.put(temp, 1);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tTreeSet<Integer> ts = new TreeSet<Integer>();\r\n\t\t\tfor(Map.Entry m: map.entrySet())\r\n\t\t\t{\r\n\t\t\t\tint key = (int)m.getKey();\r\n\t\t\t\tint value = (int)m.getValue();\r\n\t\t\t\t\r\n\t\t\t\tif(value%2 != 0)\r\n\t\t\t\t\tts.add(key);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.print(\"\\nCase #\"+testCase+\":\");\r\n\t\t\tfor(Integer i: ts)\r\n\t\t\t\tSystem.out.print(\" \"+i);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}", "idx": "6763"}
{"func": "package googlejam6.p764;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class ProblemaB {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner(System.in); \n\t\t\n\t\tint t = input.nextInt();\n\t\t\n\t\tfor(int i = 0; i < t; i++) {\n\t\t\t\n\t\t\tint n = input.nextInt();\t\t\t\n\t\t\t\n\t\t\tArrayList<Integer> listaMatrizOrdenada = new ArrayList<Integer>();\n\t\t\t\t\t\t\n\t\t\tfor(int j = 0; j < n * (2 * n - 1); j++)\n\t\t\t\tlistaMatrizOrdenada.add( input.nextInt() );\n\t\t\n\t\t\tCollections.sort(listaMatrizOrdenada);\t\n\t\t\t\n\t\t\tlistaMatrizOrdenada.add(-1);\n\t\t\t\n\t\t\tList<Integer> resultado = new ArrayList<Integer>();\n\t\t\t\n\t\t\tint count = 0;\n\t\t\tInteger anterior = null;\n\t\t\t\t\n\t\t\t\n\t\t\tfor(Integer j : listaMatrizOrdenada) {\n\t\t\t\t\n\t\t\t\tif(j == 134)\n\t\t\t\t\tSystem.out.println(\"\");\n\t\t\t\t\n\t\t\t\tif(anterior == null || j.equals(anterior)) {\n\t\t\t\t\tcount++;\n\t\t\t\t\t\n\t\t\t\t} else {\n\n\t\t\t\t\tif (count % 2 != 0) {\n\t\t\t\t\t\tresultado.add(anterior);\n\t\t\t\t\t}\n\t\t\t\t\tcount = 1;\n\t\t\t\t}\n\t\t\t\tanterior = j;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\" + (i + 1) + \":\");\n\t\t\tfor(Integer numero : resultado)\n\t\t\t\tSystem.out.print(\" \" + numero);\n\t\t\t\n\t\t\tSystem.out.println(\"\");\n\t\t}\n\t\t\n\t\tinput.close();\n\t}\n}\n", "idx": "6764"}
{"func": "package googlejam6.p393;\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Validgrid {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner scanner = new Scanner(new File(\"B-large1.in\"));\r\n\t\t//int [] tall = new int [100];\r\n\t\tint total = scanner.nextInt();\r\n\t\t\r\n\t\tSystem.out.println(total);\r\n\t\t\r\n\t\tFileWriter fw = new FileWriter(\"out.txt\");\r\n\t\tfor(int i=0;i<total;i++){\r\n\t\t   int n=scanner.nextInt();\r\n\t\t   int[][] grid=new int[2*n-1][n];\r\n\t\t   for(int k=0;k<2*n-1;k++)\r\n\t\t\t{\r\n\t\t\t\tfor(int j=0;j<n;j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tgrid[k][j]=scanner.nextInt();\r\n\t\t\t\t}\r\n\t\t\t}\n\t\tint[] count= new int[2500];\n\t\t ArrayList<Integer> obj1 = new ArrayList<Integer>();\n\t\tfor(int i3=0;i3<2500;i3++)\n\t\t\tcount[i3]=0;\n\t\tfor(int i1=0;i1<2*n-1;i1++)\n\t\t{\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t{\n\t\t\t\tcount[grid[i1][j]-1]++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint k1=0;\n\t\tfor(int i2=0;i2<2500;i2++)\n\t\t{\n\t\t\tif(count[i2]%2!=0)\n\t\t\t\tobj1.add(i2+1);\n\t\t}\n\t\tCollections.sort(obj1);\r\n\t\t   ArrayList<Integer> obj=obj1;\r\n\t\t   fw.write(\"Case #\"+(i+1)+\": \");\r\n\t\t   for(int k=0;k<n;k++)\r\n\t\t   {\r\n\t\t\t   \r\n\t\t\t   fw.write(obj.get(k)+\" \");\r\n\t\t   }\r\n\t\t   fw.write(\"\\n\");     \r\n\t\t\t   \r\n\t\t  \r\n\t\t}\r\n        fw.close();\r\n\t\t\r\n\t}\r\n}\r\n", "idx": "6393"}
{"func": "package googlejam6.p420;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class B {\r\n    public static void main (String args[]) throws Exception\r\n    {\r\n        File file = new File(\"C:\\\\Users\\\\charafi\\\\IdeaProjects\\\\Round_1_A_2016\\\\src\\\\B.in\");\r\n        PrintWriter out = new PrintWriter(\"C:\\\\Users\\\\charafi\\\\IdeaProjects\\\\Round_1_A_2016\\\\src\\\\B.out\",\"UTF-8\");\r\n        Scanner in =new Scanner(file);\r\n        int T=in.nextInt();\r\n        for(int i=0;i<T;i++)\r\n        {\r\n            out.printf(\"Case #%d:\",i+1);\r\n            int N=in.nextInt();\r\n            int e[]=new int[2501];\r\n            for(int k=1;k<2501;k++)\r\n            {\r\n                e[k]=0;\r\n            }\r\n            for (int j=0;j<((N-1)*2+1);j++)\r\n            {\r\n                for(int k=0;k<N;k++)\r\n                {\r\n                    e[in.nextInt()]++;\r\n                }\r\n            }\r\n            for(int k=1;k<2501;k++)\r\n            {\r\n                if(e [k]%2==1)\r\n                    out.printf(\" %d\",k);\r\n            }\r\n\r\n            out.printf(\"\\n\");\r\n        }\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "6420"}
{"func": "package googlejam6.p444;\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner input = new Scanner( System.in );\r\n\r\n\t\tInteger t = input.nextInt();\r\n\r\n\t\tfor( int testCase = 0; testCase < t; testCase++ ) {\r\n\t\t\tint n = input.nextInt();\r\n\r\n\t\t\tint[] heights = new int[2500];\r\n\t\t\tArrays.fill( heights, 0 );\r\n\r\n\t\t\tfor( int i = 0; i < n * 2 - 1; i++ ) {\r\n\t\t\t\tfor( int j = 0; j < n; j++ ) {\r\n\t\t\t\t\tint h = input.nextInt();\r\n\t\r\n\t\t\t\t\theights[h - 1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tList<Integer> missingRow = new ArrayList<Integer>(n);\r\n\t\t\tfor( int i = 0; i < heights.length; i++ ) {\r\n\t\t\t\tif( heights[i] % 2 != 0 ) {\r\n\t\t\t\t\tmissingRow.add( i );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tCollections.sort( missingRow );\r\n\r\n\t\t\tSystem.out.print( \"Case #\" + ( testCase + 1 ) + \":\" );\r\n\t\t\tfor( Integer i : missingRow ) {\r\n\t\t\t\tSystem.out.print( \" \" + ( i + 1 ) );\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\r\n\t\tinput.close();\r\n\t}\r\n\r\n}\r\n", "idx": "6444"}
{"func": "package googlejam6.p470;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\npublic class B_Ranks {\n\t\n\tpublic static void main(String[] args) throws IOException{\n\t\t// 0. My Small Practice\n\t\t//FileReader reader = new FileReader(\"test_case_gcj2016Round1A/B-mysmall-practice.in\");\n\t\t//FileWriter writer = new FileWriter(\"test_case_gcj2016Round1A/B-mysmall-practice.out\");\n\n\t\t// 1. Small Practice\n\t\t// Judged response for input A-small: Correct!\n\t\t//FileReader reader = new FileReader(\"test_case_gcj2016Round1A/B-small-attempt0.in\");\n\t\t//FileWriter writer = new FileWriter(\"test_case_gcj2016Round1A/B-small-attempt0.out\");\n\n\t\t// 2. Large Practice\n\t\tFileReader reader = new FileReader(\"test_case_gcj2016Round1A/B-large.in\");\n\t\tFileWriter writer = new FileWriter(\"test_case_gcj2016Round1A/B-large.out\");\n\t\t\n\t\t\n\t\tBufferedReader bufferedReader = new BufferedReader(reader);\n\t\tString line = bufferedReader.readLine();\n        int noOfCases = Integer.parseInt(line);\n        System.out.println(noOfCases);\n\t\t        \n        for (int i = 1; i <= noOfCases; i++){\n\t\t\t// 1. read data\n        \tline = bufferedReader.readLine();\n        \tint n = Integer.parseInt(line);\n        \tint[][] mat = new int[2*n-1][n];\n        \tfor (int j = 0; j < 2*n-1; j++){\n\t\t\t    line = bufferedReader.readLine();\n\t\t\t    String[] nos = line.split(\" \");\n\t\t\t    int[] array = Arrays.asList(nos).stream().mapToInt(Integer::parseInt).toArray();\n\t\t\t    mat[j] = array;\n        \t}\n\t\t\tint[] res1 = new int[n];\n\t\t\t\n\t\t\tHashMap<Integer, Integer> count = new HashMap<Integer, Integer>();\n\t\t\t\n\t\t\tfor (int i1 = 0; i1 < 2*n-1; i1++){\n\t\t\t\tfor (int j = 0; j < n; j++){\n\t\t\t\t\tif (!count.containsKey(mat[i1][j])){\n\t\t\t\t\t\tcount.put(mat[i1][j], 1);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tint c = count.get(mat[i1][j]);\n\t\t\t\t\t\tcount.replace(mat[i1][j], c+1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint i2 = 0;\n\t\t\t\n\t\t\tIterator it = count.entrySet().iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t    Map.Entry pair = (Map.Entry)it.next();\n\t\t\t    //HashMap.Entry pair = (Map.Entry)it.next();\n\t\t\t    if (((int) pair.getValue()) % 2 == 1){\n\t\t\t    \tres1[i2] = (int) pair.getKey();\n\t\t\t    \ti2++;\n\t\t\t    }\n\t\t\t    //System.out.println(pair.getKey() + \" = \" + pair.getValue());\n\t\t\t    it.remove(); // avoids a ConcurrentModificationException\n\t\t\t}\n\t\t\t\n\t\t\tArrays.sort(res1);\n        \t\n\t\t    //System.out.println(line);\n        \tint[] res = res1;\n\t\t    \n\t\t    String outputLine = \"Case #\" + i + \": \";\n\t\t    //System.out.print(outputLine);\n\t\t    //writer.write(outputLine);\n\t\t    for (int idx = 0; idx < res.length; idx++){\n\t\t\t    outputLine += res[idx] + \" \";\n\t\t    }\n\t\t    outputLine += \"\\n\";\n\t\t    System.out.print(outputLine);\n\t\t    writer.write(outputLine);\n\t\t}\n\t\t   \n\t\treader.close();\n\t    writer.close();\t\n\t}\n\t\n}\n", "idx": "6470"}
{"func": "package googlejam6.p490;\n\r\n\r\nimport java.util.Collection;\r\nimport java.util.Collections;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\nimport java.util.SortedMap;\r\nimport java.util.TreeMap;\r\n\r\npublic class Problem2 {\r\n\t\r\n\tpublic static SortedMap<Integer, Integer> map;\r\n\t\r\n\t\r\n\tpublic static void main (String... args) {\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\tInteger cnt = scanner.nextInt();\r\n\t\tfor (int c = 1; c <= cnt; c++) {\r\n\t\t\tmap = new TreeMap<Integer, Integer>();\r\n\t\t\tint n = scanner.nextInt();\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\tfor (int k = 0; k < n; k++) {\r\n\t\t\t\t\tInteger key = scanner.nextInt();\r\n\t\t\t\t\t//System.out.println(\">\" + key);\r\n\t\t\t\t\tif (!map.containsKey(key)) {\r\n\t\t\t\t\t\tmap.put(key, 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmap.put(key, map.get(key)+1);\r\n\t\t\t\t\t};\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tfor (int j = 0; j < n - 1; j++) {\r\n\t\t\t\tfor (int k = 0; k < n; k++) {\r\n\t\t\t\t\tInteger key = scanner.nextInt();\r\n\t\t\t\t\t//System.out.println(\">\" + key);\r\n\t\t\t\t\tif (!map.containsKey(key)) {\r\n\t\t\t\t\t\tmap.put(key, 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmap.put(key, map.get(key)+1);\r\n\t\t\t\t\t};\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.print(\"Case #\"+c + \":\");\r\n\t\t\tfor (Integer key : map.keySet()) {\r\n\t\t\t\tif (map.get(key) % 2 == 1) {\r\n\t\t\t\t\tSystem.out.print(\" \"+ key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"\\n\");\r\n\t\t\t\r\n\t\t\t//System.out.println(\"Case #\" + c + \": \" + process(str));\r\n\t\t}\r\n\t\tscanner.close();\r\n\t}\r\n\r\n}\r\n", "idx": "6490"}
{"func": "package googlejam6.p515;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Enumeration;\r\nimport java.util.Hashtable;\r\n\r\nclass Main {\r\n\tpublic static final String CASE = \"Case #\";\r\n\tHashtable<String, Integer> rep;\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tMain r = new Main();\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint cases=Integer.parseInt(br.readLine());\n\t\tString line = \"\";\n\t\tString resp=\"\";\n\t\tfor(int i=1; i<=cases;i++){\n\t\t\tint n = Integer.parseInt(br.readLine());\n\t\t\tr.rep = new Hashtable<>();\n\t\t\tfor(int j=0;j<n*2-1;j++){\n\t\t\t\tline = br.readLine();\n\t\t\t\tString[] nums = line.split(\" \");\n\t\t\t\tfor(int i2=0; i2<nums.length; i2++){\n\t\t\t\t\tInteger n1 = r.rep.get(nums[i2]);\n\t\t\t\t\tif(n1==null){\n\t\t\t\t\t\tr.rep.put(nums[i2], 1);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tr.rep.put(nums[i2], n1+1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tEnumeration<String> k = r.rep.keys();\n\t\t\tint i1=0;\n\t\t\tint[] r1 = new int[n];\n\t\t\twhile(k.hasMoreElements()){\n\t\t\t\tString actual = k.nextElement();\n\t\t\t\tint repeticiones = r.rep.get(actual);\n\t\t\t\tif(repeticiones%2!=0){\n\t\t\t\t\tr1[i1]=Integer.parseInt(actual);\n\t\t\t\t\ti1++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tString resp1=\"\";\n\t\t\tfor(int i2=0; i2<r1.length; i2++){\n\t\t\t\tif(i2!=0) resp1+=\" \";\n\t\t\t\tfor(int j=i2+1;j<r1.length; j++){\n\t\t\t\t\tif(r1[i2]>r1[j]){\n\t\t\t\t\t\tint temp = r1[i2];\n\t\t\t\t\t\tr1[i2]=r1[j];\n\t\t\t\t\t\tr1[j]=temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresp1+=r1[i2];\n\t\t\t}\n\t\t\tString ans = resp1;\n\t\t\tresp+=(Main.CASE+i+\": \"+ans+\"\\n\");\n\t\t}\n\t\tSystem.out.print(resp);\r\n\t}\r\n\r\n}\r\n", "idx": "6515"}
{"func": "package googlejam6.p537;\nimport java.util.*;\r\n\r\npublic class template2\r\n{\r\n\tstatic Scanner in = new Scanner(System.in);\r\n\t\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\t/*\r\n\t\tfakemain(0);//*/\r\n\t\t\r\n\t\t\r\n\t\tint TC = in.nextInt();\r\n\t\tfor(int tc = 1; tc <= TC; tc++)\r\n\t\t{\r\n\t\t\tint N = in.nextInt();\n\t\t\t\n\t\t\tint[][] list = new int[2*N - 1][N];\n\t\t\t\n\t\t\tint[] count = new int[2501];\n\t\t\tfor(int l = 0; l < list.length; l++)\n\t\t\t{\n\t\t\t\tfor(int n = 0; n < N; n++)\n\t\t\t\t{\n\t\t\t\t\tlist[l][n] = in.nextInt();\n\t\t\t\t\tcount[list[l][n]]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// look for odd numbers\n\t\t\tPriorityQueue<Integer> odds = new PriorityQueue<Integer>();\n\t\t\tfor(int ZSOI = 0; ZSOI < 2501; ZSOI++)\n\t\t\t{\n\t\t\t\tif((count[ZSOI] & 1) == 1)\n\t\t\t\t{\n\t\t\t\t\todds.offer(ZSOI);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\"+tc+\":\");\n\t\t\twhile(!odds.isEmpty())\n\t\t\t{\n\t\t\t\tSystem.out.print(\" \"+odds.poll());\n\t\t\t}\n\t\t\tSystem.out.println();\r\n\t\t}//*/\r\n\t\t\r\n\t\t/*\r\n\t\tfor(int TC = in.nextInt(); TC != 0; TC = in.nextInt())\r\n\t\t{\r\n\t\t\tfakemain(TC);\r\n\t\t}//*/\r\n\t}\r\n}\r\n", "idx": "6537"}
{"func": "package googlejam6.p560;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner scanner = new Scanner(new File(\"b.in\"));\r\n\t\tPrintWriter writer = new PrintWriter(new File(\"b.out\"));\r\n\r\n\t\tint t = scanner.nextInt();\r\n\t\tfor (int tt = 1; tt <= t; ++tt) {\r\n\t\t\twriter.print(\"Case #\" + tt + \":\");\r\n\r\n\t\t\tint n = scanner.nextInt();\r\n\t\t\tint m = 2 * n - 1;\r\n\t\t\tboolean flag[] = new boolean[2501];\r\n\t\t\tArrays.fill(flag, false);\r\n\t\t\tfor (int i = 0; i < m; ++i) {\r\n\t\t\t\tfor (int j = 0; j < n; ++j) {\r\n\t\t\t\t\tint x = scanner.nextInt();\r\n\t\t\t\t\tflag[x] = !flag[x];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tArrayList<Integer> result = new ArrayList<Integer>();\r\n\t\t\tfor (int i = 1; i <= 2500; ++i) {\r\n\t\t\t\tif (flag[i]) {\r\n\t\t\t\t\tresult.add(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tCollections.sort(result);\r\n\r\n\t\t\tfor (int i : result) {\r\n\t\t\t\twriter.print(\" \" + i);\r\n\t\t\t}\r\n\t\t\twriter.println();\r\n\t\t}\r\n\r\n\t\tscanner.close();\r\n\t\twriter.close();\r\n\t}\r\n\r\n}\r\n", "idx": "6560"}
{"func": "package googlejam6.p587;\nimport java.awt.List;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\npublic class GCJ2 {\n\n    public static void main(String[] args) throws IOException {\n        // TODO Auto-generated method stub\n        String fileName = \"B-large.in\";\n\t\tStringBuffer fileContent1 = new StringBuffer();\n\t\t\n\t\tString line1 = new String();\n\t\t\n\t\tFileReader fileReader = null;\n\t\ttry {\n\t\t    fileReader = new FileReader(fileName);\n\t\t} catch (FileNotFoundException e) {\n\t\t    // TODO Auto-generated catch block\n\t\t    e.printStackTrace();\n\t\t}\n\t\t\n\t\tBufferedReader bufferedReader= new BufferedReader(fileReader);\n\t\t\n\t\ttry {\n\t\t    while ((line1 = bufferedReader.readLine()) != null) {\n\t\t        fileContent1.append(line1 + \";\");\n\t\t    }\n\t\t} catch (IOException e) {\n\t\t    // TODO Auto-generated catch block\n\t\t    e.printStackTrace();\n\t\t}\n\t\t\n\t\ttry {\n\t\t    bufferedReader.close();\n\t\t} catch (IOException e) {\n\t\t    // TODO Auto-generated catch block\n\t\t    e.printStackTrace();\n\t\t}\n        String fileContent = fileContent1.toString();\n        String[] inputString = fileContent.split(\";\");\n        StringBuffer outputString = new StringBuffer();\n        int t = Integer.parseInt(inputString[0]);\n        String[] input = new String[inputString.length - 1];\n        int line = 1;\n        \n        for (int z = 0; z < t; z++) {\n            outputString.append(\"Case #\" + (z+1) + \":\");\n            int index = line;\n            int n = Integer.parseInt(inputString[index]);\n            index++;\n            line = line + 2 * n;\n            HashMap<Integer, Integer> height = new HashMap<Integer, Integer>();\n            int[] miss = new int[n];\n            ArrayList<Integer> number = new ArrayList<Integer>();\n            int len = 0;\n            \n            for (int i = 0; i < (2*n-1); i++) {\n                String[] lineHeight = inputString[index+i].split(\" \");\n                int[] num = new int[lineHeight.length];\n                for (int j = 0; j < lineHeight.length; j++) {\n                    num[j] = Integer.parseInt(lineHeight[j]);\n                    Integer key = new Integer(num[j]);\n                    if (height.containsKey(key)) {\n                        Integer value = height.get(key);\n                        value++;\n                        height.put(key, value);\n                    } else {\n                        height.put(key, 1);\n                        number.add(new Integer(key));\n                    }\n                }\n            }\n            \n            int m = 0;\n            \n            for (int i = 0; i < number.size(); i++) {\n                Integer value = height.get(number.get(i));\n                \n                if ((value%2) == 1) {\n                    System.out.println(number.get(i));\n                    miss[m++] = number.get(i);\n                }\n            }\n            Arrays.sort(miss);\n            for (int i = 0; i < miss.length; i++) {\n\n                outputString.append(\" \" + miss[i]);\n            }\n            outputString.append(\"\\n\");\n            \n        }\n\n        Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"result.txt\")));\n\t\twriter.write(outputString.toString());\n\t\twriter.close();\n\n    }\n\n}\n", "idx": "6587"}
{"func": "package googlejam6.p604;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.Writer;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.StringTokenizer;\r\nimport java.util.TreeSet;\r\n\r\npublic class RankAndFile {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException, IOException {\r\n\r\n\t\ttry(BufferedReader br = new BufferedReader(new FileReader(\"B-large.in\"))) {\r\n\t\t\tWriter writer = new BufferedWriter(new OutputStreamWriter(\r\n\t\t            new FileOutputStream(\"outputRaFLARGE.txt\"), \"utf-8\"));\r\n\t\t\t\r\n\r\n\t\t\tint cases = Integer.parseInt(br.readLine());\r\n\r\n\t\t\tfor (int i=1; i<=cases; i++) {\r\n\t\t\t\tif (i>1) \r\n\t\t\t\t\twriter.write(System.getProperty(\"line.separator\"));\r\n\t\t\t\twriter.write(\"Case #\" + i + \": \");\r\n\t\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\t\tint rows = (N*2)-1;\r\n\t\t\t\tArrayList<Integer> allNumbers = new ArrayList<Integer>();\r\n\r\n\t\t\t\tfor (int j=1; j<=rows; j++) {\r\n\t\t\t\t\tString singleRow = br.readLine();\r\n\t\t\t\t\t\r\n\t\t\t\t\tStringTokenizer tokens = new StringTokenizer(singleRow, \" \");\r\n\t\t\t\t\twhile(tokens.hasMoreTokens()){\r\n\t\t\t\t\t\tString singleNumberString = tokens.nextToken();\r\n\t\t\t\t\t\tint thisNumber = Integer.parseInt(singleNumberString);\r\n\t\t\t\t\t\tif (allNumbers.contains(thisNumber)) { \r\n\t\t\t\t\t\t\tallNumbers.remove(new Integer(thisNumber));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\t\r\n\t\t\t\t\t\t\tallNumbers.add(thisNumber); \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tCollections.sort(allNumbers);\r\n\t\t\t\t\r\n\t\t\t\tfor (Integer number : allNumbers) {\r\n\t\t\t\twriter.write(number.toString());\r\n\t\t\t\twriter.write(\" \");\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twriter.close();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "6604"}
{"func": "package googlejam6.p627;\nimport java.util.Scanner;\r\n\r\npublic class R1B {\r\n\tpublic static void main(String args[]){\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint T = sc.nextInt();\r\n\t\tfor(int t=1;t<=T;t++){\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tint[] counts = new int[2501];\r\n\t\t\tfor(int i=0;i<N*(2*N-1);i++){\r\n\t\t\t\tcounts[sc.nextInt()]++;\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\"+t+\":\");\r\n\t\t\tfor(int i=0;i<2501;i++){\r\n\t\t\t\tif(counts[i]%2==1){\r\n\t\t\t\t\tSystem.out.print(\" \"+i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\tsc.close();\r\n\t}\r\n}", "idx": "6627"}
{"func": "package googlejam6.p647;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tfinal Scanner sc = new Scanner(new FileReader(\"Bin.in\"));\r\n\t\tfinal BufferedWriter w = new BufferedWriter(new FileWriter(\"Bout.txt\"));\r\n\r\n\t\tif (sc.hasNext()) {\r\n\t\t\tfinal int testNumber = sc.nextInt();\r\n\t\t\tfor (int test = 1; test <= testNumber; test++) {\r\n\t\t\t\tint N = sc.nextInt();\r\n\t\t\t\tString answer = \"\";\r\n\r\n\t\t\t\tHashMap<Integer,Integer> map = new HashMap<Integer,Integer>();\r\n\t\t\t\tfor (int j = 0; j < ((N*N*2)-N); j++) {\r\n\t\t\t\t\tInteger num = sc.nextInt();\r\n\t\t\t\t\tif (!map.containsKey(num)) {\r\n\t\t\t\t\t\tmap.put(num,1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmap.replace(num, map.get(num)+1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tArrayList<Integer> al = new ArrayList<Integer>();\r\n\t\t\t\tfor (Map.Entry<Integer, Integer> entry : map.entrySet()) {\r\n\t\t\t\t\tif ((entry.getValue() %2) ==1) {\r\n\t\t\t\t\t\tal.add(entry.getKey());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tint temp;\r\n\t\t\t\tfor (int i = 1; i < al.size(); i++) {\r\n\t\t\t\t\tfor (int j = i; j > 0; j--) {\r\n\t\t\t\t\t\tif (al.get(j-1) > al.get(j)) {\r\n\t\t\t\t\t\t\ttemp = al.get(j-1);\r\n\t\t\t\t\t\t\tal.set(j-1,al.get(j));\r\n\t\t\t\t\t\t\tal.set(j, temp);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int num : al) {\r\n\t\t\t\t\tanswer += num + \" \";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tw.write(\"Case #\"+test+\": \"+answer+\"\\n\");\r\n\t\t\t\tSystem.out.println(\"Case #\"+test+\": \"+answer);\r\n\t\t\t}\r\n\t\t}\r\n\t\tsc.close();\r\n\t\tw.flush();\r\n\t\tw.close();\r\n\t}\r\n}\r\n\r\n", "idx": "6647"}
{"func": "package googlejam6.p667;\n\n\nimport javax.crypto.NoSuchPaddingException;\nimport java.io.*;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class Main4 {\n\n\n\n    public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException {\n        BufferedReader br = null;\n        FileOutputStream fos = null;\n        BufferedWriter bw = null;\n        try {\n            br = new BufferedReader(new FileReader(\"B-large.in\"));\n            fos = new FileOutputStream(new File(\"outputL.txt\"));\n            bw = new BufferedWriter(new OutputStreamWriter(fos));\n            final int CASES = Integer.valueOf(br.readLine());\n            String[] line = null;\n            int N = 0;\n            StringBuilder sb = null;\n            Set<Integer> result = new HashSet<Integer>();\n            for (int i = 1; i <= CASES; i++) {\n                result = new HashSet<Integer>();\n                sb = new StringBuilder();\n                N = Integer.valueOf(br.readLine());\n                for (int j=1; j <= 2*N - 1; j++) {\n                    line = br.readLine().split(\"\\\\s+\");\n                    for (String stn: line) {\n                        if (result.contains(Integer.valueOf(stn))) {\n                            result.remove(Integer.valueOf(stn));\n                        } else {\n                            result.add(Integer.valueOf(stn));\n                        }\n                    }\n                }\n                ArrayList<Integer> arrayList = new ArrayList<>();\n                arrayList.addAll(result);\n                Collections.sort(arrayList);\n                sb = new StringBuilder();\n                for (int z = 0; z < arrayList.size(); z++) {\n                    if(z != arrayList.size() -1 ) {\n                        sb.append(String.format(\"%s \",arrayList.get(z)));\n                    } else {\n                        sb.append(String.format(\"%s\",arrayList.get(z)));\n                    }\n                }\n\n                bw.write(String.format(\"Case #%s: %s\",i,sb.toString()));\n                bw.newLine();\n            }\n            br.close();\n            bw.close();\n            fos.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "idx": "6667"}
{"func": "package googlejam6.p699;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeSet;\n\n/**\n * Created by james on 16/04/16.\n */\npublic class rankandfile {\n    private static Scanner in;\n\n    public static void main(String[] args) {\n        in = new Scanner(System.in);\n\n        int numCases = in.nextInt();\n        for (int test = 1; test <= numCases; test++) {\n            System.out.print(\"Case #\" + test + \":\");\n            int n = in.nextInt();\n\t\t\tint[] numbers = new int[2501];\n\t\t\tArrays.fill(numbers, 0);\n\t\t\tfor(int i = 0; i < n; i++ ){\n\t\t\t    for(int j = 0; j < 2 * n -1; j ++){\n\t\t\t        numbers[in.nextInt()]++;\n\t\t\t    }\n\t\t\t}\n\t\t\tSet<Integer> solution = new TreeSet<>();\n\t\t\tfor(int i =0; i < numbers.length; i++){\n\t\t\t    if(numbers[i] % 2 != 0){\n\t\t\t        solution.add(i );\n\t\t\t    }\n\t\t\t}\n\t\t\tfor(Integer i : solution){\n\t\t\t    System.out.print(\" \" + i);\n\t\t\t}\n\t\t\tSystem.out.println();\n        }\n\n        System.exit(0);\n    }\n}\n", "idx": "6699"}
{"func": "package googlejam7.p020;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class B\r\n{\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\t//PrintWriter out = new PrintWriter(System.out);\r\n\t\tPrintWriter out = new PrintWriter(new File(\"B.out\"));\r\n\t\t\r\n\t\tfor (int t = Integer.valueOf(in.nextLine()), cs = 1; t > 0; t--, cs++) {\r\n\t\t\tout.print(\"Case #\" + cs + \": \");\r\n\t\t\t\r\n\t\t\tString[] s = in.nextLine().split(\" +\");\r\n\t\t\tchar[] a = s[0].toCharArray();\r\n\t\t\tchar[] b = s[1].toCharArray();\r\n\t\t\tint n = a.length;\r\n\t\t\t\r\n\t\t\tint p = -1;\r\n\t\t\tfor (int i = 0; i < n && p == -1; i++) {\r\n\t\t\t\tif (a[i] != '?' && b[i] != '?' && a[i] != b[i]) {\r\n\t\t\t\t\tp = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (p == -1) {\r\n\t\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\t\tif (a[i] == '?' && b[i] == '?') {\r\n\t\t\t\t\t\ta[i] = b[i] = '0';\r\n\t\t\t\t\t} else if (a[i] == '?') {\r\n\t\t\t\t\t\ta[i] = b[i];\r\n\t\t\t\t\t} else if (b[i] == '?') {\r\n\t\t\t\t\t\tb[i] = a[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tout.println(String.valueOf(a) + \" \" + String.valueOf(b));\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint q = -1;\r\n\t\t\tfor (int i = p-1; i >= 0 && q == -1; i--) {\r\n\t\t\t\tif (a[i] == '?' || b[i] == '?') {\r\n\t\t\t\t\tq = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (q == -1) {\r\n\t\t\t\tboolean gr = a[p] > b[p];\r\n\t\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\t\tif (a[i] == '?') {\r\n\t\t\t\t\t\ta[i] = gr ? '0' : '9';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (b[i] == '?') {\r\n\t\t\t\t\t\tb[i] = gr ? '9' : '0';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tout.println(String.valueOf(a) + \" \" + String.valueOf(b));\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tboolean gr = a[p] > b[p];\r\n\t\t\t\r\n\t\t\tchar[] c1 = Arrays.copyOf(a, n);\r\n\t\t\tchar[] d1 = Arrays.copyOf(b, n);\r\n\t\t\tfor (int i1 = 0; i1 < p; i1++) {\n\t\t\t\tif (c1[i1] == '?' && d1[i1] == '?') {\n\t\t\t\t\tc1[i1] = d1[i1] = '0';\n\t\t\t\t} else if (c1[i1] == '?') {\n\t\t\t\t\tc1[i1] = d1[i1];\n\t\t\t\t} else if (d1[i1] == '?') {\n\t\t\t\t\td1[i1] = c1[i1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i2 = p+1; i2 < c1.length; i2++) {\n\t\t\t\tif (c1[i2] == '?') {\n\t\t\t\t\tc1[i2] = gr ? '0' : '9';\n\t\t\t\t}\n\t\t\t\tif (d1[i2] == '?') {\n\t\t\t\t\td1[i2] = gr ? '9' : '0';\n\t\t\t\t}\n\t\t\t}\r\n\t\t\tlong ans1 = Math.abs(Long.valueOf(String.valueOf(c1)) - Long.valueOf(String.valueOf(d1)));\r\n\t\t\t\r\n\t\t\tfor (int i = q; i >= 0; i--) {\r\n\t\t\t\tif (a[i] != '?' && b[i] != '?') {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tchar[] c2 = Arrays.copyOf(a, n);\r\n\t\t\t\tchar[] d2 = Arrays.copyOf(b, n);\r\n\t\t\t\tif (gr) {\r\n\t\t\t\t\tif (c2[i] == '9' || d2[i] == '0') {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (c2[i] == '?' && d2[i] == '?') {\r\n\t\t\t\t\t\tc2[i] = '0';\r\n\t\t\t\t\t\td2[i] = '1';\r\n\t\t\t\t\t} else if (c2[i] == '?') {\r\n\t\t\t\t\t\tc2[i] = (char)(d2[i] - 1);\r\n\t\t\t\t\t} else if (d2[i] == '?') {\r\n\t\t\t\t\t\td2[i] = (char)(c2[i] + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (c2[i] == '0' || d2[i] == '9') {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (c2[i] == '?' && d2[i] == '?') {\r\n\t\t\t\t\t\tc2[i] = '1';\r\n\t\t\t\t\t\td2[i] = '0';\r\n\t\t\t\t\t} else if (c2[i] == '?') {\r\n\t\t\t\t\t\tc2[i] = (char)(d2[i] + 1);\r\n\t\t\t\t\t} else if (d2[i] == '?') {\r\n\t\t\t\t\t\td2[i] = (char)(c2[i] - 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\n\t\t\t\tboolean gr1 = !gr;\r\n\t\t\t\tfor (int i3 = 0; i3 < i; i3++) {\n\t\t\t\t\tif (c2[i3] == '?' && d2[i3] == '?') {\n\t\t\t\t\t\tc2[i3] = d2[i3] = '0';\n\t\t\t\t\t} else if (c2[i3] == '?') {\n\t\t\t\t\t\tc2[i3] = d2[i3];\n\t\t\t\t\t} else if (d2[i3] == '?') {\n\t\t\t\t\t\td2[i3] = c2[i3];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int i4 = i+1; i4 < c2.length; i4++) {\n\t\t\t\t\tif (c2[i4] == '?') {\n\t\t\t\t\t\tc2[i4] = gr1 ? '0' : '9';\n\t\t\t\t\t}\n\t\t\t\t\tif (d2[i4] == '?') {\n\t\t\t\t\t\td2[i4] = gr1 ? '9' : '0';\n\t\t\t\t\t}\n\t\t\t\t}\r\n\t\t\t\tlong ans2 = Math.abs(Long.valueOf(String.valueOf(c2)) - Long.valueOf(String.valueOf(d2)));\r\n\t\t\t\tif (ans2 < ans1) {\r\n\t\t\t\t\tc1 = c2;\r\n\t\t\t\t\td1 = d2;\r\n\t\t\t\t\tans1 = ans2;\r\n\t\t\t\t} else if (ans2 == ans1) {\r\n\t\t\t\t\tif (Long.valueOf(String.valueOf(c2)) < Long.valueOf(String.valueOf(c1))) {\r\n\t\t\t\t\t\tc1 = c2;\r\n\t\t\t\t\t\td1 = d2;\r\n\t\t\t\t\t\tans1 = ans2;\r\n\t\t\t\t\t} else if (Long.valueOf(String.valueOf(c2)) == Long.valueOf(String.valueOf(c1))) {\r\n\t\t\t\t\t\tif (Long.valueOf(String.valueOf(d2)) < Long.valueOf(String.valueOf(d1))) {\r\n\t\t\t\t\t\t\tc1 = c2;\r\n\t\t\t\t\t\t\td1 = d2;\r\n\t\t\t\t\t\t\tans1 = ans2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tout.println(String.valueOf(c1) + \" \" + String.valueOf(d1));\r\n\t\t}\r\n\r\n\t\tout.flush();\r\n\t}\r\n}\r\n", "idx": "7020"}
{"func": "package googlejam7.p030;\nimport static java.lang.Math.*;\r\nimport static java.lang.System.currentTimeMillis;\r\nimport static java.lang.System.exit;\r\nimport static java.lang.System.arraycopy;\r\nimport static java.util.Arrays.sort;\r\nimport static java.util.Arrays.binarySearch;\r\nimport static java.util.Arrays.fill;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\n@SuppressWarnings(\"unused\")\r\npublic class Main {\r\n\tprivate static final String FILENAME = \"b\";\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tMain r = new Main();\n\t\tr.in = new BufferedReader(new FileReader(Main.FILENAME + \".in\"));\n\t\tr.out = new PrintWriter(Main.FILENAME + \".out\");\n\t\tint T = Integer.parseInt(r.nextToken());\n\t\t\t\tfor (int t = 0; t < T; t++) {\n\t\t\t\t\t\n\t\t\t\t\tint alc = 1000000;\n\t\t\t\t\tint arc = 10000;\n\t\t\t\t\t\n\t\t\t\t\tchar[] s = r.nextToken().toCharArray();\n\t\t\t\t\tchar[] g = r.nextToken().toCharArray();\n\t\t\t\t\tr.len = s.length;\n\t\t\t\t\t\n\t\t\t\t\tfor (int i = 0; i < 1000; i++) {\n\t\t\t\t\t\tchar[] x = String.format(\"%0\" + r.len + \"d\", i).toCharArray();\n\t\t//\t\t\t\tSystem.err.println(x);\n\t\t\t\t\t\tif (x.length > r.len)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tboolean o = true;\n\t\t\t\t\t\tfor (int k = 0; k < r.len; k++) {\n\t\t\t\t\t\t\tif (s[k] != '?' && s[k] != x[k])\n\t\t\t\t\t\t\t\to = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!o)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tfor (int j = 0; j < 1000; j++) {\n\t\t\t\t\t\t\tchar[] y = String.format(\"%0\" + r.len + \"d\", j).toCharArray();\n\t\t\t\t\t\t\tif (y.length > r.len)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\to = true;\n\t\t\t\t\t\t\tfor (int k = 0; k < r.len; k++) {\n\t\t\t\t\t\t\t\tif (g[k] != '?' && g[k] != y[k])\n\t\t\t\t\t\t\t\t\to = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!o)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t//\t\t\t\t\tSystem.err.println(x);\n\t\t//\t\t\t\t\tSystem.err.println(s);\n\t\t//\t\t\t\t\tSystem.err.println(y);\n\t\t//\t\t\t\t\tSystem.err.println(g);\n\t\t\t\t\t\t\tif (abs(i - j) < abs(alc - arc) ||\n\t\t\t\t\t\t\t\t\t(abs(i - j) == abs(alc - arc) && \n\t\t\t\t\t\t\t\t\t(i < alc || (i == alc && j < arc)))) {\n\t\t\t\t\t\t\t\talc = i;\n\t\t\t\t\t\t\t\tarc = j;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tr.out.print(\"Case #\" + (t + 1) + \": \" + \n\t\t\t\t\t\t\tString.format(\"%0\" + r.len + \"d %0\" + r.len + \"d\", alc, arc));\n\t\t\t\t\t\n\t\t\t\t\tr.out.println();\n\t\t\t\t}\n\t\tr.in.close();\n\t\tr.out.close();\t\t\r\n\t}\r\n\r\n\tBufferedReader in;\r\n\tPrintWriter out;\r\n\tStringTokenizer st = new StringTokenizer(\"\");\r\n\r\n\tlong alc = 20000;\r\n\tlong arc = 10000;\r\n\tint len = 0;\r\n\t\r\n\tString nextToken() throws IOException {\r\n\t\twhile (!st.hasMoreTokens())\r\n\t\t\tst = new StringTokenizer(in.readLine());\r\n\t\treturn st.nextToken();\r\n\t}\r\n}\r\n", "idx": "7030"}
{"func": "package googlejam7.p052;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class CloseMatch {\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tScanner in = new Scanner(new BufferedReader(new FileReader(new File(\"B-large.in\")), 256 << 10));\r\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(new File(\"output.txt\")), 256 << 10);\r\n\r\n\t\t\tint testsNumber = in.nextInt();\r\n\t\t\tfor (int testId = 1; testId <= testsNumber; testId++) {\r\n\t\t\t\tString s1 = in.next();\r\n\t\t\t\tString s2 = in.next();\r\n\t\t\t\tint n = s1.length();\r\n\t\t\t\tString br1 = \"\", br2 = \"\";\r\n\t\t\t\tlong bestDiff = Long.MAX_VALUE;\r\n\t\t\t\tlong min1 = Long.MAX_VALUE;\r\n\t\t\t\tlong min2 = Long.MAX_VALUE;\r\n\t\t\t\tout.append(\"Case #\" + testId + \": \");\r\n\t\t\t\tfor (int fd = -1; fd <= 1; fd++) \r\n\t\t\t\t\tfor (int fdp = 0; fdp < n; fdp++) {\r\n\t\t\t\t\t\tString r1 = \"\", r2 = \"\";\r\n\t\t\t\t\t\tint d = 0;\r\n\t\t\t\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\t\t\t\tchar ch1 = s1.charAt(i);\r\n\t\t\t\t\t\t\tchar ch2 = s2.charAt(i);\r\n\t\t\t\t\t\t\tif (ch1 == '?') {\r\n\t\t\t\t\t\t\t\tif (ch2 == '?') {\r\n\t\t\t\t\t\t\t\t\tif (d == 0) {\r\n\t\t\t\t\t\t\t\t\t\tif (i == fdp) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (fd < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tch1 = '0';\r\n\t\t\t\t\t\t\t\t\t\t\t\tch2 = '1';\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif (fd == 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tch1 = '0';\r\n\t\t\t\t\t\t\t\t\t\t\t\tch2 = '0';\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif (fd > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tch1 = '1';\r\n\t\t\t\t\t\t\t\t\t\t\t\tch2 = '0';\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\td = ch1-ch2;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tch1 = '0';\r\n\t\t\t\t\t\t\t\t\t\t\tch2 = '0';\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (d < 0) {\r\n\t\t\t\t\t\t\t\t\t\tch1 = '9';\r\n\t\t\t\t\t\t\t\t\t\tch2 = '0';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (d > 0) {\r\n\t\t\t\t\t\t\t\t\t\tch1 = '0';\r\n\t\t\t\t\t\t\t\t\t\tch2 = '9';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (d == 0) {\r\n\t\t\t\t\t\t\t\t\t\tif (i == fdp) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (fd < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tch1 = (char) Math.max('0', ch2-1);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif (fd == 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tch1 = ch2;\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif (fd > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tch1 = (char) Math.min('9', ch2+1);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\td = ch1-ch2;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tch1 = ch2;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (d < 0) {\r\n\t\t\t\t\t\t\t\t\t\tch1 = '9';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (d > 0) {\r\n\t\t\t\t\t\t\t\t\t\tch1 = '0';\r\n\t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tif (ch2 == '?') {\r\n\t\t\t\t\t\t\t\t\tif (d == 0) {\r\n\t\t\t\t\t\t\t\t\t\tif (i == fdp) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (fd < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tch2 = (char) Math.min('9', ch1+1);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif (fd == 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tch2 = ch1;\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tif (fd > 0) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tch2 = (char) Math.max('0', ch1-1);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\td = ch1-ch2;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tch2 = ch1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (d < 0) {\r\n\t\t\t\t\t\t\t\t\t\tch2 = '0';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse if (d > 0) {\r\n\t\t\t\t\t\t\t\t\t\tch2 = '9';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif (d == 0) {\r\n\t\t\t\t\t\t\t\t\t\tif (ch1 < ch2)\r\n\t\t\t\t\t\t\t\t\t\t\td = -1;\r\n\t\t\t\t\t\t\t\t\t\tif (ch1 == ch2)\r\n\t\t\t\t\t\t\t\t\t\t\td = 0;\r\n\t\t\t\t\t\t\t\t\t\tif (ch1 > ch2)\r\n\t\t\t\t\t\t\t\t\t\t\td = 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tr1 += ch1;\r\n\t\t\t\t\t\t\tr2 += ch2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tlong v1 = Long.valueOf(r1);\r\n\t\t\t\t\tlong v2 = Long.valueOf(r2);\r\n\t\t\t\t\tif (Math.abs(v1-v2) < bestDiff || (Math.abs(v1-v2) == bestDiff && v1 < min1)\r\n\t\t\t\t\t\t\t|| (Math.abs(v1-v2) == bestDiff && v1 == min1 && v2 < min2)) {\r\n\t\t\t\t\t\tbestDiff = Math.abs(v1-v2);\r\n\t\t\t\t\t\tmin1 = v1;\r\n\t\t\t\t\t\tmin2 = v2;\r\n\t\t\t\t\t\tbr1 = r1;\r\n\t\t\t\t\t\tbr2 = r2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tout.append(br1 + \" \" + br2);\r\n\t\t\t\tout.append(\"\\n\");\r\n\t\t\t}\r\n\t\t\tin.close();\r\n\t\t\tout.close();\r\n\t\t}\r\n\t\tcatch (RuntimeException rte) {\r\n\t\t\tthrow rte;\r\n\t\t}\r\n\t\tcatch (Exception e) {\r\n\t\t\tSystem.err.println(\"Error:\" + e.getMessage());\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "7052"}
{"func": "package googlejam7.p055;\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\n\npublic class ProblemBLarge {\n\n    public static void main(String[] args) throws Exception {\n\n        BufferedReader br = new BufferedReader(\n                new InputStreamReader(new FileInputStream(\"B-large.in\")));\n        String line = br.readLine();\n        int T = Integer.parseInt(line);\n        PrintWriter pw = new PrintWriter(\"B-large.out\");\n\n        for (int test = 0; test < T; test++) {\n            line = br.readLine();\n            char[] chars = line.toCharArray();\n            int count = 0;\n            for (int i = 1; i < chars.length; i++) {\n                if (chars[i] != chars[i-1]) {\n                    count++;\n                }\n            }\n            if (chars[chars.length - 1] == '-') {\n                count++;\n            }\n            pw.println(\"Case #\" + (test + 1) + \": \" + count);\n        }\n        pw.close();\n        br.close();\n    }\n}\n", "idx": "7055"}
{"func": "package googlejam7.p092;\n\n\nimport java.util.Scanner;\n\n/**\n * Created by LevinLMKwong on 1/5/16.\n */\npublic class B {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long[] ten = new long[19];\n        ten[0] = 1; ten[1] = 10;\n        for (int i = 2; i <= 18; i++) {\n            ten[i] = ten[i-1]*10;\n        }\n        int T = in.nextInt();\n        for (int t=1; t<=T; t++) {\n            String input = in.next();\n            String C = \"\";\n            for (int i = 0; i < input.length(); i++) {\n                C += input.charAt(input.length()-i-1);\n            }\n            input = in.next();\n            String J = \"\";\n            for (int i = 0; i < input.length(); i++) {\n                J += input.charAt(input.length()-i-1);\n            }\n            // 0 : C small , 1 : equal , 2 : C large\n            long[][] f = new long[C.length()][3];\n            String[][] ans_c = new String[C.length()][3];\n            String[][] ans_j = new String[C.length()][3];\n            for (int i = 0; i < C.length(); i++) {\n                boolean[] a = new boolean[3];\n                for (int c = 0; c <= 9; c++) {\n                    if (C.charAt(i) != '?' && C.charAt(i) != ('0'+c)) {\n                        continue;\n                    }\n                    for (int j = 0; j <= 9; j++) {\n                        if (J.charAt(i) != '?' && J.charAt(i) != ('0'+j)) {\n                            continue;\n                        }\n                        long small = 0, equal = 0, large = 0;\n                        String ans_small_c = \"\", ans_equal_c = \"\", ans_large_c = \"\";\n                        String ans_small_j = \"\", ans_equal_j = \"\", ans_large_j = \"\";\n                        long temp = (c-j)*ten[i];\n                        if (c > j) {\n                            small = temp + ((i>0)? f[i-1][0] : 0);\n                            ans_small_c = (i>0)? ans_c[i-1][0] : \"\"; ans_small_j = (i>0)? ans_j[i-1][0] : \"\";\n                            equal = temp + ((i>0)? f[i-1][0] : 0);\n                            ans_equal_c = (i>0)? ans_c[i-1][0] : \"\"; ans_equal_j = (i>0)? ans_j[i-1][0] : \"\";\n                            large = temp + ((i>0)? f[i-1][2] : 0);\n                            ans_large_c = (i>0)? ans_c[i-1][2] : \"\"; ans_large_j = (i>0)? ans_j[i-1][2] : \"\";\n                        }\n                        if (c == j) {\n                            small = (i>0)? f[i-1][0] : 0;\n                            ans_small_c = (i>0)? ans_c[i-1][0] : \"\"; ans_small_j = (i>0)? ans_j[i-1][0] : \"\";\n                            equal = (i>0)? f[i-1][1] : 0;\n                            ans_equal_c = (i>0)? ans_c[i-1][1] : \"\"; ans_equal_j = (i>0)? ans_j[i-1][1] : \"\";\n                            large = (i>0)? f[i-1][2] : 0;\n                            ans_large_c = (i>0)? ans_c[i-1][2] : \"\"; ans_large_j = (i>0)? ans_j[i-1][2] : \"\";\n                        }\n                        if (c < j) {\n                            small = temp + ((i>0)? f[i-1][0] : 0);\n                            ans_small_c = (i>0)? ans_c[i-1][0] : \"\"; ans_small_j = (i>0)? ans_j[i-1][0] : \"\";\n                            equal = temp + ((i>0)? f[i-1][2] : 0);\n                            ans_equal_c = (i>0)? ans_c[i-1][2] : \"\"; ans_equal_j = (i>0)? ans_j[i-1][2] : \"\";\n                            large = temp + ((i>0)? f[i-1][2] : 0);\n                            ans_large_c = (i>0)? ans_c[i-1][2] : \"\"; ans_large_j = (i>0)? ans_j[i-1][2] : \"\";\n                        }\n                        if (!a[0] || small < f[i][0]) {\n                            f[i][0] = small; a[0] = true;\n                            ans_c[i][0] = (char) (c+'0') + ans_small_c;\n                            ans_j[i][0] = (char) (j+'0') + ans_small_j;\n                        }\n                        if (!a[1] || Math.abs(equal) < Math.abs(f[i][1])) {\n                            f[i][1] = equal; a[1] = true;\n                            ans_c[i][1] = (char) (c+'0') + ans_equal_c;\n                            ans_j[i][1] = (char) (j+'0') + ans_equal_j;\n                        }\n                        if (!a[2] || large > f[i][2]) {\n                            f[i][2] = large; a[2] = true;\n                            ans_c[i][2] = (char) (c+'0') + ans_large_c;\n                            ans_j[i][2] = (char) (j+'0') + ans_large_j;\n                        }\n                    }\n                }\n            }\n            System.out.format(\"Case #%d: %s %s\\n\", t, ans_c[C.length()-1][1], ans_j[C.length()-1][1]);\n        }\n    }\n}\n", "idx": "7092"}
{"func": "package googlejam7.p094;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.util.ArrayList;\r\n\r\npublic class B {\r\n\tpublic static void main(String args[]) {\r\n\t\ttry (BufferedReader reader = new BufferedReader(new FileReader(\"B-large.in\"))) {\r\n\t\t\t\r\n\t\t    int T = Integer.parseInt(reader.readLine());\r\n\t\t    String s;\r\n\t\t    for (int t = 1; t <= T; t++) {\r\n\t\t    \ts = reader.readLine();\r\n\t\t    \t//System.out.println(s);\r\n\t\t    \tString a = s.split(\" \")[0];\r\n\t\t    \tString b = s.split(\" \")[1];\r\n\t\t    \tString a2 = a;\r\n\t\t    \tString b2 = b;\r\n\t\t    \t\r\n\t\t    \tif (a.equals(b)) {\r\n\t\t    \t\ta = a.replace('?', '0');\r\n\t\t    \t\tb = a;\r\n\t\t    \t\tSystem.out.println(\"Case #\"+t+\": \"+a+\" \"+b);\r\n\t\t    \t} else {\r\n\t\t    \t\tArrayList<String> as = new ArrayList<String>();\r\n\t\t    \t\tArrayList<String> bs = new ArrayList<String>();\r\n\t\t    \t\t//as.add(a);\r\n\t\t    \t\t//bs.add(b);\r\n\t\t    \t\tint po = 0;\r\n\t\t    \t\twhile (a.indexOf(\"?\") != -1 || b.indexOf(\"?\") != -1) {\r\n\t\t    \t\t\tif (a.charAt(po) == '?' && b.charAt(po) == '?') {\r\n\t\t    \t\t\t\tas.add(a.replaceFirst(\"\\\\?\", \"1\").replaceAll(\"\\\\?\", \"0\"));\r\n\t\t    \t\t\t\tbs.add(b.replaceFirst(\"\\\\?\", \"0\").replaceAll(\"\\\\?\", \"9\"));\r\n\t\t    \t\t\t\t\r\n\t\t    \t\t\t\tbs.add(b.replaceFirst(\"\\\\?\", \"1\").replaceAll(\"\\\\?\", \"0\"));\r\n\t\t    \t\t\t\tas.add(a.replaceFirst(\"\\\\?\", \"0\").replaceAll(\"\\\\?\", \"9\"));\r\n\t\t    \t\t\t\t\r\n\t\t    \t\t\t\ta = a.replaceFirst(\"\\\\?\", \"0\");\r\n\t\t    \t\t\t\tb = b.replaceFirst(\"\\\\?\", \"0\");\r\n\t\t    \t\t\t} else if (a.charAt(po) == '?') {\r\n\t\t    \t\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t    \t\t\t\tsb.append(b.charAt(po));\r\n\t\t    \t\t\t\tint bv = Integer.parseInt(sb.toString());\r\n\t\t    \t\t\t\t\r\n\t\t    \t\t\t\tif (bv < 9) {\r\n\t\t    \t\t\t\tas.add(a.replaceFirst(\"\\\\?\", \"\"+(bv+1)).replaceAll(\"\\\\?\", \"0\"));\r\n\t\t    \t\t\t\tbs.add(b.replaceAll(\"\\\\?\", \"9\"));\r\n\t\t    \t\t\t\t}\r\n\t\t    \t\t\t\tif (bv > 0) {\r\n\t\t    \t\t\t\tbs.add(b.replaceAll(\"\\\\?\", \"0\"));\r\n\t\t    \t\t\t\tas.add(a.replaceFirst(\"\\\\?\", \"\"+(bv-1)).replaceAll(\"\\\\?\", \"9\"));\r\n\t\t    \t\t\t\t}\r\n\t\t    \t\t\t\ta = a.replaceFirst(\"\\\\?\", \"\"+bv);\r\n\t\t    \t\t\t} else if (b.charAt(po) == '?') {\r\n\t\t    \t\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t    \t\t\t\tsb.append(a.charAt(po));\r\n\t\t    \t\t\t\tint av = Integer.parseInt(sb.toString());\r\n\t\t    \t\t\t\t\r\n\t\t    \t\t\t\tif (av < 9) {\r\n\t\t    \t\t\t\tbs.add(b.replaceFirst(\"\\\\?\", \"\"+(av+1)).replaceAll(\"\\\\?\", \"0\"));\r\n\t\t    \t\t\t\tas.add(a.replaceAll(\"\\\\?\", \"9\"));\r\n\t\t    \t\t\t\t}\r\n\t\t    \t\t\t\tif (av > 0) {\r\n\t\t    \t\t\t\tas.add(a.replaceAll(\"\\\\?\", \"0\"));\r\n\t\t    \t\t\t\tbs.add(b.replaceFirst(\"\\\\?\", \"\"+(av-1)).replaceAll(\"\\\\?\", \"9\"));\r\n\t\t    \t\t\t\t}\r\n\t\t    \t\t\t\t\r\n\t\t    \t\t\t\tb = b.replaceFirst(\"\\\\?\", \"\"+av);\r\n\t\t    \t\t\t} else {\r\n\t\t    \t\t\t\tif (a.charAt(po) > b.charAt(po)) {\r\n\t\t\t    \t\t\t\tas.add(a.replaceAll(\"\\\\?\", \"0\"));\r\n\t\t\t    \t\t\t\tbs.add(b.replaceAll(\"\\\\?\", \"9\"));\r\n\t\t    \t\t\t\t}\r\n\t\t    \t\t\t\tif (a.charAt(po) < b.charAt(po)) {\r\n\t\t\t    \t\t\t\tbs.add(b.replaceAll(\"\\\\?\", \"0\"));\r\n\t\t\t    \t\t\t\tas.add(a.replaceAll(\"\\\\?\", \"9\"));\r\n\t\t    \t\t\t\t}\r\n\t\t    \t\t\t}\r\n\t\t    \t\t\tpo++;\r\n\t\t    \t\t}\r\n\t\t    \t\tas.add(a);\r\n\t\t    \t\tbs.add(b);\r\n\t\t    \t\tint mini = 0;\r\n\t\t    \t\tlong min2 = Long.MAX_VALUE;\r\n\t\t    \t\tlong minav = Long.MAX_VALUE;\r\n\t\t    \t\tlong minbv = Long.MAX_VALUE;\r\n\t\t    \t\tfor (int i = 0; i < as.size(); i++) {\r\n\t\t    \t\t\tlong av = Long.parseLong(as.get(i));\r\n\t\t    \t\t\tlong bv = Long.parseLong(bs.get(i));\r\n\t\t    \t\t\tlong diff = Math.abs(\r\n\t\t    \t\t\t\t\tLong.parseLong(as.get(i)) -\r\n\t\t    \t\t\t\t\tLong.parseLong(bs.get(i))\r\n\t\t    \t\t\t\t\t);\r\n\t\t    \t\t\tif (diff < min2) {\r\n\t\t    \t\t\t\tmin2 = diff;\r\n\t\t    \t\t\t\tmini = i;\r\n\t\t    \t\t\t\tminav = av;\r\n\t\t    \t\t\t\tminbv = bv;\r\n\t\t    \t\t\t} else if (diff == min2) {\r\n\t\t    \t\t\t\tif (av < minav) {\r\n\t\t\t    \t\t\t\tmin2 = diff;\r\n\t\t\t    \t\t\t\tmini = i;\r\n\t\t\t    \t\t\t\tminav = av;\r\n\t\t\t    \t\t\t\tminbv = bv;\r\n\t\t    \t\t\t\t} else if (av == minav) {\r\n\t\t    \t\t\t\t\tif (bv < minbv) {\r\n\t\t\t\t    \t\t\t\tmin2 = diff;\r\n\t\t\t\t    \t\t\t\tmini = i;\r\n\t\t\t\t    \t\t\t\tminav = av;\r\n\t\t\t\t    \t\t\t\tminbv = bv;\r\n\t\t    \t\t\t\t\t}\r\n\t\t    \t\t\t\t}\r\n\t\t    \t\t\t}\r\n\t\t    \t\t}\r\n\t\t    \t\tSystem.out.println(\"Case #\"+t+\": \"+as.get(mini)+\" \"+bs.get(mini));\r\n\t\t    \t\t\r\n\t\t  /*  \t\t\r\n\t\t    \t\tString temp = a2 + b2;\r\n\t\t    \t\tArrayList<String> p = new ArrayList<String>();\r\n\t\t    \t\tp.add(temp);\r\n\t\t    \t\twhile (p.get(0).indexOf(\"?\") != -1) {\r\n\t\t    \t\t\tint size = p.size();\r\n\t\t    \t\t\tArrayList<String> np = new ArrayList<String>();\r\n\t\t    \t\t\tfor (int i = 0; i < p.size(); i++) {\r\n\t\t    \t\t\t\tString tempp = p.get(i);\r\n\t\t\t\t    \t\tfor (int j = 0; j < 10; j++) {\r\n\t\t\t\t    \t\t\tnp.add(tempp.replaceFirst(\"\\\\?\", \"\"+j));\r\n\t\t\t\t    \t\t}\r\n\t\t    \t\t\t}\r\n\t\t    \t\t\tp = np;\r\n\t\t    \t\t}\r\n\t\t    \t\tString mins = \"\";\r\n\t\t    \t\tint min = Integer.MAX_VALUE;\r\n\t\t    \t\tfor (String pos : p) {\r\n\t\t    \t\t\tint diff = Math.abs(\r\n\t\t    \t\t\t\t\t\tInteger.parseInt(pos.substring(0, a.length())) -\r\n\t\t    \t\t\t\t\t\tInteger.parseInt(pos.substring(a.length(), a.length()*2))\r\n\t\t    \t\t\t\t\t);\r\n\t\t    \t\t\tif (diff < min) {\r\n\t\t    \t\t\t\tmin = diff;\r\n\t\t    \t\t\t\tmins = pos;\r\n\t\t    \t\t\t}\r\n\t\t    \t\t}\r\n\t\t    \t\tSystem.out.println(\"Case #\"+t+\": \"+mins.substring(0, a.length())+\" \"+mins.substring(a.length(), a.length()*2));\r\n*/\r\n\t\t    \t}\r\n\t\t    \t//System.out.println(\"here\");\r\n\t\t    }\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace(System.err);\r\n\t\t\t//System.out.println(e.toString());\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n", "idx": "7094"}
{"func": "package googlejam7.p104;\n\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class Solution {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        FileInputStream fileInputStream = new FileInputStream(\"/Users/ratmir/Downloads/B-small-attempt0 (2).in\");\n        //Scanner sc = new Scanner(System.in);\n        Scanner sc = new Scanner(fileInputStream);\n        FileOutputStream outputStream = new FileOutputStream(\"/Users/ratmir/Documents/code/hackerrank/algs/src/codejam/y2016/r2/z2/z2.txt\");\n        PrintWriter printWriter = new PrintWriter(outputStream);\n//        for (int i=0;i<100000;i++) {\n//            System.out.println(getM(i+1));\n//        }\n        int tn = sc.nextInt();\n        sc.nextLine();\n        for (int ti = 1; ti <= tn; ti++) {\n            String s = sc.nextLine();\n            String[] strings = s.split(\" \");\n            int mx = (int) Math.pow(10, strings[0].length());\n            int v1 = -1;\n            int v2 = -1;\n            String x1 = \"\";\n            String x2 = \"\";\n            for (int n1=0;n1<mx;n1++) {\n                for (int n2=0; n2<mx;n2++) {\n                    String s1 = String.valueOf(mx+n1);\n                    String s2 = String.valueOf(mx+n2);\n                    boolean flag = true;\n                    for (int i=0;i<strings[0].length();i++) {\n                        if ((strings[0].charAt(i)=='?') || (strings[0].charAt(i)==s1.charAt(i+1))) {\n\n                        } else {\n                            flag = false;\n                        }\n                    }\n                    for (int i=0;i<strings[1].length();i++) {\n                        if ((strings[1].charAt(i)=='?') || (strings[1].charAt(i)==s2.charAt(i+1))) {\n\n                        } else {\n                            flag = false;\n                        }\n                    }\n                    if (flag) {\n                        int dv = Math.abs(v1-v2);\n                        int dn = Math.abs(n1-n2);\n                        boolean doit = v1==-1;\n                        if (!doit && (dn<dv)) {\n                            doit = true;\n                        }\n                        if (!doit && (dn==dv) && (n1<v1)) {\n                            doit = true;\n                        }\n                        if (!doit && (dn==dv) && (n1==v1) && (n2<v2)) {\n                            doit = true;\n                        }\n                        if (doit) {\n                            v1 = n1;\n                            v2 = n2;\n                            x1 = s1.substring(1);\n                            x2 = s2.substring(1);\n                        }\n                    }\n                }\n            }\n            String res = \"Case #\" + ti + \": \" + x1+\" \"+x2;\n            printWriter.write(res + \"\\n\");\n            System.out.println(res);\n        }\n        printWriter.close();\n    }\n\n}\n", "idx": "7104"}
{"func": "package googlejam7.p115;\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Collections;\r\nimport java.util.LinkedList;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class B {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner sc = new Scanner(new File(\"B.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new File(\"B.out\"));\r\n\t\tint T = sc.nextInt();\r\n\t\tfor(int t=1;t<=T;t++){\r\n\t\t\tchar[] A = sc.next().toCharArray();\r\n\t\t\tchar[] B = sc.next().toCharArray();\r\n\t\t\tString AA = String.valueOf(A);\r\n\t\t\tString BB = String.valueOf(B);\r\n\t\t\tint delta = Integer.MAX_VALUE;\r\n\t\t\t\r\n\t\t\tfor(int a=0;a<999;a++){\r\n\t\t\t\tchar[] tempA = A.clone();\r\n\t\t\t\tif(tempA.length>0&&tempA[0]=='?'){\r\n\t\t\t\t\ttempA[0] = (char)('0' + ((a/100)%10));\r\n\t\t\t\t}\r\n\t\t\t\tif(tempA.length>1&&tempA[1]=='?'){\r\n\t\t\t\t\ttempA[1] = (char)('0' + ((a/10)%10));\r\n\t\t\t\t}\r\n\t\t\t\tif(tempA.length>2&&tempA[2]=='?'){\r\n\t\t\t\t\ttempA[2] = (char)('0' + (a%10));\r\n\t\t\t\t}\r\n\t\t\t\tfor(int b=0;b<999;b++){\r\n\t\t\t\t\tchar[] tempB = B.clone();\r\n\t\t\t\t\tif(tempB.length>0&&tempB[0]=='?'){\r\n\t\t\t\t\t\ttempB[0] = (char)('0' + ((b/100)%10));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tempB.length>1&&tempB[1]=='?'){\r\n\t\t\t\t\t\ttempB[1] = (char)('0' + ((b/10)%10));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tempB.length>2&&tempB[2]=='?'){\r\n\t\t\t\t\t\ttempB[2] = (char)('0' + (b%10));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tint AAA = Integer.parseInt(String.valueOf(tempA));\r\n\t\t\t\t\tint BBB = Integer.parseInt(String.valueOf(tempB));\r\n\t\t\t\t\tint diff = Math.abs(AAA-BBB);\r\n\t\t\t\t\tif(diff<delta){\r\n\t\t\t\t\t\tdelta=diff;\r\n\t\t\t\t\t\tAA=String.valueOf(tempA);\r\n\t\t\t\t\t\tBB=String.valueOf(tempB);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.printf(\"Case #%d: %s %s%n\",t,AA,BB);\r\n\t\t\tout.printf(\"Case #%d: %s %s%n\",t,AA,BB);\r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "7115"}
{"func": "package googlejam7.p124;\n\nimport java.util.*;\n\npublic class B {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n\n        for (int t = 1; t <= T; ++t) {\n            String s1 = new StringBuilder(in.next()).reverse().toString();\n            String s2 = new StringBuilder(in.next()).reverse().toString();\n\n            String res1 = \"\";\n            String res2 = \"\";\n            int diff = 1000;\n            int minc = 1000;\n            int mino = 1000;\n\n            for (int a1 = 0; a1 < 10; ++a1) {\n                if (s1.length() == 3 && s1.charAt(2) != '?' && s1.charAt(2) != '0' + a1) continue;\n                for (int a2 = 0; a2 < 10; ++a2) {\n                    if (s1.length() >= 2 && s1.charAt(1) != '?' && s1.charAt(1) != '0' + a2) continue;\n                    for (int a3 = 0; a3 < 10; ++a3) {\n                        if (s1.charAt(0) != '?' && s1.charAt(0) != '0' + a3) continue;\n\n                        StringBuilder ss1 = new StringBuilder();\n                        ss1.append((char)('0' + a3));\n                        if (s1.length() >= 2) ss1.append((char)('0' + a2));\n                        if (s1.length() == 3) ss1.append((char)('0' + a1));\n                        ss1.reverse();\n\n\n                        for (int a4 = 0; a4 < 10; ++a4) {\n                            if (s2.length() == 3 && s2.charAt(2) != '?' && s2.charAt(2) != '0' + a4) continue;\n                            for (int a5 = 0; a5 < 10; ++a5) {\n                                if (s2.length() >= 2 && s2.charAt(1) != '?' && s2.charAt(1) != '0' + a5) continue;\n                                for (int a6 = 0; a6 < 10; ++a6) {\n                                    if (s2.charAt(0) != '?' && s2.charAt(0) != '0' + a6) continue;\n\n                                    StringBuilder ss2 = new StringBuilder();\n                                    ss2.append((char)('0' + a6));\n                                    if (s2.length() >= 2) ss2.append((char)('0' + a5));\n                                    if (s2.length() == 3) ss2.append((char)('0' + a4));\n                                    ss2.reverse();\n\n                                    int score1 = Integer.parseInt(ss1.toString());\n                                    int score2 = Integer.parseInt(ss2.toString());\n\n                                    int curdiff = Math.abs(score1 - score2);\n                                    if (curdiff < diff) {\n                                        res1 = ss1.toString();\n                                        res2 = ss2.toString();\n                                        diff = curdiff;\n                                        minc = score1;\n                                        mino = score2;\n                                    } else if (curdiff == diff) {\n                                        if (score1 < minc || (score1 == minc && score2 < mino)) {\n                                            res1 = ss1.toString();\n                                            res2 = ss2.toString();\n                                            diff = curdiff;\n                                            minc = score1;\n                                            mino = score2;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            System.out.println(\"Case #\" + t + \": \" + res1 + \" \" + res2);\n        }\n    }\n}\n", "idx": "7124"}
{"func": "package googlejam7.p135;\n//Uses Java 8\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.text.*;\r\n\r\npublic class GCJ161BB {\r\n\r\n    static Scanner sc = new Scanner(System.in);\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        //Generates output file, can be removed to get everything from default output\r\n        System.setOut(new PrintStream(new BufferedOutputStream(new FileOutputStream(\"C://Users/s142589/Desktop/output.txt\")), true));\r\n\r\n        int runs = sc.nextInt();\r\n        for (int i = 0; i < runs; i++) {\r\n            GCJ161BB r = new GCJ161BB();\n\t\t\tString A = GCJ161BB.sc.next();\n\t\t\tString B = GCJ161BB.sc.next();\n\t\t\tDecimalFormat format;\n\t\t\t\n\t\t\tswitch (A.length()) {\n\t\t\tcase 1:\n\t\t\t    format = new DecimalFormat(\"#0\");\n\t\t\t    break;\n\t\t\tcase 2:\n\t\t\t    format = new DecimalFormat(\"#00\");\n\t\t\t    break;\n\t\t\tdefault:\n\t\t\t    format = new DecimalFormat(\"#000\");\n\t\t\t    break;\n\t\t\t}\n\t\t\t\n\t\t\tString bestA = A;\n\t\t\tString bestB = B;\n\t\t\tint bestDif = Integer.MAX_VALUE / 2;\n\t\t\tfor (int i1 = 0; i1 < Math.pow(10, A.length()); i1++) {\n\t\t\t    String thisA = format.format(i1);\n\t\t\t    boolean success = true;\n\t\t\t    for (int j = 0; j < A.length(); j++) {\n\t\t\t        if (!((A.charAt(j) == '?' || (A.charAt(j) == thisA.charAt(j))))) {\n\t\t\t            success = false;\n\t\t\t        }\n\t\t\t    }\n\t\t\t    if (!success) {\n\t\t\t        continue;\n\t\t\t    }\n\t\t\t    for (int j = 0; j < Math.pow(10, A.length()); j++) {\n\t\t\t        String thisB = format.format(j);\n\t\t\t        boolean success2 = true;\n\t\t\t        for (int k = 0; k < A.length(); k++) {\n\t\t\t            if (!(B.charAt(k) == '?' || (B.charAt(k) == thisB.charAt(k)))) {\n\t\t\t                success2 = false;\n\t\t\t            }\n\t\t\t        }\n\t\t\t        if (!success2) {\n\t\t\t            continue;\n\t\t\t        }\n\t\t\t        int diff = Math.abs(Integer.valueOf(thisB)-Integer.valueOf(thisA));\n\t\t\t        if(diff<bestDif) {\n\t\t\t            bestA = thisA;\n\t\t\t            bestB = thisB;\n\t\t\t            bestDif = diff;\n\t\t\t        }\n\t\t\t\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tString answer = \"Case #\" + (i + 1) + \": \" + bestA+\" \"+bestB;\n\t\t\tSystem.out.println(answer);\r\n        }\r\n    }\r\n}\r\n", "idx": "7135"}
{"func": "package googlejam7.p156;\n\n\nimport java.io.*;\nimport java.util.*;\n\npublic class CloseMatch {\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner input = new Scanner(new File(args[0]));\n\t\tPrintWriter output = new PrintWriter(new File(args[1]));\n\t\t\n\t\tint t = input.nextInt();\n\t\tinput.nextLine();\n\t\t\n\t\tfor (int i = 0; i < t; ++i) {\n\t\t\tString[] scores = input.nextLine().trim().split(\"\\\\s+\");\n\t\t\tString closestMatch = closestMatch(scores[0].toCharArray(), scores[1].toCharArray());\n\t\t\toutput.printf(\"Case #%d: %s%n\", (i + 1), closestMatch);;\n\t\t}\n\t\t\n\t\tinput.close();\n\t\toutput.close();\n\t}\n\t\n\tprivate static Character[] objectify(char[] a) {\n\t\tCharacter[] o = new Character[a.length];\n\t\tfor (int i = 0; i < a.length; ++i) o[i] = a[i];\n\t\treturn o;\n\t}\n\t\n\tprivate static final String closestMatch(char[] cs, char[] js) {\n\t\tString cPat = new String(cs).replace(\"?\", \"%c\");\n\t\tString jPat = new String(js).replace(\"?\", \"%c\");\n\t\t\n\t\tString cc = new String(cs);\n\t\tString jj = new String(js);\n\t\tint b = 0;\n\t\tfor (int i1 = 0; i1 < cs.length; ++i1) if (cs[i1] == '?') ++b;\n\t\t\n\t\t\n\t\tint lbc = b;\n\t\tint b = 0;\n\t\tfor (int i2 = 0; i2 < js.length; ++i2) if (js[i2] == '?') ++b;\n\t\tint lbj = b;\n\t\t\n\t\tint ppc = lbc == 0 ? Integer.parseInt(cc) : 0;\n\t\tint ppj = lbj == 0 ? Integer.parseInt(jj) : 0;\n\t\t\n\t\tint cBound = (int) Math.pow(10, lbc);\n\t\tint jBound = (int) Math.pow(10, lbj);\n\t\t\n\t\tint minDiff = Integer.MAX_VALUE;\n\t\tint cRep = -1;\n\t\tint jRep = -1;\n\t\t\n\t\tfor (int i = 0; i < cBound; ++i) {\n\t\t\tfor (int j = 0; j < jBound; ++j) {\n\t\t\t\tint pc = lbc == 0 ? ppc : Integer.parseInt(String.format(cPat, objectify(String.format(\"%0\" + lbc + \"d\", i).toCharArray())));\n\t\t\t\tint pj = lbj == 0 ? ppj : Integer.parseInt(String.format(jPat, objectify(String.format(\"%0\" + lbj + \"d\", j).toCharArray())));\n\t\t\t\tif (Math.abs(pc - pj) < minDiff) {\n\t\t\t\t\tminDiff = Math.abs(pc - pj);\n\t\t\t\t\tcRep = pc;\n\t\t\t\t\tjRep = pj;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn String.format(\"%0\" + cs.length + \"d %0\" + cs.length + \"d\", cRep, jRep);\n\t}\n\n}\n", "idx": "7156"}
{"func": "package googlejam7.p170;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n/**\r\n *\r\n * @author Madi\r\n */\r\npublic class CodeJam2_B {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException, IOException {\r\n        try (BufferedReader br = new BufferedReader(new FileReader(\"C:/Users/Madi/codejam/B-small-practice.in\"));\r\n                BufferedWriter bw = new BufferedWriter(new FileWriter(\"C:/Users/Madi/codejam/B-small-practice.out\"))) {\r\n\r\n            int t = Integer.parseInt(br.readLine());\r\n\r\n            for (int i = 0; i < t; i++) {\r\n                String[] s = br.readLine().split(\" \");\n\t\t\t\tString s1 = s[0];\n\t\t\t\tString s2 = s[1];\r\n                int n = s1.length();\n\t\t\t\tint x = (int) Math.pow(10, n - 1);\n\t\t\t\tint y = (int) Math.pow(10, n);\n\t\t\t\t\n\t\t\t\tString a;\n\t\t\t\tString b;\n\t\t\t\t\n\t\t\t\tint min = Integer.MAX_VALUE;\n\t\t\t\tint minSum = Integer.MAX_VALUE;\n\t\t\t\tint minb = Integer.MAX_VALUE;\n\t\t\t\tint mina = Integer.MAX_VALUE;\n\t\t\t\t\n\t\t\t\tfor (int i1 = 0; i1 < y; i1++) {\n\t\t\t\t    for (int j = 0; j < y; j++) {\n\t\t\t\t        a = String.valueOf(i1);\n\t\t\t\t        while (a.length() < n) {\n\t\t\t\t            a = \"0\" + a;\n\t\t\t\t        }\n\t\t\t\t        b = String.valueOf(j);\n\t\t\t\t        while (b.length() < n) {\n\t\t\t\t            b = \"0\" + b;\n\t\t\t\t        }\n\t\t\t\t        boolean eq = true;\n\t\t\t\t        for (int k = 0; k < n; k++) {\n\t\t\t\t            if (s1.charAt(k) != '?' && s1.charAt(k) != a.charAt(k)) {\n\t\t\t\t                eq = false;\n\t\t\t\t                break;\n\t\t\t\t            }\n\t\t\t\t        }\n\t\t\t\t\n\t\t\t\t        if (eq) {\n\t\t\t\t            for (int k = 0; k < n; k++) {\n\t\t\t\t                if (s2.charAt(k) != '?' && s2.charAt(k) != b.charAt(k)) {\n\t\t\t\t                    eq = false;\n\t\t\t\t                    break;\n\t\t\t\t                }\n\t\t\t\t            }\n\t\t\t\t        }\n\t\t\t\t\n\t\t\t\t        if (eq) {\n\t\t\t\t            if (min > Math.abs(i1 - j)) {\n\t\t\t\t                min = Math.abs(i1 - j);\n\t\t\t\t                minSum = i1 + j;\n\t\t\t\t                mina = i1;\n\t\t\t\t                minb = j;\n\t\t\t\t            } else if (min == Math.abs(i1 - j)) {\n\t\t\t\t                if (minSum > i1 + j) {\n\t\t\t\t                    minSum = i1 + j;\n\t\t\t\t                    mina = i1;\n\t\t\t\t                    minb = j;\n\t\t\t\t                } else if (minSum == i1 + j) {\n\t\t\t\t                    if (minb > j) {\n\t\t\t\t                        minb = j;\n\t\t\t\t                        mina = i1;\n\t\t\t\t                    }\n\t\t\t\t                }\n\t\t\t\t            }\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\ta = String.valueOf(mina);\n\t\t\t\tb = String.valueOf(minb);\n\t\t\t\twhile (a.length() < n) {\n\t\t\t\t    a = \"0\" + a;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twhile (b.length() < n) {\n\t\t\t\t    b = \"0\" + b;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbw.write(\"Case #\" + (i + 1) + \": \");\n\t\t\t\tbw.write(a + \" \" + b);\n\t\t\t\tbw.write(\"\\n\");\n\t\t\t\tbw.flush();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n", "idx": "7170"}
{"func": "package googlejam7.p171;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nimport static java.lang.Math.*;\r\nimport static java.util.Arrays.*;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws IOException {\r\n    String        pb        = \"A\";\r\n    Scanner       sc        = new Scanner(new FileReader(new File(pb+\".in\")));\r\n    PrintWriter   out       = new PrintWriter(new File(pb+\".out\"));\r\n\t\tStringBuilder resultat  = new StringBuilder(\"\");\r\n\t\t//long time = System.currentTimeMillis();\r\n\t\t\r\n\t\t//TEST CASES----------------------------------------------------\r\n\t\tint TC = sc.nextInt();\r\n\t\tsc.nextLine();\r\n    for (int tc = 1; tc <= TC; tc++) {\r\n      if(tc!=1) resultat.append(\"\\n\");\r\n      resultat.append(\"Case #\"+tc+\": \");\r\n    \r\n      //READ----------------------------------------------------\r\n      String[] scores = sc.nextLine().split(\" \");\r\n      ArrayList<Integer> scoreA = new ArrayList<Integer>();\r\n      ArrayList<Integer> scoreB = new ArrayList<Integer>();\r\n      \r\n      \r\n      String score1 = scores[0];\r\n      ArrayList<String> scoreStrA = new ArrayList<String>();\r\n      scoreStrA.add(score1);\r\n      for (int i = 0; i < score1.length(); i++)\r\n      {\r\n        if(score1.charAt(i)!='?')\r\n          continue;\r\n        ArrayList<String> scoreStrANew = new ArrayList<String>();\r\n        for (int j = 0; j <= 9; j++)\r\n        {\r\n          for (int k = 0; k < scoreStrA.size(); k++)\r\n          {\r\n            scoreStrANew.add(scoreStrA.get(k).substring(0, i)+j+scoreStrA.get(k).substring(i+1));\r\n          }\r\n        }\r\n        scoreStrA = scoreStrANew;\r\n        //System.out.println(scoreStrA);\r\n      }\r\n      \r\n      for (int i = 0; i < scoreStrA.size(); i++)\r\n      {\r\n        scoreA.add(Integer.parseInt(scoreStrA.get(i)));\r\n      }\r\n      \r\n      \r\n      \r\n      \r\n      \r\n      String score2 = scores[1];\r\n      ArrayList<String> scoreStrB = new ArrayList<String>();\r\n      scoreStrB.add(score2);\r\n      for (int i = 0; i < score2.length(); i++)\r\n      {\r\n        if(score2.charAt(i)!='?')\r\n          continue;\r\n        ArrayList<String> scoreStrBNew = new ArrayList<String>();\r\n        for (int j = 0; j <= 9; j++)\r\n        {\r\n          for (int k = 0; k < scoreStrB.size(); k++)\r\n          {\r\n            scoreStrBNew.add(scoreStrB.get(k).substring(0, i)+j+scoreStrB.get(k).substring(i+1));\r\n          }\r\n        }\r\n        scoreStrB = scoreStrBNew;\r\n        //System.out.println(scoreStrB);\r\n      }\r\n      \r\n      \r\n      for (int i = 0; i < scoreStrB.size(); i++)\r\n      {\r\n        scoreB.add(Integer.parseInt(scoreStrB.get(i)));\r\n      }\r\n      \r\n      \r\n      Collections.sort(scoreB);\r\n      Collections.sort(scoreA);\r\n      \r\n      \r\n      int diff = Integer.MAX_VALUE;\r\n      int sb = 0;\r\n      int sa = 0;\r\n      for (int i = 0; i < scoreB.size(); i++)\r\n      {\r\n        for (int j = 0; j < scoreA.size(); j++)\r\n        {\r\n          int d = Math.abs(scoreA.get(j)-scoreB.get(i));\r\n          if(d<diff || \r\n              (d==diff && (scoreB.get(i)+scoreA.get(j))<(sa+sb)) ||  \r\n              (d==diff && (scoreB.get(i)+scoreA.get(j))==(sa+sb) && scoreB.get(i)<sb )){\r\n            diff = d;\r\n            sa = scoreA.get(j);\r\n            sb = scoreB.get(i);\r\n          }\r\n        }\r\n      }\r\n      \r\n      \r\n      \r\n      \r\n      \r\n\t\t\t//SOLVE----------------------------------------------------\r\n      String scoreAA = sa+\"\";\r\n      while(scoreAA.length()<score1.length()){\r\n        scoreAA = \"0\"+scoreAA;\r\n      }\r\n      \r\n      String scoreBB = sb+\"\";\r\n      while(scoreBB.length()<score2.length()){\r\n        scoreBB = \"0\"+scoreBB;\r\n      }\r\n      \r\n      resultat.append(scoreAA+\" \"+scoreBB);\r\n\t\t\t\r\n\t\t\t\r\n      //PRINT--------------------------------------------------\r\n\t\t\tSystem.out.println(scoreAA+\" \"+scoreBB);\r\n\t\t\t//resultat.append(str);\r\n//\t\t\tSystem.out.println(\"Finished testcase \" + tc + \", time = \" + (System.currentTimeMillis() - time));\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n    //CLOSE----------------------------------------------------\r\n\t\tout.print(resultat);\r\n\t\tout.close(); sc.close();\r\n\t}\r\n\r\n}", "idx": "7171"}
{"func": "package googlejam7.p178;\n// B.\r\n//import java.awt.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.text.*;\r\nimport java.util.*;\r\n \r\npublic class B {\r\n  \r\n  public static void main (String[] args) {\r\n    Scanner sc = new Scanner(System.in);\r\n    int numTests = sc.nextInt();\r\n    for (int tc = 1; tc <= numTests; ++tc) {\r\n      String cc = sc.next();\r\n      String jj = sc.next();\r\n      int limit = 0;\r\n      if (cc.length() == 1) {\r\n        limit = 9;\r\n      } else {\r\n        limit = cc.length() == 2 ? 99 : 999;\r\n      }\r\n      int cScore = 1000;\r\n      int jScore = 1000;\r\n      int absDiff = 1000;\r\n      for (int i = 0; i <= limit; ++i) {\r\n        for (int j = 0; j <= limit; ++j) {\r\n          String ct = String.valueOf(i);\r\n          String jt = String.valueOf(j);\r\n          while (ct.length() < cc.length()) {\r\n            ct = \"0\" + ct;\r\n          }\r\n          while (jt.length() < jj.length()) {\r\n            jt = \"0\" + jt;\r\n          }\r\n          boolean okay = true;\r\n          for (int k = 0; k < cc.length(); ++k) {\r\n            if (cc.charAt(k) != '?' && cc.charAt(k) != ct.charAt(k)) {\r\n              okay = false;\r\n              break;\r\n            }\r\n            if (jj.charAt(k) != '?' && jj.charAt(k) != jt.charAt(k)) {\r\n              okay = false;\r\n              break;\r\n            }\r\n          }\r\n          if (okay) {\r\n            if (Math.abs(i - j) <= absDiff) {\r\n              if (Math.abs(i - j) == absDiff) {\r\n                if (i <= cScore) {\r\n                  if (i == cScore) {\r\n                    if (j < jScore) {\r\n                      cScore = i;\r\n                      jScore = j;\r\n                    }\r\n                  } else {\r\n                    cScore = i;\r\n                    jScore = j;\r\n                  }\r\n                }\r\n              } else {\r\n                cScore = i;\r\n                jScore = j;\r\n                absDiff = Math.abs(i - j);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      String cAns = String.valueOf(cScore);\r\n      String jAns = String.valueOf(jScore);\r\n      while (cAns.length() < cc.length()) {\r\n        cAns = \"0\" + cAns;\r\n      }\r\n      while (jAns.length() < jj.length()) {\r\n        jAns = \"0\" + jAns;\r\n      }\r\n      System.out.println(\"Case #\" + tc + \": \" + cAns + \" \" + jAns);\r\n    }\r\n  }\r\n}\r\n", "idx": "7178"}
{"func": "package googlejam7.p179;\nimport java.util.Scanner;\n\npublic class CloseMatch {\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int n = scanner.nextInt();\n    for(int i = 1; i <= n ; i++) {\n      String str1 = scanner.next();\n      String str2 = scanner.next();\n      int qm = 0;\n\tfor(int i1 = 0; i1 < str1.length(); i1++) {\n\t  if(str1.charAt(i1) == '?') {\n\t    qm++;\n\t  }\n\t  if(str2.charAt(i1) == '?') {\n\t    qm++;\n\t  }\n\t}\n\tint num1Final = 0, num2Final = 0, difference = Integer.MAX_VALUE;\n\tfor(int i2 = 0; i2 < Math.pow(10, qm); i2++) {\n\t  int arr[] = new int[qm];\n\t  for(int j = 0; j < qm;j++) {\n\t    arr[j] = (i2/(int)Math.pow(10,j))%10;\n\t  }\n\t  int pointer = 0;\n\t  int num1 = 0, num2 = 0;\n\t  for(int j = 0;j < str1.length();j++) {\n\t    if(str1.charAt(j) == '?') {\n\t      num1 = num1 * 10 + arr[pointer++];\n\t    } else {\n\t      num1 = num1 * 10 + (str1.charAt(j) - '0');\n\t    }\n\t  }\n\t  for(int j = 0;j < str2.length();j++) {\n\t    if(str2.charAt(j) == '?') {\n\t      num2 = num2 * 10 + arr[pointer++];\n\t    } else {\n\t      num2 = num2 * 10 + (str2.charAt(j) - '0');\n\t    }\n\t  }\n\t  if(Math.abs(num1 - num2) < difference) {\n\t    num1Final = num1;\n\t    num2Final = num2;\n\t    difference = Math.abs(num1 - num2);\n\t  } else if (Math.abs(num1 - num2) == difference) {\n\t    if(num1 < num1Final) {\n\t      num1Final = num1;\n\t      num2Final = num2;\n\t      difference = Math.abs(num1 - num2);\n\t    } else if (num1 == num1Final) {\n\t      if(num2 < num2Final) {\n\t        num1Final = num1;\n\t        num2Final = num2;\n\t        difference = Math.abs(num1 - num2);\n\t      }\n\t    }\n\t  }\n\t}\n\tSystem.out.println(\"Case #\" + i + \": \" + String.format(\"%0\" + str1.length() +\"d\", num1Final) + \" \" + String.format(\"%0\" + str2.length() +\"d\", num2Final));\n    }\n\n  }\n}\n", "idx": "7179"}
{"func": "package googlejam7.p183;\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"B-small-attempt0.in\"));\n        //Scanner in = new Scanner(new File(\"B-small.in\"));\n        PrintWriter out = new PrintWriter(\"out.txt\");\n        int t = in.nextInt();\n        for (int cases = 1; cases <= t; cases++) {\n            String q = in.next();\n            int len = q.length();\n            String c = \"00\" + q;\n            String j = \"00\" + in.next();\n            c = c.substring(c.length() - 3);\n            j = j.substring(j.length() - 3);\n\t\t\tint cRes = (c.charAt(0) == '?' ? 0 : (int)c.charAt(0) - (int)'0') * 100 +\n\t\t\t        (c.charAt(1) == '?' ? 0 : (int)c.charAt(1) - (int)'0') * 10 +\n\t\t\t        (c.charAt(2) == '?' ? 0 : (int)c.charAt(2) - (int)'0');\n\t\t\tint jRes = (j.charAt(0) == '?' ? 0 : (int)j.charAt(0) - (int)'0') * 100 +\n\t\t\t        (j.charAt(1) == '?' ? 0 : (int)j.charAt(1) - (int)'0') * 10 +\n\t\t\t        (j.charAt(2) == '?' ? 0 : (int)j.charAt(2) - (int)'0');\n\t\t\tint[] m = new int[6];\n\t\t\tfor (int i = 0; i < c.length(); i++) {\n\t\t\t    if (c.charAt(i) == '?') {\n\t\t\t        m[i] = 9;\n\t\t\t    }\n\t\t\t}\n\t\t\tfor (int i = 0; i < j.length(); i++) {\n\t\t\t    if (j.charAt(i) == '?') {\n\t\t\t        m[i + 3] = 9;\n\t\t\t    }\n\t\t\t}\n\t\t\tfor (int c1 = 0; c1 <= m[0]; c1++) {\n\t\t\t    for (int c2 = 0; c2 <= m[1]; c2++) {\n\t\t\t        for (int c3 = 0; c3 <= m[2]; c3++) {\n\t\t\t            for (int j1 = 0; j1 <= m[3]; j1++) {\n\t\t\t                for (int j2 = 0; j2 <= m[4]; j2++) {\n\t\t\t                    for (int j3 = 0; j3 <= m[5]; j3++) {\n\t\t\t                        int curC = (c.charAt(0) == '?' ? c1 : (int)c.charAt(0) - (int)'0') * 100 +\n\t\t\t                                (c.charAt(1) == '?' ? c2 : (int)c.charAt(1) - (int)'0') * 10 +\n\t\t\t                                (c.charAt(2) == '?' ? c3 : (int)c.charAt(2) - (int)'0');\n\t\t\t                        int curJ = (j.charAt(0) == '?' ? j1 : (int)j.charAt(0) - (int)'0') * 100 +\n\t\t\t                                (j.charAt(1) == '?' ? j2 : (int)j.charAt(1) - (int)'0') * 10 +\n\t\t\t                                (j.charAt(2) == '?' ? j3 : (int)j.charAt(2) - (int)'0');\n\t\t\t                        if (Math.abs(curC - curJ) < Math.abs(cRes - jRes) ||\n\t\t\t                                (Math.abs(curC - curJ) == Math.abs(cRes - jRes) &&\n\t\t\t                                        (curC < cRes || (curC == cRes && curJ < jRes)))) {\n\t\t\t                            cRes = curC;\n\t\t\t                            jRes = curJ;\n\t\t\t                        }\n\t\t\t                    }\n\t\t\t                }\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\tString cS = \"00\" + Integer.toString(cRes);\n\t\t\tString jS = \"00\" + Integer.toString(jRes);\n            String res = cS.substring(cS.length() - len) + \" \" + jS.substring(jS.length() - len);\n            out.println(\"Case #\" + cases + \": \" + res);\n        }\n        out.close();\n    }\n}", "idx": "7183"}
{"func": "package googlejam7.p193;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class R1BB {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner scan = new Scanner(System.in);\r\n\t\tint nCases = scan.nextInt();\r\n\t\tfor (int z = 0; z < nCases; z++) {\r\n\t\t\tString a = scan.next(), b = scan.next();\r\n\r\n\t\t\tint len = a.length();\r\n\t\t\t// little-endian: b followed by a\r\n\t\t\tint[] digits = new int[2*len];\r\n\t\t\tArrayList<Integer> questionPos = new ArrayList<Integer>();\r\n\t\t\tfor (int i = 0; i < len; i++) {\r\n\t\t\t\tint aPos = len-1 - i + len, bPos = len-1 - i;\r\n\t\t\t\tif (a.charAt(i) != '?') {\r\n\t\t\t\t\tdigits[aPos] = a.charAt(i) - '0';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tquestionPos.add(aPos);\r\n\t\t\t\t}\r\n\t\t\t\tif (b.charAt(i) != '?') {\r\n\t\t\t\t\tdigits[bPos] = b.charAt(i) - '0';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tquestionPos.add(bPos);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tCollections.sort(questionPos);\r\n\r\n\t\t\tint nQuestions = questionPos.size();\r\n\t\t\tint[] questions = new int[nQuestions];\r\n\t\t\tint bestDiff = 9999;\r\n\t\t\tint bestX = -1, bestY = -1;\r\n\t\t\touter: while (true) {\r\n\t\t\t\tfor (int i = 0; i < nQuestions; i++) {\r\n\t\t\t\t\tdigits[questionPos.get(i)] = questions[i];\r\n\t\t\t\t}\r\n\t\t\t\tint x = 0, y = 0, place = 1;\r\n\t\t\t\tfor (int i = 0; i < len; i++) {\r\n\t\t\t\t\tx += digits[i + len] * place;\r\n\t\t\t\t\ty += digits[i] * place;\r\n\t\t\t\t\tplace *= 10;\r\n\t\t\t\t}\r\n\t\t\t\tif (Math.abs(x - y) < bestDiff) {\r\n\t\t\t\t\tbestDiff = Math.abs(x - y);\r\n\t\t\t\t\tbestX = x;\r\n\t\t\t\t\tbestY = y;\r\n\t\t\t\t}\r\n\t\t\t\tquestions[0]++;\r\n\t\t\t\tfor (int i = 0; questions[i] == 10; i++) {\r\n\t\t\t\t\tif (i == nQuestions - 1) {\r\n\t\t\t\t\t\tbreak outer;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tquestions[i] = 0;\r\n\t\t\t\t\tquestions[i+1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tString temp = \"%0\" + len + \"d\";\r\n\t\t\tSystem.out.printf(\"Case #%d: \" + temp + \" \" + temp + \"\\n\", z + 1, bestX, bestY);\r\n\t\t}\r\n\t\tscan.close();\r\n\t}\r\n}\r\n", "idx": "7193"}
{"func": "package googlejam7.p201;\nimport java.util.Scanner;\n\npublic class MainB {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        sc.nextLine();\n        for (int t = 1; t <= T; t++) {\n            String a = sc.next();\n            String b = sc.next();\n            String ab = a+b;\n            int min = 9999,fa=9999,fb=9999;\n            String sfa=\"\",sfb=\"\";\n\n            int cab = ab.length() - ab.replace(\"?\", \"\").length();\n            for(int i=0;i<Math.pow(10, cab);i++) {\n                String s=Integer.toString(i);\n                int asasas = cab-s.length();\n                for(int j=0;j<asasas;j++) {\n                    s=\"0\" + s;\n                }\n                char ch[] = ab.toCharArray();\n                for(int j=0,k=0;j<ch.length;j++) {\n                    if(ch[j]=='?'){\n                        ch[j]=s.charAt(k++);\n                    }\n                }\n\n                String f=new String(ch);\n                int av = Integer.parseInt(f.substring(0, a.length()));\n                int bv = Integer.parseInt(f.substring(a.length()));\n                int diff = Math.abs(av-bv);\n                if(diff<min) {\n                    min=diff;\n                    fa=av;\n                    fb=bv;\n                    sfa = f.substring(0, a.length());\n                    sfb = f.substring(a.length());\n                } else if(diff==min) {\n                    if(av<fa){\n                        fa=av;\n                        fb=bv;\n                        sfa = f.substring(0, a.length());\n                        sfb = f.substring(a.length());\n                    } else if(av==fa && bv<fb) {\n                        fb=bv;\n                        sfb = f.substring(a.length());\n                    }\n                }\n            }\n\n            System.out.println(\"Case #\" + t + \": \" + sfa + \" \" + sfb);\n        }\n    }\n}\n", "idx": "7201"}
{"func": "package googlejam7.p212;\n\n\nimport java.util.*;\n\npublic class Solution {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\tScanner scan = new Scanner(System.in);\n\t\tint testNum = scan.nextInt();\n\t\tfor(int i=1;i<=testNum;i++){\n\t\t\tString cScore = scan.next();\n\t\t\tString jScore = scan.next();\n\t\t\tint length = cScore.length();\n\t\t\t/*\n\t\t\tboolean[] cIndicator = new boolean[length];\n\t\t\tboolean[] jIndicator = new boolean[length];\n\t\t\tfor(int i=0;i<length;i++){\n\t\t\t\tif(cScore.charAt(i) != '?'){\n\t\t\t\t\tcIndicator[i] = true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcIndicator[i] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t*/\n\t\t\tint maxValue = 0;\n\t\t\tfor(int i1=0;i1<length;i1++){\n\t\t\t\tmaxValue = maxValue*10+9;\n\t\t\t}\n\t\t\t\n\t\t\tint minDiff = Integer.MAX_VALUE;\n\t\t\tString cTarget = \"\";\n\t\t\tString jTarget = \"\";\n\t\t\t\n\t\t\tfor(int cValue = 0; cValue<=maxValue;cValue++){\n\t\t\t\tString cStr = String.valueOf(cValue);\n\t\t\t\tif(cStr.length()<length){\n\t\t\t\t\tint cdiff = length - cStr.length();\n\t\t\t\t\tfor(int j=0;j<cdiff;j++){\n\t\t\t\t\t\tcStr = \"0\" + cStr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tboolean cmatch = true;\n\t\t\t\tfor(int i2=0;i2<length;i2++){\n\t\t\t\t\tif(cScore.charAt(i2) != '?' && cScore.charAt(i2) != cStr.charAt(i2)){\n\t\t\t\t\t\tcmatch = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!cmatch){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//cValue is matched\n\t\t\t\t\n\t\t\t\tfor(int jValue = 0; jValue<=maxValue;jValue++){\n\t\t\t\t\tString jStr = String.valueOf(jValue);\n\t\t\t\t\tif(jStr.length()<length){\n\t\t\t\t\t\tint jdiff = length - jStr.length();\n\t\t\t\t\t\tfor(int j=0;j<jdiff;j++){\n\t\t\t\t\t\t\tjStr = \"0\" + jStr;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tboolean jmatch = true;\n\t\t\t\t\tfor(int i3=0;i3<length;i3++){\n\t\t\t\t\t\tif(jScore.charAt(i3) != '?' && jScore.charAt(i3) != jStr.charAt(i3)){\n\t\t\t\t\t\t\tjmatch = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(!jmatch){\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//jValue is matched\n\t\t\t\t\t\n\t\t\t\t\tint valueDiff = Math.abs(cValue - jValue);\n\t\t\t\t\tif(minDiff > valueDiff){\n\t\t\t\t\t\tminDiff = valueDiff;\n\t\t\t\t\t\tcTarget = cStr;\n\t\t\t\t\t\tjTarget = jStr;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tArrayList<String> list1 = new ArrayList<String>();\n\t\t\tlist1.add(cTarget);\n\t\t\tlist1.add(jTarget);\n\t\t\tArrayList<String> list = list1;\n\t\t\tSystem.out.printf(\"Case #%d: %s %s\\n\", i, list.get(0), list.get(1));\n\t\t}\n\t\tscan.close();\n\t}\n\n}\n", "idx": "7212"}
{"func": "package googlejam7.p215;\n\n\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.Scanner;\n\npublic class B_BF {\n    private char[] C, J;\n\n    // parse\n    public B_BF(final Scanner sc) {\n        C = sc.next().toCharArray();\n        J = sc.next().toCharArray();\n    }\n\n    // Template\n    public static void main(String... args) throws Exception {\n        try (final Scanner sc = new Scanner(System.in)) {\n            final int T = sc.nextInt();\n            final Object[] solvers = new Object[T];\n            for (int i = 0; i < T; i++)\n                solvers[i] = new B_BF(sc);\n            final Iterator<String> results = Arrays.stream(solvers)\n                    .map(Object::toString)\n                    .iterator();\n            for (int i = 1; i <= T; i++)\n                System.out.printf(\"Case #%s: %s\\n\", i, results.next());\n        }\n    }\n}\n", "idx": "7215"}
{"func": "package googlejam7.p240;\n\r\n\r\n/**\r\n * Created by Ronald on 4/30/2016.\r\n */\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\npublic class probB{\r\n    public static void main(String[] args) throws NumberFormatException, IOException{\r\n        BufferedReader in = new BufferedReader( new FileReader(\"B-small-attempt1.in\"));\r\n        int numinput = Integer.parseInt(in.readLine());\r\n        File file = new File(\"output.txt\");\r\n        BufferedWriter bw = new BufferedWriter(new FileWriter(file));\r\n        for( int currinput = 0; currinput < numinput; currinput++){\r\n            System.out.print(\"Case #\" + (1 + currinput) + \":\");\r\n            bw.write(\"Case #\" + (1 + currinput) + \":\");\r\n            String[] input = in.readLine().split(\" \");\r\n            String coders = input[0];\r\n            String jammers = input[1];\r\n            int rannumc = 0;\r\n            int rannumj = 0;\r\n\r\n            ArrayList<Integer> codersindex = new ArrayList<>();\r\n            ArrayList<Integer> jammersindex = new ArrayList<>();\r\n\r\n            for( int i =coders.length() -1; i !=-1; i--){\r\n                if(coders.charAt(i) == '?'){\r\n                    rannumc++;\r\n                    codersindex.add(i);\r\n                    coders = coders.substring(0,i) +'0'+coders.substring(i+1);\r\n                }\r\n\r\n            }\r\n            for( int i = jammers.length() -1; i!= -1;i--){\r\n                if(jammers.charAt(i) == '?'){\r\n                    rannumj++;\r\n                    jammersindex.add(i);\r\n                    jammers = jammers.substring(0,i) + '0' + jammers.substring(i+1);\r\n                }\r\n            }\r\n            int index  =0;\r\n            int minjammers = Integer.parseInt(jammers);\r\n            int mincoders = Integer.parseInt(coders);\r\n            String jammerstr = jammers;\r\n            String codersstr = coders;\r\n            int min = Integer.parseInt(coders) - Integer.parseInt(jammers);\r\n            if(min <0){\r\n                min= 0-min;\r\n            }\r\n            while(index <rannumc + rannumj){\r\n                boolean overflow = false;\r\n                int addindex = 0;\r\n                while (overflow == false) {\r\n                    overflow = true;\r\n                    if(addindex>  rannumc+rannumj){\r\n                        break;\r\n                    }\r\n                    if(addindex < rannumj) {\r\n                        if (jammers.charAt(jammersindex.get(addindex)) =='9') {\r\n                            overflow = false;\r\n                            jammers = jammers.substring(0, jammersindex.get(addindex)) +\r\n                                    '0' +\r\n                                    jammers.substring(jammersindex.get(addindex) + 1);\r\n                            addindex++;\r\n                        } else{\r\n                            jammers = jammers.substring(0, jammersindex.get(addindex) ) +\r\n                                    (char)((int)jammers.charAt(jammersindex.get(addindex)) + 1) +\r\n                                    jammers.substring(jammersindex.get(addindex) + 1);\r\n                        }\r\n                    }\r\n                    else{\r\n                        if(addindex - rannumj == codersindex.size()){\r\n                            continue;\r\n                        }\r\n                        if(coders.charAt(codersindex.get(addindex - rannumj )) =='9'){\r\n                            overflow = false;\r\n                            coders = coders.substring(0, codersindex.get(addindex - rannumj)) +\r\n                                    '0' +\r\n                                    coders.substring(codersindex.get(addindex-rannumj) +1);\r\n                            addindex++;\r\n                        }\r\n                        else{\r\n                            coders = coders.substring(0, codersindex.get(addindex- rannumj)) +\r\n                                    (char)((int)coders.charAt(codersindex.get(addindex-rannumj)) + 1)+\r\n                                    coders.substring(codersindex.get(addindex - rannumj) + 1);\r\n                        }\r\n                    }\r\n                    index = addindex;\r\n                }\r\n                int currjammer = Integer.parseInt(jammers);\r\n                int currcoders = Integer.parseInt(coders);\r\n                int currnum= currjammer - currcoders;\r\n                if(currnum <0)\r\n                    currnum = 0-currnum;\r\n                if(currnum <min){\r\n                    min = currnum;\r\n                    minjammers = currjammer;\r\n                    mincoders = currcoders;\r\n                    jammerstr= jammers;\r\n                    codersstr = coders;\r\n                }\r\n            }\r\n            String output = \" \" + codersstr + \" \" + jammerstr+ \"\\n\";\r\n            System.out.print(output);\r\n            bw.write(output);\r\n\r\n\r\n        }\r\n        bw.close();\r\n    }\r\n}\r\n", "idx": "7240"}
{"func": "package googlejam7.p243;\nimport java.util.*;\nimport java.io.*;\n\npublic class B\n{\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\t//Scanner in = new Scanner(System.in);\n\t\tScanner in = new Scanner(new File(\"B-small-attempt0.in\"));\n\t\tPrintStream out = new PrintStream(new File(\"B-small-attempt0.out\"));\n\t\tint t = in.nextInt();\n\t\tfor (int i = 1; i <= t; i++) \n\t\t{\n\t\t\tString ccs = in.next();\n\t\t\tString jjs = in.next();\n\t\t\t\n\t\t\tchar[] c = ccs.toCharArray();\n\t\t\tchar[] j = jjs.toCharArray();\n\n\t\t\tint cnt = 0;\n\t\t\tArrayList<Integer> cs = new ArrayList<Integer>();\n\t\t\tArrayList<Integer> js = new ArrayList<Integer>();\n\n\t\t\tfor (int k = 0; k < 1000; k++) {\n\t\t\t\tint cur = k;\n\t\t\t\tboolean ok = true;\n\t\t\t\tfor (int kk = c.length-1; kk >= 0; kk--) {\n\t\t\t\t\tif (cur%10 + '0' != c[kk] && c[kk] != '?') {\n\t\t\t\t\t\tok = false;\n\t\t\t\t\t}\n\t\t\t\t\tcur /= 10;\n\t\t\t\t}\n\t\t\t\tif (ok && cur == 0) {\n\t\t\t\t\tcs.add(k);\n\t\t\t\t}\n\n\t\t\t\tcur = k;\n\t\t\t\tok = true;\n\t\t\t\tfor (int kk = j.length-1; kk >= 0; kk--) {\n\t\t\t\t\tif (cur%10 + '0' != j[kk] && j[kk] != '?') {\n\t\t\t\t\t\tok = false;\n\t\t\t\t\t}\n\t\t\t\t\tcur /= 10;\n\t\t\t\t}\n\t\t\t\tif (ok && cur == 0) {\n\t\t\t\t\tjs.add(k);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tint cc = 0, jj = 0;\n\t\t\tfor (int k = 0; k < cs.size(); k++) {\n\t\t\t\tfor (int kk = 0; kk < js.size(); kk++) {\n\t\t\t\t\tif (Math.abs(cs.get(k)-js.get(kk)) < min) {\n\t\t\t\t\t\tmin = Math.abs(cs.get(k)-js.get(kk));\n\t\t\t\t\t\tcc = cs.get(k);\n\t\t\t\t\t\tjj = js.get(kk);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tString format = \"Case #%d: %0\" + c.length + \"d %0\"+c.length+\"d\\n\";\n\t\t\tout.printf(format, i, cc, jj);\n\t\t}\n\t}\n}", "idx": "7243"}
{"func": "package googlejam7.p251;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\n/**\r\n * Created by Timur on 30.04.2016.\r\n */\r\npublic class CloseMatchStupid {\r\n    public static void main(String args[]) throws IOException {\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\r\n        int test = Integer.parseInt(in.readLine());\r\n        for (int t=1;t<=test;t++) {\r\n            StringTokenizer st = new StringTokenizer(in.readLine());\r\n            String first = st.nextToken();\r\n            String second = st.nextToken();\r\n\r\n            int diff = Integer.MAX_VALUE;\r\n\r\n            String ans1 = \"\";\r\n            String ans2 = \"\";\r\n\r\n            for (int i = 0; i < 1000; i++) {\r\n\r\n                String a1 = \"\"+i;\r\n                while (a1.length() < first.length()) {\r\n                    a1 = \"0\" + a1;\r\n                }\r\n\r\n                boolean correct = a1.length() == first.length();\r\n                if (correct)\r\n                for (int k = 0; k < first.length();k++) {\r\n                    if (first.charAt(k) != '?' && first.charAt(k)!=a1.charAt(k)) {\r\n                        correct = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (correct)\r\n                for (int j = 0; j < 1000; j ++) {\r\n\r\n                    if (Math.abs(i - j) < diff || (Math.abs(i - j) == diff && a1.compareTo(ans1)<0)) {\r\n\r\n                        String b1 = \"\" + j;\r\n                        while (b1.length() < first.length()) {\r\n                            b1 = \"0\" + b1;\r\n                        }\r\n\r\n\r\n                        correct = b1.length() == first.length();\r\n\r\n                        if (correct)\r\n                        for (int k = 0; k < first.length();k++) {\r\n                            if (second.charAt(k) != '?' && second.charAt(k)!=b1.charAt(k)) {\r\n                                correct = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (correct) {\r\n                            diff = Math.abs(i - j);\r\n                            ans1 = a1;\r\n                            ans2 = b1;\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n\r\n                }\r\n            }\r\n            System.out.println(\"Case #\"+t+\": \"+ans1+\" \"+ans2);\r\n        }\r\n\r\n        in.close();\r\n    }\r\n}\r\n", "idx": "7251"}
{"func": "package googlejam7.p271;\nimport java.util.*;\nimport java.util.regex.*;\n\npublic class B {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint cases = input.nextInt();\n\t\tinput.nextLine();\n\t\tfor (int c = 0; c < cases; c++) {\n\t\t\tint bestD = Integer.MAX_VALUE;\n\t\t\tint bestX = 0;\n\t\t\tint bestY = 0;\n\t\t\tString a = input.next().replaceAll(\"\\\\?\", \"\\\\.\");\n\t\t\tString b = input.next().replaceAll(\"\\\\?\", \"\\\\.\");\n\t\t\tint n = a.length();\n\t\t\tString fmt = \"%0\" + n + \"d\";\n\t\t\tPattern pa = Pattern.compile(a);\n\t\t\tPattern pb = Pattern.compile(b);\n\t\t\tfor (int x = 0; x < 1000; x++) {\n\t\t\t\tfor (int y = 0; y < 1000; y++) {\n\t\t\t\t\tString sx = Integer.toString(x);\n\t\t\t\t\twhile (sx.length() < n) sx = \"0\" + sx;\n\t\t\t\t\tString sy = Integer.toString(y);\n\t\t\t\t\twhile (sy.length() < n) sy = \"0\" + sy;\n\t\t\t\t\tMatcher ma = pa.matcher(sx);\n\t\t\t\t\tMatcher mb = pb.matcher(sy);\n\t\t\t\t\tif (ma.matches() && mb.matches()) {\n\t\t\t\t\t\tint d = Math.abs(x - y);\n\t\t\t\t\t\tif (d < bestD) {\n\t\t\t\t\t\t\tbestD = d;\n\t\t\t\t\t\t\tbestX = x;\n\t\t\t\t\t\t\tbestY = y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(String.format(\"Case #%d: \" + fmt + \" \" + fmt, c+1, bestX, bestY));\n\t\t}\n\t}\n}\n", "idx": "7271"}
{"func": "package googlejam7.p296;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.*;\r\n\r\npublic class Q2 {\r\n\r\n    public static String solve(String C, String J) {\r\n\r\n        int len = C.length();\r\n\r\n        char[] cs = C.toCharArray();\r\n        char[] js = J.toCharArray();\r\n\r\n        List<String> cres = new ArrayList<>();\r\n        List<String> jres = new ArrayList<>();\r\n        cres.add(\"\");\r\n        jres.add(\"\");\r\n\r\n        for (int i = 0; i < len; i++) {\r\n            if (cs[i] == '?' && js[i] == '?') {\r\n                List<String> r = new ArrayList<>();\n\t\t\t\tfor (String s : cres) {\n\t\t\t\t    for (char c : new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}) {\n\t\t\t\t        r.add(s + c);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tcres = r;\n\t\t\t\tList<String> r = new ArrayList<>();\n\t\t\t\tfor (String s : jres) {\n\t\t\t\t    for (char c : new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}) {\n\t\t\t\t        r.add(s + c);\n\t\t\t\t    }\n\t\t\t\t}\r\n                jres = r;\r\n            } else if (cs[i] == '?') {\r\n                List<String> r = new ArrayList<>();\n\t\t\t\tfor (String s : cres) {\n\t\t\t\t    for (char c : new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}) {\n\t\t\t\t        r.add(s + c);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tcres = r;\n\t\t\t\tList<String> r = new ArrayList<>();\n\t\t\t\tfor (String s : jres) {\n\t\t\t\t    for (char c : new char[]{js[i]}) {\n\t\t\t\t        r.add(s + c);\n\t\t\t\t    }\n\t\t\t\t}\r\n                jres = r;\r\n            } else if (js[i] == '?') {\r\n                List<String> r = new ArrayList<>();\n\t\t\t\tfor (String s : cres) {\n\t\t\t\t    for (char c : new char[]{cs[i]}) {\n\t\t\t\t        r.add(s + c);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tcres = r;\n\t\t\t\tList<String> r = new ArrayList<>();\n\t\t\t\tfor (String s : jres) {\n\t\t\t\t    for (char c : new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}) {\n\t\t\t\t        r.add(s + c);\n\t\t\t\t    }\n\t\t\t\t}\r\n                jres = r;\r\n            } else {\r\n                List<String> r = new ArrayList<>();\n\t\t\t\tfor (String s : cres) {\n\t\t\t\t    for (char c : new char[]{cs[i]}) {\n\t\t\t\t        r.add(s + c);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tcres = r;\n\t\t\t\tList<String> r = new ArrayList<>();\n\t\t\t\tfor (String s : jres) {\n\t\t\t\t    for (char c : new char[]{js[i]}) {\n\t\t\t\t        r.add(s + c);\n\t\t\t\t    }\n\t\t\t\t}\r\n                jres = r;\r\n            }\r\n        }\r\n\r\n        long min = Long.MAX_VALUE;\r\n        String a = \"\";\r\n        String b = \"\";\r\n        for (String cre : cres) {\r\n            for (String jre : jres) {\r\n                long m = Long.parseLong(cre);\r\n                long n = Long.parseLong(jre);\r\n                long diff = Math.abs(m - n);\r\n                if (min > diff) {\r\n                    min = diff;\r\n                    a = cre;\r\n                    b = jre;\r\n                }\r\n            }\r\n        }\r\n\r\n        return String.valueOf(a) + \" \" + String.valueOf(b);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n        int t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\r\n        in.nextLine();\r\n        for (int i = 1; i <= t; ++i) {\r\n            String c = in.next();\r\n            String j = in.next();\r\n            System.out.println(\"Case #\" + i + \": \" + solve(c, j));\r\n        }\r\n    }\r\n}\r\n", "idx": "7296"}
{"func": "package googlejam7.p301;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\npublic class CloseMatch \r\n{\r\n\tpublic static void main(String[] args) throws FileNotFoundException\r\n\t{\r\n\t\tScanner s = new Scanner(new File(\"C:\\\\Users\\\\Adam\\\\Documents\\\\codejam\\\\B-small-attempt0.in\"));\r\n\r\n\t\tint cases = s.nextInt();\r\n\t\ts.nextLine();\r\n\t\t\r\n\t\tfor (int i = 1; i <= cases; i++)\r\n\t\t{\r\n\t\t\tString line = s.nextLine();\r\n\t\t\tString scores[] = line.split(\" \");\r\n\t\t\tString scorec = scores[0];\r\n\t\t\tString scorej = scores[1];\r\n\t\t\t\r\n\t\t\tArrayList<String> cperms = new ArrayList<String>();\r\n\t\t\tcperms.add(scorec);\r\n\t\t\tboolean done = false;\r\n\t\t\twhile (!done)\r\n\t\t\t{\r\n\t\t\t\tdone = true;\r\n\t\t\t\tint j = 0;\r\n\t\t\t\twhile (j < cperms.size())\r\n\t\t\t\t{\r\n\t\t\t\t\tString word = cperms.get(j);\r\n\t\t\t\t\tif (word.contains(\"?\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdone = false;\r\n\t\t\t\t\t\tString firstHalf = word.substring(0, word.indexOf(\"?\"));\r\n\t\t\t\t\t\tString secondHalf = word.substring(word.indexOf(\"?\") + 1);\r\n\t\t\t\t\t\tfor (int k = 0; k < 10; k++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcperms.add(firstHalf + k + secondHalf);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcperms.remove(word);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tj++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tArrayList<String> jperms = new ArrayList<String>();\r\n\t\t\tjperms.add(scorej);\r\n\t\t\tdone = false;\r\n\t\t\twhile (!done)\r\n\t\t\t{\r\n\t\t\t\tdone = true;\r\n\t\t\t\tint j = 0;\r\n\t\t\t\twhile (j < jperms.size())\r\n\t\t\t\t{\r\n\t\t\t\t\tString word = jperms.get(j);\r\n\t\t\t\t\tif (word.contains(\"?\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdone = false;\r\n\t\t\t\t\t\tString firstHalf = word.substring(0, word.indexOf(\"?\"));\r\n\t\t\t\t\t\tString secondHalf = word.substring(word.indexOf(\"?\") + 1);\r\n\t\t\t\t\t\tfor (int k = 0; k < 10; k++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tjperms.add(firstHalf + k + secondHalf);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tjperms.remove(word);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tj++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tArrayList<Integer> poss = new ArrayList<Integer>();\r\n\t\t\t\r\n\t\t\tfor (String s1 : cperms)\r\n\t\t\t{\r\n\t\t\t\tfor (String s2 : jperms)\r\n\t\t\t\t{\r\n\t\t\t\t\tint diff = Math.abs(Integer.valueOf(s1) - Integer.valueOf(s2));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!poss.contains(diff))\r\n\t\t\t\t\t\tposs.add(diff);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tCollections.sort(poss);\r\n\t\t\t\r\n\t\t\tif (i == 1)\r\n\t\t\t{\r\n\t\t\t\t//for (String strin : cperms)\r\n\t\t\t\t//\tSystem.out.println(\"C: \" + strin);\r\n\t\t\t\t\r\n\t\t\t\t//for (String strin : jperms)\r\n\t\t\t\t//\tSystem.out.println(\"J: \" + strin);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tdone = false;\r\n\t\t\tint a = 0;\r\n\t\t\twhile (!done && a < cperms.size())\r\n\t\t\t{\r\n\t\t\t\tint b = 0;\r\n\t\t\t\t\r\n\t\t\t\twhile (!done && b < jperms.size())\r\n\t\t\t\t{\r\n//System.out.println(\"C is \" + cperms.get(a) + \", J is \" + jperms.get(b));\r\n\t\t\t\t\tint diff = Math.abs(Integer.valueOf(cperms.get(a)) - Integer.valueOf(jperms.get(b)));\r\n//System.out.println(\"case \" + i + \" diff is \" + diff);\r\n\t\t\t\t\tif (diff == poss.get(0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdone = true;\r\n\t\t\t\t\t\tSystem.out.println(\"Case #\" + i + \": \" + cperms.get(a) + \" \" + jperms.get(b));\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tb++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ta++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\r\n\t}\r\n}\r\n", "idx": "7301"}
{"func": "package googlejam7.p313;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * Created by russinko on 4/30/16.\n */\npublic class CloseMatch {\n    public static void main(String[] args) throws Exception {\n        Scanner sc = new Scanner(new File(\"B-small-attempt0.in\"));\n        PrintWriter pw = new PrintWriter(new File(\"output.txt\"));\n        int caseCount = Integer.valueOf(sc.nextLine());\n        for (int i = 0; i < caseCount; i++) {\n            String line = sc.nextLine();\n            String[] pars = line.split(\" \");\n\t\t\tString C = pars[0];\n\t\t\tint bestDelta = Integer.MAX_VALUE;\n\t\t\tString bestCoders = null;\n\t\t\tString bestJammers = null;\n\t\t\tfor(int jam = 0; jam < 1000; jam++) {\n\t\t\t    for(int coders = 0; coders < 1000; coders++) {\n\t\t\t        String s = Integer.toString(coders);\n\t\t\t\t\twhile (s.length() < C.length()) {\n\t\t\t\t\t    s = \"0\" + s;\n\t\t\t\t\t}\n\t\t\t\t\tString CODERS = s;\n\t\t\t\t\tString s1 = Integer.toString(jam);\n\t\t\t\t\twhile (s1.length() < C.length()) {\n\t\t\t\t\t    s1 = \"0\" + s1;\n\t\t\t\t\t}\n\t\t\t        String JAMMERS = s1;\n\t\t\t        if(CODERS.matches(C.replace(\"?\",\".\")) && JAMMERS.matches(pars[1].replace(\"?\", \".\"))) {\n\t\t\t            int delta = Math.abs(jam - coders);\n\t\t\t            if(delta < bestDelta) {\n\t\t\t                bestDelta = delta;\n\t\t\t                bestCoders = CODERS;\n\t\t\t                bestJammers = JAMMERS;\n\t\t\t            }\n\t\t\t        }\n\t\t\t\n\t\t\t    }\n\t\t\t}\n\t\t\tList<String> list = new ArrayList<>();\n\t\t\tlist.add(bestCoders);\n\t\t\tlist.add(bestJammers);\n            List<String> solution = list;\n            System.out.println(pars[0] + \":\" + pars[1]);\n            pw.printf(\"Case #%d: %s %s\\n\", i + 1, solution.get(0), solution.get(1));\n        }\n        pw.close();\n    }\n}\n", "idx": "7313"}
{"func": "package googlejam8.p004;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class ProblemA {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString fileName = args[0];\r\n\t\tProblemA obj = new ProblemA();\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(fileName));\n\t\tBufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(fileName + \".out\"));\n\t\t\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tfor (int i = 0; i < T; i++) {\n\t\t\tint N = Integer.parseInt(br.readLine());\n\t\t\tint[] P = new int[N];\n\t\t\n\t\t\tString str = br.readLine();\n\t\t\tStringTokenizer token = new StringTokenizer(str, \" \");\n\t\t\n\t\t\tint cnt = 0;\n\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\tP[j] = Integer.parseInt(token.nextToken());\n\t\t\t\tcnt += P[j];\n\t\t\t}\n\t\t\n\t\t\tStringBuffer buf = new StringBuffer();\n\t\t\n\t\t\twhile (cnt > 0) {\n\t\t\t\tint max_j = -1;\n\t\t\t\tint max = 0;\n\t\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\t\tif (P[j] > max) {\n\t\t\t\t\t\tmax_j = j;\n\t\t\t\t\t\tmax = P[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tP[max_j]--;\n\t\t\t\tcnt--;\n\t\t\t\tbuf.append((char)('A' + max_j));\n\t\t\t\t\n\t\t\t\tif (cnt <= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (cnt == 2) {\n\t\t\t\t\tbuf.append(' ');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax_j = -1;\n\t\t\t\tmax = 0;\n\t\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\t\tif (P[j] > max) {\n\t\t\t\t\t\tmax_j = j;\n\t\t\t\t\t\tmax = P[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tP[max_j]--;\n\t\t\t\tcnt--;\n\t\t\t\tbuf.append((char)('A' + max_j));\n\t\t\t\t\n\t\t\t\tif (cnt > 0) {\n\t\t\t\t\tbuf.append(' ');\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tbw.write(\"Case #\" + (i + 1) + \": \" + buf.toString());\n\t\t\tbw.write(\"\\r\\n\");\n\t\t}\n\t\tbw.close();\n\t\tbr.close();\r\n\t}\r\n}\r\n", "idx": "8004"}
{"func": "package googlejam8.p011;\n\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class TaskA {\r\n    public static void main(String[] args) {\r\n        String fileName = \"A-large.in\";\r\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\r\n\r\n            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + \".out\"))) {\r\n                int tests = Integer.valueOf(br.readLine());\r\n                for (int test = 1; test <= tests; ++test) {\r\n                    int n = new Scanner(br.readLine()).nextInt();\r\n                    Scanner scanner = new Scanner(br.readLine());\r\n                    int s[] = new int[n];\r\n                    for (int i = 0; i < n; ++i)\r\n                        s[i] = scanner.nextInt();\r\n                    bw.write(\"Case #\" + test + \": \");\r\n                    while (true) {\r\n                        int max = 0;\r\n                        for (int ss: s)\r\n                            max = Math.max(max, ss);\r\n                        if (max == 0)\r\n                            break;\r\n                        ArrayList<Integer> pos = new ArrayList<Integer>();\r\n                        for (int i = 0; i < n; ++i) {\r\n                            if (s[i] == max)\r\n                                pos.add(i);\r\n                        }\r\n                        int ps = pos.size();\r\n                        if (pos.size() % 2 == 1) {\r\n                            ps--;\r\n                            int cur = pos.get(pos.size() - 1);\r\n                            s[cur]--;\r\n                            bw.write(\"\" + (char)('A' + cur) + \" \");\r\n                        }\r\n                        for (int i = 0; i < ps; i += 2) {\r\n                            int c1 = pos.get(i);\r\n                            int c2 = pos.get(i + 1);\r\n                            s[c1]--;\r\n                            s[c2]--;\r\n                            bw.write(\"\" + (char)('A' + c1) + (char)('A' + c2) + \" \");\r\n                        }\r\n                    }\r\n                    bw.write(\"\\n\");\r\n                }\r\n                bw.close();\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n", "idx": "8011"}
{"func": "package googlejam8.p012;\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Main {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\t//Scanner scanner = new Scanner(new FileInputStream(new File(\"A-small-attempt0.in\")));\r\n\t\t//FileOutputStream fo = new FileOutputStream(new File(\"output.out\"));\r\n\t\tint t = scanner.nextInt();\r\n\t\tfor(int x = 1; x <= t; ++x){\r\n\t\t\tint n = scanner.nextInt();\r\n\t\t\tint[] p = new int[n];\r\n\t\t\tfor(int i = 0; i < n; ++i){\r\n\t\t\t\tp[i] = scanner.nextInt();\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\" + x + \":\");\r\n\t\t\t//fo.write((\"Case #\" + x + \":\").getBytes());\r\n\t\t\tif(n == 2){\r\n\t\t\t\tfor(int i = 0; i < p[0]; ++i){\r\n\t\t\t\t\tSystem.out.print(\" AB\");\r\n\t\t\t\t\t//fo.write((\" AB\").getBytes());\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t\t//fo.write((\"\\n\").getBytes());\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tint count1 = 0;\n\t\t\t\tfor(int i3 = 0; i3 < p.length; ++i3)\n\t\t\t\t\tif(p[i3] != 0)\n\t\t\t\t\t\t++count1;\n\t\t\t\tint count = count1;\r\n\t\t\t\twhile(count > 2){\r\n\t\t\t\t\tint max = 0;\n\t\t\t\t\tint index1 = -1;\n\t\t\t\t\tfor(int i3 = 0; i3 < p.length; ++i3){\n\t\t\t\t\t\tif(p[i3] > max){\n\t\t\t\t\t\t\tmax = p[i3];\n\t\t\t\t\t\t\tindex1 = i3;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint index = index1;\r\n\t\t\t\t\t--p[index];\r\n\t\t\t\t\tSystem.out.print(\" \" + (char)('A'+index));\n\t\t\t\t\tint count2 = 0;\n\t\t\t\t\tfor(int i = 0; i < p.length; ++i)\n\t\t\t\t\t\tif(p[i] != 0)\n\t\t\t\t\t\t\t++count2;\r\n\t\t\t\t\t//fo.write((\" \" + (char)('A'+index)).getBytes());\r\n\t\t\t\t\tcount = count2;\r\n\t\t\t\t}\r\n\t\t\t\tint i1 = -1, i2 = -1;\r\n\t\t\t\tfor(int i = 0; i < p.length; ++i){\r\n\t\t\t\t\tif(p[i] != 0){\r\n\t\t\t\t\t\tif(i1 == -1)\r\n\t\t\t\t\t\t\ti1 = i;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\ti2 = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println(\" \" + (char)('A'+i1) + (char)('A'+i2));\r\n\t\t\t\t//fo.write((\" \" + (char)('A'+i1) + (char)('A'+i2) + '\\n').getBytes());\r\n\t\t\t}\r\n\t\t}\r\n\t\t//fo.flush();\r\n\t\t//fo.close();\r\n\t}\r\n\t\r\n}\r\n", "idx": "8012"}
{"func": "package googlejam8.p017;\n\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n    public static void main(String... args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        int T = scanner.nextInt();\r\n        for (int t = 1; t <= T; t++) {\r\n            A r = new A();\n\t\t\tr.N = scanner.nextInt();\n\t\t\tr.P = new int[r.N];\n\t\t\tfor (int i = 0; i < r.N; i++) r.P[i] = scanner.nextInt();\n\t\t\t\n\t\t\tint maxP = 0;\n\t\t\tint maxI = -1;\n\t\t\t\n\t\t\tint secondMaxP = 0;\n\t\t\tint secondMaxI = -1;\n\t\t\t\n\t\t\tfor (int i = 0; i < r.N; i++) {\n\t\t\t    if (r.P[i] > maxP) {\n\t\t\t        maxP = r.P[i];\n\t\t\t        maxI = i;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i = 0; i < r.N; i++) {\n\t\t\t    if (i == maxI) continue;\n\t\t\t    if (r.P[i] > secondMaxP) {\n\t\t\t        secondMaxP = r.P[i];\n\t\t\t        secondMaxI = i;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\tString plan = \"\";\n\t\t\twhile(maxP > secondMaxP) {\n\t\t\t    plan += (char) ('A' + maxI);\n\t\t\t    plan += \" \";\n\t\t\t    maxP--;\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i = 0; i < r.N; i++) {\n\t\t\t    if (i == maxI || i == secondMaxI) continue;\n\t\t\t\n\t\t\t    while(r.P[i] > 0) {\n\t\t\t        plan += (char) ('A' + i);\n\t\t\t        plan += \" \";\n\t\t\t        r.P[i]--;\n\t\t\t    }\n\t\t\t}\n\t\t\t\n\t\t\twhile(maxP > 0) {\n\t\t\t    plan += (char) ('A' + maxI);\n\t\t\t    plan += (char) ('A' + secondMaxI);\n\t\t\t    plan += \" \";\n\t\t\t    maxP--;\n\t\t\t}\n\t\t\tString solution = plan;\r\n            System.out.println(\"Case #\" + t + \": \" + solution);\r\n        }\r\n    }\r\n\r\n    int N;\r\n    int[] P;\r\n\r\n}\r\n", "idx": "8017"}
{"func": "package googlejam8.p018;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * @author Canberk\r\n */\r\n\r\npublic class CodeJamQuestion {\r\n\r\n    public static void main(String[] args) {\r\n        try {\r\n            Scanner in = new Scanner(new File(\"A-large.in\"));\r\n            PrintWriter out = new PrintWriter(\"A-large.out\");\r\n\r\n            //int tests = Integer.parseInt(in.nextLine());\r\n            int tests = in.nextInt();\r\n            \r\n            for (int test = 1; test <= tests; test++) {\r\n                String answer = \"Case #\" + test + \": \";\r\n                int n = in.nextInt();\r\n                int[] ps = new int[n];\r\n                for(int i=0;i<n;i++){\r\n                    int temp = in.nextInt();\r\n                    ps[i] = temp;\r\n                }\r\n                \r\n                int greatest = 1;\r\n                int great = 0; \r\n                if(ps[0]>ps[1]){\r\n                    greatest = 0;\r\n                    great = 1;\r\n                }\r\n                \r\n                \r\n                for(int i=2;i<n;i++){\r\n                    if(ps[greatest] < ps[i]){\r\n                        great = greatest;\r\n                        greatest = i;\r\n                    }\r\n                    else if(ps[great]< ps[i]) great = i;\r\n                }\r\n                \r\n                while(ps[great]+1 < ps[greatest]){\r\n                    answer += ((char)('A'+greatest)) + \"\" + ((char)('A'+greatest)) + \" \";\r\n                    ps[greatest] -= 2;\r\n                }\r\n                \r\n                if(ps[great] < ps[greatest]){\r\n                    answer += ((char)('A'+greatest)) + \" \";\r\n                    ps[greatest]--;\r\n                }\r\n                \r\n                for(int i=0;i<n;i++){\r\n                    if(i!=greatest && i!=great){\r\n                        while(ps[i]>1){\r\n                            answer += ((char)('A'+i)) + \"\" + ((char)('A'+i)) + \" \";\r\n                            ps[i]-=2;\r\n                        }\r\n                        if(ps[i]==1){\r\n                            answer += ((char)('A'+i)) + \" \";\r\n                            ps[i]-=1;                            \r\n                        }\r\n                    }\r\n                }\r\n                for(int i=0;i<ps[greatest];i++) answer += ((char)('A'+greatest)) + \"\" + ((char)('A'+great)) + \" \";\r\n                \r\n                out.println(answer);\r\n            }\r\n            in.close();\r\n            out.close();\r\n        } catch (FileNotFoundException ex) {\r\n            System.out.println(\"ERROR\");\r\n        }\r\n\r\n    }\r\n    \r\n}\r\n", "idx": "8018"}
{"func": "package googlejam8.p023;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A\r\n{\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tint ind,tmp,n,child;\r\n\t\t\r\n\t\tScanner in=new Scanner(System.in);\r\n\t\tint numRuns=in.nextInt();\r\n\t\tfor (int run=1; run<=numRuns; run++)\r\n\t\t{\r\n\t\t\tn=in.nextInt();\r\n\t\t\tint[] count = new int[n];\r\n\t\t\tint[] heap = new int[n];\r\n\t\t\tint total=0;\r\n\t\t\tfor (int i=0; i<n; i++)\r\n\t\t\t{\r\n\t\t\t\tcount[i]=in.nextInt();\r\n\t\t\t\ttotal+=count[i];\r\n\t\t\t\theap[i]=i;\r\n\t\t\t\tind=i;\r\n\t\t\t\twhile (count[heap[ind]]>count[heap[(ind-1)/2]])\r\n\t\t\t\t{\r\n\t\t\t\t\theap[ind]=heap[(ind-1)/2];\r\n\t\t\t\t\tind=(ind-1)/2;\r\n\t\t\t\t\theap[ind]=i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString solution=\"\";\r\n\t\t\tfor (int i=0; i<total; i++)\r\n\t\t\t{\r\n\t\t\t\ttmp=heap[0];\r\n\t\t\t\tsolution+=(char)('A'+heap[0]);\r\n\t\t\t\tcount[heap[0]]--;\r\n\t\t\t\tind=0;\r\n\t\t\t\twhile (true)\r\n\t\t\t\t{\r\n\t\t\t\t\tchild=ind*2+1;\r\n\t\t\t\t\tif (child+1<n && count[heap[child]]<count[heap[child+1]])\r\n\t\t\t\t\t\tchild++;\r\n\t\t\t\t\tif (child<n && count[heap[child]]>count[heap[ind]])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\theap[ind]=heap[child];\r\n\t\t\t\t\t\theap[child]=tmp;\r\n\t\t\t\t\t\tind=child;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (2*count[heap[0]]<=(total-1-i))\r\n\t\t\t\t\tsolution+=\" \";\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+run+\": \"+solution.trim());\r\n\t\t}\r\n\t}\r\n}", "idx": "8023"}
{"func": "package googlejam8.p031;\nimport org.psjava.ds.heap.BinaryHeapFactory;\nimport org.psjava.ds.heap.Heap;\nimport org.psjava.util.Pair;\nimport org.psjava.util.SeriesComparator;\nimport org.psjava.util.ZeroTo;\n\nimport java.io.*;\nimport java.util.Comparator;\nimport java.util.Scanner;\n\npublic class A implements Runnable {\n\n    @Override\n    public void run() {\n        Scanner in = new Scanner(System.in);\n        for (int casei : ZeroTo.get(in.nextInt())) {\n            Heap<Pair<Integer, Integer>> heap = BinaryHeapFactory.getInstance().create(SeriesComparator.create(new Comparator<Pair<Integer, Integer>>() {\n                @Override\n                public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                    return -o1.v2.compareTo(o2.v2);\n                }\n            }, new Comparator<Pair<Integer, Integer>>() {\n                @Override\n                public int compare(Pair<Integer, Integer> o1, Pair<Integer, Integer> o2) {\n                    return o1.v1.compareTo(o2.v1);\n                }\n            }));\n\n            int n = in.nextInt();\n            int sum = 0;\n            for (int i : ZeroTo.get(n)) {\n                int p = in.nextInt();\n                heap.insert(Pair.create(i, p));\n                sum += p;\n            }\n\n            System.out.print(\"Case #\" + (casei + 1) + \":\");\n            int remain = sum;\n            while (remain > 0) {\n                Pair<Integer, Integer> pair1 = heap.extractMinimum();\n                heap.insert(Pair.create(pair1.v1, pair1.v2 - 1));\n                remain--;\n\n                String r = (char) (pair1.v1 + 'A') + \"\";\n                if (heap.getMinimum().v2 > remain / 2) {\n                    Pair<Integer, Integer> pair2 = heap.extractMinimum();\n                    heap.insert(Pair.create(pair2.v1, pair2.v2 - 1));\n                    remain--;\n                    r += (char) (pair2.v1 + 'A');\n                }\n                System.out.print(\" \" + r);\n            }\n            System.out.println();\n        }\n\n    }\n\n    public static void main(String[] args) throws Exception {\n        System.setIn(new BufferedInputStream(new FileInputStream(\"/Users/imyoyo/Desktop/A-large.in\")));\n        System.setOut(new PrintStream(new OutputStream() {\n\t\t    @Override\n\t\t    public void write(int b) throws IOException {\n\t\t        System.out.write(b);\n\t\t        new PrintStream(\"/Users/imyoyo/kb/mavens/solutions/src/main/java/output.txt\").write(b);\n\t\t    }\n\t\t}));\n        new A().run();\n    }\n\n}\n", "idx": "8031"}
{"func": "package googlejam8.p033;\nimport java.io.BufferedInputStream;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class TaskA {\r\n    \r\n    public static void main(String[] args) {\r\n        long time = System.currentTimeMillis();\r\n        Scanner sc = new Scanner(new BufferedInputStream(System.in));\r\n        int t = sc.nextInt();\r\n        for (int i = 0; i < t; i++) {\r\n            int n = sc.nextInt();\n\t\t\tint[] result = new int[n];\n\t\t\tfor (int i5 = 0; i5 < n; i5++) {\n\t\t\t    result[i5] = sc.nextInt();\n\t\t\t}\r\n            int[] counts = result;\n\t\t\tint missing = -1;\n\t\t\tint maxInd1 = missing == 0 ? 1 : 0;\n\t\t\tfor (int i3 = 1; i3 < counts.length; i3++) {\n\t\t\t    if (i3 != missing) {\n\t\t\t        if (counts[i3] > counts[maxInd1]) {\n\t\t\t            maxInd1 = i3;\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\r\n            int maxInd = maxInd1;\n\t\t\tint maxInd2 = maxInd == 0 ? 1 : 0;\n\t\t\tfor (int i4 = 1; i4 < counts.length; i4++) {\n\t\t\t    if (i4 != maxInd) {\n\t\t\t        if (counts[i4] > counts[maxInd2]) {\n\t\t\t            maxInd2 = i4;\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\r\n            int secondInd = maxInd2;\r\n            StringBuilder sb = new StringBuilder();\n\t\t\tint count = counts[maxInd] - counts[secondInd];\r\n            String s1 = \" \" + (char) ('A' + maxInd) + (char) ('A' + maxInd);\n\t\t\tfor (int i1 = 0; i1 < count / 2; i1++) {\n\t\t\t    sb.append(s1);\n\t\t\t}\n\t\t\tif (count % 2 == 1) {\n\t\t\t    sb.append(' ').append((char) ('A' + maxInd));\n\t\t\t}\r\n            counts[maxInd] = counts[secondInd];\r\n            for (int j = 0; j < n; j++) {\r\n                if (j != maxInd && j != secondInd) {\r\n                    int count1 = counts[j];\n\t\t\t\t\tString s2 = \" \" + (char) ('A' + j) + (char) ('A' + j);\n\t\t\t\t\tfor (int i2 = 0; i2 < count1 / 2; i2++) {\n\t\t\t\t\t    sb.append(s2);\n\t\t\t\t\t}\n\t\t\t\t\tif (count1 % 2 == 1) {\n\t\t\t\t\t    sb.append(' ').append((char) ('A' + j));\n\t\t\t\t\t}\r\n                }\r\n            }\r\n            String s = \" \" + (char) ('A' + maxInd) + (char) ('A' + secondInd);\r\n            for (int j = 0; j < counts[maxInd]; j++) {\r\n                sb.append(s);\r\n            }\r\n            System.out.println(\"Case #\" + (i+1) + \":\" + sb.toString());\r\n        }\r\n        sc.close();\r\n        System.err.println(System.currentTimeMillis() - time);\r\n    }\r\n\r\n}\r\n", "idx": "8033"}
{"func": "package googlejam8.p035;\n\n\nimport java.util.Scanner;\n\nclass A {\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    int T = scanner.nextInt();\n    scanner.nextLine();\n    for (int t = 1; t <= T; t++) {\n      // TODO\n\tint N = scanner.nextInt();\n\tint senators[] = new int[N];\n\t\n\tint top1 = 0;\n\tint top1C = 0;\n\tint top2 = 0;\n\tint top2C = 0;\n\tint count = 0;\n\tfor (int i = 0; i < N; i++) {\n\t  senators[i] = scanner.nextInt();\n\t  count += senators[i];\n\t\n\t  if (senators[i] > top1C) {\n\t\n\t    if (top1C > top2C) {\n\t      top2 = top1;\n\t      top2C = top1C;\n\t    }\n\t\n\t    top1 = i;\n\t    top1C = senators[i];\n\t\n\t  } else if (senators[i]> top2C) {\n\t    top2 = i;\n\t    top2C = senators[i];\n\t  }\n\t}\n\t\n\tSystem.out.printf(\"Case #%d:\", t);\n\twhile (top1C > top2C) {\n\t  char t11 = (char)('A' + top1);\n\t  if (top1C - top2C >= 2) {\n\t    System.out.print(\" \" + t11 + t11);\n\t    top1C -= 2;\n\t  } else {\n\t    System.out.print(\" \" + t11);\n\t    top1C -= 1;\n\t  }\n\t}\n\t\n\tfor (int i = 0; i < N; i++) {\n\t  if (i != top1 && i != top2) {\n\t    char t1 = (char)('A' + i);\n\t    while (senators[i] > 0) {\n\t      if (senators[i] >= 2) {\n\t        System.out.print(\" \" + t1 + t1);\n\t        senators[i] -= 2;\n\t      } else {\n\t        System.out.print(\" \" + t1);\n\t        senators[i] -= 1;\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\twhile (top1C > 0) {\n\t  char t1 = (char)('A' + top1);\n\t  char t2 = (char)('A' + top2);\n\t  System.out.print(\" \" + t1 + t2);\n\t  top1C -= 1;\n\t}\n\t\n\tSystem.out.print(\"\\n\");\n    }\n  }\n}", "idx": "8035"}
{"func": "package googlejam8.p037;\nimport java.util.Scanner;\npublic class A {\n\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\tfor(int t = 1; t<=T; t++) {\n\t\t\tint n = sc.nextInt();\n\t\t\tint[] p = new int[n];\n\t\t\tfor(int i = 0; i<n; i++) {\n\t\t\t\tp[i] = sc.nextInt();\n\t\t\t}\n\t\t\tint maxid1 = -1;\n\t\t\tint max1 = 0;\n\t\t\tint maxid2 = -1;\n\t\t\tint max2 = 0;\n\t\t\tfor(int i = 0; i<n; i++) {\n\t\t\t\tif(p[i]>max1) {\n\t\t\t\t\tmax2 = max1;\n\t\t\t\t\tmaxid2 = maxid1;\n\t\t\t\t\tmax1 = p[i];\n\t\t\t\t\tmaxid1 = i;\n\t\t\t\t} else if(p[i]>max2) {\n\t\t\t\t\tmax2 = p[i];\n\t\t\t\t\tmaxid2 = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tStringBuilder out = new StringBuilder();\n\t\t\tif(max1 != max2) {\n\t\t\t\tfor(int i = 0; i<max1-max2; i++) {\n\t\t\t\t\tout.append((char)('A'+maxid1));\n\t\t\t\t\tout.append(' ');\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0; i<n; i++) {\n\t\t\t\tif(i == maxid1 || i == maxid2) continue;\n\t\t\t\tfor(int j = 0; j<p[i]; j++) {\n\t\t\t\t\tout.append((char)('A'+i));\n\t\t\t\t\tout.append(' ');\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0; i<max2; i++) {\n\t\t\t\tout.append((char)('A'+maxid1));\n\t\t\t\tout.append((char)('A'+maxid2));\n\t\t\t\tout.append(' ');\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\" + t + \": \" + out.toString());\n\t\t}\n\t}\n}", "idx": "8037"}
{"func": "package googlejam8.p039;\nimport java.io.BufferedReader;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.HashMap;\r\n\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tString s = r.readLine();\r\n\t\tint T = Integer.parseInt(s);\r\n\t\tStringBuilder sb = new StringBuilder();\r\n\t\tfor (int i = 0; i < T; i++) {\r\n\t\t\tsb.append(\"Case #\" + (i+1) + \":\");\r\n\t\t\ts = r.readLine();\r\n\t\t\tint N = Integer.parseInt(s);\r\n\t\t\ts = r.readLine();\r\n\t\t\tString[] parts = s.split(\" \");\r\n\t\t\tint[] nrs = new int[N];\r\n\t\t\tint count = 0;\r\n\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\tnrs[j] = Integer.parseInt(parts[j]);\r\n\t\t\t\tcount += nrs[j];\r\n\t\t\t}\r\n\t\t\twhile (count != 0) {\r\n\t\t\t\tint max = 0;\r\n\t\t\t\tchar[] maxP = new char[2];\r\n\t\t\t\tint[] takes = new int[2];\r\n\t\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\t\tif (nrs[j] > max) {\r\n\t\t\t\t\t\tmax = nrs[j];\r\n\t\t\t\t\t\ttakes[0] = j;\r\n\t\t\t\t\t\ttakes[1] = -1;\r\n\t\t\t\t\t\tmaxP[0] = (char) (((int) ('A')) + j);\r\n\t\t\t\t\t\tmaxP[1] = 0;\r\n\t\t\t\t\t} else if (nrs[j] == max) {\r\n\t\t\t\t\t\tmaxP[1] = (char) (((int) ('A')) + j);\r\n\t\t\t\t\t\ttakes[1] = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (takes[1] != -1) {\r\n\t\t\t\t\tif (count == 3) {\r\n\t\t\t\t\t\tsb.append(\" \" + maxP[0]);\r\n\t\t\t\t\t\tnrs[takes[0]]--;\r\n\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsb.append(\" \" + maxP[0] + maxP[1]);\r\n\t\t\t\t\t\tnrs[takes[0]]--;\r\n\t\t\t\t\t\tnrs[takes[1]]--;\r\n\t\t\t\t\t\tcount-=2;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsb.append(\" \" + maxP[0]);\r\n\t\t\t\t\tnrs[takes[0]]--;\r\n\t\t\t\t\tcount--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsb.append(\"\\n\");\r\n\t\t}\t\t\r\n\t\tSystem.out.println(sb.toString());\r\n\t\tPrintWriter writer = new PrintWriter(\"Qual1C.AAA.txt\", \"UTF-8\");\r\n\t\twriter.println(sb.toString());\r\n\t\twriter.close();\r\n\t}\r\n\r\n}\r\n", "idx": "8039"}
{"func": "package googlejam8.p041;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.StreamTokenizer;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class Senate {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tSenate object = new Senate();\r\n\t\tString className = object.getClass().getSimpleName();\r\n\r\n\t\tFileReader fileReader = new FileReader(new File(className.toLowerCase() + \".in\"));\r\n\t\tStreamTokenizer st = new StreamTokenizer(new BufferedReader(fileReader));\r\n\r\n\t\tFileWriter wr = new FileWriter(className.toLowerCase() + \".out\");\r\n\r\n\t\tst.nextToken();\r\n\t\tint testCases = (int) st.nval;\r\n\r\n\t\tfor (int tc = 1; tc <= testCases; tc++) {\r\n\r\n\t\t\tSystem.out.println(\"At test \" + tc + \"/\" + testCases);\r\n\r\n\t\t\tst.nextToken();\r\n\t\t\tint N = (int) st.nval;\r\n\r\n\t\t\tint[] P = new int[N];\r\n\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tst.nextToken();\r\n\t\t\t\tP[i] = (int) st.nval;\r\n\t\t\t}\n\t\t\tList<String> output = new ArrayList<>();\n\t\t\t\n\t\t\tMap<Character, Integer> count = new HashMap<>();\n\t\t\t\n\t\t\tfor (int i = 0; i < P.length; i++) {\n\t\t\t\tcount.put((char) ('A' + i), P[i]);\n\t\t\t}\n\t\t\t\n\t\t\twhile (count.size() > 0) {\n\t\t\t\n\t\t\t\tint maxOccurs = 0;\n\t\t\t\tList<Character> occurs = new ArrayList<>();\n\t\t\t\n\t\t\t\tfor (Character ch : count.keySet())\n\t\t\t\t\tmaxOccurs = Math.max(maxOccurs, count.get(ch));\n\t\t\t\n\t\t\t\tfor (Character ch : count.keySet())\n\t\t\t\t\tif (count.get(ch) == maxOccurs)\n\t\t\t\t\t\toccurs.add(ch);\n\t\t\t\n\t\t\t\tif ((occurs.size() % 2) == 1) {\n\t\t\t\t\t// choose one\n\t\t\t\t\tchar ch = occurs.get(0);\n\t\t\t\n\t\t\t\t\tcount.put(ch, maxOccurs - 1);\n\t\t\t\n\t\t\t\t\tif (maxOccurs - 1 == 0) {\n\t\t\t\t\t\tcount.remove(ch);\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\toutput.add(\"\" + ch);\n\t\t\t\t} else {\n\t\t\t\t\t// remove two\n\t\t\t\t\tchar ch1 = occurs.get(0);\n\t\t\t\t\tchar ch2 = occurs.get(1);\n\t\t\t\n\t\t\t\t\tcount.put(ch1, maxOccurs - 1);\n\t\t\t\t\tcount.put(ch2, maxOccurs - 1);\n\t\t\t\n\t\t\t\t\tif (maxOccurs - 1 == 0) {\n\t\t\t\t\t\tcount.remove(ch1);\n\t\t\t\t\t\tcount.remove(ch2);\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\toutput.add(\"\" + ch1 + \"\" + ch2);\n\t\t\t\t}\n\t\t\t\n\t\t\t}\r\n\r\n\t\t\tList<String> result = output;\r\n\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\tfor (String str : result) {\r\n\t\t\t\tsb.append(str + \" \");\r\n\t\t\t}\r\n\r\n\t\t\twr.write(\"Case #\" + tc + \": \" + sb.toString().trim() + \"\\r\\n\");\r\n\t\t}\r\n\r\n\t\twr.close();\r\n\t}\r\n}\r\n", "idx": "8041"}
{"func": "package googlejam8.p045;\nimport java.io.FileNotFoundException;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\n/**\n * Created by slycer on 4/1/16.\n */\npublic class C {\n\n    public static void main ( String [] args ) throws FileNotFoundException {\n        System.setOut( new PrintStream( \"C.out\" ));\n        Scanner s = new Scanner( System.in ) ;\n        int tests = s.nextInt();\n        for ( int  test=1; test<=tests; test++ ){\n            String answer = \"\";\n            int n = s.nextInt();\n            int [] data = new int[n];\n            int sum=0;\n            for ( int i=0; i<n; i++ ){\n                data[i] = s.nextInt();\n                sum += data[i];\n            }\n\n            int [] current = new int[n];\n\n            for ( int i=0; i<sum; i++ ){\n                int pos = -1;\n\t\t\t\tint min = Integer.MAX_VALUE;\n\t\t\t\tfor ( int i1=0; i1<data.length; i1++ ){\n\t\t\t\t    if ( current[i1]<min && current[i1] < data[i1] ){\n\t\t\t\t        min = current[i1];\n\t\t\t\t        pos = i1;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tint c = pos;\n                current[c]++;\n                if ( i>0 && i%2==0 ){\n                    answer = \" \" + answer;\n                }\n                answer = (char)('A'+c ) + answer;\n            }\n            System.err.println(\"Case #\"+test + \": \" + answer );\n            System.out.println(\"Case #\"+test + \": \" + answer );\n        }\n    }\n}\n", "idx": "8045"}
{"func": "package googlejam8.p050;\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class SenateEvacuation {\r\n\tpublic static void main(String[]args)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tScanner sc = new Scanner(new FileReader(\"A-large.in\"));\r\n\t\t\tFileWriter fw = new FileWriter(new File(\"Output.txt\"));\r\n\t\t\tPrintWriter pw = new PrintWriter(fw);\r\n\t\t\t\t\r\n\t\t\tint t = sc.nextInt();\r\n\t\t\tsc.nextLine();\r\n\t\t\t\t\r\n\t\t\tfor(int r = 1; r <= t; r++)\r\n\t\t\t{\r\n\t\t\t\tint n = sc.nextInt();\r\n\t\t\t\tint [] a = new int[n];\r\n\t\t\t\tint total = 0;\r\n\t\t\t\tSystem.out.print(\"Case# \" + r + \": \");\r\n\t\t\t\tfor(int i = 0; i < n; i++ )\r\n\t\t\t\t{\r\n\t\t\t\t\ta[i] = sc.nextInt();\r\n\t\t\t\t\ttotal += a[i];\r\n\t\t\t\t\tSystem.out.print(a[i] + \" \");\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t\t\r\n\t\t\t\tpw.print(\"Case #\" + r + \": \");\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tint max = 0; \r\n\t\t\t\tint index = -1;\r\n\t\t\t\t\r\n\t\t\t\tboolean next = false;\r\n\t\t\t\tboolean first = true;\r\n\t\t\t\t\r\n\t\t\t\twhile(total > 0)\r\n\t\t\t\t{\t\r\n\t\t\t\t\tif(first && total == 3)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tboolean c = true;\r\n\t\t\t\t\t\t\tfor(int j = 0; j < n; j++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(a[j] > 1)\r\n\t\t\t\t\t\t\t\t\tc = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(c)\r\n\t\t\t\t\t\t\t\tfor(int j = 0; j < n; j++)\r\n\t\t\t\t\t\t\t\t{\t\t\t\r\n\t\t\t\t\t\t\t\t\tif(a[j] == 1)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ta[j] -= 1;\r\n\t\t\t\t\t\t\t\t\t\tpw.print((char)('A' + j)+ \" \");\r\n\t\t\t\t\t\t\t\t\t\ttotal -= 1;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t\tfor(int i = 0; i < n; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(a[i] > max)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tmax = a[i];\r\n\t\t\t\t\t\t\tindex = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ta[index] = a[index] - 1;\r\n\t\t\t\t\tpw.print((char)('A' + index));\r\n\t\t\t\t\ttotal -= 1;\r\n\t\t\t\t\tif(total == 0)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tif(next)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpw.print(\" \");\r\n\t\t\t\t\t\tif(total == 3)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tboolean c = true;\r\n\t\t\t\t\t\t\tfor(int j = 0; j < n; j++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(a[j] > 1)\r\n\t\t\t\t\t\t\t\t\tc = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(c)\r\n\t\t\t\t\t\t\t\tfor(int j = 0; j < n; j++)\r\n\t\t\t\t\t\t\t\t{\t\t\t\r\n\t\t\t\t\t\t\t\t\tif(a[j] == 1)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\ta[j] -= 1;\r\n\t\t\t\t\t\t\t\t\t\tpw.print((char)('A' + j)+ \" \");\r\n\t\t\t\t\t\t\t\t\t\ttotal -= 1;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnext = !next;\r\n\t\t\t\t\tfirst = false;\r\n\t\t\t\t}\r\n\t\t\t\tpw.println();\r\n\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tpw.flush();\t\r\n\t\t\tpw.close();\r\n\t\t}\r\n\t\t\tcatch(IOException ioe){System.out.print(ioe);}\r\n\t}\r\n}\r\n", "idx": "8050"}
{"func": "package googlejam8.p058;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Collections;\r\nimport java.util.PriorityQueue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Senate\r\n{\r\n\tpublic static void main(String[] args) throws Exception\r\n\t{\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor (int t = 0; t < T; ++t)\r\n\t\t{\r\n\t\t\tint N = Integer.parseInt(in.readLine());\r\n\t\t\tPriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\r\n\t\t\tStringTokenizer st = new StringTokenizer(in.readLine());\r\n\t\t\tfor (int i = 0; i < N; ++i) pq.add(Integer.parseInt(st.nextToken())*100+i);\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\tsb.append(String.format(\"Case #%d:\", t+1));\r\n\t\t\twhile (!pq.isEmpty())\r\n\t\t\t{\r\n\t\t\t\tint a = pq.poll();\r\n\t\t\t\tif (a/100 == 1 && pq.size() > 1)\r\n\t\t\t\t{\r\n\t\t\t\t\tsb.append(' ').append((char)(a%100+'A'));\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tint b = pq.poll();\r\n\t\t\t\tint ca = a/100, pa = a%100;\r\n\t\t\t\tint cb = b/100, pb = b%100;\r\n\t\t\t\tsb.append(' ').append((char)(pa+'A')).append((char)(pb+'A'));\r\n\t\t\t\tif (ca > 1) pq.add(a-100);\r\n\t\t\t\tif (cb > 1) pq.add(b-100);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(sb.toString());\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "8058"}
{"func": "package googlejam8.p060;\nimport java.math.BigDecimal;\r\nimport java.math.BigInteger;\r\nimport java.util.*;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\n/**\r\n *\r\n *\r\n */\r\npublic class A {\r\n    public static void main(String[] args) {\r\n         try {\r\n\r\n             Scanner scanner = (new Scanner(new File(\"c:/users/rafal/ideaprojects/src/Ain.txt\")));\r\n\r\n\r\n             FileOutputStream out = new FileOutputStream(\"c:/users/rafal/ideaprojects/src/Aout.txt\");\r\n\r\n             int numberOfCases;\r\n             numberOfCases = scanner.nextInt();\r\n             scanner.nextLine();\r\n\r\n             PrintWriter wr = new PrintWriter(out);\r\n             for (int i = 0; i < numberOfCases; i++) {\r\n                 int caseNumber = i + 1;\n\t\t\t\tint n = scanner.nextInt();\n\t\t\t\t\n\t\t\t\tint largestIdx = 0;\n\t\t\t\tint []p = new int[n];\n\t\t\t\tint sum = 0;\n\t\t\t\tfor (int i1 = 0; i1 < n ; i1++) {\n\t\t\t\t    p[i1] = scanner.nextInt();\n\t\t\t\t    if (p[i1] > p[largestIdx]) {\n\t\t\t\t        largestIdx = i1;\n\t\t\t\t    }\n\t\t\t\t    sum += p[i1];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tStringBuffer result = new StringBuffer();\n\t\t\t\tint largest = p[largestIdx];\n\t\t\t\t\n\t\t\t\tint idx = 0;\n\t\t\t\twhile (sum > 2 * largest) {\n\t\t\t\t    // remove one\n\t\t\t\t    if (idx == largestIdx) {\n\t\t\t\t        idx++;\n\t\t\t\t    }\n\t\t\t\t    if (p[idx] > 0) {\n\t\t\t\t        p[idx]--;\n\t\t\t\t        sum--;\n\t\t\t\t        result.append(\" \" + (char)('A' + idx));\n\t\t\t\t    } else {\n\t\t\t\t        idx++;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twhile (sum > 0) {\n\t\t\t\t    // remove one\n\t\t\t\t    if (idx == largestIdx) {\n\t\t\t\t        idx++;\n\t\t\t\t    }\n\t\t\t\t    if (p[idx] > 0) {\n\t\t\t\t        p[idx]--;\n\t\t\t\t        sum -= 2;\n\t\t\t\t        result.append(\" \" + (char)('A' + idx));\n\t\t\t\t        result.append((char)('A' + largestIdx));\n\t\t\t\t    } else {\n\t\t\t\t        idx++;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\twr.println(\"Case #\" + caseNumber + \": \" + result);\n\t\t\t\tSystem.out.println(\"Case #\" + caseNumber + \": \" + result);\n\t\t\t\t// ...\r\n                 if (i < numberOfCases - 1)\r\n                    scanner.nextLine();\r\n             }\r\n             wr.close();\r\n             out.close();\r\n\r\n         } catch (IOException e) {\r\n             System.out.println(\"Error: \" + e);\r\n         }\r\n     }\r\n\r\n\r\n}", "idx": "8060"}
{"func": "package googlejam8.p064;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class SenateEvacuation {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\r\n\r\n\t\tint T = Integer.parseInt(bf.readLine());\r\n\r\n\t\tfinal StringBuilder[] results = new StringBuilder[T];\r\n\t\tfor (int testcase = 1; testcase <= T; testcase++) {\r\n\r\n\t\t\tint N = Integer.parseInt(bf.readLine());\r\n\t\t\tint[] counts = new int[N];\r\n\t\t\tString[] line = bf.readLine().split(\" \");\r\n\t\t\tint sum = 0;\r\n\t\t\tfor(int i=0; i < N; i++){\r\n\t\t\t\tcounts[i] = Integer.parseInt(line[i]);\r\n\t\t\t\tsum += counts[i];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tStringBuilder output = new StringBuilder();\r\n\t\t\t// greedy\r\n\t\t\twhile(sum != 3 && sum != 0){\r\n\t\t\t\tint firstMax = 0;\r\n\t\t\t\tint secondMax = 0;\r\n\t\t\t\tint firstMaxIdx = -1;\r\n\t\t\t\tint secondMaxIdx = -1;\r\n\t\t\t\t\r\n\t\t\t\tfor(int i=0; i < N; i++){\r\n\t\t\t\t\tif(counts[i] > firstMax){\r\n\t\t\t\t\t\tfirstMax = counts[i];\r\n\t\t\t\t\t\tfirstMaxIdx = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcounts[firstMaxIdx]--;\r\n\t\t\t\tfor(int i=0; i < N; i++){\r\n\t\t\t\t\tif(counts[i] > secondMax){\r\n\t\t\t\t\t\tsecondMax = counts[i];\r\n\t\t\t\t\t\tsecondMaxIdx = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcounts[secondMaxIdx]--;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tchar firstChar = (char) ('A' + firstMaxIdx);\r\n\t\t\t\tchar secondChar = (char) ('A' + secondMaxIdx);\r\n\t\t\t\tsum -= 2;\r\n\t\t\t\toutput.append(firstChar + \"\" + secondChar + \" \");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(sum == 3){\r\n\t\t\t\tint max = 0;\r\n\t\t\t\tint maxIdx = -1;\r\n\t\t\t\t\r\n\t\t\t\tfor(int i=0; i < N; i++){\r\n\t\t\t\t\tif(counts[i] > max){\r\n\t\t\t\t\t\tmax = counts[i];\r\n\t\t\t\t\t\tmaxIdx = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcounts[maxIdx]--;\r\n\t\t\t\tsum--;\r\n\t\t\t\tchar maxChar = (char) ('A' + maxIdx);\r\n\t\t\t\toutput.append(maxChar + \" \");\r\n\t\t\t\t\r\n\r\n\t\t\t\tfor(int i=0; i < N; i++){\r\n\t\t\t\t\tif(counts[i] > 0){\r\n\t\t\t\t\t\tchar lastChar = (char)('A' + i);\r\n\t\t\t\t\t\toutput.append(lastChar);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresults[testcase - 1] = output;\r\n\r\n\t\t}\r\n\r\n\t\tfor (int testcase = 1; testcase <= T; testcase++) {\r\n\t\t\tSystem.out.println(\"Case #\" + testcase + \": \"\r\n\t\t\t\t\t+ results[testcase - 1].toString());\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "8064"}
{"func": "package googlejam8.p066;\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Senate {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner in = new Scanner(new File(\"A-large.in\"));\r\n\t\t// System.out.println(\"HELLO\");\r\n\t\t//Scanner in = new Scanner(System.in);\r\n\t\tPrintWriter fileOut = new PrintWriter(new FileWriter(\"SenateLarge.out\"));\r\n\t\t\r\n\t\tint T = in.nextInt();\r\n\t\tfor (int test = 1; test <= T; test++)\r\n\t\t{\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tArrayList<Integer> all = new ArrayList<Integer>();\r\n\t\t\tint total = 0;\r\n\t\t\tfor (int m = 0; m < N; m++)\r\n\t\t\t{\r\n\t\t\t\tint num = in.nextInt();\r\n\t\t\t\ttotal += num;\r\n\t\t\t\tall.add(num);\t\t\t\t\r\n\t\t\t}\r\n\t\t\tfileOut.printf(\"Case #%d: \", test);\r\n\t\t\twhile (total != 0)\r\n\t\t\t{\r\n\t\t\t\tint max = 0;\r\n\t\t\t\tint secondI = 0;\r\n\t\t\t\tboolean secondUsed = false;\r\n\t\t\t\tfor (int i = 0; i < N; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (all.get(i) >= all.get(max))\r\n\t\t\t\t\t\tmax = i;\r\n\t\t\t\t\tif (all.get(i) >= total/2.0 && !secondUsed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecondI = i;\r\n\t\t\t\t\t\tsecondUsed = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (secondUsed && secondI != max)\r\n\t\t\t\t{\r\n\t\t\t\t\tall.set(max, all.get(max) - 1);\r\n\t\t\t\t\tchar c = (char) (max + 'A');\r\n\t\t\t\t\tfileOut.print(c);\r\n\t\t\t\t\ttotal--;\r\n\t\t\t\t\tall.set(secondI, all.get(secondI) - 1);\r\n\t\t\t\t\tc = (char) (secondI + 'A');\r\n\t\t\t\t\tfileOut.print(c + \" \");\r\n\t\t\t\t\ttotal--;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tall.set(max, all.get(max) - 1);\r\n\t\t\t\t\tchar c = (char) (max + 'A');\r\n\t\t\t\t\tfileOut.print(c + \" \");\r\n\t\t\t\t\ttotal--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfileOut.println();\r\n\t\t}\r\n\t\tfileOut.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "8066"}
{"func": "package googlejam8.p070;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        Scanner in = new Scanner(new File(\"A-large (1).in\"));\r\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\r\n\r\n        int caseLength = in.nextInt();\r\n        for (int caseNumber = 1; caseNumber <= caseLength; caseNumber++) {\r\n            out.write(String.format(\"Case #%d: \", caseNumber));\r\n            int partyCount = in.nextInt();\r\n\r\n            int[] party = new int[partyCount];\r\n            int total = 0;\r\n\r\n            for (int i = 0; i < partyCount; i++) {\r\n                party[i] = in.nextInt();\r\n                total += party[i];\r\n            }\r\n\r\n            ArrayList<Integer> nonZero = new ArrayList<>();\r\n            for (int i = 0; i < partyCount; i++) {\r\n                if (party[i] > 0) {\r\n                    nonZero.add(i);\r\n                }\r\n            }\r\n\r\n            if (nonZero.size() == 2) {\r\n                int count = party[nonZero.get(0)];\r\n                int first = nonZero.get(0);\r\n                int second = nonZero.get(1);\r\n\r\n                for (int i = 0; i < count; i++) {\r\n                    out.write((char) ('A' + first));\r\n                    out.write((char) ('A' + second));\r\n                    out.write((' '));\r\n                }\r\n            } else {\r\n\r\n                while (total > 2) {\r\n                    int maxParty = 0;\r\n\r\n                    for (int i = 1; i < partyCount; i++) {\r\n                        if (party[i] > party[maxParty]) {\r\n                            maxParty = i;\r\n                        }\r\n                    }\r\n\r\n                    party[maxParty]--;\r\n                    total--;\r\n                    out.write((char) ('A' + maxParty));\r\n                    out.write(' ');\r\n                }\r\n\r\n                for (int i = 0; i < partyCount; i++) {\r\n                    if (party[i] != 0) {\r\n                        out.write((char) ('A' + i));\r\n                    }\r\n                }\r\n            }\r\n\r\n            out.write('\\n');\r\n\r\n        }\r\n\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "8070"}
{"func": "package googlejam8.p080;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by Lich on 2016/5/1.\r\n */\r\npublic class A {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        try (Scanner scanner = new Scanner(new File(\"round1C_A.in\"));\r\n             PrintWriter writer = new PrintWriter(new File(\"round1C_A.out\"))) {\r\n\r\n            int caseCount = scanner.nextInt();\r\n            for (int caseNo = 1; caseNo <= caseCount; ++caseNo) {\r\n                int n = scanner.nextInt();\r\n                int[] x = new int[n];\r\n                int sum = 0;\r\n                for (int i = 0; i < n; ++i) {\r\n                    x[i] = scanner.nextInt();\r\n                    sum += x[i];\r\n                }\r\n\r\n                writer.print(String.format(\"Case #%d: \", caseNo));\r\n                if (sum % 2 == 1) {\r\n                    int max = 0, index = 0;\r\n                    for (int i = 0; i < n; ++i) {\r\n                        if (x[i] > max) {\r\n                            max = x[i];\r\n                            index = i;\r\n                        }\r\n                    }\r\n                    writer.print((char)('A' + index));\r\n                    writer.print(\" \");\r\n                    x[index]--;\r\n                }\r\n                while (true) {\r\n                    int max = 0, index = 0;\r\n                    for (int i = 0; i < n; ++i) {\r\n                        if (x[i] > max) {\r\n                            max = x[i];\r\n                            index = i;\r\n                        }\r\n                    }\r\n                    if (max == 0)\r\n                        break;\r\n                    writer.print((char)('A' + index));\r\n                    x[index]--;\r\n                    max = 0;\r\n                    index = 0;\r\n                    for (int i = 0; i < n; ++i) {\r\n                        if (x[i] > max) {\r\n                            max = x[i];\r\n                            index = i;\r\n                        }\r\n                    }\r\n                    if (max == 0)\r\n                        break;\r\n                    writer.print((char)('A' + index));\r\n                    x[index]--;\r\n                    writer.print(\" \");\r\n                }\r\n                writer.println();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "8080"}
{"func": "package googlejam8.p081;\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.Scanner;\nimport java.util.TreeMap;\n\n/**\n * Created by pallavi on 8/5/16.\n */\npublic class SenateEvacuation {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scanner = new Scanner(new BufferedReader(new FileReader(\"in.txt\")));\n        PrintWriter writer = new PrintWriter(\"out.txt\");\n        int t = scanner.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int n = scanner.nextInt();\n            HashMap<Character, Integer> map = new HashMap<>();\n            for (int j = 0; j < n; j++) {\n                char ch = 'A';\n                ch += j;\n                map.put(ch, scanner.nextInt());\n            }\n            writer.print(\"Case #\" + i + \": \");\n            if (map.size() == 0) continue;\n            char mxc = 'A';\n            int mx = 0;\n            for (char ch: map.keySet()) {\n                if (map.get(ch) > mx) {\n                    mxc = ch;\n                    mx = map.get(mxc);\n                }\n            }\n            if (mx == 0) continue;\n            map.remove(mxc);\n            char mxc1 = 'A';\n            int mx1 = 0;\n            for (char ch: map.keySet()) {\n                if (map.get(ch) > mx1) {\n                    mxc1 = ch;\n                    mx1 = map.get(mxc1);\n                }\n            }\n            int diff = mx - mx1;\n            while (diff > 0) {\n                writer.print(mxc + \" \");\n                diff--;\n                mx--;\n            }\n            map.remove(mxc1);\n            for (char ch1: map.keySet()) {\n                int k = map.get(ch1);\n                while (k > 0) {\n                    writer.print(ch1 + \" \");\n                    k--;\n                }\n            }\n            while (mx != 0) {\n                writer.print(mxc + \"\" + mxc1 + \" \");\n                mx--;\n            }\n            writer.println();\n        }\n        writer.close();\n        scanner.close();\n    }\n}\n", "idx": "8081"}
{"func": "package googlejam8.p095;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemASmall {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(\r\n\t\t\t\tSystem.in)));\r\n\t\tin = new Scanner(new File(\"A-large.in\"));\r\n\t\t\r\n\t\tint T = in.nextInt();\r\n\t\tfor (int i=1; i<=T; i++) {\r\n\t\t\tint N = in.nextInt();\r\n\t\t\t\r\n\t\t\tint[] P = new int[N];\r\n\t\t\tint total = 0;\r\n\t\t\tfor (int j=0; j<N; j++) {\r\n\t\t\t\tP[j] = in.nextInt();\r\n\t\t\t\ttotal += P[j];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\twhile (total > 0) {\r\n\t\t\t\tint max1 = 0;\r\n\t\t\t\tint max2 = 0;\r\n\t\t\t\tint max1Idx = 0;\r\n\t\t\t\tint max2Idx = 0;\r\n\t\t\t\tfor (int k=0; k<N; k++) {\r\n\t\t\t\t\tif (P[k] > max1) {\r\n\t\t\t\t\t\tmax2 = max1;\r\n\t\t\t\t\t\tmax1 = P[k];\r\n\t\t\t\t\t\tmax2Idx = max1Idx;\r\n\t\t\t\t\t\tmax1Idx = k;\r\n\t\t\t\t\t} else if (P[k] > max2) {\r\n\t\t\t\t\t\tmax2 = P[k];\r\n\t\t\t\t\t\tmax2Idx = k;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tsb.append(' ');\r\n\t\t\t\tif (P[max1Idx] > 1 && max2*2 <= total-2) {\r\n\t\t\t\t\tP[max1Idx] -= 2;\r\n\t\t\t\t\ttotal -= 2;\r\n\t\t\t\t\tsb.append((char)('A'+max1Idx));\r\n\t\t\t\t\tsb.append((char)('A'+max1Idx));\r\n\t\t\t\t} else if (max2*2 <= total-1) {\r\n\t\t\t\t\tP[max1Idx]--;\r\n\t\t\t\t\ttotal--;\r\n\t\t\t\t\tsb.append((char)('A'+max1Idx));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tP[max1Idx]--;\r\n\t\t\t\t\tP[max2Idx]--;\r\n\t\t\t\t\ttotal -= 2;\r\n\t\t\t\t\tsb.append((char)('A'+max1Idx));\r\n\t\t\t\t\tsb.append((char)('A'+max2Idx));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.printf(\"Case #%d:%s\\n\", i, sb.toString());\r\n\t\t}\r\n\t}\r\n}", "idx": "8095"}
{"func": "package googlejam8.p101;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class ProblemA {\r\n\t\r\n\tpublic static void main(String[] agrs) throws FileNotFoundException {\r\n\t\tString FILENAME = \"longA\";\r\n\t\t\r\n\t\tFile FILE = new File(FILENAME);\r\n\t\t\r\n\t\tScanner fileReader = new Scanner(FILE);\r\n\t\t\r\n\t\tint T =  fileReader.nextInt();\r\n\t\t\r\n\t\tfor (int test = 0; test < T; test ++) {\r\n\t\t\tint parties = fileReader.nextInt();\r\n\t\t\tint[] senate = new int[parties];\r\n\t\t\tint left = 0;\r\n\t\t\tint partiesLeft = parties;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor (int party = 0; party < parties; party ++) {\r\n\t\t\t\tint x = fileReader.nextInt();\r\n\t\t\t\tsenate[party] = x;\r\n\t\t\t\tleft += x;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tArrayList<String> out = new ArrayList<String>();\r\n\t\t\tchar[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\r\n\t\t\t\r\n\t\t\twhile (left > 0) {\r\n\t\t\t\t\r\n\t\t\t\tint biggest = -1;\r\n\t\t\t\tint max = -1;\r\n\t\t\t\tint biggest2 = -1;\r\n\t\t\t\tint max2 = -1;\r\n\t\t\t\tfor (int party = 0; party < parties; party ++) {\r\n\t\t\t\t\tif (senate[party] >= max) {\r\n\t\t\t\t\t\tmax2 = max;\r\n\t\t\t\t\t\tbiggest2 = biggest;\r\n\t\t\t\t\t\tmax = senate[party];\r\n\t\t\t\t\t\tbiggest = party;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tString addMe = \"\";\r\n\t\t\t\t\r\n\t\t\t\tif (partiesLeft == 2 && max == max2) {\r\n\t\t\t\t\taddMe = \"\" + alphabet[biggest] + alphabet[biggest2];\r\n\t\t\t\t\tleft -= 2;\r\n\t\t\t\t\tsenate[biggest] -= 1;\r\n\t\t\t\t\tsenate[biggest2] -= 1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (senate[biggest2] == 0) {\r\n\t\t\t\t\t\tpartiesLeft --;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tleft -= 1;\r\n\t\t\t\t\taddMe = \"\" + alphabet[biggest];\r\n\t\t\t\t\tsenate[biggest] -= 1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (senate[biggest] == 0) {\r\n\t\t\t\t\tpartiesLeft --;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tout.add(addMe);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint numOuts = out.size();\r\n\t\t\tSystem.out.print(\"Case #\" + (test+1) + \": \");\r\n\t\t\tfor (int i = 0; i < numOuts; i ++) {\r\n\t\t\t\tString me = out.get(i);\r\n\t\t\t\tSystem.out.print(me + \" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"\");\r\n\t\t}\r\n\t\tfileReader.close();\r\n\t}\r\n}", "idx": "8101"}
{"func": "package googlejam8.p107;\nimport java.util.*;\nimport java.math.BigInteger;\n//import edu.princeton.cs.algs4.*;\n\n\npublic class A\n{\n    static int [] arr;\n    static int N; \n    public static void main (String [] args)\n    {\n        Scanner sc = new Scanner(System.in);\n\n        int nocase = sc.nextInt();\n        sc.nextLine();\n        for(int ind=1; ind<=nocase; ind++)\n        {\n            N = sc.nextInt();\n            arr = new int[N];\n            int total = 0;\n            for(int i=0; i<N; i++)\n                arr[i] = sc.nextInt();\n            for(int i=0; i<N; i++)\n                total+=arr[i];\n            StringBuffer sb = new StringBuffer();\n            while(total>2)\n            {\n                int max_ind = 0;\n                for(int i=1; i<N; i++)\n                    if(arr[i] > arr[max_ind])\n                        max_ind = i;\n                \n                arr[max_ind]--;\n                total--;\n                sb.append((char)('A'+max_ind));\n\n                if(total==2)\n                {\n                    sb.append(' ');\n                    break;\n                }\n                for(int i=0; i<N; i++)\n                {\n                    if(arr[i] >= (total+0.0)/2.0)\n                    {\n                        arr[i]--;\n                        total--;\n                        sb.append((char)('A'+i));\n                        break;\n                    }\n                }\n                sb.append(' ');\n\n            }\n            //last 2\n            for(int i=0; i<N; i++)\n                if(arr[i] >0 )\n                    sb.append((char)('A'+i));\n        \n            String soln = sb.toString();    \n            System.out.printf(\"Case #%d: %s\\n\", ind, soln);\n        }\n    }\n\n}\n", "idx": "8107"}
{"func": "package googlejam8.p109;\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by Benedek on 5/8/2016.\r\n */\r\npublic class CA {\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        int T = in.nextInt();\r\n\r\n        for (int t = 1; t <= T; t++) {\r\n            int N = in.nextInt();\r\n            ArrayList<Integer> senate = new ArrayList<>();\r\n            for (int i = 0; i < N; i++) {\r\n                senate.add(i, 0);\r\n            }\r\n            int senateSize = 0;\r\n            for (int i = 0; i < N; i++) {\r\n                int temp = in.nextInt();\r\n                senate.set(i, temp);\r\n                senateSize += temp;\r\n            }\r\n\r\n            System.out.printf(\"Case #%d: \", t);\r\n            while (senateSize > 2) {\r\n                int max = 0;\r\n                int maxIndex = -1;\r\n                int second = 0;\r\n                int secondIndex = -1;\r\n                ArrayList<Integer> ordered = new ArrayList<>(senate);\r\n                Collections.sort(ordered, Collections.reverseOrder());\r\n                max = ordered.get(0);\r\n                maxIndex = senate.indexOf(max);\r\n                second = ordered.get(1);\r\n                secondIndex = senate.lastIndexOf(second);\r\n                if (max == second && senateSize != 3) {\r\n                    System.out.print(Character.toChars(65 + maxIndex)[0]);\r\n                    System.out.print(Character.toChars(65 + secondIndex)[0]);\r\n                    System.out.print(\" \");\r\n                    senate.set(maxIndex, senate.get(maxIndex) - 1);\r\n                    senate.set(secondIndex, senate.get(secondIndex) - 1);\r\n                    senateSize -= 2;\r\n                } else {\r\n                    System.out.print(Character.toChars(65 + maxIndex)[0]);\r\n                    System.out.print(\" \");\r\n                    senate.set(maxIndex, senate.get(maxIndex) - 1);\r\n                    senateSize -= 1;\r\n                }\r\n            }\r\n            if (senateSize == 2){\r\n                int max = 0;\r\n                int maxIndex = -1;\r\n                int second = 0;\r\n                int secondIndex = -1;\r\n                ArrayList<Integer> ordered = new ArrayList<>(senate);\r\n                Collections.sort(ordered, Collections.reverseOrder());\r\n                max = ordered.get(0);\r\n                maxIndex = senate.indexOf(max);\r\n                second = ordered.get(1);\r\n                secondIndex = senate.lastIndexOf(second);\r\n                System.out.print(Character.toChars(65 + maxIndex)[0]);\r\n                System.out.print(Character.toChars(65 + secondIndex)[0]);\r\n                System.out.print(\" \");\r\n                senate.set(maxIndex, senate.get(maxIndex) - 1);\r\n                senate.set(secondIndex, senate.get(secondIndex) - 1);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n\r\n", "idx": "8109"}
{"func": "package googlejam8.p113;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\npublic class A\n{\n\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tout = new PrintWriter(new FileWriter(\"outA.txt\"));\n\t\tint testCases = Integer.parseInt(next());\n\t\tfor (int r = 1; r <= testCases; r++)\n\t\t{\n\t\t\tint n = Integer.parseInt(next());\n\t\t\tint[] p = new int[n];\n\n\t\t\tint t = 0;\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t{\n\t\t\t\tp[i] = Integer.parseInt(next());\n\t\t\t\tt += p[i];\n\t\t\t}\n\n\t\t\tout.printf(\"Case #%d: \", r);\n\n\t\t\tif (t % 2 == 1)\n\t\t\t{\n\t\t\t\tint max = 0;\n\t\t\t\tfor (int i = 1; i < n; i++)\n\t\t\t\t\tif (p[i] > p[max])\n\t\t\t\t\t\tmax = i;\n\t\t\t\tp[max]--;\n\t\t\t\tt--;\n\t\t\t\tout.print((char) (max + 'A') + \" \");\n\t\t\t}\n\n\t\t\twhile (t > 0)\n\t\t\t{\n\t\t\t\tint max = 0;\n\t\t\t\tint max2 = -1;\n\t\t\t\tfor (int i = 1; i < n; i++)\n\t\t\t\t\tif (p[i] > p[max])\n\t\t\t\t\t\tmax = i;\n\t\t\t\t\telse if (p[i] == p[max])\n\t\t\t\t\t\tmax2 = i;\n\n\t\t\t\tif (max2 != -1)\n\t\t\t\t{\n\t\t\t\t\tout.print((char) (max + 'A') + \"\"\n\t\t\t\t\t\t\t+ (char) (max2 + 'A')\n\t\t\t\t\t\t\t+ \" \");\n\t\t\t\t\tp[max]--;\n\t\t\t\t\tp[max2]--;\n\t\t\t\t\tt -= 2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (p[max] == 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tout.print((char) (max + 'A') + \" \");\n\t\t\t\t\t\tp[max]--;\n\t\t\t\t\t\tt--;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tout.print((char) (max + 'A') + \"\"\n\t\t\t\t\t\t\t\t+ (char) (max + 'A') + \" \");\n\t\t\t\t\t\tp[max] -= 2;\n\t\t\t\t\t\tt -= 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tout.println();\n\t\t}\n\t\tout.close();\n\t}\n\n\tstatic BufferedReader br = new BufferedReader(new InputStreamReader(\n\t\t\tSystem.in));\n\tstatic PrintWriter out = new PrintWriter(new BufferedWriter(\n\t\t\tnew OutputStreamWriter(System.out)));\n\tstatic StringTokenizer st;\n\n\tstatic String next() throws IOException\n\t{\n\t\twhile (st == null || !st.hasMoreTokens())\n\t\t\tst = new StringTokenizer(br.readLine().trim());\n\t\treturn st.nextToken();\n\t}\n\n}\n", "idx": "8113"}
{"func": "package googlejam8.p114;\nimport java.util.*;\nimport java.io.*;\nimport java.math.*;\nimport static java.lang.Math.*;\nimport static java.lang.System.*;\nimport static java.lang.Integer.*;\n\npublic class A {\n    public static void main(String args[]) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(in));\n        int T = parseInt(br.readLine());\n        for (int z=0;z<T;z++) {\n            int N = parseInt(br.readLine());\n            int[] P = new int[N];\n            String[] ss = br.readLine().trim().split(\"\\\\s+\");\n\n            for(int i=0;i<N;i++) P[i] = parseInt(ss[i]);\n            int first = 0;\n            int second = -1;\n            for(int i=1;i<N;i++) {\n                if (P[first] < P[i]) {\n                    first = i;\n                }\n            }\n            for (int i=0;i<N;i++) {\n                if (first == i) continue;\n                if (second == -1 || P[second] < P[i]) {\n                    second = i;\n                }\n            }\n            StringBuilder sb = new StringBuilder();\n            while(P[first] > P[second]) {\n                if (P[first] == P[second] + 1) {\n                    sb.append((char)(first + 'A'));\n                    sb.append(\" \");\n                    P[first]--;\n                } else {\n                    sb.append((char)(first + 'A'));\n                    sb.append((char)(first + 'A'));\n                    sb.append(\" \");\n                    P[first] -= 2;\n                }\n            }\n            // out.println(\">> \" + first + \" \" + second + \" \" + Arrays.toString(P));\n            for (int i=0;i<N;i++) {\n                if (i == first || i == second) continue;\n                while(P[i] > 0) {\n                    if (P[i] >= 2) {\n                        sb.append((char)(i + 'A'));\n                        sb.append((char)(i + 'A'));\n                        sb.append(\" \");\n                        P[i] -= 2;\n                    } else {\n                        sb.append((char)(i + 'A'));\n                        sb.append(\" \");\n                        P[i]--;\n                    }\n                }\n            }\n            while(P[first] > 0) {\n                sb.append((char)(first + 'A'));\n                sb.append((char)(second + 'A'));\n                sb.append(\" \");\n                P[first]--;\n                P[second]--;\n            }\n            out.println(\"Case #\"+(z+1)+\": \" + sb.toString().trim());\n        }\n    }\n}\n", "idx": "8114"}
{"func": "package googlejam8.p118;\n\nimport java.io.*;\nimport java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\n    private static final String inputPath = \"/home/abduqodir/Programming/ideaProjects/Other/functions.in\";\n    private static final String outputPath = \"/home/abduqodir/Programming/ideaProjects/Other/functions.out\";\n    static int Len;\n    public static void main (String[] args) throws IOException {\n        Scanner scanner = new Scanner(new FileInputStream(inputPath));\n        PrintWriter printer = new PrintWriter(new FileOutputStream(outputPath));\n        int T = scanner.nextInt();\n        for (int i = 0; i < T; i++) {\n            printer.format(\"Case #%d: \", i + 1);\n            int n = scanner.nextInt();\n            int p[] = new int[n];\n            for (int j = 0; j < n; j++) {\n                p[j] = scanner.nextInt();\n            }\n            if (n == 2) {\n                for (int j = 0; j < p[0]; j++) {\n                    printer.print(\"AB \");\n                }\n                printer.println();\n                printer.flush();\n                continue;\n            }\n            for (int k = 1000; k > 1; k--) {\n                for (int j = 0; j < n; j++) {\n                    if (p[j] == k) {\n                        printer.print((char) ('A' + j));\n                        printer.print(' ');\n                        p[j]--;\n                    }\n                }\n            }\n            for (int j = 2; j < n; j++) {\n                printer.print((char) ('A' + j));\n                printer.print(' ');\n            }\n            printer.print(\"AB \");\n            printer.println();\n            printer.flush();\n        }\n    }\n}\n", "idx": "8118"}
{"func": "package googlejam8.p128;\nimport java.awt.font.NumericShaper;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\nimport javax.print.attribute.standard.Finishings;\r\n\r\npublic class ProblemA {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n//\t\tScanner sc = new Scanner(new File(\"A-small-attempt0.in\"));\r\n//\t\tScanner sc = new Scanner(new File(\"A.in\"));\r\n\t\tScanner sc = new Scanner(new File(\"A-large.in\"));\r\n\r\n\t\tint t = sc.nextInt();\r\n\t\tint count = 1;\r\n\r\n\t\twhile (t-- > 0) {\r\n\t\t\tint numParties = sc.nextInt();\r\n\t\t\tint[] partieMembers = new int[numParties];\r\n\t\t\tint numSenators = 0;\r\n\t\t\t\r\n\t\t\tfor(int i = 0; i < numParties; i++) {\r\n\t\t\t\tpartieMembers[i] = sc.nextInt();\r\n\t\t\t\tnumSenators += partieMembers[i];\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\tSystem.out.print(\"Case #\" + count + \": \");\r\n\t\t\t\r\n\t\t\t// Keep parties even sized\r\n\t\t\tif(numParties == 2) {\r\n\t\t\t\tif(partieMembers[0] == partieMembers[1] + 2) {\r\n\t\t\t\t\tSystem.out.print(\"AA \");\r\n\t\t\t\t\tnumSenators -= 2;\r\n\t\t\t\t} else if(partieMembers[0] + 2 == partieMembers[1]) {\r\n\t\t\t\t\tSystem.out.print(\"BB \");\r\n\t\t\t\t\tnumSenators -= 2;\r\n\t\t\t\t} else if(partieMembers[0] == partieMembers[1] + 1) {\r\n\t\t\t\t\tSystem.out.print(\"A \");\r\n\t\t\t\t\tnumSenators--;\r\n\t\t\t\t} else if(partieMembers[0] + 1 == partieMembers[1]) {\r\n\t\t\t\t\tSystem.out.print(\"B \");\r\n\t\t\t\t\tnumSenators--;\r\n\t\t\t\t} else if(partieMembers[0] == partieMembers[1]) {\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor(int i = 0; i < numSenators/2; i++) {\r\n\t\t\t\t\tSystem.out.print(\"AB \");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor(int i = 0; i < numSenators - 2; i++) {\r\n\t\t\t\t\tint biggestPartie1 = 0;\n\t\t\t\t\tint members = 0;\n\t\t\t\t\t\n\t\t\t\t\tfor(int i1 = 0; i1 < partieMembers.length; i1++) {\n\t\t\t\t\t\tif(members < partieMembers[i1]) {\n\t\t\t\t\t\t\tmembers = partieMembers[i1];\n\t\t\t\t\t\t\tbiggestPartie1 = i1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint biggestPartie = biggestPartie1;\r\n\t\t\t\t\tpartieMembers[biggestPartie]--;\r\n\t\t\t\t\tchar evac = (char) (65 + biggestPartie);\r\n\t\t\t\t\r\n\t\t\t\t\tSystem.out.print(evac + \" \");\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\tString evac = \"\";\r\n\t\t\t\tfor(int i = 0; i < numParties; i++) {\r\n\t\t\t\t\tif(partieMembers[i] > 0) {\r\n\t\t\t\t\t\tevac += (char) (65 + i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.print(evac);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\tsc.close();\r\n\t}\r\n}\r\n", "idx": "8128"}
{"func": "package googlejam8.p130;\nimport java.io.BufferedReader;\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintStream;\r\nimport java.util.Formatter;\r\nimport java.util.Locale;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class A {\r\n\r\n\tstatic StringBuilder sb = new StringBuilder();\r\n\tstatic Formatter buf = new Formatter(sb, Locale.US);\r\n\tstatic int T;\r\n\tstatic int N; \r\n\tstatic int[] P;\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tSystem.setIn(new FileInputStream(\"A-small.in\"));\r\n\t\tSystem.setOut(new PrintStream(\"A-small.out\"));\r\n\t\tStringTokenizer st;\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tT = Integer.parseInt(in.readLine());\r\n\t\tfor (int c = 1; c <= T; c++) {\r\n\t\t\tN = Integer.parseInt(in.readLine());\r\n\t\t\tst = new StringTokenizer(in.readLine());\r\n\t\t\tP = new int[N];\r\n\t\t\tfor (int i = 0; i < N; i++) P[i]=Integer.parseInt(st.nextToken()); \r\n\t\t\tbuf.format(\"Case #%d:\", c);\r\n\t\t\tString s;\n\t\t\twhile(true){\n\t\t\t\tint su = 0;\n\t\t\t\tfor (int i = 0; i < P.length; i++) {\n\t\t\t\t\tsu = su + P[i];\n\t\t\t\t}\n\t\t\t\tif (su==3){\n\t\t\t\t\tint m=0;\n\t\t\t\t\tfor (int i = 1; i < P.length; i++) {\n\t\t\t\t\t\tif (P[i]>P[m]) m=i;\n\t\t\t\t\t}\n\t\t\t\t\tif (P[m]==0) break;\n\t\t\t\t\ts = \"\"+(char)('A'+m);\n\t\t\t\t\tbuf.format(\" %s\", s);\n\t\t\t\t\tP[m]--;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tint m=0;\n\t\t\t\tfor (int i = 1; i < P.length; i++) {\n\t\t\t\t\tif (P[i]>P[m]) m=i;\n\t\t\t\t}\n\t\t\t\tif (P[m]==0) break;\n\t\t\t\ts = \"\"+(char)('A'+m);\n\t\t\t\tbuf.format(\" %s\", s);\n\t\t\t\tP[m]--;\n\t\t\t\tm=0;\n\t\t\t\tfor (int i = 1; i < P.length; i++) {\n\t\t\t\t\tif (P[i]>P[m]) m=i;\n\t\t\t\t}\n\t\t\t\tif (P[m]==0) break;\n\t\t\t\ts = \"\"+(char)('A'+m);\n\t\t\t\tP[m]--;\n\t\t\t\tbuf.format(\"%s\", s);\n\t\t\t}\n\t\t\tbuf.format(\"\\n\");\r\n\t\t}\r\n\t\tSystem.out.print(sb.toString());\r\n\t}\r\n\r\n}\r\n", "idx": "8130"}
{"func": "package googlejam8.p133;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n\r\npublic class a \r\n{\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException \r\n\t{\r\n\t\tScanner sc = new Scanner(new File(\"input.txt\"));\r\n\t\tPrintWriter out = new PrintWriter(\"output.txt\");\r\n\t\t\r\n\t\tint n_case = sc.nextInt();\r\n\t\tfor(int i=1;i<=n_case;i++)\r\n\t\t{\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint sen[] = new int[n];\r\n\t\t\tint tot  = 0;\r\n\t\t\tfor(int j=0;j<n;j++)\r\n\t\t\t{\r\n\t\t\t\tsen[j] = sc.nextInt();\r\n\t\t\t\ttot+=sen[j];\r\n\t\t\t}\n\t\t\tint tot1 = tot;\n\t\t\tString ris1 = new String();\n\t\t\t\n\t\t\tint max1 = -1;\n\t\t\tint pos1 = -1;\n\t\t\tint max2 = -1;\n\t\t\tint pos2 = -1;\n\t\t\t\n\t\t\twhile(tot1 > 3)\n\t\t\t{\n\t\t\t\tmax1 = -1;\n\t\t\t\tpos1 = -1;\n\t\t\t\tmax2 = -1;\n\t\t\t\tpos2 = -1;\n\t\t\t\tfor(int i2=0;i2<n;i2++)\n\t\t\t\t{\n\t\t\t\t\tif(sen[i2]>max1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax2=max1;\n\t\t\t\t\t\tpos2=pos1;\n\t\t\t\t\t\tmax1=sen[i2];\n\t\t\t\t\t\tpos1=i2;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif(sen[i2]>max2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmax2=sen[i2];\n\t\t\t\t\t\t\tpos2=i2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(pos1!=-1)\n\t\t\t\t{\n\t\t\t\t\tris1+= Character.toChars(('A'+pos1))[0];\n\t\t\t\t\tsen[pos1]--;\n\t\t\t\t\ttot1--;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(pos2!=-1)\n\t\t\t\t{\n\t\t\t\t\tris1+=Character.toChars(('A'+pos2))[0];\n\t\t\t\t\tsen[pos2]--;\n\t\t\t\t\ttot1--;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tris1+=\" \";\n\t\t\t}\n\t\t\t\n\t\t\tString last = \"\";\n\t\t\tfor(int i1=0;i1<n;i1++)\n\t\t\t{\n\t\t\t\tif(sen[i1]!=0 && last.length()<2)\n\t\t\t\t{\n\t\t\t\t\tlast+=Character.toChars(('A'+i1))[0];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\tif(last.length()==2)\n\t\t\t\t\t{\n\t\t\t\t\t\tris1+=Character.toChars(('A'+i1))[0]+\" \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\r\n\t\t\tString ris = ris1 + last;\r\n\t\t\tout.println(\"Case #\"+i+\": \"+ris);\r\n\t\t}\r\n\t\t\r\n\t\tsc.close();\r\n\t\tout.close();\r\n\t}\r\n\r\n}\r\n", "idx": "8133"}
{"func": "package googlejam8.p138;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\n\r\npublic class A{\r\n\tstatic final String inFile=\"A-small.in\";\r\n\tstatic final String outFile=\"A.out\";\r\n\t\r\n\tstatic int t;\r\n\tstatic String line,str;\r\n\tstatic String[] row;\r\n\tstatic int[] a,b;\r\n\tstatic boolean debug = false;\r\n\tstatic long sum,maj,rem;\r\n\t\r\n\tpublic static void main(String [ ] args) throws IOException{\r\n\t\tA r = new A();\n\t\tint i,k,l,n;\n\t\t\n\t\tBufferedReader br = new BufferedReader(new FileReader(A.inFile));\n\t\ttry {\n\t\t\tFile file = new File(A.outFile);\n\t\t\tif (!file.exists()) {file.createNewFile();}\n\t\t\tFileWriter fw = new FileWriter(file.getAbsoluteFile());\n\t\t\tBufferedWriter bw = new BufferedWriter(fw);\n\t\t\t\n\t\t    A.line = br.readLine();\n\t\t    A.t = Integer.valueOf(A.line); //1 <= T <= 100\n\t\t    \n\t\t    for(l=0;l<A.t;l++){\n\t\t\n\t\t    \tbw.write(\"Case #\"+(l+1)+\": \");\n\t\t    \t\n\t\t    \tA.line = br.readLine(); //S\n\t\t    \tn = Integer.valueOf(A.line);\n\t\t    \tA.a = new int[n];\n\t\t    \tArrays.fill(A.a, 0);\n\t\t    \tA.sum = 0;\n\t\t\t\tA.line = br.readLine(); //S\n\t\t\t\tA.row = A.line.split(\"\\\\s\");\n\t\t    \tfor(i=0;i<n;i++){\n\t\t        \tA.a[i] = Integer.valueOf(A.row[i]);\n\t\t        \tA.sum+=A.a[i];\n\t\t    \t}\n\t\t    \tA.rem = A.sum;\n\t\t    \tA.maj = A.sum/2;\n\t\t    \tint max,pos1,pos2;\n\t\t    \tfor(;A.rem>0;){\n\t\t    \t\tmax=-1;pos1=-1;pos2=-1;\n\t\t    \t\t\n\t\t        \t\tfor(i=0;i<n;i++){\n\t\t        \t\t\tif(A.a[i]>max){\n\t\t        \t\t\t\tmax = A.a[i];\n\t\t        \t\t\t\tpos1=i;\n\t\t        \t\t\t}\n\t\t        \t\t}\n\t\t        \t\t//2nd\n\t\t        \t\tfor(i=0;i<n;i++){\n\t\t        \t\t\tif(A.a[i] == max && i!=pos1){\n\t\t        \t\t\t\tpos2=i;\n\t\t        \t\t\t}\n\t\t        \t\t}\n\t\t        \tif(pos2>-1 && A.rem==3) pos2=-1;\n\t\t    \t\t\n\t\t    \t\tif(pos2>-1){\n\t\t    \t\t\tbw.write(\"\"+(char)('A'+pos1)+\"\"+(char)('A'+pos2));\n\t\t    \t\t\tA.a[pos1]--;\n\t\t    \t\t\tA.a[pos2]--;\n\t\t    \t\t\tA.rem-=2;\n\t\t    \t\t} else {\n\t\t    \t\t\tbw.write(\"\"+(char)('A'+pos1));\n\t\t    \t\t\tA.a[pos1]--;\n\t\t    \t\t\tA.rem-=1;\n\t\t    \t\t}\n\t\t        \t\n\t\t        \tif(A.rem>0) bw.write(\" \");\n\t\t        \t\n\t\t        \t//check\n\t\t        \tmax=-1;\n\t\t        \tfor(i=0;i<n;i++){\n\t\t\t        \tmax = (A.a[i]>max)?A.a[i]:max;\n\t\t        \t}\n\t\t        \tif (max > A.rem/2) {\n\t\t        \t\tSystem.out.println(\"Problem!\");\n\t\t        \t}\n\t\t    \t}\n\t\t    \t\n\t\t    \tbw.write(\"\\n\");\t\n\t\t    }\n\t\t\tbw.close();\n\t\t} finally {br.close();}\r\n\t}\r\n}\r\n\t\r\n", "idx": "8138"}
{"func": "package googlejam8.p139;\nimport java.io.*;\r\n\r\nimport java.util.*;\r\n\r\npublic class codejam {\r\n\r\n    static String i0 = \"dummy.in\";\r\n    static String o0 = \"dummy.out\";\r\n\r\n    static String i1 = \"small.in\";\r\n    static String o1 = \"small.out\";\r\n\r\n    static String i2 = \"large.in\";\r\n    static String o2 = \"large.out\";\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        Scanner r = null;\r\n        FileWriter w = null;\r\n\r\n        r = new Scanner(new FileReader(i0));\r\n        w = new FileWriter(new File(o0));\r\n\r\n        int t = r.nextInt();\r\n        //r.nextLine();\r\n        \r\n        for (int i=0;i<t;i++){\r\n            w.write(\"Case #\"+(i+1)+\": \");\r\n            int n = r.nextInt();\r\n            Map<String, Integer> mp = new HashMap<String, Integer>();\r\n            int mn = 10001;\r\n            for (int j=0;j<n;j++){\r\n                int p = r.nextInt();\r\n                if (mn > p)\r\n                    mn = p;\r\n                mp.put(String.valueOf((char)('A'+j)), p);\r\n            }\r\n            ArrayList<Map.Entry<String, Integer>> al = new ArrayList<Map.Entry<String, Integer>>(mp.entrySet());\r\n            Collections.sort(al, (o1, o2) -> o2.getValue() - o1.getValue());\r\n            boolean gothru = false;\r\n            while(!gothru){\r\n                gothru = true;\r\n                for (int j=0;j<n;j++){\r\n                    if (al.get(j).getValue() == mn)\r\n                        continue;\r\n                    else{\r\n                        gothru = false;\r\n                        w.write(al.get(j).getKey()+\" \");\r\n                        al.get(j).setValue(al.get(j).getValue()-1);\r\n                    }\r\n                }\r\n            }\r\n            for (int j=0;j<mn;j++){\r\n                for (int k=0;k<n;k++){\r\n                    if (k == n-2){\r\n                        w.write(al.get(k).getKey());\r\n                        w.write(al.get(k+1).getKey());\r\n                        w.write(\" \");\r\n                        break;\r\n                    } else {\r\n                        w.write(al.get(k).getKey()+\" \");\r\n                    }\r\n                }\r\n            }\r\n            //w.write(s1+\" \"+s2);\r\n            w.write(\"\\n\");\r\n        }\r\n        w.close();\r\n    }\r\n}\r\n", "idx": "8139"}
{"func": "package googlejam8.p140;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\n\npublic class A {\n  private static char[] chars = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n      'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U',\n      'V', 'W', 'X', 'Y', 'Z' };\n  public static void main(String[] args) throws Exception {\n    BufferedWriter bw = new BufferedWriter(new FileWriter(\n        \"A-large.out\"));\n    BufferedReader br = new BufferedReader(new FileReader(\n        \"A-large.in\"));\n    br.readLine();\n    String line;\n    int testCase = 1;\n    while ((line = br.readLine()) != null) {\n      if (line.length() == 0) {\n        break;\n      }\n      if ((line = br.readLine()) == null || line.length() == 0) {\n        break;\n      }\n      bw.write(\"Case #\" + (testCase++) + \":\");\n      String[] start = line.split(\" \");\n      int[] senators = new int[start.length];\n      int senatorsLeft = 0;\n      int partiesLeft = 0;\n      for (int i = 0; i < start.length; i++) {\n        senators[i] = Integer.parseInt(start[i]);\n        senatorsLeft += senators[i];\n        partiesLeft++;\n      }\n      while (senatorsLeft > 0) {\n        if (partiesLeft > 2) {\n          int maxVal = 0, maxInd = 0;\n          for (int i = 0; i < senators.length; i++) {\n            if (senators[i] > maxVal) {\n              maxInd = i;\n              maxVal = senators[i];\n            }\n          }\n          bw.write(\" \" + chars[maxInd]);\n          senators[maxInd]--;\n          if (senators[maxInd] == 0) {\n            partiesLeft--;\n          }\n        } else {\n          int firstInd = -1, secondInd = -1;\n          for (int i = 0; i < senators.length; i++) {\n            if (senators[i] > 0) {\n              if (firstInd == -1) {\n                firstInd = i;\n              } else {\n                secondInd = i;\n                break;\n              }\n            }\n          }\n          if (senatorsLeft % 2 > 0) {\n            if (senators[firstInd] == senators[secondInd]) {\n              for (int j = senators[firstInd]; j > 0; j--) {\n                bw.write(\" \" + chars[firstInd]\n                    + chars[secondInd]);\n              }\n            } else if (senators[firstInd] > senators[secondInd]) {\n              bw.write(\" \");\n              for (int j = senators[firstInd] - senators[secondInd];\n                  j > 0; j--) {\n                bw.write(chars[firstInd]);\n              }\n            } else {\n              bw.write(\" \");\n              for (int j = senators[firstInd] - senators[secondInd];\n                  j > 0; j--) {\n                bw.write(chars[secondInd]);\n              }\n            }\n          } else {\n            for (int j = senators[firstInd]; j > 0; j--) {\n              bw.write(\" \" + chars[firstInd] + chars[secondInd]);\n            }\n          }\n          senatorsLeft = 0;\n          partiesLeft = 0;\n        }\n      }\n      bw.write(\"\\n\");\n    }\n    br.close();\n    bw.close();\n  }\n}\n", "idx": "8140"}
{"func": "package googlejam8.p144;\n\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n *\n * @author astorres\n */\npublic class A {\n\n    public static final String rutaDatos = \"C:\\\\Users\\\\Augusto\\\\Desktop\\\\Code Jam\\\\\";\n    \n    \n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        \n        String problem = \"A\";\n        //String input=problem+\"-sample.in\";\n        //String input=problem+\"-small-attempt1.in\";\n        String input=problem+\"-large.in\";\n        Scanner in = new Scanner(new File(rutaDatos+\"input\\\\\"+input));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(rutaDatos+\"output\\\\\"+input+\".out.txt\")));    \n        \n        int T = in.nextInt();\n        for(int i=0;i<T;i++) {\n            \n            String answer = \"Case #\"+(i+1)+\":\";\n            \n            /*********************************/\n            \n            int ns[] = new int[26];\n            int np = in.nextInt();\n            for(int j=0;j<np;j++)\n                ns[j] = in.nextInt();\n            \n            \n            while(true) {\n                int may=0;\n                int ts=0;\n                for(int j=0;j<26;j++) {\n                    if(ns[j]>ns[may])\n                        may = j;\n                    ts+=ns[j];\n                }\n                int may2=0;\n                for(int j=0;j<26;j++)\n                    if(ns[j]-(j==may?1:0)>=ns[may2]-(may2==may?1:0))\n                        may2 = j;\n                if(ts==0) break;\n                ns[may]--;\n                answer = answer + \" \" + (char)(may+'A');\n                ts--;\n                if(ts==0) break;\n                //System.out.println(may+\" \"+may2);\n                /*for(int j=0;j<26;j++)\n                    if(ns[j]-(j==may2?1:0)>=(ts-1)/2) continue;*/\n                if(ts==2) continue;\n                answer = answer + (char)(may2+'A');\n                ns[may2]--;\n                //System.out.println(answer);\n            }\n            \n            /*********************************/\n            \n            \n            System.out.println(answer);\n            out.println(answer);\n        }\n        out.close();\n    }\n    \n}\n", "idx": "8144"}
{"func": "package googlejam8.p145;\n\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class ExoA {\n\tpublic static void main(final String[] args) {\n\n\t\tfinal String base = \"/home/jfortin/workspace-gcj/Codejam2016/r1c/ExoA/\";\n\t\tfinal String input = base + \"b1.in\";\n\t\tfinal String output = base + \"b1.out\";\n\n\t\ttry {\n\t\t\tfinal Scanner sc = new Scanner(new FileReader(input));\n\t\t\tfinal PrintWriter pw = new PrintWriter(output);\n\n\t\t\tfinal int n = sc.nextInt();\n\t\t\tsc.nextLine();\n\t\t\tfor (int c = 0; c < n; c++) {\n\t\t\t\tSystem.out.println(\"Test case \" + (c + 1) + \"...\");\n\t\t\t\tpw.print(\"Case #\" + (c + 1) + \": \");\n\t\t\t\tint N = sc.nextInt();\n\t\t\t\tint nn[] = new int[N];\n\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t\tnn[i] = sc.nextInt();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twhile (true) {\n\t\t\t\t\tint max = Integer.MIN_VALUE;\n\t\t\t\t\tint maxi = -1;\n\t\t\t\t\tint maxi2 = -1;\n\t\t\t\t\tint count = 0;\n\t\t\t\t\tfor (int i = 0; i < nn.length; i++) {\n\t\t\t\t\t\tif (nn[i] > max) {\n\t\t\t\t\t\t\tmaxi = i;\n\t\t\t\t\t\t\tmax = nn[i];\n\t\t\t\t\t\t\tmaxi2 = -1;\n\t\t\t\t\t\t\tcount = 1;\n\t\t\t\t\t\t} else if (nn[i] == max) {\n\t\t\t\t\t\t\tmaxi2 = i;\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tif (max == 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\tpw.print(Character.valueOf((char) ('A' + maxi)));\n\t\t\t\t\tnn[maxi]--;\n\t\t\t\t\tif (maxi2 != -1 && count == 2) {\n\t\t\t\t\t\tpw.print(Character.valueOf((char) ('A' + maxi2)));\n\t\t\t\t\t\tnn[maxi2]--;\n\t\t\t\t\t}\n\t\t\t\t\tpw.print(' ');\n\t\t\t\t}\n\t\t\t\tpw.println();\n\t\t\t}\n\t\t\tpw.println();\n\t\t\tpw.flush();\n\t\t\tpw.close();\n\t\t\tsc.close();\n\t\t} catch (final FileNotFoundException ex) {\n\t\t\tLogger.getLogger(ExoA.class.getName()).log(Level.SEVERE, null, ex);\n\t\t}\n\n\t}\n\n}\n", "idx": "8145"}
{"func": "package googlejam8.p146;\n// Google Code Jam Round 1C 2016\r\n// Problem A. Senate Evacuation\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Senate{\r\n\t//static String filename = \"A-sample\";\t\t\t// io filename here, change accordingly\r\n\t//static String filename = \"A-small-attempt0\";\t\r\n\tstatic String filename = \"A-large\";\t\r\n\tstatic String inname = filename + \".in\";    \r\n\tstatic String outname = filename + \".out\";  \r\n\tpublic static void main(String[] args){\r\n\t\ttry{\r\n\t\t\tScanner in = new Scanner(new BufferedReader(new FileReader(inname)));\r\n\t\t\t//Scanner in = new Scanner(System.in);\r\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(outname));\r\n\t\t\tint t = in.nextInt();\r\n\t\t\tin.nextLine();\r\n\t\t\tfor (int cas = 1; cas <= t; cas++){\r\n\t\t\t\tint n = in.nextInt();\r\n\t\t\t\tint[] p = new int[n];\r\n\t\t\t\tfor (int i = 0; i < n; i++) p[i] = in.nextInt();\n\t\t\t\tint n1 = p.length;\n\t\t\t\tint max1 = 0;\n\t\t\t\tint max2 = 0;\n\t\t\t\tfor (int i = 0; i < n1; i++)\n\t\t\t\t\tif (p[i] > p[max1]) max1 = i;\n\t\t\t\tif (max1 == 0) max2 = 1;\n\t\t\t\tfor (int i = 0; i < n1; i++)\n\t\t\t\t\tif (i != max1 && p[i] > p[max2]) max2 = i;\n\t\t\t\tString ans1 = \"\";\n\t\t\t\tint ptr = 0;\n\t\t\t\twhile (p[max1] > p[max2]){\n\t\t\t\t\tfor (; ptr < n1; ptr++){\n\t\t\t\t\t\tif (ptr == max1 || ptr == max2) continue;\n\t\t\t\t\t\twhile (p[ptr] > 0){\n\t\t\t\t\t\t\tans1 += (\"\"+(char)('A'+max1)) + (\"\"+(char)('A'+ptr)) + \" \";\n\t\t\t\t\t\t\tp[max1]--;\n\t\t\t\t\t\t\tp[ptr]--;\n\t\t\t\t\t\t\tif (p[max1] <= p[max2]) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (p[max1] <= p[max2]) break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (; ptr < n1; ptr++){\n\t\t\t\t\tif (ptr == max1 || ptr == max2) continue;\n\t\t\t\t\tif (p[ptr] <= 0) continue;\n\t\t\t\t\tfor (int i = ptr+1; i < n1; i++){\n\t\t\t\t\t\tif (i == max1 || i == max2) continue;\n\t\t\t\t\t\twhile (p[i] > 0){\n\t\t\t\t\t\t\tans1 += (\"\"+(char)('A'+ptr)) + (\"\"+(char)('A'+i)) + \" \";\n\t\t\t\t\t\t\tp[i]--;\n\t\t\t\t\t\t\tp[ptr]--;\n\t\t\t\t\t\t\tif (p[ptr] <= 0) break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (p[ptr] <= 0) break;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < n1; i++){\n\t\t\t\t\tif (i == max1 || i == max2) continue;\n\t\t\t\t\twhile (p[i] > 0){\n\t\t\t\t\t\tans1 += (\"\"+(char)('A'+i))+ \" \";\n\t\t\t\t\t\tp[i]--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (p[max1] > 0){\n\t\t\t\t\tans1 += (\"\"+(char)('A'+max1)) + (\"\"+(char)('A'+max2)) + \" \";\n\t\t\t\t\tp[max1]--;\n\t\t\t\t\tp[max2]--;\n\t\t\t\t}\r\n\t\t\t\tString ans = ans1;\r\n\r\n\t\t\t\tString s = in.nextLine();\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.print(\"Case #\" + cas + \": \" + ans + \"\\n\");\r\n\t\t\t\tout.write(\"Case #\" + cas + \": \" + ans + \"\\n\");\r\n\t\t\t}\r\n\t\t\tin.close();\r\n\t\t\tout.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}", "idx": "8146"}
{"func": "package googlejam8.p148;\nimport java.util.Scanner;\r\n\r\npublic class CodeJam {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tfinal int T = Integer.parseInt(sc.nextLine());\r\n\t\tfor (int caseCount = 1; caseCount <= T; caseCount++) {\r\n\t\t\tfinal int N = sc.nextInt();\r\n\t\t\tint[] senates = new int[N];\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tsenates[i] = sc.nextInt();\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\" + caseCount + \": \");\r\n\t\t\tboolean done = false;\r\n\t\t\twhile (true) {\r\n\t\t\t\tint onesLeft = 0;\r\n\t\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\t\tif (senates[i] > 1) {\r\n\t\t\t\t\t\tonesLeft = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else if (senates[i] == 1) {\r\n\t\t\t\t\t\tonesLeft++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (onesLeft == 2) {\r\n\t\t\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\t\t\tif (senates[i] == 1) {\r\n\t\t\t\t\t\t\tSystem.out.print((char) (65 + i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (onesLeft == 3) {\r\n\t\t\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\t\t\tif (senates[i] == 1) {\r\n\t\t\t\t\t\t\tsenates[i]--;\r\n\t\t\t\t\t\t\tSystem.out.print((char) (65 + i) + \" \");\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tdone = true;\r\n\t\t\t\tint max = 0;\r\n\t\t\t\tint maxNext = 0;\r\n\t\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\t\tif (senates[i] > 0) {\r\n\t\t\t\t\t\tdone = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (senates[i] >= senates[max]) {\r\n\t\t\t\t\t\tmaxNext = max;\r\n\t\t\t\t\t\tmax = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (done) {\r\n\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (senates[max] > senates[maxNext] || max == maxNext) {\r\n\t\t\t\t\tsenates[max]--;\r\n\t\t\t\t\tSystem.out.print((char) (65 + max) + \" \");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsenates[max]--;\r\n\t\t\t\t\tsenates[maxNext]--;\r\n\t\t\t\t\tSystem.out.print((char) (65 + max));\r\n\t\t\t\t\tSystem.out.print((char) (65 + maxNext) + \" \");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsc.close();\r\n\t}\r\n\r\n}", "idx": "8148"}
{"func": "package googlejam8.p157;\n\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintStream;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class R2016_1C_A {\r\n\t\r\n\tprivate final static String CASE = \"Case #%d: \";\r\n\t\r\n\tprivate int t;\r\n\t\r\n\tpublic static void main(final String[] args) {\r\n\t\tR2016_1C_A r = new R2016_1C_A();\n\t\tfinal File directory = new File(r.getClass().getSimpleName() + \"_cases\");\n\t\tfinal File inDirectory = new File(r.getClass().getSimpleName() + \"_cases\" + \"/in\");\n\t\tfinal File outDirectory = new File(r.getClass().getSimpleName() + \"_cases\" + \"/out\");\n\t\t\n\t\tif (!directory.isDirectory()) {\n\t\t\tdirectory.mkdir();\n\t\t}\n\t\tif (!outDirectory.isDirectory()) {\n\t\t\toutDirectory.mkdir();\n\t\t}\n\t\tif (!inDirectory.isDirectory()) {\n\t\t\tinDirectory.mkdir();\n\t\t}\n\t\t\n\t\tfor (final String in : inDirectory.list()) {\n\t\t\tfinal String fileNameCore = in.replace(\".in\", \"\");\n\t\t\tfinal String outFileName = fileNameCore + \".out\";\n\t\t\t\n\t\t\tfinal File inFile = new File(r.getClass().getSimpleName() + \"_cases\" + \"/in\" + \"/\" + in);\n\t\t\tfinal File outFile = new File(r.getClass().getSimpleName() + \"_cases\" + \"/out\" + \"/\" + outFileName);\n\t\t\ttry (final PrintStream ps =  new PrintStream(outFile);\n\t\t\t\t\tfinal Scanner s = new Scanner(inFile)){\n\t\t\t\tr.t = s.nextInt();\n\t\t\t\tfor (int i = 0; i < r.t; i++) {\n\t\t\t\t\tfinal int n = i;\n\t\t\t\t\tps.print(String.format(R2016_1C_A.CASE, n + 1));\n\t\t\t\t\tr.N = s.nextInt();\n\t\t\t\t\tr.P = new int[r.N];\n\t\t\t\t\t\n\t\t\t\t\tfor (int i1 = 0; i1 < r.N; i1++) {\n\t\t\t\t\t\tr.P[i1] = s.nextInt();\n\t\t\t\t\t}\n\t\t\t\t\tr.solution = new ArrayList<>();\n\t\t\t\t\t\n\t\t\t\t\tint sum = 0;\n\t\t\t\t\tfor (int i3 = 0; i3 < r.N; i3++) {\n\t\t\t\t\t\tsum += r.P[i3];\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\twhile(sum > 2) {\n\t\t\t\t\t\tint m = 0;\n\t\t\t\t\t\tint x = 0;\n\t\t\t\t\t\tint x2 = 0;\n\t\t\t\t\t\tfor (int i1 = 0; i1 < r.N; i1++) {\n\t\t\t\t\t\t\tif (r.P[i1] >= m) {\n\t\t\t\t\t\t\t\tm = r.P[i1];\n\t\t\t\t\t\t\t\tx2 = x;\n\t\t\t\t\t\t\t\tx = i1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\tif (r.P[x2] * 2 > sum - 1) {\n\t\t\t\t\t\t\tr.solution.add(\"\" + (char)('A' + x) + (char)('A' + x2));\n\t\t\t\t\t\t\tr.P[x] --;\n\t\t\t\t\t\t\tr.P[x2]--;\n\t\t\t\t\t\t\tsum -= 2;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tr.solution.add(\"\" + (char)('A' + x));\n\t\t\t\t\t\t\tr.P[x]--;\n\t\t\t\t\t\t\tsum--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tString s1 = \"\";\n\t\t\t\t\tfor (int i2 = 0; i2 < r.N; i2++) {\n\t\t\t\t\t\tif (r.P[i2] != 0) {\n\t\t\t\t\t\t\ts1 += (char)('A' + i2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tr.solution.add(s1);\n\t\t\t\t\tfor (int i1 = 0; i1 < r.solution.size() - 1; i1++) {\n\t\t\t\t\t\tps.print(r.solution.get(i1) + \" \");\n\t\t\t\t\t}\n\t\t\t\t\tps.print(r.solution.get(r.solution.size() - 1));\n\t\t\t\t\tps.println();\n\t\t\t\t}\n\t\t\t} catch (final IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} \n\t\t}\r\n\t}\r\n\t\r\n\tint N;\r\n\tint[] P;\r\n\t\r\n\tList<String> solution;\r\n}\r\n", "idx": "8157"}
{"func": "package googlejam8.p161;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner s = new Scanner(new File(\"a.in\"));\r\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"a.out\"));\r\n\t\tint T = s.nextInt();\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tout.write(\"Case #\"+t+\": \"); \r\n\t\t\tint N = s.nextInt();\r\n\t\t\tint[] parties = new int[N];\r\n\t\t\tint sum=0;\r\n\t\t\tfor(int i=0; i<N; i++){\r\n\t\t\t\tparties[i]=s.nextInt();\r\n\t\t\t\tsum+=parties[i];\r\n\t\t\t}\r\n\t\t\twhile(sum>0){\r\n\t\t\t\tint differentParties=0;\r\n\t\t\t\tint max=0;\r\n\t\t\t\tint iMax=-1;\r\n\t\t\t\tfor(int i=0; i<N; i++){\r\n\t\t\t\t\tif(parties[i]>0)\r\n\t\t\t\t\t\tdifferentParties++;\r\n\t\t\t\t\tif(parties[i]>max){\r\n\t\t\t\t\t\tmax=parties[i];\r\n\t\t\t\t\t\tiMax=i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(differentParties==2){\r\n\t\t\t\t\tfor(int i=0; i<N; i++){\r\n\t\t\t\t\t\tif(parties[i]>0){\r\n\t\t\t\t\t\t\tout.write(\"\"+(char)('A'+i));\r\n\t\t\t\t\t\t\tparties[i]--;\r\n\t\t\t\t\t\t\tsum--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tout.write(\"\"+(char)('A'+iMax));\r\n\t\t\t\t\tparties[iMax]--;\r\n\t\t\t\t\tsum--;\r\n\t\t\t\t}\r\n\t\t\t\tout.write(\" \");\r\n\t\t\t}\r\n\t\t\tout.write(\"\\n\");\r\n\t\t}\r\n\t\tout.close();\t\r\n\t}\r\n}\r\n", "idx": "8161"}
{"func": "package googlejam8.p164;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.BigInteger;\r\nimport java.util.Map.Entry;\r\n\r\nimport static java.lang.Math.*;\r\n\r\npublic class A extends PrintWriter {\r\n\r\n    private static final String input = \"A-large.in\";\r\n    private static final String output = \"A-output.txt\";\r\n\r\n    String next() {\r\n        while (!tokenizer.hasMoreTokens())\r\n            tokenizer = new StringTokenizer(nextLine());\r\n        return tokenizer.nextToken();\r\n    }\r\n\r\n    String nextLine() {\r\n        try {\r\n            return reader.readLine();\r\n        } catch (IOException err) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    public A(OutputStream outputStream) {\r\n        super(outputStream);\r\n    }\r\n\r\n    static BufferedReader reader;\r\n    static StringTokenizer tokenizer = new StringTokenizer(\"\");\r\n    static Random rnd = new Random();\r\n    static boolean OJ;\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        A solution = new A(new FileOutputStream(output));\r\n        reader = new BufferedReader(new FileReader(new File(input)));\r\n        int tests = Integer.parseInt(solution.next());\n\t\t\n\t\tfor (int test = 1; test <= tests; test++) {\n\t\t    int n = Integer.parseInt(solution.next());\n\t\t\tint[] array = new int[n];\n\t\t\tfor (int i1 = 0; i1 < n; i1++) {\n\t\t\t    array[i1] = Integer.parseInt(solution.next());\n\t\t\t}\n\t\t    int[] a = array;\n\t\t\n\t\t    int sum = 0;\n\t\t    for (int p : a) {\n\t\t        sum += p;\n\t\t    }\n\t\t\tint[] a1 = a.clone();\n\t\t\tList<int[]> plan1 = new ArrayList<int[]>();\n\t\t\t\n\t\t\twhile (true) {\n\t\t\t    int x = 0;\n\t\t\t    for (int i = 1; i < n; i++) {\n\t\t\t        if (a1[i] > a1[x]) {\n\t\t\t            x = i;\n\t\t\t        }\n\t\t\t    }\n\t\t\t\n\t\t\t    if (a1[x] == 0) {\n\t\t\t        break;\n\t\t\t    }\n\t\t\t\n\t\t\t    int y = -1;\n\t\t\t    for (int i = 0; i < n; i++) {\n\t\t\t        if (i == x) {\n\t\t\t            continue;\n\t\t\t        }\n\t\t\t        if (y == -1 || a1[i] > a1[y]) {\n\t\t\t            y = i;\n\t\t\t        }\n\t\t\t    }\n\t\t\t\n\t\t\t    int z = -1;\n\t\t\t    for (int i = 0; i < n; i++) {\n\t\t\t        if (i == x || i == y) {\n\t\t\t            continue;\n\t\t\t        }\n\t\t\t        if (z == -1 || a1[i] > a1[z]) {\n\t\t\t            z = i;\n\t\t\t        }\n\t\t\t    }\n\t\t\t    if (n == 2) {\n\t\t\t        if (a1[x] > a1[y]) {\n\t\t\t            plan1.add(new int[] { x });\n\t\t\t            --a1[x];\n\t\t\t        } else {\n\t\t\t            plan1.add(new int[] { x, y });\n\t\t\t            --a1[x];\n\t\t\t            --a1[y];\n\t\t\t        }\n\t\t\t    } else {\n\t\t\t        if (a1[x] > a1[y] || a1[z] > 0) {\n\t\t\t            plan1.add(new int[] { x });\n\t\t\t            --a1[x];\n\t\t\t        } else {\n\t\t\t            plan1.add(new int[] { x, y });\n\t\t\t            --a1[x];\n\t\t\t            --a1[y];\n\t\t\t        }\n\t\t\t    }\n\t\t\t\n\t\t\t}\n\t\t\n\t\t    List<int[]> plan = plan1;\n\t\t    solution.printf(Locale.ENGLISH, \"Case #%d:\", test);\n\t\t\n\t\t    try {\n\t\t        for (int[] step : plan) {\n\t\t            solution.print(' ');\n\t\t            for (int v : step) {\n\t\t                solution.print((char) (v + 'A'));\n\t\t                --sum;\n\t\t                --a[v];\n\t\t            }\n\t\t\n\t\t            for (int p : a) {\n\t\t                if (p < 0 || 2 * p > sum) {\n\t\t                    throw new IllegalStateException(Arrays.toString(a));\n\t\t                }\n\t\t            }\n\t\t        }\n\t\t    } catch (RuntimeException error) {\n\t\t        System.err.println(error.getMessage());\n\t\t    }\n\t\t\n\t\t    solution.println();\n\t\t\n\t\t    // printf(Locale.ENGLISH, \"Case #%d: %s%n\", test);\n\t\t}\r\n        solution.close();\r\n        reader.close();\r\n    }\r\n}", "idx": "8164"}
{"func": "package googlejam8.p166;\n\n\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class SenateEvacuation {\n    \n    static PrintWriter out;\n\n    public static void main(String[] args) throws IOException {\n        String name = \"gcj2016/r1/A-large\";\n        Scanner s = new Scanner(new File(name + \".in\"));\n        int count = s.nextInt();\n        out = new PrintWriter(new BufferedWriter(new FileWriter(name + \".out\")));\n        //out = new PrintWriter(System.out);\n        for (int cc = 1; cc <= count; cc++) {\n            out.print(\"Case #\" + cc + \": \");\n            int n = s.nextInt();\n            int[] a = new int[26];\n            int sum = 0;\n            for(int i=0; i<n; i++) {\n                a[i] = s.nextInt();\n                sum += a[i];\n            }\n\t\t\tint sum1 = sum;\n            while(sum1 > 2) {\n\t\t\t    if(sum1 % 2 == 0) {\n\t\t\t        int h = sum1 / 2;\n\t\t\t        for(int i=0; i<26; i++) {\n\t\t\t            if(a[i] == h) {\n\t\t\t                a[i]--;\n\t\t\t                sum1--;\n\t\t\t                out.print((char)('A' + i));\n\t\t\t            }\n\t\t\t        }\n\t\t\t        if(sum1 < h * 2) {\n\t\t\t            out.print(\" \");\n\t\t\t            continue;\n\t\t\t        }\n\t\t\t    }\n\t\t\t    int max = 0;\n\t\t\t    int maxi = 0;\n\t\t\t    char maxc = 'A';\n\t\t\t    for(int i=0; i<26; i++) {\n\t\t\t        if(max < a[i]) {\n\t\t\t            max = a[i];\n\t\t\t            maxi = i;\n\t\t\t            maxc = (char)('A' + i);\n\t\t\t        }\n\t\t\t    }\n\t\t\t    a[maxi]--;\n\t\t\t    sum1--;\n\t\t\t    out.print(maxc);\n\t\t\t    out.print(\" \");\n\t\t\t}\n\t\t\tfor(int i=0; i<26; i++) {\n\t\t\t    if(a[i] > 0) out.print((char)('A' + i));\n\t\t\t}\n            out.println();\n        }\n        out.close();\n    }\n\n}\n", "idx": "8166"}
{"func": "package googlejam8.p172;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass A {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner in = new Scanner(new File(\"A.in\"));\r\n        PrintWriter out = new PrintWriter(new File(\"A.out\"));\r\n\t\t\r\n\t\tint tt = in.nextInt();\r\n\t\tin.nextLine();\r\n\t\tfor(int tc=1; tc<=tt; tc++) {            \r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] a = new int[n];\r\n\t\t\tfor(int i=0; i<n; i++) {\r\n\t\t\t\ta[i] = in.nextInt();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tout.print(\"Case #\"+tc+\": \");\r\n\t\t\t\r\n\t\t\tif (n > 2) {\r\n\t\t\t\tint m1, i1;\t\t\t\r\n\t\t\t\twhile (true) {\r\n\t\t\t\t\tm1 = 0;\r\n\t\t\t\t\ti1 = -1;\r\n\t\t\t\t\tfor(int i=0; i<n; i++) {\r\n\t\t\t\t\t\tif (a[i] >= m1) {\r\n\t\t\t\t\t\t\tm1 = a[i];\r\n\t\t\t\t\t\t\ti1 = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (m1 == 1) break;\r\n\t\t\t\t\tout.print((char)((int)'A'+i1)+\" \");\r\n\t\t\t\t\ta[i1]--;\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tout.print((char)((int)'A'+n-1)+\" \");\r\n\t\t\t\tfor(int i=0; i<n-1; i+=2) {\r\n\t\t\t\t\tout.print((char)((int)'A'+i)+\"\"+(char)((int)'A'+i+1)+\" \");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (a[0] == a[1]) {\r\n\t\t\t\t\tfor(int i=0; i<a[0]; i++) {\r\n\t\t\t\t\t\tout.print(\"AB \");\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (a[0] > a[1]) {\r\n\t\t\t\t\t\tfor(int i=a[0]; i>a[1]; i--) {\r\n\t\t\t\t\t\t\tout.print(\"A \");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor(int i=0; i<a[1]; i++) {\r\n\t\t\t\t\t\t\tout.print(\"AB \");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfor(int i=a[1]; i>a[0]; i--) {\r\n\t\t\t\t\t\t\tout.print(\"B \");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor(int i=0; i<a[0]; i++) {\r\n\t\t\t\t\t\t\tout.print(\"AB \");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tout.println();\r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t\tin.close();\r\n\t}\r\n}\r\n", "idx": "8172"}
{"func": "package googlejam8.p178;\n\r\n\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        Scanner sc = new Scanner(new FileReader(\"src/round1/roundC/A-large (5).in\"));\r\n        PrintWriter pw = new PrintWriter(\"src/round1/roundC/A-large.out\");\r\n        int testCases = sc.nextInt();\r\n     //   testCases=1;\r\n        String alphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\n\r\n        for (int casen = 0; casen < testCases; casen++) {\r\n            pw.printf(\"Case #%d: \",casen+1);\r\n\r\n            int n = sc.nextInt();\r\n            int arr[]=new int[n];\r\n            for (int i = 0; i < n; i++) {\r\n                arr[i]=sc.nextInt();\r\n            }\n\t\t\tint max1=0;\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t    if(arr[i]>max1){\n\t\t\t        max1=arr[i];\n\t\t\t    }\n\t\t\t}\r\n//            int sum=0;\r\n//            for (int i = 0; i < n; i++) {\r\n//                sum+=arr[i];\r\n//            }\r\n            int max = max1;\r\n           // System.out.println(Arrays.toString(arr));\r\n            while(max!=0) {\r\n\r\n                Queue<Integer> arrOfIndexOfMaxNum=new LinkedList<>();\n\t\t\t\tfor (int i1 = 0; i1 < arr.length; i1++) {\n\t\t\t\t    if(arr[i1]==max) arrOfIndexOfMaxNum.add(i1);\n\t\t\t\t}\n\t\t\t\tQueue<Integer> indexOfMax = arrOfIndexOfMaxNum;\r\n\r\n               // System.out.println(indexOfMax);\r\n                if (indexOfMax.size() % 2 == 1) {\r\n                    int t = indexOfMax.poll();\r\n                    arr[t]--;\r\n                    pw.print(alphabet.charAt(t) + \" \");\r\n                }\r\n                while (!indexOfMax.isEmpty()) {\r\n                    int t1 = indexOfMax.poll();\r\n                    int t2 = indexOfMax.poll();\r\n                    arr[t1]--;\r\n                    arr[t2]--;\r\n                    pw.print(alphabet.charAt(t1) );\r\n                    pw.print(alphabet.charAt(t2) + \" \" );\r\n                }\n\t\t\t\tint max2=0;\n\t\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\t    if(arr[i]>max2){\n\t\t\t\t        max2=arr[i];\n\t\t\t\t    }\n\t\t\t\t}\r\n                max = max2;\r\n            }\r\n            pw.println();\r\n\r\n\r\n\r\n\r\n\r\n            pw.flush();\r\n        }\r\n\r\n        pw.close();\r\n        sc.close();\r\n\r\n    }\r\n\r\n}\r\n", "idx": "8178"}
{"func": "package googlejam8.p179;\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class CJ20161 {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException{\r\n\t\tScanner sc = new Scanner(new File(\"input.txt\"));\r\n\t\tPrintWriter file = new PrintWriter(new File(\"output.txt\"));\r\n\t\t\r\n\t\tint[] alf = new int[26];\r\n\t\tint a = (int)'A';\r\n\t\tint n;\r\n\t\tint max1, ind1;\r\n\t\tint max2, ind2;\r\n\t\tint Q = sc.nextInt();\r\n\t\tfor(int t=0; t< Q; ++t){\r\n\t\t\tSystem.out.print(\"Case #\" + (t+1) + \": \");\r\n\t\t\tfile.print(\"Case #\" + (t+1) + \": \");\r\n\t\tmax1 = 0;\r\n\t\tind1 = 0;\r\n\t\tmax2 = 0;\r\n\t\tind2 = 0;\r\n\t\tfor(int i=0; i<26; ++i){\r\n\t\t\talf[i] = 0;\r\n\t\t}\r\n\t\tn = sc.nextInt();\r\n\t\t\r\n\t\tfor(int i=0; i<n; ++i){\r\n\t\t\talf[i] = sc.nextInt();\r\n\t\t}\r\n\t\tfor(int i=0; i<n; ++i){\r\n\t\t\tif(alf[i] > max1){\r\n\t\t\t\tmax1 = alf[i];\r\n\t\t\t\tind1 = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(int i=0; i<n; ++i){\r\n\t\t\tif(alf[i] > max2 && ind1 != i){\r\n\t\t\t\tmax2 = alf[i];\r\n\t\t\t\tind2 = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//System.out.println(max1 + \" \" + max2);\r\n\t\t\r\n\t\tfor(int i=max1; i>max2; --i){\r\n\t\t\tSystem.out.print((char)(a + ind1) + \" \");\r\n\t\t\tfile.print((char)(a + ind1) + \" \");\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tfor(int i=0; i < n ; ++ i){\r\n\t\t\tif(i != ind1 && i != ind2){\r\n\t\t\t\tfor(int k=0; k<alf[i]; ++k){\r\n\t\t\t\t\tSystem.out.print((char)(a + i) + \" \");\r\n\t\t\t\t\tfile.print((char)(a + i) + \" \");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor(int i=max2; i>0; --i){\r\n\t\t\tSystem.out.print((char)(a + ind1) + \"\" + (char)(a + ind2) + \" \");\r\n\t\t\tfile.print((char)(a + ind1) + \"\" + (char)(a + ind2) + \" \");\r\n\t\t}\r\n\t\tSystem.out.println();\r\n\t\tfile.println();\r\n\t\t}\r\n\t\tfile.close();\r\n\t}\r\n}\r\n", "idx": "8179"}
{"func": "package googlejam8.p181;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class A {\n    public static void main(String[] args) throws FileNotFoundException {\n        FileInputStream fin = new FileInputStream(\"A-large.in.txt\");\n        Scanner scanner = new Scanner(fin);\n        FileOutputStream fout = new FileOutputStream(\"A-large.out.txt\");\n        PrintWriter writer = new PrintWriter(fout);\n        int testCount = scanner.nextInt();\n        for (int testCase = 1; testCase <= testCount; ++testCase) {\n            int n = scanner.nextInt();\n            int[] a = new int[n];\n            for (int i = 0; i < n; ++i) {\n                a[i] = scanner.nextInt();\n            }\n            writer.printf(\"Case #%d: %s\\n\", testCase, solve(a));\n        }\n        writer.close();\n    }\n\n    private static String solve(int[] a) {\n        int n = a.length;\n\n        int sum = 0;\n        for (int i = 0; i < n; ++i) {\n            sum += a[i];\n        }\n\n        String res = \"\";\n\t\tint n1 = a.length;\n\t\tint idx1 = -1;\n\t\tint max = 0;\n\t\tfor (int i = 0; i < n1; ++i) {\n\t\t    if (a[i] > max) {\n\t\t        max = a[i];\n\t\t        idx1 = i;\n\t\t    }\n\t\t}\n        int idx = idx1;\n        while (true) {\n            --a[idx];\n            --sum;\n            res += (char)('A' + idx);\n            if (sum == 0) {\n                break;\n            }\n\t\t\tint n2 = a.length;\n\t\t\tint idx2 = -1;\n\t\t\tint max = 0;\n\t\t\tfor (int i = 0; i < n2; ++i) {\n\t\t\t    if (a[i] > max) {\n\t\t\t        max = a[i];\n\t\t\t        idx2 = i;\n\t\t\t    }\n\t\t\t}\n            idx = idx2;\n            if (a[idx] * 2 <= sum) {\n                res += \" \";\n            }\n        }\n        return res;\n    }\n}\n", "idx": "8181"}
{"func": "package googlejam8.p183;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * Created by fatminmin on 5/8/16.\n */\npublic class A {\n//    Scanner sc = new Scanner(System.in);\n//    PrintWriter pw = new PrintWriter(System.out);\n    Scanner sc = new Scanner(new File(\"r1c_tc/A-large.in\"));\n    PrintWriter pw = new PrintWriter(\"r1c_tc/A-large.out\");\n    public A() throws FileNotFoundException {\n    }\n\n    public static void main(String[] args) throws FileNotFoundException {\n        A r = new A();\n\t\tint t = r.sc.nextInt();\n\t\tfor(int cs = 1; cs <= t; cs++) {\n\t\t    r.pw.print(String.format(\"Case #%d: \", cs));\n\t\t    int n = r.sc.nextInt();\n\t\t\tint[] p = new int[n];\n\t\t\tint[] cur = new int[n];\n\t\t\tfor(int i = 0; i < n; i++) {\n\t\t\t    p[i] = r.sc.nextInt();\n\t\t\t}\n\t\t\tint curSum = 0;\n\t\t\tList<String> ans = new ArrayList<>();\n\t\t\twhile(true) {\n\t\t\t    // try two\n\t\t\t    int tmp = curSum + 2;\n\t\t\t    int a = -1, b = -1;\n\t\t\t    int i = 0;\n\t\t\t    while(i < n) {\n\t\t\t        if(p[i] > 0 && cur[i] + 1 <= tmp / 2) {\n\t\t\t            cur[i]++;\n\t\t\t            p[i]--;\n\t\t\t            if(a == -1) a = i;\n\t\t\t            else b = i;\n\t\t\t        } else {\n\t\t\t            i++;\n\t\t\t        }\n\t\t\t        if(a != -1 && b != -1) break;\n\t\t\t    }\n\t\t\t    if(a != -1 && b != -1) {\n\t\t\t        String pair = String.valueOf((char)('A' + a)) + String.valueOf((char)('A' + b));\n\t\t\t        ans.add(pair);\n\t\t\t        curSum += 2;\n\t\t\t        continue;\n\t\t\t    } else if(a != -1) {\n\t\t\t        cur[a]--;\n\t\t\t        p[a]++;\n\t\t\t    }\n\t\t\t    // try one\n\t\t\t    tmp = curSum + 1;\n\t\t\t    a = -1;\n\t\t\t    i = 0;\n\t\t\t    while(i < n) {\n\t\t\t        if(p[i] > 0 && cur[i] + 1 <= tmp / 2) {\n\t\t\t            cur[i]++;\n\t\t\t            p[i]--;\n\t\t\t            a = i;\n\t\t\t            break;\n\t\t\t        }\n\t\t\t        i++;\n\t\t\t    }\n\t\t\t    if(a != -1) {\n\t\t\t        ans.add(String.valueOf((char)('A' + a)));\n\t\t\t        curSum += 1;\n\t\t\t    } else {\n\t\t\t        break;\n\t\t\t    }\n\t\t\t}\n\t\t\tCollections.reverse(ans);\n\t\t\tr.pw.println(String.join(\" \", ans));\n\t\t}\n\t\tr.pw.flush();\n    }\n}\n", "idx": "8183"}
{"func": "package googlejam8.p186;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class A {\r\n\t\r\n\tprivate static final String ALPHA = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tPrintWriter pw = new PrintWriter(\"A-large.out\");\r\n\t\tbr = new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\t\r\n\t\tint t = Integer.parseInt(next());\r\n\t\t\r\n\t\tfor (int test = 1; test <= t; test++) {\r\n\t\t\tpw.printf(\"Case #%d:\", test);\r\n\t\t\t\r\n\t\t\tint n = Integer.parseInt(next());\r\n\t\t\t\r\n\t\t\tint total = 0;\r\n\t\t\tint[] s = new int[n];\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\ts[i] = Integer.parseInt(next());\r\n\t\t\t\ttotal += s[i];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twhile (total > 0) {\r\n\t\t\t\tString a = \"\";\r\n\t\t\t\tfor (int j = 0; j < 2; j++) {\r\n\t\t\t\t\tint m = 0;\r\n\t\t\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\t\t\tif (s[i] > s[m]) {\r\n\t\t\t\t\t\t\tm = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ts[m]--;\r\n\t\t\t\t\tif (j == 1) {\r\n\t\t\t\t\t\tint m2 = 0;\r\n\t\t\t\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\t\t\t\tif (s[i] > s[m2]) {\r\n\t\t\t\t\t\t\t\tm2 = i;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (s[m2] > (total - 1) / 2) {\r\n\t\t\t\t\t\t\ts[m]++;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ta += ALPHA.charAt(m);\r\n\t\t\t\t\ttotal--;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tpw.print(\" \" + a);\r\n\t\t\t}\r\n\t\t\tpw.println();\r\n\t\t}\r\n\t\tpw.close();\r\n\t}\r\n\t\r\n\tstatic BufferedReader br = new BufferedReader(new InputStreamReader(\r\n\t\t\tSystem.in));\r\n\tstatic PrintWriter out = new PrintWriter(new BufferedWriter(\r\n\t\t\tnew OutputStreamWriter(System.out)));\r\n\tstatic StringTokenizer st;\r\n\r\n\tstatic String next() throws IOException {\r\n\t\twhile (st == null || !st.hasMoreTokens())\r\n\t\t\tst = new StringTokenizer(br.readLine().trim());\r\n\t\treturn st.nextToken();\r\n\t}\r\n}", "idx": "8186"}
{"func": "package googlejam8.p196;\n\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class Evac {\r\n\t\r\n\tpublic static int[] party;\r\n\tpublic static int N, sum;\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tFile input = new File(\"input.txt\");\r\n\t\tScanner scanner = new Scanner(input);\r\n\t\t\r\n\t\tint T = scanner.nextInt();\r\n\t\tfor (int i = 0; i < T; i++) {\r\n\t\t\t\r\n\t\t\tN = scanner.nextInt();\r\n\t\t\tparty = new int[N];\r\n\t\t\tsum = 0;\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < N; j++) {\r\n\r\n\t\t\t\tparty[j] = scanner.nextInt();\r\n\t\t\t\tsum += party[j];\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.printf(\"Case #%d: \", i + 1);\r\n\t\t\tif (N == 2) {\r\n\t\t\t\tfor (int j = 1; j < party[0]; j++)\r\n\t\t\t\t\tSystem.out.print(\"AB \");\r\n\t\t\t\tSystem.out.println(\"AB\");\r\n\t\t\t} else\n\t\t\t\twhile (sum > 0) {\n\t\t\t\t\t\n\t\t\t\t\tint gold, silver, bronze;\n\t\t\t\t\tgold = silver = bronze = -1;\n\t\t\t\t\tfor (int i1 = 0; i1 < N; i1++)\n\t\t\t\t\t\tif (gold == -1 || party[i1] > party[gold]) {\n\t\t\t\t\t\t\tbronze = silver;\n\t\t\t\t\t\t\tsilver = gold;\n\t\t\t\t\t\t\tgold = i1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (silver == -1 || party[i1] > party[silver]) {\n\t\t\t\t\t\t\tbronze = silver;\n\t\t\t\t\t\t\tsilver = i1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (bronze == -1 || party[i1] > party[bronze])\n\t\t\t\t\t\t\tbronze = i1;\n\t\t\t\t\tint x = party[gold] - 1;\n\t\t\t\t\tint y = party[bronze];\n\t\t\t\t\t\n\t\t\t\t\tif ((x > y ? x : y) > (sum - 2) / 2) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tsum--;\n\t\t\t\t\t\tparty[gold]--;\n\t\t\t\t\t\tSystem.out.print((char) ((int) 'A' + gold));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t\n\t\t\t\t\t\tsum -= 2;\n\t\t\t\t\t\tparty[gold]--;\n\t\t\t\t\t\tparty[silver]--;\n\t\t\t\t\t\tSystem.out.print((char) ((int) 'A' + gold));\n\t\t\t\t\t\tSystem.out.print((char) ((int) 'A' + silver));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (sum == 0)\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\telse\n\t\t\t\t\t\tSystem.out.print(' ');\n\t\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tscanner.close();\r\n\t}\r\n\r\n}\r\n", "idx": "8196"}
{"func": "package googlejam8.p204;\nimport java.util.Scanner;\n\npublic class CodeJamCA {\n\tpublic static void main(String []args){\n\t\tScanner reader = new Scanner(System.in);\n\t\tint g = reader.nextInt();\n\t\t\n\t\tfor(int k=0;k<g;k++){\n\t\t\tint N = reader.nextInt();\n\t\t\tint [] t = new int[N];\n\t\t\tint tot = 0;\n\t\t\tfor(int i=0;i<N;i++){\n\t\t\t\tt[i] = reader.nextInt();\n\t\t\t\ttot+= t[i];\n\t\t\t}\n\t\t\tSystem.out.print(\"Case #\"+(k+1)+\":\");\n\t\t\twhile(tot !=0){\n\t\t\t\tString answ = \"\";\n\t\t\t\tint max = 0;\n\t\t\t\tint mindex = 0;\n\t\t\t\tfor(int i =0;i<N;i++){\n\t\t\t\t\tif(max < t[i]){\n\t\t\t\t\t\tmax = t[i];\n\t\t\t\t\t\tmindex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tt[mindex]--;\n\t\t\t\ttot--;\n\t\t\t\tansw += (char) (((int) 'A')+mindex);\n\n\t\t\t\tmax = 0;\n\t\t\t\tmindex = 0;\n\t\t\t\tfor(int i =0;i<N;i++){\n\t\t\t\t\tif(max < t[i]){\n\t\t\t\t\t\tmax = t[i];\n\t\t\t\t\t\tmindex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(tot == 1){\n\t\t\t\t\ttot--;\n\t\t\t\t\tansw+= (char) (((int) 'A')+mindex);\n\t\t\t\t}\n\t\t\t\telse if(max !=0 && tot!=2){\n\t\t\t\t\ttot--;\n\t\t\t\t\tansw+= (char) (((int) 'A')+mindex);\n\t\t\t\t\tt[mindex]--;\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\" \"+answ);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t\t\n\t\treader.close();\n\t}\n}\n", "idx": "8204"}
{"func": "package googlejam8.p205;\nimport com.sun.scenario.effect.impl.sw.sse.SSEBlend_SRC_OUTPeer;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class A {\r\n\r\n    public static void main(String[] args) throws NumberFormatException, IOException {\r\n        String name = \"A\";\r\n        // TODO READER\r\n        boolean isSmall = false;\r\n\r\n        BufferedReader br;//= new BufferedReader(new FileReader(\"bum.in\"));\r\n        if(isSmall) br = new BufferedReader(new FileReader(name+\"-small-attempt0.in\"));\r\n        else br = new BufferedReader(new FileReader(name+\"-large.in\"));\r\n\r\n        PrintWriter pw;\r\n        if(isSmall) pw = new PrintWriter(name+\"-small.txt\", \"UTF-8\");\r\n        else pw = new PrintWriter(name+\"-large.txt\", \"UTF-8\");\r\n\r\n        int T=Integer.parseInt(br.readLine());\r\n        for(int i = 0; i < T; i++){\r\n            int N=Integer.parseInt(br.readLine());\r\n            String[] tab =br.readLine().split(\" \");\r\n            int[] bff = new int[N];\r\n\r\n            for(int j = 0; j < N; j++){\r\n                bff[j]=Integer.parseInt(tab[j]);\r\n            }\n\t\t\tint index1=-1;\n\t\t\tint index2 =-1;\n\t\t\tfor(int i1=0;i1<N;i1++){\n\t\t\t    if(index1<0 ||bff[index1]<bff[i1]){\n\t\t\t        index1=i1;\n\t\t\t    }\n\t\t\t}\n\t\t\tfor(int i3=0;i3<N;i3++){\n\t\t\t    if((index2<0 ||bff[index2]<bff[i3])&&i3!=index1){\n\t\t\t        index2=i3;\n\t\t\t    }\n\t\t\t}\n\t\t\tString res=\"\";\n\t\t\tfor(int j=0; j<bff[index1]-bff[index2];j++){\n\t\t\t    res+=((char)(65+index1))+\" \";\n\t\t\t}\n\t\t\tfor(int j=0; j<N;j++){\n\t\t\t    if(j!=index1&&j!=index2){\n\t\t\t        for(int i2=0;i2<bff[j];i2++){\n\t\t\t            res+=((char)(65+j))+\" \";\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t\tfor(int j=0; j<bff[index2];j++){\n\t\t\t\n\t\t\t\n\t\t\t            res+=\"\"+((char)(65+index1))+((char)(65+index2))+\" \";\n\t\t\t\n\t\t\t\n\t\t\t}\r\n            String a = res;\r\n\r\n\r\n            System.out.print(\"Case #\"+(i+1)+\": \"+a+\"\\n\");\r\n            pw.write(\"Case #\"+(i+1)+\": \"+a+\"\\n\");\r\n\r\n        }\r\n        pw.close();\r\n    }\r\n}", "idx": "8205"}
{"func": "package googlejam8.p211;\nimport java.util.Scanner;\r\nimport java.io.FileInputStream;\r\nimport java.io.PrintStream;\r\nimport java.math.BigInteger;\r\nimport java.util.Vector;\r\n\r\npublic class Main {\r\n\tpublic static final String ALPHABET[] = {\r\n\t\t\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"\r\n\t};\r\n    public static void main(String[] args) throws Exception {\r\n        // set up scanner and iterate over test cases\r\n        Scanner scanner = new Scanner(new FileInputStream(\r\n            \"C:\\\\Users\\\\Stefan\\\\Downloads\\\\A-large.in\"));\r\n        PrintStream output = new PrintStream(\r\n            \"C:\\\\Users\\\\Stefan\\\\Downloads\\\\A-large.out\");\r\n        int T = scanner.nextInt();\r\n        for (int t = 1; t <= T; ++t) {\r\n            // get parameters\r\n            int N = scanner.nextInt();\r\n            int[] parties = new int[N];\r\n            int senatorsCount = 0;\r\n            for (int n = 0; n < N; ++n)\r\n            \tsenatorsCount += (parties[n] = scanner.nextInt());\r\n            // solve problem\r\n            output.print(\"Case #\" + t + \":\");\r\n            while (senatorsCount > 0) {\r\n            \t// find largest party / parties\r\n            \tint maxC1 = 0;\r\n            \tint maxC2 = 0;\r\n            \tint maxI1 = 0;\r\n            \tint maxI2 = 0;\r\n            \tfor (int party = 0; party < N; ++party)\r\n            \t\tif (parties[party] > maxC1) {\r\n            \t\t\tmaxC2 = maxC1;\r\n            \t\t\tmaxI2 = maxI1;\r\n            \t\t\tmaxC1 = parties[party];\r\n            \t\t\tmaxI1 = party;\r\n            \t\t}\r\n            \t\telse if (parties[party] == maxC1 || parties[party] > maxC2) {\r\n            \t\t\tmaxC2 = parties[party];\r\n            \t\t\tmaxI2 = party;\r\n            \t\t}\r\n            \t// remove at least one senator\r\n            \toutput.print(\" \" + ALPHABET[maxI1]);\r\n            \t--maxC1;\r\n            \t--parties[maxI1];\r\n            \t--senatorsCount;\r\n            \t// decide if a second senator should leave\r\n            \tif (maxC1 > maxC2) {\r\n            \t\t// remove 2nd senator from this party\r\n                \toutput.print(ALPHABET[maxI1]);\r\n                \t--maxC1;\r\n                \t--parties[maxI1];\r\n                \t--senatorsCount;\r\n            \t}\r\n            \telse if (senatorsCount == 1 || 2 * maxC2 > senatorsCount) {\r\n            \t\t// remove 2nd senator from 2nd party\r\n                \toutput.print(ALPHABET[maxI2]);\r\n                \t--maxC2;\r\n                \t--parties[maxI2];\r\n                \t--senatorsCount;\r\n            \t}\r\n            }\r\n            output.println();\r\n        }\r\n        output.close();\r\n        System.out.println(\"finished\");\r\n    }\r\n}\r\n", "idx": "8211"}
{"func": "package googlejam8.p213;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\npublic class SenateEvacuation {\r\n\r\n\tstatic PrintWriter writer;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t\r\n\t\twriter = new PrintWriter(\"out.txt\");\r\n\t\tBufferedReader br = null;\r\n\t\ttry {\r\n\t\t\tbr = new BufferedReader(new FileReader(\"A-large (1).in\"));\r\n\t\t\tString line = br.readLine();\r\n\t\t    int Num = Integer.parseInt(line);\r\n\t\t    for(int i = 0; i < Num; ++i) {\r\n\t\t    \tline = br.readLine();\r\n\t\t    \tint party = Integer.parseInt(line);\r\n\t\t    \tline = br.readLine();\r\n\t\t    \tString bufs[] = line.split(\" \");\r\n\t\t    \tint[] sena = new int[30];\r\n\t\t    \tfor(int j = 0; j < party; ++j){\r\n\t\t    \t\tsena[j] = Integer.parseInt(bufs[j]);\r\n\t\t    \t}\r\n\t\t    \t\r\n\t\t    \tString output = \"\";\r\n\t\t    \t\r\n\t\t    \twhile(true) {\r\n\t\t    \t\tint min = -1;\n\t\t\t\t\tint index1 = -1;\n\t\t\t\t\tint count = 0;\n\t\t\t\t\tint another1 = -1;\n\t\t\t\t\tfor(int i1 = 0; i1 < party; ++i1) {\n\t\t\t\t\t\tif(sena[i1] > 0 &&(min == -1 || sena[i1] > min)) {\n\t\t\t\t\t\t\tmin = sena[i1];\n\t\t\t\t\t\t\tindex1 = i1;\n\t\t\t\t\t\t\tcount = 1;\n\t\t\t\t\t\t\tanother1 = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(sena[i1] > 0 &&(min == -1 || sena[i1] == min)){\n\t\t\t\t\t\t\tcount ++;\n\t\t\t\t\t\t\tanother1 = i1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(count == 2 && another1 > -1) {\n\t\t\t\t\t\tindex1 += another1 * 100;\n\t\t\t\t\t}\n\t\t\t\t\tint index =  index1;\r\n\t\t    \t\tif(index == -1) {\r\n\t\t    \t\t\tbreak;\r\n\t\t    \t\t}\r\n\t\t    \t\tif(index < 30) { \r\n\t\t\t    \t\tsena[index] --;\r\n\t\t\t    \t\tchar a = (char) (index + 'A');\r\n\t\t\t    \t\toutput += (a + \" \");\r\n\t\t    \t\t}\r\n\t\t    \t\telse {\r\n\t\t    \t\t\tint another = index / 100;\r\n\t\t    \t\t\tindex = index % 100;\r\n\r\n\t\t\t    \t\tsena[index] --;\r\n\t\t\t    \t\tchar a = (char) (index + 'A');\r\n\t\t\t    \t\tchar s = (char) (another + 'A');\r\n\t\t\t    \t\toutput += a;\r\n\t\t\t    \t\toutput += (s+ \" \");\r\n\t\t\t    \t\tsena[another] --;\r\n\t\t    \t\t}\r\n\t\t    \t}\r\n\t\t    \twriter.println(\"Case #\" + (i + 1) + \": \" + output);\r\n\t\t    }\r\n\t\t} finally {\r\n\t\t    br.close();\r\n\t\t\twriter.close();\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "idx": "8213"}
{"func": "package googlejam8.p215;\n\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class Solution1 {\n    final static String alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    static String [] bank = {\"ZERO\", \"ONE\", \"TWO\", \"THREE\", \"FOUR\", \"FIVE\", \"SIX\", \"SEVEN\", \"EIGHT\", \"NINE\"};\n\n    public static void main(String[] args) throws FileNotFoundException {\n\n        FileInputStream fileInputStream = new FileInputStream(\"/Users/ratmir/Downloads/A-large (3).in\");\n        //Scanner sc = new Scanner(System.in);\n        Scanner sc = new Scanner(fileInputStream);\n        FileOutputStream outputStream = new FileOutputStream(\"/Users/ratmir/Documents/code/hackerrank/algs/src/codejam/y2016/r3/z1/z2.txt\");\n        PrintWriter printWriter = new PrintWriter(outputStream);\n        int t = sc.nextInt();\n        for (int ti=1;ti<=t;ti++) {\n            int n = sc.nextInt();\n            int[] arr = new int[n];\n            int cnt = 0;\n            TreeMap<Integer, Set<Integer>> tm = new TreeMap<Integer, Set<Integer>>();\n            for (int i = 0; i < n; i++) {\n                arr[i] = sc.nextInt();\n                cnt += arr[i];\n                Set<Integer> integers = tm.get(arr[i]);\n                if (integers ==null) {\n                    integers = new HashSet<Integer>();\n                    tm.put(arr[i], integers);\n                }\n                integers.add(i);\n            }\n            StringBuilder sb = new StringBuilder();\n            while (cnt > 0) {\n                if (cnt==3 && tm.size()==1 || (cnt==3 && tm.size()==2 && tm.containsKey(0) && tm.containsKey(1))) {\n                    System.err.println(tm);\n                    Set<Integer> integers = tm.get(1);\n                    Iterator<Integer> iterator = integers.iterator();\n                    Integer mx1 = iterator.next();\n                    Integer mx2 = iterator.next();\n                    Integer mx3 = iterator.next();\n                    String c1 = alphabet.substring(mx1, mx1 + 1);\n                    String c2 = alphabet.substring(mx2, mx2 + 1);\n                    String c3 = alphabet.substring(mx3, mx3 + 1);\n                    sb = sb.append(c1+\" \"+c2+c3);\n                    cnt -=3;\n                    break;\n                }\n                System.err.println(tm);\n                Map.Entry<Integer, Set<Integer>> entry = tm.lastEntry();\n                Integer key = entry.getKey();\n                Set<Integer> value = entry.getValue();\n                Iterator<Integer> iterator = value.iterator();\n                int mx = iterator.next();\n                if (value.size()>1) {\n                    int mx1 = iterator.next();\n                    value.remove(mx);\n                    value.remove(mx1);\n                    if (value.size()==0) {\n                        tm.remove(key);\n                    }\n                    String c = alphabet.substring(mx, mx + 1);\n                    String c1 = alphabet.substring(mx1, mx1 + 1);\n                    sb = sb.append(c+c1+\" \");\n                    Set<Integer> integers = tm.get(key - 1);\n                    if (integers ==null) {\n                        integers = new HashSet<Integer>();\n                        tm.put(key-1, integers);\n                    }\n                    integers.add(mx);\n                    integers.add(mx1);\n                    cnt -= 2;\n                } else {\n                    tm.remove(key);\n                    if (key > 1) {\n                        String c = alphabet.substring(mx, mx + 1);\n                        sb = sb.append(c + c + \" \");\n                        Set<Integer> integers = tm.get(key - 2);\n                        if (integers == null) {\n                            integers = new HashSet<Integer>();\n                            tm.put(key - 2, integers);\n                        }\n                        integers.add(mx);\n                        cnt -= 2;\n                    } else {\n                        String c = alphabet.substring(mx, mx + 1);\n                        sb = sb.append(c + c + \" \");\n                        Set<Integer> integers = tm.get(key - 1);\n                        if (integers == null) {\n                            integers = new HashSet<Integer>();\n                            tm.put(key - 1, integers);\n                        }\n                        integers.add(mx);\n                        cnt -= 1;\n                    }\n                }\n                //selfcheck\n                if (cnt>0) {\n                    Map.Entry<Integer, Set<Integer>> entry1 = tm.lastEntry();\n                    if (entry1.getValue().size()==1) {\n                        if (entry1.getKey()>cnt/2) {\n                            System.err.println(entry1.getKey()+\" \"+cnt);\n                            throw new RuntimeException();\n                        }\n                    }\n                }\n            }\n            String res = \"Case #\" + ti + \": \" + sb.toString();\n            System.out.println(res);\n            printWriter.write(res + \"\\n\");\n        }\n        printWriter.close();\n    }\n\n}\n", "idx": "8215"}
{"func": "package googlejam8.p220;\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Ex1 {\r\n    private static String input = \"A-large.in\";\r\n    private static String output = \"out.txt\";\r\n    private PrintWriter out;\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Scanner file = new Scanner(new FileInputStream(input));\n\t\tEx1 r = new Ex1();\r\n        r.out = new PrintWriter(Ex1.output);\n\t\tint testsNo = Integer.valueOf(file.nextLine());\n\t\t\n\t\tfor (int i=1; i<=testsNo; i++) {\n\t\t    int N = Integer.valueOf(file.nextLine());\n\t\t    String[] arr = file.nextLine().split(\" \");\n\t\t    int[] sen = new int[arr.length];\n\t\t    for (int j=0; j<sen.length; j++)\n\t\t        sen[j] = Integer.valueOf(arr[j]);\n\t\t\n\t\t    r.out.print(\"Case #\"+i+\": \");\n\t\t\tint total = 0;\n\t\t\tfor (int i1=0; i1<N; i1++) total += sen[i1];\n\t\t\t\n\t\t\twhile (total > 3 || total == 2) {\n\t\t\t    int max = 0;\n\t\t\t    for (int j=0; j<N; j++) if (sen[max] < sen[j]) max = j;\n\t\t\t    sen[max]--;\n\t\t\t    total--;\n\t\t\t    char first = (char)('A'+max);\n\t\t\t    r.out.print(first);\n\t\t\t\n\t\t\t    if (total == 3) break;\n\t\t\t    if (total > 0) {\n\t\t\t        max=0;\n\t\t\t        for (int j=0; j<N; j++) if (sen[max]<sen[j]) max=j;\n\t\t\t        char second=(char) ('A'+max);\n\t\t\t        sen[max]--;\n\t\t\t        total--;\n\t\t\t        r.out.print(second);\n\t\t\t    }\n\t\t\t    r.out.print(\" \");\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif (total == 3) {\n\t\t\t    int max = 0;\n\t\t\t    for (int j=0; j<N; j++) if (sen[max] < sen[j]) max = j;\n\t\t\t    sen[max]--;\n\t\t\t    char first = (char)('A'+max);\n\t\t\t    r.out.print(first+\" \");\n\t\t\t\n\t\t\t    max = 0;\n\t\t\t    for (int j=0; j<N; j++) if (sen[max] < sen[j]) max = j;\n\t\t\t    sen[max]--;\n\t\t\t    first = (char)('A'+max);\n\t\t\t    r.out.print(first);\n\t\t\t\n\t\t\t    max = 0;\n\t\t\t    for (int j=0; j<N; j++) if (sen[max] < sen[j]) max = j;\n\t\t\t    sen[max]--;\n\t\t\t    char second= (char)('A'+max);\n\t\t\t    r.out.print(second);\n\t\t\t    r.out.print(\" \");\n\t\t\t}\n\t\t    r.out.println();\n\t\t}\n\t\tr.out.close();\r\n        file.close();\r\n    }\r\n}\r\n", "idx": "8220"}
{"func": "package googlejam8.p222;\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class GCJR1 {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner cin = new Scanner(new FileInputStream(\"A-large (3).in\"));\r\n\t\tPrintWriter cout = new PrintWriter(new FileOutputStream(\"output.txt\"));\r\n\t\tint T = cin.nextInt();\r\n\t\tfor (int t = 0; t < T; ++t) {\r\n\t\t\tint N = cin.nextInt();\r\n\t\t\tint[] a = new int[N];\r\n\t\t\tint sum = 0;\r\n\t\t\tfor (int i = 0; i < N; ++i)\r\n\t\t\t\tsum += a[i] = cin.nextInt();\r\n\t\t\tint ind1 = -1, ind2 = -1;\r\n\t\t\tcout.print(\"Case #\" + (t + 1) + \": \");\r\n\t\t\twhile (sum > 0) {\r\n\t\t\t\tif (ind1 == -1) {\r\n\t\t\t\t\tint m1 = 0;\n\t\t\t\t\tfor (int i1 = 1; i1 < a.length; ++i1)\n\t\t\t\t\t\tif (a[m1] < a[i1])\n\t\t\t\t\t\t\tm1 = i1;\n\t\t\t\t\tint m = m1;\r\n\t\t\t\t\tfor (int i = 0; i < N; ++i)\r\n\t\t\t\t\t\tif (i != m && a[i] == a[m]) {\r\n\t\t\t\t\t\t\tind1 = i;\r\n\t\t\t\t\t\t\tind2 = m;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (ind1 != -1) {\r\n\t\t\t\t\tint fnd = -1;\r\n\t\t\t\t\tfor (int i = 0; i < N; ++i)\r\n\t\t\t\t\t\tif (i != ind1 && i != ind2 && a[i] > 0) {\r\n\t\t\t\t\t\t\tfnd = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tif (fnd != -1) {\r\n\t\t\t\t\t\tcout.print((char) ('A' + fnd) + \" \");\r\n\t\t\t\t\t\ta[fnd]--;\r\n\t\t\t\t\t\tsum--;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcout.print((char) ('A' + ind1) + \"\" + (char) ('A' + ind2) + \" \");\r\n\t\t\t\t\t\tsum -= 2;\r\n\t\t\t\t\t\ta[ind1]--;\r\n\t\t\t\t\t\ta[ind2]--;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tint m1 = 0;\n\t\t\t\t\tfor (int i = 1; i < a.length; ++i)\n\t\t\t\t\t\tif (a[m1] < a[i])\n\t\t\t\t\t\t\tm1 = i;\n\t\t\t\t\tint m = m1;\r\n\t\t\t\t\tcout.print((char) ('A' + m) + \" \");\r\n\t\t\t\t\tsum--;\r\n\t\t\t\t\ta[m]--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcout.println();\r\n\t\t}\r\n\t\tcout.flush();\r\n\t}\r\n\r\n}\r\n", "idx": "8222"}
{"func": "package googlejam8.p054;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\npublic class A {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner in = new Scanner(new File(\"AL.in\"));\n\t\tint tc = in.nextInt();\n\t\tPrintWriter out = new PrintWriter(\"AL.out\");\n\t\tfor (int cc = 1; cc <= tc; cc++) {\n\t\t\tint n = in.nextInt();\n\t\t\tint[] f = new int[n];\n\t\t\tint sum = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tf[i] = in.nextInt();\n\t\t\t\tsum += f[i];\n\t\t\t}\n\t\t\tStringBuilder result = new StringBuilder();\n\t\t\twhile (sum > 0) {\n\t\t\t\tint max = 0;\n\t\t\t\tTreeSet<Integer> nz = new TreeSet<>();\n\t\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t\tif (f[i] > f[max]) {\n\t\t\t\t\t\tmax = i;\n\t\t\t\t\t}\n\t\t\t\t\tif (f[i] > 0) {\n\t\t\t\t\t\tnz.add(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(Arrays.toString(f));\n\t\t\t\tif (f[max] * 2 == sum && nz.size() == 2) {\n\t\t\t\t\tint a = nz.pollFirst();\n\t\t\t\t\tint b = nz.pollFirst();\n\t\t\t\t\tf[a]--;\n\t\t\t\t\tf[b]--;\n\t\t\t\t\tresult.append((char) ('A' + a) + \"\" + (char) ('A' + b) + \" \");\n\t\t\t\t\tsum -= 2;\n\t\t\t\t} else {\n\t\t\t\t\tf[max]--;\n\t\t\t\t\tresult.append((char) ('A' + max) + \" \");\n\t\t\t\t\tsum -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.printf(\"Case #%d: %s\\n\", cc, result.toString().trim());\n\t\t\tout.printf(\"Case #%d: %s\\n\", cc, result.toString().trim());\n\t\t}\n\t\tout.close();\n\t}\n}\n", "idx": "8054"}
{"func": "package googlejam8.p125;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class A {\n\tpublic static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n\t\tString filename = \"A-large\";\n\t\tScanner sc = new Scanner(new File(filename + \".in\"));\n//\t\tScanner sc = new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(filename + \".out\", \"UTF-8\");\n\t\twhile(sc.hasNext()) {\n\t\t\tint T = sc.nextInt();\n\t\t\tfor(int i = 1; i <= T; i++) {\n\t\t\t\tint N = sc.nextInt();\n\t\t\t\tint[] P = new int[N];\n\t\t\t\tfor(int j = 0; j < N; j++) {\n\t\t\t\t\tP[j] = sc.nextInt();\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\"Case #\" + i + \":\");\n\t\t\t\tpw.print(\"Case #\" + i + \":\");\n\t\t\t\tint[] PS = Arrays.copyOf(P,P.length);\n\t\t\t\tArrays.sort(PS);\n\t\t\t\tint max = PS[N-1];\n\t\t\t\tint maxes;\n\t\t\t\twhile(max > 0) {\n//\t\t\t\t\tSystem.out.println(Arrays.toString(P));\n\t\t\t\t\tmaxes = 0;\n\t\t\t\t\tfor(int j = 0; j < N; j++) {\n\t\t\t\t\t\tif(PS[j] == PS[N-1]) maxes++;\n\t\t\t\t\t}\n\t\t\t\t\tif(maxes==2) {\n\t\t\t\t\t\tint j = 0;\n\t\t\t\t\t\tint a = -1, b = -1;\n\t\t\t\t\t\tfor(j = 0; j < N; j++) {\n\t\t\t\t\t\t\tif(P[j] == max) {\n\t\t\t\t\t\t\t\tif(a == -1) a = j;\n\t\t\t\t\t\t\t\telse b = j;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tP[a]--;\n\t\t\t\t\t\tP[b]--;\n\t\t\t\t\t\tSystem.out.print(\" \" + (char)('A' + a));\n\t\t\t\t\t\tSystem.out.print((char)('A' + b));\n\t\t\t\t\t\tpw.print(\" \" + (char)('A' + a));\n\t\t\t\t\t\tpw.print((char)('A' + b));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor(int j = 0; j < N; j++) {\n\t\t\t\t\t\t\tif(P[j] == max) {\n\t\t\t\t\t\t\t\tP[j]--;\n\t\t\t\t\t\t\t\tSystem.out.print(\" \" + (char)('A' + j));\n\t\t\t\t\t\t\t\tpw.print(\" \" + (char)('A' + j));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tPS = Arrays.copyOf(P,P.length);\n\t\t\t\t\tArrays.sort(PS);\n\t\t\t\t\tmax = PS[N-1];\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\tSystem.out.println();\n\t\t\t\tpw.println();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n//\t\t\t\twhile(nonzero > 0) {\n//\t\t\t\t\tSystem.out.println(Arrays.toString(P));\n//\t\t\t\t\tif(nonzero == 2) {\n//\t\t\t\t\t\tint a = -1, b = -1;\n//\t\t\t\t\t\tint j = 0;\n//\t\t\t\t\t\tfor(j = 0; j < N; j++) {\n//\t\t\t\t\t\t\tif(P[j] > 0) {\n//\t\t\t\t\t\t\t\ta = j;\n//\t\t\t\t\t\t\t\tbreak;\n//\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t}\n//\t\t\t\t\t\tfor(j++; j < N; j++) {\n//\t\t\t\t\t\t\tif(P[j] > 0) {\n//\t\t\t\t\t\t\t\tb = j;\n//\t\t\t\t\t\t\t\tbreak;\n//\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t}\n//\t\t\t\t\t\tint c = Math.min(P[a], P[b]);\n//\t\t\t\t\t\tstr = new StringBuilder(str).reverse().toString();\n//\t\t\t\t\t\tfor(j = 0; j < c; j++) {\n//\t\t\t\t\t\t\tstr += \" \" + (char)('A' + a);\n//\t\t\t\t\t\t\tstr += (char)('A' + b);\n//\t\t\t\t\t\t}\n//\t\t\t\t\t\tstr = new StringBuilder(str).reverse().toString();\n//\t\t\t\t\t\tP[a] -= c;\n//\t\t\t\t\t\tP[b] -= c;\n//\t\t\t\t\t\tif(P[a] == 0) nonzero--;\n//\t\t\t\t\t\tif(P[b] == 0) nonzero--;\n//\t\t\t\t\t} else {\n//\t\t\t\t\t\tfor(int j = 0; j < N; j++) {\n//\t\t\t\t\t\t\tif(P[j] > 0) {\n//\t\t\t\t\t\t\t\tstr += (char)('A' + j) + \" \";\n//\t\t\t\t\t\t\t\tif(P[j] == 1) nonzero--;\n//\t\t\t\t\t\t\t\tP[j]--;\n//\t\t\t\t\t\t\t}\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\t\t\t\t}\n\t\t\t}\n\t\t\tpw.close();\n\t\t}\n\t}\n\n}\n", "idx": "8125"}
{"func": "package googlejam8.p170;\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\n\r\n\r\n\r\npublic class Evacuation {\r\n\tpublic static void main(String[] args) {\r\n\t\t//Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t Scanner in = new Scanner(System.in);\r\n\t    int loops = in.nextInt();\r\n\t \t\r\n\t    for (int loop = 1; loop <= loops; ++loop) {\r\n\t    \tint n = in.nextInt();\r\n\t    \tint[] parties = new int[n];\r\n\t    \tint sum = 0;\r\n\t    \tfor(int i = 0; i < n; i++) {\r\n\t    \t\tparties[i] = in.nextInt();\r\n\t    \t\tsum += parties[i];\r\n\t    \t}\r\n\t       \r\n\t    \tint[] evac1 = new int[(sum/2)+ 1];\r\n\t    \tint[] evac2 = new int[(sum/2) + 1];\r\n\t    \tint evac = 0;\r\n\t    \tint original = sum;\r\n\t    \t\r\n\t    \twhile (sum > 0) {\r\n\t    \t\tint max = (parties[0] > parties[1] ? 0 : 1);\r\n\t\t    \tint second = (parties[0] > parties[1] ? 1 : 0);\r\n\t\t    \tfor (int i = 2; i < n; i++) {\r\n\t\t    \t\tif (parties[i] > max) {\r\n\t\t    \t\t\tsecond = max;\r\n\t\t    \t\t\tmax = i;\r\n\t\t    \t\t}\r\n\t\t    \t\telse if (parties[i] > second) {\r\n\t\t    \t\t\tsecond = i;\r\n\t\t    \t\t}\r\n\t\t    \t}\r\n\t\t    \tif (sum%2 == 1) {\r\n\t\t    \t\tevac1[evac] = max;\r\n\t\t    \t\tevac2[evac] = -1;\r\n\t\t    \t\tparties[max] -= 1;\r\n\t\t    \t\tsum -= 1;\r\n\t\t    \t}\r\n\t\t    \telse {\r\n\t\t    \t\tevac1[evac] = max;\r\n\t\t    \t\tevac2[evac] = second;\r\n\t\t    \t\tparties[max] -= 1;\r\n\t\t    \t\tparties[second] -= 1;\r\n\t\t    \t\tsum -= 2;\r\n\t\t    \t}\r\n\t\t    \tevac++;\r\n\t    \t}\r\n\t    \t\r\n\t       StringBuilder builder = new StringBuilder();\r\n\t       builder.append(String.format(\"Case #%1$s:\", loop));\r\n\t       for (int i = 0; i < (original/2) + (original%2 == 1? 1:0); i++) {\r\n\t    \t   builder.append(' ');\r\n\t    \t   builder.append((char)('A' + evac1[i]));\r\n\t    \t   if (evac2[i] != -1)\r\n\t    \t\t   builder.append((char)('A' + evac2[i]));\r\n\t       }\t\r\n\t       System.out.println(builder.toString());\r\n\t       //String line = String.format(\"Case #%1$s: %2$s\", loop, flow);\r\n\t       //System.out.println(line);\r\n\t    }\r\n\t    in.close();\r\n }\r\n}\r\n", "idx": "8170"}
{"func": "package googlejam8.p227;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.LinkedList;\r\n\r\npublic class A\r\n{\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader in = new BufferedReader(new FileReader(args[0]));\r\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(args[1]));\r\n\t\t{\r\n\t\t\tint nb_cases = Integer.parseInt(in.readLine());\r\n\t\t\t\r\n\t\t\tfor(int icase = 0; icase < nb_cases; icase++)\r\n\t\t\t{\r\n\t\t\t\t// read input\r\n\t\t\t\tint N = Integer.parseInt(in.readLine());\r\n\t\t\t\tString[] P_str = in.readLine().split(\" \");\r\n\t\t\t\tint[] P = new int[N];\r\n\t\t\t\tfor(int i = 0; i < N; i++)\r\n\t\t\t\t\tP[i] = Integer.parseInt(P_str[i]);\r\n\t\t\t\t\r\n\t\t\t\t// solve\r\n\t\t\t\tLinkedList<String> y = new LinkedList<String>();\r\n\t\t\t\t\r\n\t\t\t\tint S = 0;\r\n\t\t\t\tfor(int p = 0; p < N; p++)\r\n\t\t\t\t\tS += P[p];\r\n\t\t\t\t\r\n\t\t\t\twhile(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tString res = \"\";\r\n\t\t\t\t\t\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint pmax = 0;\r\n\t\t\t\t\t\tfor(int p = 1; p < N; p++)\r\n\t\t\t\t\t\t\tif(P[p] > P[pmax])\r\n\t\t\t\t\t\t\t\tpmax = p;\r\n\r\n\t\t\t\t\t\tif(P[pmax] == 0)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tP[pmax]--;\r\n\t\t\t\t\t\tS--;\r\n\t\t\t\t\t\tres = res + (char)('A' + pmax);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint pmax = 0;\r\n\t\t\t\t\t\tfor(int p = 1; p < N; p++)\r\n\t\t\t\t\t\t\tif(P[p] > P[pmax])\r\n\t\t\t\t\t\t\t\tpmax = p;\r\n\r\n\t\t\t\t\t\tif(P[pmax] > 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tP[pmax]--;\r\n\t\t\t\t\t\t\tS--;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tint newpmax = 0;\r\n\t\t\t\t\t\t\tfor(int p = 1; p < N; p++)\r\n\t\t\t\t\t\t\t\tif(P[p] > P[newpmax])\r\n\t\t\t\t\t\t\t\t\tnewpmax = p;\r\n\t\t\t\t\t\t\tif(P[newpmax] > S/2)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tP[pmax]++;\r\n\t\t\t\t\t\t\t\tS++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tres = res + (char)('A' + pmax);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ty.add(res);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// write output\r\n\t\t\t\tout.write(\"Case #\"+(icase+1)+\":\");\r\n\t\t\t\tfor(String ye : y)\r\n\t\t\t\t\tout.write(\" \"+ye);\r\n\t\t\t\tout.write(\"\\n\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tout.close();\r\n\t\tin.close();\r\n\t}\r\n}\r\n", "idx": "8227"}
{"func": "package googlejam8.p293;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\npublic class GoogleCodeJamA {\n    public static void main(String args[]) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int test = Integer.parseInt(in.readLine());\n        for (int t =0;t<test;t++) {\n            int n = Integer.parseInt(in.readLine());\n            StringTokenizer st = new StringTokenizer(in.readLine());\n            int a[] = new int [40];\n            int ost = 0;\n            for (int i = 0; i < n; i++) {\n                a[i] = Integer.parseInt(st.nextToken());\n                ost += a[i];\n            }\n            String ans[] = new String[1000];\n            int count = 0;\n            while (ost > 0) {\n                int max1 = -1;\n                int max2 = -1;\n                int max3 = -1;\n                for (int i = 0; i < n; i++) {\n                    if (max1 == -1 || a[i] > a[max1]) {\n                        max3 = max2;\n                        max2 = max1;\n                        max1 = i;\n                    } else\n                    if (max2 == -1 || a[i] > a[max2]) {\n                        max3 = max2;\n                        max2 = i;\n                    } else\n                    if (max3 == -1 || a[i] > a[max3]) {\n                        max3 = i;\n                    }\n                }\n                if (ost == 3) {\n                    ans[count++] = (char) (max1 + 'A') + \"\";\n                    a[max1]--;\n                    ost--;\n                } else\n                if (ost == 1) {\n                    ans[count++] = (char) (max1 + 'A') + \"\";\n                    a[max1]--;\n                    ost--;\n                } else\n                if (a[max1] == a[max2]) {\n                    ans[count++] = (char) (max1 + 'A') + \"\" + (char) (max2 + 'A');\n                    a[max1] --;\n                    a[max2] --;\n                    ost-=2;\n                } else {\n                    if (a[max2] > ((ost - 2) / 2)) {\n                        ans[count++] = (char) (max1 + 'A') + \"\" + (char) (max2 + 'A');\n                        a[max1] --;\n                        a[max2] --;\n                        ost-=2;\n                    } else {\n                        ans[count++] = (char) (max1 + 'A') + \"\" + (char) (max1 + 'A');\n                        a[max1] --;\n                        a[max1] --;\n                        ost-=2;\n                    }\n                }\n\n            }\n            System.out.print(\"Case #\"+(t+1)+\":\");\n            for (int i =0;i<count;i++) {\n                System.out.print(\" \"+ans[i]);\n            }\n            System.out.println();\n\n        }\n        in.close();\n    }\n}\n", "idx": "8293"}
{"func": "package googlejam8.p360;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tstatic Scanner scan;\r\n\tstatic PrintWriter writer;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFile file = new File(\"D://A-large.in\");\r\n\t\tFile out = new File(\"D://outA.txt\");\r\n\t\ttry {\r\n\t\t\tscan = new Scanner(file);\r\n\t\t\twriter = new PrintWriter(out);\r\n\t\t\tint t = scan.nextInt();\r\n\t\t\tfor (int i = 1; i <= t; i++) {\r\n\t\t\t\twriter.print(\"Case #\" + i + \": \");\r\n\t\t\t\t// input go here\r\n\t\t\t\tint P = scan.nextInt();\r\n\t\t\t\tList<Integer> list = new ArrayList<Integer>();\r\n\r\n\t\t\t\tfor (int j = 0; j < P; j++) {\r\n\t\t\t\t\tlist.add(scan.nextInt());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (list.size() == 2) {\n\t\t\t\t\tint min = 0;\n\t\t\t\t\tif (list.get(0) > list.get(1)) {\n\t\t\t\t\t\tmin = list.get(1);\n\t\t\t\t\t\tfor (int i3 = 0; i3 < list.get(0) - list.get(1); i3++) {\n\t\t\t\t\t\t\twriter.print(\"A \");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmin = list.get(0);\n\t\t\t\t\t\tfor (int i4 = 0; i4 < list.get(1) - list.get(0); i4++) {\n\t\t\t\t\t\t\twriter.print(\"B \");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i1 = 0; i1 < min; i1++) {\n\t\t\t\t\t\twriter.print(\"AB \");\n\t\t\t\t\t}\n\t\t\t\t\twriter.println();\n\t\t\t\t} else {\n\t\t\t\t\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tint max = -1, imax = -1;\n\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\tfor (int i5 = 0; i5 < list.size(); i5++) {\n\t\t\t\t\t\t\tsum += list.get(i5);\n\t\t\t\t\t\t\tif (list.get(i5) > max) {\n\t\t\t\t\t\t\t\tmax = list.get(i5);\n\t\t\t\t\t\t\t\timax = i5;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\tif (sum > 2) {\n\t\t\t\t\t\t\twriter.print((char) ('A' + imax) + \" \");\n\t\t\t\t\t\t\tlist.set(imax, list.get(imax) - 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (int i2 = 0; i2 < list.size(); i2++) {\n\t\t\t\t\t\t\t\tif (list.get(i2) > 0) {\n\t\t\t\t\t\t\t\t\twriter.print((char) ('A' + i2));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twriter.println(\"\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (Exception ex) {\r\n\r\n\t\t} finally {\r\n\t\t\twriter.close();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "8360"}
{"func": "package googlejam8.p412;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.util.Scanner;\n\n\npublic class pro1 {\n\tpublic static void main(String[] args) {\n\t\tScanner in; \n\t\tPrintStream out;\n\t\tString readString;\n\t\t\n\t\ttry{\n   \t\t\t\tin = new Scanner(System.in);\n\n\t\t\t\tout = new PrintStream(System.out);\n\n   \t\t\t\tint T = in.nextInt();\n   \t\t\t\t\n   \t\t\t\tString ABCD = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nfor( int t=0; t<T ; t++ ){\n        int N = in.nextInt();\n        int[] Pi = new int[N];\n        int sum = 0;\n        for( int n=0; n<N; n++){\n\t\t\tPi[n] = in.nextInt();\n\t\t\tsum += Pi[n];\n\t\t}\n\t\t\n        out.print(\"Case #\"+(t+1)+\":\");\n\t\twhile( sum > 0 ){\n\t\t\t//find maximum & second maximum\n\t\t\tint max_ind = 0;\n\t\t\tint sec_max_ind = 1;\n\t\t\tif( Pi[0] > Pi[1] ){\n\t\t\t\tmax_ind = 1;\n\t\t\t\tsec_max_ind = 0;\n\t\t\t}\n\t\t\tfor( int i=0; i<N; i++){\n\t\t\t\tif( Pi[max_ind] < Pi[i] ){\n\t\t\t\t\tsec_max_ind = max_ind;\n\t\t\t\t\tmax_ind = i;\n\t\t\t\t}\n\t\t\t\telse if( Pi[sec_max_ind] < Pi[i] ){\n\t\t\t\t\tsec_max_ind = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//out.println(Pi[max_ind]+\" \"+Pi[sec_max_ind]);\n\t\t\t\n\t\t\t//AA? AB? A?\n\t\t\tif( Pi[max_ind] == Pi[sec_max_ind] && sum!=3){\n\t\t\t\tPi[max_ind]--;\n\t\t\t\tPi[sec_max_ind]--;\n\t\t\t\tsum = sum -2 ;\n\t\t\t\tout.print(\" \"+ABCD.charAt(max_ind)+ABCD.charAt(sec_max_ind));\n\t\t\t}\n\t\t\telse if( Pi[max_ind] == 1 ){\n\t\t\t\tPi[max_ind]--;\n\t\t\t\tsum = sum-1;\n\t\t\t\tout.print(\" \"+ABCD.charAt(max_ind));\n\t\t\t}\n\t\t\telse if( 2*(Pi[max_ind]-2) <= sum ){\n\t\t\t\tPi[max_ind]=Pi[max_ind]-2;\n\t\t\t\tsum = sum-2;\n\t\t\t\tout.print(\" \"+ABCD.charAt(max_ind)+ABCD.charAt(max_ind));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tPi[max_ind]--;\n\t\t\t\tsum = sum-1;\n\t\t\t\tout.print(\" \"+ABCD.charAt(max_ind));\n\t\t\t}\n\n\t\t\t//out.println(\"rate \"+Pi[max_ind]*2+\" \"+sum);\n\t\t\t\n\t\t\t//print AA? AB? A?\n\t\t\t//out.println(\" \"+str);\n\t\t}\n\t\t\n\t\tout.println();\n}\n\n\n\n\n\t\t}\n\t\tcatch(Exception e){\n\t\t\t;\n\t\t}\n\t\t\n\t\n\t}\n\n}\n", "idx": "8412"}
{"func": "package googlejam8.p476;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\n\r\n\r\npublic class CodeJam {\r\n\t\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t     \tBufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\r\n\t     \tBufferedWriter bw=new BufferedWriter(new FileWriter(\"es1.txt\"));\r\n\t        \r\n\t        int T,N=0;\r\n\t        String l;\r\n\t       \tT = Integer.valueOf(br.readLine());\r\n\t        for (int i=0;i<T;i++){\r\n\t        \t  bw.write(\"Case #\"+(i+1)+\": \");\r\n\t        \tN = Integer.valueOf(br.readLine());\r\n\t        \tint []A = new int[N];\r\n\t        \tl=br.readLine();\r\n\t        \t\r\n        \t\tfor(int k=0;k<N;k++)\r\n        \t\t\tA[k]=Integer.valueOf(l.split(\" \")[k]);\r\n        \t\t\r\n        \t\tint max=0;\r\n        \t\twhile(true){\r\n        \t\t\tmax=0;\r\n        \t\t\tint secondmax=0;\r\n        \t\t\tint two=0;\r\n        \t\t\tfor(int j=0;j<N;j++){\r\n        \t\t\t\tif(A[j]>A[max])max=j;\r\n        \t\t\t\tif(diffz(A)!=3)if(A[j]==A[max]&&j!=max){two=1;secondmax=j;}\r\n        \t\t\t\t\r\n        \t\t\t\t}\r\n           \t\t\t\r\n        \t\t\tif (A[max]==0)break;\r\n        \t\t\tA[max]--;\r\n        \t\t\tif( two==1)\r\n        \t\t\t{\t\r\n        \t\t\t\tA[secondmax]--;\n\t\t\t\t\t\tint i1 = secondmax+1;\r\n        \t\t\t\tString b = i1 > 0 && i1 < 27 ? String.valueOf((char)(i1 + 64)) : null;\r\n        \t\t\t\tbw.write(b);\r\n            \t\t\tSystem.out.print(b);\r\n        \t\t\t}\n\t\t\t\t\tint i1 = max+1;\r\n        \t\t\tString a = i1 > 0 && i1 < 27 ? String.valueOf((char)(i1 + 64)) : null;\r\n        \t\t\tbw.write(a+\" \");\r\n        \t\t\tSystem.out.print(a+\" \");\t\r\n        \t\t}\r\n        \t\tSystem.out.println();\r\n\t            bw.newLine();\r\n\t        }\r\n\t        br.close();\r\n\t        bw.close();\r\n\t   }\r\n\tprivate static int diffz(int[] A) {\r\n\t\tint a=0;\r\n\t\tfor(int j=0;j<A.length;j++)if(A[j]!=0)a++;\r\n\t\treturn a;\r\n\t}\r\n}\r\n", "idx": "8476"}
{"func": "package googlejam8.p543;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n\r\n\tprivate final String problemName = \"A\";\r\n\t//private final String inTheMiddle = \"-small\";\r\n\tprivate final String inTheMiddle = \"-large\";\r\n\tprivate final String inTheEnd = \"\";\r\n\t//private final String inTheEnd = \"-attempt0\";\r\n\tprivate int caseC;\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tA my = new A();\r\n\t\tBufferedReader r = new BufferedReader(new FileReader(new File(my.problemName+my.inTheMiddle+my.inTheEnd+\".in\")));\n\t\tBufferedWriter w = new BufferedWriter(new FileWriter(my.problemName+my.inTheMiddle+my.inTheEnd+\".out\"));\n\t\tmy.caseC = Integer.parseInt(r.readLine());\n\t\tfor (int c=0; c<my.caseC;c++) {\n\t\t\tw.write(\"Case #\" + (c+1) +\": \");\n\t\t\tint N = Integer.parseInt(r.readLine());\n\t\t\tint[] partySize = new int[N];\n\t\t\tString[] args1 = r.readLine().split(\"\\\\s+\");\n\t\t\tint sum = 0;\n\t\t\tfor(int i=0 ; i<N ; i++) {\n\t\t\t\tpartySize[i] = Integer.parseInt(args1[i]);\n\t\t\t\tsum += partySize[i];\n\t\t\t}\n\t\t\twhile(sum!=0) {\n\t\t\t\tint biggestPartyIndex1 = -1;\n\t\t\t\tint biggestPartyIndex2 = -1;\n\t\t\t\tint biggestPartySize = 0;\n\t\t\t\tfor(int i=0 ; i<N ; i++) {\n\t\t\t\t\tif(partySize[i]>biggestPartySize) {\n\t\t\t\t\t\tbiggestPartyIndex1 = i;\n\t\t\t\t\t\tbiggestPartySize = partySize[i];\n\t\t\t\t\t\tbiggestPartyIndex2 = -1;\n\t\t\t\t\t} else if(partySize[i]==biggestPartySize) {\n\t\t\t\t\t\tbiggestPartyIndex2 = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint evacuated = (biggestPartyIndex1==-1 ? 0 : 1) + (biggestPartyIndex2==-1 ? 0 : 1);\n\t\t\t\tif(sum!=3) {\n\t\t\t\t\tw.write((biggestPartyIndex1 == -1 ? \"\" : (char) ('A' + biggestPartyIndex1)) + \"\" + (biggestPartyIndex2 == -1 ? \"\" : (char) ('A' + biggestPartyIndex2)));\n\t\t\t\t\tif (sum - evacuated != 0) {\n\t\t\t\t\t\tw.write(\" \");\n\t\t\t\t\t}\n\t\t\t\t\tsum -= evacuated;\n\t\t\t\t\tif (biggestPartyIndex1 != -1) {\n\t\t\t\t\t\tpartySize[biggestPartyIndex1] -= 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (biggestPartyIndex2 != -1) {\n\t\t\t\t\t\tpartySize[biggestPartyIndex2] -= 1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tw.write((biggestPartyIndex1 == -1 ? \"\" : (char) ('A' + biggestPartyIndex1)) + \" \");\n\t\t\t\t\tsum -= 1;\n\t\t\t\t\tif (biggestPartyIndex1 != -1) {\n\t\t\t\t\t\tpartySize[biggestPartyIndex1] -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tw.write(\"\\n\");\n\t\t}\n\t\tr.close();\n\t\tw.close();\r\n\t}\r\n\r\n}\r\n", "idx": "8543"}
{"func": "package googlejam8.p607;\nimport java.io.File;\r\nimport java.util.Scanner;\r\n\r\npublic class Tester {\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tFile f = new File(\"A-large (1).in\");\r\n\t\tScanner sc = new Scanner(f);\r\n\t\tint t = sc.nextInt();\r\n\t\tfor(int i=0;i<t;i++) {\r\n\t\t\tint size = sc.nextInt();\r\n\t\t\tint[] number = new int[size];\r\n\t\t\tfor(int j=0;j<size;j++) {\r\n\t\t\t\tnumber[j] = sc.nextInt();\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\"+(i+1)+\": \");\r\n\t\t\tlast(number);\r\n\t\t}\r\n\t\t/*int[] x = {9,8,7,6,5,4,3,2,1};\r\n\t\tlast(x);*/\r\n\t}\r\n\tpublic static  void last(int[] number) {\r\n\t\tint x = sum(number);\r\n\t\tif(x%2==1) {\r\n\t\t\tint max = 0;\r\n\t\t\tfor(int i=1;i<number.length;i++) {\r\n\t\t\t\tif(number[i]>number[max]) {\r\n\t\t\t\t\tmax = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tx--;\r\n\t\t\tnumber[max]--;\r\n\t\t\tSystem.out.print((char)(65+max)+\" \");\r\n\t\t}\r\n\t\tdo{\r\n\t\t\tint max=0,secondMax=0;\r\n\t\t\tfor(int i=1;i<number.length;i++) {\r\n\t\t\t\tif(number[i]>number[max]) {\r\n\t\t\t\t\tmax = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsecondMax = (max+1)%number.length;\r\n\t\t\tfor(int i=0;i<number.length;i++) {\r\n\t\t\t\tif((number[i]>number[secondMax])&&(i!=max)) {\r\n\t\t\t\t\tsecondMax = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.print((char)(65+max)+\"\"+(char)(65+secondMax)+\" \");\r\n\t\t\tnumber[max]--;\r\n\t\t\tnumber[secondMax]--;\r\n\t\t\t/*for(int i=0;i<number.length;i++) {\r\n\t\t\t\tSystem.out.print(number[i]+\" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();*/\r\n\t\t\tx-=2;\r\n\t\t\t//printMajority(number,x);\r\n\t\t}while(x>0);\r\n\t\tSystem.out.println();\r\n\t\t/*if(x == 1) {\r\n\t\t\tSystem.out.println(\"Bing\");\r\n\t\t}*/\r\n\t\t//System.out.println(number[max]+\"  \"+number[secondMax]);\r\n\t}\r\n}", "idx": "8607"}
{"func": "package googlejam8.p658;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\nimport java.text.*;\r\npublic class Main\r\n{  \r\n\r\npublic static void main(String[] args)throws java.lang.Exception\r\n{\r\n//BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n//PrintWriter out=new PrintWriter(System.out);\r\n\r\nBufferedReader in = new BufferedReader(new FileReader(\"A-large.in\"));\r\nPrintWriter out=new PrintWriter(\"output.txt\");\r\n\r\n\r\nint x1,t,i,n,sum,new_sum,max1,max2;\r\nboolean found;\r\n\r\nString str=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\r\nt=Integer.parseInt(in.readLine());\r\n\r\nfor(x1=0;x1<t;x1++)\r\n{\r\n\tn=Integer.parseInt(in.readLine());\r\n\r\n\tint[][] a=new int[n][2];\r\n\r\n\tStringTokenizer st=new StringTokenizer(in.readLine());\r\n\r\n\r\n\tsum=0;\r\n\r\n\tfor(i=0;i<n;i++)\r\n\t{\r\n\t\ta[i][0]=Integer.parseInt(st.nextToken());\r\n\t\ta[i][1]=i;\r\n\t\tsum+=a[i][0];\r\n\t}\r\n\r\n\r\n\tout.print(\"Case #\"+(x1+1)+\":\");\r\n\r\n\twhile(sum>0)\r\n\t{\r\n\t\tArrays.sort(a,new Comparator<int[]>(){\r\n\t\tpublic int compare(int[] c1,int[] c2)\r\n\t\t{\r\n\t\tint t2=c1[0]-c2[0];\r\n\t\t\treturn t2;\r\n\t\t}\r\n\t\t});\r\n\r\n\r\n\r\n\t\t//Arrays.sort(a);\r\n\t\tmax1=a[n-1][0];\r\n\t\tmax2=a[n-2][0];\r\n\r\n\t\tnew_sum=sum-2;\r\n\r\n\r\n\t\tfound=true;\r\n\r\n\t\tif(new_sum>0)\r\n\t\t{\r\n\r\n\t\tfor(i=0;i<n-2;i++)\r\n\t\t{\r\n\t\t\tif(a[i][0]/new_sum>0.5)\r\n\t\t\t{\r\n\t\t\t\tfound=false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tif(found)\t\t\t\t//\tRemove two elements\r\n\t\t{\r\n\t\t\tout.print(\" \"+str.charAt(a[n-1][1])+str.charAt(a[n-2][1]));\r\n\r\n\t\t\ta[n-1][0]--;\r\n\t\t\ta[n-2][0]--;\r\n\r\n\t\t\tsum-=2;\r\n\t\t}\r\n\t\telse  \t\t\t\t\t//  Remove one element\r\n\t\t{\r\n\t\t\tout.print(\" \"+str.charAt(a[n-1][1]));\r\n\r\n\t\t\ta[n-1][0]--;\r\n\r\n\t\t\tsum-=1;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tout.println();\r\n\r\n}\r\n\r\n\r\n\r\nout.flush();\r\nout.close();\r\n}\r\n}  \r\n\r\n\r\n\r\n\r\n\r\n\r\n", "idx": "8658"}
{"func": "package googlejam8.p721;\nimport java.util.Scanner;\r\n\r\npublic class finalc {\r\n\r\n\tpublic static void main (String [] args){\r\n\t\r\n\t\t\r\n\t\tScanner scan=new Scanner(System.in);\r\n\t\tString huruf[]={\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\r\n\t\t\r\n\t\tint a=scan.nextInt();\r\n\t\t\r\n\t\tfor(int i=0;i<a;i++){\r\n\t\t\tint b=scan.nextInt();\r\n\t\t\t\r\n\t\t\tint sum=0;\r\n\t\t\tint max=0;\r\n\t\t\tint maxindex=0;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\tint x[]=new int [b];\r\n\t\t\t\tfor(int j=0;j<b;j++){\r\n\t\t\t\t\tx[j]=scan.nextInt();\r\n\t\t\t\t\tsum=sum+x[j];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(max<x[j]){\r\n\t\t\t\t\t\tmax=x[j];\r\n\t\t\t\t\t\tmaxindex=j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\tSystem.out.print(\"Case #\"+(i+1)+\": \");\r\n\t\t\tint maxdua=0;\r\n\t\t\tint maxdin=0;\r\n\t\t\tfor(int j=0;j<b;j++){\r\n\t\t\t\tif((maxdua<x[j])&&(j!=maxindex)){\r\n\t\t\t\t\tmaxdua=x[j];\r\n\t\t\t\t\tmaxdin=j;\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tint hahaha=max-maxdua;\r\n\t\t\tfor(int j=0;j<hahaha;j++){\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.print(huruf[maxindex]+\" \");\r\n\t\t\t\tmax--;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int j=0;j<b;j++){\r\n\t\t\t\tif((j!=maxdin)&&(j!=maxindex)){\r\n\t\t\t\t\tfor(int k=0;k<x[j];k++){\r\n\t\t\t\t\t\tSystem.out.print(huruf[j]+\" \");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\tfor(int j=0;j<max;j++){\r\n\t\t\t\tSystem.out.print(huruf[maxindex]+huruf[maxdin]+\" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n}\r\n", "idx": "8721"}
{"func": "package googlejam8.p776;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.stream.IntStream;\n\npublic class Av2 {\n\n\tpublic static void main(String args[]) throws IOException{\n\t\t// 0. My Small Practice\n\t\t//FileReader reader = new FileReader(\"test_case_gcj2016Round1c/A-mysmall-practice.in\");\n\t\t//FileWriter writer = new FileWriter(\"test_case_gcj2016Round1c/A-mysmall-practice.out\");\n\n\t\t// 1. Small Practice\n\t\t// Judged response for input A-small: Correct!\n\t\t//FileReader reader = new FileReader(\"test_case_gcj2016Round1c/A-small-attempt0.in\");\n\t\t//FileWriter writer = new FileWriter(\"test_case_gcj2016Round1c/A-small-attempt0.out\");\n\n\t\t// 2. Large Practice\n\t\tFileReader reader = new FileReader(\"test_case_gcj2016Round1C/A-large.in\");\n\t\tFileWriter writer = new FileWriter(\"test_case_gcj2016Round1C/A-large.out\");\n\t\t\n\t\t\n\t\tBufferedReader bufferedReader = new BufferedReader(reader);\n\t\tString line = bufferedReader.readLine();\n        int noOfCases = Integer.parseInt(line);\n        System.out.println(noOfCases);\n\t\t        \n        for (int i = 1; i <= noOfCases; i++){\n\t\t\t// 1. read data\n        \tline = bufferedReader.readLine();\n        \tint n = Integer.parseInt(line);\n        \tline = bufferedReader.readLine();\n        \t\n        \tString[] nos = line.split(\" \");\n\t\t    int[] arr = Arrays.asList(nos).stream().mapToInt(Integer::parseInt).toArray();\n\t\t\tString res1 = \"\";\n\t\t\t\n\t\t\tint sum = IntStream.of(arr).sum();\n\t\t\t\n\t\t\twhile (sum > 0){\n\t\t\t\tint res3 = -1;\n\t\t\t\tint max1 = -1;\n\t\t\t\t\n\t\t\t\tfor (int i2 = 0; i2 < arr.length; i2++){\n\t\t\t\t\tif (arr[i2] > max1){\n\t\t\t\t\t\tmax1 = arr[i2];\n\t\t\t\t\t\tres3 = i2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint maxPos1 = res3;\n\t\t\t\tint res2 = -1;\n\t\t\t\tint max = -1;\n\t\t\t\t\n\t\t\t\tfor (int i1 = 0; i1 < arr.length; i1++){\n\t\t\t\t\tif (arr[i1] > max && arr[i1] <= arr[maxPos1] && i1 != maxPos1){\n\t\t\t\t\t\tmax = arr[i1];\n\t\t\t\t\t\tres2 = i1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint maxPos2 = res2;\n\t\t\t\tsum--;\n\t\t\t\tres1 += String.valueOf(Character.toChars(65 + maxPos1));\n\t\t\t\tarr[maxPos1]--;\n\t\t\t\tif (sum != 2){\n\t\t\t\t\t// take 2\n\t\t\t\t\tsum--;\n\t\t\t\t\tres1 += String.valueOf(Character.toChars(65 + maxPos2));//Character.toString ((char) 65 + maxPos[0]);\n\t\t\t\t\tarr[maxPos2]--;\n\t\t\t\t}\n\t\t\t\tres1 += \" \";\n\t\t\t}\n        \t\n\t\t    String res = res1;\n\t\t    String outputLine = \"Case #\" + i + \": \" + res + \"\\n\";\n\t\t    System.out.print(outputLine);\n\t\t    writer.write(outputLine);\n\t\t}\n\t\t   \n\t\treader.close();\n\t    writer.close();\t\n\t}\n\n}\n", "idx": "8776"}
{"func": "package googlejam8.p832;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class MainProgram {\r\n\r\n\tpublic static void main(String args[]) throws FileNotFoundException {\r\n\t\t// System.out.println(\"yokoso!\");\r\n\r\n\t\t// String inFile = \"input.in\";\r\n\t\t// String outFile = \"output.out\";\r\n\r\n\t\t// String inFile = \"B-small-practice.in\";\r\n\t\t// String outFile = \"B-small-practice.out\";\r\n\t\t// String inFile = \"A-large-practice.in\";\r\n\t\t// String outFile = \"A-large-practice.out\";\r\n\r\n//\t\tString inFile = \"A-small-attempt2.in\";\r\n//\t\tString outFile = \"A-small-attempt2.out\";\r\n\t\t String inFile = \"A-large.in\";\r\n\t\t String outFile = \"A-large.out\";\r\n\r\n\t\tFile file = new File(inFile);\r\n\t\tScanner scan = new Scanner(file);\r\n\t\tPrintWriter writer = new PrintWriter(outFile);\r\n\r\n\t\tint t = scan.nextInt();\r\n\r\n\t\tfor (int i = 0; i < t; i++) {\r\n\t\t\t// TODO\r\n\t\t\tint n = scan.nextInt();\r\n\t\t\tint[][] p = new int[2][n];\r\n\t\t\tint s = 0;\r\n\t\t\tfor (int u = 0; u < n; u++) {\r\n\t\t\t\tp[0][u] = u;\r\n\t\t\t\tp[1][u] = scan.nextInt();\r\n\t\t\t\ts += p[1][u];\r\n\t\t\t}\r\n\r\n\t\t\tfor (int u = 0; u < n - 1; u++) {\r\n\t\t\t\tint minIndex = u;\r\n\t\t\t\tfor (int v = u + 1; v < n; v++)\r\n\t\t\t\t\tif (p[1][v] < p[1][minIndex])\r\n\t\t\t\t\t\tminIndex = v;\r\n\t\t\t\tif (minIndex != u) {\r\n\t\t\t\t\tint tmp = p[1][u];\r\n\t\t\t\t\tp[1][u] = p[1][minIndex];\r\n\t\t\t\t\tp[1][minIndex] = tmp;\r\n\r\n\t\t\t\t\ttmp = p[0][u];\r\n\t\t\t\t\tp[0][u] = p[0][minIndex];\r\n\t\t\t\t\tp[0][minIndex] = tmp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tint u = p[1].length - 2;\r\n\t\t\tString str = \"\";\r\n\t\t\twhile (u >= 0) {\r\n\t\t\t\twhile (p[1][n - 1] > p[1][u]) {\r\n\t\t\t\t\tfor (int v = n - 1; v > u; v--) {\r\n\t\t\t\t\t\tchar ch = (char) ('A' + p[0][v]);\r\n\t\t\t\t\t\tstr = str + ch + \" \";\r\n\t\t\t\t\t\tp[1][v]--;\r\n\t\t\t\t\t\ts--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tu = u - 1;\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * while (p[1][0] > 0) { for (int v = n - 1; v >= 0; v--) { if (s ==\r\n\t\t\t * 2) { char ch1 = (char) ('A' + p[0][0]); char ch2 = (char) ('A' +\r\n\t\t\t * p[0][1]); str = str + ch1 + ch2;\r\n\t\t\t * \r\n\t\t\t * p[1][0]--; p[1][1]--; break; } char ch = (char) ('A' + p[0][v]);\r\n\t\t\t * str = str + ch + \" \"; p[1][v]--; s--; } }\r\n\t\t\t */\r\n\r\n\t\t\tif (n > 2) {\r\n\t\t\t\twhile (p[1][2] > 0) {\r\n\t\t\t\t\tfor (int v = n - 1; v >= 2; v--) {\r\n\t\t\t\t\t\tchar ch = (char) ('A' + p[0][v]);\r\n\t\t\t\t\t\tstr = str + ch + \" \";\r\n\t\t\t\t\t\tp[1][v]--;\r\n\t\t\t\t\t\ts--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twhile (p[1][0] > 0) {\r\n\t\t\t\tchar ch1 = (char) ('A' + p[0][0]);\r\n\t\t\t\tchar ch2 = (char) ('A' + p[0][1]);\r\n\t\t\t\tstr = str + ch1 + ch2 + \" \";\r\n\t\t\t\tp[1][0]--;\r\n\t\t\t\tp[1][1]--;\r\n\t\t\t}\r\n\r\n\t\t\t///////\r\n\t\t\twriter.printf(\"Case #%d: %s\", i + 1, str);\r\n\t\t\twriter.println();\r\n\r\n\t\t}\r\n\r\n\t\twriter.close();\r\n\t}\r\n\r\n}\r\n", "idx": "8832"}
{"func": "package googlejam8.p894;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class A3 {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tFileInputStream fin = new FileInputStream(\"src/a.in\");\r\n\t    PrintStream fout = new PrintStream(new FileOutputStream(\"src/a.out\"));\r\n\t    System.setIn(fin);\r\n\t    System.setOut(fout);\r\n\t    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t    int t = in.nextInt();\t\t\r\n\t    for(int i = 1; i <= t; ++i) {\r\n\t    \tint n = in.nextInt();\r\n\t    \tint[][] p = new int[26][2];\r\n\t    \tint sum = 0;\r\n\t    \tfor(int j = 0; j < n; j++) {\r\n\t    \t\tp[j][1] = in.nextInt();\r\n\t    \t\tp[j][0] = 65+j;\r\n\t    \t\tsum+=p[j][1];\r\n\t    \t}\r\n\t    \tfor(int j = 0; j < n; j++) {\r\n    \t\t\tint max = p[j][1];\r\n    \t\t\tint maxp = j;\r\n\t    \t\tfor(int k = j+1; k < n; k++) {\r\n\t    \t\t\tif(max < p[k][1]){\r\n\t    \t\t\t\tmax = p[k][1];\r\n\t    \t\t\t\tmaxp = k;\r\n\t    \t\t\t}\r\n\t    \t\t}\r\n\t    \t\tint bv= p[j][1];\r\n\t    \t\tint bp=p[j][0];\r\n\t    \t\tp[j][1] = max;\r\n\t    \t\tp[j][0] = p[maxp][0];\r\n\t    \t\tp[maxp][0] = bp;\r\n\t    \t\tp[maxp][1] = bv;\r\n\t    \t}\r\n\t    \tSystem.out.print(\"Case #\" + i + \":\");\r\n\t    \tint ave = sum/n;\r\n\t    \tint party = 0;\r\n\t    \twhile(sum != 0) {\r\n\t    \t\tparty = 0;\r\n\t    \t\tboolean change = false;\r\n\t    \t\tfor(int j = 0; j < n; j++ ) {\r\n\t    \t\t\tif(p[j][1] > ave) {\r\n\t    \t\t\t\tp[j][1]--;\r\n\t    \t\t\t\tsum --;\r\n\t    \t\t\t\tchar b = (char)p[j][0];\r\n\t    \t\t\t\tSystem.out.print(\" \"+b);\r\n\t    \t\t\t\tchange = true;\r\n\t    \t\t\t}\r\n\t    \t\t\tif(p[j][1]!=0){\r\n\t    \t\t\t\tparty++;\r\n\t    \t\t\t}\r\n\t    \t\t}\r\n\t    \t\tave = sum/party;\r\n\t    \t\tif(change==false) {\r\n\t    \t\t\tfor(int j = 0; j < n-2; j++) {\r\n\t    \t\t\t\twhile(p[j][1]!=0){\r\n\t    \t\t\t\t\tp[j][1]--;\r\n\t\t    \t\t\t\tchar b = (char)p[j][0];\r\n\t\t    \t\t\t\tSystem.out.print(\" \"+b);\r\n\t    \t\t\t\t}\r\n\t    \t\t\t}\r\n\t    \t\t\twhile(p[n-1][1]!=0){\r\n\t    \t\t\t\tp[n-1][1]--;\r\n\t    \t\t\t\tchar b1 = (char)p[n-1][0];\r\n\t    \t\t\t\tchar b2 = (char)p[n-2][0];\r\n\t    \t\t\t\tSystem.out.print(\" \"+b1+b2);\r\n\t    \t\t\t}\r\n\t    \t\t\tbreak;\r\n\t    \t\t}\r\n\t    \t}\r\n\t    \tSystem.out.println(\"\");\r\n\t    }\r\n\t}\r\n}\r\n", "idx": "8894"}
{"func": "package googlejam8.p245;\nimport java.io.*;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Problem1\r\n{\r\n\tprivate static PrintWriter writer;\r\n\tprivate static File file;\r\n\tprivate static Scanner scan;\r\n\tprivate static int testCases=0;\r\n\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\ttry\n\t\t{\n\t\t\tfile = new File(\"codejaminput.in\");\n\t\t\tscan = new Scanner(file);\n\t\t}\n\t\tcatch (FileNotFoundException e)\n\t\t{\n\t\t    System.out.println(\"File 1 not found\");\n\t\t}\n\t\ttry\n\t\t{\n\t\t\twriter = new PrintWriter(\"output.in\");\n\t\t}\n\t\tcatch (FileNotFoundException e)\n\t\t{\n\t\t    System.out.println(\"File 2 not found\");\n\t\t}\r\n\t\ttestCases=scan.nextInt();\r\n\t\tString[] alphabet = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\r\n\t\tfor (int j = 1; j<=testCases; j++)\r\n\t\t{\r\n\t\t\tString output=\"\";\r\n\t\t\tint N = scan.nextInt();\r\n\t\t\tint[] senators = new int[N];\r\n\t\t\tfor (int i =0; i < N; i++)\r\n\t\t\t{\r\n\t\t\t\tsenators[i]=scan.nextInt();\r\n\t\t\t}\r\n\t\t\tboolean done = true;\r\n\t\t\tfor (int i =0; i < N; i++)\r\n\t\t\t{\r\n\t\t\t\tif (senators[i]!=0)\r\n\t\t\t\t\tdone=false;\r\n\t\t\t}\r\n\t\t\twhile (!done)\r\n\t\t\t{\r\n\t\t\t\tint highest = 0;\r\n\t\t\t\tint highestIndex=-1;\r\n\t\t\t\tfor (int i =0; i < N; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (senators[i]>highest)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\thighest=senators[i];\r\n\t\t\t\t\t\thighestIndex=i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tboolean uneven = false;\r\n\t\t\t\tfor (int i =0; i < N; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (senators[i]<highest&&senators[i]!=0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tuneven = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (uneven)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\toutput+=alphabet[highestIndex]+\" \";\r\n\t\t\t\t\t\tsenators[highestIndex]-=1;\r\n\t\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tint count = 0;\r\n\t\t\t\t\tint indexOne = -1;\r\n\t\t\t\t\tint indexTwo = -1;\r\n\t\t\t\t\tfor (int i =0; i < N; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (senators[i]!=0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (indexOne==-1)\r\n\t\t\t\t\t\t\t\tindexOne=i;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tindexTwo=i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (count%2==0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\toutput+=alphabet[indexOne]+alphabet[indexTwo]+\" \";\r\n\t\t\t\t\t\tsenators[indexOne]-=1;\r\n\t\t\t\t\t\tsenators[indexTwo]-=1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\toutput+=alphabet[indexOne]+\" \";\r\n\t\t\t\t\t\tsenators[indexOne]-=1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdone = true;\r\n\t\t\t\tfor (int i =0; i < N; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (senators[i]!=0)\r\n\t\t\t\t\t\tdone=false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twriter.println(\"Case #\" + j + \": \" + output);\r\n\t\t}\r\n\t\twriter.close();\r\n\t\tscan.close();\r\n\t}\r\n\r\n}\r\n\r\n", "idx": "8245"}
{"func": "package googlejam8.p246;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\n\r\n/**\r\n * Created by Nejc on 08.05.2016.\r\n */\r\npublic class A1C {\r\n    public static void main(String[] args) throws Exception{\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int T = Integer.parseInt(br.readLine());\r\n        for(int t = 1; t <= T; t++){\r\n            int N = Integer.parseInt(br.readLine());\r\n            int p[] = new int[N];\r\n            String split[] = br.readLine().split(\" \");\r\n            for(int i = 0; i < N; i++){\r\n                p[i] = Integer.parseInt(split[i]);\r\n            }\r\n            int ex1 = 0;\r\n            for(int i = 1; i < N; i++){\r\n                if(p[i] > p[ex1]){\r\n                    ex1 = i;\r\n                }\r\n            }\r\n            int ex2 = 0;\r\n            int max = 0;\r\n            for(int i = 0; i < N; i++){\r\n                if(i==ex1)continue;\r\n                if(p[i] > max){\r\n                    ex2 = i;\r\n                    max = p[i];\r\n                }\r\n            }\r\n            System.out.print(\"Case #\"+t+\":\");\r\n            while(p[ex1] > p[ex2]){\r\n                System.out.print(\" \" + (char)('A'+ex1));\r\n                p[ex1]--;\r\n            }\r\n            for(int i = 0; i < N; i++){\r\n                if(i==ex2 || i==ex1)continue;\r\n                while(p[i]>0){\r\n                    System.out.print(\" \" + (char)('A'+i));\r\n                    if(p[i]>1) System.out.print((char)('A'+i));\r\n                    \r\n                    p[i]-=2;\r\n                }\r\n            }\r\n            while(p[ex1] > 0){\r\n                System.out.print(\" \" + (char)('A'+ex1) + (char)('A'+ex2));\r\n                p[ex1]--;\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n", "idx": "8246"}
{"func": "package googlejam8.p251;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\npublic class Q1 {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader bf = new BufferedReader(new FileReader(\"input.in\"));\r\n\t\tString input = null;\r\n\t\tString count = null;\r\n\t\tFileWriter fw = new FileWriter(\"output.out\");  \r\n\t\tcount = bf.readLine();\r\n\t\tfor (int i = 0; i < Integer.parseInt(count); i++) {\r\n\t\t\t\tArrayList<Integer> party = new ArrayList<Integer>();\r\n\t\t\t\tString a = bf.readLine();\r\n\t\t\t\tString b = bf.readLine();\r\n\t\t\t\tString []alls = b.split(\" \");\r\n\t\t\t\tInteger totals = 0;\r\n\t\t\t\tfor (int i1 = 0; i1 < alls.length;i1++) {\r\n\t\t\t\t\tparty.add(Integer.parseInt(alls[i1]));\r\n\t\t\t\t\ttotals += Integer.parseInt(alls[i1]);\r\n\t\t\t\t}\r\n\t\t\t\tfw.write(\"Case #\" + (i + 1) + \": \");\r\n\t\t\t\twhile (totals > 0) {\r\n\t\t\t\t\tint maxd = 0;\r\n\t\t\t\t\tint mark = -1;\r\n\t\t\t\t\tInteger max2d = 0;\r\n\t\t\t\t\tint mark2 = -1;\r\n\t\t\t\t\tfor (int i1 = 0; i1 < party.size();i1++) {\r\n\t\t\t\t\t\tif (party.get(i1) > maxd) {\r\n\t\t\t\t\t\t\tmaxd = party.get(i1);\r\n\t\t\t\t\t\t\tmark = i1;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ((party.get(i1) <= maxd) && (party.get(i1) > max2d)) {\r\n\t\t\t\t\t\t\tmax2d = party.get(i1);\r\n\t\t\t\t\t\t\tmark2 = i1;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttotals--;\r\n\t\t\t\t\tparty.set(mark, party.get(mark) - 1);\r\n\t\t\t\t\tchar c = 65;\r\n\t\t\t\t\tc += mark;\r\n\t\t\t\t\tString outputs = \"\" + c;\r\n\t\t\t\t\tString d = max2d.toString();\r\n\t\t\t\t\tDouble prob = Double.parseDouble(d);\r\n\t\t\t\t\tif (prob / totals > 0.5) {\r\n\t\t\t\t\t\ttotals--;\r\n\t\t\t\t\t\tparty.set(mark2, party.get(mark2) - 1);\r\n\t\t\t\t\t\tchar c2 = 65;\r\n\t\t\t\t\t\tc2 += mark2;\r\n\t\t\t\t\t\toutputs = outputs + c2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfw.write(outputs+\" \");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\tfw.write(\"\\n\");\r\n\t\t}\r\n\t\tbf.close();\r\n\t\tfw.close();\r\n\t}\r\n}\r\n", "idx": "8251"}
{"func": "package googlejam8.p256;\nimport java.io.*;\r\nimport java.util.Arrays;\r\n\r\npublic class TaskA {\r\n\r\n    public static String[] chars = new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\r\n\r\n    public static void main(String args[]){\r\n        File file = new File(\"C:\\\\tests\\\\inputA.txt\");\r\n\r\n        try(BufferedReader br = new BufferedReader(new FileReader(file))) {\r\n            PrintWriter writer = new PrintWriter(\"C:\\\\tests\\\\outputA.txt\", \"UTF-8\");\r\n            int count = Integer.parseInt(br.readLine());\r\n\r\n            for(int i = 0; i < count; i++) {\r\n                String out = \"Case #\" + (i+1) + \": \";\r\n\r\n                int n = Integer.parseInt(br.readLine());\r\n                int[] p = new int[n];\r\n                String[] str = br.readLine().split(\" \");\r\n                int c = 0;\r\n                for(int j = 0; j < n; j++){\r\n                    p[j] = Integer.parseInt(str[j]);\r\n                    c += p[j];\r\n                }\r\n\r\n                while(c > 0) {\r\n                    int max = p[0]; int maxi = 0;\r\n                    for(int j = 1; j < p.length; j++){\r\n                        if(p[j] > max){\r\n                            max = p[j];\r\n                            maxi = j;\r\n                        }\r\n                    }\r\n\r\n                    if(c == 3){\r\n                        out += chars[maxi] + \" \";\r\n                        c--;\r\n                        p[maxi]--;\r\n                        continue;\r\n                    }\r\n\r\n                    boolean find = false;\r\n                    for (int j = 0; j < p.length; j++) {\r\n                        if (j != maxi && p[j] == max) {\r\n                            out += chars[j] + chars[maxi] + \" \";\r\n                            p[j]--;\r\n                            p[maxi]--;\r\n                            c -= 2;\r\n\r\n                            find = true;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (!find) {\r\n                        if(p[maxi] >= 2) {\r\n                            out += chars[maxi] + chars[maxi] + \" \";\r\n                            c -= 2;\r\n                            p[maxi] -= 2;\r\n                        }\r\n                        else{\r\n                            out += chars[maxi] + \" \";\r\n                            c--;\r\n                            p[maxi]--;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                writer.println(out);\r\n            }\r\n\r\n            writer.close();\r\n        }\r\n        catch(Exception e){\r\n            System.out.println(\"Error:\" + e);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n", "idx": "8256"}
{"func": "package googlejam8.p261;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class CJ_2016_R1C_A {\r\n\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint nT = Integer.parseInt(in.readLine());\r\n\t\tfor (int t = 1; t <= nT; t++) {\r\n\t\t\tSystem.out.printf(\"Case #%d: \", t);\r\n\t\t\tint p = Integer.parseInt(in.readLine());\r\n\t\t\tint[] a = new int[p];\r\n\t\t\tStringTokenizer st = new StringTokenizer(in.readLine());\r\n\t\t\tfor (int i = 0; i < p; i++)\r\n\t\t\t\ta[i] = Integer.parseInt(st.nextToken());\r\n\t\t\tStringBuilder ans = new StringBuilder();\r\n\t\t\tint max = 0;\n\t\t\tint max1 = 0;\n\t\t\tfor (int n : a)\n\t\t\t\tmax1 = Math.max(max1, n);\r\n\t\t\twhile ((max = max1) != 0) {\r\n\t\t\t\tfor (int i = 0; i < p; i++)\r\n\t\t\t\t\tif (a[i] == max) {\r\n\t\t\t\t\t\ta[i]--;\r\n\t\t\t\t\t\tans.append((char)(i + 'A'));\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tans.reverse();\r\n\t\t\tfor (int i = 2; i < ans.length(); i += 3)\r\n\t\t\t\tans.insert(i, ' ');\r\n\t\t\tans.reverse();\r\n\t\t\tSystem.out.println(ans.toString());\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "8261"}
{"func": "package googlejam8.p265;\n\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\npublic class A_1C {\n\n\tpublic static void main(String args[]) throws IOException {\n\t\tFileReader fileReader = new FileReader(\n\t\t\t\t\"/home/parikh/Downloads/A-largeC.in\");\n\t\tBufferedReader obj = new BufferedReader(fileReader);\n\t\tPrintWriter write = new PrintWriter(new File(\"/home/parikh/output.txt\"));\n\t\tString l = obj.readLine();\n\t\tint t = Integer.parseInt(l);\n\t\tfor (int k = 1; k <= t; k++) {\n\n\t\t\tString inp = obj.readLine();\n\t\t\tint n = Integer.parseInt(inp);\n\t\t\tint arr[] = new int[n];\n\t\t\tinp = obj.readLine();\n\t\t\tString sp[] = inp.split(\" \");\n\t\t\tint sum = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tarr[i] = Integer.parseInt(sp[i]);\n\t\t\t\tsum += arr[i];\n\n\t\t\t}\n\t\t\tStringBuilder str = new StringBuilder(\"\");\n\t\t\twhile (true) {\n\n\t\t\t\tint m1 = -1;\n\t\t\t\tint m2 = -1;\n\t\t\t\tint max = -1;\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tif (arr[j] > max) {\n\t\t\t\t\t\tmax = arr[j];\n\t\t\t\t\t\tm1 = j;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr[m1]--;\n\t\t\t\tstr.append((char) (m1 + 'A'));\n\t\t\t\tif (sum % 2 == 1) {\n\t\t\t\t\tsum -= 1;\n\t\t\t\t\tstr.append(\" \");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmax = -1;\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tif (j != m1 && arr[j] > max) {\n\t\t\t\t\t\tmax = arr[j];\n\t\t\t\t\t\tm2 = j;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tarr[m2]--;\n\t\t\t\tstr.append((char) (m2 + 'A'));\n\t\t\t\tstr.append(\" \");\n\t\t\t\tsum -= 2;\n\t\t\t\tif (sum == 0)\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t\tSystem.out.println(str);\n\t\t\twrite.println(\"Case #\" + k + \": \" + str.toString());\n\n\t\t}\n\t\twrite.close();\n\t}\n\n}\n", "idx": "8265"}
{"func": "package googlejam8.p267;\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\n\npublic class A {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(System.in);\n\t\tint cases = in.nextInt();\n\n\t\tfor (int c = 0; c < cases; c++) {\n\t\t\tint no_of_parties = in.nextInt();\n\t\t\tint parties[] = new int[no_of_parties];\n\n\t\t\tint remaining = 0;\n\t\t\tfor (int i = 0; i < no_of_parties; i++) {\n\t\t\t\tparties[i] = in.nextInt();\n\t\t\t\tremaining += parties[i];\n\t\t\t}\t\n\n\t\t\tStringBuilder output = new StringBuilder(\"\");\n\t\t\toutput.append(\"Case #\" + (c+1) + \":\");\n\n\t\t\twhile (remaining > 0) {\n\t\t\t\toutput.append(\" \");\n\n\t\t\t\t//find MAX number\n\t\t\t\tint max = 0;\n\t\t\t\tfor (int i = 0; i < no_of_parties; i++) {\n\t\t\t\t\tif (parties[i] > max) max = parties[i];\n\t\t\t\t}\n\t\t\t\t//find number of maxes\n\t\t\t\tint no_of_max = 0;\n\t\t\t\tfor (int i = 0; i < no_of_parties; i++) {\n\t\t\t\t\tif (parties[i] == max) no_of_max++;\n\t\t\t\t}\n\n\t\t\t\t//if more than 3 or not 1, remove 2\n\t\t\t\tif (no_of_max > 3 || no_of_max == 2) {\n\t\t\t\t\tint count = 2;\n\t\t\t\t\tfor (int i = 0; i < no_of_parties; i++) {\n\t\t\t\t\t\tif (count == 0) break;\n\t\t\t\t\t\tif (parties[i] == max) {\n\t\t\t\t\t\t\tparties[i]--;\n\t\t\t\t\t\t\toutput.append((char)(('A') + i));\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremaining -= 2;\n\t\t\t\t}\t\n\t\t\t\telse { //just remove one please\n\t\t\t\t\tint count = 1;\n\t\t\t\t\tfor (int i = 0; i < no_of_parties; i++) {\n\t\t\t\t\t\tif (count == 0) break;\n\t\t\t\t\t\tif (parties[i] == max) {\n\t\t\t\t\t\t\tparties[i]--;\n\t\t\t\t\t\t\toutput.append((char)(('A') + i));\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremaining -= 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//TEST TEST TEST\n\t\t\t\tint maxpol = remaining/2 + 1;\n\t\t\t\tfor (int i = 0; i < no_of_parties; i++) {\n\t\t\t\t\tif (parties[i] >= maxpol) {\n\t\t\t\t\t\tSystem.out.println(\"WARNING\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//TEST TEST TEST PLS REMOVE LATER\n\n\n\n\t\t\t} //end remove while\n\n\t\t\tSystem.out.println(output);\n\t\t}\n\n\t}\n\n} //EM\n\n", "idx": "8267"}
{"func": "package googlejam8.p269;\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\tA r = new A();\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint testNum = sc.nextInt();\n\t\tfor(int t=1;t<=testNum;t++){\n\t\t\tr.n = sc.nextInt();\n\t\t\tr.a = new int[r.n];\n\t\t\tr.sum = 0;\n\t\t\tfor(int i=0;i<r.n;i++){\n\t\t\t\tr.a[i] = sc.nextInt();\n\t\t\t\tr.sum += r.a[i];\n\t\t\t}\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\n\t\t\twhile(true){\n\t\t\t\tif(r.sum==2){\n\t\t\t\t\tfor(int i=0;i<r.n;i++){\n\t\t\t\t\t\tif(r.a[i]!=0){\n\t\t\t\t\t\t\tsb.append((char)(i+65));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint max = -1;\n\t\t\t\tint id = -1;\n\t\t\t\tfor(int i=0;i<r.n;i++){\n\t\t\t\t\tif(r.a[i]>max){\n\t\t\t\t\t\tmax = r.a[i];\n\t\t\t\t\t\tid = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tr.a[id]--;\n\t\t\t\tr.sum--;\n\t\t\t\tsb.append((char)(id+65));\n\t\t\t\t\n\t\t\t\tif(r.sum==2){\n\t\t\t\t\tsb.append(' ');\n\t\t\t\t\tfor(int i=0;i<r.n;i++){\n\t\t\t\t\t\tif(r.a[i]!=0){\n\t\t\t\t\t\t\tsb.append((char)(i+65));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int i=0;i<r.n;i++){\n\t\t\t\t\tif((double)r.a[i]/r.sum >= 0.5){\n\t\t\t\t\t\tr.a[i]--;\n\t\t\t\t\t\tr.sum--;\n\t\t\t\t\t\tsb.append((char)(i+65));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tsb.append(' ');\n\t\t\t}\n\t\t\tString ans = sb.toString().trim();\n\t\t\tSystem.out.println(\"Case #\" + t + \": \" + ans);\n\t\t}\r\n\t}\r\n\r\n\tint n, sum;\r\n\tint[] a;\r\n\r\n\r\n\t\r\n}\r\n", "idx": "8269"}
{"func": "package googlejam8.p270;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n\n        int T = sc.nextInt();\n        for(int itt = 1; itt <= T; itt++){\n\n            int N = sc.nextInt();\n            int[] senators = new int[N];\n\n            int total = 0;\n\n            for(int i = 0; i < N; i++){\n                senators[i] = sc.nextInt();\n                total += senators[i];\n            }\n\n            //System.out.println(\"TOTAL: \" + total);\n\n            StringBuilder sb = new StringBuilder();\n            sb.append(\"Case #\" + itt + \":\");\n            while(total > 0){\n                //evacuation\n                String evac = \"\";\n\n                int max = 0;\n                int index = -1;\n                for(int i = 0; i<N; i++){\n                    if(senators[i] > max){\n                        max = senators[i];\n                        index = i;\n                    }\n                }\n\n                total--;\n                senators[index]--;\n                evac += (char)(index + (int)'A');\n\n                if(total > 0) {\n\n                    int majority = ((total - 1) / 2) + 1;\n\n                    max = 0;\n                    index = -1;\n                    int count = 0;\n                    for (int i = 0; i < N; i++) {\n                        if (senators[i] > max) {\n                            max = senators[i];\n                            index = i;\n                        }\n                        if (majority == senators[i]) count++;\n                    }\n\n                    if (count < 2) {\n\n                        total--;\n                        senators[index]--;\n                        evac += (char)(index + (int)'A');\n                    }\n                }\n\n                sb.append(\" \" + evac);\n\n            }\n\n            System.out.println(sb);\n\n        }\n\n    }\n}\n", "idx": "8270"}
{"func": "package googlejam8.p274;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\npublic class SeanteEvacuation {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader bf = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"output.txt\"));\n\t\tint t = Integer.parseInt(bf.readLine());\n\t\tfor (int tc = 1; tc <= t; tc++) {\n\t\t\tint n = Integer.parseInt(bf.readLine());\n\t\t\tint a[] = new int[n];\n\t\t\tStringTokenizer st = new StringTokenizer(bf.readLine());\n\t\t\tint sum = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ta[i] = Integer.parseInt(st.nextToken());\n\t\t\t\tsum += a[i];\n\t\t\t}\n\t\t\tString s = \"\";\n\t\t\twhile (true) {\n\t\t\t\t//out.println(\"hello\");\n\t\t\t\tif (sum <= 0)\n\t\t\t\t\tbreak;\n\t\t\t\tint max = -1;\n\t\t\t\tint maxi = -1;\n\t\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\t\tif (a[i] > max) {\n\t\t\t\t\t\tmax = a[i];\n\t\t\t\t\t\tmaxi = i;\n\t\t\t\t\t}\n\t\t\t\ts += \" \" + (char) (maxi + 'A');\n\t\t\t\ta[maxi]--;\n\t\t\t\tsum--;\n\t\t\t\tmax = -1;\n\t\t\t\tmaxi = -1;\n\t\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\t\tif (a[i] > max) {\n\t\t\t\t\t\tmax = a[i];\n\t\t\t\t\t\tmaxi = i;\n\t\t\t\t\t}\n\t\t\t\tif (max > sum / 2) {\n\t\t\t\t\ts += (char) (maxi + 'A');\n\t\t\t\t\ta[maxi]--;\n\t\t\t\t\tsum--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println(\"Case #\" + tc + \":\" + s);\n\t\t}\n\t\tout.flush();\n\t\tout.close();\n\t}\n}\n", "idx": "8274"}
{"func": "package googlejam8.p277;\n//package codejam.codejam2016.round1c;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class A {\n  static final Scanner scanner = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n  static final PrintStream out = System.out;\n\n  public static void main(String[] args) {\n    int T = scanner.nextInt();\n    for (int t = 1; t <= T; t++) {\n      out.print(\"Case #\" + t + \": \");\n      int N = scanner.nextInt();\n\tfinal int[] counts = new int[N];\n\t\n\tfor (int i = 0 ; i < N; i++) {\n\t  counts[i] = scanner.nextInt();\n\t}\n\t\n\tPriorityQueue<Integer> pq = new PriorityQueue<>(N, new Comparator<Integer>() {\n\t  @Override\n\t  public int compare(Integer i1, Integer i2) {\n\t    return counts[i2] - counts[i1];\n\t  }\n\t});\n\t\n\tfor (int i = 0; i < N; i++) {\n\t  pq.add(i);\n\t}\n\t\n\twhile (!pq.isEmpty()) {\n\t  int p1 = pq.poll();\n\t\n\t  if (counts[p1] == 1 && pq.size() == 2) {\n\t    out.print((char) ('A' + p1));\n\t    out.print(' ');\n\t    counts[p1]--;\n\t    continue;\n\t  }\n\t\n\t  if (counts[pq.peek()] == counts[p1]) {\n\t    int p2 = pq.poll();\n\t    out.print((char) ('A' + p1));\n\t    out.print((char) ('A' + p2));\n\t    out.print(' ');\n\t\n\t    counts[p1]--;\n\t    counts[p2]--;\n\t\n\t    if (counts[p1] > 0) {\n\t      pq.add(p1);\n\t    }\n\t\n\t    if (counts[p2] > 0) {\n\t      pq.add(p2);\n\t    }\n\t  } else {\n\t    out.print((char) ('A' + p1));\n\t    out.print(' ');\n\t\n\t    counts[p1]--;\n\t\n\t    if (counts[p1] > 0) {\n\t      pq.add(p1);\n\t    }\n\t  }\n\t}\n\t\n\tout.println();\n    }\n  }\n}\n", "idx": "8277"}
{"func": "package googlejam8.p280;\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\n\r\npublic class r14 {\r\n    public static void main(String[] args) {\r\n        try {\r\n            Scanner input=new Scanner(new File(args[0]));\r\n            PrintWriter output=new PrintWriter(args[1]) ;\r\n            int casenumber = input.nextInt();\r\n            input.nextLine();\r\n            for(int i=0;i<casenumber;i++){\r\n                 StringBuilder result = new StringBuilder();\r\n                int pc = input.nextInt();\r\n                int[] pi = new int[pc];\r\n                int total = 0;\r\n                for(int j=0;j<pc;j++){\r\n                    pi[j]=input.nextInt();\r\n                    total+=pi[j];\r\n                }\r\n                while (total>0){\r\n                    int[] max = new int[]{0,0};\r\n                    int[] maxindex = new int[2];\r\n                    for(int j=0;j<pc;j++){\r\n                       if(pi[j]>max[0]){\r\n                           max[1]=max[0];\r\n                           max[0]=pi[j];\r\n                           maxindex[1]=maxindex[0];\r\n                           maxindex[0]=j;\r\n                       } else if (pi[j]>max[1]){\r\n                           max[1]=pi[j];\r\n                           maxindex[1]=j;\r\n                       }\r\n                    }\r\n                    result.append(\" \");\r\n                    result.append((char)('A'+maxindex[0]));\r\n                    total--;\r\n                    pi[maxindex[0]]--;\r\n                    if(max[1]>0 && max[1]*2>total){\r\n                        result.append((char)('A'+maxindex[1]));\r\n                        total--;\r\n                        pi[maxindex[1]]--;\r\n                    }\r\n                }\r\n                output.println(\"Case #\" + (i + 1) + \":\"+result.toString());\r\n            }\r\n            output.flush();\r\n        } catch (Exception e){\r\n             e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "8280"}
{"func": "package googlejam8.p285;\nimport static java.lang.Math.*;\r\nimport static java.util.Arrays.*;\r\nimport static java.util.Collections.*;\r\nimport java.io.*;\r\nimport java.text.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\npublic class ProblemA {\r\n\r\n    private static final String PROBLEM_CODE = \"A\";\r\n    private static final String INPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-large.in\", PROBLEM_CODE);\r\n//    private static final String INPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-small-attempt0.in\", PROBLEM_CODE);\r\n    private static final String OUTPUT_PATH = String.format(\"C:\\\\Users\\\\Yasu\\\\Downloads\\\\%s-out%s.txt\", PROBLEM_CODE, System.currentTimeMillis());\r\n\r\n    public static void main(final String[] args) {\r\n        ProblemA app = new ProblemA();\r\n\r\n        try {\r\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(ProblemA.INPUT_PATH))))) {\n\t\t            List<String> answerList = new ArrayList<String>();\n\t\t            int testCaseCount = Integer.parseInt(br.readLine());\n\t\t            testCaseCount = 50;\n\t\t            for (int testCaseIndex = 0; testCaseIndex < testCaseCount; testCaseIndex++) {\n\t\t//                String element = br.readLine();\n\t\t                int n = Integer.parseInt(br.readLine()); \n\t\t                int[] elem = new int[n];\n\t\t                String[] line = br.readLine().split(\" \");\n\t\t                for(int i = 0 ; i < n; i++) {\n\t\t                    elem[i] = Integer.parseInt(line[i]);\n\t\t                }\n\t\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\t\twhile(true) {\n\t\t\t\t\t\t    \n\t\t\t\t\t\t    int max = 1;\n\t\t\t\t\t\t    List<Integer> maxIndexes = new ArrayList<>();\n\t\t\t\t\t\t    int lastCount = 0;\n\t\t\t\t\t\t    for(int i = 0 ; i < n; i++) {\n\t\t\t\t\t\t        lastCount+=elem[i];\n\t\t\t\t\t\t        if(max < elem[i]) {\n\t\t\t\t\t\t            max = elem[i];\n\t\t\t\t\t\t            maxIndexes = new ArrayList<>();\n\t\t\t\t\t\t            maxIndexes.add(i);\n\t\t\t\t\t\t        } else if(max == elem[i]) {\n\t\t\t\t\t\t            maxIndexes.add(i);\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    if(maxIndexes.size() == 0) break;\n\t\t\t\t\t\t    \n\t\t\t\t\t\t    sb.append((char) (maxIndexes.get(0) + 'A'));\n\t\t\t\t\t\t    elem[maxIndexes.get(0)]--;\n\t\t\t\t\t\t    if(maxIndexes.size() >= 2 && (lastCount > 3 || lastCount == 2)) {\n\t\t\t\t\t\t        sb.append((char) (maxIndexes.get(1) + 'A'));\n\t\t\t\t\t\t        elem[maxIndexes.get(1)]--;\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    \n\t\t\t\t\t\t    sb.append(\" \");\n\t\t\t\t\t\t}\n\t\t                String answer = sb.substring(0, sb.length() - 1); \n\t\t//                String answer = solveProblem(element); \n\t\t                answerList.add(answer);\n\t\t                \n\t\t                System.out.printf(\"%s: %s : %s \\r\\n\", testCaseIndex + 1, elem, answer);\n\t\t            }\n\t\t\t\t\tfinal List<String> solve = answerList;\n\t\t            final String FORMAT = \"Case #{0}: {1}\";\n\t\t\t\t\ttry (BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(new File (ProblemA.OUTPUT_PATH))))){\n\t\t\t\t\t    for (int i = 0; i < solve.size(); i++) {\n\t\t\t\t\t        Object[] ans = new Object[2];\n\t\t\t\t\t        ans[0] = String.valueOf(i + 1);\n\t\t\t\t\t        ans[1] = solve.get(i);\n\t\t\t\t\t        String write = MessageFormat.format(FORMAT, ans);\n\t\t\t\t\t        bufferedWriter.write(write);\n\t\t\t\t\t        bufferedWriter.newLine();\n\t\t\t\t\t    }\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t    e.printStackTrace();\n\t\t\t\t\t}\n\t\t        } catch(Exception e) {\n\t\t            e.printStackTrace();\n\t\t        }\r\n        } catch(Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\n", "idx": "8285"}
{"func": "package googlejam8.p292;\nimport java.util.*;\r\n\r\npublic class A {\r\npublic static void main(String [] args) {\r\n\tScanner scanner = new Scanner(System.in);\r\n\tint nCase = scanner.nextInt();\r\n\t\r\n\tfor (int nc = 1; nc <= nCase; nc++) {\r\n\t\tint N = scanner.nextInt();\r\n\t\tint total = 0;\r\n\t\tint[] P = new int[N];\r\n\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\ttotal += P[i] = scanner.nextInt();\r\n\t\t}\r\n\t\t\r\n\t\tStringBuilder output = new StringBuilder(\"Case #\" + nc + \":\");\r\n\t\t\r\n\t\twhile (total > 0) {\r\n\t\t\toutput.append(' ');\r\n\t\t\tif (total == 2) {\r\n\t\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\t\tif (P[i] > 0)\r\n\t\t\t\t\t\toutput.append((char) ('A' + i));\r\n\t\t\t\t}\r\n\t\t\t\ttotal -= 2;\r\n\t\t\t} else {\r\n\t\t\t\tint first = -1;\r\n\t\t\t\tint tempFirst = 0;\r\n\t\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\t\tif (P[i] > tempFirst) {\r\n\t\t\t\t\t\tfirst = i;\r\n\t\t\t\t\t\ttempFirst = P[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tP[first]--;\r\n\t\t\t\ttotal--;\r\n\t\t\t\toutput.append((char) ('A' + first));\r\n\t\t\t\tint maxAllowed = total/2;\r\n\t\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\t\tif (P[i] > maxAllowed) {\r\n\t\t\t\t\t\tP[i]--;\r\n\t\t\t\t\t\ttotal--;\r\n\t\t\t\t\t\toutput.append((char) ('A' + i));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\toutput.append('\\n');\t\t\r\n\t\t\r\n\t\tSystem.out.println(output.toString());\r\n\t}\r\n}\r\n}\r\n\r\n", "idx": "8292"}
{"func": "package googlejam8.p295;\nimport java.util.Scanner;\r\n\r\npublic class ProblemA \r\n{\r\n\tpublic static void main(String[] args) \r\n\t{\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tint cases = input.nextInt();\r\n\t\tfor(int c = 1; c <= cases; c++)\r\n\t\t{\r\n\t\t\tString ans = \"\";\r\n\t\t\tint parties = input.nextInt();\r\n\t\t\tint sens[] = new int[parties];\r\n\t\t\tint total = 0;\r\n\t\t\tfor(int p = 0; p < parties; p++)\r\n\t\t\t{\r\n\t\t\t\tsens[p] = input.nextInt();\r\n\t\t\t\ttotal += sens[p];\r\n\t\t\t}\r\n\t\t\twhile(total > 3)\r\n\t\t\t{\r\n\t\t\t\tint largest = 0;\r\n\t\t\t\tint second = 0;\r\n\t\t\t\tfor(int i = 0; i < sens.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(sens[i] > sens[largest])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlargest = i;\r\n\t\t\t\t\t\tsecond = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(sens[i] == sens[largest] && i != 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecond = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tans += \" \" + (char)(65 + largest);\r\n\t\t\t\tif(second == -1)\r\n\t\t\t\t{\r\n\t\t\t\t\tans += (char)(65 + largest);\r\n\t\t\t\t\tsens[largest] -= 2;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tans += (char)(65 + second);\r\n\t\t\t\t\tsens[second] -= 1;\r\n\t\t\t\t\tsens[largest] -= 1;\r\n\t\t\t\t}\r\n\t\t\t\ttotal -= 2;\r\n\t\t\t}\r\n\t\t\tif(total == 3)\r\n\t\t\t{\r\n\t\t\t\tint place = -1;\r\n\t\t\t\tfor(int i = 0; i < sens.length; i++)\r\n\t\t\t\t\tif(sens[i] == 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tplace = i;\r\n\t\t\t\t\t\tsens[i] = 0;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\tans += \" \" + (char)(65 + place);\r\n\t\t\t\tint left1 = -1;\r\n\t\t\t\tint left2 = -1;\r\n\t\t\t\tfor(int i = 0; i < sens.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(sens[i] == 1 && left1 == -1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tleft1 = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (sens[i] == 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tleft2 = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tans += \" \" + (char)(65 + left1);\r\n\t\t\t\tif(left2 != -1)\r\n\t\t\t\t\tans += (char)(65 + left2);\r\n\t\t\t}\r\n\t\t\tif(total <= 2)\r\n\t\t\t{\r\n\t\t\t\tint left1 = -1;\r\n\t\t\t\tint left2 = -1;\r\n\t\t\t\tfor(int i = 0; i < sens.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(sens[i] == 1 && left1 == -1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tleft1 = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (sens[i] == 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tleft2 = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tans += \" \" + (char)(65 + left1);\r\n\t\t\t\tif(left2 != -1)\r\n\t\t\t\t\tans += (char)(65 + left2);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + c + \":\" + ans);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "8295"}
{"func": "package googlejam8.p296;\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class R1C_1 {\r\n\t\r\n\tpublic static void main(String args[]){\r\n\t\ttry {\r\n\t\t\t//System.setIn(new FileInputStream(\"C:\\\\Users\\\\ericc\\\\Desktop\\\\Question\\\\R1C\\\\Q1\\\\Q1.in\"));\r\n\t\t\t//System.setIn(new FileInputStream(\"C:\\\\Users\\\\ericc\\\\Desktop\\\\Question\\\\R1C\\\\Q1\\\\Q1-small.in\"));\r\n\t\t\tSystem.setIn(new FileInputStream(\"C:\\\\Users\\\\ericc\\\\Desktop\\\\Question\\\\R1C\\\\Q1\\\\Q1-large.in\"));\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tsc.nextLine();\r\n\t\tint caseCount = 0;\r\n\t\twhile(sc.hasNext()){\r\n\t\t\tint numParty = Integer.parseInt(sc.nextLine());\r\n\t\t\tint se[] = new int[26];\r\n\t\t\tint total = 0;\r\n\t\t\tfor(int i = 0 ; i < numParty ; i++){\r\n\t\t\t\tse[i] = sc.nextInt();\r\n\t\t\t\ttotal += se[i];\r\n\t\t\t}\r\n\t\t\tif(sc.hasNext())\r\n\t\t\t\tsc.nextLine();\r\n\t\t\t\r\n\t\t\tString result = \"\";\r\n\t\t\t\r\n\t\t\twhile(total != 0){\r\n\t\t\t\tif(total != 3){\r\n\t\t\t\t\tfor(int i = 0 ; i < 2 ; i++){\r\n\t\t\t\t\t\tint maxIdx = 0;\r\n\t\t\t\t\t\tfor(int j = 0 ; j < numParty ; j++){\r\n\t\t\t\t\t\t\tif(se[j] > se[maxIdx]){\r\n\t\t\t\t\t\t\t\tmaxIdx = j;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttotal--;\r\n\t\t\t\t\t\tse[maxIdx]--;\r\n\t\t\t\t\t\tresult += (char)('A' + maxIdx);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tint maxIdx = 0;\r\n\t\t\t\t\tfor(int j = 0 ; j < numParty ; j++){\r\n\t\t\t\t\t\tif(se[j] > se[maxIdx]){\r\n\t\t\t\t\t\t\tmaxIdx = j;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttotal--;\r\n\t\t\t\t\tse[maxIdx]--;\r\n\t\t\t\t\tresult += (char)('A' + maxIdx);\r\n\t\t\t\t}\r\n\t\t\t\tresult += \" \";\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcaseCount++;\r\n\t\t\tSystem.out.println(\"Case #\" + caseCount + \": \" + result);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n", "idx": "8296"}
{"func": "package googlejam8.p305;\n\n\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * Created by lvitor on 30/04/16.\n */\npublic class Main {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner in = new Scanner(new File(\"src/prob1/in2.in\"));\n        PrintWriter out = new PrintWriter(\"src/prob1/out2.txt\");\n        Main m = new Main();\n        int T = in.nextInt();\n        in.nextLine();\n        for(int i = 1; i <= T; i++){\n            int nParties = in.nextInt();\n            int total = 0;\n            int[] parties = new int[nParties];\n            for(int j=0; j<nParties; j++){parties[j] = in.nextInt();total += parties[j];};\n            String sol = m.solve(total, parties);\n            System.out.println(\"Case #\" + i + \": \" + sol);\n            out.write(\"Case #\" + i + \": \" + sol);\n            out.write(\"\\n\");\n        }\n//        while(in.hasNext()){\n////            System.out.println(in.next());\n//            out.write(in.nextLine()); // in.next() retrieves next token\n//        }\n        out.close();\n    }\n\n    public String solve(int tot, int[] p){\n        if(tot == 0)return \"\";\n//        printParties(p);\n        String out = \"\";\n        if(tot % 2 == 1){\n            int max = 0;\n\t\t\tfor(int i=0; i<p.length; i++){\n\t\t\t    if(p[i] > p[max])max = i;\n\t\t\t}\n\t\t\tint m = max;\n            p[m]--;\n            tot--;\n            out += Character.toChars('A'+m)[0] + \" \";\n        }\n        while(tot > 0){\n            int max = 0;\n\t\t\tfor(int i=0; i<p.length; i++){\n\t\t\t    if(p[i] > p[max])max = i;\n\t\t\t}\n\t\t\tint m = max;\n            p[m]--;\n            tot--;\n            out += Character.toChars('A'+m)[0];\n\t\t\tint max = 0;\n\t\t\tfor(int i=0; i<p.length; i++){\n\t\t\t    if(p[i] > p[max])max = i;\n\t\t\t}\n            m = max;\n            p[m]--;\n            tot--;\n            out += Character.toChars('A'+m)[0] + \" \";\n        }\n        return out;\n    }\n\n\n}\n", "idx": "8305"}
{"func": "package googlejam8.p319;\n\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SenateEvacuation {\n\n\tpublic static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n\t\tPrintWriter writer = new PrintWriter(\"/Users/alexpeptan/Desktop/Eclipse Workspace/Google Code Jam 2016/src/round1C_Problem1/1C1.out\", \"UTF-8\");\n\t\tScanner scanner = new Scanner(new File(\"/Users/alexpeptan/Desktop/Eclipse Workspace/Google Code Jam 2016/src/round1C_Problem1/1C1.in\"));\n\t\t\n\t\tint t = scanner.nextInt();\n\t\t\n\t\tint max = 0;\n\t\t\n\t\tfor(int k=0; k<t; k++){\n\t\t\tint n = scanner.nextInt();\n\t\t\tchar[] names = new char[n];\n\t\t\tfor(int i=0; i<n; i++){\n\t\t\t\tnames[i] = (char)('A' + i);\n\t\t\t}\n\t\t\t\n\t\t\tint[] cnt = new int[n];\n\t\t\t\n\t\t\tfor(int i=0; i<n; i++){\n\t\t\t\tcnt[i] = scanner.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\t// sort\n\t\t\tfor(int i=0; i<n-1; i++){\n\t\t\t\tfor(int j=i+1; j<n; j++){\n\t\t\t\t\tif(cnt[i] > cnt[j]){\n\t\t\t\t\t\tint aux = cnt[i];\n\t\t\t\t\t\tcnt[i] = cnt[j];\n\t\t\t\t\t\tcnt[j] = aux;\n\t\t\t\t\t\taux = names[i];\n\t\t\t\t\t\tnames[i] = names[j];\n\t\t\t\t\t\tnames[j] = (char)aux;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\twriter.print(\"Case #\" + (k+1) + \":\");\n\t\t\t\n\t\t\tint delta = cnt[n-1] - cnt[n-2];\n\t\t\tfor(int i=0; i<delta; i++){\n\t\t\t\twriter.print(\" \" + names[n-1]);\n\t\t\t}\n\t\t\t\n\t\t\tfor(int party = 0; party <= n-3; party++){\n\t\t\t\tfor(int j=0; j<cnt[party]; j++){\n\t\t\t\t\twriter.print(\" \" + names[party]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i=0; i<cnt[n-2]; i++){\n\t\t\t\twriter.print(\" \" + names[n-2] + names[n-1]);\n\t\t\t}\n\t\t\t\n\t\t\twriter.println();\n\t\t}\n\t\twriter.close();\n\t}\n\n}\n", "idx": "8319"}
{"func": "package googlejam8.p326;\nimport java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\t\n    public static void main(String[] args) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */\n    Scanner scnr=new Scanner(System.in);\n   \n    int t=scnr.nextInt();\n    String ans[]=new String[t];\n    for(int i=0;i<t;i++){\n    \tStringBuilder evac=new StringBuilder();\n    int n=scnr.nextInt();\n    int[] parties=new int[n];\n    int pcount=0;\n    for(int j=0;j<n;j++){\n    \tparties[j]=scnr.nextInt();\n    \tpcount+=parties[j];\n    }\n    while(pcount>0){\n    \tint max=0,smax=0,tmax=0;\n    \tchar c='A',d='A';\n    \tfor(int j=0;j<n;j++){\n    \t\tif(parties[j]>=parties[max]){\n    \t\t\ttmax=smax;\n    \t\t\tsmax=max;\n    \t\t\tmax=j;\n    \t\t}\n    \t}\n    \t\tif(parties[max]==parties[smax]&&parties[max]==parties[tmax]&&smax!=tmax){\n    \t\t\tif(parties[max]>0){parties[max]-=1;\n    \t\t\tc+=max;\n    \t\t\tevac.append(c);\n    \t\t\tpcount-=1;\n    \t\t\t}\n    \t\t}\n    \t\telse if(parties[max]-parties[smax]>1){\n    \t\t\tif(parties[max]>0){parties[max]-=1;\n    \t\t\tc+=max;\n    \t\t\tevac.append(c);\n    \t\t\tpcount-=1;\n    \t\t\t}\n    \t\t\tif(parties[max]>0){parties[max]-=1;\n    \t\t\tevac.append(c);\n    \t\t\tpcount-=1;\n    \t\t\t}\n    \t\t}\n    \t\telse{\n    \t\tif(parties[max]>0){\tparties[max]-=1;\n    \t\t\tc+=max;\n    \t\t\tevac.append(c);\n    \t\t\tpcount-=1;}\n    \t\tif(parties[smax]>0){parties[smax]-=1;\n    \t\t\td+=smax;\n    \t\t\tevac.append(d);\n    \t\t\tpcount-=1;}\n    \t\t}\n    \t\tevac.append(\" \");\n    \t}\n    ans[i]=evac.toString();\n    }\n    \n    \t\n   \n    for(int i=0;i<t;i++){\n    \tSystem.out.println(\"Case #\"+(i+1)+\": \"+ans[i]);\n    }\n    } \n    }\n", "idx": "8326"}
{"func": "package googlejam8.p328;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args){\r\n\t\tScanner scanner = new Scanner(new BufferedReader(new InputStreamReader(\r\n\t\t\t\tSystem.in)));\r\n\t\tint testcases = scanner.nextInt();\r\n\t\tfor (int testcase = 1; testcase <= testcases; testcase++) {\r\n\t\t\t//String input = scanner.next();\r\n\t\t\tint totalSize = scanner.nextInt();\r\n\t\t\tint[] array = new int[totalSize];\r\n\t\t\tfor(int i = 0; i < totalSize; i++){\r\n\t\t\t\tarray[i] = scanner.nextInt();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tboolean done = false;\r\n\t\t\tString answer = \"\";\r\n\t\t\t\r\n\t\t\twhile(!done){\r\n\t\t\t\tint maxPeople = 0;\r\n\t\t\t\tint firstIndex = -1;\r\n\t\t\t\tint secondIndex = -1;\r\n\t\t\t\tint countones = 0;\r\n\t\t\t\t\r\n\t\t\t\tfor(int i = 0; i < totalSize; i++){\r\n\t\t\t\t\tif(array[i] > maxPeople){\r\n\t\t\t\t\t\tfirstIndex = i;\r\n\t\t\t\t\t\tsecondIndex = -1;\r\n\t\t\t\t\t\tmaxPeople = array[i];\r\n\t\t\t\t\t}else if(array[i] == maxPeople){\r\n\t\t\t\t\t\tsecondIndex = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(array[i] == 1){\r\n\t\t\t\t\t\tcountones++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(maxPeople == 0){\r\n\t\t\t\t\tdone = true;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t/*if(secondIndex == -1){\r\n\t\t\t\t\t\tif(array[firstIndex] == 1){\r\n\t\t\t\t\t\t\tanswer = answer + (char)(65 + firstIndex) + \" \";\r\n\t\t\t\t\t\t\tarray[firstIndex] = 0;\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\tanswer = answer + (char)(65 + firstIndex) + (char)(65 + firstIndex) + \" \";\r\n\t\t\t\t\t\t\tarray[firstIndex] -= 2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tanswer = answer + (char)(65 + firstIndex) + (char)(65 + secondIndex) + \" \";\r\n\t\t\t\t\t\tarray[firstIndex] -= 1;\r\n\t\t\t\t\t\tarray[secondIndex] -= 1;\r\n\t\t\t\t\t}*/\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(maxPeople <= 2 && countones % 2 == 1){\r\n\t\t\t\t\t\tanswer = answer + (char)(65 + firstIndex) + \" \";\r\n\t\t\t\t\t\tarray[firstIndex] -= 1;\r\n\t\t\t\t\t}else if(secondIndex == -1){\r\n\t\t\t\t\t\tanswer = answer + (char)(65 + firstIndex) + (char)(65 + firstIndex) + \" \";\r\n\t\t\t\t\t\tarray[firstIndex] -= 2;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tanswer = answer + (char)(65 + firstIndex) + (char)(65 + secondIndex) + \" \";\r\n\t\t\t\t\t\tarray[firstIndex] -= 1;\r\n\t\t\t\t\t\tarray[secondIndex] -= 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tanswer = answer.substring(0, answer.length() - 1);\r\n\t\t\tSystem.out.println(\"Case #\" + testcase + \": \" + answer);\r\n\t\t}\r\n\t\tscanner.close();\r\n\t}\r\n}\r\n", "idx": "8328"}
{"func": "package googlejam8.p335;\nimport java.io.*;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by dinus on 4/30/2016.\r\n */\r\npublic class Prob2A {\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        if(args.length == 1 && args[0].equals(\"test\"))\r\n        {\r\n            String path = \"C:\\\\codejam\\\\\";\r\n//            String filename = \"input.txt\";\r\n            String filename = \"A-small-attempt0.in\";\r\n            System.setIn(new FileInputStream(new File(path + filename)));\r\n\r\n            String outputName= filename.split(\"\\\\.\")[0] + \".out\";\r\n            System.setOut(new PrintStream(new File(path + outputName)));\r\n        }\r\n\r\n\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\r\n        int tests = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\r\n        for (int test = 1; test <= tests; ++test) {\r\n            StringBuilder result = new StringBuilder();\r\n            int n = in.nextInt();\r\n            int[] arr = new int[n];\r\n            for(int i=0; i<n; i++)\r\n                arr[i] = in.nextInt();\r\n\r\n            int max1 = 0;\r\n            int pos1 = 0;\r\n            int max2 = 0;\r\n            int pos2 = 0;\r\n            for(int i=0; i<n; i++)\r\n            {\r\n                if(arr[i] > max1)\r\n                {\r\n                    max2 = max1;\r\n                    pos2 = pos1;\r\n                    max1 = arr[i];\r\n                    pos1 = i;\r\n                } else if(arr[i] > max2)\r\n                {\r\n                    max2 = arr[i];\r\n                    pos2 = i;\r\n                }\r\n            }\r\n\r\n//            System.err.println(\"max1: \" + max1);\r\n//            System.err.println(\"max2: \" + max2);\r\n            while(max1 > max2)\r\n            {\r\n                result.append((char)('A' + pos1) + \" \");\r\n                max1--;\r\n            }\r\n            while(max2 > max1)\r\n            {\r\n                result.append((char)('A' + pos2) + \" \");\r\n                max2--;\r\n            }\r\n            for(int i=0; i<n; i++)\r\n            {\r\n                if(i == pos1 || i == pos2)\r\n                    continue;\r\n                while(arr[i] > 0)\r\n                {\r\n                    result.append((char)('A' + i) + \" \");\r\n                    arr[i]--;\r\n                }\r\n            }\r\n            String finalString = \"\" + (char)('A'+pos1) + (char)('A'+pos2) + \" \";\r\n            for(int i=0; i<max1; i++)\r\n                result.append(finalString);\r\n\r\n\r\n\r\n            System.out.println(\"Case #\" + test + \": \" + result);\r\n        }\r\n\r\n\r\n    }\r\n}\r\n", "idx": "8335"}
{"func": "package googlejam8.p341;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class ProblemMain {\r\n    \r\n    public static void main(String[] args) {\r\n        try {\r\n            System.setIn(new FileInputStream(\"A-large.in\"));\r\n//           System.setIn(new FileInputStream(\"A-small-attempt0.in\"));\r\n  //          System.setIn(new FileInputStream(\"sample.txt\"));\r\n        } catch (FileNotFoundException e) {\r\n            // TODO Auto-generated catch block\r\n        //    e.printStackTrace();\r\n        }\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n        int test_cases = in.nextInt(); // Scanner has functions to read ints,\r\n                                       // longs, strings, chars, etc.\r\n        \r\n        // test code\r\n//        for( int i_test_code = 1; i_test_code <= 200; i_test_code++ )\r\n//        {\r\n//            solution(i_test_code, i_test_code);\r\n//        }\r\n//        \r\n//      \r\n        in.nextLine();\r\n        // actual code\r\n        for (int i_test = 1; i_test <= test_cases; ++i_test) {\r\n            \r\n            int party_members_count[] = new int[26];\r\n            int total_members = 0;\r\n        \r\n            int num_parties = in.nextInt();\r\n            in.nextLine();\r\n            for( int i_party = 0; i_party < num_parties; i_party++ )\r\n            {\r\n                int num_members = in.nextInt();\r\n                total_members += num_members;\r\n                party_members_count[i_party] = num_members;\r\n            }\r\n            \r\n            // algo, find two parties with max count, if no such party,\r\n            // get max and second max\r\n            StringBuilder buffer = new StringBuilder();\r\n            while(total_members > 0 )\r\n            {\r\n                int party_max_members_index = -1;\r\n                int party_second_max_members_index = -1;\r\n                for( int i_party = 0; i_party < num_parties; i_party++ )\r\n                {\r\n                    if( party_max_members_index == -1 )\r\n                    {\r\n                        party_max_members_index = i_party;\r\n                    }\r\n                    else\r\n                    {\r\n                        if( party_members_count[i_party] >= party_members_count[party_max_members_index] )\r\n                        {\r\n                            party_second_max_members_index = party_max_members_index;\r\n                            party_max_members_index = i_party;   \r\n                        }\r\n                        else\r\n                        {\r\n                            if( party_second_max_members_index == -1 \r\n                                    || party_members_count[i_party] >= party_members_count[party_second_max_members_index] )\r\n                            {\r\n                                party_second_max_members_index = i_party;\r\n                            }\r\n                        }\r\n                    }                    \r\n                }\r\n                if( party_members_count[party_max_members_index]/(float)total_members > 0.5 )\r\n                {\r\n                    System.out.println(\"Error Case #\" + i_test + \": \" + (buffer) );\r\n                }\r\n\r\n                // always keep max and second max close as possible\r\n                \r\n                if(total_members >= 4)\r\n                {\r\n                    // remove max and second max\r\n                    if((party_members_count[party_max_members_index] - party_members_count[party_second_max_members_index] ) > 2 )\r\n                    {\r\n                        // remove two from max\r\n                        buffer.append((char)('A' + party_max_members_index));\r\n                        buffer.append((char)('A' + party_max_members_index));\r\n                        buffer.append(' ');\r\n                        party_members_count[party_max_members_index]-= 2;\r\n                    }\r\n                    else\r\n                    {\r\n                        // remove one from max, one from second max\r\n                        buffer.append((char)('A' + party_max_members_index));\r\n                        buffer.append((char)('A' + party_second_max_members_index));\r\n                        buffer.append(' ');\r\n                        party_members_count[party_max_members_index]-= 1;\r\n                        party_members_count[party_second_max_members_index]-= 1;\r\n                    }\r\n                    total_members-=2;\r\n                }\r\n                else if( total_members == 3 )\r\n                {\r\n                    // can only remove single max\r\n                    buffer.append((char)('A' + party_max_members_index));\r\n                    buffer.append(' ');\r\n                    party_members_count[party_max_members_index]-= 2;\r\n                    total_members-=1;\r\n                }\r\n                else\r\n                {\r\n                    // remove last 2\r\n                    buffer.append((char)('A' + party_max_members_index));\r\n                    buffer.append((char)('A' + party_second_max_members_index));\r\n                    buffer.append(' ');\r\n                    party_members_count[party_max_members_index]-= 1;\r\n                    party_members_count[party_second_max_members_index]-= 1;\r\n                    total_members-=2;\r\n               }\r\n            }\r\n            \r\n            System.out.println(\"Case #\" + i_test + \": \" + (buffer) );\r\n        }\r\n\r\n        in.close();\r\n    }\r\n\r\n}\r\n", "idx": "8341"}
{"func": "package googlejam8.p343;\n\r\nimport java.util.Scanner;\r\npublic class SenateEvacuation {\r\n\tstatic Scanner sc=new Scanner(System.in);\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\tint cases=Integer.parseInt(sc.nextLine());\r\n\t\tfor(int caseNo=0;caseNo<cases;caseNo++) {\n\t\t\tint N=Integer.parseInt(sc.nextLine());\n\t\t\tint[] members=new int[N];\n\t\t\tint totalMembers=0;\n\t\t\tfor(int x=0;x<N;x++){\n\t\t\t\tmembers[x]=sc.nextInt();\n\t\t\t\ttotalMembers+=members[x];\n\t\t\t}\n\t\t\tsc.nextLine();\n\t\t\t\n\t\t\tString ans=\"\";\n\t\t\t\n\t\t\twhile(totalMembers>0){\n\t\t\t\tint maxParty=0;\n\t\t\t\tint maxMembers=Integer.MIN_VALUE;\n\t\t\t\tfor(int x=0;x<N;x++){\n\t\t\t\t\tif(members[x]>maxMembers){\n\t\t\t\t\t\tmaxMembers=members[x];\n\t\t\t\t\t\tmaxParty=x;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tans=ans+(char)(\"A\".charAt(0) + maxParty);\n\t\t\t\tmembers[maxParty]-=1;\n\t\t\t\ttotalMembers--;\n\t\t\t\t///\n\t\t\t\t/*\n\t\t\t\tfor(int x=0;x<N;x++) System.out.print(members[x]+\" \");\n\t\t\t\tSystem.out.println(\"\");*/\n\t\t\t\tmaxMembers=Integer.MIN_VALUE;\n\t\t\t\tfor(int x=0;x<N;x++){\n\t\t\t\t\tif(members[x]>maxMembers){\n\t\t\t\t\t\tmaxMembers=members[x];\n\t\t\t\t\t\tmaxParty=x;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(members[maxParty]-1<= 0.5*(totalMembers-1) && members[maxParty]>0 && totalMembers!=2){\n\t\t\t\t\tans=ans+(char)(\"A\".charAt(0) + maxParty);\n\t\t\t\t\tmembers[maxParty]-=1;\n\t\t\t\t\ttotalMembers--;\n\t\t\t\t\t\n\t\t\t\t\t//////\n\t\t\t\t\t/*for(int x=0;x<N;x++) System.out.print(members[x]+\" \");\n\t\t\t\t\tSystem.out.println(\"\");*/\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tans=ans+\" \";\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Case #\"+(caseNo+1)+\": \"+ans);\n\t\t}\r\n\t}\r\n}\r\n", "idx": "8343"}
{"func": "package googlejam8.p345;\n/* package whatever; // don't place package name! */\n\nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\n/* Name of the class has to be \"Main\" only if the class is public. */\nclass Ideone\n{\n\tpublic static void main (String[] args) throws java.lang.Exception\n\t{\n\t\tString alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t\tScanner scn = new Scanner(System.in);\n\t\tint $ = scn.nextInt();\n\t\tfor (int cas = 0; cas < $; cas++) {\n\t\t\tStringJoiner sj = new StringJoiner(\" \");\n\t\t\n\t\t\tint N = scn.nextInt();\n\t\t\tint[] arr = new int[N];\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tarr[i] = scn.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\twhile (true) {\n\t\t\t\tString s = \"\";\n\t\t\t\tint sum = 0;\n\t\t\t\tfor (int i : arr)\n\t\t\t\t\tsum += i;\n\t\t\t\t\n\t\t\t\tif (sum == 0)\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tint max = 0;\n\t\t\t\tint ind = -1;\n\t\t\t\t\n\t\t\t\tfor (int $$ = 2-(sum%2); $$ > 0; $$--) {\n\t\t\t\t\tind = -1;\n\t\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t\t\tif (ind == -1 || arr[i] > max) {\n\t\t\t\t\t\t\tmax = arr[i];\n\t\t\t\t\t\t\tind = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ts += alphabet.charAt(ind);\n\t\t\t\t\tarr[ind]--;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tsj.add(s);\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.printf(\"Case #%d: %s\\n\", cas+1, sj);\n\t\t}\n\t}\n}\n", "idx": "8345"}
{"func": "package googlejam8.p347;\n\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n *\r\n * @author ABDULRAHUMAN\r\n */\r\npublic class SenateEvacuation {\r\n    public static void main(String args[]) throws FileNotFoundException, IOException{\r\n        //Scanner in=new Scanner(System.in);\r\n        Scanner in=new Scanner(new FileReader(\"E:\\\\a.in\"));\r\n        PrintWriter out=new PrintWriter(new FileWriter(\"E:\\\\a.out\"));\r\n        int t=in.nextInt();\r\n        for(int z=1;z<=t;z++){\r\n            int n=in.nextInt();\r\n            int arr[]=new int[n];\r\n            System.out.println(n);\r\n            StringBuilder str=new StringBuilder(\"\");\r\n            for(int i=0;i<n;i++){\r\n                arr[i]=in.nextInt();\r\n                System.out.print(arr[i]+\" \");\r\n            }\r\n            System.out.println();\r\n            int count=1;\r\n            //System.out.print(\"Case #\"+z+\": \");\r\n            //out.print(\"Case #\"+z+\": \");\r\n            str.append(\"Case #\"+z+\": \");\r\n            while(true){\r\n                if(count%3==0){\r\n                    //System.out.print(\" \");\r\n                    //out.print(\" \");\r\n                    str.append(\" \");\r\n                    count++;\r\n                }\r\n                int max=Integer.MIN_VALUE;\r\n                for(int i=0;i<n;i++){\r\n                    if(arr[i]>max)\r\n                        max=arr[i];\r\n                }\r\n                if(max==0){\r\n                    break;\r\n                }\r\n                for(int i=0;i<n;i++){\r\n                    if(arr[i]==max){\r\n                        //System.out.print((char)(i+'A'));\r\n                        //out.print((char)(i+'A'));\r\n                        str.append((char)(i+'A'));\r\n                        arr[i]--;\r\n                        break;\r\n                    }\r\n                }\r\n                count++;\r\n            }\r\n            if(str.charAt(str.length()-2)==' '){\r\n                System.out.println(str);\r\n                char ch=str.charAt(str.length()-3);\r\n                str.replace(str.length()-3, str.length()-1, \" \"+ch);\r\n            }\r\n            \r\n            System.out.println(str);\r\n            out.println(str);\r\n        }\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "8347"}
{"func": "package googlejam8.p349;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.io.RandomAccessFile;\r\nimport java.math.BigInteger;\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\n\r\npublic class Main {\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\r\n    /*\t\t\r\n\t\tFileInputStream fin=new FileInputStream(\"C:/Users/4dm1n/Desktop/A-large.in\");\r\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(fin));\t\r\n\t\tFile myfile=new File(\"C:/Users/4dm1n/Desktop/z_output.out\");\r\n\t\tRandomAccessFile rand=new RandomAccessFile(myfile,\"rw\");\r\n    */\t\t\r\n\t\t\r\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\r\n\t\t\r\n\t\tint t,n,m,j,l,i,k,p,c,r,tt,arr[];\r\n\t\tlong ff,ll;\r\n\t\tString s[];\r\n\t\tchar sf[],sl[];\r\n\t\tStringBuilder sb;\r\n\t\tt=Integer.parseInt(br.readLine());\r\n\t\tfor(tt=1;tt<=t;tt++){\r\n\t\t\tsb=new StringBuilder(\"Case #\"+tt+\": \");\r\n\t\t\t\r\n\t\t\tn=Integer.parseInt(br.readLine());\r\n\t\t\tarr=new int[n];\r\n\t\t\ts=br.readLine().split(\" \");\r\n\t\t\tfor(i=0;i<n;i++){\r\n\t\t\t\tarr[i]=Integer.parseInt(s[i]);\r\n\t\t\t}\r\n\t\t\tc=0;\r\n\t\t\tfor(i=1000;i>1;i--){\r\n\t\t\t\tfor(j=0;j<n;j++){\r\n\t\t\t\t\tif(arr[j]==i){\r\n\t\t\t\t\t\tc++;\r\n\t\t\t\t\t\tif(c%2==1) sb.append((char)(j+65));\r\n\t\t\t\t\t\telse sb.append(((char)(j+65))+\" \");\r\n\t\t\t\t\t\tarr[j]--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(c%2==1){\r\n\t\t\t\tsb.append(\" \");\r\n\t\t\t}\r\n\t\t\tc=0;\r\n\t\t\tfor(j=0;j<n;j++) if(arr[j]>0) c++;\r\n\t\t\tif(c%2==1){\r\n\t\t\t\tfor(i=1;i<=1;i++){\r\n\t\t\t\t\tc=0;\r\n\t\t\t\t\tfor(j=0;j<n;j++){\r\n\t\t\t\t\t\tif(arr[j]==1){\r\n\t\t\t\t\t\t\tc=1;\r\n\t\t\t\t\t\t\tsb.append((char)(j+65)+\" \");\r\n\t\t\t\t\t\t\tarr[j]--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(c==1) break;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(c==1) break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(i=1;i<=1;i++){\r\n\t\t\t\tc=0;\r\n\t\t\t\tfor(j=0;j<n;j++){\r\n\t\t\t\t\tif(arr[j]==i){\r\n\t\t\t\t\t\tc++;\r\n\t\t\t\t\t\tif(c%2==1) sb.append((char)(j+65));\r\n\t\t\t\t\t\telse sb.append(((char)(j+65))+\" \");\r\n\t\t\t\t\t\tarr[j]--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tsb.append(\"\\n\");\r\n//\t\t\trand.writeBytes(sb.toString());\r\n\t\t\tSystem.out.print(sb);\r\n\t\t}\r\n\t}\r\n}", "idx": "8349"}
{"func": "package googlejam8.p358;\nimport java.util.HashSet;\r\nimport java.util.Scanner;\r\n\r\npublic class TaskA {\r\n\tpublic static Scanner in = new Scanner(System.in);\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\tint numOfCases = in.nextInt();\r\n\t\tfor(int i = 0 ; i < numOfCases; i++){\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] partyNum = new int[n];\r\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \": \");\r\n\t\t\t\r\n\t\t\tint k =0;\r\n\t\t\tfor(int j = 0 ;j  < n ; j++){\r\n\t\t\t\tpartyNum[j] = in.nextInt();\r\n\t\t\t\tk+= partyNum[j];\r\n\t\t\t}\r\n\t\t\tint max = 0;\r\n\t\t\twhile( max != 1){\r\n\t\t\t\tmax = 0;\r\n\t\t\t\tint maxIdx1 = -1;\r\n\t\t\t\tint maxIdx2 = -1;\r\n\t\t\t\tfor(int j = 0; j < n ; j++){\r\n\t\t\t\t\tif(partyNum[j] == max && max != 0){\r\n\t\t\t\t\t\tmaxIdx2 = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(partyNum[j] > max){\r\n\t\t\t\t\t\tmaxIdx2 = -1;\r\n\t\t\t\t\t\tmax = partyNum[j];\r\n\t\t\t\t\t\tmaxIdx1 = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif(max != 1) {\r\n\t\t\t\t\tpartyNum[maxIdx1]--;\r\n\t\t\t\t\tif(maxIdx2 != -1){\r\n\t\t\t\t\t\tpartyNum[maxIdx2]--;\r\n\t\t\t\t\t\tSystem.out.print((char)(65 + maxIdx2));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.print((char)(65 + maxIdx1) + \" \");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint cnt = 3;\r\n\t\t\twhile(cnt > 2){\r\n\t\t\t\tcnt = 0;\r\n\t\t\t\tfor(int j = 0; j < n ; j++){\r\n\t\t\t\t\tif(partyNum[j] == 1) cnt++; \r\n\t\t\t\t}\r\n\t\t\t\tif(cnt > 2){\r\n\t\t\t\t\tfor(int j = 0 ; j < n; j++){\r\n\t\t\t\t\t\tif(partyNum[j] == 1) {\r\n\t\t\t\t\t\t\tSystem.out.print((char)(65 + j) + \" \");\r\n\t\t\t\t\t\t\tpartyNum[j]--;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int j = 0; j < n ; j++){\r\n\t\t\t\tif(partyNum[j] == 1) {\r\n\t\t\t\t\tSystem.out.print((char)(65 + j));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\t\r\n\r\n\t\t}\r\n\r\n\t}\r\n}\r\n", "idx": "8358"}
{"func": "package googlejam8.p359;\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class CodeJam {\r\n    static Scanner scan;\r\n    static PrintWriter out;\r\n    public static void main(String[] arg) {\r\n        try {\r\n            File file = new File(\"E:\\\\A-large (2).in\");\r\n            scan = new Scanner(file);\r\n            out = new PrintWriter(\"E:\\\\data.out\");\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        int c = scan.nextInt();\r\n        for(int i = 0; i < c; i++) {\r\n//            out.println(\"Case #\" + (i+1) + \": \" + testcase());\r\n\t\t\tout.print(\"Case #\" + (i+1) + \": \");\r\n\t\t\tint n = scan.nextInt();\n\t\t\tint[] A = new int[n];\n\t\t\tfor(int i4=0;i4<n;i4++)\n\t\t\t    A[i4] = scan.nextInt();\n\t\t\tif(n == 2) {\n\t\t\t\tif(A[0] > A[1]) {\n\t\t\t\t\tfor(int i5=0;i5<A[0]-A[1];i5++)\n\t\t\t\t\t\tout.print(\"A \");\n\t\t\t\t} else if(A[0] < A[1]) {\n\t\t\t\t\tfor(int i3=0;i3<A[1]-A[0];i3++)\n\t\t\t\t\t\tout.print(\"B \");\n\t\t\t\t}\n\t\t\t\tint min = A[0] > A[1] ? A[1] : A[0];\n\t\t\t\tfor(int i2=0;i2<min;i2++)\n\t\t\t\t\tout.print(\"AB \");\n\t\t\t} else {\n\t\t\twhile(true) {\n\t\t\t    int max = 0;\n\t\t\t    for (int i1=1;i1<n;i1++) {\n\t\t\t        if(A[max] < A[i1])\n\t\t\t            max = i1;\n\t\t\t    }\n\t\t\t    if(max == n-2 && A[n-2] == 1 && A[n-1] == 1) {\n\t\t\t        out.print((char)(n-2+'A') + \"\" + (char)(n-1+'A'));\n\t\t\t        break;\n\t\t\t    }\n\t\t\t    out.print((char)(max+'A') + \" \");\n\t\t\t    A[max]--;\n\t\t\t}\n\t\t\t}\r\n\t\t\tout.println();\r\n        }\r\n        scan.close();\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "8359"}
{"func": "package googlejam8.p367;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SenateEvacuation {\n    public static void main(String[] args) {\n        final Scanner in = new Scanner(System.in);\n        final int T = in.nextInt();\n        for (int t = 1; t <= T; t++) {\n            final int N = in.nextInt();\n            final List<Integer> P = new ArrayList<>(N);\n            int senatorsCount = 0;\n            for(int i = 0; i < N; i++) {\n                P.add(in.nextInt());\n                senatorsCount += P.get(i);\n            }\n            System.out.printf(\"Case #%d: \", t);\n\n            while(senatorsCount > 0) {\n                final Integer maxInteger = Collections.max(P);\n                final int indexOfMax = P.indexOf(maxInteger);\n\n                if(maxInteger == 1) {\n                    P.set(indexOfMax, maxInteger - 1);\n                    senatorsCount--;\n                    System.out.printf(\"%s\", String.valueOf((char)('A' + indexOfMax)));\n                    if(P.stream().filter(integer -> integer == 1).count() < 2) {\n                        final Integer maxInteger2 = Collections.max(P);\n                        final int indexOfMax2 = P.indexOf(maxInteger);\n                        P.set(indexOfMax2, maxInteger2 - 1);\n                        System.out.printf(\"%s\", String.valueOf((char)('A' + indexOfMax2)));\n                        senatorsCount--;\n                    }\n                } else {\n                    P.set(indexOfMax, maxInteger - 1);\n                    senatorsCount--;\n                    System.out.printf(\"%s\", String.valueOf((char)('A' + indexOfMax)));\n\n                    final Integer maxInteger2 = Collections.max(P);\n                    if (maxInteger2.equals(maxInteger)) {\n                        final int indexOfMax2 = P.indexOf(maxInteger);\n                        P.set(indexOfMax2, maxInteger2 - 1);\n                        System.out.printf(\"%s\", String.valueOf((char)('A' + indexOfMax2)));\n                        senatorsCount--;\n                    }\n                }\n                System.out.print(\" \");\n            }\n            System.out.print(\"\\n\");\n        }\n    }\n\n}", "idx": "8367"}
{"func": "package googlejam8.p369;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\n\r\npublic class Prob1_A {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"C:/Users/Harish/Downloads/A-large.in\"));\r\n\t\tString line = br.readLine();\r\n\t\tint t = Integer.parseInt(line);\r\n\t\tint count = 0;\r\n\t\twhile (t-- > 0) {\r\n\t\t\tline = br.readLine();\r\n\t\t\tint n = Integer.parseInt(line);\r\n\t\t\tint[] arr = new int[n];\r\n\t\t\tline = br.readLine();\r\n\t\t\tint orgtotal = 0;\r\n\t\t\tint max = 0;\r\n\t\t\tint max2 = 0;\r\n\t\t\tString[] str = line.split(\" \");\r\n\t\t\tint i = 0;\r\n\t\t\tint a = -1;\r\n\t\t\tint b = -1;\r\n\t\t\tfor (String st : str) {\r\n\t\t\t\tint val = Integer.parseInt(st);\r\n\t\t\t\torgtotal += val;\r\n\t\t\t\tarr[i] = val;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tboolean flag = true;\r\n\t\t\tSystem.out.print(\"Case #\"+(++count)+\": \");\r\n\t\t\tint total;\r\n\t\t\twhile (flag) {\r\n\t\t\t\tflag = false;\r\n\t\t\t\tmax = 0;\r\n\t\t\t\tmax2 =0;\r\n\t\t\t\ta=-1;\r\n\t\t\t\tb=-1;\r\n\t\t\t\ttotal = 0;\r\n\t\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\t\tif(arr[j] > max){\r\n\t\t\t\t\t\tif(max !=0){\r\n\t\t\t\t\t\t\tb=a;\r\n\t\t\t\t\t\t\tmax2 = max;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ta=j;\r\n\t\t\t\t\t\tmax = arr[j];\r\n\t\t\t\t\t}else if(arr[j]>max2 && arr[j]<=max){\r\n\t\t\t\t\t\tb=j;\r\n\t\t\t\t\t\tmax2 = arr[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttotal+=arr[j];\r\n\t\t\t\t}\r\n\t\t\t\tif(total== 3){\r\n\t\t\t\t\tSystem.out.print((char)(65+a)+\" \");\r\n\t\t\t\t\tarr[a]--;\r\n\t\t\t\t\ttotal--;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tSystem.out.print((char)(65+a)+\"\"+(char)(65+b)+\" \");\r\n\t\t\t\t\tarr[a]--;\r\n\t\t\t\t\tarr[b]--;\r\n\t\t\t\t\ttotal-=2;\r\n\t\t\t\t}\r\n\t\t\t\tif(total != 0) flag = true;\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "8369"}
{"func": "package googlejam8.p370;\n// @author:debverine | 08-May-2016 | 2:39:01 pm\nimport java.io.*;\nimport java.util.*;\n\nclass R1C_A {\n\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\t//BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t//PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t\t\n\t\tBufferedReader br=new BufferedReader(new FileReader(\"A-large.in\"));\n\t\tPrintWriter pw=new PrintWriter(new FileWriter(\"A-large.out\"));\n\t\t\n\t\tint t,total,tc,n,i,arr[],M,c,twice;\n\t\tString inp[],character=\"\";\n\t\tt = Integer.parseInt(br.readLine().trim());\n\t\tfor(tc=1;tc<=t;tc++){\n\t\t\ttotal=0;\n\t\t\tcharacter=\"\";\n\t\t\tn=Integer.parseInt(br.readLine().trim());\n\t\t\tarr=new int[n];\n\t\t\tinp=br.readLine().trim().split(\" \");\n\t\t\tfor(i=0;i<n;i++){\n\t\t\t\tarr[i]=Integer.parseInt(inp[i]);\n\t\t\t\ttotal+=arr[i];\n\t\t\t}\n\t\t\twhile(total>0){\n\t\t\t\tcharacter+=\" \";\n\t\t\t\tint M1,i1;\n\t\t\t\tfor(M1=0,i1=1;i1<arr.length;i1++)\n\t\t\t\t\tif(arr[M1]<arr[i1])\n\t\t\t\t\t\tM1=i1;\n\t\t\t\tM=arr[M1];\n\t\t\t\tint i2,c1;\n\t\t\t\tfor(i2=c1=0;i2<arr.length;i2++)\n\t\t\t\t\tif(arr[i2]==M)\n\t\t\t\t\t\tc1++;\n\t\t\t\tc=c1;\n\t\t\t\tif(c==2){//end case \n\t\t\t\t\t//remove 2 at a time\n\t\t\t\t\ttwice=2;\n\t\t\t\t\tfor(i=0;i<n && twice >0 ;i++){\n\t\t\t\t\t\tif(arr[i]==M && twice>0){\n\t\t\t\t\t\t\tcharacter+=(char)(65+i) +\"\";\n\t\t\t\t\t\t\tarr[i]--;\n\t\t\t\t\t\t\ttotal--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor(i=0;i<n;i++){\n\t\t\t\t\t\tif(arr[i]==M){\n\t\t\t\t\t\t\tcharacter+=(char)(65+i) +\"\";\n\t\t\t\t\t\t\tarr[i]--;\n\t\t\t\t\t\t\ttotal--;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tpw.println(\"Case #\"+tc+\":\"+character);\n\t\t}\n\t\tpw.flush();\n\t\tpw.close();\n\n\t}\n\n}\n", "idx": "8370"}
{"func": "package googlejam8.p372;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\n\r\n\r\npublic class first_small {\r\n\r\n\tpublic static void main( String args[]) throws NumberFormatException, IOException\r\n\t{\r\n\t\tBufferedReader br=new BufferedReader(new FileReader(\"C:\\\\Users\\\\manas\\\\Downloads\\\\A-large (1).in\"));\r\n\t\tBufferedWriter bw=new BufferedWriter(new FileWriter(\"C:\\\\Users\\\\manas\\\\Documents\\\\google code jams\\\\first_big.txt\"));\r\n\t\t//BufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint t= Integer.parseInt(br.readLine());\r\n\t\tint a=1;\r\n\t\twhile(t>0)\r\n\t\t{\r\n\t\t\tint n=Integer.parseInt(br.readLine());\r\n\t\t\tString [] p=br.readLine().split(\" \");\r\n\t\t\tArrayList<Integer> vals=new ArrayList<Integer>();\r\n\t\t\tString [] alpha={\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\r\n\t\t\tHashMap<Integer,Integer> count=new HashMap<Integer,Integer>();\r\n\t\t\tfor(int i=0;i<p.length;i++)\r\n\t\t\t{\r\n\t\t\t\tvals.add(Integer.parseInt(p[i]));\r\n\t\t\t\tcount.put(i, vals.get(i));\r\n\t\t\t}\r\n\t\t\tint parties_done=0;\r\n\t\t\t\r\n\t\t\tSystem.out.print(\"Case #\"+a+\": \");\r\n\t\t\tbw.write(\"Case #\"+a+\": \");\r\n\t\t\ta++;\r\n\t\t\twhile(parties_done!=n)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tint frst_max=0;\r\n\t\t\t\tint second_max=0;\r\n\t\t\t\tint first_pos=-1;\r\n\t\t\t\tint second_pos=-1;\r\n\t\t\t\tfor(int i=0;i<vals.size();i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(vals.get(i)>frst_max)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfrst_max=vals.get(i);\r\n\t\t\t\t\t\tfirst_pos=i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvals.set(first_pos,vals.get(first_pos)-1);\r\n\t\t\t\tfor(int i=0;i<vals.size();i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(vals.get(i)>second_max)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecond_max=vals.get(i);\r\n\t\t\t\t\t\tsecond_pos=i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tvals.set(second_pos,vals.get(second_pos)-1);\t\t\t\t\r\n\t\t\t\tif(n-parties_done==3)\r\n\t\t\t\t{\r\n\t\t\t\t\tSystem.out.print(alpha[first_pos]+\" \");\r\n\t\t\t\t\tbw.write(alpha[first_pos]+\" \");\r\n\t\t\t\t\tvals.set(second_pos, vals.get(second_pos)+1);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(second_pos==-1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSystem.out.print(alpha[first_pos]+\" \");\r\n\t\t\t\t\t\tbw.write(alpha[first_pos]+\" \");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSystem.out.print(alpha[first_pos]+alpha[second_pos]+\" \");\r\n\t\t\t\t\t\tbw.write(alpha[first_pos]+alpha[second_pos]+\" \");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\tint c=0;\r\n\t\t\t\tfor(int i=0;i<vals.size();i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(vals.get(i)==0)\r\n\t\t\t\t\t\tc++;\r\n\t\t\t\t}\r\n\t\t\t\tparties_done=c;\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\tbw.newLine();\r\n\t\t\tt--;\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\tbw.close();\r\n\t\t/*while(t>0)\r\n\t\t{\r\n\t\t\tString s=br.readLine();\r\n\t\t\tint count=0;\r\n\t\t\tchar prev=s.charAt(0);\r\n\t\t\t\r\n\t\t\tfor(int i=1;i<s.length();i++)\r\n\t\t\t{\r\n\t\t\t\tchar curr=s.charAt(i);\r\n\t\t\t\tif(curr!=prev)\r\n\t\t\t\t{\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\tprev=curr;\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(s.charAt(s.length()-1)=='-')\r\n\t\t\t\tcount++;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tbw.write(\"Case #\"+a+\": \"+count);\r\n\t\t\tSystem.out.println(\"Case #\"+a+\": \"+count);\r\n\t\t\ta++;\r\n\t\t\t\r\n\t\t\tbw.newLine();\r\n\t\t\tt--;\r\n\t\t}\r\n\t\tbw.close();*/\r\n\t}\r\n}\r\n", "idx": "8372"}
{"func": "package googlejam8.p378;\nimport java.io.*;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws IOException {\r\n        String filename = \"src/A-large\";\r\n        System.setIn(new FileInputStream(new File(filename + \".in\")));\r\n        Scanner sc = new Scanner(System.in);\r\n        int tc = sc.nextInt();\r\n\r\n        FileWriter fw = new FileWriter(filename + \".out\");\r\n        for (int t = 0; t < tc; t++) {\r\n            int n = sc.nextInt();\r\n            int[] parties = new int[n];\r\n\r\n            int max = 0;\r\n            int maxIdx = -1;\r\n            int rest = 0;\r\n            for (int i = 0; i < n; i++) {\r\n                rest += parties[i] = sc.nextInt();\r\n                if (parties[i] > max) {\r\n                    max = parties[i];\r\n                    maxIdx = i;\r\n                }\r\n            }\r\n\r\n            StringBuilder result = new StringBuilder();\r\n            if (rest % 2 == 1) {\r\n                parties[maxIdx]--;\r\n                rest--;\r\n                result.append((char) ('A' + maxIdx));\r\n                result.append(' ');\r\n            }\r\n\r\n            while (rest > 0) {\r\n                for (int i = 0; i < 2; i++) {\r\n                    max = 0;\r\n                    maxIdx = -1;\r\n                    for (int j = 0; j < n; j++) {\r\n                        if (parties[j] > max) {\r\n                            max = parties[j];\r\n                            maxIdx = j;\r\n                        }\r\n                    }\r\n                    parties[maxIdx]--;\r\n                    rest--;\r\n                    result.append((char) ('A' + maxIdx));\r\n                }\r\n                result.append(' ');\r\n            }\r\n\r\n            String output = \"Case #\" + (t+1) + \": \" + result.toString().trim();\r\n            System.out.println(output);\r\n            fw.write(output);\r\n            fw.write(\"\\n\");\r\n            fw.flush();\r\n        }\r\n    }\r\n}\r\n", "idx": "8378"}
{"func": "package googlejam8.p379;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n    public static void main(String[] args) throws NumberFormatException,\r\n            IOException {\r\n\r\n        BufferedReader br = new BufferedReader(\r\n                new InputStreamReader(System.in), 1024 * 1024 * 2);\r\n\r\n        int t = Integer.parseInt(br.readLine());\r\n\r\n        long time = System.currentTimeMillis();\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int x = 1; x <= t; x++) {\r\n            int n = Integer.valueOf(br.readLine());\n\t\t\tString line = br.readLine();\n\t\t\tint[] ret = new int[n];\n\t\t\tint start = 0;\n\t\t\tint end = line.indexOf(' ', start);\n\t\t\tfor (int i1 = 0; i1 < n; i1++) {\n\t\t\t    if (end > 0)\n\t\t\t        ret[i1] = Integer.parseInt(line.substring(start, end));\n\t\t\t    else\n\t\t\t        ret[i1] = Integer.parseInt(line.substring(start));\n\t\t\t    start = end + 1;\n\t\t\t    end = line.indexOf(' ', start);\n\t\t\t}\r\n            int vals[] = ret;\r\n\r\n            int sum = 0;\r\n            for ( int i = 0 ; i < n ; i ++ ) {\r\n                sum += (vals[i]);\r\n            }\r\n\r\n\r\n            sb.append(\"Case #\" + x + \": \" );\r\n            while (Arrays.stream(vals).filter(x1->x1>0).count() > 2) {\r\n                int max = 0;\r\n                int imax = -1;\r\n                for (int i = 0 ;i <n ; i ++) {\r\n                    if (max < vals[i]) {\r\n                        max = vals[i];\r\n                        imax = i;\r\n                    }\r\n                }\r\n                int iimax = -1;\r\n                int max2 = 0;\r\n                for (int i = 0 ;i <n ; i ++) {\r\n                    if (max2 < vals[i] && i != imax) {\r\n                        max2 = vals[i];\r\n                        iimax = i;\r\n                    }\r\n                }\r\n                char c1 = (char) (imax + 'A');\r\n                char c2 = (char) (iimax + 'A');\r\n                if (sum % 2 == 1) {\r\n                    sb.append(c1 + \" \");\r\n                    vals[imax] -= 1;\r\n                    sum -= 1;\r\n                }else {\r\n                    if (vals[imax] > 2 && vals[imax] - 2 > (sum - 2) / 2) {\r\n                        sb.append(c1 + \"\" + c1 + \" \");\r\n                        vals[imax] -= 2;\r\n                        sum -= 2;\r\n                    } else {\r\n                        sb.append(c1 + \"\" + c2 + \" \");\r\n                        vals[imax]--;\r\n                        vals[iimax]--;\r\n                        sum -= 2;\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            if (Arrays.stream(vals).filter(x2->x2>0).count() == 2) {\r\n                int max = 0;\r\n                int imax = -1;\r\n                for (int i = 0 ;i <n ; i ++) {\r\n                    if (max < vals[i]) {\r\n                        max = vals[i];\r\n                        imax = i;\r\n                    }\r\n                }\r\n                int iimax = -1;\r\n                int max2 = 0;\r\n                for (int i = 0 ;i <n ; i ++) {\r\n                    if (max2 < vals[i] && i != imax) {\r\n                        max2 = vals[i];\r\n                        iimax = i;\r\n                    }\r\n                }\r\n                for (int i = 0 ; i<sum/2; i++) {\r\n                    sb.append((char)('A' + imax));\r\n                    sb.append((char)('A' + iimax));\r\n                    sb.append(\" \");\r\n                }\r\n            }\r\n            sb.append(\"\\n\");\r\n\r\n        }\r\n        BufferedWriter bw = new BufferedWriter(new FileWriter(\"ii/outAJam\"));\r\n        bw.write(sb.toString());\r\n        bw.close();\r\n        System.out.println(sb.toString());\r\n        System.out.println(-time + System.currentTimeMillis());\r\n    }\r\n}\r\n", "idx": "8379"}
{"func": "package googlejam8.p383;\nimport java.util.*;\nimport java.io.*;\n\npublic class Problem1 {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint t = in.nextInt();\n\t\tfor (int testCase = 1; testCase <= t; testCase++) {\n\t\t\tint n = in.nextInt();\n\t\t\tint p[] = new int[n];\n\t\t\tint total = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tp[i] = in.nextInt();\n\t\t\t\ttotal += p[i];\n\t\t\t}\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\twhile (total > 0) {\n\t\t\t\tsb.append(\" \");\n\t\t\t\tint max = 0;\n\t\t\t\tfor (int i1 = 1; i1 < p.length; i1++) {\n\t\t\t\t\tif (p[i1] > p[max]) {\n\t\t\t\t\t\tmax = i1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint i = max;\n\t\t\t\ttotal -= 1;\n\t\t\t\tp[i] -= 1;\n\t\t\t\tsb.append((char) ('A' + i));\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tif (p[j] * 1.0 / total > 0.5) {\n\t\t\t\t\t\ttotal -= 1;\n\t\t\t\t\t\tp[j] -= 1;\n\t\t\t\t\t\tsb.append((char)('A' + j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + testCase + \":\" + sb.toString());\n\t\t}\n\t\tin.close();\n\t}\n}", "idx": "8383"}
{"func": "package googlejam8.p384;\n// A.\r\n//import java.awt.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.text.*;\r\nimport java.util.*;\r\n \r\npublic class A {\r\n  \r\n  public static void main (String[] args) {\r\n    Scanner sc = new Scanner(System.in);\r\n    int numTests = sc.nextInt();\r\n    for (int tc = 1; tc <= numTests; ++tc) {\r\n      int n = sc.nextInt();\r\n      int[] ascii = new int[256];\r\n      int total = 0;\r\n      int parties = n;\r\n      for (int i = 'A'; i < 'A' + n; ++i) {\r\n        ascii[i] = sc.nextInt();\r\n        total += ascii[i];\r\n      }\r\n      System.out.print(\"Case #\" + tc + \": \");\r\n      while (total > 0) {\r\n        if (parties == 2) {\r\n          for (int i = 'A'; i < 'A' + n; ++i) {\r\n            if (ascii[i] > 0) {\r\n              --ascii[i];\r\n              --total;\r\n              System.out.print((char) i);\r\n            }\r\n          }          \r\n        } else {\r\n          int maxValue = 0;\r\n          int maxIndex = -1;\r\n          for (int i = 'A'; i < 'A' + n; ++i) {\r\n            if (ascii[i] > maxValue) {\r\n              maxValue = ascii[i];\r\n              maxIndex = i;\r\n            }\r\n          }\r\n          --ascii[maxIndex];\r\n          --total;\r\n          if (ascii[maxIndex] == 0) {\r\n            --parties;\r\n          }\r\n          System.out.print((char) maxIndex);\r\n        }\r\n        System.out.print(' ');\r\n      }\r\n      System.out.println();\r\n    }\r\n  }\r\n}\r\n", "idx": "8384"}
{"func": "package googlejam8.p403;\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass prog1\r\n{\r\n\tpublic static void main (String[] args) throws java.lang.Exception\r\n\t{\r\n\t\tBufferedReader br=new BufferedReader(new FileReader(\"A-large.in\"));\r\n\t\tPrintWriter pw=new PrintWriter(\"output1.txt\");\r\n\t    //StringTokenizer st=new StringTokenizer(br.readLine());\r\n\t\tint t=Integer.parseInt(br.readLine());\r\n\t\tfor(int q=1;q<=t;q++)\r\n\t\t{\r\n\t\t\tint n=Integer.parseInt(br.readLine());\r\n\t\t\tint p[]=new int[n];\r\n\t\t\tStringTokenizer st=new StringTokenizer(br.readLine());\r\n\t\t\tfor(int i=0;i<n;i++)\r\n\t\t\t{\r\n\t\t\t\tp[i]=Integer.parseInt(st.nextToken());\r\n\t\t\t}\r\n\t\t\tpw.print(\"Case #\"+q+\":\");\r\n\t\t\twhile(true)\r\n\t\t\t{\r\n\t\t\t\tint f=0;\r\n\t\t\t\tint first=-1,second=-1;\r\n\t\t\t\tint less=-1;\r\n\t\t\t\tint max=0;\r\n\t\t\t\tint more=-1;\r\n\t\t\t\tfor(int i=0;i<n;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(p[i]>max)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmax=p[i];\r\n\t\t\t\t\t\tfirst=i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(int i=0;i<n;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(p[i]==max&&first!=i)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsecond=i;\r\n\t\t\t\t\t\tmore++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(first!=-1&&second!=-1&&more==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tp[first]--;\r\n\t\t\t\t\tp[second]--;\r\n\t\t\t\t\tchar ch=(char)(first+65);\r\n\t\t\t\t\tchar ch1=(char)(second+65);\r\n\t\t\t\t\tpw.print(\" \"+ch+ch1);\r\n\t\t\t\t}\r\n\t\t\t\telse if(first!=-1)\r\n\t\t\t\t{\r\n\t\t\t\t\tp[first]--;\r\n\t\t\t\t\tchar ch=(char)(first+65);\r\n\t\t\t\t\tpw.print(\" \"+ch);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpw.println();\r\n\t\t}\r\n\t\tpw.close();\r\n\t}\r\n}\r\n", "idx": "8403"}
{"func": "package googlejam8.p405;\nimport java.lang.Integer;\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.util.Collection;\r\nimport java.util.HashMap;\r\n\r\npublic class a {\r\n  public static void main(String[] args) {\r\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n    int t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\r\n    String str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n    for(int i = 1; i <= t; ++i) {\r\n      int N = in.nextInt();\r\n      ArrayList<Integer> p = new ArrayList<Integer>();\r\n      int sum = 0;\r\n      for(int j=0;j<N;j++){\r\n        int temp = in.nextInt();\r\n        p.add(temp);\r\n        sum+=temp;\r\n      }\r\n\r\n      System.out.print(\"Case #\" + i + \": \");\r\n      while(sum>0){\r\n        int index = 0;\r\n        int max = 0;\r\n        for(int k=0;k<p.size();k++){\r\n          if(p.get(k)>max){\r\n            max = p.get(k);\r\n            index = k;\r\n          }\r\n        }\r\n        System.out.print(str.charAt(index));\r\n        sum--;\r\n        p.set(index, p.get(index) - 1);\r\n        if(sum!=2){\r\n          max = 0;\r\n          for(int k=0;k<p.size();k++){\r\n            if(p.get(k)>max){\r\n              max = p.get(k);\r\n              index = k;\r\n            }\r\n          }\r\n          System.out.print(str.charAt(index));\r\n          sum--;\r\n          p.set(index, p.get(index) - 1);\r\n        }\r\n        System.out.print(\" \");\r\n      }\r\n  System.out.print(\"\\n\");\r\n\r\n\r\n\r\n    }\r\n  }\r\n}", "idx": "8405"}
{"func": "package googlejam8.p406;\nimport java.io.IOException;\r\nimport java.net.URISyntaxException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.nio.file.StandardOpenOption;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\npublic class A {\r\n\r\n    public static void main(String[] args) throws IOException, URISyntaxException {\r\n        int caseNum = 0;\r\n        List<String> lines = new ArrayList<>();\r\n        String result = new String();\r\n        int parties = 0;\r\n        for (String line : Files.readAllLines(Paths.get(ClassLoader.getSystemResource(\"A-large.in\").toURI()))) {\r\n            if (caseNum == 0) {\r\n                ++caseNum;\r\n                continue;\r\n            }\r\n\r\n            if (parties == 0) {\r\n                parties = Integer.valueOf(line);\r\n                continue;\r\n            }\r\n\r\n            String[] nesto = line.split(\" \");\r\n            int[] members = new int[nesto.length];\r\n            for (int i = 0; i < nesto.length; i++) {\r\n                members[i] = Integer.valueOf(nesto[i]);\r\n            }\r\n\r\n            boolean evacuated = false;\r\n\r\n            int f = -1, fi = -1, s = -1, si = -1, sum = 0;\r\n            int[] sorted;\r\n            while (!evacuated) {\r\n                sorted = Arrays.copyOf(members, members.length);\r\n                Arrays.sort(sorted);\r\n                f = sorted[sorted.length - 1];\r\n                s = sorted[sorted.length - 2];\r\n                if (f == 0) {\r\n                    evacuated = true;\r\n                    break;\r\n                }\r\n                for (int i = 0; i < members.length; i++) {\r\n                    sum += members[i];\r\n                    if (f == members[i] && fi == -1) {\r\n                        fi = i;\r\n                    }\r\n                    if (si == -1 && s == members[i] && i != fi) {\r\n                        si = i;\r\n                    }\r\n                }\r\n\r\n                if (sum == 3) {\r\n                    result += (String.valueOf((char)(fi + 65)) + \" \");\r\n                    members[fi]--;\r\n                } else {\r\n                    result += String.valueOf((char)(fi + 65)) + String.valueOf((char)(si + 65)) + \" \";\r\n                    members[fi]--;\r\n                    if (si != -1) {\r\n                        members[si]--;\r\n                    }\r\n                }\r\n                s = -1;\r\n                f = -1;\r\n                si = -1;\r\n                fi = -1;\r\n                sum = 0;\r\n            }\r\n\r\n            lines.add(String.format(\"Case #%s: %s\", caseNum++, result.trim()));\r\n            result = new String();\r\n            parties = 0;\r\n        }\r\n        Files.write(Paths.get(\"src\\\\a.out\"), lines, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\r\n\r\n    }\r\n\r\n}\r\n", "idx": "8406"}
{"func": "package googlejam8.p407;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\n\n/*\nUTILS :\n\nArrayList<Long>[] sol = (ArrayList<Long>[]) new ArrayList[size];\nCollections.sort();\nSystem.out.println(\"\");\n(String).toCharArray();\n\nsc.nextLong();\nsc.nextBigInteger();\nsc.nextLine();\nsc.nextDouble();\nsc.nextInt();\nsc.nextInt(int radix);\nsc.nextBoolean();\n */\n\n\npublic class D {\n\tpublic static void main(String [] args) throws Exception\n\t{\t\t\n\t\tScanner sc = new Scanner(new File(\"D/large.txt\"));\n\t\tPrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter(new File(\"src/D.txt\"))));\n\t\tint size = sc.nextInt();\n\t\tsc.nextLine();\n\t\t\n\t\tfor (int i=0; i<size; i++) {\n\t\t\t\n\t\t\tint length = sc.nextInt();\n\t\t\tSystem.out.println(length);\n\t\t\t\n\t\t\t// Case #\n\t\t\twriter.print(\"Case #\" + (i+1) + \":\");\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \":\");\n\t\t\t\n\t\t\t\n\t\t\t// Solve\n\t\t\tint max = -1;\n\t\t\tint index = -1;\n\t\t\tint[] line = new int[length];\n\t\t\tfor(int j=0; j<length; j++) {\n\t\t\t\tline[j] = sc.nextInt();\n\t\t\t\tif(line[j]>max) {\n\t\t\t\t\tindex = j;\n\t\t\t\t\tmax = line[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\twhile(max!=0) {\n\t\t\t\tint i1 = -1;\n\t\t\t\tint i2 = -1;\n\t\t\t\tint count = 0;\n\t\t\t\tfor(int j=0; j<length; j++) {\n\t\t\t\t\tif(line[j]==max) {\n\t\t\t\t\t\ti2 = i1;\n\t\t\t\t\t\ti1 = j;\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(count%2==0) {\n\t\t\t\t\tline[i1]--;\n\t\t\t\t\tline[i2]--;\n\t\t\t\t\twriter.print(\" \" + String.valueOf((char)(i1 + 65)) + String.valueOf((char)(i2 + 65)));\n\t\t\t\t\tSystem.out.print(\" \" + String.valueOf((char)(i1 + 65)) + String.valueOf((char)(i2 + 65)));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tline[i1]--;\n\t\t\t\t\twriter.print(\" \" + String.valueOf((char)(i1 + 65)));\n\t\t\t\t\tSystem.out.print(\" \" + String.valueOf((char)(i1 + 65)));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tmax = 0;\n\t\t\t\tfor(int j=0; j<length; j++) {\n\t\t\t\t\tif(line[j]>max) {\n\t\t\t\t\t\tindex = j;\n\t\t\t\t\t\tmax = line[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\n\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t// Print result\n\n\n\t\t\t\n\t\t\t\n\t\t\twriter.println(\"\");\n\t\t\tSystem.out.println(\"\");\n\t\t}\n\n\t\twriter.close();\n\t\tsc.close();\n\t}\n}", "idx": "8407"}
{"func": "package googlejam8.p410;\n\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.StringTokenizer;\n\npublic class A {\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tfor (int caze = 1; caze <= T; caze++) {\n\t\t\tint n = Integer.parseInt(br.readLine());\n\t\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\tint[] sens = new int[n];\n\t\t\tint m = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tsens[i] = Integer.parseInt(st.nextToken());\n\t\t\t\tm += sens[i];\n\t\t\t}\n\t\t\tList<Character> ret = new ArrayList<Character>();\n\t\t\tboolean started = false;\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\twhile (m > 0) {\n\t\t\t\tif (!started) {\n\t\t\t\t\tstarted = true;\n\t\t\t\t} else {\n\t\t\t\t\tsb.append(\" \");\n\t\t\t\t}\n\t\t\t\tint max1 = Integer.MIN_VALUE;\n\t\t\t\tint min1 = -1;\n\t\t\t\tint min2 = -1;\n\t\t\t\tint max2 = Integer.MIN_VALUE;\n\t\t\t\tfor (int i = 0; i < sens.length; i++) {\n\t\t\t\t\tif (sens[i] > max1) {\n\t\t\t\t\t\tmin1 = i;\n\t\t\t\t\t\tmax1 = sens[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < sens.length; i++)\n\t\t\t\t\tif (i != min1) {\n\t\t\t\t\t\tif (sens[i] > max2) {\n\t\t\t\t\t\t\tmin2 = i;\n\t\t\t\t\t\t\tmax2 = sens[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\tsens[min1]--;\n\t\t\t\tm--;\n\t\t\t\tsb.append(Character.toChars('A' + min1)[0]);\n\t\t\t\tif (m > 0 && m != 2) {\n\t\t\t\t\tsens[min2]--;\n\t\t\t\t\tm--;\n\t\t\t\t\tsb.append(Character.toChars('A' + min2)[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.write(String.format(\"Case #%d: %s\", caze, sb.toString()));\n\t\t\tout.write('\\n');\n\t\t}\n\t\tout.close();\n\t}\n\n}\n", "idx": "8410"}
{"func": "package googlejam8.p411;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemA {\r\n\t\r\n\t// Workaround for not being able to pipe a file to stdin in Eclipse.\r\n\tprivate static final String IN_FILE = \"text/\" + \"A-large.in\";\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\ttry (Scanner in = new Scanner(new BufferedReader(new FileReader(IN_FILE)))) {\r\n\t\t\tint numCases = in.nextInt();\r\n\t\t\tfor (int i = 0; i < numCases; i++) {\r\n\t\t\t\tint numParties = in.nextInt();\r\n\t\t\t\tint[] counts = new int[numParties];\r\n\t\t\t\tfor (int j = 0; j < numParties; j++) {\r\n\t\t\t\t\tcounts[j] = in.nextInt();\r\n\t\t\t\t}\n\t\t\t\tStringBuilder result1 = new StringBuilder();\n\t\t\t\tint totalCount = Arrays.stream(counts).sum();\n\t\t\t\tint numRemoved = 0;\n\t\t\t\twhile (numRemoved < totalCount) {\n\t\t\t\t\tif (result1.length() > 0) {\n\t\t\t\t\t\tresult1.append(\" \");\n\t\t\t\t\t}\n\t\t\t\t\tInteger maxVal = null;\n\t\t\t\t\tInteger secondMax = null;\n\t\t\t\t\tInteger ix11 = null;\n\t\t\t\t\tInteger ix21 = null;\n\t\t\t\t\t\n\t\t\t\t\tfor (int i1 = 0; i1 < counts.length; i1++) {\n\t\t\t\t\t\tif (maxVal == null || counts[i1] > maxVal) {\n\t\t\t\t\t\t\tif (maxVal != null && (secondMax == null || maxVal > secondMax)) {\n\t\t\t\t\t\t\t\tsecondMax = maxVal;\n\t\t\t\t\t\t\t\tix21 = ix11;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmaxVal = counts[i1];\n\t\t\t\t\t\t\tix11 = i1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (secondMax == null || counts[i1] > secondMax) {\n\t\t\t\t\t\t\tsecondMax = counts[i1];\n\t\t\t\t\t\t\tix21 = i1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tassert (ix11 == null || ix11 != ix21);\n\t\t\t\t\t\n\t\t\t\t\tInteger[] maxIxs = new Integer[] { ix11, ix21 };\n\t\t\t\t\tint ix1 = maxIxs[0];\n\t\t\t\t\tint ix2 = maxIxs[1];\n\t\t\t\t\t\n\t\t\t\t\tif (counts[ix1] == counts[ix2] && !(counts[ix1] == 1 && totalCount - numRemoved == 3)) {\n\t\t\t\t\t\tresult1.append((char) ('A' + ix1));\n\t\t\t\t\t\tresult1.append((char) ('A' + ix2));\n\t\t\t\t\t\tcounts[ix1]--;\n\t\t\t\t\t\tcounts[ix2]--;\n\t\t\t\t\t\tnumRemoved += 2;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresult1.append((char) ('A' + ix1));\n\t\t\t\t\t\tcounts[ix1]--;\n\t\t\t\t\t\tnumRemoved++;\n\t\t\t\t\t}\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tString result = result1.toString();\r\n\t\t\t\tString resultStr = result;\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(String.format(\"Case #%s: %s\", i+1, resultStr));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "8411"}
{"func": "package googlejam8.p426;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Q1 {\r\n    public static void main(String[] args) throws Exception {\r\n        //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t\t//String line = br.readLine();\r\n        //int numberOfCases = Integer.parseInt(line);\r\n\t\tint numberOfCases = in.nextInt();\r\n        for (int i = 1; i <= numberOfCases; i++){\r\n            int party = in.nextInt();\r\n\t\t\t//build array\r\n\t\t\tint[] parties = new int[party];\r\n\t\t\tfor (int j = 0; j < party; j++){\r\n\t\t\t\tparties[j] = in.nextInt();\r\n\t\t\t}\r\n            escape(i, parties);\r\n            \r\n        }\r\n    }\r\n\t\r\n\t\r\n\t\r\n    \r\n    public static void escape (int num, int[] parties){\r\n        ArrayList<String> evaculateList = new ArrayList<String>();\r\n\t\t//get the TotalNumber\r\n\t\tint total = 0;\r\n\t\tfor (int i = 0; i < parties.length;i++){\r\n\t\t\ttotal += parties[i];\r\n\t\t}\r\n\t\t\r\n\t\twhile (total > 0){\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t//only escape one\r\n\t\t\tif (total == 3 || total == 1) {\r\n\t\t\t\tint biggest = 0;\r\n\t\t\t\tint biggestLocation = 0;\r\n\t\t\t\tfor (int i = 0; i < parties.length; i++){\r\n\t\t\t\t\tif (parties[i] > biggest){\r\n\t\t\t\t\t\tbiggest = parties[i];\r\n\t\t\t\t\t\tbiggestLocation = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tparties[biggestLocation] -= 1;\n\t\t\t\tHashMap<Integer, String> hm = new HashMap<Integer, String>();\n\t\t\t\t  // Put elements to the map\n\t\t\t\t  hm.put(0, \"A\");\n\t\t\t\t  hm.put(1, \"B\");\n\t\t\t\t  hm.put(2, \"C\");\n\t\t\t\t  hm.put(3, \"D\");\n\t\t\t\t  hm.put(4, \"E\");\n\t\t\t\t  hm.put(5, \"F\");\n\t\t\t\t  hm.put(6, \"G\");\n\t\t\t\t  hm.put(7, \"H\");\n\t\t\t\t  hm.put(8, \"I\");\n\t\t\t\t  hm.put(9, \"J\");\n\t\t\t\t  hm.put(10, \"K\");\n\t\t\t\t  hm.put(11, \"L\");\n\t\t\t\t  hm.put(12, \"M\");\n\t\t\t\t  hm.put(13, \"N\");\n\t\t\t\t  hm.put(14, \"O\");\n\t\t\t\t  hm.put(15, \"P\");\n\t\t\t\t  hm.put(16, \"Q\");\n\t\t\t\t  hm.put(17, \"R\");\n\t\t\t\t  hm.put(18, \"S\");\n\t\t\t\t  hm.put(19, \"T\");\n\t\t\t\t  hm.put(20, \"U\");\n\t\t\t\t  hm.put(21, \"V\");\n\t\t\t\t  hm.put(22, \"W\");\n\t\t\t\t  hm.put(23, \"X\");\n\t\t\t\t  hm.put(24, \"Y\");\n\t\t\t\t  hm.put(25, \"Z\");\n\t\t\t\t  String var = hm.get(biggestLocation);\r\n\t\t\t\tString escaper = var;\r\n\t\t\t\tString thisEscape = escaper;\r\n\t\t\t\tevaculateList.add(thisEscape);\r\n\t\t\t\ttotal -= 1;\r\n\t\t\t} else {//get the biggest two\r\n\t\t\t\tint biggest = 0;\r\n\t\t\t\tint biggestLocation = 0;\r\n\t\t\t\tfor (int i = 0; i < parties.length; i++){\r\n\t\t\t\t\tif (parties[i] > biggest){\r\n\t\t\t\t\t\tbiggest = parties[i];\r\n\t\t\t\t\t\tbiggestLocation = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//get the \r\n\t\t\t\tint secondBiggest = 0;\r\n\t\t\t\tint secondBiggestLocation = 0;\r\n\t\t\t\tfor (int i = 0; i < parties.length; i++){\r\n\t\t\t\t\tif (i == biggestLocation) continue;\r\n\t\t\t\t\tif (parties[i] > secondBiggest){\r\n\t\t\t\t\t\tsecondBiggest = parties[i];\r\n\t\t\t\t\t\tsecondBiggestLocation = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//Then evacuate the biggest two parties.\r\n\t\t\t\tparties[biggestLocation] -= 1;\r\n\t\t\t\tparties[secondBiggestLocation] -= 1;\r\n\t\t\t\ttotal -= 2;\n\t\t\t\tHashMap<Integer, String> hm = new HashMap<Integer, String>();\n\t\t\t\t  // Put elements to the map\n\t\t\t\t  hm.put(0, \"A\");\n\t\t\t\t  hm.put(1, \"B\");\n\t\t\t\t  hm.put(2, \"C\");\n\t\t\t\t  hm.put(3, \"D\");\n\t\t\t\t  hm.put(4, \"E\");\n\t\t\t\t  hm.put(5, \"F\");\n\t\t\t\t  hm.put(6, \"G\");\n\t\t\t\t  hm.put(7, \"H\");\n\t\t\t\t  hm.put(8, \"I\");\n\t\t\t\t  hm.put(9, \"J\");\n\t\t\t\t  hm.put(10, \"K\");\n\t\t\t\t  hm.put(11, \"L\");\n\t\t\t\t  hm.put(12, \"M\");\n\t\t\t\t  hm.put(13, \"N\");\n\t\t\t\t  hm.put(14, \"O\");\n\t\t\t\t  hm.put(15, \"P\");\n\t\t\t\t  hm.put(16, \"Q\");\n\t\t\t\t  hm.put(17, \"R\");\n\t\t\t\t  hm.put(18, \"S\");\n\t\t\t\t  hm.put(19, \"T\");\n\t\t\t\t  hm.put(20, \"U\");\n\t\t\t\t  hm.put(21, \"V\");\n\t\t\t\t  hm.put(22, \"W\");\n\t\t\t\t  hm.put(23, \"X\");\n\t\t\t\t  hm.put(24, \"Y\");\n\t\t\t\t  hm.put(25, \"Z\");\n\t\t\t\t  String var = hm.get(biggestLocation);\r\n\t\t\t\tString escaper = var;\n\t\t\t\tHashMap<Integer, String> hm = new HashMap<Integer, String>();\n\t\t\t\t  // Put elements to the map\n\t\t\t\t  hm.put(0, \"A\");\n\t\t\t\t  hm.put(1, \"B\");\n\t\t\t\t  hm.put(2, \"C\");\n\t\t\t\t  hm.put(3, \"D\");\n\t\t\t\t  hm.put(4, \"E\");\n\t\t\t\t  hm.put(5, \"F\");\n\t\t\t\t  hm.put(6, \"G\");\n\t\t\t\t  hm.put(7, \"H\");\n\t\t\t\t  hm.put(8, \"I\");\n\t\t\t\t  hm.put(9, \"J\");\n\t\t\t\t  hm.put(10, \"K\");\n\t\t\t\t  hm.put(11, \"L\");\n\t\t\t\t  hm.put(12, \"M\");\n\t\t\t\t  hm.put(13, \"N\");\n\t\t\t\t  hm.put(14, \"O\");\n\t\t\t\t  hm.put(15, \"P\");\n\t\t\t\t  hm.put(16, \"Q\");\n\t\t\t\t  hm.put(17, \"R\");\n\t\t\t\t  hm.put(18, \"S\");\n\t\t\t\t  hm.put(19, \"T\");\n\t\t\t\t  hm.put(20, \"U\");\n\t\t\t\t  hm.put(21, \"V\");\n\t\t\t\t  hm.put(22, \"W\");\n\t\t\t\t  hm.put(23, \"X\");\n\t\t\t\t  hm.put(24, \"Y\");\n\t\t\t\t  hm.put(25, \"Z\");\n\t\t\t\t  String var = hm.get(secondBiggestLocation);\r\n\t\t\t\tString escaper2 = var;\r\n\t\t\t\tString thisEscape = escaper + escaper2;\r\n\t\t\t\tevaculateList.add(thisEscape);\r\n\t\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.print(\"Case #\" + num + \": \");\r\n\t\tfor (int i = 0; i < evaculateList.size(); i++){\r\n\t\t\tSystem.out.print(evaculateList.get(i) + \" \");\r\n\t\t}\r\n\t\tSystem.out.println();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n    \r\n    \r\n}\r\n", "idx": "8426"}
{"func": "package googlejam8.p427;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Codejam {\r\n\tfinal static String PROBLEM_NAME = \"A-small\";\r\n\tfinal static String WORK_DIR = \"C:\\\\Users\\\\Ketan\\\\Documents\\\\NetBeansProjects\\\\codejam\\\\src\\\\\";\r\n\tfinal static String INPUT_FILE_NAME = PROBLEM_NAME+\".in\";\r\n\tfinal static String OUTPUT_FILE_NAME = PROBLEM_NAME+\".out\";\r\n\r\n\tstatic int[][] maxBest = new int[31][2];\r\n\r\n\tchar digittochar(int i) {\r\n            char c;\r\n            c = (char) (i+65);\r\n            return c;\r\n        }\r\n        \r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\ttry (\r\n                    Scanner sc = new Scanner(new FileReader(WORK_DIR+INPUT_FILE_NAME));\r\n                    PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR+OUTPUT_FILE_NAME))\r\n                ) \r\n            {\r\n                int caseCnt = sc.nextInt();\r\n                for (int caseNum = 0; caseNum < caseCnt; caseNum++) {\r\n                        System.out.println(\"Processing test case \" + (caseNum + 1));\r\n                        pw.print(\"Case #\" + (caseNum + 1) + \": \");\n\t\t\t\t\t\tCodejam r = new Codejam();\r\n                        int n = sc.nextInt();\n\t\t\t\t\t\tint[] arr = new int[n];\n\t\t\t\t\t\tint sum = 0;\n\t\t\t\t\t\tfor(int i=0; i<n; i++) {\n\t\t\t\t\t\t    arr[i] = sc.nextInt();\n\t\t\t\t\t\t    sum += arr[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tboolean even = sum%2==0 ? true : false;\n\t\t\t\t\t\tboolean stop = false;\n\t\t\t\t\t\twhile(!stop) {\n\t\t\t\t\t\t    int m1 = 0;\n\t\t\t\t\t\t    int m1i = 0;\n\t\t\t\t\t\t    int m2 = 0;\n\t\t\t\t\t\t    int m2i = 0;\n\t\t\t\t\t\t    for(int i=0; i<n; i++){\n\t\t\t\t\t\t        if(m1 < arr[i] && arr[i] > 0){\n\t\t\t\t\t\t            m2 = m1;\n\t\t\t\t\t\t            m2i = m1i;\n\t\t\t\t\t\t            m1 =arr[i];\n\t\t\t\t\t\t            m1i = i;\n\t\t\t\t\t\t        } else if(m2 < arr[i] && arr[i] > 0){\n\t\t\t\t\t\t            m2 = arr[i];\n\t\t\t\t\t\t            m2i = i;\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    if (!even) {\n\t\t\t\t\t\t        pw.print(r.digittochar(m1i));\n\t\t\t\t\t\t        arr[m1i]--;\n\t\t\t\t\t\t        even = true;\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    else if(m1 > 0 && m2 > 0) {\n\t\t\t\t\t\t        pw.print(r.digittochar(m1i)+\"\"+r.digittochar(m2i));\n\t\t\t\t\t\t        arr[m1i]--;\n\t\t\t\t\t\t        arr[m2i]--;\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    else if(m1 > 0 && m2 <= 0) {\n\t\t\t\t\t\t        pw.print(r.digittochar(m1i));\n\t\t\t\t\t\t        arr[m1i]--;\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t    else\n\t\t\t\t\t\t        stop = true;\n\t\t\t\t\t\t    pw.print(\" \");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpw.println();\r\n                }\r\n                pw.flush();\r\n            }\r\n\t}\r\n}", "idx": "8427"}
{"func": "package googlejam8.p429;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Array;\r\nimport java.util.*;\r\n\r\npublic class MainA {\r\n\r\n    public static void main(String[] args) {\r\n//        String in = \"./sample.in\";\r\n//        String out = \"./sample.out\";\r\n//        String in = \"./A-small-attempt0.in\";\r\n//        String out = \"./A-small-attempt0.out\";\r\n        String in = \"./A-large.in\";\r\n        String out = \"./A-large.out\";\r\n\r\n        try {\r\n            BufferedReader br = new BufferedReader(new FileReader(in));\r\n            FileWriter fw = new FileWriter(out);\r\n            int T = Integer.parseInt(br.readLine());\r\n            for (int i = 0; i < T; i++) {\r\n                System.out.print(\"Case #\" + (i + 1) + \": \");\r\n                fw.write(\"Case #\" + (i + 1) + \": \");\r\n                int N = Integer.parseInt(br.readLine());\r\n                String[] strP = br.readLine().split(\" \");\r\n                Map<Character, Integer> P = new HashMap<>();\r\n                int total = 0;\r\n                for (int j = 0; j < N; j++) {\r\n                    P.put((char) ('A' + j), Integer.parseInt(strP[j]));\r\n                    total += Integer.parseInt(strP[j]);\r\n                }\r\n                while (total > 0) {\r\n                    for (int k = 0; k < 2; k++) {\r\n                        for (int j = 0; j < N; j++) {\r\n                            char p = (char) ('A' + j);\r\n                            if (P.get(p) == 0)\r\n                                continue;\r\n                            double offset = ((double) (total - 1) / 2);\r\n                            boolean valid = true;\r\n                            if (k != total) {\r\n                                for (int l = 0; l < N; l++) {\r\n                                    if (l != j) {\r\n                                        char p1 = (char) ('A' + l);\r\n                                        if (P.get(p1) > offset && k == 1) {\r\n                                            valid = false;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (valid) {\r\n                                System.out.print(p);\r\n                                fw.write(p);\r\n                                total--;\r\n                                P.put(p, P.get(p) - 1);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    System.out.print(' ');\r\n                    fw.write(' ');\r\n                }\r\n                System.out.print(\"\\n\");\r\n                fw.write(\"\\n\");\r\n            }\r\n            fw.close();\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n", "idx": "8429"}
{"func": "package googlejam8.p431;\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\tScanner sc=new Scanner(System.in);\r\n\t\t\r\n\t\tint t=sc.nextInt();\r\n\t\t\r\n\t\tfor(int z=1; z<=t; z++){\r\n\t\t\tSystem.out.print(\"Case #\"+z+\": \");\r\n\t\t\tint N=sc.nextInt();\r\n\t\t\tint count[]=new int[N];\r\n\t\t\tint people=0;\r\n\t\t\tfor(int i=0; i<N; i++){\r\n\t\t\t\tcount[i]=sc.nextInt();\r\n\t\t\t\tpeople+=count[i];\r\n\t\t\t}\r\n\t\t\tboolean flag=false;\r\n\t\t\twhile(!flag){\r\n\t\t\t\tflag=true;\r\n\t\t\t\tString maxpeople=\"\";\r\n\t\t\t\tint max=0;\r\n\t\t\t\tfor(int i=0; i<N; i++){ \r\n\t\t\t\t\tif(count[i]==0){\r\n\t\t\t\t\t\t//nothing to do here\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tflag=false;\r\n\t\t\t\t\t\tif(count[i]>max){\r\n\t\t\t\t\t\t\tmax=count[i];\r\n\t\t\t\t\t\t\tmaxpeople=i+\",\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(count[i]==max){\r\n\t\t\t\t\t\t\tmaxpeople=maxpeople+i+\",\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!flag){\r\n\t\t\t\t\t//print here\r\n\t\t\t\t\tString[] maxindexes=maxpeople.split(\",\");\r\n\t\t\t\t\t//if there is one max term, remove it.\r\n\t\t\t\t\t// if two maxterms, remove them\r\n\t\t\t\t\t//if 3, remove 1\r\n\t\t\t\t\t//if four remove 2\r\n\t\t\t\t\tint r=maxindexes.length%2==0?2:1;\r\n\t\t\t\t\t//System.out.println(maxpeople+\" \"+max);\r\n\t\t\t\t\tfor(int i=0; i<r; i++){\r\n\t\t\t\t\t\tint index=Integer.parseInt(maxindexes[i]);\r\n\t\t\t\t\t\tSystem.out.print((char)(index+'A'));\r\n\t\t\t\t\t\tcount[index]=count[index]-1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.print(\" \");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"\");\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "8431"}
{"func": "package googlejam8.p434;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Test7 {\n    public static void main(String[] args) throws NumberFormatException, IOException {\n         //BufferedReader br = new BufferedReader(new\n         //InputStreamReader(System.in));\n        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(\"text3\")));\n        int testCount = Integer.parseInt(br.readLine());\n\n        for (int i = 1; i <= testCount; i++) {\n            int number = Integer.parseInt(br.readLine());\n            int sena[] = new int[number];\n           double sum = 0;\n           Map<Character,Integer> map = new HashMap<>();\n           String[] string = br.readLine().split(\" \");\n            for(int j=0;j<number;j++) {\n                sena[j] = Integer.parseInt(string[j]);\n                map.put((char) (j+65), sena[j]);\n                sum +=sena[j];\n            }\n            String answer = \"\";\n            while(sum>0) {\n            Map.Entry<Character, Integer> maxEntry = null;\n\n            for (Map.Entry<Character, Integer> entry : map.entrySet())\n            {\n                if (maxEntry == null || entry.getValue().compareTo(maxEntry.getValue()) > 0)\n                {\n                    maxEntry = entry;\n                }\n            }\n            answer += maxEntry.getKey().toString();\n            map.put(maxEntry.getKey(),maxEntry.getValue()-1);\n            sum--;\n            if(sum>0 && sum!=2) {\n            for (Map.Entry<Character, Integer> entry : map.entrySet())\n            {\n                if (maxEntry == null || entry.getValue().compareTo(maxEntry.getValue()) > 0)\n                {\n                    maxEntry = entry;\n                }\n            }\n\n            answer=answer+maxEntry.getKey().toString();\n            map.put(maxEntry.getKey(),maxEntry.getValue()-1);\n            sum--;\n            }\n            answer+=\" \";\n            }\n\n            System.out.println(\"Case #\" + i + \": \" + answer.trim());\n        }\n    }\n}\n", "idx": "8434"}
{"func": "package googlejam8.p451;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.InputStreamReader;\n\n\npublic class MainA {\n\n\tpublic static void main(String[] args) {\n\n\t\t//String filename = \"src/y20161C/A-test\";\n\t\t//String filename = \"src/y20161C/A-small-attempt1\";\n\t\tString filename = \"src/y20161C/A-large\";\n\n\t\tFileInputStream file;\n\t\tint T;\n\n\t\ttry {\n\t\t\tfile = new FileInputStream(filename+\".in\");\n\n\t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(file));\n\n\t\t\tT = Integer.parseInt(in.readLine());\n\n\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(filename+\".out\"));\n\n\t\t\tfor (int i=0; i<T; i++) {\n\t\t\t\tint ind = i+1;\n\t\t\t\t// parser\n\t\t\t\tint N = Integer.parseInt(in.readLine());\n\t\t\t\tString data[] = in.readLine().split(\" \");\n\t\t\t\tint P[] = new int[N];\n\t\t\t\tfor (int j=0; j<N; j++) {\n\t\t\t\t\tP[j] = Integer.parseInt(data[j]);\n\t\t\t\t}\n\t\t\t\tString res1 = \"\";\n\t\t\t\t\n\t\t\t\t//looking for the 2 highest\n\t\t\t\tint max1 = 0;\n\t\t\t\tint max2 = 0;\n\t\t\t\tint ind1 = -1;\n\t\t\t\tint ind2 = -1;\n\t\t\t\tfor (int i1=0; i1<N; i1++) {\n\t\t\t\t\tif (P[i1] > max1) {\n\t\t\t\t\t\tif (max1 > max2) {\n\t\t\t\t\t\t\tmax2 = P[i1];\n\t\t\t\t\t\t\tind2 = i1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmax1 = P[i1];\n\t\t\t\t\t\t\tind1 = i1;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (P[i1] > max2) {\n\t\t\t\t\t\tmax2 = P[i1];\n\t\t\t\t\t\tind2 = i1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint tab[] = P.clone();\n\t\t\t\t//egalize the 2 highest\n\t\t\t\twhile (tab[ind1] != tab[ind2]) {\n\t\t\t\t\tif (tab[ind1] > tab[ind2]) {\n\t\t\t\t\t\tres1 += \" \"+(char)('A'+ind1);\n\t\t\t\t\t\ttab[ind1]--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres1 += \" \"+(char)('A'+ind2);\n\t\t\t\t\t\ttab[ind2]--;\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//remove others\n\t\t\t\tfor (int i2=0; i2<N; i2++) {\n\t\t\t\t\tif (i2 == ind1 || i2 == ind2)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\twhile (tab[i2] > 1) {\n\t\t\t\t\t\tres1 += \" \"+(char)('A'+i2)+(char)('A'+i2);\n\t\t\t\t\t\ttab[i2] -= 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (tab[i2] == 1) {\n\t\t\t\t\t\tres1 += \" \"+(char)('A'+i2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twhile (tab[ind1] > 0) {\n\t\t\t\t\tres1 += \" \"+(char)('A'+ind1)+(char)('A'+ind2);\n\t\t\t\t\ttab[ind1]--;\n\t\t\t\t\ttab[ind2]--;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tres1 = res1.substring(1);\n\t\t\t\t\n\t\t\t\t// calcul\n\t\t\t\tString res = res1;\n\t\t\t\t\n\t\t\t\tSystem.out.println(\"Result \"+i+\": \"+res);\n\t\t\t\tbw.write(\"Case #\"+ind+\": \"+res+\"\\n\");\n\t\t\t}\n\t\t\tbw.close();\n\n\t\t\tin.close();\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n}\n", "idx": "8451"}
{"func": "package googlejam8.p453;\n\r\n\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n    private static Scanner in;\r\n    private static PrintStream out;\r\n\r\n    private static final String CASE_N = \"Case #\";\r\n    private static final String COLON_SPACE = \": \";\r\n\r\n    public static void main(String[] args) throws Throwable {\r\n        in = new Scanner(System.in);\r\n        in = new Scanner(new FileInputStream(\"A-large.in\"));\r\n        out = System.out;\r\n        out = new PrintStream(new FileOutputStream(\"A-large.out\"));\r\n\r\n        final char[] chr = new char[100];\r\n        for (char ch = 'A'; ch <= 'Z'; ch++) {\r\n            chr[ch - 'A'] = ch;\r\n        }\r\n\r\n        int T = in.nextInt();\r\n\r\n        int[] max1and2 = new int[2];\r\n\r\n        for (int t = 1; t <= T; t++) {\r\n            out.print(CASE_N);\r\n            out.print(t);\r\n            out.print(COLON_SPACE);\r\n\r\n            int N = in.nextInt();\r\n            int[] P = new int[N];\r\n            int total = 0;\r\n            for (int n = 0; n < N; n++) {\r\n                P[n] = in.nextInt();\r\n                total += P[n];\r\n            }\r\n\r\n            while (total > 0) {\r\n                int vMax = -1;\n\t\t\t\tint iMax = -1;\n\t\t\t\tint vMax21 = -1;\n\t\t\t\tint iMax21 = -1;\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < P.length; i++) {\n\t\t\t\t    int v = P[i];\n\t\t\t\t    if (v > vMax) {\n\t\t\t\t        vMax21 = vMax;\n\t\t\t\t        iMax21 = iMax;\n\t\t\t\t\n\t\t\t\t        vMax = v;\n\t\t\t\t        iMax = i;\n\t\t\t\t    } else if (v > vMax21) {\n\t\t\t\t        vMax21 = v;\n\t\t\t\t        iMax21 = i;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax1and2[0] = iMax;\n\t\t\t\tmax1and2[1] = iMax21;\r\n                int iMax1 = max1and2[0];\r\n                int iMax2 = max1and2[1];\r\n                int vMax1 = P[iMax1];\r\n                int vMax2 = iMax2 > -1 ? P[iMax2] : 0;\r\n\r\n                if (vMax1 == vMax2) {\r\n                    out.print(chr[iMax1]);\r\n                    P[iMax1]--;\r\n                    total--;\r\n\r\n                    if (total > 2 || total == 1) {\r\n                        out.print(chr[iMax2]);\r\n                        P[iMax2]--;\r\n                        total--;\r\n                    }\r\n                } else {\r\n                    out.print(chr[iMax1]);\r\n                    P[iMax1]--;\r\n                    total--;\r\n\r\n                    if (total > 2 || total == 1) {\r\n                        out.print(chr[iMax1]);\r\n                        P[iMax1]--;\r\n                        total--;\r\n                    }\r\n                }\r\n\r\n                if (total > 0) {\r\n                    out.print(' ');\r\n                }\r\n            }\r\n\r\n            out.println();\r\n        }\r\n        out.flush();\r\n    }\r\n\r\n}\r\n", "idx": "8453"}
{"func": "package googlejam8.p455;\nimport java.util.Scanner;\r\n\r\npublic class SenateEvac {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner scan = new Scanner(System.in);\r\n\t\tint T = scan.nextInt();\r\n\t\tString[] svar = new String[T];\r\n\t\tfor (int t = 0; t < T; t++) {\r\n\t\t\tsvar[t] = \"\";\r\n\t\t\tint N = scan.nextInt();\r\n\t\t\tint[] memb = new int[N];\r\n\t\t\tfor (int n = 0; n < N; n++) {\r\n\t\t\t\tmemb[n] = scan.nextInt();\r\n\t\t\t}\r\n\t\t\tint max1 = 0;\r\n\t\t\tint max2;\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tif (memb[i] >= memb[max1]) {\r\n\t\t\t\t\tmax1 = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(max1 != 0){\r\n\t\t\t\tmax2 = 0;\r\n\t\t\t} else {\r\n\t\t\t\tmax2 = 1;\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tif (memb[i] >= memb[max2] && i != max1) {\r\n\t\t\t\t\tmax2 = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twhile (memb[max1] > memb[max2]) {\r\n\t\t\t\tsvar[t] += (char)('A' + max1);\r\n\t\t\t\tsvar[t] += \" \";\r\n\t\t\t\tmemb[max1]--;\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tif (i != max1 && i != max2) {\r\n\t\t\t\t\tfor (int j = 0; j < memb[i]; j++) {\r\n\t\t\t\t\t\tsvar[t] += (char)('A' + i);\r\n\t\t\t\t\t\tsvar[t] += \" \";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < memb[max1]; i++) {\r\n\t\t\t\tsvar[t] += (char)('A' + max1);\r\n\t\t\t\tsvar[t] += (char)('A' + max2);\r\n\t\t\t\tsvar[t] += \" \";\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tfor(int t = 0; t<T; t++){\r\n\t\t\tSystem.out.println(\"Case #\" + (t+1) + \": \" + svar[t]);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "8455"}
{"func": "package googlejam8.p458;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Scanner;\n\npublic class A {\n\tpublic static void main(String[] args) throws IOException {\n\t\tString name = \"A-large\";\n\n\t\tScanner in = new Scanner(new File(\"/Users/YunJoonSoh/\" + name + \".in\"));\n\t\tFileWriter fstream = new FileWriter(\"/Users/YunJoonSoh/\" + name + \".out\");\n\t\tBufferedWriter out = new BufferedWriter(fstream);\n\n\t\tint T = Integer.parseInt(in.nextLine());\n\n\t\tfor (int t = 1; t <= T; t++) {\n\t\t\tint N = Integer.parseInt(in.nextLine());\n\n\t\t\tint[] S = new int[N];\n\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tS[i] = in.nextInt();\n\t\t\t}\n\t\t\tin.nextLine(); // for end of line\n\n\t\t\tString ret = \"\";\n\n\t\t\tint sum = 0;\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tsum += S[i];\n\t\t\t}\n\n\t\t\tint MAX_PARTY = 0;\n\n\t\t\twhile (sum > 0) {\n\t\t\t\t// find max party and evacuate\n\t\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\t\tif (S[MAX_PARTY] < S[j]) {\n\t\t\t\t\t\tMAX_PARTY = j;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (S[j] * 2 > sum)\n\t\t\t\t\t\tSystem.out.println(\"MAJORITY\");\n\t\t\t\t}\n\n\t\t\t\tS[MAX_PARTY]--;\n\t\t\t\tsum--;\n\n\t\t\t\t// if (sum != 0) {\n//\t\t\t\tif (S[MAX_PARTY] == 0) {\n//\t\t\t\t\tbreak;\n//\t\t\t\t}\n\t\t\t\t// }\n\t\t\t\t// find second max party\n\t\t\t\t// if the new max party gets the majority\n\t\t\t\tint MAX_PARTY_2 = 0;\n\t\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\t\tif (S[MAX_PARTY_2] < S[j]) {\n\t\t\t\t\t\tMAX_PARTY_2 = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// evacuate 2 people\n\t\t\t\tif ((S[MAX_PARTY_2]) * 2 > sum) { // if runner up now is majority\n\t\t\t\t\tret += (char) (MAX_PARTY + 'A') + \"\" + (char) (MAX_PARTY_2 + 'A') + \" \";\n\t\t\t\t\tS[MAX_PARTY_2]--;\n\t\t\t\t\tsum--;\n\t\t\t\t} else {\n\t\t\t\t\tret += (char) (MAX_PARTY + 'A') + \" \";\n\t\t\t\t}\n\t\t\t\t// }\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tif (S[i] != 0)\n\t\t\t\t\tSystem.out.println(\"NOT EVACUATED\");\n\t\t\t}\n\n\t\t\t// System.out.println(\"/////////////////////////////////////////\");\n\t\t\tStringBuilder s = new StringBuilder();\n\t\t\ts.append(\"Case #\");\n\t\t\ts.append(t);\n\t\t\ts.append(\": \");\n\t\t\t// answer\n\t\t\ts.append(ret);\n\t\t\ts.append(\"\\n\");\n\t\t\tout.write(s.toString());\n\t\t\t// System.out.print( + \": \");\n\t\t\tSystem.out.println(s.toString());\n\t\t}\n\n\t\tout.close();\n\t\tin.close();\n\t}\n}\n", "idx": "8458"}
{"func": "package googlejam8.p462;\nimport java.util.Scanner;\r\n\r\npublic class round3a {\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner input = new Scanner(System.in);\r\n\t\tint T = input.nextInt();\r\n\t\tfor (int n = 0; n < T; n++)\r\n\t\t{\r\n\t\t\tint N = input.nextInt();\r\n\t\t\tchar[] chars={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\r\n\t\t\tint[] strength=new int[N];\r\n\t\t\tint total=0;\r\n\t\t\tfor(int i=0;i<N;i++)\r\n\t\t\t{\r\n\t\t\t\tstrength[i]=input.nextInt();\r\n\t\t\t\ttotal+=strength[i];\r\n\t\t\t}\r\n\t\t\tString str=\"\";\r\n\t\t\tint count=0;\r\n\t\t\twhile(total>0)\r\n\t\t\t{\r\n\t\t\t\tdouble[] per=new double[N];\r\n\t\t\t\tfor(int i=0;i<N;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tper[i]=((double)strength[i])/total;\r\n\t\t\t\t}\r\n\t\t\t\t//remove first\r\n\t\t\t\tint maxpos=0;\r\n\t\t\t\tfor(int i=0;i<N;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(strength[i]>strength[maxpos])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmaxpos=i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\tif(count==0)\r\n\t\t\t\t{str=str+chars[maxpos];\r\n\t\t\t\tstrength[maxpos]--;\r\n\t\t\t\ttotal--;}\r\n\t\t\tif(count==1)\r\n\t\t\t{\r\n\t\t\t\tstrength[maxpos]--;\r\n\t\t\t\ttotal--;\r\n\t\t\t\tdouble[] newper=new double[N];\r\n\t\t\t\tfor(int i=0;i<N;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tnewper[i]=((double)strength[i])/total;\r\n\t\t\t\t}\r\n\t\t\t\tboolean b=false;\r\n\t\t\t\tfor(int i=0;i<N;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(newper[i]>.5)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tb=true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(b)\r\n\t\t\t\t{\r\n\t\t\t\t\tstrength[maxpos]++;\r\n\t\t\t\t\ttotal++;\r\n\t\t\t\t}\r\n\t\t\t\telse\t\r\n\t\t\t\t{\r\n\t\t\t\t\tstr=str+chars[maxpos];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tstr=str+\" \";\r\n\t\t\t\t\tcount=-1;\r\n\t\t\t\t}\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+(n+1)+\": \"+str);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "8462"}
{"func": "package googlejam8.p466;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class s{\r\n\tpublic static void main(String args[]){\r\n\t\tScanner in = new Scanner (new BufferedReader(new InputStreamReader(System.in)));\r\n\t\tint t = in.nextInt();\r\n\t\tint re[] = new int[27];\r\n\t\tint n = 0;\r\n\t\tint max1 = 0;\r\n\t\tint maxf1 = 0;\r\n\t\tint max2 = 0;\r\n\t\tint maxf2 = 0;\r\n\t\tint sum = 0;\r\n\t\tint temp = 'A' - 1;\r\n\t\tfor (int i = 1; i <= t; i++){\r\n\t\t\tn = in.nextInt();\r\n\t\t\tArrays.fill(re, 0);\r\n\t\t\tmax1 = 0;\r\n\t\t\tmaxf1 = 0;\r\n\t\t\tmax2 = 0;\r\n\t\t\tmaxf2 = 0;\r\n\t\t\tsum = 0;\r\n\t\t\tSystem.out.print(\"Case #\" + i +\": \");\r\n\t\t\tfor (int j = 1; j <= n; j++){\r\n\t\t\t\tre[j] = in.nextInt();\r\n\t\t\t\tsum += re[j];\r\n\t\t\t\tif (max1 <= re[j]) {\r\n\t\t\t\t\tmax2 = max1;\r\n\t\t\t\t\tmaxf2 = maxf1;\r\n\t\t\t\t\tmax1 = re[j];\r\n\t\t\t\t\tmaxf1 = j;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (maxf1 == 1){\r\n\t\t\t\tfor (int j = 2; j <= n; j++){\r\n\t\t\t\tif (max2 <= re[j]) {\r\n\t\t\t\t\tmax2 = re[j];\r\n\t\t\t\t\tmaxf2 = j;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t\twhile(sum != 0){\r\n\t\t\t\tif (sum != 3){\r\n\t\t\t\t\tre[maxf1]--;\r\n\t\t\t\t\tmax1--;\r\n\t\t\t\t\tSystem.out.printf(\"%c\" ,(maxf1 + temp));\r\n\t\t\t\t\tif (max1 >= max2){\r\n\t\t\t\t\t\tre[maxf1]--;\r\n\t\t\t\t\t\tmax1--;\r\n\t\t\t\t\t\tSystem.out.printf(\"%c \",(maxf1 + temp));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tre[maxf2]--;\r\n\t\t\t\t\t\tmax2--;\r\n\t\t\t\t\t\tSystem.out.printf(\"%c \", (maxf2 + temp));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsum -= 2;\r\n\t\t\t\t}\r\n\t\t\t\telse {sum--;\r\n\t\t\t\t\tre[maxf1]--;\r\n\t\t\t\t\tmax1--;\r\n\t\t\t\t\tSystem.out.printf(\"%c \", (maxf1 + temp));\r\n\t\t\t\t}\r\n\t\t\t\tfor (int j = 1; j <= n; j++){\r\n\t\t\t\t\tif (max1 <= re[j] && maxf1 != j) {\r\n\t\t\t\t\tmax2 = max1;\r\n\t\t\t\t\tmaxf2 = maxf1;\r\n\t\t\t\t\tmax1 = re[j];\r\n\t\t\t\t\tmaxf1 = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\t\r\n}", "idx": "8466"}
{"func": "package googlejam8.p467;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class R1C2016 {\n\n\tstatic int parties[];\n\tstatic int total;\n\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint cases = scan.nextInt();\n\t\tscan.nextLine();\n\n\t\tfor (int i = 0; i < cases; i++) {\n\t\t\tSystem.out.print(\"Case #\" + (i + 1) + \": \");\n\t\t\tparties = new int[scan.nextInt()];\n\t\t\ttotal = 0;\n\n\t\t\tfor (int j = 0; j < parties.length; j++) {\n\t\t\t\tparties[j] = scan.nextInt();\n\t\t\t\ttotal += parties[j];\n\t\t\t}\n\n\t\t\twhile (total > 0) {\n\t\t\t\tint maxArg = 0;\n\t\t\t\tint secondMax = 0;\n\t\t\t\tfor (int i1 = 0; i1 < parties.length; i1++) {\n\t\t\t\t\tif (parties[i1] >= parties[maxArg]) {\n\t\t\t\t\t\tsecondMax = maxArg;\n\t\t\t\t\t\tmaxArg = i1;\n\t\t\t\t\t} else if (parties[i1] >= parties[secondMax]) {\n\t\t\t\t\t\tsecondMax = i1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (total == 3) {\n\t\t\t\t\tSystem.out.print((char) (65 + maxArg) + \" \");\n\t\t\t\n\t\t\t\t\tparties[maxArg]--;\n\t\t\t\t\ttotal--;\n\t\t\t\t} else if (secondMax != maxArg && (parties[maxArg] - 1) <= ((total - 2) / 2)) {\n\t\t\t\t\tSystem.out.print((char) (65 + maxArg) + \"\" + (char) (65 + secondMax) + \" \");\n\t\t\t\n\t\t\t\t\tparties[maxArg]--;\n\t\t\t\t\tparties[secondMax]--;\n\t\t\t\t\ttotal -= 2;\n\t\t\t\t} else if (parties[maxArg] - 2 <= ((total - 2) / 2)) {\n\t\t\t\t\tSystem.out.print((char) (65 + maxArg) + \"\" + (char) (65 + maxArg) + \" \");\n\t\t\t\n\t\t\t\t\tparties[maxArg] -= 2;\n\t\t\t\t\ttotal -= 2;\n\t\t\t\t} else if ((parties[maxArg] - 1) <= ((total - 1) / 2)) {\n\t\t\t\t\tSystem.out.print((char) (65 + maxArg) + \" \");\n\t\t\t\n\t\t\t\t\tparties[maxArg]--;\n\t\t\t\t\ttotal--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\n\t\tscan.close();\n\t}\n}\n", "idx": "8467"}
{"func": "package googlejam8.p471;\nimport java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\npublic class Senate{\n\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tPrintWriter out = new PrintWriter(new File(\"Senate.out\"));\n\t\t//Scanner s = new Scanner(System.in);\n\t\tScanner s = new Scanner(new File(\"A-large.in\"));\n\t\tint t = s.nextInt();\n\t\tfor(int tests = 0; tests < t; ++tests) {\n\t\t\tout.print(\"Case #\" + (tests + 1) + \": \");\n\t\t\tint n = s.nextInt();\n\t\t\tint total = 0;\n\t\t\tint senate[] = new int[n];\n\t\t\tfor(int i = 0; i < n; ++i) {\n\t\t\t\tsenate[i] = s.nextInt();\n\t\t\t\ttotal += senate[i];\n\t\t\t}\n\t\t\tboolean formatstarted = false;\n\t\t\twhile(total != 0) {\n\t\t\t\tif(formatstarted)\n\t\t\t\t\tout.print(\" \");\n\t\t\t\tint total1 = total;\n\t\t\t\tint highest = -1;\n\t\t\t\tint next = -1;\n\t\t\t\tint temp = 0;\n\t\t\t\tboolean onlyone = false;\n\t\t\t\tboolean usenext = true;\n\t\t\t\tint check = -1;\n\t\t\t\t// find highest, remove from array\n\t\t\t\t// find next, remove\n\t\t\t\tfor(int i = 0; i < n; ++i) {\n\t\t\t\t\tif(senate[i] > temp) {\n\t\t\t\t\t\thighest = i;\n\t\t\t\t\t\ttemp = senate[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t--senate[highest];\n\t\t\t\t--total1;\n\t\t\t\ttemp = 0;\n\t\t\t\tfor(int i = 0; i < n; ++i) {\n\t\t\t\t\tif(senate[i] > temp) {\n\t\t\t\t\t\tnext = i;\n\t\t\t\t\t\ttemp = senate[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tout.print((char) (highest + 'A'));\n\t\t\t\t\n\t\t\t\tif(next >= 0) {\n\t\t\t\t\t--senate[next];\n\t\t\t\t\t--total1;\n\t\t\t\t\ttemp = 0;\n\t\t\t\t\tfor(int i = 0; i < n; ++i) {\n\t\t\t\t\t\tif(senate[i] > 0 && !onlyone) {\n\t\t\t\t\t\t\ttemp = 1;\n\t\t\t\t\t\t\tonlyone = true;\n\t\t\t\t\t\t\tusenext = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(senate[i] > 0 && onlyone) {\n\t\t\t\t\t\t\tusenext = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(usenext && next >= 0) {\n\t\t\t\t\t\tout.print((char) (next + 'A'));\n\t\t\t\t\t}\n\t\t\t\t\telse if (!usenext && next >= 0) {\n\t\t\t\t\t\t++senate[next];\n\t\t\t\t\t\t++total1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttotal = total1;\n\t\t\t\tformatstarted = true;\n\t\t\t}\n\t\t\tout.println();\n\t\t}\n\t\tout.close();\n\t}\n}", "idx": "8471"}
{"func": "package googlejam8.p472;\n\r\n\r\nimport java.util.*;\r\n\r\n/**\r\n * <Class description...>\r\n * Harrison Fang, May 08, 2016.\r\n */\r\npublic class SenateEvacuation {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        int T = in.nextInt();\r\n\r\n        for (int t = 1; t <= T; t++) {\r\n            System.out.printf(\"case #%d:\", t);\r\n\r\n            int N = in.nextInt();\r\n            int[] arr = new int[N];\r\n\r\n            int sum = 0;\r\n\r\n            for (int i = 0; i < N; i++) {\r\n                int tmp = in.nextInt();\r\n                arr[i] = tmp;\r\n                sum += tmp;\r\n            }\r\n\r\n            StringBuilder sb = new StringBuilder();\r\n\r\n            while (true) {\r\n                int max = -1, maxi = -1;\r\n                int sec = -2, seci = -2;\r\n                int left = 0;\r\n                for (int i = 0; i < N; i++) {\r\n                    if (arr[i] > 0) left++;\r\n\r\n                    if (arr[i] > max) {\r\n                        sec = max; seci = maxi;\r\n                        max = arr[i]; maxi = i;\r\n                    } else if (arr[i] > sec) {\r\n                        sec = arr[i]; seci = i;\r\n                    }\r\n                }\r\n\r\n                char a = 'A'; a += maxi;\r\n                char b = 'A'; b += seci;\r\n\r\n                if (left == 2) {\r\n                    while (max - sec > 1) {\r\n\r\n                        sb.append(\" \").append(a).append(a);\r\n                        max = max - 2;\r\n                    }\r\n                    if (max != sec) {\r\n                        sb.append(\" \").append(a);\r\n                        max = max - 1;\r\n                    }\r\n                    while (max != 0) {\r\n                        sb.append(\" \").append(a).append(b);\r\n                        max = max - 1; sec = sec - 1;\r\n                    }\r\n                    break;\r\n                } else {\r\n                    sb.append(\" \").append(a);\r\n                    arr[maxi]--;\r\n                }\r\n            }\r\n\r\n            System.out.println(sb.toString());\r\n        }\r\n    }\r\n}\r\n", "idx": "8472"}
{"func": "package googlejam8.p480;\nimport java.io.*;\nimport java.util.*;\n\nclass evac {\n\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"src/input.in\");\n        File of = new File(\"src/out.txt\");\n\n        FileWriter fw = new FileWriter(of, true);\n        PrintWriter pw = new PrintWriter(fw);\n        Scanner sc = new Scanner(file);\n        \n        int iter = sc.nextInt();\n        \n        for (int i = 0; i < iter; i++) {\n            int num = sc.nextInt();\n            ArrayList<Integer> pnum = new ArrayList<Integer>();\n            String res = \"Case #\" + (i + 1) + \": \";\n            \n            for (int j = 0; j < num; j++) {\n                pnum.add(sc.nextInt());\n            }\n            \n            int total = 0;\n            System.out.print(\"[\");\n            for (int j = 0; j < pnum.size(); j++) {\n                total += pnum.get(j);\n                System.out.print(pnum.get(j) + \", \");\n            }\n            System.out.println(\"]\");\n            \n            while (total > 0) {\n                System.out.println(total);\n                int firstVal = Collections.max(pnum);\n                System.out.print(firstVal + \", \");\n                int firstIndex = pnum.indexOf(firstVal);\n                System.out.println(firstIndex);\n                \n                pnum.set(firstIndex, pnum.get(firstIndex) - 1);\n                total -= 1;\n                \n                int secondVal = Collections.max(pnum);\n                System.out.print(secondVal + \", \");\n                int secondIndex = -1;\n                \n                if (secondVal > (double)total / 2) {\n                    secondIndex = pnum.indexOf(secondVal);\n                    \n                    pnum.set(secondIndex, pnum.get(secondIndex) - 1);\n                    total -= 1;\n                }\n                \n                System.out.println(secondIndex);\n                \n                res += (char)('A' + firstIndex);\n                \n                if (secondIndex != -1) {\n                    res += (char)('A' + secondIndex);\n                }\n                \n                res += \" \";\n            }\n            \n            pw.println(res);\n            System.out.println(res);\n        }\n\n        sc.close();\n        pw.close();\n    }\n}\n", "idx": "8480"}
{"func": "package googlejam8.p482;\n\n\nimport r1A.A;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * Created by suleymanuslu on 5/8/16.\n * CJ 16 R1C A\n */\npublic class C1 {\n\n    private String smallInput = \"res/r1C/A/a_small.in\";\n    private String smallOutput = \"res/r1C/A/a_small.out\";\n    private String bigInput = \"res/r1C/A/a_big.in\";\n    private String bigOutput = \"res/r1C/A/a_big.out\";\n\n    private int n;  // number of cases\n\n    public static void main(String[] args) {\n\n        C1 c = new C1();\n        try {\n\t\t    Scanner sc = new Scanner(new FileReader(c.bigInput));\n\t\t    PrintWriter pw = new PrintWriter(c.bigOutput);\n\t\t    c.n = sc.nextInt();\n\t\t    for(int i=0; i<c.n; i++) {    //case\n\t\t        int s = sc.nextInt();\n\t\t        int[] a = new int[s];\n\t\t        int t = 0;\n\t\t        for(int j=0; j<s; j++) {\n\t\t            a[j] = sc.nextInt();\n\t\t            t += a[j];\n\t\t        }\n\t\t        int x = i+1;\n\t\t        pw.print(\"Case #\"+x+\":\");\n\t\t\n\t\t        for(int j=t; j>2; j--) {    // t adet removal\n\t\t\n\t\t            int lar = 0;\n\t\t            int slar = 0;\n\t\t            int in = 0;\n\t\t            int in2 = 0;\n\t\t\n\t\t            for(int k=0; k<s; k++) {    // one iter\n\t\t                if(a[k] > lar) {\n\t\t                    if(lar != 0) {\n\t\t                        slar = lar;\n\t\t                        in2 = in;\n\t\t                    }\n\t\t                    lar = a[k];\n\t\t                    in = k;\n\t\t                }\n\t\t                else if(a[k] > slar) {\n\t\t                    slar = a[k];\n\t\t                    in2 = k;\n\t\t                }\n\t\t            }\n\t\t            if(lar == slar & s==2){\n\t\t                char c1 = 'A';\n\t\t                char c2 = 'A';\n\t\t                c1 += in;\n\t\t                c2 += in2;\n\t\t                pw.print(\" \"+c1+c2);\n\t\t                a[in]--;\n\t\t                a[in2]--;\n\t\t                j--;\n\t\t            }\n\t\t            else {\n\t\t                char c1 = 'A';\n\t\t                c1 += in;\n\t\t                pw.print(\" \" + c1);\n\t\t                a[in]--;\n\t\t            }\n\t\t        }\n\t\t        int on = 0;\n\t\t        int tw = 0;\n\t\t        for(int f=0; f<s; f++) {\n\t\t            if(a[f] > 0) {\n\t\t                on = f;\n\t\t                a[f]--;\n\t\t                break;\n\t\t            }\n\t\t        }\n\t\t        for(int f=0; f<s; f++) {\n\t\t            if(a[f] > 0) {\n\t\t                tw = f;\n\t\t                break;\n\t\t            }\n\t\t        }\n\t\t        char ch1 = 'A';\n\t\t        char ch2 = 'A';\n\t\t        ch1 += on;\n\t\t        ch2 += tw;\n\t\t        pw.print(\" \"+ch1+ch2);\n\t\t        pw.println();\n\t\t    }\n\t\t    sc.close();\n\t\t    pw.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t    e.printStackTrace();\n\t\t}\n        //a.solve();\n        //a.writeOutput();\n    }\n}\n", "idx": "8482"}
{"func": "package googlejam8.p496;\nimport java.io.File;\nimport java.util.Formatter;\nimport java.util.Scanner;\n\n/**\n * Created by Derrick on 2016/05/08.\n *\n */\npublic class SenateEvacuation {\n\n\n    public static void main(String[] args){\n\n\n        Scanner input;\n        Formatter output;\n        int a=1,b = 1;\n        try{\n            output = new Formatter( \"output.txt\" );\n            input = new Scanner(new File( \"A-large(1).in\" ));//Change to console while coding\n            //input = new Scanner(System.in);\n            int T = input.nextInt();\n\n            char[] letters = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n            for (int i = 0 ; i < T ; i++ ) {\n\n                int N = input.nextInt();\n                int[] P = new int[N];\n                for( int j = 0 ; j < N ;j++ ){\n                    P[j] = input.nextInt();\n                }\n\n                int hold = 0;\n                boolean cont = true;\n\n                output.format(\"Case #%d: \",(i+1));\n                while( cont){\n                    int largest = 0;\n                    int num = 0;\n                    for( int j = 0 ; j < N ;j++ ){\n                        num += P[j];\n                    }\n\n                    int count = 0;\n                    for( int j = 0 ; j < N ;j++ ){\n                        if(P[j] == 0){\n                            cont = false;\n                            count++;\n                        }\n                        else{\n                            cont = true;\n                            break;\n                        }\n                    }\n                    if(count == N){\n                        break;\n                    }\n                    for( int j = 0 ; j < N ;j++ ){\n                        if(P[j] > largest){\n                            hold = j;\n                            largest = P[j];\n                        }\n                    }\n                    System.out.println(\"hold \" + hold);\n                    output.format(\"%c\",letters[hold]);\n\n                    P[hold]-= 1;\n                    largest = 0;\n                    count = 0;\n                    if(num %2 != 0){\n                        output.format(\" \");\n                        continue;\n                    }\n                    for( int j = 0 ; j < N ;j++ ){\n                        if(P[j] == 0){\n                            cont = false;\n                            count++;\n                        }\n                        else{\n                            cont = true;\n                            break;\n                        }\n                    }\n                    if(count == N){\n                        break;\n                    }\n                    for( int j = 0 ; j < N ;j++ ){\n                        if(P[j] > largest){\n                            hold = j;\n                            largest = P[j];;\n                        }\n                    }\n                    System.out.println(\"hold \" + hold);\n                    output.format(\"%c \",letters[hold]);\n                    P[hold]--;\n                }\n\n                output.format(\"\\n\");\n\n            }\n            output.close();\n        }\n        catch (Exception e){\n            e.printStackTrace();\n        }\n\n\n\n\n    }\n\n\n}", "idx": "8496"}
{"func": "package googlejam8.p498;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class MainClass {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\r\n\t\tFile fin = new File(\"input.in\");\r\n\t\tFile fout = new File(\"output.out\");\r\n\r\n\t\tScanner in = new Scanner(fin);\r\n\t\tPrintWriter out = new PrintWriter(fout);\r\n\r\n\t\tint T = in.nextInt();\r\n\t\tint n;\r\n\t\tArrayList<Integer> senators = new ArrayList<Integer>();\r\n\t\tint sum;\r\n\t\tString sol = \"\";\r\n\r\n\t\tfor (int cT = 1; cT <= T; cT++) {\r\n\t\t\tsenators.clear();\r\n\t\t\tsol = \"\";\r\n\t\t\tn = in.nextInt();\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\tsenators.add(in.nextInt());\r\n\t\t\tsum = 0;\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\tsum += senators.get(i);\r\n\r\n\t\t\twhile (sum-- > 2) {\r\n\t\t\t\tint max = 0, index = -1, index2 = -1;\r\n\t\t\t\tboolean match3 = false;\r\n\t\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\t\tif (senators.get(i) > max) {\r\n\t\t\t\t\t\tindex = i;\r\n\t\t\t\t\t\tmax = senators.get(i);\r\n\t\t\t\t\t\tindex2 = -1;\r\n\t\t\t\t\t} else if (senators.get(i) == max) {\r\n\t\t\t\t\t\tif (index2 == -1)\r\n\t\t\t\t\t\t\tindex2 = i;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tmatch3 = true;\r\n\t\t\t\t\t}\r\n\t\t\t\tif (index2 == -1 || match3) {\r\n\t\t\t\t\tsenators.set(index, max - 1);\r\n\t\t\t\t\tsol += \" \" + (char) (index + 'A');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsenators.set(index, max - 1);\r\n\t\t\t\t\tsenators.set(index2, max - 1);\r\n\t\t\t\t\tsol += \" \" + (char) (index + 'A') + (char) (index2 + 'A');\r\n\t\t\t\t\tsum--;\r\n\t\t\t\t}\r\n\t\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\t\tif (senators.get(i) > sum / 2)\r\n\t\t\t\t\t\tSystem.out.println(\"flawed\");\r\n\t\t\t}\r\n\t\t\tsol += \" \";\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\tif (senators.get(i) > 0)\r\n\t\t\t\t\tsol += (char) (i + 'A');\r\n\t\t\tout.println(\"Case #\" + cT + \":\" + sol);\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n\r\n}\r\n", "idx": "8498"}
{"func": "package googlejam8.p500;\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n//\t\t\tfinal static String FILE_NAME = \"A-test\";\r\n//\tfinal static String FILE_NAME = \"A-small-attempt2\";\r\n\tfinal static String FILE_NAME = \"A-large\";\r\n\r\n\tprivate Scanner in;\r\n\tprivate PrintWriter out;\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tLocale.setDefault(Locale.US);\n\t\tA r = new A();\r\n\t\tr.in = new Scanner(new File(A.FILE_NAME + \".in\"));\n\t\tr.out = new PrintWriter(new File(A.FILE_NAME + \".out\"));\n\t\tint tcn = r.in.nextInt();\n\t\tfor (int tc = 1; tc <= tcn; tc++) {\n\t\t\tint n = r.in.nextInt();\n\t\t\tint[] s = new int[n];\n\t\t\tint total = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ts[i] = r.in.nextInt();\n\t\t\t\ttotal += s[i];\n\t\t\t}\n\t\t\t\n\t\t\tString res = \"\";\n\t\t\twhile (total > 0) {\n\t\t\t\tres += ' ';\n\t\t\t\tint a = 0;\n\t\t\t\tfor (int i = 1; i < n; i++) {\n\t\t\t\t\tif (s[a] < s[i]) {\n\t\t\t\t\t\ta = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ts[a]--;\n\t\t\t\ttotal--;\n\t\t\t\tres += (char) ('A' + a);\n\t\t\t\n\t\t\t\tif (total == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tboolean ok = true;\n\t\t\t\tint b = 0;\n\t\t\t\tfor (int i = 1; i < n; i++) {\n\t\t\t\t\tif (s[b] < s[i]) {\n\t\t\t\t\t\tb = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ts[b]--;\n\t\t\t\ttotal--;\n\t\t\t\n\t\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t\tif (s[i] * 2 > total) {\n\t\t\t\t\t\tok = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (ok) {\n\t\t\t\t\tres += (char) ('A' + b);\n\t\t\t\t} else {\n\t\t\t\t\ts[b]++;\n\t\t\t\t\ttotal++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tres.trim();\n\t\t\tr.out.format(\"Case #%d: %s\\n\", tc, res);\n\t\t\tSystem.out.format(\"Case #%d: %s\\n\", tc, res);\n\t\t}\n\t\tr.out.close();\r\n\t}\r\n}\r\n", "idx": "8500"}
{"func": "package googlejam8.p502;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by dont on 08/05/16.\r\n */\r\npublic class A {\r\n    public static void main(String[] args) {\r\n        try {\r\n            Scanner scanner = new Scanner(new File(\"X:\\\\A\\\\A-large.in\"));\r\n            FileWriter fw = new FileWriter(\"X:\\\\A\\\\A-large.out\");\r\n\r\n            int T = Integer.valueOf(scanner.nextInt());\r\n            scanner.nextLine();\r\n            for (int i = 1; i <= T; i++) {\r\n                // handle each test case\r\n                int N = scanner.nextInt();\r\n                scanner.nextLine();\r\n\r\n                int[] P = new int[N];\r\n                for(int j=0; j<N; j++) {\r\n                    P[j] = scanner.nextInt();\r\n                }\r\n\r\n                // begin algorithm\r\n                StringBuffer result = new StringBuffer();\r\n                int numParties = N;\r\n                do {\r\n                    // find max1, max2\r\n                    int max1 = -1, max2 = -1;\r\n                    for(int j=0; j<N; j++) {\r\n                        if(j == 0 || P[j] > P[max1]) {\r\n                            max1 = j;\r\n                        }\r\n                    }\r\n                    for(int j=0; j<N; j++) {\r\n                        if(j != max1 && (max2 == -1 || P[j] > P[max2])) {\r\n                            max2 = j;\r\n                        }\r\n                    }\r\n\r\n                    if(numParties == 2 && P[max1] == P[max2]) {\r\n                        String party = String.valueOf((char) ('A' + max1)) + String.valueOf((char) ('A' + max2));\r\n                        result.append(party + \" \");\r\n                        P[max1]--;\r\n                        P[max2]--;\r\n                        if(P[max1] == 0)\r\n                            numParties -= 2;\r\n                    } else {\r\n                        result.append(String.valueOf((char) ('A' + max1)) + \" \");\r\n                        P[max1]--;\r\n                        if(P[max1] == 0)\r\n                            numParties--;\r\n                    }\r\n\r\n                    if(P[max1] == 0 && P[max2] == 0)\r\n                        break;\r\n                } while (true);\r\n                // end algorithm\r\n\r\n                fw.write(\"Case #\" + i + \": \" + result.toString() + \"\\n\");\r\n                fw.flush();\r\n            }\r\n            fw.flush();\r\n            fw.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n", "idx": "8502"}
{"func": "package googlejam8.p505;\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = null;\r\n        PrintWriter out = null;\r\n        try {\r\n            //these variables handle input and output from plain text files\r\n            in = new Scanner(new FileReader(\"input.txt\"));\r\n            out = new PrintWriter(\"output.txt\");\r\n\r\n            final char FIRST_CHAR = 'A';\r\n\r\n            int totalCases = in.nextInt();\r\n            for (int testCase = 1; testCase <= totalCases; testCase++) {\r\n\r\n                int n = in.nextInt();\r\n                int[] parties = new int[n];\r\n                int sum = 0;\r\n                for (int i = 0; i < n; i++) {\r\n                    parties[i] = in.nextInt();\r\n                    sum += parties[i];\r\n                }//end input\r\n\r\n                out.printf(\"Case #%d: \",testCase);\r\n\r\n\r\n                int maxIndex = 0;\r\n                if(sum % 2 == 1){\r\n\r\n                    maxIndex = 0;\r\n                    for (int i = 1; i < n; i++) {\r\n                        if(parties[maxIndex]<parties[i]){\r\n                            maxIndex = i;\r\n                        }\r\n                    }\r\n                    out.printf(\"%c \",FIRST_CHAR + ((char) maxIndex));\r\n                    sum--;\r\n                    parties[maxIndex]--;\r\n\r\n                }//end removing oddity\r\n\r\n\r\n                int weak;\r\n                int strong;\r\n                int temp =  0;\r\n                while(sum>0){\r\n                    weak = 0;\r\n                    strong = 1;\r\n                    if(parties[0]>= parties[1]){\r\n                        strong = 0;\r\n                        weak = 1;\r\n                    }\r\n                    for (int i = 2; i < n; i++) {\r\n                        if(parties[weak]<parties[i]){\r\n                            weak = i;\r\n                            if(parties[weak]>parties[strong]){\r\n                                temp = strong;\r\n                                strong = weak;\r\n                                weak = temp;\r\n                            }\r\n                        }\r\n                    }//end finding two max indices\r\n                    out.printf(\"%c%c \",FIRST_CHAR+((char) weak),FIRST_CHAR+((char) strong));\r\n                    parties[weak]--;\r\n                    parties[strong]--;\r\n                    sum -=2;\r\n                }\r\n                out.println();\r\n                out.flush();\r\n\r\n\r\n            }//end for cases\r\n\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            if (in != null)\r\n                in.close();\r\n            if (out != null)\r\n                out.close();\r\n        }\r\n    }\r\n}\r\n", "idx": "8505"}
{"func": "package googlejam8.p509;\n\r\n\r\nimport java.io.BufferedReader; \r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args) {\r\n\t\tFileReader file = null;\r\n\t\ttry {\r\n\t\t\tfile = new FileReader(\"E:\\\\Windows\\\\chrome download\\\\A-large.in\");\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e) {\r\n\t\t\t\r\n\t\t}\r\n\t\tBufferedReader in = new BufferedReader(file);\r\n\t\tint tests = 0;\r\n\t\ttry {\r\n\t\t\ttests = Integer.parseInt(in.readLine());\r\n\t\t}\r\n\t\tcatch (IOException e) {\r\n\t\t\t\r\n\t\t}\r\n\t\tfor (int i = 1; i <= tests; i++) {\r\n\t\t\tSystem.out.print(\"Case #\" + i + \":\");\r\n\t\t\tint n = 0;\r\n\t\t\ttry {\r\n\t\t\t\tn = Integer.parseInt(in.readLine());\r\n\t\t\t}\r\n\t\t\tcatch (IOException e) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tint[] senators = new int[n];\r\n\t\t\tint sum = 0;\r\n\t\t\tString[] s = null;\r\n\t\t\ttry {\r\n\t\t\t\ts = in.readLine().split(\" \");\r\n\t\t\t}\r\n\t\t\tcatch (IOException e) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\tint senator = 0;\r\n\t\t\t\tsenator = Integer.parseInt(s[j]);\r\n\t\t\t\tsum += senator;\r\n\t\t\t\tsenators[j] = senator;\r\n\t\t\t}\r\n\t\t\twhile (sum > 0) {\r\n\t\t\t\tint index1 = 0;\r\n\t\t\t\tfor (int j = 0; j < senators.length; j++) {\r\n\t\t\t\t\tif (senators[j] > senators[index1]) {\r\n\t\t\t\t\t\tindex1 = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsenators[index1]--;\r\n\t\t\t\tsum--;\r\n\t\t\t\tint index2 = 0;\r\n\t\t\t\tfor (int j = 0; j < senators.length; j++) {\r\n\t\t\t\t\tif (senators[j] > senators[index2] && sum != 0) {\r\n\t\t\t\t\t\tindex2 = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsenators[index2]--;\r\n\t\t\t\tsum--;\r\n\t\t\t\tint index3 = 0;\r\n\t\t\t\tboolean b = false;\r\n\t\t\t\tfor (int j = 0; j < senators.length; j++) {\r\n\t\t\t\t\tif (senators[j] > senators[index3] && sum != 0) {\r\n\t\t\t\t\t\tindex3 = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (senators[index3] == 0 || (sum - 1) / senators[index3] >= 1) {\r\n\t\t\t\t\tb = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsenators[index2]++;\r\n\t\t\t\t\tsum++;\r\n\t\t\t\t}\r\n\t\t\t\tchar x = (char) ('a' + index1);\r\n\t\t\t\tchar y;\r\n\t\t\t\tif (b) {\r\n\t\t\t\t\ty = (char) ('a' + index2);\r\n\t\t\t\t\tSystem.out.print(\" \" + x + y);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tSystem.out.print(\" \" + x);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"\");\r\n\t\t}\r\n\t}\r\n}", "idx": "8509"}
{"func": "package googlejam8.p515;\n\n\nimport java.util.*;\n\npublic class Solution {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\tScanner scan = new Scanner(System.in);\n\t\tint testNum = scan.nextInt();\n\t\tfor(int i=1;i<=testNum;i++){\n\t\t\tint numParties = scan.nextInt();\n\t\t\tint[] partyPeopleCount = new int[numParties];\n\t\t\tfor(int j=0;j<numParties;j++){\n\t\t\t\tpartyPeopleCount[j] = scan.nextInt();\n\t\t\t}\n\t\t\tchar[] partyName = new char[numParties];\n\t\t\tfor(int i1=0;i1<numParties;i1++){\n\t\t\t\tpartyName[i1] = (char)('A'+i1);\n\t\t\t}\n\t\t\t\n\t\t\tint numTotalPeople = 0;\n\t\t\tfor(int i2=0;i2<numParties;i2++){\n\t\t\t\tnumTotalPeople += partyPeopleCount[i2];\n\t\t\t}\n\t\t\t\n\t\t\tString plan1 = \"\";\n\t\t\twhile(numTotalPeople>0){\n\t\t\t\tint maxIndex1 = -1;\n\t\t\t\tint maxValue1 = Integer.MIN_VALUE;\n\t\t\t\tfor(int i1=0;i1<numParties;i1++){\n\t\t\t\t\tif(partyPeopleCount[i1]>maxValue1){\n\t\t\t\t\t\tmaxValue1 = partyPeopleCount[i1];\n\t\t\t\t\t\tmaxIndex1 = i1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint maxIndex = maxIndex1;\n\t\t\t\tint nextMaxIndex1 = -1;\n\t\t\t\tint nextMaxValue1 = Integer.MIN_VALUE;\n\t\t\t\tfor(int i1=0;i1<numParties;i1++){\n\t\t\t\t\tif(i1 != maxIndex && partyPeopleCount[i1]>nextMaxValue1){\n\t\t\t\t\t\tnextMaxValue1 = partyPeopleCount[i1];\n\t\t\t\t\t\tnextMaxIndex1 = i1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint nextMaxIndex = nextMaxIndex1;\n\t\t\t\tint maxValue = partyPeopleCount[maxIndex];\n\t\t\t\tint nextMaxValue = partyPeopleCount[nextMaxIndex];\n\t\t\t\t\n\t\t\t\tif(maxValue>=2){\n\t\t\t\t\t//evacuate two of max party\n\t\t\t\t\tpartyPeopleCount[maxIndex] -= 2;\n\t\t\t\t\tnumTotalPeople -= 2;\n\t\t\t\t\tint maxIndex2 = -1;\n\t\t\t\t\tint maxValue2 = Integer.MIN_VALUE;\n\t\t\t\t\tfor(int i2=0;i2<numParties;i2++){\n\t\t\t\t\t\tif(partyPeopleCount[i2]>maxValue2){\n\t\t\t\t\t\t\tmaxValue2 = partyPeopleCount[i2];\n\t\t\t\t\t\t\tmaxIndex2 = i2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint newMaxIndex = maxIndex2;\n\t\t\t\t\tif(partyPeopleCount[newMaxIndex] > numTotalPeople/2){\n\t\t\t\t\t\t//recover\n\t\t\t\t\t\tpartyPeopleCount[maxIndex] += 2;\n\t\t\t\t\t\tnumTotalPeople += 2;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tplan1 += String.valueOf(partyName[maxIndex]);\n\t\t\t\t\t\tplan1 += String.valueOf(partyName[maxIndex]);\n\t\t\t\t\t\tplan1 += \" \";\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(nextMaxValue>=1){\n\t\t\t\t\t//evacuate one of max party, one of next max party\n\t\t\t\t\tpartyPeopleCount[maxIndex]--;\n\t\t\t\t\tpartyPeopleCount[nextMaxIndex]--;\n\t\t\t\t\tnumTotalPeople -= 2;\n\t\t\t\t\tint maxIndex2 = -1;\n\t\t\t\t\tint maxValue2 = Integer.MIN_VALUE;\n\t\t\t\t\tfor(int i2=0;i2<numParties;i2++){\n\t\t\t\t\t\tif(partyPeopleCount[i2]>maxValue2){\n\t\t\t\t\t\t\tmaxValue2 = partyPeopleCount[i2];\n\t\t\t\t\t\t\tmaxIndex2 = i2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint newMaxIndex = maxIndex2;\n\t\t\t\t\tif(partyPeopleCount[newMaxIndex] > numTotalPeople/2){\n\t\t\t\t\t\t//recover\n\t\t\t\t\t\tpartyPeopleCount[maxIndex]++;\n\t\t\t\t\t\tpartyPeopleCount[nextMaxIndex]++;\n\t\t\t\t\t\tnumTotalPeople += 2;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tplan1 += String.valueOf(partyName[maxIndex]);\n\t\t\t\t\t\tplan1 += String.valueOf(partyName[nextMaxIndex]);\n\t\t\t\t\t\tplan1 += \" \";\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//evacuate one from max party\n\t\t\t\tpartyPeopleCount[maxIndex]--;\n\t\t\t\tnumTotalPeople--;\n\t\t\t\tplan1 += String.valueOf(partyName[maxIndex]);\n\t\t\t\tplan1 += \" \";\n\t\t\t\t\n\t\t\t}\n\t\t\tString plan = plan1;\n\t\t\tSystem.out.printf(\"Case #%d: %s\\n\", i, plan.trim());\n\t\t}\n\t\tscan.close();\n\t}\n\n}\n", "idx": "8515"}
{"func": "package googlejam8.p520;\n\r\n\r\nimport java.io.*;\r\nimport java.util.StringTokenizer;\r\nimport java.util.Vector;\r\n\r\n/**\r\n * Created by Brijesh on 08-05-2016.\r\n */\r\npublic class senateEvac {\r\n    public static void main (String[] args) throws Exception {\r\n        //BufferedReader br = new BufferedReader(new FileReader(\"C://Users/Brijesh/Downloads/A-small-attempt0.in\"));\r\n        BufferedReader br = new BufferedReader(new FileReader(\"C://Users/Brijesh/Downloads/A-large.in\"));\r\n        //BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        StringTokenizer st;\r\n        int t=Integer.parseInt(br.readLine());\r\n        for(int i=1;i<=t;i++){\r\n            int n=Integer.parseInt(br.readLine());\r\n            int[] arr=new int[n];\r\n            st=new StringTokenizer(br.readLine());\r\n            int sum=0;\r\n            for(int j=0;j<n;j++){\r\n                arr[j]=Integer.parseInt(st.nextToken());\r\n                sum+=arr[j];\r\n            }\r\n            String str=\"\";\r\n            while(sum>0){\r\n                Vector<Integer> v=new Vector<Integer>();\r\n                int max=0,oldmax=0;\r\n                for(int j=0;j<n;j++){\r\n                    if(arr[j]>max){\r\n                        oldmax=max;\r\n                        max=arr[j];\r\n                        v.clear();\r\n                        v.add(j);\r\n                    }\r\n                    else if(arr[j]==max)\r\n                        v.add(j);\r\n                    else if(arr[j]>oldmax)\r\n                        oldmax=arr[j];\r\n                }\r\n                if(v.size()%2==0){\r\n                    for(int k=1;k<=max-oldmax;k++){\r\n                        for(int j=0;j<v.size();j+=2){\r\n                            char a=(char)(v.elementAt(j)+65);\r\n                            char b=(char)(v.elementAt(j+1)+65);\r\n                            arr[v.elementAt(j)]--;\r\n                            arr[v.elementAt(j+1)]--;\r\n                            str+=a;\r\n                            str+=b;\r\n                            str+=\" \";\r\n                            sum-=2;\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    for(int k=1;k<=max-oldmax;k++){\r\n                        char c=(char)(v.elementAt(0)+65);\r\n                        str+=c;\r\n                        str+=\" \";\r\n                        sum--;\r\n                        arr[v.elementAt(0)]--;\r\n                        for(int j=1;j<v.size();j+=2){\r\n                            char a=(char)(v.elementAt(j)+65);\r\n                            char b=(char)(v.elementAt(j+1)+65);\r\n                            arr[v.elementAt(j)]--;\r\n                            arr[v.elementAt(j+1)]--;\r\n                            str+=a;\r\n                            str+=b;\r\n                            str+=\" \";\r\n                            sum-=2;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            System.out.println(\"Case #\"+i+\": \"+str.trim());\r\n        }\r\n    }\r\n}\r\n", "idx": "8520"}
{"func": "package googlejam8.p522;\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n *\r\n * @author Saumil\r\n */\r\npublic class roundOne{\r\n\r\n    int val;\r\n    char c;\r\n    \r\n    public roundOne(int val, char c)\r\n    {\r\n        this.val = val;\r\n        this.c = c;\r\n    }\r\n    \r\n    public static void main(String[] args)\r\n    {\r\n        Scanner sc = new Scanner(System.in);\r\n        long n = sc.nextLong();\r\n        \r\n        \r\n        for(long i = 0; i < n;)\r\n        {\r\n            i++;\r\n            \r\n            ArrayList<roundOne> hm = new ArrayList<roundOne>();\r\n            \r\n            int numberOfParties = sc.nextInt();\r\n            \r\n            char c = 'A';\r\n            \r\n            int sum = 0;\r\n            for(int k = 0; k < numberOfParties; k++)\r\n            {\r\n                int p = sc.nextInt();\r\n                sum = sum + p;\r\n                hm.add(new roundOne(p, c++));\r\n            }\r\n            \r\n            System.out.print(\"Case #\" + i + \":\");\r\n            Collections.sort(hm, new Comparator<roundOne>(){\n\t\t\t        public int compare(roundOne o1, roundOne o2){\n\t\t\t            if(o1.val == o2.val)\n\t\t\t                return 0;\n\t\t\t            return o1.val < o2.val ? 1 : -1;\n\t\t\t        }\n\t\t\t   });\r\n            roundOne r1, r2;\r\n            \r\n            do\r\n            {\r\n                System.out.print(\" \");\r\n                r1 = hm.get(0);\r\n                \r\n                System.out.print(r1.c);\n\t\t\t\tr1.val--;\r\n                \r\n                r2 = hm.get(1);\r\n                sum--;\r\n                \r\n                if(sum != 2)\r\n                {\r\n                    sum--;\r\n                    if(r1.val > r2.val) {\n\t\t\t\t\t\tSystem.out.print(r1.c);\n\t\t\t\t\t\tr1.val--;\n\t\t\t\t\t} else if(r2.val > 0) {\n\t\t\t\t\t\tSystem.out.print(r2.c);\n\t\t\t\t\t\tr2.val--;\n\t\t\t\t\t}\r\n                }\r\n                \r\n                    \r\n                \r\n                Collections.sort(hm, new Comparator<roundOne>(){\n\t\t\t\t        public int compare(roundOne o1, roundOne o2){\n\t\t\t\t            if(o1.val == o2.val)\n\t\t\t\t                return 0;\n\t\t\t\t            return o1.val < o2.val ? 1 : -1;\n\t\t\t\t        }\n\t\t\t\t   });    \r\n            }while(hm.get(0).val > 0);\r\n            \r\n            System.out.println();\r\n        }\r\n    }\r\n}\r\n", "idx": "8522"}
{"func": "package googlejam8.p523;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class SenateEvacuation {\r\n\tstatic PrintWriter writer;\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\r\n\t\tScanner sc = new Scanner(new File(\"in.txt\"));\r\n\t\twriter = new PrintWriter(\"out.txt\", \"UTF-8\");\r\n\t\tint T = sc.nextInt();\r\n\t\tfor (int t = 0; t < T; t++) {\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint[] s = new int[n];\r\n\t\t\tint count = 0;\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\ts[i] = sc.nextInt();\r\n\t\t\t\tcount += s[i];\r\n\t\t\t}\r\n\t\t\tSystem.out.println(Arrays.toString(s));\r\n\t\t\tString evac = \"\";\r\n\t\t\twhile (count > 0) {\r\n\r\n\t\t\t\tArrayList<Integer> candidate = new ArrayList<>();\r\n\t\t\t\t// for (int i=0;i<n;i++)candidate.add(i);\r\n\r\n\t\t\t\ttop: for (int i = 0; i < n; i++) {\r\n\t\t\t\t\tfor (int k = 0; k < n; k++) {\r\n//\t\t\t\t\t\tSystem.out.println(Arrays.toString(s));\r\n\t\t\t\t\t\tboolean ij = false;\r\n\t\t\t\t\t\tboolean ik = false;\r\n\t\t\t\t\t\tif (s[i] > 0) {\r\n\t\t\t\t\t\t\ts[i]--;\r\n\t\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t\t\tij = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (s[k] > 0) {\r\n\t\t\t\t\t\t\ts[k]--;\r\n\t\t\t\t\t\t\tcount--;\r\n\t\t\t\t\t\t\tik = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!ij&&!ik)continue;\r\n\t\t\t\t\t\tboolean flag = true;\r\n\t\t\t\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\t\t\t\tif (s[j] > count / 2) {\r\n\t\t\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (flag) {\r\n\t\t\t\t\t\t\tif (ij) {\r\n\t\t\t\t\t\t\t\tcandidate.add(i);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (ik)\r\n\t\t\t\t\t\t\t\tcandidate.add(k);\r\n\t\t\t\t\t\t\tbreak top;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (ij) {\r\n\t\t\t\t\t\t\t\ts[i]++;\r\n\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (ik) {\r\n\t\t\t\t\t\t\t\ts[k]++;\r\n\t\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int i : candidate) {\r\n\t\t\t\t\tevac += (char) (65 + i);\r\n\t\t\t\t\t// s[i]--;\r\n\t\t\t\t\t// count--;\r\n\t\t\t\t}\r\n\t\t\t\tevac += \" \";\r\n\t\t\t\t// System.out.println(evac);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tevac = evac.substring(0, evac.length() - 1);\r\n\t\t\tString s1 = \"Case #\" + (t + 1) + \": \" + evac;\n\t\t\twriter.println(s1);\n\t\t\tSystem.out.println(s1);\r\n\t\t}\r\n\t\twriter.close();\r\n\t}\r\n}\r\n", "idx": "8523"}
{"func": "package googlejam8.p525;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Scanner;\r\n\r\n/* Solution to codejame 1C question 1 2016 */\r\n\r\n\r\npublic class Senate {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tif(args.length == 0) {\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"No arguments provided\");\r\n\t\t\treturn;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tFile file = new File(args[0]);\r\n\t\t\tScanner input = new Scanner(file);\r\n\t\t\tFileWriter fileOut = new FileWriter(\"output.txt\");\r\n\t\t\tBufferedWriter writer = new BufferedWriter(fileOut);\r\n\t\t\t\t\t\t\r\n\t\t\tint numTests = input.nextInt();\r\n\t\t\t\r\n\t\t\tint i;\r\n\t\t\t\r\n\t\t\tfor(i = 0; i < numTests; i++) {\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(\"\\nTest #\" + i);\r\n\t\t\t\t\r\n\t\t\t\tint numParties = input.nextInt();\r\n\t\t\t\t\r\n\t\t\t\t//We will add the members to the room and then reverse the order.\r\n\t\t\t\t\r\n\t\t\t\t//An array to hold the remaining party members to be added.\r\n\t\t\t\tint[] partyMembersOutside = new int[numParties];\r\n\t\t\t\tint totalMembers = 0;\r\n\t\t\t\t\r\n\t\t\t\tint j;\r\n\t\t\t\t\r\n\t\t\t\tfor(j=0; j<numParties; j++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tpartyMembersOutside[j] = input.nextInt();\r\n\t\t\t\t\ttotalMembers += partyMembersOutside[j];\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//An array to hold how many members are in the room already\r\n\t\t\t\tint membersInside = 0;\r\n\t\t\t\t\r\n\t\t\t\t//Also create an arraylist of strings to store the members going in\r\n\t\t\t\t//This will need to be reversed at the end\r\n\t\t\t\tArrayList<String> entries = new ArrayList<String>();\r\n\t\t\t\t\r\n\t\t\t\t//Add from the start of the alphabet ensuring that people always go in in twos s.t. the two being added are different\r\n\t\t\t\tint k;\r\n\t\t\t\tfor(k = 0; k < numParties; k++) {\r\n\t\t\t\t\tSystem.out.println(k);\r\n\t\t\t\t\twhile(partyMembersOutside[k] > 0) {\r\n\t\t\t\t\t\t//Add members from party k with any other members\r\n\t\t\t\t\t\tint m;\r\n\t\t\t\t\t\tboolean added = false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(m = k+1; m < numParties && !added; m++) {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(partyMembersOutside[m] > 0) {\r\n\t\t\t\t\t\t\t\t//Add k and m\r\n\t\t\t\t\t\t\t\tpartyMembersOutside[m]--;\r\n\t\t\t\t\t\t\t\tpartyMembersOutside[k]--;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tchar charM = (char) (65 + m);\r\n\t\t\t\t\t\t\t\tchar charK = (char) (65 + k);\r\n\t\t\t\t\t\t\t\tString entry = \" \" + charM + charK;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tSystem.out.println(entry);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tentries.add(entry);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tadded = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\twhile(!added && partyMembersOutside[k] > 0) {\r\n\t\t\t\t\t\t\tchar charK = (char) (65 + k);\r\n\t\t\t\t\t\t\tpartyMembersOutside[k]--;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tString entry = \" \" + charK;\r\n\t\t\t\t\t\t\tentries.add(entry);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tCollections.reverse(entries);\r\n\t\t\t\twriter.write(\"Case #\" + (i+1) + \":\");\r\n\t\t\t\tfor(String string: entries) {\r\n\t\t\t\t\twriter.write(string);\r\n\t\t\t\t}\r\n\t\t\t\twriter.write(\"\\n\");\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twriter.close();\r\n\t\t\tfileOut.close();\r\n\t\t\tinput.close();\r\n\t\t\t\r\n\t\t} catch(FileNotFoundException e) {\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Error reading input file\");\r\n\t\t\t\r\n\t\t} catch(IOException e) {\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Error writing output\");\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "8525"}
{"func": "package googlejam8.p542;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\n\npublic class SenateEvacuation {\n\n\tpublic static void main(String[] args) \n\t{\n\t\ttry\n\t\t{\n\t\t\tString inputName = \"A-large (2).in\";\n\t\t\tBufferedReader input = new BufferedReader(new FileReader(inputName));\n\t\t\tBufferedWriter output = new BufferedWriter(new FileWriter(\"output.txt\"));\n\t\t\t//read test case number\n\t\t\tString line = input.readLine();\n\t\t\tint testNr = new Integer(line).intValue();\n\t\t\t\n\t\t\tfor (int i = 0; i < testNr; i++)\n\t\t\t{\n\t\t\t\tSenateEvacuation test = new SenateEvacuation();\n\t\t\t\tline = input.readLine();\n\t\t\t\tint N = new Integer(line).intValue();\n\t\t\t\tline = input.readLine();\n\t\t\t\tString[] parts = line.split(\" \");\n\t\t\t\tint[] P = new int[parts.length];\n\t\t\t\tint count = 0;\n\t\t\t\tfor (int i2 = 0; i2 < N; i2++)\n\t\t\t\t{\n\t\t\t\t\tP[i2] = new Integer(parts[i2]).intValue();\n\t\t\t\t\tcount += P[i2];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tStringBuffer sb = new StringBuffer();\n\t\t\t\tif (N == 2)\n\t\t\t\t{\n\t\t\t\t\tfor (int i1 = 0; i1 < P[0]; i1++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (i1>0) sb.append(\" \");\n\t\t\t\t\t\tsb.append(\"AB\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboolean first = true;\n\t\t\t\t\twhile (count > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (count < 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!first)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsb.append(\" \");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (int i4 = 0; i4 < N; i4++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (P[i4] > 0) sb.append((char)('A'+i4));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (count == 3)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!first)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsb.append(\" \");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse first = false;\n\t\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\t\tfor (int i3 = 0; !found && i3 < N; i3++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (P[i3] > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsb.append((char)('A'+i3));\n\t\t\t\t\t\t\t\t\tP[i3] -= 1;\n\t\t\t\t\t\t\t\t\tcount -= 1;\n\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tint max_index = 0;\n\t\t\t\t\t\t\tint max = P[0];\n\t\t\t\t\t\t\tint max_index2 = 0;\n\t\t\t\t\t\t\tint max2 = P[0];\n\t\t\t\t\t\t\tif (P[1] > P[0])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmax_index = 1;\n\t\t\t\t\t\t\t\tmax = P[1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmax_index2 = 1;\n\t\t\t\t\t\t\t\tmax2 = P[1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (int i5 = 2; i5 < N; i5++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (P[i5] > max)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmax2 = max;\n\t\t\t\t\t\t\t\t\tmax_index2 = max_index;\n\t\t\t\t\t\t\t\t\tmax = P[i5];\n\t\t\t\t\t\t\t\t\tmax_index = i5;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if (P[i5] > max2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmax2 = P[i5];\n\t\t\t\t\t\t\t\t\tmax_index2 = i5;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!first)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsb.append(\" \");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse first = false;\n\t\t\t\t\t\t\tsb.append((char)('A'+max_index));\n\t\t\t\t\t\t\tsb.append((char)('A'+max_index2));\n\t\t\t\t\t\t\tP[max_index]-=1;\n\t\t\t\t\t\t\tP[max_index2]-=1;\n\t\t\t\t\t\t\tcount -= 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString res = sb.toString();\n\t\t\t\tString toWrite = \"Case #\" + (i+1) + \": \" + res;\n\t\t\t\tSystem.out.println(toWrite);\n\t\t\t\toutput.write(toWrite + \"\\n\");\n\t\t\t}\n\t\t\toutput.flush();\n\t\t\toutput.close();\n\t\t\tinput.close();\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n}\n", "idx": "8542"}
{"func": "package googlejam8.p547;\n\n\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class R1CA {\n\n    public static void main(String[] args) throws FileNotFoundException {\n\n        Scanner sc = new Scanner(System.in);\n        PrintWriter writer = new PrintWriter(\"out.txt\");\n        int T = sc.nextInt();\n        for (int i = 0; i < T; i++) {\n            int N = sc.nextInt();\n            Map<Integer, Integer> c = new HashMap<>();\n            for (int j = 0; j < N; j++) {\n                c.put(j, sc.nextInt());\n            }\n            StringBuilder sb = new StringBuilder();\n            while (true) {\n                int m1 = -1, m2 = -1;\n                int m1v = 0, m2v = 0;\n\n                for (Map.Entry<Integer, Integer> entry : c.entrySet()) {\n                    if (entry.getValue() > m1v) {\n                        if (c.containsKey(m2)) {\n                            c.put(m2, c.get(m2) + 1);\n                        }\n                        m2v = m1v;\n                        m2 = m1;\n                        m1v = entry.getValue();\n                        m1 = entry.getKey();\n                        entry.setValue(entry.getValue() - 1);\n                    } else if (entry.getValue() > m2v) {\n                        if (c.containsKey(m2)) {\n                            c.put(m2, c.get(m2) + 1);\n                        }\n                        m2 = entry.getKey();\n                        m2v = entry.getKey();\n                        entry.setValue(entry.getValue() - 1);\n                    }\n\n\n                }\n                if (c.containsKey(m2) && c.containsKey(m1)) {\n                    int c1 = c.get(m1);\n                    int c2 = c.get(m2);\n                    if (c1 > c2) {\n                        c.put(m2, c.get(m2) + 1);\n                        m2 = m1;\n                        m2v = m1v;\n                        c.put(m1, c.get(m1) - 1);\n                    }\n                }\n                if (c.containsKey(m1)) {\n                    sb.append((char) ('A' + m1));\n                }\n                if (c.containsKey(m2)) {\n                    sb.append((char) ('A' + m2));\n                }\n                sb.append(\" \");\n                boolean cont = false;\n                for (Map.Entry<Integer, Integer> entry : c.entrySet()) {\n                    if (entry.getValue() > 0) {\n                        cont = true;\n                        break;\n                    }\n                }\n                if (!cont) {\n                    break;\n                }\n\n\n            }\n\n            String re = sb.toString();\n            String[] sp = re.split(\" \");\n            if (sp.length >1 && sp[sp.length - 1].length() < 2) {\n                String aa = sp[sp.length - 1];\n                sp[sp.length - 1] = sp[sp.length - 2];\n                sp[sp.length - 2] = aa;\n                sb = new StringBuilder();\n                for (String s : sp) {\n                    sb.append(s).append(\" \");\n                }\n\n            }\n\n            writer.println(\"Case #\" + (i + 1) + \": \" + sb.toString());\n        }\n        writer.flush();\n        writer.close();\n    }\n\n}\n", "idx": "8547"}
{"func": "package googlejam8.p549;\nimport java.io.*;\nimport java.util.Scanner;\n\n/**\n * Created by juanma on 08/05/16.\n */\npublic class A {\n\n\n    private static final boolean TEST = false;\n    private static final String DOWNLOADS = \"/Users/juanma/Downloads/\";\n    private static final String FILE = \"A-large\";\n\n    public static void main(String[] args) {\n\n        Scanner in = null;\n        PrintStream out = null;\n\n        if (TEST) {\n            in = new Scanner(System.in);\n            out = System.out;\n        } else {\n            try {\n                in = new Scanner(new File(DOWNLOADS + FILE + \".in\"));\n                out = new PrintStream(new BufferedOutputStream(new FileOutputStream(DOWNLOADS + FILE + \".out\")), true);\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n\n        }\n\n        int t = in.nextInt();\n        for (int tc = 1; tc <= t; tc++) {\n            int n = in.nextInt();\n            int[] p = new int[n];\n            int sum = 0;\n            for (int i = 0; i < n; i++) {\n                p[i]=in.nextInt();\n                sum=sum+p[i];\n            }\n\n            StringBuilder sb = new StringBuilder();\n            int exit = 0;\n            while (sum>0) {\n                int max = 0;\n\t\t\t\tint maxP1 = -1;\n\t\t\t\tfor (int i = 0; i < p.length; i++) {\n\t\t\t\t    if (p[i]>max) {\n\t\t\t\t        max = p[i];\n\t\t\t\t        maxP1=i;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\tint maxP = maxP1;\n                p[maxP]--;\n                sum--;\n                sb.append((char) (maxP+(int)'A'));\n                exit++;\n                if (exit==2 || sum ==2){\n                    exit = 0;\n                    sb.append(' ');\n                }\n\n            }\n            out.println(String.format(\"Case #%d: %s\",tc,sb.toString()));\n\n\n        }\n\n        in.close();\n        out.close();\n        System.exit(0);\n    }\n}\n", "idx": "8549"}
{"func": "package googlejam8.p551;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.text.*;\r\nimport java.math.*;\r\nimport java.util.Scanner;\r\n \r\n/* Class SelectionSort */\r\n class SelectionSort {\r\n       \r\n    /* Main method */\r\n    public static void main(String[] args) \r\n    {\r\n        Scanner sc = new Scanner( System.in );\r\n int t=sc.nextInt();\r\n for(int r=1;r<=t;r++)\r\n {\r\n        int n, i;\r\n        n = sc.nextInt();\r\n        int ar[] = new int[ n ];\r\n        char br[] = new char[ n ];\r\n        char cha='A';\r\n        int s=0;\r\n        for (i = 0; i < n; i++)\r\n            {ar[i] = sc.nextInt();\r\n            s+=ar[i];\r\n            br[i]=cha++;}\r\n            int N = ar.length;\r\n        int  j, pos, temp;\r\n        for (i = 0; i < N-1; i++)\r\n        {\r\n            pos = i;\r\n            for (j = i+1; j < N; j++)\r\n            {\r\n                if (ar[j] < ar[pos])\r\n                {\r\n                    pos = j;\r\n                }\r\n            }\r\n            char tt=' ';\r\n            /* Swap arr[i] and arr[pos] */\r\n            temp = ar[i];tt=br[i];\r\n            ar[i] = ar[pos];br[i]=br[pos];\r\n            ar[pos]= temp;            br[pos]=tt;\r\n        }        \r\n    System.out.print(\"Case #\");\r\n    System.out.print(r);\r\n       System.out.print(\":\");\r\n       System.out.print(\" \");\r\n            double ss=(double)s;\r\n        while(s>0)\r\n        { i=n-1;\r\n                       if( (double)s-2>=(double)s/2 || (s-2)==0)\r\n            {System.out.print(br[i] );\r\n            System.out.print(br[i-1] );\r\n            System.out.print(\" \" );\r\n            ar[i]--; ar[i-1]--;s=s-2;}\r\n            else{\r\n            ar[i]--;\r\n            s=s-1;\r\n            System.out.print(br[i]);\r\n                     System.out.print(\" \" );\r\n            }\r\n                 \r\n                   for (int ii = 0; ii < N-1; ii++)\r\n        {\r\n            pos = ii;\r\n            for (j = ii+1; j < N; j++)\r\n            {\r\n                if (ar[j] < ar[pos])\r\n                {\r\n                    pos = j;\r\n                }\r\n            }\r\n             char tt=' ';\r\n            /* Swap arr[i] and arr[pos] */\r\n            temp = ar[ii];tt=br[ii];\r\n            ar[ii] = ar[pos];br[ii]=br[pos];\r\n            ar[pos]= temp;            br[pos]=tt;\r\n        }        \r\n        \r\n    }\r\n    System.out.println();\r\n }\r\n}}", "idx": "8551"}
{"func": "package googlejam8.p566;\n\nimport java.util.*;\n class Que3 {\n\tpublic static void main(String [] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tint t=s.nextInt();\n\t\tfor(int i=0;i<t;i++){\n\t\t\tint n=s.nextInt();\n\t\t\tint [] store = new int [n];\n\t\t\tint sum=0;\n\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\tstore[j]=s.nextInt();\n\t\t\t\tsum=sum+store[j];\n\t\t\t}\n\t\t\tSystem.out.print(\"Case #\");\n\t\t\tSystem.out.print(i+1);\n\t\t\tSystem.out.print(\": \");\n\t\t\twhile(sum>3){\n\t\t\t\tint max1=0;\n\t\t\t\tint max2=0;\n\t\t\t\tint index=-1;\n\t\t\t\tint index2=-1;\n\t\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\t\tif(store[j]>max1){\n\t\t\t\t\t\tmax1=store[j];\n\t\t\t\t\t\tindex=j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\t\tif(store[j]>max2 && index!=j){\n\t\t\t\t\t\tmax2=store[j];\n\t\t\t\t\t\tindex2=j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstore[index]=store[index]-1;\n\t\t\t\tstore[index2]=store[index2]-1;\n\t\t\t\tint dummy1=65+index;\n\t\t\t\tint dummy2=65+index2;\n\t\t\t\tSystem.out.print((char)(dummy1));\n\t\t\t\tSystem.out.print((char)(dummy2));\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t\tsum=sum-2;\n\t\t\t}\n\t\t\tif(sum==2){\n\t\t\t\tint max1=0;\n\t\t\t\tint max2=0;\n\t\t\t\tint index=-1;\n\t\t\t\tint index2=-1;\n\t\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\t\tif(store[j]>max1){\n\t\t\t\t\t\tmax1=store[j];\n\t\t\t\t\t\tindex=j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\t\tif(store[j]>max2 && index!=j){\n\t\t\t\t\t\tmax2=store[j];\n\t\t\t\t\t\tindex2=j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstore[index]=store[index]-1;\n\t\t\t\tstore[index2]=store[index2]-1;\n\t\t\t\tint dummy1=65+index;\n\t\t\t\tint dummy2=65+index2;\n\t\t\t\tSystem.out.print((char)(dummy1));\n\t\t\t\tSystem.out.print((char)(dummy2));\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint max1=0;\n\t\t\t\tint max2=0;\n\t\t\t\tint index=-1;\n\t\t\t\tint index2=-1;\n\t\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\t\tif(store[j]>max1){\n\t\t\t\t\t\tmax1=store[j];\n\t\t\t\t\t\tindex=j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstore[index]=store[index]-1;\n\t\t\t\tint dummy1=65+index;\n\t\t\t\tSystem.out.print((char)(dummy1));\n\t\t\t\t\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t max1=0;\n\t\t\t\t max2=0;\n\t\t\t\t index=-1;\n\t\t\t\t index2=-1;\n\t\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\t\tif(store[j]>max1){\n\t\t\t\t\t\tmax1=store[j];\n\t\t\t\t\t\tindex=j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\t\tif(store[j]>max2 && index!=j){\n\t\t\t\t\t\tmax2=store[j];\n\t\t\t\t\t\tindex2=j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstore[index]=store[index]-1;\n\t\t\t\tstore[index2]=store[index2]-1;\n\t\t\t\t dummy1=65+index;\n\t\t\t\tint dummy2=65+index2;\n\t\t\t\tSystem.out.print((char)(dummy1));\n\t\t\t\tSystem.out.print((char)(dummy2));\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "idx": "8566"}
{"func": "package googlejam8.p567;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Comparator;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by crist on 5/8/2016.\r\n * <p/>\r\n * https://code.google.com/codejam/contest/4314486/dashboard\r\n */\r\npublic class SenateEvacuation {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        final int INPUT_FILE_NUMBER = 3;\r\n        Scanner scanner = new Scanner(new File(\"C:\\\\dev\\\\Projects\\\\algorithms\\\\TestCases\\\\GoogleCodeJam\\\\SenateEvacuation\\\\input\" + INPUT_FILE_NUMBER + \".txt\"));\r\n        PrintWriter printWriter = new PrintWriter(new File(\"C:\\\\dev\\\\Projects\\\\algorithms\\\\TestCases\\\\GoogleCodeJam\\\\SenateEvacuation\\\\output\" + INPUT_FILE_NUMBER + \".txt\"));\r\n\r\n        int tc = scanner.nextInt();\r\n        for (int t = 0; t < tc; t++) {\r\n            int n = scanner.nextInt();\r\n            int[] a = new int[n];\r\n\r\n            int remaining = 0;\r\n            for (int i = 0; i < a.length; i++) {\r\n                a[i] = scanner.nextInt();\r\n                remaining += a[i];\r\n            }\r\n\r\n            printWriter.write(\"Case #\" + (t + 1) + \":\");\r\n            while (remaining > 0) {\r\n                // find the top maximums, sort as time is not an issue\r\n                Integer[] sorted = new Integer[a.length];\r\n                for (int i = 0; i < a.length; i++) {\r\n                    sorted[i] = a[i];\r\n                }\r\n\r\n                Arrays.sort(sorted, new Comparator<Integer>() {\r\n                    @Override\r\n                    public int compare(Integer o1, Integer o2) {\r\n                        return o2 - o1;\r\n                    }\r\n                });\r\n\r\n\r\n                boolean okToRemove2 = true;\r\n                boolean firstRemoved = false;\r\n                boolean secondRemoved = false;\r\n                boolean mustRemoveSame = a[0] - a[1] > 1;\r\n\r\n                // try to remove 2\r\n                int[] removedPos = new int[2];\r\n                for (int i = 0; i < a.length; i++) {\r\n                    if (a[i] == sorted[0] && !firstRemoved) {\r\n                        firstRemoved = true;\r\n                        removedPos[0] = i;\r\n                        if (mustRemoveSame) {\r\n                            secondRemoved = true;\r\n                            removedPos[1] = i;\r\n                        }\r\n                        int toRemove = 1 + (mustRemoveSame ? 1 : 0);\r\n                        a[i] -= toRemove;\r\n                    } else if (a[i] == sorted[1] && !mustRemoveSame && !secondRemoved) {\r\n                        removedPos[1] = i;\r\n                        a[i]--;\r\n                        secondRemoved = true;\r\n                    }\r\n\r\n                    if (a[i] > (remaining - 2) / 2) {\r\n                        okToRemove2 = false;\r\n                    }\r\n                }\r\n\r\n                if (!okToRemove2) {\r\n                    a[removedPos[0]]++;\r\n                    a[removedPos[1]]++;\r\n\r\n                    // just remove the maximum\r\n                    boolean removed = false;\r\n                    for (int i = 0; i < a.length; i++) {\r\n                        if (a[i] == sorted[0] && !removed) {\r\n                            printWriter.write(\" \");\r\n                            printWriter.write((char) ('A' + i));\r\n                            a[i]--;\r\n                            removed = true;\r\n                        }\r\n                        if (a[i] > (remaining - 1) / 2) {\r\n                            System.out.println(\"Error test case \" + t + \"a \" + i + \" \" + a[i] + \" remaining \" + remaining);\r\n                        }\r\n                    }\r\n                    remaining--;\r\n                } else {\r\n                    remaining -= 2;\r\n                    printWriter.write(\" \");\r\n                    printWriter.write((char) ('A' + removedPos[0]));\r\n                    printWriter.write((char) ('A' + removedPos[1]));\r\n                }\r\n            }\r\n            printWriter.write(\"\\n\");\r\n        }\r\n        printWriter.flush();\r\n        printWriter.close();\r\n    }\r\n}\r\n", "idx": "8567"}
{"func": "package googlejam8.p572;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tprivate static Scanner in;\r\n\tprivate static PrintWriter out;\r\n\tprivate static final boolean USE_FILE = true;\r\n\tprivate static final String FILE_NAME = \"A-large\";\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tin = new Scanner(new BufferedReader(new InputStreamReader(USE_FILE ? new FileInputStream(FILE_NAME + \".in\") : System.in)));\r\n\t\tout = new PrintWriter(new BufferedWriter(new OutputStreamWriter(USE_FILE ? new FileOutputStream(FILE_NAME + \".out\") : System.out)));\r\n\t\t\r\n\t\tint testCount = in.nextInt();\r\n\t\tfor (int test = 0; test < testCount; test++) {\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tint[] a = new int[N];\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\ta[i] = in.nextInt();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString res = \"\";\n\t\t\tint max = 0;\n\t\t\tint nz = 0;\n\t\t\tint z1 = -1;\n\t\t\tint z2 = -1;\n\t\t\twhile (true) {\n\t\t\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\t\t\tif (a[i] > a[max]) {\n\t\t\t\t\t\tmax = i;\n\t\t\t\t\t}\n\t\t\t\t\tif (a[i] > 0) {\n\t\t\t\t\t\tnz++;\n\t\t\t\t\t\tz2 = z1;\n\t\t\t\t\t\tz1 = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (nz == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (nz == 1 || nz > 2) {\n\t\t\t\t\tres += (char)('A' + max) + \" \";\n\t\t\t\t\ta[max]--;\n\t\t\t\t}\n\t\t\t\tif (nz == 2) {\n\t\t\t\t\tif (a[z1] == a[z2]) {\n\t\t\t\t\t\tres += (char)('A' + z1) + \"\" +  (char)('A' + z2) + \" \";\n\t\t\t\t\t\ta[z1]--;\n\t\t\t\t\t\ta[z2]--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres += (char)('A' + max) + \" \";\n\t\t\t\t\t\ta[max]--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmax = 0;\n\t\t\t\tnz = 0;\n\t\t\t\tz1 = -1;\n\t\t\t\tz2 = -1;\n\t\t\t}\n\t\t\tout.println(\"Case #\" + (test + 1) + \": \" + res.trim());\r\n\t\t}\r\n\t\t\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "8572"}
{"func": "package googlejam8.p574;\n\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\n\npublic class Senate {\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\tBufferedReader br = new BufferedReader(\n\t\t\t\tnew FileReader(new File(\"/Users/vaibhav/Documents/workspace/test/data/input.txt\")));\n\t\tint n = Integer.parseInt(br.readLine());\n\t\tchar[] alpha = new char[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\n\t\t\t\t'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint[] list = new int[Integer.parseInt(br.readLine())];\n\t\t\tString[] nums = br.readLine().split(\" \");\n\t\t\tfor (int j = 0; j < nums.length; j++) {\n\t\t\t\tlist[j] = Integer.parseInt(nums[j]);\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\" + (i + 1) + \": \");\n\t\t\twhile (true) {\n\t\t\t\tStringBuffer out = new StringBuffer();\n\t\t\t\tint index = 0;\n\t\t\t\tfor (int j = 1; j < list.length; j++) {\n\t\t\t\t\tif (list[index] < list[j]) {\n\t\t\t\t\t\tindex = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (list[index] < 1) {\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlist[index]--;\n\t\t\t\tout.append(alpha[index]);\n\t\t\t\t\n\t\t\t\tindex = 0;\n\t\t\t\tfor (int j = 1; j < list.length; j++) {\n\t\t\t\t\tif (list[index] < list[j]) {\n\t\t\t\t\t\tindex = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (list[index] < 1) {\n\t\t\t\t\tSystem.out.println(out + \" \");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(list[index] == 1) {\n\t\t\t\t\tint sum = 0;\n\t\t\t\t\tfor (int j = 0; j < list.length; j++) {\n\t\t\t\t\t\tsum = sum + list[j];\n\t\t\t\t\t}\n\t\t\t\t\tif(sum == 2) {\n\t\t\t\t\t\tSystem.out.print(out + \" \");\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlist[index]--;\n\t\t\t\tout.append(alpha[index]);\n\n\t\t\t\tSystem.out.print(out + \" \");\n\t\t\t}\n\n\t\t}\n\n\t\tbr.close();\n\n\t}\n\n}\n", "idx": "8574"}
{"func": "package googlejam8.p580;\nimport java.io.BufferedReader;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader bf= new BufferedReader(new FileReader(\"A-small-attempt2.in\"));\r\n\t\tint t= Integer.parseInt(bf.readLine());\r\n\t\tPrintWriter out= new PrintWriter(new FileWriter(\"smallA.txt\"));\r\n\t\tfor(int c=1; c<=t; c++){\r\n\t\t\tint n= Integer.parseInt(bf.readLine());\r\n\t\t\tint p[]= new int [n];\r\n\t\t\tStringTokenizer st= new StringTokenizer(bf.readLine());\r\n\t\t\tout.printf(\"Case #%d:\",c);\r\n\t\t\tfor(int i=0; i<n; i++)\r\n\t\t\t\tp[i]= Integer.parseInt(st.nextToken());\r\n\t\t\tint max=0;\r\n\t\t\tint maxi=0;\r\n\t\t\tint max2=0;\r\n\t\t\tint max2i=0;\r\n\t\t\tint sum=0;\r\n\t\t\tdo{\r\n\t\t\t\tmax=0;\r\n\t\t\t\tmaxi=0;\r\n\t\t\t\tmax2=0;\r\n\t\t\t\tmax2i=0;\r\n\t\t\t\tsum=0;\r\n\t\t\t\tfor(int i=0; i<n; i++){\r\n\t\t\t\t\tint x= p[i];\r\n\t\t\t\t\tsum+=x;\r\n\t\t\t\t\tif(x>max){\r\n\t\t\t\t\t\tmax2= max;\r\n\t\t\t\t\t\tmax2i= maxi;\r\n\t\t\t\t\t\tmax=x;\r\n\t\t\t\t\t\tmaxi=i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tif(x>max2){\r\n\t\t\t\t\t\t\tmax2=x;\r\n\t\t\t\t\t\t\tmax2i=i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//System.out.println(Arrays.toString(p));\r\n\t\t\t\tif(max>0){\r\n\t\t\t\tout.print(\" \"+((char)('A'+maxi)));\r\n\t\t\t\tmax--;\r\n\t\t\t\tp[maxi]--;\r\n\t\t\t\tif(max2>max && max2>0 && max2-1<=(sum-2)/2.0 && sum!=3){\r\n\t\t\t\t\tout.print(((char)('A'+max2i)));\r\n\t\t\t\t\tp[max2i]--;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(max-1<=(sum-2)/2.0 && max>0 && sum!=3){\r\n\t\t\t\t\tout.print(((char)('A'+maxi)));\r\n\t\t\t\t\tmax--;\r\n\t\t\t\t\tp[maxi]--;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}while(sum!=0);\r\n\t\t\tout.println();\r\n\t\t}\r\n\t\tout.flush();\r\n\t\tout.close();\r\n\t}\r\n\r\n}\r\n", "idx": "8580"}
{"func": "package googlejam8.p582;\n\r\n\r\nimport java.math.BigInteger;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.IntStream;\r\n\r\n/**\r\n * Created by Marcus on 4/8/2016.\r\n */\r\npublic class Main {\r\n\r\n    //Fractiles - failed\r\n    public static void main(String... orange) throws Exception {\r\n        Scanner input = new Scanner(System.in);\r\n        int numCases = input.nextInt();\r\n        for (int n = 0; n < numCases; n++) {\r\n            int N = input.nextInt();\r\n            int[] senatorList = new int[N];\r\n            int max = 0;\r\n            int maxValue = 0;\r\n            int sum = 0;\r\n            for(int i = 0; i<N; i++){\r\n                senatorList[i] = input.nextInt();\r\n                if(senatorList[i] > maxValue) {\r\n                    maxValue = senatorList[i];\r\n                    max = i;\r\n                }\r\n                sum += senatorList[i];\r\n            }\r\n            StringBuilder answerSB = new StringBuilder();\r\n            while(sum>0){\r\n                answerSB.append(String.valueOf((char)(max + 65)));\r\n                senatorList[max]--;\r\n                sum--;\r\n                if(sum == 0) break;\n\t\t\t\tint[] maxes1 = new int[2];\n\t\t\t\tmaxes1[0] = 0; //max\n\t\t\t\tmaxes1[1] = 0; //maxValue\n\t\t\t\tfor(int i = 0; i<N; i++) {\n\t\t\t\t    if (senatorList[i] > maxes1[1]) {\n\t\t\t\t        maxes1[1] = senatorList[i];\n\t\t\t\t        maxes1[0] = i;\n\t\t\t\t    }\n\t\t\t\t}\r\n                int[] maxes = maxes1;\r\n                max = maxes[0];\r\n                maxValue = maxes[1];\r\n                sum--;\r\n                maxValue--;\r\n                if(sum ==0) {\r\n                    senatorList[max]--;\r\n                    answerSB.append(String.valueOf((char)(max + 65)));\r\n                    break;\r\n                }\r\n                else if((double)maxValue/(double)sum <=0.5 && sum > 1) {\r\n                    senatorList[max]--;\r\n                    answerSB.append(String.valueOf((char)(max + 65)));\r\n                }\r\n                else{\r\n                    sum++;\r\n                    maxValue++;\r\n                }\r\n                answerSB.append(\" \");\n\t\t\t\tint[] maxes2 = new int[2];\n\t\t\t\tmaxes2[0] = 0; //max\n\t\t\t\tmaxes2[1] = 0; //maxValue\n\t\t\t\tfor(int i = 0; i<N; i++) {\n\t\t\t\t    if (senatorList[i] > maxes2[1]) {\n\t\t\t\t        maxes2[1] = senatorList[i];\n\t\t\t\t        maxes2[0] = i;\n\t\t\t\t    }\n\t\t\t\t}\r\n                maxes = maxes2;\r\n                max = maxes[0];\r\n                maxValue = maxes[1];\r\n            }\r\n\r\n            String answer = answerSB.toString();\r\n            System.out.printf(\"Case #%d: %s\\n\", n + 1, answer);\r\n\r\n        }\r\n\r\n    }\r\n}\r\n", "idx": "8582"}
{"func": "package googlejam8.p588;\n\n\nimport java.io.*;\nimport java.util.*;\n\npublic class Evac {\n\t@SuppressWarnings(\"resource\")\n\tpublic static void main(String[] args) throws FileNotFoundException\n\t{\n\t\tSystem.out.println(\"Enter no. of test cases.\");\n\t\tFileInputStream fis = new FileInputStream(\"A3.txt\");\n\t\tScanner in = new Scanner(fis);\n\t\t//Scanner in = new Scanner(System.in);\n\t\tint t = in.nextInt();\n\t\tfor (int i=1;i<=t;i++)\n\t\t{\n\t\t\tint N = in.nextInt();\n\t\t\tArrayList<Integer> tp = new ArrayList<Integer>();\n\t\t\tint sum=0;\n\t\t\tfor ( int j=0;j<N;j++)\n\t\t\t{\n\t\t\t\tint nt = in.nextInt();\n\t\t\t\ttp.add(nt);\n\t\t\t\tsum += nt;\n\t\t\t}\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\twhile (sum>0)\n\t\t\t{\n\t\t\t\tint max1 = 0;\n\t\t\t\tint imax1 = -1;\n\t\t\t\tfor (int k=0;k<N;k++)\n\t\t\t\t{\n\t\t\t\t\tif(tp.get(k)>max1)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax1 = tp.get(k);\n\t\t\t\t\t\timax1 =k;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint max2 = 0;\n\t\t\t\tint imax2 = -1;\n\t\t\t\tfor (int k=0;k<N;k++)\n\t\t\t\t{\n\t\t\t\t\tif(tp.get(k)>max2&&(max2<=max1&&k!=imax1))\n\t\t\t\t\t{\n\t\t\t\t\t\tmax2 = tp.get(k);\n\t\t\t\t\t\timax2 =k;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//System.out.println(imax1);\n\t\t\t\t//System.out.println(imax2);\n\t\t\t\tint k=0;\n\t\t\t\tfor (k=0;k<N;k++)\n\t\t\t\t{\n\t\t\t\t\tif ((k==imax1||k==imax2)&&(2*(tp.get(k)-1)>sum-2))\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if (k!=imax1&&k!=imax2&&(2*tp.get(k)>(sum-2)))\n\t\t\t\t\t\tbreak;\t\n\t\t\t\t}\n\t\t\t\tif(k==N)\n\t\t\t\t{\n\t\t\t\t\tchar c =(char)('A'+imax1);\n\t\t\t\t\tchar d =(char)('A'+imax2);\n\t\t\t\t\tsb.append(c);\n\t\t\t\t\tsb.append(d);\n\t\t\t\t\tsb.append(\" \");\n\t\t\t\t\tsum -=2;\n\t\t\t\t\ttp.set(imax1, tp.get(imax1)-1);\n\t\t\t\t\ttp.set(imax2, tp.get(imax2)-1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tchar c =(char)('A'+imax1);\n\t\t\t\t\tsb.append(c);\n\t\t\t\t\tsb.append(\" \");\n\t\t\t\t\tsum-=1;\n\t\t\t\t\ttp.set(imax1, tp.get(imax1)-1);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+i+\": \"+sb.toString());\t\t\t\n\t\t}\n\t}\n\n}\n", "idx": "8588"}
{"func": "package googlejam8.p593;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class Ultimo {\r\n  public static void main(String[] args) {\r\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n    int t = in.nextInt();\r\n    for (int i = 1; i <= t; ++i) {\r\n      String ris = \"\";\r\n      String v[] = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\r\n      int n = in.nextInt();\r\n      String p[] = new String[1001];\r\n      \r\n      for(int j = 0; j < 1001; j ++)\r\n    \t  p[j] = \"\";\r\n      \r\n      for(int j = 0; j < n; j ++)\r\n      {\r\n    \t  int k = in.nextInt();\r\n    \t  p[k] += v[j];\r\n      }\r\n      \r\n      for(int j = 1000; j > 0; j --)\r\n      {\r\n    \t  if(!p[j].equals(\"\"))\r\n    \t  {\r\n    \t\t  if(p[j].length() % 2 != 0)\r\n    \t\t\t  ris += p[j].substring(p[j].length() - 1, p[j].length()) + \" \";\r\n    \t\t  \r\n              for(int x = 0; x < p[j].length() - 1; x += 2)\r\n              {\r\n            \t  ris += p[j].charAt(x) + \"\" + p[j].charAt(x + 1) + \" \";\r\n              }\r\n              \r\n              p[j - 1] += p[j];\r\n    \t  }\r\n      }\r\n      \r\n      System.out.println(\"Case #\" + i + \": \" + ris);\r\n    }\r\n  }\r\n}", "idx": "8593"}
{"func": "package googlejam8.p595;\nimport java.io.File;\nimport java.lang.reflect.Array;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class A {\n\tpublic static void main(String[] args) {\n\t\tint numOfCases;\n\t\tFile file = new File(System.getProperty(\"user.dir\")+\"/\"+\"TestCase\");\n\t\ttry{\n\t\t\tScanner sc = new Scanner(file);\n\t\t\tnumOfCases = sc.nextInt();\n\t\t\t//Scanner sc = new Scanner(System.in);\n\t\t\t\n\t\t\tfor (int num = 1; num<=numOfCases; num++){\n\t\t\t\tint[] s = new int[1000];\n\t\t\t\tint n;\n\t\t\t\tint total;\n\t\t\t\t\n\t\t\t\tn = sc.nextInt();\n\t\t\t\ttotal = n;\n\t\t\t\tfor (int i=0; i<n; i++){\n\t\t\t\t\ts[i] = sc.nextInt();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint indx=0;\n\t\t\t\tint indx2=0;\n\t\t\t\tint temp1=-1;\n\t\t\t\tint temp2=-1;\n\t\t\t\tSystem.out.print(\"Case #\"+num+\": \");\n\t\t\t\twhile (true){\n\t\t\t\t\tint max=0;\n\t\t\t\t\t\n\t\t\t\t\tif (temp1 ==-1){\n\t\t\t\t\t\tindx = 0;\n\t\t\t\t\t\tindx2 = 0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (int i=0; i<n; i++){\n\t\t\t\t\t\tif (s[i] >= max){\n\t\t\t\t\t\t\tmax = s[i];\n\t\t\t\t\t\t\tindx = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ts[indx]--;\n\t\t\t\t\t\n\t\t\t\t\tint t;\n\t\t\t\t\tboolean not=false;\n\t\t\t\t\ttotal = n;\n\t\t\t\t\tfor (t=0; t<n; t++){\n\t\t\t\t\t\tif (s[t] != 0){not=true;}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ttotal--;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (!not){\n\t\t\t\t\t\tSystem.out.print((char)(indx+'A')+\" \");\n\t\t\t\t\t\tif (temp1 != -1){\n\t\t\t\t\t\t\tSystem.out.print((char)(temp1+'A'));\n\t\t\t\t\t\t\tSystem.out.print((char)(temp2+'A'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (total ==2){\n\t\t\t\t\t\tint a=0, b=0;\n\t\t\t\t\t\tfor (int i=0; i<n; i++){\n\t\t\t\t\t\t\tif (s[i] > 0 && a ==0){\n\t\t\t\t\t\t\t\ta = s[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tb = s[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a==b){\n\t\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tmax = 0;\n\t\t\t\t\tfor (int i=0; i<n; i++){\n\t\t\t\t\t\tif (s[i] >= max){\n\t\t\t\t\t\t\tmax = s[i];\n\t\t\t\t\t\t\tindx2 = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ts[indx2]--;\n\t\t\t\t\t\n\t\t\t\t\tnot = false;\n\t\t\t\t\ttotal = n;\n\t\t\t\t\tfor (t=0; t<n; t++){\n\t\t\t\t\t\tif (s[t] != 0){not = true;}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ttotal--;\n\t\t\t\t\t}\n\t\t\t\t\t//System.out.println(total);\n\t\t\t\t\t\n\t\t\t\t\tif (total !=1){\n\t\t\t\t\t\tSystem.out.print((char)(indx+'A'));\n\t\t\t\t\t\tSystem.out.print((char)(indx2+'A')+\" \");\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\ttemp1=indx;\n\t\t\t\t\t\ttemp2=indx2;\n\t\t\t\t\t}\n\t\t\t\t\tif (!not)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"\");\n\t\t\t\n\t\t\t}\n\t\t\tsc.close();\n\t\t\t}\n\t\tcatch (Exception e) {\n\t       System.out.println(e);\n\t       }\n\n\t}\n\t\n}\n", "idx": "8595"}
{"func": "package googlejam8.p597;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String args[]) {\r\n\r\n\t\tLocale.setDefault(Locale.US);\r\n\r\n\t\tScanner in;\r\n\t\ttry {\r\n\t\t\tin = new Scanner(new File(\"input.txt\"));\r\n\t\t} catch (Exception e) {\r\n\t\t\tin = new Scanner(System.in);\r\n\t\t}\r\n\r\n\t\tPrintWriter out;\r\n\t\ttry {\r\n\t\t\tout = new PrintWriter(\"output.txt\");\r\n\t\t} catch (Exception e) {\r\n\t\t\tout = new PrintWriter(System.out);\r\n\t\t}\r\n\r\n\t\tint t = in.nextInt();\r\n\r\n\t\tfor (int x = 1; x <= t; ++x) {\r\n\r\n\t\t\tString res = \"Case #\" + x + \": \";\r\n\r\n\t\t\tint n = in.nextInt();\r\n\r\n\t\t\tint[] ns = new int[n];\r\n\r\n\t\t\tint total = 0;\r\n\r\n\t\t\tfor (int i = 0; i < n; ++i) {\r\n\t\t\t\tint p = in.nextInt();\r\n\t\t\t\ttotal += p;\r\n\t\t\t\tns[i] = p;\r\n\t\t\t}\r\n\r\n\t\t\t//System.out.print(Arrays.toString(ns));\r\n\r\n\t\t\tboolean even = false;\r\n\t\t\twhile (!even) {\r\n\t\t\t\tint max = ns[0];\r\n\t\t\t\tint maxPos = 0;\r\n\t\t\t\tint min = ns[0];\r\n\t\t\t\tint minPos = 0;\r\n\t\t\t\tfor (int i = 1; i < n; ++i) {\r\n\t\t\t\t\tif (ns[i] > max) {\r\n\t\t\t\t\t\tmax = ns[i];\r\n\t\t\t\t\t\tmaxPos = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (ns[i] < min) {\r\n\t\t\t\t\t\tmin = ns[i];\r\n\t\t\t\t\t\tminPos = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (max != min) {\r\n\t\t\t\t\tres += ((char) (65 + maxPos)) + \" \";\r\n\t\t\t\t\t--ns[maxPos];\r\n\t\t\t\t\t--total;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\teven = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tint totalColumns = 0;\r\n\r\n\t\t\tfor (int i = 0; i < n; ++i) {\r\n\t\t\t\tif (ns[i] > 0) {\r\n\t\t\t\t\t++totalColumns;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(totalColumns);\r\n\r\n\t\t\tfor (int i = 0; i < n; ++i) {\r\n\t\t\t\tif (totalColumns > 2) {\r\n\t\t\t\t\twhile (ns[i] > 0) {\r\n\t\t\t\t\t\tres += ((char) (65 + i)) + \" \";\r\n\t\t\t\t\t\t--ns[i];\r\n\t\t\t\t\t\t--total;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t--totalColumns;\r\n\t\t\t\t}\r\n\t\t\t\telse break;\r\n\t\t\t}\r\n\r\n\t\t\tint a = -1;\r\n\t\t\tint b = -1;\r\n\t\t\tint times = 0;\r\n\r\n\t\t\tfor (int i = 0; i < n; ++i) {\r\n\t\t\t\tif (ns[i] > 0) {\r\n\t\t\t\t\tif (a == -1) {\r\n\t\t\t\t\t\ta = i;\r\n\t\t\t\t\t\ttimes = ns[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tb = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (int i = 0; i < times; ++i) {\r\n\t\t\t\tres += ((char) (65 + a)) + \"\" + ((char) (65 + b)) + \" \";\r\n\t\t\t}\r\n\r\n\t\t\tres += \"\\n\";\r\n\r\n\t\t\tSystem.out.print(res);\r\n\t\t\tout.print(res);\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}", "idx": "8597"}
{"func": "package googlejam8.p601;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class A {\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\t\r\n\t\tScanner in = new Scanner(new File(\"C:\\\\Users\\\\jainh\\\\Desktop\\\\A-small-attempt0.in\"));\r\n\t\tFileWriter fw = new FileWriter(\"C:\\\\Users\\\\jainh\\\\Desktop\\\\A-small.out\");\r\n\t\t\r\n\t\tint T = in.nextInt();\r\n\t\tin.nextLine();\r\n\t\tfor (int tc = 1; tc <= T; tc++) {\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tint[] arr = new int[65 + N];\r\n\t\t\tint count = 0;\r\n\t\t\tfor(int i = 65; i < 65 + N; i++) {\r\n\t\t\t\tarr[i] = in.nextInt();\r\n\t\t\t\tcount += arr[i];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tString returnString = \"\";\r\n\t\t\twhile(count > 0) {\r\n\t\t\t\tint[] largestTwo1 = new int[4];\n\t\t\t\t\n\t\t\t\tfor(int i = 65; i < arr.length; i++) {\n\t\t\t\t\tif (arr[i] > largestTwo1[0]) {\n\t\t\t\t\t\tlargestTwo1[0] = arr[i];\n\t\t\t\t\t\tlargestTwo1[1] = i;\n\t\t\t\t\t\tlargestTwo1[2] = 0;\n\t\t\t\t\t} else if (arr[i] == largestTwo1[0]) {\n\t\t\t\t\t\tlargestTwo1[2] = arr[i];\n\t\t\t\t\t\tlargestTwo1[3] = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint[] largestTwo = largestTwo1;\r\n\t\t\t\tif(largestTwo[0] == largestTwo[2]) {\r\n\t\t\t\t\tif (count == 3) {\r\n\t\t\t\t\t\treturnString += (char)largestTwo[1];\r\n\t\t\t\t\t\treturnString += \" \";\r\n\t\t\t\t\t\tcount -= 1;\r\n\t\t\t\t\t\tarr[largestTwo[1]] -= 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturnString += (char)largestTwo[1];\r\n\t\t\t\t\t\treturnString += (char)largestTwo[3];\r\n\t\t\t\t\t\treturnString += \" \";\r\n\t\t\t\t\t\tcount -= 2;\r\n\t\t\t\t\t\tarr[largestTwo[1]] -= 1;\r\n\t\t\t\t\t\tarr[largestTwo[3]] -= 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturnString += (char)largestTwo[1];\r\n\t\t\t\t\treturnString += \" \";\r\n\t\t\t\t\tcount -= 1;\r\n\t\t\t\t\tarr[largestTwo[1]] -= 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfw.write (\"Case #\" + tc + \": \" + returnString + \"\\n\");\r\n\t\t}\r\n\t\tin.close();\r\n\t\tfw.flush();\r\n\t\tfw.close();\r\n\t}\r\n}", "idx": "8601"}
{"func": "package googlejam8.p610;\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class SenateEvacuation {\r\n\r\n\tstatic Scanner sc = new Scanner(System.in);\r\n\tstatic int T;\r\n\tstatic int[] P;\r\n\tpublic static void main(String[] args) {\r\n\t\tT = sc.nextInt();\r\n\t\tfor (int c = 0; c < T; c++) {\r\n\t\t\tSystem.out.print(\"Case #\"+(c+1)+\":\");\r\n\t\t\tint len = sc.nextInt();\r\n\t\t\tP = new int[len];\r\n\t\t\tint tot = 0;\r\n\t\t\tfor (int i = 0; i < len; i++) {\r\n\t\t\t\tP[i] = sc.nextInt();\r\n\t\t\t\ttot+= P[i];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint last = 0;\r\n\t\t\tfor (int i = 0; i < tot-2;) {\r\n\r\n\t\t\t\tint max = -1;\r\n\t\t\t\tint id = -1;\r\n\t\t\t\tint max2 = -1;\r\n\t\t\t\tint id2 = -1;\r\n\t\t\t\tfor (int j = 0; j < len; j++) {\r\n\t\t\t\t\tif(P[j] > max){\r\n\t\t\t\t\t\tid = j;\r\n\t\t\t\t\t\tmax = P[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tP[id]--;\r\n\r\n\t\t\t\tfor (int j = 0; j < len; j++) {\r\n\t\t\t\t\tif(P[j] > max2){\r\n\t\t\t\t\t\tid2 = j;\r\n\t\t\t\t\t\tmax2 = P[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//check if can\r\n\t\t\t\tint total = (tot - i - 1)/2;\r\n\t\t\t\t//System.out.println(Arrays.toString(P));\r\n\t\t\t\tif(P[id2] > total && P[id] > total){\r\n\t\t\t\t\tSystem.out.println(\"D:\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(P[id2] > total){\r\n\t\t\t\t\tchar i1 = (char)('A' + id);\r\n\t\t\t\t\tchar i2 = (char)('A' + id2);\r\n\t\t\t\t\tP[id2]--;\r\n\t\t\t\t\tSystem.out.print(\" \" + i1+\"\"+i2);\r\n\t\t\t\t\ti+=2;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tchar resp = (char)('A' + id);\r\n\t\t\t\t\tSystem.out.print(\" \"+resp);\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tchar id1 = '-';\r\n\t\t\tchar id2 = 'A';\r\n\t\t\tfor (int j = 0; j < len; j++) {\r\n\t\t\t\tif(P[j] > 0){\r\n\t\t\t\t\tif(id1 == '-'){\r\n\t\t\t\t\t\tid1 = (char)('A' + j);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tid2 = (char)('A' + j);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\" \" + id1+\"\"+id2);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "8610"}
{"func": "package googlejam8.p611;\n/**\r\n * Created by xc9pd on 5/8/2016.\r\n */\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A implements Comparator<A>, Comparable<A>{\r\n\r\n    String name;\r\n    int value;\r\n    public A(char se,int value){\r\n        this.name=\"\"+se;\r\n        this.value=value;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n        int t = in.nextInt();\r\n\r\n        for (int i = 1; i <= t; ++i) {\r\n            int n = in.nextInt();\r\n            System.out.print(\"Case #\" + i + \":\");\r\n            char se='A';\r\n            ArrayList<A> sensor=new ArrayList<A>();\r\n            int total=0;\r\n            for(int j=0;j<n;j++){\r\n                int s=in.nextInt();\r\n\r\n                A node=new A(se,s);\r\n                se++;\r\n                total+=s;\r\n                sensor.add(node);\r\n            }\r\n\r\n            Collections.sort(sensor);\r\n            while(sensor.get(0).value>0){\r\n\r\n                if((double)sensor.get(1).value/(double)(total-1)<=0.5){\r\n                    sensor.get(0).value--;\r\n                    total--;\r\n                    System.out.print(\" \"+sensor.get(0).name);\r\n                }\r\n                else {\r\n                    sensor.get(0).value--;\r\n                    sensor.get(1).value--;\r\n                    total-=2;\r\n                    System.out.print(\" \"+sensor.get(0).name+sensor.get(1).name);\r\n                }\r\n                //System.out.print(\" total: \" +total);\r\n                Collections.sort(sensor);\r\n            }\r\n            System.out.println(\"\");\r\n\r\n        }\r\n\r\n    }\r\n}\r\n", "idx": "8611"}
{"func": "package googlejam8.p612;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\npublic class A {\r\n\tprivate static String infileName, outFileName;\r\n\tprivate static BufferedReader reader;\r\n\tprivate static BufferedWriter writer;\r\n\tpublic static void main(String[] args) throws IOException {\r\n\r\n\t\tinfileName = args[0];\r\n\t\toutFileName = infileName.substring(0, infileName.indexOf('.')).concat(\r\n\t\t\t\t\".out\");\r\n\t\treader = Files.newBufferedReader(Paths.get(infileName));\r\n\t\twriter = Files.newBufferedWriter(Paths.get(outFileName));\r\n\t\tint numTests = Integer.parseInt(reader.readLine());\r\n\t\tfor (int i = 0; i < numTests; i++) {\r\n\t\t\tint parties = Integer.parseInt(reader.readLine());\n\t\t\tint[] in = new int[parties];\n\t\t\tint j = 0;\n\t\t\tfor (String s2 : reader.readLine().split(\"\\\\s\")) {\n\t\t\t\tin[j++] = Integer.parseInt(s2);\n\t\t\t}\r\n\t\t\tint[] senates = in;\n\t\t\tint[] senates1 = senates;\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tint evac = 0;\n\t\t\t\t\tdo{\n\t\t\t\t\t\tString s = \"\";\n\t\t\t\t\t\tint sum1 = 0;\n\t\t\t\t\t\tfor (int s1 : senates1)\n\t\t\t\t\t\t\tsum1 += s1;\n\t\t\t\t\t\tint sum = sum1;\n\t\t\t\t\t\tint mjor1= (sum - 1)/2 + 1;\n\t\t\t\t\t\tint mjor2= (sum - 2)/2 + 1;\n\t\t\t\t\t\tevac =0;\n\t\t\t\t\t\tint [] temp = Arrays.copyOf(senates1, parties);\n\t\t\t\t\t\tfor(int i1 = parties - 1; i1 >= 0; i1--)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(temp[i1] >= mjor2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttemp[i1] = temp[i1] - 1;\n\t\t\t\t\t\t\t\tchar a = (char) (65+i1);\n\t\t\t\t\t\t\t\ts += a;\n\t\t\t\t\t\t\t\tevac++;\n\t\t\t\t\t\t\t\ti1++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(evac > 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttemp = Arrays.copyOf(senates1, parties);\n\t\t\t\t\t\t\ts=\"\";\n\t\t\t\t\t\t\tevac =0;\n\t\t\t\t\t\t\tfor(int i3 = parties - 1; i3 >= 0; i3--)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(temp[i3] >= mjor1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttemp[i3] = temp[i3] - 1;\n\t\t\t\t\t\t\t\t\tchar a = (char) (65+i3);\n\t\t\t\t\t\t\t\t\ts += a;\n\t\t\t\t\t\t\t\t\tevac++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(evac == 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor(int i2 = 0; i2 < parties; i2++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(temp[i2] >= 1)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttemp[i2] = temp[i2] - 1;\n\t\t\t\t\t\t\t\t\tchar a = (char) (65+i2);\n\t\t\t\t\t\t\t\t\ts += a;\n\t\t\t\t\t\t\t\t\tevac++;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsb.append(s).append(\" \");\n\t\t\t\t\t\tsenates1 = Arrays.copyOf(temp, parties);\n\t\t\t\t\t}while(evac != 0);\r\n\t\t\tString plan = sb.toString();\n\t\t\tObject[] ans = { plan };\r\n\t\t\twriter.write(\"Case #\" + (i + 1) + \":\");\n\t\t\tfor (Object a : ans)\n\t\t\t\twriter.write(\" \" + a);\n\t\t\twriter.newLine();\r\n\t\t}\r\n\t\treader.close();\n\t\twriter.close();\r\n\r\n\t}\r\n}\r\n\r\n", "idx": "8612"}
{"func": "package googlejam8.p613;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class prblmA {\r\n    final static String PROBLEM_NAME = \"prblmA\";\r\n    final static String WORK_DIR = \"F:\\\\GCJ\\\\\" + PROBLEM_NAME + \"\\\\\";\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\t\t//Scanner sc = new Scanner(new FileReader(WORK_DIR + \"input.txt\"));\r\n        //Scanner sc = new Scanner(new FileReader(WORK_DIR + \"A-small-attempt0.in\"));\r\n\t\tScanner sc = new Scanner(new FileReader(WORK_DIR + \"A-large.in\"));\r\n        PrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR + \"output.txt\"));\r\n        int caseCnt = sc.nextInt();\r\n        for (int caseNum=0; caseNum<caseCnt; caseNum++) {\r\n           System.out.println(\"Processing test case \" + (caseNum + 1));\r\n            pw.print(\"Case #\" + (caseNum+1) + \": \");\n\t\t\tprblmA r = new prblmA();\r\n            int N = sc.nextInt();\n\t\t\tint P[] = new int[N];\n\t\t\tfor(int i=0;i<N;i++)\n\t\t\t{\n\t\t\t\tP[i]=sc.nextInt();\n\t\t\t}\n\t\t\tint flag=1;\n\t\t\tint max = P[0];\n\t\t\tint maxi=0;\n\t\t\tchar out = 'A'; \n\t\t\twhile(true)\n\t\t\t{max = P[0];\n\t\t\t         maxi=0;\n\t\t\t\tfor(int i=0;i<N;i++)\n\t\t\t\t{   \n\t\t\t\t\tif(P[i]>max)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax=P[i];\n\t\t\t\t\t\tmaxi=i;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\tif(max==1)\n\t\t\t\t{int count =0;\n\t\t\t\t\tfor(int i=0;i<N;i++)\n\t\t\t\t{   \n\t\t\t\t\tif(P[i]==1)\n\t\t\t\t\t{\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\tif(count==3)\n\t\t\t\t{\n\t\t\t\t\tflag=0;\n\t\t\t\t}\n\t\t\t\t}\t\n\t\t\tSystem.out.println(max+\" \"+maxi);\n\t\t\t    if(max==0)\n\t\t\t\t{break;}\n\t\t\t    else\n\t\t\t\t{\n\t\t\t\t\tP[maxi]=P[maxi]-1;\n\t\t\t\t\tout = (char)('A'+maxi);\n\t\t\t\t\tif(flag==1)\n\t\t\t\t\t{pw.print(out);flag=0;}\n\t\t\t\t    else //if(flag==0)\n\t\t\t\t\t{pw.print(out+\" \");flag=1;}\n\t\t\t\t}\n\t\t\t}\n\t\t\t  pw.println();\r\n        }\r\n        pw.flush();\r\n        pw.close();\r\n        sc.close();\r\n    }\r\n}\r\n", "idx": "8613"}
{"func": "package googlejam8.p619;\nimport java.util.Scanner;\n\npublic class SenateEvacuation {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner keyboard = new Scanner(System.in);\n\t\tint T, N;\n\t\tint[] senates;\n\t\t\n\t\tT = keyboard.nextInt();\n\t\tkeyboard.nextLine();\n\t\tfor(int i = 0; i < T; i++) {\n\t\t\tN = keyboard.nextInt();\n\t\t\tsenates = new int[N];\n\t\t\tfor(int j = 0; j < N; j++) senates[j] = keyboard.nextInt();\n\t\t\tSystem.out.print(\"Case #\"+ (i+1) +\": \");\n\t\t\tboolean continuing = true;\n\t\t\tint maxid, maxid2, equals;\n\t\t\twhile(continuing) {\n\t\t\t\tmaxid = 0;\n\t\t\t\tmaxid2 = -1;\n\t\t\t\tequals = 0;\n\t\t\t\tfor(int i2 = 1; i2 < senates.length; i2++) {\n\t\t\t\t\tif(senates[i2] > senates[maxid]) {\n\t\t\t\t\t\tmaxid = i2;\n\t\t\t\t\t\tequals = 0;\n\t\t\t\t\t}\n\t\t\t\t\telse if(senates[i2] == senates[maxid]) {\n\t\t\t\t\t\tequals++;\n\t\t\t\t\t\tmaxid2 = i2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(equals > 0 && senates[maxid] > 1) {\n\t\t\t\t\tSystem.out.print(Character.toChars(maxid + 65));\n\t\t\t\t\tSystem.out.print(Character.toChars(maxid2 + 65));\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\tsenates[maxid] -= 1;\n\t\t\t\t\tsenates[maxid2] -= 1;\n\t\t\t\t}\n\t\t\t\telse if(senates[maxid] > 1) {\n\t\t\t\t\tSystem.out.print(Character.toChars(maxid + 65));\n\t\t\t\t\tSystem.out.print(Character.toChars(maxid + 65));\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\tsenates[maxid] -= 2;\n\t\t\t\t} else if(equals == 2) {\n\t\t\t\t\tSystem.out.print(Character.toChars(maxid + 65));\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\tsenates[maxid] -= 1;\n\t\t\t\t} else if (equals > 0){\n\t\t\t\t\tSystem.out.print(Character.toChars(maxid + 65));\n\t\t\t\t\tSystem.out.print(Character.toChars(maxid2 + 65));\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\tsenates[maxid] -= 1;\n\t\t\t\t\tsenates[maxid2] -= 1;\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.print(Character.toChars(maxid + 65));\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\tsenates[maxid] -= 1;\n\t\t\t\t}\n\t\t\t\tcontinuing = false;\n\t\t\t\tfor(int i1 = 0; i1 < senates.length; i1++) {\n\t\t\t\t\tif(senates[i1] > 0) continuing = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\t\n\t\t}\n\t\tkeyboard.close();\n\t}\n\n}", "idx": "8619"}
{"func": "package googlejam8.p626;\nimport java.util.*;\r\n\r\nclass code1{\r\npublic static void main(String args[])\r\n{\r\n\tint t,i,ind=1,n,temp;\r\n\tScanner sc=new Scanner(System.in);\r\n\tt=sc.nextInt();\r\n\tString s;\r\n\twhile(t-- >0)\r\n\t{\r\n\t\ts=sc.next();\r\n\t\tn=s.length();\r\n\t\tint arr[]=new int[26],ans[]=new int[10];\r\n\t\tfor(i=0;i<26;++i)\r\n\t\t\tarr[i]=0;\r\n\t\t\r\n\t\tfor(i=0;i<10;++i)\r\n\t\t\tans[i]=0;\r\n\r\n\t\t\r\n\t\tfor(i=0;i<n;++i)\r\n\t\t{\r\n\t\t\tarr[(int)s.charAt(i)-65]++;\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tif(arr[6]!=0)\r\n\t\t{\r\n\t\t\ttemp=arr[6];\r\n\t\t\tans[8]=temp;//eight\r\n\t\t\t\r\n\t\t\tarr[6]=0;\r\n\t\t\tarr[4]-=temp;\r\n\t\t\tarr[8]-=temp;\r\n\t\t\tarr[7]-=temp;\r\n\t\t\tarr[19]-=temp;\r\n\t\t}\r\n\t\tif(arr[20]!=0)//four\r\n\t\t{\r\n\t\t\ttemp=arr[20];\r\n\t\t\tans[4]=temp;\r\n\t\t\t\r\n\t\t\tarr[5]-=temp;\r\n\t\t\tarr[14]-=temp;\r\n\t\t\tarr[20]-=temp;\r\n\t\t\tarr[17]-=temp;\r\n\t\t}\r\n\t\tif(arr[25]!=0)//zero\r\n\t\t{\r\n\t\t\ttemp=arr[25];\r\n\t\t\tans[0]=temp;\r\n\t\t\t\r\n\t\t\tarr[25]-=temp;\r\n\t\t\tarr[4]-=temp;\r\n\t\t\tarr[14]-=temp;\r\n\t\t\tarr[17]-=temp;\r\n\t\t}\r\n\t\tif(arr[22]!=0)//two\r\n\t\t{\r\n\t\t\ttemp=arr[22];\r\n\t\t\tans[2]=temp;\r\n\t\t\t\r\n\t\t\tarr[22]-=temp;\r\n\t\t\tarr[19]-=temp;\r\n\t\t\tarr[14]-=temp;\r\n\t\t}\r\n\t\tif(arr[23]!=0)//six\r\n\t\t{\r\n\t\t\ttemp=arr[23];\r\n\t\t\tans[6]=temp;\r\n\t\t\t\r\n\t\t\tarr[18]-=temp;\r\n\t\t\tarr[23]-=temp;\r\n\t\t\tarr[8]-=temp;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif(arr[14]!=0)//one\r\n\t\t{\r\n\t\t\ttemp=arr[14];\r\n\t\t\tans[1]=temp;\r\n\t\t\t\r\n\t\t\tarr[14]=0;\r\n\t\t\tarr[13]-=temp;\r\n\t\t\tarr[4]-=temp;\r\n\t\t}\r\n\t\t\r\n\t\tif(arr[5]!=0)//five\r\n\t\t{\r\n\t\t\ttemp=arr[5];\r\n\t\t\tans[5]=temp;\r\n\t\t\t\r\n\t\t\tarr[5]=0;\r\n\t\t\tarr[8]-=temp;\r\n\t\t\tarr[21]-=temp;\r\n\t\t\tarr[4]-=temp;\r\n\t\t}\r\n\t\tif(arr[21]!=0)//seven\r\n\t\t{\r\n\t\t\ttemp=arr[21];\r\n\t\t\tans[7]=temp;\r\n\t\t\t\r\n\t\t\tarr[21]=0;\r\n\t\t\tarr[18]-=temp;\r\n\t\t\tarr[13]-=temp;\r\n\t\t\tarr[4]-=temp;\r\n\t\t\tarr[4]-=temp;\r\n\t\t}\r\n\t\tif(arr[8]!=0)//nine\r\n\t\t{\r\n\t\t\ttemp=arr[8];\r\n\t\t\tans[9]=temp;\r\n\t\t\t\r\n\t\t\tarr[8]=0;\r\n\t\t\tarr[13]-=temp;\r\n\t\t\tarr[13]-=temp;\r\n\t\t\tarr[4]-=temp;\r\n\t\t}\r\n\t\tif(arr[19]!=0)//three\r\n\t\t{\r\n\t\t\ttemp=arr[19];\r\n\t\t\tans[3]=temp;\r\n\t\t\t\r\n\t\t\tarr[14]=0;\r\n\t\t\tarr[17]-=temp;\r\n\t\t\tarr[7]-=temp;\r\n\t\t\tarr[4]-=temp;\r\n\t\t\tarr[4]-=temp;\r\n\t\t}\r\n\t\tSystem.out.print(\"Case #\"+ind+\": \");\r\n\t\tfor(i=0;i<10;++i)\r\n\t\twhile(ans[i]-- >0)\t\r\n\t\tSystem.out.print(i);\r\n\tSystem.out.println();\r\n\t++ind;\r\n\t}\r\n}\r\n}", "idx": "8626"}
{"func": "package googlejam8.p633;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class a1 {\r\n\r\n\tprivate static final String[] PL = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\r\n\t\r\n\tpublic static void main(String[] args) {\r\n//\t\treadAndSolve(\"resource/gcj2016/c1/a1/sample.in\", \"resource/gcj2016/c1/a1/sample.out\");\r\n//\t\treadAndSolve(\"resource/gcj2016/c1/a1/A-small-attempt0.in\", \"resource/gcj2016/c1/a1/A-small-attempt0.out\");\r\n\t\tBufferedReader input = null;\n\t\tBufferedWriter output = null;\n\t\tDate d1 = new Date();\n\t\ttry {\n\t\t\tinput = new BufferedReader(new FileReader(\"resource/gcj2016/c1/a1/A-large.in\"));\n\t\t\toutput = new BufferedWriter(new FileWriter(\"resource/gcj2016/c1/a1/A-large.out\"));\n\t\t\tString line1 = null;\n\t\t\tString line2 = null;\n\t\t\tint expectedCases = 0;\n\t\t\tint actualCase = -1;\n\t\t\tline1=input.readLine();\n\t\t\texpectedCases = Integer.parseInt(line1);\n\t\t\tfor (actualCase = 1; actualCase<=expectedCases; actualCase++) {\n\t\t\t\tline1=input.readLine();\n\t\t\t\tline2=input.readLine();\n\t\t\t\tScanner sc = new Scanner(line1);\n\t\t\t\t\t\tint partynum = sc.nextInt();\n\t\t\t\t\t\tScanner sc1 = new Scanner(line2);\n\t\t\t\t\t\tint[] parties1 = new int[partynum];\n\t\t\t\t\t\tfor (int i2 = 0; i2< partynum; i2++ ) {\n\t\t\t\t\t\t\tparties1[i2] = sc1.nextInt();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint[] parties = parties1;\n\t\t\t\t\t\tint result2 = 0;\n\t\t\t\t\t\tfor(int i1 : parties) {\n\t\t\t\t\t\t\tresult2 +=i1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint totalcount = result2;\n\t\t\t\t\t\tStringBuffer sb = new StringBuffer(2*partynum);\n\t\t\t\t\t\twhile (totalcount > 0) {\n\t\t\t\t\t\t\tint[] result1 = new int[2];\n\t\t\t\t\t\t\tint[] maxvalues = new int[2];\n\t\t\t\t\t\t\tresult1[0] = -1;\n\t\t\t\t\t\t\tresult1[1] = -1;\n\t\t\t\t\t\t\tmaxvalues[0] = -1;\n\t\t\t\t\t\t\tmaxvalues[1] = -1;\n\t\t\t\t\t\t\tfor (int i = 0; i<parties.length; i++){\n\t\t\t\t\t\t\t\tif (parties[i]> maxvalues[0]) {\n\t\t\t\t\t\t\t\t\tresult1[1] = result1[0];\n\t\t\t\t\t\t\t\t\tmaxvalues[1] = maxvalues[0];\n\t\t\t\t\t\t\t\t\tresult1[0] = i;\n\t\t\t\t\t\t\t\t\tmaxvalues[0] = parties[i];\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (parties[i] > maxvalues[1]) {\n\t\t\t\t\t\t\t\t\t\tresult1[1] =i;\n\t\t\t\t\t\t\t\t\t\tmaxvalues[1] = parties[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tint[] x = result1;\n\t\t\t\t//\t\t\tSystem.out.println(x[0] + \" \" +x[1]);\n\t\t\t\t\t\t\tif ((totalcount ==3) || ((x[1] == -1) && (parties[x[0]] == 1)) ) {\n\t\t\t\t\t\t\t\tsb.append(PL[x[0]]);\n\t\t\t\t\t\t\t\tparties[x[0]]--;\n\t\t\t\t\t\t\t\ttotalcount --;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ((x[1] == -1) || (parties[x[0]] - parties[x[1]] > 1)) {\n\t\t\t\t\t\t\t\t\tsb.append(PL[x[0]]);\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tsb.append(PL[x[0]]);\n\t\t\t\t\t\t\t\t\tparties[x[0]]-=2;\n\t\t\t\t\t\t\t\t\ttotalcount-=2;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsb.append(PL[x[0]]);\n\t\t\t\t\t\t\t\t\tparties[x[0]]--;\n\t\t\t\t\t\t\t\t\tsb.append(PL[x[1]]);\n\t\t\t\t\t\t\t\t\tparties[x[1]]--;\n\t\t\t\t\t\t\t\t\ttotalcount-=2;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsb.append(\" \");\n\t\t\t\t\t\t}\n\t\t\t\tString result = sb.toString().trim();\n\t\t\t\toutput.write(\"Case #\" + actualCase +\": \" + result + \"\\n\");\t\t\t\t\n\t\t\t\tSystem.out.println(\"Case #\" + actualCase +\": \" + result );\t\t\t\t\n\t\t\t}\n\t\t\tinput.close();\n\t\t\toutput.close();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\t\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "idx": "8633"}
{"func": "package googlejam8.p634;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class A{\r\n\tpublic static void main(String args[])throws IOException{\r\n\t\t\r\n\t\t//Scanner in=new Scanner(System.in);\r\n\t\tScanner in=new Scanner(new File(\"input.in\"));\r\n\t\tPrintWriter pw=new PrintWriter(new FileWriter(new File(\"output.out\")));\r\n\t\t//PrintWriter pw=new PrintWriter(System.out);\r\n\t\tint T=in.nextInt();\r\n\t\tfor(int t=1;t<=T;t++){\t\t\t\t\r\n\t\t\t\tint n,arr[];\r\n\t\t\t\tn=in.nextInt();\r\n\t\t\t\tarr=new int[n];\r\n\t\t\t\tfor(int i=0;i<n;i++)\r\n\t\t\t\t\tarr[i]=in.nextInt();\r\n\t\t\t\tpw.print(\"Case #\"+t+\": \");\r\n\t\t\t\tint cnt=n;\r\n\t\t\t\twhile(cnt!=0){\r\n\t\t\t\t\t/*if(checkCase(arr)){\r\n\t\t\t\t\t\tSystem.out.println(\"Case\"+t);\r\n\t\t\t\t\t\tSystem.out.println(Arrays.toString(arr));\r\n\t\t\t\t\t}*/\r\n\t\t\t\t\t\r\n\t\t\t\t\tint max=-1,pos=-1;\r\n\t\t\t\t\tif(cnt==2){\r\n\t\t\t\t\t\tint tmp=0,tarr[]=new int[2],same=0;\r\n\t\t\t\t\t\tfor(int i=0;i<n;i++)\r\n\t\t\t\t\t\t\tif(arr[i]>0){\r\n\t\t\t\t\t\t\t\ttarr[tmp]=i;\r\n\t\t\t\t\t\t\t\ttmp++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(arr[tarr[0]]==arr[tarr[1]]){\r\n\t\t\t\t\t\t\tpw.print((char)((int)'A'+tarr[0])+\"\"+(char)((int)'A'+tarr[1])+\" \");\r\n\t\t\t\t\t\t\tarr[tarr[0]]--;\r\n\t\t\t\t\t\t\tarr[tarr[1]]--;\r\n\t\t\t\t\t\t\tif(arr[tarr[0]]==0){\r\n\t\t\t\t\t\t\t\tcnt-=2;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(int i=0;i<n;i++){\r\n\t\t\t\t\t\tif(arr[i]>=max){\r\n\t\t\t\t\t\t\tmax=arr[i];\r\n\t\t\t\t\t\t\tpos=i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpw.print((char)((int)'A'+pos)+\" \");\r\n\t\t\t\t\tif(max==1){\r\n\t\t\t\t\t\tcnt--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tarr[pos]--;\r\n\t\t\t\t}\r\n\t\t\t\tpw.println();\r\n\t\t\t\t//System.out.println(\"Case #\"+t+\": \"+res);\r\n\t\t\t\t\r\n\t\t}\r\n\t\tSystem.out.println(\"DONE\");\r\n\t\tpw.close();\r\n\t\t\r\n\t}\r\n}", "idx": "8634"}
{"func": "package googlejam8.p636;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\n/**\n * Google code jam problem solver.\n * Template generated by <a href=\"https://github.com/Faylixe/jammy\">Jammy</a> plugin.\n * \n * @author\n */\npublic final class SenateEvacuationSolver {\n\n\t/** Scanner instance that allows to parse problem input. **/\n\tprivate final Scanner scanner;\n\n\t/**\n\t * Default constructor.\n\t * \n\t * @param scanner Scanner instance that allows to parse problem input. \n\t */\n\tprivate SenateEvacuationSolver(final Scanner scanner) {\n\t\tthis.scanner = scanner;\n\t}\n\n\t/**\n\t * Solver entry point.\n\t * \n\t * @param args Command line parameters.\n\t * @throws FileNotFoundException If input file could not be parsed.\n\t */\n\tpublic static void main(final String [] args) throws FileNotFoundException {\n\t\tfinal File file = new File(args[0]);\n\t\tfinal Scanner scanner = new Scanner(file);\n\t\tfinal int n = scanner.nextInt();\n\t\tfinal SenateEvacuationSolver solver = new SenateEvacuationSolver(scanner);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tSystem.out.print(\"Case #\" + (i + 1) + \":\");\n\t\t\tint n1 = solver.scanner.nextInt();\n\t\t\tint[] p = new int[27];\n\t\t\tint t = 0;\n\t\t\tfor (int i1 = 1; i1 <= n1; i1++) {\n\t\t\t\tp[i1] = solver.scanner.nextInt();\n\t\t\t\tt += p[i1];\n\t\t\t}\n\t\t\t\n\t\t\tboolean first = true;\n\t\t\twhile (t > 0) {\n\t\t\t\tint max = 1;\n\t\t\t\tfor (int i2 = 1; i2 <= n1; i2++) {\n\t\t\t\t\tif (p[i2] > p[max]) {\n\t\t\t\t\t\tmax = i2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (t == 2) {\n\t\t\t\t\tif (p[max] == 2) {\n\t\t\t\t\t\tp[max] -= 2;\n\t\t\t\t\t\tt -= 2;\n\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\tSystem.out.print((char) (64 + max));\n\t\t\t\t\t\tSystem.out.print((char) (64 + max));\n\t\t\t\t\t} else if (p[max] == 1) {\n\t\t\t\t\t\tp[max]--;\n\t\t\t\t\t\tt--;\n\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\tSystem.out.print((char) (64 + max));\n\t\t\t\t\t\t\n\t\t\t\t\t\tmax = 1;\n\t\t\t\t\t\tfor (int i3 = 1; i3 <= n1; i3++) {\n\t\t\t\t\t\t\tif (p[i3] > p[max]) {\n\t\t\t\t\t\t\t\tmax = i3;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp[max]--;\n\t\t\t\t\t\tt--;\n\t\t\t\t\t\tSystem.out.print((char) (64 + max));\n\t\t\t\t\t}\n\t\t\t\t} else if (t == 3) {\n\t\t\t\t\tp[max]--;\n\t\t\t\t\tt--;\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\tSystem.out.print(Character.toString((char) (64 + max)));\n\t\t\t\t} else {\n\t\t\t\t\tp[max]--;\n\t\t\t\t\tt--;\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\tSystem.out.print((char) (64 + max));\n\t\t\t\t\t\n\t\t\t\t\tmax = 1;\n\t\t\t\t\tfor (int i4 = 1; i4 <= n1; i4++) {\n\t\t\t\t\t\tif (p[i4] > p[max]) {\n\t\t\t\t\t\t\tmax = i4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tp[max]--;\n\t\t\t\t\tt--;\n\t\t\t\t\tSystem.out.print((char) (64 + max));\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tscanner.close();\n\t}\n\n}", "idx": "8636"}
{"func": "package googlejam8.p639;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayDeque;\r\nimport java.util.Scanner;\r\n\r\npublic class Pancakes {\r\n\t\r\n\tstatic char giveMeTheOppositePlease(char c){\r\n\t\tif (c == '-')\r\n\t\t\treturn '+';\r\n\t\treturn '-';\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner in = new Scanner(new File(\"C:\\\\Users\\\\Adrien\\\\eclipseWorkspace\\\\google\\\\input.in\"));\r\n\t\tFileWriter fileWriter = new FileWriter(new File(\"C:\\\\Users\\\\Adrien\\\\eclipseWorkspace\\\\google\\\\output.out\"));\r\n\t\tint t = Integer.parseInt(in.nextLine());  // Scanner has functions to read ints, longs, strings, chars, etc.\r\n\t\tfor (int i = 1; i <= t; ++i) {\r\n\t\t  char[] n = in.nextLine().toCharArray();\r\n\t\t  ArrayDeque<Character> pancakeDeque = new ArrayDeque<Character>(), tempDeque = new ArrayDeque<Character>();\r\n\t\t  for (int j = 0; j < n.length; j++) {\r\n\t\t\tpancakeDeque.addLast(n[j]);\r\n\t\t  }\r\n\t\t  int count = 0;\r\n\t\t  while (pancakeDeque.contains('-')) {\r\n\t\t\t  count++;\r\n\t\t\tchar charCour = pancakeDeque.removeFirst();\r\n\t\t\ttempDeque.add(Pancakes.giveMeTheOppositePlease(charCour));\r\n\t\t\twhile (!pancakeDeque.isEmpty() && pancakeDeque.getFirst() == charCour) {\r\n\t\t\t\ttempDeque.addLast(Pancakes.giveMeTheOppositePlease(pancakeDeque.removeFirst()));\r\n\t\t\t}\r\n\t\t\twhile(!tempDeque.isEmpty()){\r\n\t\t\t\tpancakeDeque.addFirst(tempDeque.removeFirst());\r\n\t\t\t}\r\n\t\t  }\r\n\t\t  fileWriter.write(\"Case #\" + i + \": \" + count +\"\\n\");\r\n\t\t}\r\n\t\tin.close();\r\n\t\tfileWriter.close();\r\n\t}\r\n}\r\n", "idx": "8639"}
{"func": "package googlejam8.p640;\nimport java.util.Scanner;\n\npublic class A {\n\tpublic static void main(String[] args) {\n\t\tScanner in = null;\n\t\tA a = new A();\n\t\ttry {\n\t\t\tin = new Scanner(System.in);\n\t\t\tint count = in.nextInt();\n\t\t\tfor (int test = 1; test <= count; test++) {\n\t\t\t\tint N = in.nextInt();\n\t\t\t\tint[] sen = new int[N];\n\t\t\t\tint totalNum = 0;\n\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t\tsen[i] = in.nextInt();\n\t\t\t\t\ttotalNum += sen[i];\n\t\t\t\t}\n\t\t\t\tint totalNum1 = totalNum;\n\t\t\t\tStringBuilder result1 = new StringBuilder();\n\t\t\t\tint start = 'A';\n\t\t\t\twhile (totalNum1 > 0) {\n\t\t\t\t\tint max1 = 0;\n\t\t\t\t\tint max2 = 0;\n\t\t\t\t\tint max3 = 0;\n\t\t\t\t\tint maxSen1 = 0;\n\t\t\t\t\tint maxSen2 = 0;\n\t\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t\t\tif (sen[i] > max1) {\n\t\t\t\t\t\t\tmaxSen1 = i;\n\t\t\t\t\t\t\tmax1 = sen[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsen[maxSen1]--;\n\t\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t\t\tif (sen[i] > max2) {\n\t\t\t\t\t\t\tmaxSen2 = i;\n\t\t\t\t\t\t\tmax2 = sen[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsen[maxSen2]--;\n\t\t\t\t\tif (totalNum1 > 2) {\n\t\t\t\t\t\tmax3 = 0;\n\t\t\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t\t\t\tif (sen[i] > max3) {\n\t\t\t\t\t\t\t\tmax3 = sen[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (max3 == max2) {\n\t\t\t\t\t\t\tchar x = (char) (start + maxSen1);\n\t\t\t\t\t\t\tresult1.append(x);\n\t\t\t\t\t\t\ttotalNum1--;\n\t\t\t\t\t\t\tsen[maxSen2]++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchar x = (char) (start + maxSen1);\n\t\t\t\t\t\t\tresult1.append(x);\n\t\t\t\t\t\t\ttotalNum1--;\n\t\t\t\t\t\t\tx = (char) (start + maxSen2);\n\t\t\t\t\t\t\tresult1.append(x);\n\t\t\t\t\t\t\ttotalNum1--;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (max1 == max2 || maxSen1 == maxSen2) {\n\t\t\t\t\t\t\tchar x = (char) (start + maxSen1);\n\t\t\t\t\t\t\tresult1.append(x);\n\t\t\t\t\t\t\ttotalNum1--;\n\t\t\t\t\t\t\tx = (char) (start + maxSen2);\n\t\t\t\t\t\t\tresult1.append(x);\n\t\t\t\t\t\t\ttotalNum1--;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchar x = (char) (start + maxSen1);\n\t\t\t\t\t\t\tresult1.append(x);\n\t\t\t\t\t\t\ttotalNum1--;\n\t\t\t\t\t\t\tsen[maxSen2]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult1.append(\" \");\n\t\t\t\t}\n\t\t\t\tString result = result1.toString();\n\t\t\t\tSystem.out.println(\"Case #\" + test + \": \" + result);\n\t\t\t}\n\t\t\tin.close();\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "8640"}
{"func": "package googlejam8.p648;\nimport java.util.*;\r\nimport java.io.*;\r\npublic class A {\r\n  public static void main(String[] args) {\r\n    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n    int t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\r\n    for (int i = 1; i <= t; ++i) {\r\n    \tint n=in.nextInt(),total=0;\r\n    \t\r\n        Vector<Integer> m=new Vector<Integer>();\r\n    \tfor(int j=0;j<n;j++)\r\n    \t{\r\n    \t\tm.add(in.nextInt());\r\n    \t\ttotal+=m.elementAt(j);\r\n    \t}\r\n    \t System.out.print(\"Case #\" + i + \": \");\r\n    \t int mid ;\r\n        while(total!=0)\r\n        {  mid = (int)Collections.max(m);\r\n        int max;\r\n           int ind1=m.indexOf(mid),ind2=m.lastIndexOf(mid);\r\n           if(ind1 !=-1 && ind2!=-1)\r\n           {  if(ind1!=ind2){\r\n        \t   \r\n        \t   total-=2;\r\n        \t   m.set(ind1, m.elementAt(ind1)-1);\r\n        \t   m.set(ind2, m.elementAt(ind2)-1);\r\n        \t   max = (int)Collections.max(m);\r\n        \t   if(max>total/2)\r\n        \t   {\r\n        \t\t   m.set(ind2, m.elementAt(ind2)+1);\r\n        \t\t   total+=1;\r\n        \t\t   System.out.print((char)(ind1+'A')+\" \");\r\n        \t   }\r\n        \t   else\r\n        \t   {\r\n        \t      System.out.print((char)(ind1+'A')+\"\"+(char)(ind2+'A')+\" \");\r\n        \t   }\r\n           }\r\n           else\r\n           {  if(m.elementAt(ind1)>2)\r\n           {\r\n        \t   System.out.print((char)(ind1+'A')+\"\"+(char)(ind2+'A')+\" \");\r\n        \t   m.set(ind1, m.elementAt(ind1)-1);\r\n        \t   m.set(ind2, m.elementAt(ind2)-1);\r\n        \t   total-=2;\r\n           }\r\n           else\r\n           {\r\n        \t   System.out.print((char)(ind1+'A')+\" \");\r\n        \t   m.set(ind1, m.elementAt(ind1)-1);\r\n        \t  \r\n        \t   total-=1;\r\n           }\r\n           }   \r\n           }\r\n        \t\r\n        }\r\n         \r\n     System.out.println();\r\n    }\r\n  }\r\n  \r\n}", "idx": "8648"}
{"func": "package googlejam8.p652;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class SenateEvacuation \r\n{\r\n    public static void main(String[] args) throws FileNotFoundException\r\n    {\r\n        Scanner sc=new Scanner(new File(\"cur/SenateEvacuationLarge.in\"));\r\n        PrintWriter pout=new PrintWriter(\"cur/SenateEvacuationLarge.out\");\r\n        \r\n        int i,j,t,z,n;\r\n        \r\n        t=sc.nextInt();\r\n        \r\n        for(z=1;z<=t;z++)\r\n        {\r\n            pout.print(\"Case #\"+z+\": \");\r\n            n=sc.nextInt();\r\n            int a[]=new int[n];\r\n            for(i=0;i<n;i++)\r\n                a[i]=sc.nextInt();\r\n            int len=n;\r\n            while(len>0)\r\n            {\r\n                int max1=0,max2=1;\r\n                for(i=1;i<n;i++)\r\n                {\r\n                    if(a[max1]<a[i])\r\n                    {\r\n                        max2=max1;\r\n                        max1=i;\r\n                    }\r\n                    else if(a[max2]<a[i])\r\n                        max2=i;\r\n                }\r\n                if(len==3&&a[max1]==1)\r\n                {\r\n                    pout.print((char)(max1+65)+\" \");\r\n                    a[max1]--;\r\n                }\r\n                else{\r\n                    if(a[max1]==a[max2])\r\n                    {\r\n                        pout.print((char)(max1+65)+\"\"+(char)(max2+65)+\" \");\r\n                        a[max1]--;a[max2]--;\r\n                    }\r\n                    else \r\n                    {\r\n                        pout.print((char)(max1+65)+\"\"+(char)(max1+65)+\" \");\r\n                        a[max1]-=2;\r\n                    }\r\n                }\r\n                if(a[max1]==0)\r\n                    len--;\r\n                if(a[max2]==0)\r\n                    len--;\r\n            }\r\n            \r\n            pout.println(\"\");\r\n        }   \r\n        pout.close();\r\n    }\r\n}", "idx": "8652"}
{"func": "package googlejam8.p653;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\nimport java.util.*;\r\n\r\n\r\npublic class SenateEvac {\r\n\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\t\r\n\t\tFile testFile = new File(\"e:\\\\Users\\\\Ricardo\\\\Documents\\\\CodeJam\\\\SenateEvac\\\\A-large.in\");\r\n\t\t\r\n\t\tScanner in=null;\r\n\t\ttry {\r\n\t\t\tin = new Scanner(testFile);\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tif (in==null){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tInteger testCases = in.nextInt();\r\n\t\tin.nextLine();\r\n\r\n\t\tfor (Integer currentCase = 0; currentCase < testCases; currentCase++) {\r\n\t\t\tInteger partyNumber = in.nextInt();\r\n\t\t\tInteger totalSenators = 0;\r\n\t\t\tin.nextLine();\r\n\t\t\tint[] partyMembers = new int[partyNumber];\r\n\t\t\tSystem.out.print(String.format(\"Case #%d: \",currentCase+1));\r\n\t\t\tfor(Character nextCharacter='A';nextCharacter<'A'+partyNumber;nextCharacter++){\r\n\t\t\t\tInteger senatorsInParty = in.nextInt();\r\n\t\t\t\tpartyMembers[nextCharacter - 'A'] = senatorsInParty;\r\n\t\t\t\ttotalSenators+=senatorsInParty;\r\n\t\t\t}\r\n\t\t\twhile(totalSenators>0){\r\n\t\t\t\tArrayList<Integer>evacuees =new ArrayList<Integer>();\r\n\t\t\t\tint lastCandidate = -1;\r\n\t\t\t\tfor (int i=0;i<partyNumber;i++){\r\n\t\t\t\t\tif (partyMembers[i]>0){\r\n\t\t\t\t\t\t//MUST evacuate\r\n\t\t\t\t\t\tif (partyMembers[i]>(totalSenators-1)/2){\r\n\t\t\t\t\t\t\tevacuees.add(i);\r\n\t\t\t\t\t\t\tif (evacuees.size()==2){\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tif (evacuees.size()==0){\r\n\t\t\t\t\t\t\t\tlastCandidate = i;\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (evacuees.size()==0){\r\n\t\t\t\t\tevacuees.add(lastCandidate);\r\n\t\t\t\t}\r\n\t\t\t\tfor (Integer nextEvacuee:evacuees){\r\n\t\t\t\t\tpartyMembers[nextEvacuee]-=1;  \r\n\t\t\t\t\tSystem.out.print((char)( nextEvacuee+'A'));\r\n\t\t\t\t\ttotalSenators--;\r\n\t\t\t\t}\r\n\t\t\t\tif (totalSenators>0) System.out.print(\" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t\tif (currentCase+1<testCases){\r\n\t\t\t\tin.nextLine();\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\r\n\t\tin.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "8653"}
{"func": "package googlejam8.p659;\nimport java.io.*;\r\nimport java.util.*;\r\nclass A\r\n{\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor(int i=0;i<T;i++){\r\n\t\t\tSystem.out.print(\"Case #\"+(i+1)+\": \");\r\n\t\t\tint parties=Integer.parseInt(in.readLine());\r\n\t\t\tString[] Members=in.readLine().split(\" \");\r\n\t\t\tint total=0;\r\n\t\t\tfor(int j=0;j<parties;j++){\r\n\t\t\t\ttotal+=Integer.parseInt(Members[j]);\r\n\t\t\t\t\t}\r\n\t\t\twhile(total!=0){\r\n\t\t\t\tint first=0;\r\n\t\t\t\tint second=-1;\r\n\t\t\t\tint num1=0;\r\n\t\t\t\tint num2=0;\r\n\t\t\t\tString ans=\"\";\r\n\t\t\t\tfor(int j=0;j<parties;j++){\r\n\t\t\t\t\t\tif(first<Integer.parseInt(Members[j])){\r\n\t\t\t\t\t\t\tsecond=first;\r\n\t\t\t\t\t\t\tfirst=Integer.parseInt(Members[j]);\r\n\t\t\t\t\t\t\tnum2=num1;\r\n\t\t\t\t\t\t\tnum1=j;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(second<Integer.parseInt(Members[j])){\r\n\t\t\t\t\t\t\t\t\tsecond=Integer.parseInt(Members[j]);\r\n\t\t\t\t\t\t\t\t\tnum2=j;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\tans=\"\"+(char)(65+num1);\r\n\t\t\t\tMembers[num1]=Integer.toString(Integer.parseInt(Members[num1])-1);\r\n\t\t\t\ttotal-=1;\r\n\t\t\t\tString ans2=\"\";\r\n\t\t\t\tfor(int j=0;j<parties;j++){\r\n\t\t\t\t\tdouble p=total;\r\n\t\t\t\t\tif(Double.parseDouble(Members[j])/p>0.5){\r\n\t\t\t\t\t\tans+=(char)(65+j);\r\n\t\t\t\t\t\tMembers[j]=Integer.toString(Integer.parseInt(Members[j])-1);\r\n\t\t\t\t\t\ttotal-=1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\tSystem.out.print(ans+\" \");\r\n\t\t}\r\n\t\tSystem.out.println();\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}", "idx": "8659"}
{"func": "package googlejam8.p663;\n\r\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\tstatic final String INPUT_FILE = \"1C/A/large.in\";\r\n\tstatic final String OUTPUT_FILE = \"1C/A/large-output.txt\";\r\n\r\n\t\r\n\tpublic static void main(String args[]) throws Exception {\r\n\t\tLocale.setDefault(Locale.US);\r\n\t\tScanner in = new Scanner(new File(INPUT_FILE));\r\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(new File(OUTPUT_FILE)));\r\n\t\t\r\n\r\n\t\tint T = in.nextInt();\r\n\t\t\r\n\t\tin.nextLine();\r\n\t\t\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tString result = \"\";\r\n\t\t\t\r\n\t\t\tint N = in.nextInt();\r\n\t\t\t\r\n\t\t\tint[] P = new int[N];\r\n\t\t\t\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tP[i] = in.nextInt();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint num = 0;\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tnum += P[i];\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\tint max1 = 0;\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tif (P[max1] < P[i]) {\r\n\t\t\t\t\tmax1 = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint max2 = 0;\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tif (i != max1 && (max1 == max2 || P[max2] < P[i])) {\r\n\t\t\t\t\tmax2 = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\twhile (P[max1] > P[max2]) {\r\n\t\t\t\tresult += (char) ('A' + max1);\r\n\t\t\t\tP[max1]--;\r\n\t\t\t\tnum--;\r\n\t\t\t\tif (P[max1] > P[max2]) {\r\n\t\t\t\t\tresult += (char) ('A' + max1);\r\n\t\t\t\t\tP[max1]--;\r\n\t\t\t\t\tnum--;\r\n\t\t\t\t}\r\n\t\t\t\tresult += \" \";\r\n\t\t\t}\r\n\r\n\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\tif (i != max1 && i != max2) {\r\n\t\t\t\t\twhile (P[i] > 0) {\r\n\t\t\t\t\t\tresult += (char) ('A' + i);\r\n\t\t\t\t\t\tP[i]--;\r\n\t\t\t\t\t\tnum--;\r\n\t\t\t\t\t\tif (P[i] > 0) {\r\n\t\t\t\t\t\t\tresult += (char) ('A' + i);\r\n\t\t\t\t\t\t\tP[i]--;\r\n\t\t\t\t\t\t\tnum--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresult += \" \";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\twhile (P[max1] > 0) {\r\n\t\t\t\tresult += (char) ('A' + max1);\r\n\t\t\t\tP[max1]--;\r\n\t\t\t\tnum--;\r\n\t\t\t\tif (P[max2] > 0) {\r\n\t\t\t\t\tresult += (char) ('A' + max2);\r\n\t\t\t\t\tP[max2]--;\r\n\t\t\t\t\tnum--;\r\n\t\t\t\t}\r\n\t\t\t\tresult += \" \";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\" + t + \": \" + result);\r\n\t\t\tout.append(\"Case #\" + t + \": \" + result);\r\n\t\t\tout.newLine();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tin.close();\r\n\t\tout.close();\r\n\t}\r\n\t\r\n\t\r\n}\r\n", "idx": "8663"}
{"func": "package googlejam8.p669;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner s = new Scanner(new File(\"in.txt\"));\r\n\t\tint numCases = Integer.parseInt(s.nextLine());\r\n\t\tlong time = System.currentTimeMillis();\r\n\t\tfor (int i = 0; i < numCases; i++) {\r\n\t\t\tint numParties = Integer.parseInt(s.nextLine());\r\n\t\t\tString[] members = s.nextLine().split(\" \");\r\n\t\t\tEvacuation e = new Evacuation();\r\n\t\t\tfor (int j = 0; j < numParties; j++) {\r\n\t\t\t\tchar c = (char) ('A' + j);\r\n\t\t\t\te.senate.add(new Party(new StringBuilder().append(c).toString(), Integer.parseInt(members[j])));\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\" + (i + 1) + \": \" + e.evacuate());\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\tSystem.out.println(\"Time: \" + (System.currentTimeMillis() - time));\r\n\t\ts.close();\r\n\t}\r\n\t\r\n}\r\n", "idx": "8669"}
{"func": "package googlejam8.p672;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.PriorityQueue;\n\npublic class Senate {\n\n\t\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\t\n\t\tBufferedReader bf = new BufferedReader(new FileReader(\"A-large.in-2.txt\"));\n\t\t\n\t\tPrintStream obj = new PrintStream(new File(\"output.txt\"));\n\t\t\n\t\tint num_case = Integer.parseInt(bf.readLine());\n\t\t\n\t\tfor(int i = 0; i<num_case;i++){\n\t\t\tString num = bf.readLine();\n\t\t\t\n\t\t\tint numSenate = Integer.valueOf(num);\n\t\t\t\n\t\t\tobj.print(\"Case #\"+(i+1)+\": \");\n\t\t\tString line = bf.readLine();\n\t\t\t\n\t\t\tString[] lineNum = line.split(\" \");\n\t\t\t\n\t\t\tint[] arr = new int[26];\n\t\t\t\n\t\t\tint count = 0;\n\t\t\tint max = 0;\n\t\t\tint totalNum = 0;\n\t\t\tfor(int i2 = 0; i2<lineNum.length; i2++){\n\t\t\t\tif(lineNum[i2] != \" \"){\n\t\t\t\t\tarr[count]+=Integer.valueOf(lineNum[i2]);\n\t\t\t\t\tcount++;\n\t\t\t\t\ttotalNum += Integer.valueOf(lineNum[i2]);\n\t\t\t\t\tmax = Math.max(Integer.valueOf(lineNum[i2]), max);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tArrayList<Integer> arrList = new ArrayList<>(0);\n\t\t\t\n\t\t\twhile(totalNum > 0){\n\t\t\t\tint max1 = 0;\n\t\t\t\tfor(int i1 = 0; i1<arr.length;i1++){\n\t\t\t\t\tmax1 = arr[max1]>arr[i1]? max1 : i1;\n\t\t\t\t}\n\t\t\t\tint remove = max1;\n\t\t\t\tarr[remove]--;\n\t\t\t\ttotalNum--;\n\t\t\t\tarrList.add(remove);\n\t\t\t}\n\t\t\t\n\t\t\tint counter =0;\n\t\t\tint length = arrList.size();\n\t\t\t\n\t\t\tfor(int i1 = 0; i1<length && arrList.size()>3;i1++){\n\t\t\t\tif(counter<1){\n\t\t\t\t\tobj.print((char)(arrList.remove(0)+65));\n\t\t\t\t\tcounter++;\n\t\t\t\t}else{\n\t\t\t\t\tobj.print((char)(arrList.remove(0)+65));\n\t\t\t\t\tobj.print(\" \");\n\t\t\t\t\tcounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(arrList.size() == 4){\n\t\t\t\tobj.print((char)(arrList.remove(0)+65));\n\t\t\t\tobj.print((char)(arrList.remove(0)+65));\n\t\t\t\tobj.print(\" \");\n\t\t\t\tobj.print((char)(arrList.remove(0)+65));\n\t\t\t\tobj.print((char)(arrList.remove(0)+65));\n\t\t\t}\n\t\t\telse if(arrList.size() == 3){\n\t\t\t\tobj.print((char)(arrList.remove(0)+65));\n\t\t\t\tobj.print(\" \");\n\t\t\t\tobj.print((char)(arrList.remove(0)+65));\n\t\t\t\tobj.print((char)(arrList.remove(0)+65));\n\t\t\t}else if(arrList.size() == 2){\n\t\t\t\tobj.print((char)(arrList.remove(0)+65));\n\t\t\t\tobj.print((char)(arrList.remove(0)+65));\n\t\t\t}\n\t\t\tobj.println();\n\t\t}\n\t\tobj.close();\n\t\t}\n}\n\n\n\n", "idx": "8672"}
{"func": "package googlejam8.p674;\n//package codejamround1c;\r\n\r\nimport java.io.File;\r\nimport java.util.Scanner;\r\n\r\npublic class senateevac {\r\n\tpublic static void main(String args[]){\r\n\t\ttry{\r\n\t\t\tScanner fr=new Scanner(new File(\"A-large.in\"));\r\n\t\t\tint inp=fr.nextInt();\t\r\n\t\t\tfor(int i=0;i<inp;i++){\r\n\t\t\t\tint n=fr.nextInt();\r\n\t\t\t\tint arr[]=new int[n];\r\n\t\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\t\tarr[j]=fr.nextInt();\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.print(\"Case #\"+(i+1)+\": \");\r\n\t\t\t\t\t\tfunc(arr);\r\n\t\t\t}\r\n\t\t\t}catch(Exception e){\r\n\t\t\t\t\r\n\t\t\t}\r\n\t}\r\n\tpublic static void func(int arr[]){\r\n\t\twhile(true){\r\n\t\t\tint max=arr[0];\r\n\t\t\tint equaltomax=1;\r\n\t\tfor(int i=1;i<arr.length;i++){\r\n\t\t\tif(arr[i]>max){\r\n\t\t\t\tmax=arr[i];\r\n\t\t\t\tequaltomax=1;\r\n\t\t\t}\r\n\t\t\telse if(arr[i]==max){\r\n\t\t\t\tequaltomax++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(max==0){\r\n\t\t\tSystem.out.println();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint nikcount=0;\r\n\t\t//System.out.print(\"max = \"+max);\r\n\t\tif(equaltomax%2==0){\r\n\t\t\t\r\n\t\t\tfor(int i=0;i<arr.length;i++){\r\n\t\t\t\tif(arr[i]==max){\r\n\t\t\t\t\tSystem.out.print(Character.toString ((char) (i+65)));\r\n\t\t\t\t\tarr[i]--;\r\n\t\t\t\t\tnikcount++;\r\n\t\t\t\t\tif(nikcount==2){\r\n\t\t\t\t\t\ti=arr.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (equaltomax%2!=0){\r\n\t\t\tfor(int i=0;i<arr.length;i++){\r\n\t\t\t\tif(arr[i]==max){\r\n\t\t\t\t\tSystem.out.print(Character.toString ((char) (i+65)));\r\n\t\t\t\t\tarr[i]--;\r\n\t\t\t\t\tnikcount++;\r\n\t\t\t\t\tif(nikcount==1){\r\n\t\t\t\t\t\ti=arr.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tSystem.out.print(\" \");\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n", "idx": "8674"}
{"func": "package googlejam8.p675;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class JamProblems {\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        JamProblems r = new JamProblems();\n\t\tScanner sc = null;\n\t\t\tPrintWriter pw = null;\n\t\t\ttry {\n\t\t\t\tsc = new Scanner(new File(\"A-large.in\"));\n\t\t\t\tpw = new PrintWriter(new File(\"output.out\"));\n\t\t\t} catch (FileNotFoundException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t    \t\t\n\t\t    int tests = sc.nextInt();\n\t\t    for (int j = 1; j <= tests; j++) { \t  \n\t\t    \tpw.print(\"Case #\" + j + \": \");\n\t\t\t    int n = sc.nextInt();\n\t\t\t    int[] partEmp = new int[n];\n\t\t\t    Map<Integer, Integer> parties = new HashMap<Integer, Integer>();\n\t\t\t    String partNames = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t\t\t    int lastEmpl = 0;\n\t\t\t    for(int i = 0; i < n; i++) {\n\t\t\t    \tpartEmp[i] = sc.nextInt();\n\t\t\t    \tparties.put(i, partEmp[i]);\n\t\t\t    \tlastEmpl += partEmp[i];\n\t\t\t    }\n\t\t\t    //pw.print(partNames.charAt(0));\n\t\t\t    \n\t\t\t    while(true) {\n\t\t\t    \tint fMaxInd = 0, sMaxInd = 0, maxEm = 0;\n\t\t\t    \tfor(int z = 0; z < n; z++) {\n\t\t\t    \t\tif(partEmp[z] > maxEm) {\n\t\t\t    \t\t\tmaxEm = partEmp[z];\n\t\t\t    \t\t\tfMaxInd = z;\n\t\t\t    \t\t}\n\t\t\t    \t}\n\t\t\t    \tif(lastEmpl == 3) {\n\t\t\t    \t\tpw.print(partNames.charAt(fMaxInd) + \" \");\n\t\t\t    \t\tpartEmp[fMaxInd]--;\n\t\t\t    \t} else {\n\t\t\t    \t\tmaxEm = 0;\n\t\t\t    \t\tfor(int z = 0; z < n; z++) {\n\t\t    \t    \t\tif(z != fMaxInd && partEmp[z] > maxEm) {\n\t\t    \t    \t\t\tmaxEm = partEmp[z];\n\t\t    \t    \t\t\tsMaxInd = z;\n\t\t    \t    \t\t}\n\t\t    \t    \t}\n\t\t\t    \t\tpw.print(partNames.charAt(fMaxInd) + \"\" + partNames.charAt(sMaxInd) + \" \");\n\t\t\t    \t\tpartEmp[fMaxInd]--;\n\t\t\t    \t\tpartEmp[sMaxInd]--;\n\t\t\t    \t}\t\n\t\t\t    \tlastEmpl = 0;\n\t\t\t    \tfor(int i = 0; i < n; i++) {\n\t\t\t    \t\tlastEmpl += partEmp[i];\n\t\t\t    \t}\n\t\t\t    \tif(lastEmpl == 0) break;\n\t\t\t    }\n\t\t\t    pw.println();\n\t\t  } \n\t\t\n\t\t  pw.close();\r\n    }\r\n    \r\n}", "idx": "8675"}
{"func": "package googlejam8.p676;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\n/**\n * Created by dasha on 5/8/16.\n */\npublic class A1C {\n    public static void main(String[] args) {\n        A1C r = new A1C();\n\t\ttry {\n\t\t    r.in = new Scanner(new FileInputStream(new File(\"A-large\" + \".in\")));\n\t\t    r.out = new PrintWriter(new File(\"A-large\" + \".out\"));\n\t\t    int tests = r.in.nextInt();\n\t\t\tfor (int i = 1; i <= tests; i++) {\n\t\t\t    int n = r.in.nextInt();\n\t\t\t    int[] quantity = new int[n];\n\t\t\t    int maxInd = 0;\n\t\t\t    int min = Integer.MAX_VALUE;\n\t\t\t\n\t\t\t\n\t\t\t    HashMap<Integer, ArrayList<Integer>> aux = new HashMap<>();\n\t\t\t    int max = 0;\n\t\t\t    for (int j = 0; j < n; j++) {\n\t\t\t        quantity[j] = r.in.nextInt();\n\t\t\t        if (quantity[j] >= quantity[maxInd]) {\n\t\t\t            maxInd = j;\n\t\t\t        }\n\t\t\t        min = Math.min(quantity[j], min);\n\t\t\t        max = Math.max(quantity[j], max);\n\t\t\t        if (!aux.containsKey(quantity[j])) {\n\t\t\t            aux.put(quantity[j], new ArrayList<>());\n\t\t\t        }\n\t\t\t\n\t\t\t        aux.get(quantity[j]).add(j);\n\t\t\t    }\n\t\t\t\n\t\t\t\n\t\t\t    int[] arCopy = Arrays.copyOf(quantity, quantity.length);\n\t\t\t    Arrays.sort(arCopy);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t    r.out.print(\"Case #\" + i + \": \");\n\t\t\t\n\t\t\t    int ind = arCopy.length - 1;\n\t\t\t    while(aux.size() > 1) {\n\t\t\t        int curMax = arCopy[ind];\n\t\t\t\n\t\t\t        while (arCopy[ind - 1] == curMax) {\n\t\t\t            ind--;\n\t\t\t        }\n\t\t\t        int nextMax = arCopy[ind - 1];\n\t\t\t        int toDel = curMax - nextMax;\n\t\t\t        for (int j = 0; j < toDel; j++) {\n\t\t\t            for (int sen  : aux.get(curMax)) {\n\t\t\t                r.out.print(((char)('A' + sen)) + \" \");\n\t\t\t                quantity[sen]--;\n\t\t\t            }\n\t\t\t        }\n\t\t\t        aux.get(nextMax).addAll(aux.get(curMax));\n\t\t\t        aux.remove(curMax);\n\t\t\t        ind--;\n\t\t\t    }\n\t\t\t\n\t\t\t    ind = n - 1;\n\t\t\t    while (ind > 1) {\n\t\t\t        for (int j = 0; j < quantity[ind]; j++) {\n\t\t\t            r.out.print(((char)('A' + ind)) + \" \");\n\t\t\t        }\n\t\t\t        quantity[ind] = 0;\n\t\t\t        ind--;\n\t\t\t    }\n\t\t\t\n\t\t\t    for (int j = 0; j < quantity[ind]; j++) {\n\t\t\t        r.out.print(\"AB\" + \" \");\n\t\t\t    }\n\t\t\t    r.out.println();\n\t\t\t\n\t\t\t}\n\t\t    r.out.close();\n\t\t} catch (Exception e) {\n\t\t    e.printStackTrace();\n\t\t}\n    }\n\n    Scanner in;\n    PrintWriter out;\n}\n", "idx": "8676"}
{"func": "package googlejam8.p683;\n\r\n\timport java.util.*;\r\n\timport java.io.*;\r\n\r\n\tpublic class  Round1CProblemA {\r\n\t\tpublic static void main(String[] args) throws Exception {\r\n\t\t\tRound1CProblemA r = (new  Round1CProblemA());\n\t\t\tScanner sc = new Scanner(new FileReader(\"input.in\"));\n\t\t\tPrintWriter pw = new PrintWriter(new FileWriter(\"output.txt\"));\n\t\t\tint T = sc.nextInt();\n\t\t\tfor (int t=0; t<T; t++) {\n\t\t\t\tSystem.out.println(\"Now case \" + (t+1));\n\t\t\t\tint N = sc.nextInt();\n\t\t\t\tint[] P = new int[N];\n\t\t\t\tfor(int i=0; i<N;i++){\n\t\t\t\t\tP[i] = sc.nextInt();\n\t\t\t\t}\n\t\t\t\tint pe = 0;\n\t\t\t\tfor(int i=0; i<N;i++){\n\t\t\t\t\tpe = pe + P[i];\n\t\t\t\t}\n\t\t\t\tString alp = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t\t\t\tString ans = \"\";\n\t\t\t\twhile(pe>0){\n\t\t\t\t\tint maxp = 0;\n\t\t\t\t\tfor(int i=1;i<P.length;i++){\n\t\t\t\t\t\tif(P[i]>P[maxp]) maxp = i;\n\t\t\t\t\t}\n\t\t\t\t\tP[maxp] = P[maxp] - 1;\n\t\t\t\t\tpe = pe -1;\n\t\t\t\t\tans = ans + alp.charAt(maxp);\n\t\t\t\t\tif(pe==2){\n\t\t\t\t\t}else{\n\t\t\t\t\t\tfor(int i=1;i<P.length;i++){\n\t\t\t\t\t\t\tif(P[i]>P[maxp]) maxp = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tP[maxp] = P[maxp] - 1;\n\t\t\t\t\t\tpe = pe -1;\n\t\t\t\t\t\tans = ans + alp.charAt(maxp);\n\t\t\t\t\t}\n\t\t\t\t\tans = ans + \" \";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tpw.print(\"Case #\" + (t+1) + \": \" + ans);\n\t\t\t\tpw.println();\n\t\t\t}\n\t\t\tpw.flush();\n\t\t\tpw.close();\n\t\t\tsc.close();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n", "idx": "8683"}
{"func": "package googlejam8.p685;\nimport java.util.Scanner;\n\npublic class SenateEvacuation {\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        int t = reader.nextInt();\n        reader.nextLine();\n\n        for (int i = 1; i <= t; i++) {\n            int n = reader.nextInt();\n            int[] p = new int[n];\n            int sum = 0;\n            for (int j = 0; j < n; j++) {\n                p[j] = reader.nextInt();\n                sum += p[j];\n            }\n\n            String sol = \"\";\n            int acc = 0;\n            while (acc < sum) {\n                // find current max\n                int maxP = 0, maxPI = 0;\n                for (int k = 0; k < n; k++) {\n                    if (p[k] > maxP) {\n                        maxP = p[k];\n                        maxPI = k;\n                    }\n                }\n                p[maxPI]--; acc++;\n                char e = (char)(maxPI + 65);\n                sol += \" \" + e;\n                // how many max(s) we're left with?\n                int l = 0, m = 0;\n                for (int k = 0; k < n; k++) {\n                    if (p[k] == maxP) {\n                        l++;\n                        m = k;\n                    }\n                }\n                if (l == 1) { // no good!\n                    // remove the last max together\n                    p[m]--; acc++;\n                    char f = (char)(m + 65);\n                    sol += f;\n                }\n            }\n\n            System.out.println(\"Case #\" + i + \":\" + sol);\n        }\n    }\n}\n", "idx": "8685"}
{"func": "package googlejam8.p695;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\n\r\n\r\npublic class J16_r2Cq1 {\r\n\t\r\n\t   public static void main(String [] args) {\r\n\t\t    File infile = new File(\"C:\\\\Users\\\\iftikhar\\\\Downloads\\\\A-large.in\");\r\n\t \t    File outFile = new File(\"C:\\\\Users\\\\iftikhar\\\\Downloads\\\\A-large.out\");\r\n\r\n\t        try {\r\n\t \t    BufferedReader br = new BufferedReader(new FileReader(infile));\r\n\t \t    BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\r\n\t \t    int testCases = Integer.parseInt(br.readLine());\r\n\t \t    \r\n\t \t    for(int t=1;t<=testCases;t++){\r\n\t \t    \tint N = Integer.parseInt(br.readLine()); \r\n\t \t    \tString s=br.readLine();\r\n\t \t    \tString[] line1 = s.split(\" \");\r\n\t \t    \tint[] num=new int [line1.length];String gs=\"\";\r\n\t \t    \tfor(int i=0;i<line1.length;i++){num[i]=Integer.parseInt(line1[i]);gs+=num[i];}\r\n\t \t    \tboolean flag=true;\r\n\t \t    \tString FS=\"\";\r\n\t \t    \tSystem.out.println(gs);\r\n\t \t    \twhile(flag){\r\n\t \t    \t\tint max=0;\r\n\t \t    \t\tString maxs=\"\";\r\n\t \t    \t\tfor (int i = 0; i < num.length; i++) {\r\n\t \t    \t\t    if (num[i] > max) {  \r\n\t \t    \t\t    \tmax = num[i];\r\n\t \t    \t\t    \tmaxs = i+\" \";\r\n\t \t    \t\t    }\r\n\t \t    \t\t    else if(num[i]==max)maxs+=i+\" \";    \r\n\t \t    \t\t}\r\n\t \t    \t\tSystem.out.println(maxs);\r\n\t \t    \t\tString[] hhh = maxs.split(\" \");\r\n\t \t    \t\tif(hhh.length==1){\r\n\t \t    \t\t\tString[] hh = maxs.split(\" \");\r\n\t \t    \t\t\tFS+=\"\"+String.valueOf((char)('A' + Integer.parseInt(hh[0])))+\"\"+\r\n\t \t    \t\t\tString.valueOf((char)('A' + Integer.parseInt(hh[0])));\r\n\t \t    \t\t\tnum[Integer.parseInt(hh[0])]-=2;\r\n\t \t    \t\t}\r\n\t \t    \t\telse if(hhh.length==3 && max==1){\r\n\t \t    \t\t\tString[] hh = maxs.split(\" \");\r\n\t \t    \t\t\tFS+=\"\"+String.valueOf((char)('A' + Integer.parseInt(hh[0])));\r\n\t \t    \t\t\tnum[Integer.parseInt(hh[0])]-=1;\r\n\t \t    \t\t}\r\n\t \t    \t\telse if(hhh.length>1){\r\n\t \t    \t\t\tString[] hh = maxs.split(\" \");\r\n\t \t    \t\t\t\r\n\t \t    \t\t\tFS+=\"\"+String.valueOf((char)('A' + Integer.parseInt(hh[0])))+\"\"+\r\n\t \t    \t\t\tString.valueOf((char)('A' + Integer.parseInt(hh[1])));\r\n\t \t    \t\t\tnum[Integer.parseInt(hh[0])]--;\r\n\t \t    \t\t\tnum[Integer.parseInt(hh[1])]--;\r\n\t \t    \t\t}\r\n\t \t    \t\tFS+=\" \";\r\n\t \t    \t\tflag=false;\r\n\t \t    \t\tfor(int i=0;i<line1.length;i++)\r\n\t \t    \t\t\tif(num[i]!=0)flag=true;\r\n\t \t    \t\t\r\n\t \t    \t\t\r\n\t \t    \t\t\r\n\t \t    \t\t\r\n\t \t    \t\t max=0;int maxn=-1;\r\n\t \t    \t\tfor (int i = 0; i < num.length; i++) {\r\n\t \t    \t\t    if (num[i] > max) {  \r\n\t \t    \t\t    \tmax = num[i];\r\n\t \t    \t\t    \tmaxn=i;\r\n\t \t    \t\t    }\r\n\t \t    \t\t    \r\n\t \t    \t\t}\r\n\t \t    \t\tif(maxn!=-1){\r\n\t \t    \t\tfor (int i = 0; i < num.length; i++) {\r\n\t \t    \t\t    if (num[i] > max) {  \r\n\t \t    \t\t    \tmax = num[i];\r\n\t \t    \t\t    \tmaxn=i;\r\n\t \t    \t\t    }\r\n\t \t    \t\t    \r\n\t \t    \t\t}\r\n\t \t    \t\tint sum=0;\r\n\t \t    \t\tfor (int i = 0; i < num.length; i++) {\r\n\t \t    \t\t\tif(maxn!=i)sum+=num[i];\t \t    \t\t    \r\n\t \t    \t\t}\r\n\t \t    \t\tif(sum<num[maxn]){System.out.println(\"errror:::\"+FS);\r\n\t \t    \t\t\r\n\t \t    \t\tSystem.exit(0);}\r\n\t \t    \t\t\r\n\t \t    \t\t}\r\n\t \t    \t}System.out.println(\"***********\");\r\n\t \t    \t\t\r\n\t \t    \t\t\r\n\t \t    \t\r\n\t \t    \t\r\n\t\t \t    bw.write(\"Case #\"+t+\": \"+FS+\"\\n\"); \r\n\t \t \r\n\t \t    }\r\n\t \t    br.close();\r\n\t \t    bw.close();        \r\n\t        }\r\n\t        catch(FileNotFoundException ex) {\r\n\t            System.out.println(\r\n\t                \"Unable to open file\");                \r\n\t        }\r\n\t        catch(IOException ex) {\r\n\t            System.out.println(\r\n\t                \"Error reading file\");                   \r\n\t        }\r\n\t    }\r\n\t \r\n\r\n}\r\n", "idx": "8695"}
{"func": "package googlejam8.p707;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class SenateEvacuation {\r\n\r\n  public static void main(String[] args) throws Exception {\r\n    FileInputStream is = new FileInputStream(new File(args[0]));\r\n    InputStreamReader isr = new InputStreamReader(is);\r\n    BufferedReader br = new BufferedReader(isr);\r\n    String line = br.readLine();\r\n    int testCase = 1;\r\n\r\n    // ---each case\r\n    while ((line = br.readLine()) != null) {\r\n\r\n      // entradas\r\n      int N = Integer.parseInt(line);\r\n      line = br.readLine();\r\n      String[] sForPartiesString = line.split(\" \");\r\n      int[] sForParties = new int[sForPartiesString.length];\r\n      int cantidad = 0;\r\n      for (int i = 0; i < sForParties.length; i++) {\r\n        sForParties[i] = Integer.parseInt(sForPartiesString[i]);\r\n        cantidad += sForParties[i];\r\n      }\r\n      int mitad = cantidad / 2;\r\n      // ---\r\n\r\n      List<String> toOut = new ArrayList<String>();\r\n      while (cantidad > 0) {\r\n\r\n        int mayor = Integer.MIN_VALUE;\n\t\tfor (int i1 = 0; i1 < sForParties.length; i1++) {\n\t\t  if (sForParties[i1] > mayor) {\n\t\t    mayor = sForParties[i1];\n\t\t  }\n\t\t}\n\t\tint maximo = mayor;\r\n//        System.out.println(\"maximo:\" + maximo);\r\n//        System.out.println(\"cantidad:\" + cantidad);\r\n\r\n        if (sForParties.length == 2) {          \r\n          toOut.add(\"AB\");\r\n          cantidad -= 2;\r\n          continue;\r\n        } else {\r\n\r\n          if (cantidad == 2) {\r\n            String out = \"\";\r\n            for (int i = 0; i < sForParties.length; i++) {\r\n              if (sForParties[i] == maximo) {\r\n                out += String.valueOf(Character.toChars(65 + i));\r\n                sForParties[i] = sForParties[i] - 1;\r\n              }\r\n            }\r\n            // System.out.println(\"agrego: \" + out);\r\n            toOut.add(out);\r\n          } else {\r\n            String out = \"\";\r\n            for (int i = 0; i < sForParties.length; i++) {\r\n              if (sForParties[i] == maximo) {\r\n\r\n                out += String.valueOf(Character.toChars(65 + i));\r\n                sForParties[i] = sForParties[i] - 1;\r\n                break;\r\n              }\r\n            }\r\n\r\n            toOut.add(out);\r\n          }\n\t\tint cantidad1 = 0;\n\t\tfor (int i = 0; i < sForParties.length; i++) {\n\t\t  cantidad1 += sForParties[i];\n\t\t}\r\n          \r\n          cantidad = cantidad1;\r\n        }\r\n\r\n      }\r\n\r\n//      System.out.println(toOut);\r\n      System.out.format(\"Case #%d:\", testCase);\r\n      for (int i = 0; i < toOut.size(); i++) {\r\n        System.out.print(\" \" + toOut.get(i));\r\n      }\r\n      System.out.println(\"\");\r\n      testCase++;\r\n\r\n    }\r\n\r\n    br.close();\r\n  }\r\n\r\n}\r\n", "idx": "8707"}
{"func": "package googlejam8.p708;\n\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\n\npublic class TFirst {\n\n\tpublic static void main(String[] args) throws FileNotFoundException{\n\t\tScanner reader = new Scanner(System.in);\n\n\t\tHashMap<Character,Integer>map=new HashMap<Character, Integer>();\n\t\tString letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t\t\n\t\t\n\t\tint z = 0;\n\t\t\n\t\t\n\t\tPrintStream out = new PrintStream(new FileOutputStream(\"output5.txt\"));\n\t\tSystem.setOut(out);\n\t\t\n\t\tint num = reader.nextInt();\n\t\tint curr;\n\t\tfor(curr = 0;curr<num;curr++){\n\t\t\tmap.clear();\n\t\t\tint i1 = 0;\n\t\t\t\n\t\t\tSystem.out.print(\"Case #\" + (curr+1) + \":\");\n\t\t\tint n = reader.nextInt();\n\t\t\tint i;\n\t\t\tchar a;\n\t\t\tchar b;\n\t\t\tint sum = 0;\n\t\t\tfor(i=0;i<n;i++){\n\t\t\t\tint value = reader.nextInt();\n\t\t\t\tmap.put(letters.charAt(i), value);\n\t\t\t\tsum+=value;\n\t\t\t}\n\t\t\tint found;\n\t\t\twhile(sum>2){\n\t\t\t\tfound = 0;\n\t\t\t\tint total = 0;\n\t\t        int maxValueInMap=(Collections.max(map.values()));\n\t\t        for (Entry<Character, Integer> entry : map.entrySet()) {  \n\t\t            if (entry.getValue()==maxValueInMap) {\n\t\t            \ttotal++;\n\t\t            }\n\t\t        }\n\t\t        for (Entry<Character, Integer> entry : map.entrySet()) {  \n\t\t            if (entry.getValue()==maxValueInMap) {\n\t\t            \tif(total!=2){\n\t\t\t                System.out.print(\" \" + entry.getKey());     \n\t\t\t                map.put(entry.getKey(),entry.getValue()-1);\n\t\t\t                sum--;\n\t\t\t                break;\n\t\t            \t}\n\t\t            \telse{\n\t\t            \t\tfound++;\n\t\t\t            \tif(found == 1){\n\t\t\t            \t\ta = entry.getKey();\n\t\t\t            \t\tSystem.out.print(\" \" + a);\n\t\t\t\t                map.put(entry.getKey(),entry.getValue()-1);\n\t\t\t\t                sum--;\n\t\t\t            \t}else if(found == 2){\n\t\t\t            \t\tb = entry.getKey();\t\t\t                \n\t\t\t            \t\tmap.put(entry.getKey(),entry.getValue()-1);\n\n\t\t\t\t                System.out.print(b); \n\t\t\t\t                sum--;\n\t\t\t\t                break;\n\t\t\t            \t}\n\t\t            \t}\n\t\t            }\n\t\t        }\n\t\t\t}\n\t\t\tSystem.out.print(\" \"); \t\t        \n\t\t\tfor (Entry<Character, Integer> entry : map.entrySet()) {\n\t\t\t   if(entry.getValue()!=0){\n\t\t\t\t   System.out.print(entry.getKey());\n\t\t\t   }\n\t        }\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "idx": "8708"}
{"func": "package googlejam8.p709;\nimport java.io.*;\r\nimport java.lang.*;\r\nimport java.util.*;\r\n\r\nclass master\r\n{\r\n    public static void main(String[] args)\r\n    {\r\n\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\tint tcase=in.nextInt();\r\n\tfor(int i=1;i<=tcase;i++)\r\n\t    {\r\n\t\t    int N=in.nextInt();\r\n\t\t    int[] data=new int[N];\r\n\t\t    int total=0;\r\n\t\t    for(int j=0;j<N;j++)\r\n\t\t    {\r\n\t\t\t    data[j]=in.nextInt();\r\n\t\t\t    total=total+data[j];\r\n\t\t\t    \r\n\t\t    }\r\n\t\t    System.out.print(\"Case #\"+i+\": \");\r\n\t\t    for(int k=1;k<=total;k++)\r\n\t\t\t{\r\n\t\t\t\tint total1=0;\n\t\t\t\t    for(int j=0;j<data.length;j++)\n\t\t\t\t    {\n\t\t\t\t\t    total1=total1+data[j];\n\t\t\t\t    }\n\t\t\t\t    int max1=0,max1index=-1,max2=0,max2index=-1;\n\t\t\t\t    for(int j=0;j<data.length;j++)\n\t\t\t\t    {\n\t\t\t\t\t    if(data[j]>max1)\n\t\t\t\t\t    {\n\t\t\t\t\t\t    max1=data[j];\n\t\t\t\t\t\t    max1index=j;\n\t\t\t\t\t    }\n\t\t\t\t    }\n\t\t\t\t   if(max1index>=0)\n\t\t\t\t   {\n\t\t\t\t\t   data[max1index]--;\n\t\t\t\t\t   System.out.print((char)(max1index+65));\n\t\t\t\t   }\n\t\t\t\t   if(total1!=3)\n\t\t\t\t   {\n\t\t\t\t    for(int j=0;j<data.length;j++)\n\t\t\t\t    {\n\t\t\t\t\t    if(data[j]>max2)\n\t\t\t\t\t    {\n\t\t\t\t\t\t    max2=data[j];\n\t\t\t\t\t\t    max2index=j;\n\t\t\t\t\t    }\n\t\t\t\t    }\n\t\t\t\t    if(max2index>=0)\n\t\t\t\t   {\n\t\t\t\t\t   data[max2index]--;\n\t\t\t\t\t   System.out.print((char)(max2index+65));\n\t\t\t\t   }\n\t\t\t\t   }\n\t\t\t\t   if(max2index>=0||max1index>=0)\n\t\t\t\t   {\n\t\t\t\t\t   System.out.print(\" \");\n\t\t\t\t   }\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\tSystem.out.println(\"\");\r\n\t    }\r\n\t\r\n    }\r\n}", "idx": "8709"}
{"func": "package googlejam8.p715;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\n\r\npublic class A {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tA a = new A();\r\n\t\ttry{\n\t\t\tBufferedReader br=new BufferedReader(new FileReader(\"A-large.in\"));\n\t\t\tBufferedWriter out=new BufferedWriter(new FileWriter(\"A-large.in\".split(\"\\\\.\")[0]+\"_output.txt\"));\n\t\t\tString s;\n\t\t\n\t\t\tif((s=br.readLine())!=null){\n\t\t\t\tint noLines = Integer.parseInt(s);\n\t\t\t\tif(noLines!=0){\n\t\t\t\t\tfor (int index = 0; index < noLines; index++) {\n\t\t\t\t\t\tif ((s = br.readLine()) != null) {\n\t\t\t\t\t\t\tString outputString = \"Case #\" + (index + 1) + \": \";\n\t\t\t\t\t\t\tint inputParties = Integer.parseInt(s.trim());\n\t\t\t\t\t\t\tString inputString = br.readLine().trim();\n\t\t\t\t\t\t\tString[] tokenizer = inputString.split(\" \");\n\t\t\t\t\t\t\tHashMap<Character, Integer> hmIn=new HashMap<Character, Integer>();\n\t\t\t\t\t\t\tfor(int i=0;i<inputParties;i++){\n\t\t\t\t\t\t\t\thmIn.put((char)('A'+i), Integer.parseInt(tokenizer[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tString output = \"\";\n\t\t\t\t\t\t\twhile(hmIn.size()>2){\n\t\t\t\t\t\t\t\tint maxValueInMap=(Collections.max(hmIn.values()));\n\t\t\t\t\t\t\t\tfor(Iterator<HashMap.Entry<Character, Integer>> it = hmIn.entrySet().iterator(); it.hasNext(); ) {\n\t\t\t\t\t\t\t\t\tHashMap.Entry<Character, Integer> entry = it.next();\n\t\t\t\t\t\t\t\t\tif (entry.getValue()==maxValueInMap) {\n\t\t\t\t\t\t\t\t\t\toutput = output + entry.getKey() + \" \";\n\t\t\t\t\t\t\t\t\t\tif(entry.getValue() == 1){\n\t\t\t\t\t\t\t\t\t\t\tit.remove();\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\t\tentry.setValue(entry.getValue()-1);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(hmIn.size()==2){\n\t\t\t\t\t\t\t\tint key1=-1,key2=-1;\n\t\t\t\t\t\t\t\tCharacter key1c=' ',key2c=' ';\n\t\t\t\t\t\t\t\tfor(Character key : hmIn.keySet()){\n\t\t\t\t\t\t\t\t\tif(key1==-1){\n\t\t\t\t\t\t\t\t\t\tkey1 = hmIn.get(key);\n\t\t\t\t\t\t\t\t\t\tkey1c = key;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t\tkey2 = hmIn.get(key);\n\t\t\t\t\t\t\t\t\t\tkey2c = key;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(key1>key2){\n\t\t\t\t\t\t\t\t\tfor(int i=0;i<(key1-key2);i++)\n\t\t\t\t\t\t\t\t\t\toutput += key1c + \" \";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(key2>key1){\n\t\t\t\t\t\t\t\t\tfor(int i=0;i<(key2-key1);i++)\n\t\t\t\t\t\t\t\t\t\toutput += key2c + \" \";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(key1==key2){\n\t\t\t\t\t\t\t\t\tfor(int i=0;i<key1;i++)\n\t\t\t\t\t\t\t\t\t\toutput +=  key1c + \"\" + key2c + \" \";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tString output1 = output.trim();\n\t\t\t\t\t\t\toutputString += output1;\n\t\t\t\t\t\t\tSystem.out.println(outputString);\n\t\t\t\t\t\t\tout.write(outputString);\n\t\t\t\t\t\t\tout.newLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.close();\n\t\t\tbr.close();\n\t\t}\n\t\tcatch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "8715"}
{"func": "package googlejam8.p725;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n *\n * Copyright (c) 2015 Chutong Technologies All rights reserved.\n *\n */\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        String in = \"d:/A-large (1).in\";\n        String out = \"d:/a.out\";\n        BufferedReader reader = new BufferedReader(new FileReader(in));\n        BufferedWriter write = new BufferedWriter(new FileWriter(out));\n        String line = reader.readLine();\n        int T = Integer.parseInt(line);\n        for (int i = 0; i < T; i++) {\n            int N = Integer.parseInt(reader.readLine());\n            String[] nums = reader.readLine().split(\" \");\n\t\t\tString string = \"\";\n\t\t\tList<StringBuilder> list = new ArrayList<StringBuilder>();\n\t\t\tint sum = 0;\n\t\t\tfor (int j = 0; j < nums.length; j++) {\n\t\t\t    int n = Integer.parseInt(nums[j]);\n\t\t\t    sum += n;\n\t\t\t    StringBuilder line1 = new StringBuilder();\n\t\t\t    for (int i1 = 0; i1 < n; i1++) {\n\t\t\t        line1.append((char) ('A' + j));\n\t\t\t    }\n\t\t\t    list.add(line1);\n\t\t\t}\n\t\t\t\n\t\t\tint index = 0;\n\t\t\twhile (sum-- > 0) {\n\t\t\t\n\t\t\t    for (StringBuilder builder : list) {\n\t\t\t        try {\n\t\t\t            string += builder.charAt(index);\n\t\t\t        } catch (Exception e) {\n\t\t\t        }\n\t\t\t    }\n\t\t\t    index++;\n\t\t\t}\n\t\t\tStringBuilder stringBuilder = new StringBuilder(string);\n\t\t\tStringBuilder reverse = stringBuilder.reverse();\n\t\t\tstring = \"\";\n\t\t\tif (reverse.length() % 2 == 0) {\n\t\t\t    for (int p = 0; p < reverse.length() - 2; p += 2) {\n\t\t\t        string = string + reverse.charAt(p) +  reverse.charAt(p + 1) + \" \";\n\t\t\t    }\n\t\t\t} else {\n\t\t\t    for (int p = 0; p < reverse.length() - 3; p += 2) {\n\t\t\t        string = string + reverse.charAt(p) +  reverse.charAt(p + 1) + \" \";\n\t\t\t    }\n\t\t\t    string = string + reverse.charAt(reverse.length() -3) + \" \";\n\t\t\t}\n\t\t\tstring = string + reverse.substring(reverse.length() - 2);\n            String solve = string;\n            write.write(\"Case #\" + (i + 1) + \": \" + solve + \"\\r\\n\");\n        }\n\n        reader.close();\n        write.close();\n    }\n}\n", "idx": "8725"}
{"func": "package googlejam8.p729;\nimport java.util.*;\nclass q1\n{\n\tpublic static void main(String args[]) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint T = in.nextInt();\n\t\tint t=T;\n\t\t\n\t\twhile(T-- > 0) {\n\t\t\tString ans = \"\";\n\t\t\tint  N =  in.nextInt();\n\t\t\tint ar[] = new int[N];\n\t\t\tchar arr[] = new char[N];\n\t\t\tint sum = 0;\n\n\t\t\tfor(int i = 0 ; i < N; i++) {\n\t\t\t\tar[i] =  in.nextInt();\n\t\t\t\tsum = sum + ar[i];\n\t\t\t\tarr[i] =   (char)('A' + i);\n\t\t\t}\n\t\t\twhile(sum != 0) {\n\t\t\t//\tArrays.sort(ar);\n\t\t\t\tint max = 0;\n\t\t\t\tint index= 0;\n\t\t\t\tfor(int i = 0 ; i < N; i++) {\n\t\t\t\t\tif(ar[i] > max) {\n\t\t\t\t\t\tmax=ar[i];\n\t\t\t\t\t\tindex = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tint sec_max = 0;\n\t\t\t\tint sec_index= 0;\n\t\t\t\tar[index] = -1;\n\t\t\t\tfor(int i = 0 ; i < N; i++) {\n\t\t\t\t\tif(ar[i] > sec_max ) {\n\t\t\t\t\t\tsec_max=ar[i];\n\t\t\t\t\t\tsec_index = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tar[index] = max;\n\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t if(ar[index] > 2 && ar[index] != ar[sec_index]) {\n\t\t\t\t\tar[index] -= 2;\t// print arr[index]x2\n\t\t\t\t\tsum -= 2;\n\t\t\t\t\tans = ans + arr[index] + arr[index]  + ' ';\n\t\t\t\t}\n\t\t\t\telse if(ar[index] > 0 ){ \n\t\t\t\t\tif(sum % 2 == 0) {\t\t// print arr[index] arr[sec_index]\n\t\t\t\t\t\tar[index]--;\n\t\t\t\t\t\tar[sec_index]--;\n\t\t\t\t\t\tsum -= 2;\n\t\t\t\t\t\tans = ans + arr[index] + arr[sec_index]  + ' ';\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tar[index]--;\t\t\t//print arr[index]\n\t\t\t\t\t\tsum -= 1;\n\t\t\t\t\t\tans = ans + arr[index] + ' ';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\t\t\n\t\t\tSystem.out.println(\"Case #\"+(t-(T))+\": \"+ans);\n\t\t\t\n\t\t\n\t\t}\n\t}\n}\n\n\n\n", "idx": "8729"}
{"func": "package googlejam8.p731;\nimport java.io.*;\nimport java.util.*;\n\npublic class SenateEvacuation {\n\n\tpublic static void main(String[] args) {\n\t\t// Set up files\n\t\tFile file = new File(\"A-large.in\");\n\t\tFile outfile = new File(\"output.txt\");\n\t\tif(!file.exists()) {\n\t\t\tSystem.err.println(\"File doesn't exist!\");\n\t\t\treturn;\n\t\t}\n\t\t// Set up data\n\t\tint T;\n\t\tint N;\n\t\tint[] parties;\n\t\tint total;\n\t\t\t\t\n\t\ttry {\n\t\t\t// Set up streams\n\t\t\tBufferedReader fin = new BufferedReader(new InputStreamReader(new FileInputStream(file)));\n\t\t\tBufferedWriter fout = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outfile)));\n\t\t\t\n\t\t\tString line = fin.readLine();\n\t\t\tT = Integer.parseInt(line.trim());\n\t\t\t\n\t\t\tfor(int caseNum=0; caseNum<T; ++caseNum) {\n\t\t\t\tline = fin.readLine();\n\t\t\t\tN = Integer.parseInt(line);\n\t\t\t\tparties = new int[N];\n\t\t\t\ttotal = 0;\n\t\t\t\tline = fin.readLine();\n\t\t\t\tString[] partyMembers = line.split(\" \");\n\t\t\t\tfor(int i=0; i<N; ++i) {\n\t\t\t\t\tparties[i] = Integer.parseInt(partyMembers[i]);\n\t\t\t\t\ttotal += parties[i];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString output = \"\";\n\t\t\t\t\n\t\t\t\t// Find the two biggest groups\n\t\t\t\tint max1 = 0;\n\t\t\t\tfor(int i=0; i<N; ++i) {\n\t\t\t\t\tif(parties[i] > parties[max1])\n\t\t\t\t\t\tmax1 = i;\n\t\t\t\t}\n\t\t\t\tint max2 = 0;\n\t\t\t\tif(max1 == 0)\n\t\t\t\t\tmax2 = 1;\n\t\t\t\tfor(int i=0; i<N; ++i) {\n\t\t\t\t\tif(i != max1 && parties[i] > parties[max2])\n\t\t\t\t\t\tmax2 = i;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Pare down the biggest group to be the same size as the second biggest group\n\t\t\t\twhile(parties[max1] > parties[max2]) {\n\t\t\t\t\tString thisOut = \"\" + (char)(max1 + 65);\n\t\t\t\t\t--parties[max1];\n\t\t\t\t\t--total;\n\t\t\t\t\tif(parties[max1] > parties[max2]) {\n\t\t\t\t\t\tthisOut += (char)(max1 + 65);\n\t\t\t\t\t\t--parties[max1];\n\t\t\t\t\t\t--total;\n\t\t\t\t\t}\n\t\t\t\t\toutput += thisOut + \" \";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Evacuate everyone else in any order\n\t\t\t\t// First get a count of everyone else\n\t\t\t\tint totalNotMax = total;\n\t\t\t\ttotalNotMax -= 2*parties[max1];\n\t\t\t\twhile(totalNotMax > 0) {\n\t\t\t\t\tString thisOut = \"\";\n\t\t\t\t\tfor(int i=0; i<N; ++i) {\n\t\t\t\t\t\tif(i != max1 && i != max2 && parties[i] > 0) {\n\t\t\t\t\t\t\tthisOut += (char)(i + 65);\n\t\t\t\t\t\t\t--parties[i];\n\t\t\t\t\t\t\t--total;\n\t\t\t\t\t\t\t--totalNotMax;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor(int i=0; i<N; ++i) {\n\t\t\t\t\t\tif(i != max1 && i != max2 && parties[i] > 0) {\n\t\t\t\t\t\t\tthisOut += (char)(i + 65);\n\t\t\t\t\t\t\t--parties[i];\n\t\t\t\t\t\t\t--total;\n\t\t\t\t\t\t\t--totalNotMax;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\toutput += thisOut + \" \";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Evacuate the two biggest parties by making one from each go until they're all gone\n\t\t\t\twhile(total > 0) {\n\t\t\t\t\tString thisOut = \"\";\n\t\t\t\t\tthisOut += (char)(max1 + 65);\n\t\t\t\t\tthisOut += (char)(max2 + 65);\n\t\t\t\t\t--parties[max1];\n\t\t\t\t\t--parties[max2];\n\t\t\t\t\ttotal -= 2;\n\t\t\t\t\toutput += thisOut + \" \";\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.println(\"Case #\" + (caseNum+1) + \": \" + output.trim());\n\t\t\t\tfout.write(\"Case #\" + (caseNum+1) + \": \" + output.trim() + \"\\n\");\n\t\t\t}\n\t\t\t\n\t\t\t// Clean up streams\n\t\t\tfin.close();\n\t\t\tfout.close();\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t}\n}\n", "idx": "8731"}
{"func": "package googlejam8.p733;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class ProblemA {\n\n    public static String PROBLEM_LETTER = \"A\";\n\n    public static String IN_DIR = \"inputs/\" + PROBLEM_LETTER + \"/\";\n    public static String OUT_DIR = \"outputs/\" + PROBLEM_LETTER + \"/\";\n\n    //public static String IN_FILE = IN_DIR + \"sample.in\";\n    //public static String IN_FILE = IN_DIR + \"A-small-attempt0.in\";\n    public static String IN_FILE = IN_DIR + \"A-large.in\";\n\n    //public static String OUT_FILE = OUT_DIR + \"sample.out\";\n    //public static String OUT_FILE = OUT_DIR + \"small.out\";\n    public static String OUT_FILE = OUT_DIR + \"large.out\";\n\n    public static int[] idxToCnt = new int[26];\n    public static char[] idxToCh = new char[26];\n\n    public static void main(String[] args) {\n        try {\n            Scanner sc = new Scanner(new File(IN_FILE));\n            PrintWriter wr = new PrintWriter(OUT_FILE);\n\n            int T = sc.nextInt();\n            for (int ti = 0; ti < T; ti++) {\n                int N = sc.nextInt();\n                for(int i = 0; i < 26; i++) {\n                    idxToCnt[i] = 0;\n                    idxToCh[i] = (char) ('A' + i);\n                }\n                for(int i = 0; i < N; i++) {\n                    idxToCnt[i] = sc.nextInt();\n                }\n                wr.print(\"Case #\" + (ti+1) + \": \");\n\t\t\t\t\n\t\t\t\tint rem = 0;\n\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t    rem += idxToCnt[i];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (int tsi = 0; tsi < N-1; tsi++) {\n\t\t\t\t    int end = N-1;\n\t\t\t\t\tint res1 = tsi;\n\t\t\t\t\t\n\t\t\t\t\tif (true) {\n\t\t\t\t\t    for (int i = tsi + 1; i <= end; i++) {\n\t\t\t\t\t        if (idxToCnt[i] > idxToCnt[res1]) {\n\t\t\t\t\t            res1 = i;\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t} else {\n\t\t\t\t\t    for (int i = tsi + 1; i <= end; i++) {\n\t\t\t\t\t        if (idxToCnt[i] >= idxToCnt[res1]) {\n\t\t\t\t\t            res1 = i;\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\tint nextMax = res1;\n\t\t\t\t    if (nextMax == tsi) {\n\t\t\t\t        continue;\n\t\t\t\t    } else {\n\t\t\t\t        int tmpCnt = idxToCnt[tsi];\n\t\t\t\t\t\tchar tmpChar = idxToCh[tsi];\n\t\t\t\t\t\t\n\t\t\t\t\t\tidxToCnt[tsi] = idxToCnt[nextMax];\n\t\t\t\t\t\tidxToCh[tsi] = idxToCh[nextMax];\n\t\t\t\t\t\t\n\t\t\t\t\t\tidxToCnt[nextMax] = tmpCnt;\n\t\t\t\t\t\tidxToCh[nextMax] = tmpChar;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString res = \"\";\n\t\t\t\twhile(true) {\n\t\t\t\t    if (res.length() != 0) {\n\t\t\t\t        res += \" \";\n\t\t\t\t    }\n\t\t\t\t    String door = \"\";\n\t\t\t\t\n\t\t\t\t    door += idxToCh[0];\n\t\t\t\t    idxToCnt[0]--;\n\t\t\t\t    rem--;\n\t\t\t\t\n\t\t\t\t    if(rem == 0) {\n\t\t\t\t        res += door;\n\t\t\t\t        break;\n\t\t\t\t    }\n\t\t\t\t\tint end = N-1;\n\t\t\t\t\tint res1 = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (false) {\n\t\t\t\t\t    for (int i = 0 + 1; i <= end; i++) {\n\t\t\t\t\t        if (idxToCnt[i] > idxToCnt[res1]) {\n\t\t\t\t\t            res1 = i;\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t} else {\n\t\t\t\t\t    for (int i = 0 + 1; i <= end; i++) {\n\t\t\t\t\t        if (idxToCnt[i] >= idxToCnt[res1]) {\n\t\t\t\t\t            res1 = i;\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t    int nextMax = res1;\n\t\t\t\t    if (nextMax != 0) {\n\t\t\t\t        int tmpCnt = idxToCnt[0];\n\t\t\t\t\t\tchar tmpChar = idxToCh[0];\n\t\t\t\t\t\t\n\t\t\t\t\t\tidxToCnt[0] = idxToCnt[nextMax];\n\t\t\t\t\t\tidxToCh[0] = idxToCh[nextMax];\n\t\t\t\t\t\t\n\t\t\t\t\t\tidxToCnt[nextMax] = tmpCnt;\n\t\t\t\t\t\tidxToCh[nextMax] = tmpChar;\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    if (idxToCnt[0] > rem - idxToCnt[0]) {\n\t\t\t\t        door += idxToCh[0];\n\t\t\t\t        idxToCnt[0]--;\n\t\t\t\t        rem--;\n\t\t\t\t\n\t\t\t\t        res += door;\n\t\t\t\t\n\t\t\t\t        if(rem == 0) {\n\t\t\t\t            break;\n\t\t\t\t        }\n\t\t\t\t\t\tint end1 = N-1;\n\t\t\t\t\t\tint res2 = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (false) {\n\t\t\t\t\t\t    for (int i = 0 + 1; i <= end1; i++) {\n\t\t\t\t\t\t        if (idxToCnt[i] > idxToCnt[res2]) {\n\t\t\t\t\t\t            res2 = i;\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t    for (int i = 0 + 1; i <= end1; i++) {\n\t\t\t\t\t\t        if (idxToCnt[i] >= idxToCnt[res2]) {\n\t\t\t\t\t\t            res2 = i;\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t        int nextMax2 = res2;\n\t\t\t\t        if (nextMax2 != 0) {\n\t\t\t\t            int tmpCnt = idxToCnt[0];\n\t\t\t\t\t\t\tchar tmpChar = idxToCh[0];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tidxToCnt[0] = idxToCnt[nextMax2];\n\t\t\t\t\t\t\tidxToCh[0] = idxToCh[nextMax2];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tidxToCnt[nextMax2] = tmpCnt;\n\t\t\t\t\t\t\tidxToCh[nextMax2] = tmpChar;\n\t\t\t\t        }\n\t\t\t\t    } else {\n\t\t\t\t        res += door;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twr.println(res);\n            }\n\n            wr.close();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n", "idx": "8733"}
{"func": "package googlejam8.p736;\n\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\n\npublic class App1 {\n    public static void main(String[] args) throws InterruptedException, ExecutionException {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\n        in.nextLine();\n//        System.out.println(\"t: \" + t);\n\n        for (int i = 1; i <= t; ++i) {\n            int parties = in.nextInt();\n//            System.out.println(\"parties: \" + parties);\n            String s = in.nextLine();\n            s = in.nextLine();\n//            System.out.println(\"line: \" + s);\n            String values[] = s.trim().split(\" \");\n//            System.out.println(Arrays.toString(values));\n\n            List<Integer> p = new ArrayList<Integer>(parties);\n\n            for (int z = 0; z < parties; ++z) {\n                p.add(z, Integer.parseInt(values[z]));\n\n            }\n\n            StringBuffer sb = new StringBuffer(\"\");\n\n            int max1 = 0;\n            int max2 = 0;\n            do {\n                sb.append(\" \");\n\n                max1 = Collections.max(p);\n                if(max1>0) {\n                    int index1 = p.indexOf(max1);\n                    p.set(index1, max1 - 1);\n                    sb.append((char) ('A' + index1));\n                }\n\n                if (max1 == 1) { //last step, count number of 1s\n                    int numOfones = 0;\n                    for (int z = 0; z < p.size(); ++z) {\n                        if (p.get(z) == 1) {\n                            ++numOfones;\n                        }\n                    }\n                    if (numOfones > 1 && numOfones % 2 != 1) {\n//                        int sum = 0;\n//                        for (int h = 0 ; h < p.size(); ++h ) {\n//                            sum += p.get(h);\n//                        }\n//                        if (sum > 0) {\n//\n//                            for (int h = 0 ; h < p.size(); ++h ) {\n//                                if(p.get(h)/sum > 0.5) {\n//                                    System.out.println(\"WARNING\");\n//                                }\n//                                System.out.println(\"r:\" + (p.get(h)/sum));\n//                                System.out.println(\"\" + p.toString());\n//                            }\n//                        }\n                        continue;\n                    }\n                }\n\n                max2 = Collections.max(p);\n                if (max2 > 0) {\n                    int index2 = p.indexOf(max2);\n                    p.set(index2, max2 - 1);\n                    sb.append((char) ('A' + index2));\n                }\n\n//                int sum = 0;\n//                for (int h = 0 ; h < p.size(); ++h ) {\n//                    sum += p.get(h);\n//                }\n//                if (sum > 0) {\n//\n//                    for (int h = 0 ; h < p.size(); ++h ) {\n//                        if(p.get(h)/sum > 0.5) {\n//                            System.out.println(\"WARNING\");\n//                        }\n//                        System.out.println(\"r:\" + (p.get(h)/sum));\n//                        System.out.println(\"\" + p.toString());\n//                    }\n//                }\n\n//                System.out.println(\"max1\" + max1 + \" max2 \" + max2);\n            } while(max1 != 0 || max2 != 0);\n\n//            System.out.println(\"line\" + n);\n\n            System.out.println(\"Case #\" + i + \":\" + sb.toString());\n        }\n\n    }\n}\n", "idx": "8736"}
{"func": "package googlejam8.p742;\nimport java.util.*;\nclass problema{\n\tpublic static void main(String args[]){\n\t\tScanner s=new Scanner(System.in);\n\t\tint T=s.nextInt();\n\t\tfor(int i=1; i<=T; i++){\n\t\t\tint n=s.nextInt();\n\t\t\tint enteros[]=new int[n];\n\t\t\tfor(int j=0; j<n; j++){\n\t\t\t\tenteros[j]=s.nextInt();\n\t\t\t}\n\t\t\tSystem.out.print(\"Case #\"+i+\":\");\n\t\t\twhile(true){\n\t\t\t\tint nocero=0;\n\t\t\t\tint max=0;\n\t\t\t\tint pos=-1;\n\t\t\t\tfor(int j=0; j<n; j++){\n\t\t\t\t\tif( enteros[j]>0 )\n\t\t\t\t\t\tnocero++;\n\t\t\t\t\tif( enteros[j]>max ){\n\t\t\t\t\t\tpos=j;\n\t\t\t\t\t\tmax=enteros[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(max==0){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tint segundo=0;\n\t\t\t\tint pos2=-1;\n\t\t\t\tfor(int j=0; j<n; j++){\n\t\t\t\t\tif( enteros[j]>segundo & j!=pos ){\n\t\t\t\t\t\tpos2=j;\n\t\t\t\t\t\tsegundo=enteros[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( max==segundo && nocero!=3 ){\n\t\t\t\t\tenteros[pos]--;\n\t\t\t\t\tenteros[pos2]--;\n\t\t\t\t\tSystem.out.print(\" \"+  ((char)((int)('A')+pos)) + ((char)((int)('A')+pos2)) );\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tenteros[pos]--;\n\t\t\t\t\tSystem.out.print(\" \"+  ((char)((int)('A')+pos))  );\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "idx": "8742"}
{"func": "package googlejam8.p743;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nimport static java.lang.Math.*;\r\nimport static java.util.Arrays.*;\r\npublic class A {\r\n  static Scanner sc;\r\n  static StringBuilder resultat = new StringBuilder(\"\");\r\n  \r\n  static String lettres = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n  \r\n  public static void main(String[] args) throws IOException {\r\n    String pb = \"A\";\r\n    sc = new Scanner(new FileReader(new File(pb+\".in\")));\r\n    PrintWriter out = new PrintWriter(new File(pb+\".out\"));\r\n    \r\n\t\t//TEST CASES----------------------------------------------------\r\n\t\tint TC = sc.nextInt();sc.nextLine();\r\n    for (int tc = 1; tc <= TC; tc++) {\r\n      if(tc!=1) resultat.append(\"\\n\");\r\n      resultat.append(\"Case #\"+tc+\": \");\r\n      \r\n      //READ----------------------------------------------------\n\t    int N = sc.nextInt();\n\t    long[] P = new long[N];\n\t    long sum = 0;\n\t    long count = 0;\n\t    for (int i = 0; i < P.length; i++)\n\t    {\n\t      P[i] = sc.nextLong();\n\t      sum+=P[i];\n\t      if(P[i]>0)\n\t        count++;\n\t    }\n\t    \n\t    //SOLVE----------------------------------------------------\n\t    String res = \"\"; // long res = 0;\n\t    \n\t    \n\t//    System.out.println(\"\\n\\n\");\n\t    while(true){\n\t      \n\t      long Max = 0;\n\t      int i1 = -1;\n\t      \n\t//      System.out.println(count + \" \" + sum+\" -- \" + res);\n\t      \n\t      if(count==2 && sum>2){\n\t        ArrayList<Integer> ind = new ArrayList<>();\n\t        for (int i = 0; i < P.length; i++)\n\t        {\n\t          if(P[i]!=0)\n\t            ind.add(i);\n\t        }\n\t        \n\t        res+= lettres.charAt(ind.get(0))+\"\"+lettres.charAt(ind.get(1))+\" \";\n\t        P[ind.get(0)]--;\n\t        P[ind.get(1)]--;\n\t        sum-=2;\n\t        continue;\n\t      }\n\t      \n\t      \n\t      if(sum==2){\n\t        ArrayList<Integer> ind = new ArrayList<>();\n\t        for (int i = 0; i < P.length; i++)\n\t        {\n\t          if(P[i]!=0)\n\t            ind.add(i);\n\t        }\n\t        \n\t        res+= lettres.charAt(ind.get(0))+\"\"+lettres.charAt(ind.get(1));\n\t        break;\n\t      }\n\t      \n\t      else{\n\t        for (int i = 0; i < P.length; i++)\n\t        {\n\t          if(P[i]>Max){\n\t            Max = P[i];\n\t            i1=i;\n\t          }\n\t        }\n\t        \n\t        if(i1==-1)\n\t          break;\n\t        else{\n\t          res += lettres.charAt(i1)+\" \";\n\t          P[i1]--;\n\t          sum--;\n\t        }\n\t      }\n\t    }\n\t    \n\t    //PRINT----------------------------------------------------\n\t    resultat.append(res.trim());\r\n\t\t}\r\n\t\t\r\n    //CLOSE----------------------------------------------------\r\n\t\tout.print(resultat);\r\n\t\tSystem.out.println(resultat);\r\n\t\tout.close(); sc.close();\r\n\t\t}\r\n\t}", "idx": "8743"}
{"func": "package googlejam8.p744;\nimport java.util.*;\r\n\r\nclass gpro{\r\n\tpublic static void main(String arg[]){\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint t=in.nextInt();\r\n\t\tfor(int j=1;j<=t;j++){\r\n\t\t\tint p=in.nextInt();\r\n\t\t\tint arr[]=new int[p];\r\n\t\t\tint count=0;\r\n\t\t\tint max1=0;\r\n\t\t\tint max2=0;\r\n\t\t\tint loc1=-1;\r\n\t\t\tint loc2=-1;\r\n\t\t\tfor(int i=0;i<p;i++){\r\n\t\t\t\tarr[i]=in.nextInt();\r\n\t\t\t\tcount+=arr[i];\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\"+j+\":\");\r\n\t\t\twhile(count>0){\r\n\t\t\t\tmax1=0;\r\n\t\t\t\tmax2=0;\r\n\t\t\t\tloc1=-1;\r\n\t\t\t\tloc2=-1;\r\n\t\t\t\tfor(int i=0;i<p;i++){\r\n\t\t\t\t\tif(arr[i]>max1){\r\n\t\t\t\t\t\tmax2=max1;\r\n\t\t\t\t\t\tloc2=loc1;\r\n\t\t\t\t\t\tmax1=arr[i];\t\r\n\t\t\t\t\t\tloc1=i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(arr[i]>max2){\r\n\t\t\t\t\t\tmax2=arr[i];\r\n\t\t\t\t\t\tloc2=i;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif((max2<(count-2)/2 && count!=1 && count!=3 )|| ((max2==(count-2)/2 || max2==max1) && count!=1 && count!=3)){\r\n\t\t\t\t\tSystem.out.printf(\" %c%c\",(loc1+65),(loc2+65));\r\n\t\t\t\t\tcount-=2;\r\n\t\t\t\t\tarr[loc1]-=1;\r\n\t\t\t\t\tarr[loc2]-=1;\r\n\t\t\t\t}\r\n\t\t\t\telse if((count!=1)&& count!=3){\r\n\t\t\t\t\tSystem.out.printf(\" %c%c\",(loc1+65),(loc1+65));\r\n\t\t\t\t\tcount-=2;\r\n\t\t\t\t\tarr[loc1]-=2;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tSystem.out.printf(\" %c\",(loc1+65));\r\n\t\t\t\t\tarr[loc1]-=1;\r\n\t\t\t\t\tcount-=1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n}", "idx": "8744"}
{"func": "package googlejam8.p747;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tfinal Scanner sc = new Scanner(new FileReader(\"Ain.in\"));\r\n\t\tfinal BufferedWriter w = new BufferedWriter(new FileWriter(\"Aout.txt\"));\r\n\t\tString[] a = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\r\n\r\n\t\tfinal int testNumber = sc.nextInt();\r\n\t\tfor (int test = 1; test <= testNumber; test++) {\r\n\t\t\tint N = sc.nextInt();\r\n\t\t\tString ans = \"\";\r\n\t\t\tint[] num = new int[N];\r\n\t\t\tint sum = 0;\r\n\t\t\tint count = 0;\r\n\t\t\tHashMap<Integer, ArrayList<String>> map = new HashMap<>();\r\n\t\t\tfor (int i=0; i<num.length;i++) {\r\n\t\t\t\tnum[i] = sc.nextInt();\r\n\t\t\t\tif (map.get(num[i])!=null) {\r\n\t\t\t\t\tmap.get(num[i]).add(a[i]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tArrayList<String> al = new ArrayList<>();\r\n\t\t\t\t\tal.add(a[i]);\r\n\t\t\t\t\tmap.put(num[i], al);\r\n\t\t\t\t}\r\n\t\t\t\tsum += num[i];\r\n\t\t\t}\r\n\t\t\twhile(true) {\r\n\t\t\t\tArrays.sort(num);\r\n\t\t\t\tint last = num.length-1;\r\n\t\t\t\tif (num[last]>0) {\r\n\t\t\t\t\tString add = map.get(num[last]).get(map.get(num[last]).size()-1);\r\n\t\t\t\t\tans += add;\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\tmap.get(num[last]).remove(add);\r\n\t\t\t\t\tnum[last]--;\r\n\t\t\t\t\tif ((num[last]==0) && (num[last-1]==0)) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((sum - count) == 2) {\r\n\t\t\t\t\t\tans += \" \";\r\n\t\t\t\t\t\tif (map.get(num[last])!=null) {\r\n\t\t\t\t\t\t\tmap.get(num[last]).add(add);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tArrayList<String> al = new ArrayList<>();\r\n\t\t\t\t\t\t\tal.add(add);\r\n\t\t\t\t\t\t\tmap.put(num[last], al);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (num[last]>= num[last-1]) {\r\n\t\t\t\t\t\t\tans += add+\" \";\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (map.get(num[last]-1)!=null) {\r\n\t\t\t\t\t\t\t\tmap.get(num[last]-1).add(add);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tArrayList<String> al = new ArrayList<>();\r\n\t\t\t\t\t\t\t\tal.add(add);\r\n\t\t\t\t\t\t\t\tmap.put(num[last]-1, al);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tnum[last]--;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (map.get(num[last])!=null) {\r\n\t\t\t\t\t\t\t\tmap.get(num[last]).add(add);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tArrayList<String> al = new ArrayList<>();\r\n\t\t\t\t\t\t\t\tal.add(add);\r\n\t\t\t\t\t\t\t\tmap.put(num[last], al);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tString two = map.get(num[last-1]).get(map.get(num[last-1]).size()-1);\r\n\t\t\t\t\t\t\tmap.get(num[last-1]).remove(two);\r\n\t\t\t\t\t\t\tans += two+\" \";\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (map.get(num[last-1]-1)!=null) {\r\n\t\t\t\t\t\t\t\tmap.get(num[last-1]-1).add(two);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tArrayList<String> al = new ArrayList<>();\r\n\t\t\t\t\t\t\t\tal.add(two);\r\n\t\t\t\t\t\t\t\tmap.put(num[last-1]-1, al);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tnum[last-1]--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//\t\t\tans += a[maxI]+a[max2I]+\" \";\r\n\t\t\t//\t\t\tnum -=\r\n\t\t\t//\t\t\tboolean check = true;\r\n\t\t\t//\t\t\twhile (check) {\r\n\t\t\t//\t\t\tfor (int i=0;i<num.length; i++) {\r\n\t\t\t//\r\n\t\t\t//\t\t\t}\r\n\t\t\t//\t\t\t}\r\n\t\t\tw.write(\"Case #\"+test+\": \"+ans.trim()+\"\\n\");\r\n\t\t\tSystem.out.println(\"Case #\"+test+\": \"+ans);\r\n\t\t}\r\n\t\tsc.close();\r\n\t\tw.flush();\r\n\t\tw.close();\r\n\t}\r\n\r\n\r\n}\r\n", "idx": "8747"}
{"func": "package googlejam8.p748;\nimport java.util.*;\n\npublic class first1C\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\tint T=in.nextInt();\n\t\tfor(int t=0;t<T;t++)\n\t\t{\n\t\t\tint N = in.nextInt();\n\t\t\tArrayList<Integer> A = new ArrayList<Integer>();\n\t\t\tfor(int n=0;n<N;n++)\n\t\t\t{\n\t\t\t\tA.add(in.nextInt());\n\t\t\t}\n\t\t\tString S = \"\";\n\t\t\tint count_notzeroes = N ;\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tif(count_notzeroes==2)\n\t\t\t\t{\n\t\t\t\t\tint x=0,y=1;\n\t\t\t\t\tfor(int i=0;i<N;i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(A.get(i)!=0)\n\t\t\t\t\t\t\tx=i;\n\t\t\t\t\t}\n\t\t\t\t\tfor(int i=0;i<N;i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(A.get(i)!=0 && i!=x)\n\t\t\t\t\t\t\ty=i;\n\t\t\t\t\t}\n\t\t\t\t\twhile(A.get(x)!=0 && A.get(y) != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(A.get(x)==A.get(y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tS = S + \" \"  +(char)(x+65) + (char)(y+65);\n\t\t\t\t\t\t\tA.set(x,A.get(x)-1);\n\t\t\t\t\t\t\tA.set(y,A.get(y)-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(A.get(x)>A.get(y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tS= S + \" \"  +(char)(x+65);\n\t\t\t\t\t\t\tA.set(x,A.get(x)-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(A.get(x)<A.get(y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tS =S +\" \" +(char)(y+65);\n\t\t\t\t\t\t\tA.set(y,A.get(y)-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//System.out.println(\"in inner while loop\" +A.get(x) );\n\t\t\t\t\t}\n\t\t\t\t    break;\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tint max_index;\n\t\t\t\t\tint max;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\tmax = A.get(0);\n\t\t\t\t\tmax_index=0;\n\t\t\t\t\tfor(int i=0;i<N;i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(max<A.get(i))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmax=A.get(i);\n\t\t\t\t\t\t\tmax_index=i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\tA.set(max_index,A.get(max_index)-1);\n\t\t\t\t\t\tif(A.get(max_index)==0) {count_notzeroes--; }\n\t\t\t\t\t\tS = S + \" \" + (char)(max_index+65);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Case #\" +(t+1) +\": \" +S.substring(1));\n\t\t}\n\n\t}\n}", "idx": "8748"}
{"func": "package googlejam8.p749;\n//trashcansaretasty\n\n\n\n//EXTRA\n//==============================================================================\n\n\n\n\n\n/*\n//exo2\n    //static void solve() throws IOException {\n    \t\n    \t\n    \t//ArrayList <String> possible_res_str0 = new ArrayList <String> ();\n    \tArrayList <String> possible_res_str1 = new ArrayList <String> ();\n    \t\n    \t\n    \t\n    \tString [] str = in.readLine().split(\" \");\n    \tString str0 = str[0];\n    \tString str1 = str[1];\n    \t\n    \tString res_str0 = \"\";\n    \tString res_str1 = \"\";\n    \t\n    \tString compare = \"equal\";\n    \t\n    \tfor (int i = 0 ; i < str0.length() ; i++){    \t\t\n    \t\tif (str0.charAt(i) != '?' && str1.charAt(i) != '?')\n    \t\t\tif (str0.charAt(i) < str1.charAt(i)){\n    \t\t\t\tcompare = \"str1bigger\";\n        \t\t\tres_str0 += str0.charAt(i);\n        \t\t\tres_str1 +=  str1.charAt(i);\n    \t\t\t}\n    \t\t\telse if (str0.charAt(i) > str1.charAt(i)){\n    \t\t\t\tcompare = \"str0bigger\";\n        \t\t\tres_str0 += str0.charAt(i);\n        \t\t\tres_str1 +=  str1.charAt(i);\n    \t\t\t}\n    \t\t\telse{\n    \t\t\t\tcompare = \"equal\";\n        \t\t\tres_str0 += str0.charAt(i);\n        \t\t\tres_str1 +=  str1.charAt(i);\n    \t\t\t}\n    \t\t\t\n    \t\t\n    \t\tif (str0.charAt(i) == '?' && str1.charAt(i) == '?' && compare == \"equal\")\n    \t\t{\n    \t\t\tres_str0 += \"\" + \"0\";\n    \t\t\tres_str1 += \"\" + \"0\";\n    \t\t}\n    \t\t\n    \t\tif (str0.charAt(i) == '?' && str1.charAt(i) == '?' && compare == \"str0bigger\")\n    \t\t{\n    \t\t\tres_str0 += \"\" + \"0\";\n    \t\t\tres_str1 += \"\" + \"9\";\n    \t\t}\n    \t\t\n    \t\tif (str0.charAt(i) == '?' && str1.charAt(i) == '?' && compare == \"str1bigger\")\n    \t\t{\n    \t\t\tres_str0 += \"\" + \"9\";\n    \t\t\tres_str1 += \"\" + \"0\";\n    \t\t}\n    \t\t\n    \t\tif (str0.charAt(i) == '?' && str1.charAt(i) != '?' && compare == \"equal\")\n    \t\t{\n    \t\t\tpossible_res_str1.add(res_str0 + str1.charAt(i));\n    \t\t\tpossible_res_str1.add(res_str0+1 + str1.charAt(i));\n    \t\t\t\n    \t\t\tpossible_res_str0.add(res_str1 + str1.charAt(i));\n    \t\t\t\n    \t\t\t\n    \t\t\tres_str0 += \"\" + str1.charAt(i);\n    \t\t\t//res_str0 += \"\" + str1.charAt(i);\n    \t\t\t\n    \t\t\tres_str1 += \"\" + str1.charAt(i);\n    \t\t}\n    \t\t\n    \t\tif (str0.charAt(i) != '?' && str1.charAt(i) == '?' && compare == \"equal\")\n    \t\t{\n    \t\t\t//if (i != str0.length()-1 && (str0.charAt(i+1) - str1.charAt(i+1) > 5)) {\t\n    \t\t\tres_str0 += \"\" + str0.charAt(i);\n    \t\t\tres_str1 += \"\" + str0.charAt(i);\n    \t\t}\n    \t\t\n    \t\t\n    \t\t\n    \t\tif (str0.charAt(i) == '?' && str1.charAt(i) != '?' && compare == \"str0bigger\")\n    \t\t{\n    \t\t\tres_str0 += \"\" + 0;\n    \t\t\tres_str1 += \"\" + str1.charAt(i);\n    \t\t}\n    \t\t\n    \t\tif (str0.charAt(i) != '?' && str1.charAt(i) == '?' && compare == \"str0bigger\")\n    \t\t{\n    \t\t\tres_str0 += \"\" + str0.charAt(i);\n    \t\t\tres_str1 += \"\" + 9;\n    \t\t}\n    \t\t\n    \t\tif (str0.charAt(i) == '?' && str1.charAt(i) != '?' && compare == \"str1bigger\")\n    \t\t{\n    \t\t\tres_str0 += \"\" + 9;\n    \t\t\tres_str1 += \"\" + str1.charAt(i);\n    \t\t}\n    \t\t\n    \t\tif (str0.charAt(i) != '?' && str1.charAt(i) == '?' && compare == \"str1bigger\")\n    \t\t{\n    \t\t\tres_str0 += \"\" + str0.charAt(i);\n    \t\t\tres_str1 += \"\" + 0;\n    \t\t}\n    \n    \t}\n    \t\n\n    \tout.print(res_str0);\n    \tout.print(\" \");\n    \tout.print(res_str1);\n    \tout.println();\n\n        \n    }\n}*/\n\n//exo3\n/*\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\n\npublic class AAA {\n\tstatic final String FILENAME = \"C-small-attempt2.in\";\n\t//static final String FILENAME = \"@Given-input.in.txt\";\n\n\tstatic BufferedReader in; static StringTokenizer st; static PrintWriter out;\n\tstatic void newST() throws IOException {st = new StringTokenizer(in.readLine());}\n\t//String str = in.readLine();\n\t//int n = str.length();\n\tstatic int stInt() {return Integer.parseInt(st.nextToken());}\n\t//newST();\n\t//int K = stInt(), C = stInt(), S = stInt();\n\tstatic int nextInt() throws IOException {return Integer.parseInt(in.readLine());}\n\tstatic long nextLong() throws IOException {return Long.parseLong(in.readLine());}\n\tstatic double nextDouble() throws IOException {return Double.parseDouble(in.readLine());}\n\tstatic BigInteger BigInt(int n) throws IOException {return new BigInteger(Integer.toString(n));}\n\t//ans = ans.multiply(bigInt(K)).add(bigInt(i%K));\n\t//ans = BigInteger.ZERO;\n\t//ans = ans.add(BigInteger.ONE);\n\t\n\tstatic void println(Object o) {System.out.println(o);} static void println() {System.out.println();} static void print(Object o) {System.out.print(o);}\n    public static void main(String[] args) throws IOException {\n    \tin = new BufferedReader(new FileReader(FILENAME));\n    \t\n    \tout = new PrintWriter(new BufferedWriter(new FileWriter(\"@generic.out.txt\")));\t\n    \t//out = new PrintWriter(new BufferedWriter(new FileWriter(FILENAME+\".out.txt\")));\n\t\t//out = new PrintWriter(System.out, true);\n\t\t\n\t\tint TC = nextInt();\n\t\tfor (int tc = 1; tc <= TC; tc++) {\n\t\t\tout.print(\"Case #\"+tc+\": \");\n\t\t\tsolve();\n\t\t}\n\t\tin.close();\n\t\tout.close();\n    }\n    static void solve() throws IOException {\n    \t//System.out.println();\n    \tlong n = nextInt();\n    \tHashMap<String, String> mapone = new  HashMap<String, String>();\n    \tHashMap<String, String> maptwo = new  HashMap<String, String>();\n    \t\n    \tlong result = 0;\n    \t\n    \tfor (int i = 0 ; i < n ; i++){\n        \tString [] str = in.readLine().split(\" \");\n        \tString str0 = str[0];\n        \tString str1 = str[1];\n        \t\n        \tif (mapone.containsKey(str0) && maptwo.containsKey(str1)){\n        \t\tresult++;\n        \t}\n        \t\n        \tmapone.put(str0, \"\");\n        \tmaptwo.put(str1, \"\");\n        \t\n        \t//System.out.println(str0);\n        \t//System.out.println(str1);\n        \t\n    \t}\n    \tresult = n - Math.max(mapone.size(), maptwo.size());\n    \tout.println(result);\n    }\n}\n*/\n\n//exo1\n/*\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\nimport org.omg.CORBA.Current;\n\n\npublic class AAA {\n\tstatic final String FILENAME = \"A-large.in\";\n\t//static final String FILENAME = \"@Given-input.in.txt\";\n\t\n\tstatic BufferedReader in; static StringTokenizer st; static PrintWriter out;\n\tstatic void newST() throws IOException {st = new StringTokenizer(in.readLine());}\n\t//String str = in.readLine();\n\t//int n = str.length();\n\tstatic int stInt() {return Integer.parseInt(st.nextToken());}\n\t//newST();\n\t//int K = stInt(), C = stInt(), S = stInt();\n\tstatic int nextInt() throws IOException {return Integer.parseInt(in.readLine());}\n\tstatic long nextLong() throws IOException {return Long.parseLong(in.readLine());}\n\tstatic double nextDouble() throws IOException {return Double.parseDouble(in.readLine());}\n\tstatic BigInteger BigInt(int n) throws IOException {return new BigInteger(Integer.toString(n));}\n\t//ans = ans.multiply(bigInt(K)).add(bigInt(i%K));\n\t//ans = BigInteger.ZERO;\n\t//ans = ans.add(BigInteger.ONE);\n\t\n\tstatic void println(Object o) {System.out.println(o);} static void println() {System.out.println();} static void print(Object o) {System.out.print(o);}\n  public static void main(String[] args) throws IOException {\n  \tin = new BufferedReader(new FileReader(FILENAME));\n  \tout = new PrintWriter(new BufferedWriter(new FileWriter(\"@generic.out.txt\")));\t\n  \t//out = new PrintWriter(new BufferedWriter(new FileWriter(FILENAME+\".out.txt\")));\n\t\t//out = new PrintWriter(System.out, true);\n\t\t\n\t\tint TC = nextInt();\n\t\tfor (int tc = 1; tc <= TC; tc++) {\n\t\t\tout.print(\"Case #\"+tc+\": \");\n\t\t\tsolve();\n\t\t\tout.println();\n\t\t}\n\t\tin.close();\n\t\tout.close();\n  }\n  static void solve() throws IOException {\n  \t//long n = nextInt();\n  \tString str = in.readLine();\n  \t\n  \tArrayList <Character> list1 = new ArrayList<Character>();\n\n  \tfor (int i=0 ; i < str.length() ; i++ ){\n  \t\tlist1.add(str.charAt(i));\n  \t}\n  \t\n  \t\n  \tint [] numbers = new int[10];\n  \tString result =\"\";\n  \tint counter = 0;\n  \t\n  \t//ZERO\n  \twhile (list1.indexOf('Z') >= 0 ){\n  \t\tnumbers[0] ++;\n  \t\tlist1.remove(list1.indexOf('Z'));\n  \t\tlist1.remove(list1.indexOf('E'));\n  \t\tlist1.remove(list1.indexOf('R'));\n  \t\tlist1.remove(list1.indexOf('O'));\t\n  \t}\n  \t\n  \t//TWO\n  \twhile (list1.indexOf('W') >= 0 ){\n  \t\tnumbers[2] ++;\n  \t\tlist1.remove(list1.indexOf('T'));\n  \t\tlist1.remove(list1.indexOf('W'));\n  \t\tlist1.remove(list1.indexOf('O'));\t\n  \t}\n  \t\n  \t//FOUR\n  \twhile (list1.indexOf('U') >= 0 ){\n  \t\tnumbers[4] ++;\n  \t\tlist1.remove(list1.indexOf('F'));\n  \t\tlist1.remove(list1.indexOf('O'));\n  \t\tlist1.remove(list1.indexOf('U'));\n  \t\tlist1.remove(list1.indexOf('R'));\n  \t\t\n  \t}\n  \t\n  \t//SIX\n  \twhile (list1.indexOf('X') >= 0 ){\n  \t\tnumbers[6] ++;\n  \t\tlist1.remove(list1.indexOf('S'));\n  \t\tlist1.remove(list1.indexOf('I'));\n  \t\tlist1.remove(list1.indexOf('X'));\t\n  \t}\n  \t\n  \t//FIVE\n  \twhile (list1.indexOf('F') >= 0 ){\n  \t\tnumbers[5] ++;\n  \t\tlist1.remove(list1.indexOf('F'));\n  \t\tlist1.remove(list1.indexOf('I'));\n  \t\tlist1.remove(list1.indexOf('V'));\t\n  \t\tlist1.remove(list1.indexOf('E'));\t\n  \t\t\n  \t}\n  \t\n  \t//3\n  \twhile (list1.indexOf('R') >= 0 ){\n  \t\tnumbers[3] ++;\n  \t\tlist1.remove(list1.indexOf('T'));\n  \t\tlist1.remove(list1.indexOf('H'));\n  \t\tlist1.remove(list1.indexOf('R'));\t\n  \t\tlist1.remove(list1.indexOf('E'));\n  \t\tlist1.remove(list1.indexOf('E'));\n  \t}\n  \t\n  \t//7\n  \twhile (list1.indexOf('S') >= 0 ){\n  \t\tnumbers[7] ++;\n  \t\tlist1.remove(list1.indexOf('S'));\n  \t\tlist1.remove(list1.indexOf('E'));\n  \t\tlist1.remove(list1.indexOf('V'));\t\n  \t\tlist1.remove(list1.indexOf('E'));\n  \t\tlist1.remove(list1.indexOf('N'));\n  \t\t\n  \t}\n  \t\n  \t//8\n  \twhile (list1.indexOf('T') >= 0 ){\n  \t\tnumbers[8] ++;\n  \t\tlist1.remove(list1.indexOf('E'));\n  \t\tlist1.remove(list1.indexOf('I'));\n  \t\tlist1.remove(list1.indexOf('G'));\t\n  \t\tlist1.remove(list1.indexOf('H'));\n  \t\tlist1.remove(list1.indexOf('T'));\n  \t\t\n  \t}\n  \t\n  \t//1\n  \twhile (list1.indexOf('O') >= 0 ){\n  \t\tnumbers[1] ++;\n  \t\tlist1.remove(list1.indexOf('O'));\n  \t\tlist1.remove(list1.indexOf('N'));\t\n  \t\tlist1.remove(list1.indexOf('E'));\n  \t}\n  \t\n  \t//9\n  \twhile (list1.indexOf('I') >= 0 ){\n  \t\tnumbers[9] ++;\n  \t\tlist1.remove(list1.indexOf('N'));\n  \t\tlist1.remove(list1.indexOf('I'));\n  \t\tlist1.remove(list1.indexOf('N'));\n  \t\tlist1.remove(list1.indexOf('E'));\t\t\n  \t}\n  \t\n  \t\n  \tint current = 0;\n  \tfor (int number: numbers){\n  \t\tfor (int n = 0 ; n < number ; n++){\n  \t\t\tresult += \"\"+ current; \n  \t\t}\n  \t\tcurrent++;\n  \t\t\n  \t}\n  \tout.print(result);\n  \t\n  \t\t\t\n  \t//out.println(lastWord);\n  }\n}\n*/\n\n\n\n\n/* GOOD TIPS :\n    String str = in.readLine();    \t\n    String lastWord = \"\"+ str.charAt(0);\n    \t\n\n  \tfor (int i=1 ; i<str.length() ; i++ ){\n    \tif (lastWord.charAt(0) <= str.charAt(i)){\n    \t\tlastWord = str.charAt(i) + lastWord ;\n    \t}\n   \t}\n    int N = nextInt(); \n    HashMap <String, Integer> men = new HashMap();\n\t\tfor (int i = 0 ; i < 2*N-1; i++)\n    \t{\n        \tString[] str = in.readLine().split(\" \");  //lit la ligne\n        \t\n        \tfor (int c = 0; c< str.length ;c++ ){\n        \t\tif (men.containsKey(str[c])){\n        \t\t\tmen.put(str[c],men.get(str[c]) + 1);\n        \t\t}\n        \t\telse\n        \t\t{\n        \t\t\tmen.put(str[c],1);\n        \t\t}\n        \t}\n    \t}\n    \t//print the content of hashmap\n        ArrayList<Integer> result = new  ArrayList<Integer>();\n    \tSet set = men.entrySet();\n        Iterator i = set.iterator();\n        while(i.hasNext()) {\n            Map.Entry me = (Map.Entry)i.next();\n            if ( (int) me.getValue() % 2 ==1){\n            \t//System.out.print(me.getKey() + \": \");\n            \t//System.out.println(me.getValue());\n            \tresult.add(Integer.parseInt((String) me.getKey()));\n            }\n        }\n        //System.out.println();\n    \t\n        Collections.sort(result);\n        \n        for(int res : result){\n\t\t\tSystem.out.println(res);\n\t    \tout.print(res +\" \");\n\n\t\t}\n\n        HashMap <String, String> men = new HashMap<String, String>();\n\n        //I put all the data in a hashmap\n    \tString[] str = in.readLine().split(\" \");  //lit la ligne\n    \tfor (int c = 1; c<= N ;c++ ){\n    \t\tmen.put(Integer.toString(c),str[c-1]);\n    \t}\n    \t\n    \t//I check one by one.\n    \tString cur = \"\";\n    \tint maximum = 0 ;\n    \tArrayList<String> first = new ArrayList<String>();\n    \tfor (int current = 1 ; current <=N ; current++){\n    \t\tSystem.out.print(current + \": \");\n\n    \t\tint tmp_maximum = 0;\n    \t\tcur = Integer.toString(current); // just to convert;\n    \t\tHashMap <String, String> tmp = new HashMap<String, String>(men);\n    \t\tHashSet <String> already = new HashSet <String>();\n    \t\t\n    \t\tboolean end = false;\n    \t\t\n    \t\twhile (tmp.containsKey(cur)  || end == false ){ //&& tmp.containsKey(tmp.get(cur))){\n    \t\t\tString old_cur = cur;\n    \t\t\tcur = tmp.get(cur);\n    \t\t\ttmp.remove(old_cur);\n\n    \t\t\t//if (already.contains(cur) == false){\n    \t\t\t\ttmp_maximum ++;\n        \t\t\talready.add(cur);\n        \t\t\tfirst.add(cur);\n    \t\t\t//}\n    \t\t\tSystem.out.print(\" \" + cur+\" \");\n    \t\t\t\n    \t\t\t\n    \t\t\t//end\n    \t\t\tif (tmp.containsKey(cur) == false){\n    \t\t\t\t//  \n    \t\t\t\t//System.out.println(\"TTTTT\");\n\n    \t\t\t\tSet set = tmp.entrySet();\n    \t\t        Iterator i = set.iterator();\n    \t\t        end = true;\n    \t\t        while(i.hasNext()) {\n    \t\t            Map.Entry me = (Map.Entry)i.next();\n\t\t            \t//System.out.println(\"TTTTT\");\n    \t\t            //System.out.println(me.getValue());\n    \t\t            //System.out.println(old_cur);\n    \t\t            \n    \t\t            if (  ((String)me.getValue()).equals(old_cur)){\n    \t\t            \t//System.out.println(\"TTTTT\");\n    \t\t            \t//System.out.print(me.getKey() + \": \");\n    \t\t            \t//System.out.println(me.getValue());\n    \t\t            \tcur = (String) me.getValue();\n    \t\t            \tend = false;\n    \t\t            }\n    \t\t        }\n    \t\t        if (end == false)\n    \t\t        \ttmp_maximum ++;\n\n    \t\t\t}\n    \t\t\t\n    \t\t}\n    \t\tSystem.out.println();\n    \t\tif (first.get(0) == first.get(first.size()-1) )\n    \t\t{\n    \t\t\ttmp_maximum --;\n    \t\t}\n    \t\t\n    \t\t\n    \t\tmaximum = Math.max(maximum,tmp_maximum );\n\n    \t\t\n    \t}\n\t\tout.println(maximum);\n          String newString = endingString.substring(0, i) + endingString.substring(i + 1);\n\n */\n\n /* TIPS\n    \tlong n = nextInt();\n    \tString str = in.readLine();\n    \tArrayList <String> list = new ArrayList <String> ();\n\n        String [] str = in.readLine().split(\" \");\n    \tString str0 = str[0];\n    \tString cmp = \"equal\";\n    \tfor (int i = 0 ; i < str0.length() ; i++){    \t\t\n    \t\tif (str0.charAt(i) != '?' && str1.charAt(i) != '?')\n    \t\t\tif (str0.charAt(i) < str1.charAt(i)){\n\n    \tHashMap<String, String> map = new  HashMap<String, String>();\n\n    \tif (map.containsKey(str0) && map.containsKey(str1)){\n    \t\tresult++;\n    \t}\n    \tmap.put(str0, \"\");\n    \tresult = n - Math.max(mapone.size(), maptwo.size());\n\n    \tArrayList <Character> list1 = new ArrayList<Character>();\n    \tfor (int i=0 ; i < str.length() ; i++ ){\n    \t\tlist1.add(str.charAt(i));\n\n     \tlist1.remove(list1.indexOf('S'));\n\n\n     \n     */\n\n\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\npublic class AAA {\n\n\tstatic BufferedReader in; static StringTokenizer st; static PrintWriter out;\n\tpublic static void main(String[] args) throws IOException {\n    \tString FILENAME_IN = \"@Generic.in\";\n    \tFILENAME_IN = \"A-large.in.txt\";  //Enlever ce comentaire quand submit\n    \t//FILENAME_IN = \"B-small-attempt0.in\";  //Enlever ce comentaire quand submit\n    \t//FILENAME_IN = \"C-small-attempt0.in\";  //Enlever ce comentaire quand submit\n    \t\n    \tin = new BufferedReader(new FileReader(FILENAME_IN));\n    \t\n    \tout = new PrintWriter(new BufferedWriter(new FileWriter(\"@Generic.out\")));\t\n\t\t//out = new PrintWriter(System.out, true); //Utiliser pour le System.out.println\n\t\t\n\t\tint TC = Integer.parseInt(in.readLine());\n\t\tfor (int tc = 1; tc <= TC; tc++) {\n\t\t\tout.print(\"Case #\"+tc+\": \");\n\t\t\t//EXO1\n\t\t\t    \tString res = \"\";\n\t\t\t     \t//String [] str = in.readLine().split(\" \");\n\t\t\t    \t//String str0 = str[0];\n\t\t\t     \n\t\t\t      \tlong n = Integer.parseInt(in.readLine());\n\t\t\t      \tint [] senastors =  new int [(int) n]; \n\t\t\t      \t\n\t\t\t     \tString [] str = in.readLine().split(\" \");\n\t\t\t     \t\n\t\t\t     \tfor (int i = 0; i < str.length ; i++){\n\t\t\t     \t\tsenastors[i] = Integer.valueOf(str[i]);\n\t\t\t     \t}\n\t\t\t      \t\n\t\t\t   //  \tfor (int sen : senastors){\n\t\t\t     //\t\tSystem.out.println(sen);\n\t\t\t     \t//}\n\t\t\t    \t\n\t\t\t     \t//find the max\n\t\t\t     \tint indiceMax = 0;\n\t\t\t     \t//int max = Integer.MAX_VALUE;\n\t\t\t     \t//int counterMax = 10;\n\t\t\t     \t\n\t\t\t \t\tint max = indiceMax;\n\t\t\t \t\tint modulo = 0;\n\t\t\t \t\t\n\t\t\t \t\tint several_max =0;\n\t\t\t     \tdo {\n\t\t\t\t     \tmax = senastors[indiceMax];\n\t\t\t\n\t\t\t\t     \tfor (int j = 0; j < senastors.length; j++)\n\t\t\t\t     \t{\n\t\t\t\t     \t\t if (senastors[j] == max)\n\t\t\t\t     \t    \t several_max ++;\n\t\t\t\t     \t\t \n\t\t\t\t     \t     if (senastors[j] > max)\n\t\t\t\t     \t     {\n\t\t\t\t     \t    \t max = senastors[j];\n\t\t\t\t     \t    \t indiceMax = j;\n\t\t\t\t     \t     }\n\t\t\t\t     \t     \n\t\t\t\t     \t    \n\t\t\t\t     \t}\n\t\t\t\t     \t\n\t\t\t\t     \t//result\n\t\t\t\t     \tsenastors[indiceMax]--;\n\t\t\t\t     \t\n\t\t\t\t     \tif (max != 0)\n\t\t\t\t     \t\tres += (char) ('A' + indiceMax);\n\t\t\t\t     \t\t//out.print((char) ('A' + indiceMax));\n\t\t\t\t     \t//System.out.println();\n\t\t\t\t     \t\n\t\t\t\t     \tmodulo ++;\n\t\t\t\t     \t//if (modulo%2 == 0)\n\t\t\t\t     \t//if (several_max == 1)\n\t\t\t\t     \t//\tout.print(\" \");\n\t\t\t\t     \t//System.out.println();\n\t\t\t\t     \t//counterMax -- ;\n\t\t\t\t     \t//if (counterMax == 0)\n\t\t\t\t     \t//\tbreak;\n\t\t\t\t     \tseveral_max = 0;\n\t\t\t     \t}\n\t\t\t     \twhile (max != 0);\n\t\t\t     \t\n\t\t\t     \tint counterModulo = 0;\n\t\t\t     \tif (res.length()%2 == 0)\n\t\t\t     \t{\n\t\t\t     \t\tcounterModulo = 0; \n\t\t\t     \t}\n\t\t\t     \telse\n\t\t\t     \t\tcounterModulo = 1;\n\t\t\t     \t\n\t\t\t     \tString finalresult = \"\";\n\t\t\t     \t\n\t\t\t     \tfor (char oneres : res.toCharArray()){\n\t\t\t     \t\tif (counterModulo%2 != 0)\n\t\t\t     \t\t\tfinalresult += oneres+ \" \";\n\t\t\t     \t\telse\n\t\t\t     \t\t\tfinalresult+= oneres;\n\t\t\t     \t\tcounterModulo++;\n\t\t\t     \t}\n\t\t\t    \t\n\t\t\t    \tout.print(finalresult);\n\t\t\t    \tout.println();\n\t\t}\n\t\tin.close();\n\t\tout.close();\n    }    \n}   \n    \n    \n\n", "idx": "8749"}
{"func": "package googlejam8.p750;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Problem1 {\n\tpublic static void main(String args[]){\n\t\tList<String> inputList1 = new ArrayList<String>();\n\t\tString filePath = \"/Users/zzluck/Downloads/\";\n\t\tString fileName = \"A-large.in.txt\";\n\t\tString fullFileName = filePath + fileName;\n\t\ttry {\n\t\t\tBufferedReader in = new BufferedReader(new FileReader(fullFileName));\n\t\t\tString s;\n\t\t\twhile ((s = in.readLine()) != null) { \n\t\t\t\tinputList1.add(s.trim());\n\t\t\t}\n\t\t\tin.close();\n\t\t} catch (IOException e) {\n\t\t        System.err.println(\"Error during input process:\"+e); \n\t\t        System.exit(1);\n\t\t}\n\t\tList<String> inputList = inputList1;\n\t\tList<String> outputList = new ArrayList<String>();\n\t\tString testCaseResult = \"\";\n\t\t\n\t\tint testCount = Integer.valueOf(inputList.get(0));\n\t\tint curIdx =1;\n\t\tfor(int i = 1; i<=testCount;i++){\n\t\t\tString line = inputList.get(curIdx)+\" \"+inputList.get(curIdx+1);\n\t\t\tcurIdx= curIdx+2;\n\t\t\tString answer=\"\";\n\t\t\t String strArr[] = line.split(\" \");\n\t\t\t int n = Integer.valueOf(strArr[0]);\n\t\t\t int p[] = new int[n];\n\t\t\t char pCh[] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\n\t\t\t int totalNum = 0;\n\t\t\t String outP = \"\";\n\t\t\t for(int i3 =0; i3<n;i3++){\n\t\t\t\t p[i3] = Integer.valueOf(strArr[i3+1]);\n\t\t\t\t \n\t\t\t }\n\t\t\t //psum\n\t\t\t for (int i2 : p){\n\t\t\t\t totalNum += i2;\n\t\t\t }\n\t\t\t //make answer\n\t\t\t for (int i1=0; i1<totalNum;i1++){\n\t\t\t\t int totalNum1=0;\n\t\t\t\tfor (int i3 : p){\n\t\t\t\t\t totalNum1 += i3;\n\t\t\t\t}\n\t\t\t\tint curNum = totalNum1;\n\t\t\t\tint max = p[0];\n\t\t\t\tint min = p[0];\n\t\t\t\tint maxIdx = 0;\n\t\t\t\tfor(int i5=1; i5 < p.length ; i5++) {\n\t\t\t\t\n\t\t\t\t    if( p[i5] > max ){\n\t\t\t\t    \tmax = p[i5];\n\t\t\t\t    \tmaxIdx = i5;\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t int curMaxIdx = maxIdx;\n\t\t\t\t if (n >= curNum){\n\t\t\t\t\t int max1 = p[p.length-1];\n\t\t\t\t\tint min1 = p[p.length-1];\n\t\t\t\t\tint maxIdx1 = p.length-1;\n\t\t\t\t\tfor(int i5=p.length-2; i5 >=0 ; i5--) {\n\t\t\t\t\t    if( p[i5] > max1 ){\n\t\t\t\t\t    \tmax1 = p[i5];\n\t\t\t\t\t    \tmaxIdx1 = i5;\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\tcurMaxIdx = maxIdx1;\n\t\t\t\t }\n\t\t\t\t \n\t\t\t\t \n\t\t\t\t outP += pCh[curMaxIdx];\n\t\t\t\t p[curMaxIdx]-- ;\n\t\t\t\t \n\t\t\t\t if(outP.length() == 2){\n\t\t\t\t\t answer += outP+\" \";\n\t\t\t\t\t outP =\"\";\n\t\t\t\t }\n\t\t\t\tint totalNum2=0;\n\t\t\t\tfor (int i4 : p){\n\t\t\t\t\t totalNum2 += i4;\n\t\t\t\t}\n\t\t\t\t curNum=totalNum2;\n\t\t\t\t if(curNum == 2&&(outP.length()!=0)){\n\t\t\t\t\t answer += outP+\" \";\n\t\t\t\t\t outP =\"\";\n\t\t\t\t }\n\t\t\t }\n\t\t\t\n\t\t\t\n\t\t\t answer=answer.trim();\n\t\t\ttestCaseResult = answer;\n\t\t\toutputList.add(\"Case #\"+i+\": \" + testCaseResult+\"\\n\");\n\t\t\t\n\t\t\t\n\t\t}\n\t\tString filePath1 = \"/Users/zzluck/Downloads/codejamOutput/\";\n\t\tString fileName1 = \"sol1.txt\";\n\t\tString fullFileName1 = filePath1 + fileName1;\n\t\ttry{\n\t\t    File file = new File(fullFileName1) ;\n\t\t    FileWriter fw = new FileWriter(file) ;\n\t\t     \n\t\t    // \ud30c\uc77c\uc548\uc5d0 \ubb38\uc790\uc5f4 \uc4f0\uae30\n\t\t    for(int i=0; i<outputList.size(); i++){\n\t\t    \tfw.write(outputList.get(i));\n\t\t        fw.flush();\n\t\t    }\n\t\t    // \uac1d\uccb4 \ub2eb\uae30\n\t\t    fw.close(); \n\t\t     \n\t\t     \n\t\t}catch(Exception e){\n\t\t    e.printStackTrace();\n\t\t}\n\t}\n}\n", "idx": "8750"}
{"func": "package googlejam8.p754;\nimport java.io.*;\r\nimport java.util.*;\r\nclass A\r\n{\r\n\tpublic static void main(String[] args) throws IOException\r\n\t{\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor(int i=0;i<T;i++){\r\n\t\t\tSystem.out.print(\"Case #\"+(i+1)+\": \");\r\n\t\t\tint part=Integer.parseInt(in.readLine());\r\n\t\t\tString[] mem=in.readLine().split(\" \");\r\n\t\t\tint totalmembers=0;\r\n\t\t\tfor(int j=0;j<part;j++){\r\n\t\t\t\ttotalmembers+=Integer.parseInt(mem[j]);\r\n\t\t\t\t\t}\r\n\t\t\twhile(totalmembers!=0){\r\n\t\t\t\tint max=0;\r\n\t\t\t\tint num1=0;\r\n\t\t\t\tString ans=\"\";\r\n\t\t\t\tfor(int j=0;j<part;j++){\r\n\t\t\t\t\t\tif(max<Integer.parseInt(mem[j])){\r\n\t\t\t\t\t\t\tmax=Integer.parseInt(mem[j]);\r\n\t\t\t\t\t\t\tnum1=j;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\tans=\"\"+(char)(65+num1);\r\n\t\t\t\tmem[num1]=Integer.toString(Integer.parseInt(mem[num1])-1);\r\n\t\t\t\ttotalmembers-=1;\r\n\t\t\t\tfor(int j=0;j<part;j++){\r\n\t\t\t\t\tdouble p=totalmembers;\r\n\t\t\t\t\tif(Double.parseDouble(mem[j])/p>0.5){\r\n\t\t\t\t\t\tans+=(char)(65+j);\r\n\t\t\t\t\t\tmem[j]=Integer.toString(Integer.parseInt(mem[j])-1);\r\n\t\t\t\t\t\ttotalmembers-=1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\tSystem.out.print(ans+\" \");\r\n\t\t}\r\n\t\tSystem.out.println();\t\r\n\t\t}\r\n\t}\r\n}", "idx": "8754"}
{"func": "package googlejam8.p758;\n\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class A3rd {\r\nstatic String chr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner sc = new Scanner(System.in);\r\n\r\n\t\tint T = sc.nextInt();\r\n\t\t\r\n\t\tfor(int i=1;i<=T;i++){\r\n\t\t\tString per=\"\";\r\n\t\t\r\n\t\tint n = sc.nextInt();\r\n\t\tint [] p = new int[n];\r\n\t\tfor(int k = 0;k<n;k++){\r\n\t\t\tp[k]= sc.nextInt();\r\n\t\t}\r\n\t\t//Arrays.sort(p);\r\n\t\tboolean ok = false;\r\n\t\tint last=0;\r\n\t\tdo{\r\n\t\t\t\r\n\t\t\r\n\t\tint max =0;\r\n\t\tok = false;\r\n\t\tfor(int k = 0;k<n;k++){\r\n\t\t\tif(0<p[k])\r\n\t\t\t\tok = true;\r\n\t\t}\r\n\t\tif(ok){\r\n\t\t\tfor(int k = 0;k<n;k++){\r\n\t\t\t\tif(p[max]<p[k])\r\n\t\t\t\t\t{\r\n\t\t\t\t\tmax = k;\r\n\t\t\t\t\tlast=0;\r\n\t\t\t\t\t}\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\tper  = per + chr.charAt(max);\r\n\t\t\tp[max]--;\t\r\n\t\t}\r\n\t\tok = false;\r\n\t\tfor(int k = 0;k<n;k++){\r\n\t\t\tif(0<p[k])\r\n\t\t\t\tok = true;\r\n\t\t}\r\n\t\tmax =0;\r\n\t\tif(ok){\r\n\t\t\tfor(int k = 0;k<n;k++){\r\n\t\t\t\tif(p[max]<p[k])\r\n\t\t\t\t\t{\r\n\t\t\t\t\tmax = k;\r\n\t\t\t\t\tlast = 1;\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tper  = per + chr.charAt(max)+\" \";\r\n\t\t\tp[max]--;\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t}while(ok);\r\n\t\t//System.out.println(\"Casejjk #\"+i+\": \"+per.charAt(per.length()-2));\r\n\t\t\r\n\t\tif(last==0)\r\n\t\t{\r\n\t\t\t\r\n\t\t\t//System.out.println(\"Case #\"+i+\": \"+per);\r\n\t\t\t\r\n\t\t\t//System.out.println(\"Case #\"+i+\": \"+per);\r\n\t\t\tString s = per.substring(0, per.length()-4);\r\n\t\t\t//System.out.println(\"Case #\"+i+\": \"+s);\r\n\t\t\tString u = per.substring(per.length()-4);\r\n\t\t\t//System.out.println(\"Case #\"+i+\": \"+u);\r\n\t\t\tStringBuilder ss = new StringBuilder(u);\r\n\t\t\tu = ss.reverse().toString();\r\n\t\t\t//System.out.println(\"Case #\"+i+\": \"+u);\r\n\t\t\tper=s+u;\r\n\t\t\t//System.out.println(\"Case #\"+i+\": \"+per);\r\n\t\t//\ts= per.substring(0,per.length()-2)+\" \"+per.substring(per.length()-2);\r\n\t\t//s=per;\r\n\t\t}\r\n\tper=\tper.trim();\r\n\t\tSystem.out.println(\"Case #\"+i+\": \"+per);\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "8758"}
{"func": "package googlejam8.p778;\nimport java.io.*;\n\timport java.util.*;\n\tpublic class Senate\n\t{\n\t\t\n\t\tpublic static void main(String args[])\n\t\t{\n\t\t\t\tScanner s= new Scanner(System.in);\n\t\t\t\tint t = s.nextInt();\n\t\t\t\tint is=1;\n\t\t\t\twhile((t--)>0)\n\t\t\t\t{\tint sum=0;\n\t\t\t\t\tint n= s.nextInt();\n\t\t\t\t\tint a[]=new int[n];\n\t\t\t\t\tSystem.out.print(\"Case #\"+is+\":\");\n\t\t\t\t\tis++;\n\t\t\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\t\t{\n\t\t\t\t\t\ta[i]=s.nextInt();\n\t\t\t\t\t\tsum=sum+a[i];\n\n\t\t\t\t\t}\n\t\t\t\t\twhile(sum!=0||sum>0)\n\t\t\t\t\t{\n\n\t\t\t\t\tint l1=0;\n\t\t\t\t\tint l2=0;\n\t\t\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(a[i]>=a[l1])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tl2=l1;\n\t\t\t\t\t\t\tl1=i;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (a[i]>=a[l2])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tl2=i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(a[l1]==a[l2]&&a[l2]-2>=0)\n\t\t\t\t\t{\n\t\t\t\t\t\t\n\t\t\t\t\t\tchar ac =(char) (65+l1);\n\t\t\t\t\t\tchar b =(char) (65+l2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tSystem.out.print(\" \"+b+ac);\n\t\t\t\t\t\ta[l1]--;\n\t\t\t\t\t\ta[l2]--;\n\t\t\t\t\t\tsum=sum-2;\n\t\t\t\t\t}\n\t\t\t\t\telse if(a[l1]==1&&a[l2]==1&&sum%2!=0)\n\t\t\t\t\t{\n\t\t\t\t\t\tchar ac =(char) (65+l1);\n\t\t\t\t\t\t\tSystem.out.print(\" \"+ac);\n\t\t\t\t\t\ta[l1]--;\n\t\t\t\t\t\tsum=sum-1;\n\t\t\t\t\t}\n\t\t\t\t\telse if((a[l1]==1)&&(a[l2]==1)&&sum%2==0)\n\t\t\t\t\t{\n\t\t\t\t\t\tchar ac =(char) (65+l1);\n\t\t\t\t\t\tchar b =(char) (65+l2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tSystem.out.print(\" \"+b+ac);\n\t\t\t\t\t\ta[l1]--;\n\t\t\t\t\t\ta[l2]--;\n\t\t\t\t\t\tsum=sum-2;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse if( a[l1]-2>=1)\n\t\t\t\t\t{\t\n\t\t\t\t\t\tchar ac =(char) (65+l1);\n\t\t\t\t\t\tSystem.out.print(\" \"+ac+ac);\n\t\t\t\t\t\ta[l1]=a[l1]-2;\n\t\t\t\t\t\tsum=sum-2;\n\t\t\t\t\t}\n\t\t\t\t\telse if(a[l1]==2)\n\t\t\t\t\t{\n\t\t\t\t\t\t\tchar ac =(char) (65+l1);\n\t\t\t\t\t\t\tSystem.out.print(\" \"+ac);\n\t\t\t\t\t\t\tsum=sum-1;\n\t\t\t\t\t\t\ta[l1]--;\n\t\t\t\t\t}\n\n\t\t\t\t\t\n}\n\t\t\t\tSystem.out.println();\n\n\t\t\t\t}\n\t\t}\n\t}\n", "idx": "8778"}
{"func": "package googlejam8.p782;\nimport java.util.Scanner;\n\n\n/**\n *\n * @author edisonarango\n */\npublic class A {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String[] l = {\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\n        int T = in.nextInt();\n        for (int i = 0; i < T; i++) {\n            System.out.printf(\"Case #%d: \",i+1);\n            int N = in.nextInt();\n\t\t\tint[] array = new int[N];\n\t\t\tfor (int i1 = 0; i1 < N; i1++) {\n\t\t\t    array[i1] = in.nextInt();\n\t\t\t}\n            int[] sen = array;\n            int sum = 0;\n            for (int j = 0; j < N; j++) {\n                sum += sen[j];\n            }\n            while(sum > 0){\n                if (sum > 2 && sum % 2 == 0){\n                    int conteo = 0;\n                    for (int j = 0; j < N; j++) {\n                        if(sen[j] == sum/2){\n                            conteo++;\n                        }\n                    }\n                    if (conteo == 2){\n                        for (int j = 0; j < N; j++) {\n                            if(sen[j] == sum/2){\n                                sen[j]--;\n                                System.out.print(l[j]);\n                            }\n                        }\n                        sum = sum - 2;\n                        System.out.print(\" \");\n                        continue;\n                    }\n                }\n                if(sum == 2){\n                    for (int j = 0; j < N; j++) {\n                        if(sen[j]>0) {\n                            System.out.print(l[j]);\n                            sen[j]--;\n                        }\n                    }\n                    sum = sum - 2;\n                    System.out.print(\" \");\n                }\n                else{\n                    int mayor1 = Integer.MIN_VALUE;\n\t\t\t\t\tint index = 0;\n\t\t\t\t\tfor (int i1 = 0; i1 < sen.length; i1++) {\n\t\t\t\t\t    if(sen[i1] > mayor1){\n\t\t\t\t\t        mayor1 = sen[i1];\n\t\t\t\t\t        index = i1;\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\tint mayor = index;\n                    System.out.print(l[mayor]+\" \");\n                    sen[mayor]--;\n                    sum--;\n                }\n                for (int j = 0; j < N; j++) {\n                    double p = 0;\n                    if(sum != 0){\n                        p = 100*sen[j]/sum;\n                    }\n                    if(p > 50) System.out.println(\"ERROOOOOOOOOR\");\n                }\n            }\n            System.out.println();\n        }\n    }\n    \n}\n", "idx": "8782"}
{"func": "package googlejam8.p787;\nimport java.util.Scanner;\nimport java.util.stream.IntStream;\n\npublic class ProblemA {\n\n    public static void main(String args[]) {\n        Scanner in = new Scanner(System.in);\n        int T = Integer.parseInt(in.nextLine());\n\n        for (long i = 1; i <= T; i++) {\n            int N = Integer.parseInt(in.nextLine());\n            int[] p = new int[N];\n            for (int j = 0; j < N; j++) {\n                p[j] = in.nextInt();\n            }\n\n            in.nextLine();\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\twhile (true) {\n\t\t\t    int[] sortedIndices = IntStream.range(0, p.length)\n\t\t\t            .boxed().sorted((i1, j) -> -Integer.compare(p[i1], p[j]))\n\t\t\t            .mapToInt(ele -> ele).toArray();\n\t\t\t\n\t\t\t    int ssum = IntStream.of(p).sum();\n\t\t\t    int first = p[sortedIndices[0]];\n\t\t\t    int second = p.length >= 2 ? p[sortedIndices[1]] : 0;\n\t\t\t    int third = p.length >= 3 ? p[sortedIndices[2]] : 0;\n\t\t\t\n\t\t\t    if (first == 0) {\n\t\t\t        break;\n\t\t\t    }\n\t\t\t\n\t\t\t    sb.append((char) ('A' + sortedIndices[0]));\n\t\t\t    p[sortedIndices[0]] = p[sortedIndices[0]] - 1;\n\t\t\t    if (first == second && (2 * third <= ssum - 2)) {\n\t\t\t        sb.append((char) ('A' + sortedIndices[1]));\n\t\t\t        p[sortedIndices[1]] = p[sortedIndices[1]] - 1;\n\t\t\t    }\n\t\t\t\n\t\t\t    if (IntStream.of(p).anyMatch(x -> x > 0)) {\n\t\t\t        sb.append(\" \");\n\t\t\t    }\n\t\t\t\n\t\t\t    int max = 0, sum = 0;\n\t\t\t    for (int i2 = 0; i2 < p.length; i2++) {\n\t\t\t        sum += p[i2];\n\t\t\t        if (p[i2] > max) {\n\t\t\t            max = p[i2];\n\t\t\t        }\n\t\t\t    }\n\t\t\t\n\t\t\t    if (max * 2 > sum) {\n\t\t\t        throw new RuntimeException(\"fail\");\n\t\t\t    }\n\t\t\t}\n\n            String answer = sb.toString();\n\n            System.out.printf(\"Case #%d: %s%n\", i, answer);\n        }\n\n        in.close();\n    }\n}\n", "idx": "8787"}
{"func": "package googlejam8.p792;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.Map.Entry;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\r\n\tstatic String aString = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\tstatic int n;\r\n\tstatic HashMap<Character,Integer> aList;\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\t//File aFile = new File(\"data.txt\");\r\n\t\tScanner s = new Scanner(System.in);\r\n\t\tint numIter = s.nextInt();\r\n\t\tfor(int i = 0; i<numIter;i++)\r\n\t\t{\r\n\t\t\tn = s.nextInt();\r\n\t\t\taList = new HashMap<Character,Integer>();\r\n\t\t\tfor(int j = 0;j<n;j++)\r\n\t\t\t\taList.put(aString.charAt(j),s.nextInt());\r\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \": \");\r\n\t\t\tint count = 0;\n\t\t\tint count2 = 0;\n\t\t\tboolean flag = false;\n\t\t\twhile(Collections.max(aList.values())!=0){\n\t\t\t\tint maxValueInMap=(Collections.max(aList.values()));\n\t\t\t\tint tempCount = 0;\n\t\t\t\tfor (Entry<Character, Integer> entry : aList.entrySet()) {\n\t\t\t        if (entry.getValue()==maxValueInMap)\n\t\t\t            tempCount++;\n\t\t\t    }\n\t\t\t\tif(tempCount%2==0)\n\t\t\t\t\tcount = 2;\n\t\t\t\telse\n\t\t\t\t\tcount = 1;\n\t\t\t\tcount2 = 0;\n\t\t\t\tfor (Entry<Character, Integer> entry : aList.entrySet()) {\n\t\t\t        if (entry.getValue()==maxValueInMap){\n\t\t\t            count2++;\n\t\t\t            System.out.print(entry.getKey());\n\t\t\t            aList.replace(entry.getKey(), entry.getValue()-1);\n\t\t\t        }\n\t\t\t        if(count==count2)\n\t\t\t        \tbreak;\n\t\t\t    }\n\t\t\t\tif(Collections.max(aList.values())!=0)\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t}\r\n\t\t\tif(i+1 != numIter)\r\n\t\t\t\tSystem.out.println(\"\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "8792"}
{"func": "package googlejam8.p804;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class small {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner in = new Scanner(new File(\"A-large.in\"));\r\n\t\tPrintWriter out = new PrintWriter(\"large_output.txt\");\r\n\t\t// Scanner in = new Scanner(new File(\"large_input.txt\"));\r\n\t\t// PrintWriter out=new PrintWriter(\"large_output.txt\");\r\n\t\tint n = in.nextInt(); // Scanner has functions to read ints, longs,\r\n\t\t\t\t\t\t\t\t// strings, chars, etc.\r\n\t\tint m = -1;// answer\r\n\t\tint party = m;\r\n\t\tint max = 0;\r\n\t\tint maxid =0;\r\n\t\tint max2 = 0;\r\n\t\tint max2id =0;\r\n\t\tint temp = 0;\r\n\t\tint sum = 0;\r\n\t\tString ans = \"\";\r\n\t\tfor (int i = 1; i <= n + 1; i++) {\r\n\t\t\tif (in.hasNext()) {\r\n\t\t\t\t// each case\r\n\t\t\t\tm = in.nextInt();\r\n\t\t\t\tparty = m;\r\n\t\t\t\tsum = 0;\r\n\t\t\t\tint arrParty[] = new int[m];\r\n\t\t\t\tfor (int j = 0; j < party; j++) {\r\n\t\t\t\t\tarrParty[j] = in.nextInt();\r\n\t\t\t\t\tsum = sum + arrParty[j];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhile (sum > 3) {\r\n\t\t\t\t\tmax = 0;\r\n\r\n\t\t\t\t\tfor (int j = 0; j < party; j++) {\r\n\t\t\t\t\t\tif (max < arrParty[j]) {\r\n\t\t\t\t\t\t\tmax = arrParty[j];\r\n\t\t\t\t\t\t\tmaxid = j;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\r\n\t\t\t\t\tans = ans + (char) (maxid + 'A');\r\n\r\n\t\t\t\t\tarrParty[maxid]--;\r\n\t\t\t\t\tsum--;\r\n\t\t\t\t\tmax = 0;\r\n\r\n\t\t\t\t\tfor (int j = 0; j < party; j++) {\r\n\t\t\t\t\t\tif (max < arrParty[j]) {\r\n\t\t\t\t\t\t\tmax = arrParty[j];\r\n\t\t\t\t\t\t\tmaxid = j;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tans = ans + (char) (maxid + 'A');\r\n\r\n\t\t\t\t\tarrParty[maxid]--;\r\n\t\t\t\t\tsum--;\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t\tans=ans+\" \";\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif(sum==3)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (int j = 0; j < party; j++) {\r\n\t\t\t\t\t\tif (max < arrParty[j]) {\r\n\t\t\t\t\t\t\tmax = arrParty[j];\r\n\t\t\t\t\t\t\tmaxid = j;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tans = ans + (char) (maxid + 'A');\r\n\r\n\t\t\t\t\tarrParty[maxid]--;\r\n\t\t\t\t\tsum--;\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t\tans=ans+\" \";\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(sum<=2){\r\n\t\t\t\tfor(int j=0;j<party;j++){\r\n\t\t\t\t\tif(arrParty[j]!=0){\r\n\t\t\t\t\t\tmaxid=j;\r\n\t\t\t\t\tbreak;}\r\n//\t\t\t\t\tSystem.out.println(i+\"\"+j);\r\n\t\t\t\t}\r\n\t\t\t\tfor(int j=party-1;j>0;j--){\r\n\t\t\t\t\tif(arrParty[j]!=0){\r\n\t\t\t\t\t\tmax2id=j;\r\n\t\t\t\t\tbreak;}\r\n//\t\t\t\t\tSystem.out.println(i+\"\"+j);\r\n\t\t\t\t}\r\n\t\t\t\tif (maxid==max2id) ans=ans+(char) (maxid + 'A');\r\n\t\t\t\tif (maxid!=max2id) ans=ans+(char) (maxid + 'A')+(char) (max2id + 'A');}\r\n\t\t\t\t\r\n\t\t\t\tif (m != -1)\r\n\t\t\t\t\tout.println(\"Case #\" + i + \": \" + ans);\r\n\r\n\t\t\t\telse {\r\n\t\t\t\t\tout.println(\"Case #\" + i + \": \" + \"Wrong Input\");\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tans=\"\";\r\n\t\t\t\t// each case closed\r\n\r\n\t\t\t}\r\n\t\t\t// System.out.println(i);//test\r\n\t\t}\r\n\t\tin.close();\r\n\t\tout.close();\r\n\r\n\t}\r\n}", "idx": "8804"}
{"func": "package googlejam8.p808;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class SenateEvacuation {\n\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tScanner input=new Scanner(new File(\"Input.in\"));\n\t\tPrintWriter output=new PrintWriter(\"Output.out\");\n\t\tint testCase,totalCases;\n\t\ttotalCases=input.nextInt();\n\t\tfor(testCase=1;testCase<=totalCases;testCase++)\n\t\t{\n\t\t\tint N=input.nextInt();\n\t\t\tint[] P=new int[N];\n\t\t\tfor(int i=0;i<N;i++)\n\t\t\t{\n\t\t\t\tP[i]=input.nextInt();\n\t\t\t}\n\t\t\tString result=\"\";\n\t\t\tint resultIndex=0;\n\t\t\tfor(int i1=0;i1<P.length;i1++)\n\t\t\t{\n\t\t\t\tif(P[i1]>P[resultIndex])\n\t\t\t\t\tresultIndex=i1;\n\t\t\t}\n\t\t\tint firstLargestIndex=resultIndex;\n\t\t\tint resultIndex1=0;\n\t\t\tif(firstLargestIndex==0)\n\t\t\t\tresultIndex1=1;\n\t\t\tfor(int i1=0;i1<P.length;i1++)\n\t\t\t{\n\t\t\t\tif(i1==firstLargestIndex)\n\t\t\t\t\tcontinue;\n\t\t\t\tif(P[i1]>P[resultIndex1])\n\t\t\t\t\tresultIndex1=i1;\n\t\t\t}\n\t\t\tint secondLargestIndex=resultIndex1;\n\t\t\t//System.out.println(\"Largest \"+firstLargestIndex+\" \"+secondLargestIndex);\n\t\t\twhile(P[firstLargestIndex]-P[secondLargestIndex]>0)\n\t\t\t{\n\t\t\t\tif(P[firstLargestIndex]-P[secondLargestIndex]>1)\n\t\t\t\t{\n\t\t\t\t\tresult+=(char)(65+firstLargestIndex)+\"\"+(char)(65+firstLargestIndex)+\" \";\n\t\t\t\t\tP[firstLargestIndex]-=2;\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t{\n\t\t\t\t\tresult+=(char)(65+firstLargestIndex)+\" \";\n\t\t\t\t\tP[firstLargestIndex]-=1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tfor(int i=0;i<P.length;i++)\n\t\t\t{\n\t\t\t\tif(i==firstLargestIndex || i== secondLargestIndex)\n\t\t\t\t\tcontinue;\n\t\t\t\twhile(P[i]>0)\n\t\t\t\t{\n\t\t\t\t\tif(P[i]-2>=0)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult+=(char)(65+i)+\"\"+(char)(65+i)+\" \";\n\t\t\t\t\t\tP[i]-=2;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult+=(char)(65+i)+\" \";\n\t\t\t\t\t\tP[i]-=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile(P[firstLargestIndex]>0)\n\t\t\t{\n\t\t\t\tresult+=(char)(65+firstLargestIndex)+\"\"+(char)(65+secondLargestIndex)+\" \";\n\t\t\t\tP[firstLargestIndex]--;\n\t\t\t}\n\t\t\tString solution=result;\n\t\t\tSystem.out.println(\"Case #\"+testCase+\": \"+solution);\n\t\t\toutput.println(\"Case #\"+testCase+\": \"+solution);\n\t\t}\n\n\t\toutput.flush();\n\t}\n\n}\n", "idx": "8808"}
{"func": "package googlejam8.p809;\nimport java.util.*;\nimport java.io.*;\n\nclass Solution implements Comparable<Solution>\n{\n\tstatic String filename= \"output.txt\";\n  char alpha;\n  int no;\n\n  Solution(char a,int k)\n  {\n    alpha=a;\n    no=k;\n  }\n\n  @Override\n    public int compareTo(Solution otherRequest)\n    {\n            return Integer.compare(no, otherRequest.no);\n    } \n\n\n\n\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner in=new Scanner(System.in);\n       int t=in.nextInt();\n       for(int k=1;k<=t;k++)\n       {\n                  System.out.print(\"Case #\"+k+\": \");\n                  int n=in.nextInt();\n                  ArrayList<Solution> party=new ArrayList<Solution>();\n                  for(int i=0;i<n;i++)\n                  {\n                    int p=in.nextInt();\n                    party.add(new Solution((char)(i+'A'),p));\n                  }\n                  \n                    //System.out.println(party.get(n-1).alpha);\n                    Collections.sort(party);\n                  while(!party.isEmpty() && party.get(n-1).no!=0)\n                  {\n                        if(party.get(n-1).no==1)\n                        {\n                          for(int i=0;i<n-2;i++)\n                          {\n                            if(party.get(i).no!=0)\n                            {\n                               party.get(i).no--;\n                               System.out.print((char)party.get(i).alpha);\n                               System.out.print(\" \");\n                             }\n                          }\n                        }\n                       if(party.get(n-1).no!=0&&party.get(n-2).no!=0)\n                       {\n                        party.get(n-1).no--;\n                        party.get(n-2).no--;\n                        System.out.print((char)party.get(n-1).alpha);\n                        System.out.print((char)party.get(n-2).alpha);\n                        System.out.print(\" \");\n                       }\n                       else if(party.get(n-2).no==0)\n                       {\n                        party.get(n-1).no--;\n                        //party.get(n-2).no--;\n                        System.out.print((char)party.get(n-1).alpha);\n                        System.out.print(\" \");\n                       }\n                       Collections.sort(party);\n\n                       /*for(int i=0;i<n;i++)\n                        if(party.get(i).no!=0)break;\n                       else party.remove(i);*/\n\n                  }\n\n               System.out.println();   \n                  \n       \t\t\n       }\n    }\n }     ", "idx": "8809"}
{"func": "package googlejam8.p811;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n        int t = in.nextInt();\r\n        for (int i = 1; i <= t; ++i) {\r\n\t\t    System.out.print(\"Case #\" + i + \":\");\r\n\r\n\t\t\tTreeMap<Integer, ArrayList<Integer>> map = new TreeMap<Integer, ArrayList<Integer>>();\r\n\t\t    int n = in.nextInt();\r\n\t\t\t//int[] pList = new int[n];\r\n\t\t\tint total = 0;\r\n\t\t    for (int j = 0; j < n; ++j) {\r\n\t\t\t    //pList[j] = in.nextInt();\r\n\t\t\t\tint p = in.nextInt();\r\n\t\t\t\tArrayList<Integer> tmp = map.get(p);\r\n\t\t\t\tif (tmp == null) {\r\n\t\t\t\t    tmp = new ArrayList<Integer>();\r\n\t\t\t\t\tmap.put(p, tmp);\r\n\t\t\t\t}\r\n\t\t\t\ttmp.add(j);\r\n\t\t\t\ttotal += p;//pList[j];\r\n\t\t\t}\r\n\r\n\t\t\twhile (total != 0) {\r\n\t\t\t    Map.Entry<Integer, ArrayList<Integer>> entry = map.lastEntry();\r\n\t\t\t\tint key = entry.getKey();\r\n\t\t\t\tArrayList<Integer> value = entry.getValue();\r\n\r\n\t\t\t\tArrayList<Integer> tmp = map.get(key - 1);\r\n\t\t\t\tif (tmp == null) {\r\n\t\t\t\t    tmp = new ArrayList<Integer>();\r\n\t\t\t\t\tmap.put(key - 1, tmp);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tboolean hasSingleOne = value.size() % 2 == 1;\r\n\t\t\t\tfor (int index = 0; index < value.size(); ++index) {\r\n\t\t\t\t    System.out.print(\" \"+(char)('A' + value.get(index)));\r\n\t\t\t\t\ttmp.add(value.get(index));\r\n\t\t\t\t\ttotal--;\r\n\t\t\t\t    if (hasSingleOne) {\r\n\t\t\t\t\t\thasSingleOne = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t    index++;\r\n\t\t\t\t\t    System.out.print((char)('A' + value.get(index)));\r\n\t\t\t\t\t    tmp.add(value.get(index));\r\n\t\t\t\t\t\ttotal--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tmap.remove(key);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\t//System.out.print(convertToChar(j)+\" \"+pList[j]);\r\n\r\n\t\t\tSystem.out.print(\"\\n\");\r\n        }\r\n    }\r\n}\r\n", "idx": "8811"}
{"func": "package googlejam8.p812;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Comparator;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Senate\r\n{\r\n\tprivate static final String PROBLEM_NAME = \"Senate\";\r\n\tprivate static final String PATH = \"I:/EclipseWorkspace/CodeJam2016/src/com/devil/one_c/\";\r\n\tprivate static PrintWriter writer;\r\n\r\n\tpublic static void main(String[] arg) throws IOException\r\n\t{\r\n\t\tBufferedReader reader = new BufferedReader(new FileReader(PATH + PROBLEM_NAME + \".in\"));\r\n\t\twriter = new PrintWriter(new BufferedWriter(new FileWriter(PATH + PROBLEM_NAME + \".out\")));\r\n\r\n\t\tint testCases = Integer.parseInt(reader.readLine()); // input testcases\r\n\r\n\t\tfor (int i = 0; i < testCases; i++)\r\n\t\t{\r\n\t\t\tint partyCount = Integer.parseInt(reader.readLine());\r\n\t\t\tint[][] dist = new int[partyCount][2];\r\n\t\t\tStringTokenizer tokenizer = new StringTokenizer(reader.readLine());\r\n\r\n\t\t\tint count = 0;\r\n\r\n\t\t\tfor (int j = 0; j < partyCount; j++)\r\n\t\t\t{\r\n\t\t\t\tdist[j][0] = Integer.parseInt(tokenizer.nextToken());\r\n\t\t\t\tdist[j][1] = j + 65; // 65 is ascii for A\r\n\t\t\t\tcount += dist[j][0];\r\n\t\t\t}\r\n\r\n\t\t\tArrays.sort(dist, comparator);\r\n\r\n\t\t\t// for (int j = 0; j < partyCount; j++)\r\n\t\t\t// {\r\n\t\t\t// System.out.println(dist[j][0] + \" \" + dist[j][1]);\r\n\t\t\t// }\r\n\r\n\t\t\tStringBuilder answer = new StringBuilder();\r\n\r\n\t\t\twhile (dist[0][0] > 0)\r\n\t\t\t{\r\n\t\t\t\tif (dist[1][0] / ((float) (count - 1)) <= 0.5)\r\n\t\t\t\t{\r\n\t\t\t\t\tanswer.append(((char) dist[0][1]) + \" \");\r\n\t\t\t\t\tdist[0][0]--;\r\n\t\t\t\t\tcount -= 1;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tanswer.append(((char) dist[0][1]) + \"\" + ((char) dist[1][1]) + \" \");\r\n\t\t\t\t\tdist[0][0]--;\r\n\t\t\t\t\tdist[1][0]--;\r\n\t\t\t\t\tcount -= 2;\r\n\t\t\t\t}\r\n\t\t\t\tArrays.sort(dist, comparator);\r\n\t\t\t}\r\n\r\n\t\t\tanswer.deleteCharAt(answer.length() - 1);\r\n\t\t\twriter.println(\"Case #\" + (i + 1) + \": \" + answer);\r\n\r\n\t\t}\r\n\r\n\t\treader.close();\r\n\t\twriter.close();\r\n\t}\r\n\r\n\tprivate static Comparator comparator = new Comparator<int[]>()\r\n\t{\r\n\r\n\t\t@Override\r\n\t\tpublic int compare(int[] obj1, int[] obj2)\r\n\t\t{\r\n\t\t\treturn obj1[0] < obj2[0] ? 1 : obj1[0] == obj2[0] ? 0 : -1;\r\n\t\t}\r\n\t};\r\n}\r\n", "idx": "8812"}
{"func": "package googlejam8.p823;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\n\r\n/**\r\n * Created by Vo Minh Khoi, SMU, minhkhoi.vo.2013@sis.smu.edu.sg\r\n */\r\npublic class A {\r\n\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = null;\r\n        PrintWriter w = null;\r\n        try {\r\n            w = new PrintWriter(\r\n                    new BufferedWriter(\r\n                            new FileWriter(\"out-C-A.txt\", false)));\r\n            sc = new Scanner(new File(\"A-large.in\"));\r\n//             sc = new Scanner(\"4\\n\" +\r\n//                     \"2\\n\" +\r\n//                     \"2 2\\n\" +\r\n//                     \"3\\n\" +\r\n//                     \"3 2 2\\n\" +\r\n//                     \"3\\n\" +\r\n//                     \"1 1 2\\n\" +\r\n//                     \"3\\n\" +\r\n//                     \"2 3 1\"\r\n//             );\r\n\r\n            sc.useDelimiter(\" |\\n\");\r\n\r\n            int T = sc.nextInt();\r\n            for (int z = 0; z < T; z++) {\r\n                N = sc.nextInt();\r\n                Ns = new int[N];\r\n\r\n                for(int i =0;i<N;i++){\r\n                    Ns[i] = sc.nextInt();\r\n                }\n\t\t\t\tString res = \"\";\n\t\t\t\t        HashMap<Integer,Integer> map = new HashMap<>();\n\t\t\t\t        int count = 0;\n\t\t\t\t        for(int i =0;i<N;i++){\n\t\t\t\t            map.put(i,Ns[i]);\n\t\t\t\t            count += Ns[i];\n\t\t\t\t        }\n\t\t\t\t\n\t\t\t\t//        System.out.println(count);\n\t\t\t\t        while(true){\n\t\t\t\t            int maxValue = Collections.max(map.values());\n\t\t\t\t\n\t\t\t\t            if(count > 0 && ((double)maxValue/count) > 0.5){\n\t\t\t\t                System.out.println(\"bingo!\");\n\t\t\t\t                System.out.println(((double)maxValue/count));\n\t\t\t\t                System.out.println(count);\n\t\t\t\t            }\n\t\t\t\t\n\t\t\t\t            if(maxValue == 0) break;\n\t\t\t\t\n\t\t\t\t            int key1 = 0;\n\t\t\t\t            int key2 = 0;\n\t\t\t\t            int co = 0;\n\t\t\t\t            for(Map.Entry<Integer,Integer> en : map.entrySet()){\n\t\t\t\t                if(en.getValue() == maxValue){\n\t\t\t\t                    co++;\n\t\t\t\t                    if(co == 1) key1 = en.getKey();\n\t\t\t\t                    if(co == 2) {\n\t\t\t\t                        key2 = en.getKey();\n\t\t\t\t                        break;\n\t\t\t\t                    }\n\t\t\t\t                }\n\t\t\t\t            }\n\t\t\t\t\n\t\t\t\t            if(count  == 3) {\n\t\t\t\t                char c1 = (char)(key1 + A);\n\t\t\t\t\t\t\t\tres += String.valueOf(c1) + \" \";\n\t\t\t\t                map.put(key1, map.get(key1) - 1);\n\t\t\t\t                count --;\n\t\t\t\t                continue;\n\t\t\t\t            }\n\t\t\t\t\n\t\t\t\t            if(co == 1){\n\t\t\t\t                HashMap<Integer,Integer> map1 = new HashMap<>(map);\n\t\t\t\t                map1.remove(key1);\n\t\t\t\t                int nextMaxValue = (Integer)Collections.max(map1.values());\n\t\t\t\t                int time = maxValue - nextMaxValue;\n\t\t\t\t\n\t\t\t\t                while(time > 0){\n\t\t\t\t                    if(time == 1) {\n\t\t\t\t                        char c1 = (char)(key1 + A);\n\t\t\t\t\t\t\t\t\t\tres += String.valueOf(c1) + \" \";\n\t\t\t\t                        map.put(key1,map.get(key1) - 1);\n\t\t\t\t                        time--;\n\t\t\t\t                        count--;\n\t\t\t\t                    }\n\t\t\t\t                    else {\n\t\t\t\t                        char c1 = (char)(key1 + A);\n\t\t\t\t\t\t\t\t\t\tchar c2 = (char)(key1 + A);\n\t\t\t\t\t\t\t\t\t\tres+= String.valueOf(c1) + String.valueOf(c2) + \" \";\n\t\t\t\t                        map.put(key1,map.get(key1) - 2);\n\t\t\t\t                        time -= 2;\n\t\t\t\t                        count-= 2;\n\t\t\t\t                    }\n\t\t\t\t\n\t\t\t\t                }\n\t\t\t\t            }else{\n\t\t\t\t                char c1 = (char)(key1 + A);\n\t\t\t\t\t\t\t\tchar c2 = (char)(key2 + A);\n\t\t\t\t\t\t\t\tres += String.valueOf(c1) + String.valueOf(c2) + \" \";\n\t\t\t\t                map.put(key1,map.get(key1) - 1);\n\t\t\t\t\n\t\t\t\t                map.put(key2,map.get(key2) - 1);\n\t\t\t\t                count-=2;\n\t\t\t\t            }\n\t\t\t\t        }\r\n\r\n\r\n                ////////////////////////////////////////////////////\r\n                String ress = res.substring(0,res.length()-1);\r\n                System.out.println(\"Case #\" + (z + 1) + \": \" + ress);\r\n                w.println(\"Case #\" + (z + 1) + \": \" + ress);\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            sc.close();\r\n            w.close();\r\n        }\r\n    }\r\n\r\n    ///////////variables\r\n    static int N;\r\n    static int[] Ns;\r\n\r\n    static char A = 'A';\r\n\r\n}\r\n", "idx": "8823"}
{"func": "package googlejam8.p824;\n\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class HelloWorld {\n\tprivate static String inputFileName = \"/Users/Combo/Downloads/A-large.in.txt\";\n\tprivate static String outputFileName = \"/Users/Combo/Downloads/output1C1large.txt\";\n\tprivate static Charset charset = Charset.forName(\"UTF-8\");\n\n\tpublic static void main(String[] args) {\n\t\tList<String> fileContent = null;\n\t\ttry {\n\t\t\tfileContent = Files.readAllLines(Paths.get(inputFileName), charset);\n\t\t} catch (IOException e1) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te1.printStackTrace();\n\t\t}\n\t\tint noOfCase = Integer.parseInt(fileContent.get(0));\n\n\t\tList<String> outputLines = new ArrayList<String>();\n\t\tPath outputFiles = Paths.get(outputFileName);\n\n\t\tint currentReadingLine = 0;\n\t\t\n\t\tfor (int i = 0; i < noOfCase; i++) {\n\t\t\tcurrentReadingLine++;\n\t\t\tint noOfParties = Integer.parseInt(fileContent.get(currentReadingLine));\n\t\t\tcurrentReadingLine++;\n\t\t\tString partiesSize[] = ((String) fileContent.get(currentReadingLine)).split(\" \");\n\t\t\t\n\t\t\tint totalNoOfSenator = 0;\n\t\t\t\n\t\t\tint partiesSizeInt[] = new int[noOfParties];\n\t\t\tfor (int j=0;j<noOfParties;j++) {\n\t\t\t\tint partySize = Integer.parseInt(partiesSize[j]);\n\t\t\t\tpartiesSizeInt[j] = partySize;\n\t\t\t\ttotalNoOfSenator += partySize;\n\t\t\t}\n\t\t\t\n\t\t\tint counter=0;\n\t\t\tStringBuffer evacuationFlow = new StringBuffer(); \n\n\t\t\twhile (totalNoOfSenator >0) {\n\t\t\t\tint maxParty = -1;\n\t\t\t\tint maxPartyPerson =0;\n\t\t\t\tfor (int j=0;j<noOfParties;j++) {\n\t\t\t\t\tif (partiesSizeInt[j]> maxPartyPerson) {\n\t\t\t\t\t\tmaxParty=j;\n\t\t\t\t\t\tmaxPartyPerson = partiesSizeInt[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (maxParty!=-1) {\n\t\t\t\t\tchar senator = (char) (maxParty+65);\n\t\t\t\t\tpartiesSizeInt[maxParty]= partiesSizeInt[maxParty]-1;\n\t\t\t\t\ttotalNoOfSenator--;\n\t\t\t\t\tboolean overRatio = false;\n\t\t\t\t\tif (totalNoOfSenator>=1) {\n\t\t\t\t\t\tfor (int j=0;j<noOfParties;j++) {\n\t\t\t\t\t\t\tif ((partiesSizeInt[j]/totalNoOfSenator)>0.5) {\n\t\t\t\t\t\t\t\toverRatio = true;\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t\t\n\t\t\t\t\tif (overRatio) {\n\t\t\t\t\t\tif (counter%2!=0) {\n\t\t\t\t\t\t\tevacuationFlow.append(' ');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tevacuationFlow.append(senator);\n\t\t\t\t\t\tcounter=0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tevacuationFlow.append(senator);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcounter++;\n\t\t\t\t\tif (counter%2==0) {\n\t\t\t\t\t\tevacuationFlow.append(' ');\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n \t\t\t\n\t\t\tString answer = \"Case #\"+(i+1)+\": \"+ evacuationFlow.toString().trim();\n\t\t\tSystem.out.println(answer);\n\t\t\toutputLines.add(answer);\n\t\t}\n\t\ttry {\n\t\t\tFiles.write(outputFiles, outputLines, charset);\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n\t\n\n}\n", "idx": "8824"}
{"func": "package googlejam8.p825;\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t//FileInputStream fi = new FileInputStream(\"small.in\");\r\n\t\t//FileOutputStream fo = new FileOutputStream(\"small.out\");\r\n\r\n\t\tFileInputStream fi = new FileInputStream(\"large.in\");\r\n\t\tFileOutputStream fo = new FileOutputStream(\"large.out\");\r\n\r\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fo));\r\n\r\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(fi)));\r\n\t\tint cases = in.nextInt();\r\n\t\tfor (int i = 1; i <= cases; ++i) {\r\n\t\t\tSystem.out.print(\"Case #\" + i + \":\");\r\n\t\t\tbw.write(\"Case #\" + i + \":\");\r\n\r\n\t\t\tint N = in.nextInt();\r\n\t\t\tint[]P = new int[N];\r\n\r\n\t\t\tint M = 0;\r\n\t\t\tfor (int j = 0; j < N; ++j) {\r\n\t\t    \tP[j] = in.nextInt();\r\n\t\t    \tM += P[j];\r\n\t\t\t}\r\n\r\n\t\t\twhile(true) {\r\n\t\t\t\tint max = -1;\r\n\t\t\t\tint imax = -1;\r\n\t\t\t\tfor (int j = 0; j < N; ++j) {\r\n\t\t\t\t\tif(P[j] != 0 && P[j] > max) {\r\n\t\t\t\t\t\tmax = P[j];\r\n\t\t\t\t\t\timax = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(max == -1)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t--P[imax];\r\n\t\t\t\t--M;\r\n\t\t\t\tchar x = (char)('A' + imax);\r\n\r\n\t\t\t\tfor (int j = 0; j < N; ++j)\r\n\t\t\t\t\tif(P[j] > M/2) {\r\n//\t\t\t\t\t\tSystem.out.print(\"XXXX\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tSystem.out.print(\" \" + x);\r\n\t\t\t\tbw.write(\" \" + x);\r\n\r\n\t\t\t\tif(M != 2) {\r\n\t\t\t\t\tmax = -1;\r\n\t\t\t\t\timax = -1;\r\n\t\t\t\t\tfor (int j = 0; j < N; ++j) {\r\n\t\t\t\t\t\tif(P[j] != 0 && P[j] > max) {\r\n\t\t\t\t\t\t\tmax = P[j];\r\n\t\t\t\t\t\t\timax = j;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(max == -1)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t--P[imax];\r\n\t\t\t\t\t--M;\r\n\t\t\t\t\tchar x2 = (char)('A' + imax);\r\n\t\r\n\t\t\t\t\tSystem.out.print(x2);\r\n\t\t\t\t\tbw.write(\"\" + x2);\r\n\t\r\n\t\t\t\t\tfor (int j = 0; j < N; ++j)\r\n\t\t\t\t\t\tif(P[j] > M/2)\r\n\t\t\t\t\t\t\tSystem.out.print(\"YYYY\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.println(\"\");\r\n\t\t\tbw.write(\"\\n\");\r\n\t\t}\r\n\t\tbw.close();\r\n\t}\r\n}", "idx": "8825"}
{"func": "package googlejam8.p826;\n\r\n\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\nimport java.util.stream.IntStream;\r\n\r\npublic class A {\r\n\tpublic static void main(String args[]) throws Exception {\r\n//\t    File file = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\small.in\");\r\n//\t    File outFile = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\small.out\");\r\n//\t    File file = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\A-small-attempt1.in\");\r\n//\t    File outFile = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\A-small-attempt1.out\");\r\n\t    File file = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\A-large.in\");\r\n\t    File outFile = new File(\"C:\\\\Users\\\\oleksii\\\\workspace\\\\GCodeJam\\\\src\\\\A-large.out\");\r\n\t    BufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\r\n    \tScanner scanner = new Scanner(file);\r\n\t\tint T = Integer.parseInt(scanner.nextLine()), count = 0, N = 0, max = 0, prevMax = 0, idx = 0;\r\n\t\tint[] parties;\r\n\t\tString alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\t\tStringBuilder output;\r\n\t\tchar one, two;\r\n\t\tboolean stop = false;\r\n\t\tfor(int t = 1; t <= T; t++) {\r\n\t\t\toutput = new StringBuilder();\r\n\t\t\tstop = false;\r\n\t\t\tN = Integer.parseInt(scanner.nextLine());\r\n\t\t\tparties = new int[N];\r\n\t\t\tfor(int n = 0; n < N; n++) {\r\n\t\t\t\tparties[n] = scanner.nextInt();\r\n\t\t\t}\r\n\t\t\twhile(!stop) {\r\n\t\t\t\tmax = 0;\r\n\t\t\t\tcount = 0;\r\n\t\t\t\tprevMax = -1;\r\n\t\t\t\tidx = -1;\r\n\t\t\t\tfor (int i = 0; i < N; i++) {\r\n\t\t\t\t\tif (max < parties[i]) {\r\n\t\t\t\t\t\tprevMax = idx;\r\n\t\t\t\t\t\tmax = parties[i];\r\n\t\t\t\t\t\tidx = i;\r\n\t\t\t\t\t\tcount = 1;\r\n\t\t\t\t\t} else if (max == parties[i]) {\r\n\t\t\t\t\t\tprevMax = i;\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (max == 0) {\r\n\t\t\t\t\tstop = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (max == 1 && prevMax >= 0 && parties[prevMax] == 1) {\r\n\t\t\t\t\toutput.append(alphabet.charAt(idx));\r\n\t\t\t\t\tparties[idx]--;\r\n\t\t\t\t\tif (count != 3) {\r\n\t\t\t\t\t\toutput.append(alphabet.charAt(prevMax));\r\n\t\t\t\t\t\tparties[prevMax]--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutput.append(\" \");\r\n\t\t\t\t} else if (max <= 2) {\r\n\t\t\t\t\toutput.append(alphabet.charAt(idx));\r\n\t\t\t\t\tparties[idx]--;\r\n\t\t\t\t\tif (prevMax >= 0 && parties[prevMax] > 1) {\r\n\t\t\t\t\t\toutput.append(alphabet.charAt(prevMax));\r\n\t\t\t\t\t\tparties[prevMax]--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutput.append(\" \");\r\n\t\t\t\t} else if (prevMax >= 0 && max == parties[prevMax]) {\r\n\t\t\t\t\toutput.append(alphabet.charAt(idx));\r\n\t\t\t\t\tparties[idx]--;\r\n\t\t\t\t\toutput.append(alphabet.charAt(prevMax));\r\n\t\t\t\t\tparties[prevMax]--;\r\n\t\t\t\t\toutput.append(\" \");\r\n\t\t\t\t} else {\r\n\t\t\t\t\toutput.append(alphabet.charAt(idx));\r\n\t\t\t\t\toutput.append(alphabet.charAt(idx));\r\n\t\t\t\t\tparties[idx] -= 2;\r\n\t\t\t\t\toutput.append(\" \");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(output);\r\n\t\t    bw.write(\"Case #\"+t+\": \"+output.toString());\r\n\t\t    if (t != T) {\r\n\t\t    \tbw.write(\"\\n\");\r\n\t\t\t\tscanner.nextLine();\r\n\t\t\t}\r\n\t\t}\r\n\t\tbw.close();\r\n\t\tSystem.out.println(\"Done!\");\r\n\t}\r\n}\r\n", "idx": "8826"}
{"func": "package googlejam8.p831;\nimport java.io.*;\nimport java.util.*;\n\npublic class A {\n\n    static Scanner input = null;\n    static BufferedWriter writer = null;\n\n    public static void main(String[] args) {\n        try {\n            input = new Scanner(new FileReader(\"A-large.in\"));\n            writer = new BufferedWriter(new FileWriter(\"A-large.out\"));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++)\n        {\n            Long N = input.nextLong();\n            HashMap<Character, Integer> parties = new LinkedHashMap<>();\n            char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n            for (int j = 0; j < N; j++)\n            {\n                parties.put(Character.toUpperCase(alphabet[j]), input.nextInt());\n            }\n\n            /**\n             * Amax-1 <= totalj/2\n             *\n             * Max+SecondMax\n             */\n\n            try {\n\t\t\t    writer.write(\"Case #\" + (n + 1) + \": \");\n\t\t\t    writer.flush();\n\t\t\t} catch (IOException e1) {\n\t\t\t    e1.printStackTrace();\n\t\t\t}\n            while (parties.values().stream().anyMatch(i -> i!=0)) {\n                Map.Entry<Character, Integer> majorParty = Collections.max(parties.entrySet(),\n                                                                      (entry1, entry2) -> entry1.getValue() >= entry2.getValue()\n                                                                          ? 1 : -1);\n\n                int total = parties.values().stream().mapToInt(Number::intValue).sum() - 1;\n                parties.put(majorParty.getKey(), majorParty.getValue() - 1);\n                Map.Entry<Character, Integer> secondMajor = Collections.max(parties.entrySet(),\n                                                                      (entry1, entry2) -> entry1.getValue() >= entry2.getValue()\n                                                                          ? 1 : -1);\n                if (secondMajor.getValue() <= total/2) {\n                    try {\n\t\t\t\t\t    writer.write(majorParty.getKey() + \" \");\n\t\t\t\t\t    writer.flush();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t    e.printStackTrace();\n\t\t\t\t\t}\n                } else {\n                    parties.put(secondMajor.getKey(), secondMajor.getValue() - 1);\n                    try {\n\t\t\t\t\t    writer.write(majorParty.getKey()+ \"\" + secondMajor.getKey()+\" \");\n\t\t\t\t\t    writer.flush();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t    e.printStackTrace();\n\t\t\t\t\t}\n                }\n            }\n            try {\n\t\t\t    writer.newLine();\n\t\t\t    writer.flush();\n\t\t\t} catch (IOException e) {\n\t\t\t    e.printStackTrace();\n\t\t\t}\n\n        }\n    }\n}\n", "idx": "8831"}
{"func": "package googlejam8.p833;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.util.ArrayList;\n\n\npublic class Main {\n\tstatic char[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n\n\tpublic static void main(String[] args) throws Exception{\n\t\tBufferedReader in = new BufferedReader(new FileReader(\"A.in\"));\n\t\tFileWriter fw = new FileWriter(\"A.out\");\n\t\tint testCaseCount = Integer.parseInt(in.readLine());\n\t\tfor(int i=0;i<testCaseCount;i++){\n\t\t\tint numberOfParties = Integer.parseInt(in.readLine());\n\t\t\tint totalNumOfSenators = 0;\n\t\t\tString senatorCountStr = in.readLine();\n\t\t\tArrayList<Integer> senetorCount = new ArrayList<Integer>();\n\n\t\t\tString[] elements = senatorCountStr.split(\"\\\\s+\");\n\t\t\tfor(int j = 0;j<elements.length;j++){\n\t\t\t\tint count = Integer.parseInt(elements[j]);\n\t\t\t\tsenetorCount.add(count);\n\t\t\t\ttotalNumOfSenators += count;\n\t\t\t}\n\t\t\tString runners = \"\";\n\n\t\t\twhile (totalNumOfSenators > 0){\n\t\t\t\tfor(int j = 0;j<2;j++){\n\t\t\t\t\tboolean done = false;\n\t\t\t\t\tfor(int k = 0;k<numberOfParties;k++){\n\t\t\t\t\t\tif(done){\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(int l = 0;l<numberOfParties;l++){\n\t\t\t\t\t\t\tif(k == l){\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tif(senetorCount.get(k) <= 0 || (totalNumOfSenators > 1 && ((1 == j && senetorCount.get(l)*2 > totalNumOfSenators-1) ||(0 == j && (senetorCount.get(l)-1)*2 > totalNumOfSenators-2)))){\n\n\t\t\t\t\t\t\t\t} else{\n\t\t\t\t\t\t\t\t\tboolean ok = true;\n\t\t\t\t\t\t\t\t\tfor(int m = 0;m<numberOfParties;m++){\n\t\t\t\t\t\t\t\t\t\tif(m == k){\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tboolean spentNext = false;\n\t\t\t\t\t\t\t\t\t\tif(totalNumOfSenators > 1){\n\t\t\t\t\t\t\t\t\t\t\tif((1 == j && senetorCount.get(m)*2 <= totalNumOfSenators-1)){\n\n\t\t\t\t\t\t\t\t\t\t\t} else if(0 == j && (!spentNext || (senetorCount.get(m))*2 <= totalNumOfSenators-1)){\n\t\t\t\t\t\t\t\t\t\t\t\tif((senetorCount.get(m))*2 <= totalNumOfSenators-1){\n\n\t\t\t\t\t\t\t\t\t\t\t\t} else if ((senetorCount.get(m)-1)*2 <= totalNumOfSenators-2){\n\t\t\t\t\t\t\t\t\t\t\t\t\tspentNext = true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t} else{\n\t\t\t\t\t\t\t\t\t\t\t\tok = false;\n\t\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(ok){\n\t\t\t\t\t\t\t\t\t\trunners += String.valueOf(alphabet[k]);\n\t\t\t\t\t\t\t\t\t\tsenetorCount.set(k, senetorCount.get(k)-1);\n\t\t\t\t\t\t\t\t\t\ttotalNumOfSenators--;\n\t\t\t\t\t\t\t\t\t\tdone = true;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!runners.isEmpty()){\n\t\t\t\t\trunners += \" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\tfw.write(\"Case #\"+(i+1)+\": \"+runners+\"\\n\");\n\n\n\t\t}\n\t\tin.close();\n\t\tfw.close();\n\t}\n\n}\n", "idx": "8833"}
{"func": "package googlejam8.p836;\nimport java.util.*;\nimport java.io.*;\n\npublic class Main \n{\n\tpublic static void main(String[] args) \n\t{\n\t    Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t    //in.useDelimiter(\"\\n\");\n\t    \n\t    int T = in.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\n\t    //in.nextLine();\n\t    \n\t    String pts = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t\n\t    int N;\n\t    int[] P;\n\t    // loop each test case\n\t\tfor (int t = 1; t <= T; ++t) \n\t\t{\n\t\t\tSystem.out.print(\"Case #\" + t + \":\");\n\t\t\tN = in.nextInt(); // Number of parties\n\t\t\tP = new int[N];\n\t\t\t// loop each party total\n\t\t\tfor (int n = 0; n < N; n++)\n\t\t\t{\n\t\t\t\tP[n] = in.nextInt();\n\t\t\t}\n\t\t\tBoolean done = false;\n\t\t\t\n\t\t\twhile (!done)\n\t\t\t{\n\t\t\t\t// find largest party\n\t\t\t\tint max1 = -1;\n\t\t\t\tint max2 = -1;\n\t\t\t\tint ind = -1;\n\t\t\t\tint ind2 = -1;\n\t\t\t\tint sum = 0; \n\t\t\t\t\n\t\t\t\t// find first largest\n\t\t\t\tfor (int n = 0; n < N; n++)\n\t\t\t\t{\n\t\t\t\t\tif (P[n] > max1) {\n\t\t\t\t\t\tmax1 = P[n];\n\t\t\t\t\t\tind = n;\n\t\t\t\t\t}\n\t\t\t\t\tsum += P[n];\n\t\t\t\t}\n\t\t\t\t// find second largest\n\t\t\t\tfor (int n = 0; n < N; n++)\n\t\t\t\t{\n\t\t\t\t\tif (n != ind && P[n] > max2) {\n\t\t\t\t\t\tmax2 = P[n];\n\t\t\t\t\t\tind2 = n;\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (sum == 0)\n\t\t\t\t{\n\t\t\t\t\tdone = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if ((sum % 2 != 0) || sum == 1)\n\t\t\t\t{\n\t\t\t\t\tP[ind]--;\n\t\t\t\t\tSystem.out.print(\" \" + pts.charAt(ind));\n\t\t\t\t}\n\t\t\t\telse if (max1 == max2)\n\t\t\t\t{\n\t\t\t\t\t// evac 2 parties\n\t\t\t\t\tP[ind]--;\n\t\t\t\t\tP[ind2]--;\n\t\t\t\t\tSystem.out.print(\" \" + pts.charAt(ind) + pts.charAt(ind2));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tP[ind] = P[ind] - 2;\n\t\t\t\t\tSystem.out.print(\" \" + pts.charAt(ind) + pts.charAt(ind));\n\t\t\t\t}\n\t\t\t\t/*\n\t\t\t\telse if (sum )\n\t\t\t\t{\t\t\t\t\t\n\t\t\t\t\tif (ind2 != -1 && P[ind] == P[ind2])\n\t\t\t\t\t{\n\t\t\t\t\t\t// evac 2 parties\n\t\t\t\t\t\tP[ind]--;\n\t\t\t\t\t\tP[ind2]--;\n\t\t\t\t\t\tSystem.out.print(\" \" + pts.charAt(ind) + pts.charAt(ind2));\n\t\t\t\t\t}\n\n\t\t\t\t}*/\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.print('\\n');\n\t\t}\n\t\tin.close();\n\t}\n}", "idx": "8836"}
{"func": "package googlejam8.p841;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.LinkedList;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t  BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t    String s;\r\n\t\t    int lineCount = 0;\r\n\t\t    int testCases = 0;\r\n\t\t    int currentTest = 1;\r\n\t\t    \r\n\t\t    String parties = \"\";\r\n\t\t    String partyMembers = \"\";\r\n\t\t\r\n\t\t    try {\r\n\t\t    \t\r\n\t\t    \t\r\n\t\t\t\twhile ((s = in.readLine()) != null && s.length() != 0)\r\n\t\t\t\t{  \t\r\n\t\t\r\n\t\t\t\t  if(lineCount == 0)\r\n\t\t\t\t  {\r\n\t\t\t\t\t  testCases = Integer.parseInt(s);\r\n\t\t\t\t  }\r\n\t\t\t\t  else\r\n\t\t\t\t  {\t  \r\n\t\t\t\t\t  \r\n\t\t\t\t\t  if(parties.equalsIgnoreCase(\"\"))\r\n\t\t\t\t\t  {\r\n\t\t\t\t\r\n\t\t\t\t\t\t  parties = s;\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t  else\r\n\t\t\t\t\t  {\r\n\t\t\t\t\t\t  if(partyMembers.equalsIgnoreCase(\"\"))\r\n\t\t\t\t\t\t  {\r\n\t\t\t\t\t\t\t  partyMembers = s;\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t  System.out.print(\"Case #\"+currentTest+\":\");\n\t\t\t\t\t\t\t  int partiesInt = Integer.parseInt(parties);\n\t\t\t\t\t\t\t  int[] partymemersInt = new int[partiesInt];\n\t\t\t\t\t\t\t  String[] partymemersString = partyMembers.split(\" \");\n\t\t\t\t\t\t\t  for(int i =0; i< partiesInt; i++)\n\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t  partymemersInt[i]= Integer.parseInt(partymemersString[i]);\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t  LinkedList<String> evacuationPlan = new LinkedList<String>();\n\t\t\t\t\t\t\t  boolean contin = true;\n\t\t\t\t\t\t\t  while(contin)\n\t\t\t\t\t\t\t  {\n\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t  int biggest=0;\n\t\t\t\t\t\t\t\t  int nextBiggest =0;\n\t\t\t\t\t\t\t\t  int biggestParty=0;\n\t\t\t\t\t\t\t\t  int nextBiggestParty =0;\n\t\t\t\t\t\t\t\t  int totalMembers = 0;\n\t\t\t\t\t\t\t\tfor(int i=0; i<partiesInt; i++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif(partymemersInt[i]>=biggest)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tnextBiggest = biggest;\n\t\t\t\t\t\t\t\t\t\tnextBiggestParty = biggestParty;\n\t\t\t\t\t\t\t\t\t\tbiggestParty = i;\n\t\t\t\t\t\t\t\t\t\tbiggest = partymemersInt[i];\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\ttotalMembers+= partymemersInt[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(biggest== nextBiggest)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(biggestParty>nextBiggestParty)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tint tmp = biggestParty;\n\t\t\t\t\t\t\t\t\t\tbiggestParty = nextBiggestParty;\n\t\t\t\t\t\t\t\t\t\tnextBiggestParty = tmp;\n\t\t\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(partymemersInt[biggestParty]==0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcontin = false;\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tint evacA=-1;\n\t\t\t\t\t\t\t\tint evacB=-1;\n\t\t\t\t\t\t\t\tif(partymemersInt[biggestParty]>0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpartymemersInt[biggestParty]--;\n\t\t\t\t\t\t\t\t\tevacA = biggestParty;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tint membersAfterEvacA =0;\n\t\t\t\t\t\t\t\tfor(int i=0;i<partymemersInt.length;i++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmembersAfterEvacA+= partymemersInt[i];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(membersAfterEvacA!=2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(partymemersInt[nextBiggestParty]>0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpartymemersInt[nextBiggestParty]--;\n\t\t\t\t\t\t\t\t\tevacB = nextBiggestParty;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif(contin)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tevacuationPlan.add( evacA+\" \"+evacB);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t  for (String string : evacuationPlan) {\n\t\t\t\t\t\t\t\tString[]paty = string.split(\" \");\n\t\t\t\t\t\t\t\tif(paty.length>0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tint patyF = Integer.parseInt(paty[0]);\n\t\t\t\t\t\t\t\t\tif(patyF>-1 && patyF<partyNames.length)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\t\t\t\tSystem.out.print(partyNames[patyF]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif(paty.length>1)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tint patyB = Integer.parseInt(paty[1]);\t\n\t\t\t\t\t\t\t\t\t\tif(patyB>-1 && patyB<partyNames.length)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tSystem.out.print(partyNames[patyB]);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t  System.out.println(\"\");\r\n\t\t\t\t\t\t\t  parties = \"\";\r\n\t\t\t\t\t\t\t  partyMembers = \"\";\r\n\t\t\t\t\t\t\t  currentTest++;\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t \r\n\t\t\t\t\t  \r\n\t\t\t\t\t  \r\n\t\t\t\t\t  \r\n\t\t\t\t  }\r\n\t\t\t\t  \r\n\t\t\t\t  lineCount++;\r\n\t\t\t\t}\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t  }\r\n\t\r\n\t  private static String[] partyNames = new String[]{\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\", \"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"};\r\n\t  \r\n\t  \r\n\r\n}\r\n", "idx": "8841"}
{"func": "package googlejam8.p845;\nimport java.util.Scanner;\r\n\r\npublic class codejam {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint tc = in.nextInt();\r\n\t\tint temp=tc;\r\n\t\twhile(tc--!=0) {\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint a[] = new int[n];\r\n\t\t\tString s = \"\";\r\n\t\t\tfor(int i=0;i<n;i++) {\r\n\t\t\t\ta[i] = in.nextInt();\r\n\t\t\t}\r\n\t\t\twhile(true) {\r\n\t\t\t\r\n\t\t\tint m1=0;int m2=-1;\r\n\t\t\tfor(int i=1;i<n;i++) {\r\n\t\t\t\tif(a[i]>a[m1]) {\r\n\t\t\t\t\tm1=i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int i=0;i<n;i++) {\r\n\t\t\t\tif(a[i]==a[m1]&&m1!=i) {\r\n\t\t\t\t\tm2=i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ts=s+(char)(65+m1);\r\n\t\t\ta[m1]--;\r\n\t\t\tint count = 0;\r\n\t\t\tfor(int i=0;i<n;i++) {\r\n\t\t\t\tif(a[i]==1) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\t\t\t\tif(a[i]!=1&&a[i]!=0) {\r\n\t\t\t\t\tcount+=3;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif(m2!=-1&&count==2) {\r\n\t\t\t\ts=s+(char)(65+m2);\r\n\t\t\t\ta[m2]--;\r\n\t\t\t}\r\n\t\t\ts=s+\" \";\r\n\t\t\tboolean flag = true;\r\n\t\t\tfor(int i=0;i<n;i++) {\r\n\t\t\t\tif(a[i]!=0) {flag = false; break;}\r\n\t\t\t}\r\n\t\t\tif(flag) break;\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+(temp-tc)+\": \"+s);\r\n\t\t}\r\n\t\tin.close();\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n", "idx": "8845"}
{"func": "package googlejam8.p847;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Scanner;\r\n\r\npublic class Round1B01 {\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(\r\n\t\t\t\tSystem.in)));\r\n\t\tint numOfTestCases = in.nextInt(); // Scanner has functions to read ints, longs,\r\n\t\t\t\t\t\t\t\t// strings, chars, etc.\r\n\t\tint testCaseNum = 1;\r\n\t\twhile(numOfTestCases!= 0){\r\n\t\t\tint numOfParties = in.nextInt();\r\n\t\t\tin.nextLine();\r\n\t\t\tString partyMembersNum = in.nextLine();\r\n\t\t\t\r\n\t\t\tString[] tokens = partyMembersNum.split(\" \");\r\n\t\t\tint[] eachPartyMemberCount = new int[numOfParties];\r\n\t\t\tString[] ResultOps = new String[100000];\r\n\t\t\tint ResultOpsIndex = 0;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tint i = 0;\r\n\t\t\tfor (String token : tokens){\r\n\t\t\t\teachPartyMemberCount[i++] = Integer.parseInt(token); \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint finish = 0;\r\n\t\t\tchar beginChar = 'A';\r\n\t\t\tString tempStr = \"\";\r\n\t\t\t//System.out.print(\"Case #\"+testCaseNum+\": \");\r\n\t\t\twhile(finish != 1){\r\n\t\t\t\tint maxLoc = 0;\r\n\t\t\t\tint maxVal = eachPartyMemberCount[maxLoc];\r\n\t\t\t\tfor(int k = 1;k<eachPartyMemberCount.length;k++){\r\n\t\t\t\t\tif(eachPartyMemberCount[k] > maxVal){\r\n\t\t\t\t\t\tmaxVal = eachPartyMemberCount[k];\r\n\t\t\t\t\t\tmaxLoc = k;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\teachPartyMemberCount[maxLoc]--;\r\n\t\t\t\t\r\n\t\t\t\t//System.out.print(Character.toString((char)(beginChar+maxLoc)));\r\n\t\t\t\t\r\n\t\t\t\tint zeroCount = 0;\r\n\t\t\t\t\r\n\t\t\t\tfor(int k = 0;k<eachPartyMemberCount.length;k++){\r\n\t\t\t\t\tif(eachPartyMemberCount[k] == 0){\r\n\t\t\t\t\t\tzeroCount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(zeroCount == numOfParties) {\r\n\t\t\t\t\ttempStr = Character.toString((char)(beginChar+maxLoc));\r\n\t\t\t\t\tResultOps[ResultOpsIndex] = tempStr;\r\n\t\t\t\t\tResultOpsIndex++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tint maxLoc1 = 0;\r\n\t\t\t\tint maxVal1 = eachPartyMemberCount[maxLoc1];\r\n\t\t\t\tfor(int k = 1;k<eachPartyMemberCount.length;k++){\r\n\t\t\t\t\tif(eachPartyMemberCount[k] > maxVal1){\r\n\t\t\t\t\t\tmaxVal1 = eachPartyMemberCount[k];\r\n\t\t\t\t\t\tmaxLoc1 = k;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\teachPartyMemberCount[maxLoc1]--;\r\n\t\t\t\t//System.out.print(Character.toString((char)(beginChar+maxLoc1)));\r\n\t\t\t\t\r\n\t\t\t\tint zeroCount1 = 0;\r\n\t\t\t\t\r\n\t\t\t\tfor(int k = 0;k<eachPartyMemberCount.length;k++){\r\n\t\t\t\t\tif(eachPartyMemberCount[k] == 0){\r\n\t\t\t\t\t\tzeroCount1++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(zeroCount1 == numOfParties) {\r\n\t\t\t\t\ttempStr = Character.toString((char)(beginChar+maxLoc)) + Character.toString((char)(beginChar+maxLoc1));\r\n\t\t\t\t\tResultOps[ResultOpsIndex] = tempStr;\r\n\t\t\t\t\tResultOpsIndex++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\ttempStr = Character.toString((char)(beginChar+maxLoc)) + Character.toString((char)(beginChar+maxLoc1));\r\n\t\t\t\t\tResultOps[ResultOpsIndex] = tempStr;\r\n\t\t\t\t\tResultOpsIndex++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t// print results\r\n\t\t\t\r\n\t\t\tSystem.out.print(\"Case #\"+testCaseNum+\": \");\r\n\t\t\tif(ResultOps[ResultOpsIndex-1].length() == 1){\r\n\t\t\t\tSystem.out.print(ResultOps[ResultOpsIndex-1]);\r\n\t\t\t\tSystem.out.print(\" \");\r\n\t\t\t\tfor(int p = 0;p<ResultOpsIndex-1;p++){\r\n\t\t\t\t\tSystem.out.print(ResultOps[p]);\r\n\t\t\t\t\tSystem.out.print(\" \");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t//System.out.print(ResultOps[ResultOpsIndex-1]);\r\n\t\t\t\t//System.out.print(\" \");\r\n\t\t\t\tfor(int p = 0;p<ResultOpsIndex;p++){\r\n\t\t\t\t\tSystem.out.print(ResultOps[p]);\r\n\t\t\t\t\tSystem.out.print(\" \");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println();\r\n\t\t\tnumOfTestCases--;\r\n\t\t\ttestCaseNum++;\r\n\t\t}\r\n\r\n\t\tin.close();\r\n\r\n\t\t// S = S.replaceFirst(\"O\", \"\");\r\n\t\t// S = S.replaceFirst(\"O\", \"\");\r\n\t\t// S = S.replaceFirst(\"O\", \"\");\r\n\r\n\t\t// removeCharAt(S, 3);\r\n\t\t// System.out.println(S+ \" \"+Slength+\" Index of Z is: \"+S.indexOf('w'));\r\n\t}\r\n}", "idx": "8847"}
{"func": "package googlejam8.p855;\n\r\n\r\nimport java.util.*;\r\n\r\npublic class Jam {\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        int x[],sum;\r\n        String gg ;\r\n        for(int i = 0;i<t;i++){\r\n            gg = \"Case #\"+(i+1)+\": \";\r\n            int n = sc.nextInt();\r\n            x = new int[n];\r\n            sum = 0;\r\n            for(int j = 0;j<n;j++){\r\n                int m = sc.nextInt();\r\n                x[j] = m;\r\n                sum+=m;\r\n            }\r\n            while(sum>0){\r\n            int max1 = 0,max2 =0, dex1 = 0,dex2 = 0;\n\t\t\t\tfor(int i1 = 0;i1<x.length;i1++){\n\t\t\t\t    if(x[i1]>=max1){\n\t\t\t\t        max2 = max1;\n\t\t\t\t        dex2 = dex1;\n\t\t\t\t        max1 = x[i1];\n\t\t\t\t        dex1 = i1;\n\t\t\t\t    }\n\t\t\t\t}int a1[];\n\t\t\t\t\n\t\t\t\ta1 = max1==max2?new int[]{max1,max2,dex1,dex2}:new int[]{max1,dex1};\n\t\t\tint a[] = a1;\r\n            if(sum==3){\r\n                  for(int k = 0;k<x.length;k++)\r\n                    if(x[k]<=a[0]&&x[k]>0&&k!=a[1]){\r\n                        x[k]--;\r\n                        gg=gg+(char)(k+65)+\" \";\r\n                        sum--;\r\n                        break;\r\n                    }\r\n            }else if(a.length!=4){\r\n                if(x[a[1]]-2!=0){\r\n                x[a[1]]-=2;\r\n                sum-=2;\r\n                gg = gg + (char)('A'+a[1])+(char)(a[1]+'A')+\" \"; \r\n                }else{\r\n                    x[a[1]]--;\r\n                sum--;\r\n                gg = gg + (char)('A'+a[1])+\" \"; \r\n                }\r\n           }else if(a.length==4){\r\n               x[a[2]]--;\r\n                x[a[3]]--;\r\n               gg = gg + (char)('A'+a[2])+(char)(a[3]+'A')+\" \"; \r\n                sum-=2;\r\n               \r\n            }\r\n                }\r\n            System.out.println(gg);\r\n        }\r\n        \r\n                }\r\n    \r\n}\r\n", "idx": "8855"}
{"func": "package googlejam8.p865;\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner scn  = new Scanner(System.in);\r\n\t\tint t = scn.nextInt();\r\n\t\t\r\n\t\t\r\n\t\tfor(int i=1;i<=t;i++){\r\n\t\t\tint n = scn.nextInt();\r\n\t\t\tArrayList<Integer> nums = new ArrayList<Integer>();\r\n\t\t\tdouble sum = 0;\r\n\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\tnums.add(scn.nextInt());\r\n\t\t\t\tsum += nums.get(j);\r\n\t\t\t}\r\n\t\t\tString plan = \"\";\r\n\t\t\twhile (sum>0) {\r\n\t\t\t\tsum = 0;\r\n\t\t\t\tint maxVal = -1;\r\n\t\t\t\tint maxLoc = -1;\r\n\t\t\t\tfor(int j=0;j<n;j++){\r\n\t\t\t\t\tif(nums.get(j) > maxVal){\r\n\t\t\t\t\t\tmaxVal = nums.get(j);\r\n\t\t\t\t\t\tmaxLoc = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsum+=nums.get(j);\r\n\t\t\t\t}\r\n\t\t\t\tif(maxVal>0){\r\n\t\t\t\t\tnums.set(maxLoc, maxVal-1);\r\n\t\t\t\t\r\n\t\t\t\t\tchar c = (char)(maxLoc + 65);\r\n\t\t\t\t\tplan += c;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tString finalPlan = \"\";\r\n\t\t\tint cnt = 0;\r\n\t\t\tfor(int j=plan.length()-1;j>=0;j--){\r\n\t\t\t\tif(cnt>0 && cnt%2==0){\r\n\t\t\t\t\tfinalPlan = \" \"+finalPlan;\r\n\t\t\t\t}\r\n\t\t\t\tfinalPlan = plan.charAt(j)+finalPlan;\r\n\t\t\t\tcnt++;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"Case #\"+i+\": \"+finalPlan);\r\n\t\t}\r\n\t\t\r\n\t\tscn.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "8865"}
{"func": "package googlejam8.p870;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class Senator {\r\n\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\t\r\n\t\tFile file = new File(\"input2\");\r\n\t\t\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(file));\r\n\t\t\r\n\t\tint tcs = Integer.parseInt(br.readLine());\r\n\t\t\r\n\t\twhile(tcs-- > 0){\r\n\t\t\t\r\n\t\t\tMap<Integer,Character> alphabets = new HashMap<Integer,Character>();\r\n\t\t\t\r\n\t\t\talphabets.put(1,'A');\r\n\t\t\talphabets.put(2,'B');\r\n\t\t\talphabets.put(3,'C');\r\n\t\t\talphabets.put(4,'D');\r\n\t\t\talphabets.put(5,'E');\r\n\t\t\talphabets.put(6,'F');\r\n\t\t\talphabets.put(7,'G');\r\n\t\t\talphabets.put(8,'H');\r\n\t\t\talphabets.put(9,'I');\r\n\t\t\talphabets.put(10,'J');\r\n\t\t\talphabets.put(11,'K');\r\n\t\t\talphabets.put(12,'L');\r\n\t\t\talphabets.put(13,'M');\r\n\t\t\talphabets.put(14,'N');\r\n\t\t\talphabets.put(15,'O');\r\n\t\t\talphabets.put(16,'P');\r\n\t\t\talphabets.put(17,'Q');\r\n\t\t\talphabets.put(18,'R');\r\n\t\t\talphabets.put(19,'S');\r\n\t\t\talphabets.put(20,'T');\r\n\t\t\talphabets.put(21,'U');\r\n\t\t\talphabets.put(22,'V');\r\n\t\t\talphabets.put(23,'W');\r\n\t\t\talphabets.put(24,'X');\r\n\t\t\talphabets.put(25,'Y');\r\n\t\t\talphabets.put(26,'Z');\r\n\t\t\t\r\n\t\t\tint n = Integer.parseInt(br.readLine());\r\n\t\t\t\r\n\t\t\tList<Long> senators = new ArrayList<Long>();\r\n\t\t\t\r\n\t\t\tString s[] = br.readLine().split(\" \");\r\n\t\t\t\r\n\t\t\tfor(int i = 0; i < s.length; i++){\r\n\t\t\t\tsenators.add(Long.parseLong(s[i]));\r\n\t\t\t}\r\n\r\n\t\t\twhile(!(Collections.frequency(senators, (long)0) == senators.size())){\r\n\t\t\t\tString x=\"\";\r\n\t\t\t\tfor(int i = 0; i < 2; i++){\r\n\t\t\t\t\t\r\n\t\t\t\t\tint index = senators.indexOf(Collections.max(senators));\r\n\t\t\t\t\tif(senators.get(index) == 0){\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(Collections.frequency(senators, (long)1) > 2 && Collections.frequency(senators, (long)1) % 2 > 0){\r\n\t\t\t\t\t\tsenators.set(index, senators.get(index) - 1);\r\n\t\t\t\t\t\tx=\"\"+alphabets.get(index + 1);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsenators.set(index, senators.get(index) - 1);\r\n\t\t\t\t\tx = x + alphabets.get(index + 1);\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tSystem.out.print(x);\r\n\t\t\t\tSystem.out.print(\" \");\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "8870"}
{"func": "package googlejam8.p873;\n\r\n\r\n\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class code31 {\r\n\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException  {\r\n\t\t\r\n\t\tint t,c=1,n,i,j,a[][],sum=0;\r\n\t\tString out=\"\";\r\n\t\tScanner sc=new Scanner(System.in);\r\n\t\tt=sc.nextInt();\r\n\t\twhile(t!=0)\r\n\t\t{ \r\n\t\t   out=\"\";\r\n\t\t   sum=0;\r\n\t\t   n=sc.nextInt();\r\n\t\t   a=new int[n][2];\r\n\t\t   for(i=0;i<n;i++)\r\n\t\t   {\r\n\t\t   \t   a[i][0]=sc.nextInt();\r\n\t\t  \t   sum=sum+a[i][0];\r\n\t\t   \t   a[i][1]=i+65;\r\n\t\t    }\r\n\t\t   while(sum>0)\r\n\t\t   {\r\n\t\t \t   int l=a.length,temp;\r\n\t\t    \tfor(i=0;i<l;i++)\r\n\t\t    \t{\r\n\t\t    \t\tfor(j=0;j<l-1;j++)\r\n\t\t    \t\t{\r\n\t\t    \t\t   if(a[j][0]<a[j+1][0])\r\n\t\t    \t\t\t{\r\n\t\t    \t\t\t\ttemp=a[j][0];\r\n\t\t    \t\t\t\ta[j][0]=a[j+1][0];\r\n\t\t    \t\t\t\ta[j+1][0]=temp;\r\n\t\t    \t\t\t\r\n\t\t    \t\t\t\ttemp=a[j][1];\r\n\t\t    \t\t\t\ta[j][1]=a[j+1][1];\r\n\t\t    \t\t\t\ta[j+1][1]=temp;\r\n\t\t    \t\t\t}\r\n\t\t    \t\t  }\r\n\t\t    \t\t}\r\n\t\t   \t\tif(a[0][0]>a[1][0] && a[1][0]!=0)\r\n\t\t\t    {\r\n\t\t\t \t   out=out+(char)(a[0][1])+(char)(a[0][1])+\" \";\r\n\t\t\t\t   a[0][0]--;\r\n\t\t\t       a[0][0]--;\r\n\t\t\t\t   sum=sum-2;\r\n\t\t\t     }\r\n\t\t\t     else\r\n\t\t\t    \t if(a[0][0]==a[1][0] && a[0][0]==1 && sum==2)\r\n\t\t\t\t      {\r\n\t\t\t\t         out=out+(char)(a[0][1])+(char)(a[1][1])+\" \";\r\n\t\t\t\t\t     a[0][0]--;\r\n\t\t\t\t\t     a[1][0]--;\r\n\t\t\t\t\t     sum=sum-2;\r\n\t\t\t\t\t    }else\r\n\t\t    \t\t if(a[0][0]==a[1][0] && a[0][0]==1)\r\n\t\t\t    \t   {\r\n\t\t    \t\t\t   out=out+(char)(a[0][1])+\" \";\r\n\t\t\t    \t\t   a[0][0]--;\r\n\t\t\t    \t\t   sum=sum-1;\r\n\t\t\t       \t   }\r\n\t\t    \t\t else\r\n\t\t    \t      {\r\n\t\t    \t\t   out=out+(char)(a[0][1])+\"\"+(char)(a[1][1])+\" \";\r\n\t\t    \t\t   a[0][0]--;\r\n\t\t    \t\t   a[1][0]--;\r\n\t\t    \t\t   sum=sum-2;\r\n\t\t    \t       }\r\n\t\t    \t     }\r\n\t\t    \t   System.out.println(\"Case #\"+c+\": \"+out);\r\n\t\t        c++;\r\n\t            t--;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\t\t       ", "idx": "8873"}
{"func": "package googlejam8.p874;\n\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class PA {\n\n\tstatic int nbParty, sum;\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint T = sc.nextInt();\n\t\tfor (int t = 1; t <= T; t++) {\n\t\t\tint N = sc.nextInt();\n\t\t\tint[] s = new int[N];\n\t\t\tfor (int i = 0; i < N; i++) \n\t\t\t\ts[i] = sc.nextInt();\n\n\t\t\tnbParty = N; // nbParty\n\t\t\tsum = 0;\n\t\t\tfor (int i = 0; i < N; i++) \n\t\t\t\tsum += s[i];\n\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\twhile (sum > 0) {\n\t\t\t\tnbParty = 0;\n\t\t\t\tsum = 0;\n\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t\tif (s[i] > 0) {\n\t\t\t\t\t\tnbParty++;\n\t\t\t\t\t\tsum += s[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (nbParty > 3) {\n\t\t\t\t\tint max1 = s[0] > s[1]? s[0]: s[1];\n\t\t\t\t\tint idx1 = s[0] > s[1]? 0: 1;\n\t\t\t\t\tint max2 = s[0] > s[1]? s[1]: s[0];\n\t\t\t\t\tint idx2 = s[0] > s[1]? 1: 0;\n\t\t\t\t\tfor (int i = 2; i < N; i++) {\n\t\t\t\t\t\tif (max1 < s[i]) {\n\t\t\t\t\t\t\tmax2 = max1; idx2 = idx1;\n\t\t\t\t\t\t\tmax1 = s[i]; idx1 = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (max2 < s[i]) {\n\t\t\t\t\t\t\t\tmax2 = s[i]; idx2 = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsb.append((char)(idx1+'A')+\"\"+ (char)(idx2+'A') + \" \");\n\t\t\t\t\ts[idx1]--; s[idx2]--;\n\t\t\t\t} else if (nbParty == 3) {\n\t\t\t\t\tint[] party = new int[nbParty];\n\t\t\t\t\tnbParty = 0;\n\t\t\t\t\tfor (int i = 0; i < N; i++) \n\t\t\t\t\t\tif (s[i] > 0) {\n\t\t\t\t\t\t\tparty[nbParty++] = i;\n\t\t\t\t\t\t}\n\n\t\t\t\t\tif (sum == 3) {\n\t\t\t\t\t\tsb.append((char)(party[0] + 'A') + \" \");\n\t\t\t\t\t\ts[party[0]]--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tint max1 = s[0] > s[1]? s[0]: s[1];\n\t\t\t\t\t\tint idx1 = s[0] > s[1]? 0: 1;\n\t\t\t\t\t\tint max2 = s[0] > s[1]? s[1]: s[0];\n\t\t\t\t\t\tint idx2 = s[0] > s[1]? 1: 0;\n\t\t\t\t\t\tfor (int i = 2; i < N; i++) {\n\t\t\t\t\t\t\tif (max1 < s[i]) {\n\t\t\t\t\t\t\t\tmax2 = max1; idx2 = idx1;\n\t\t\t\t\t\t\t\tmax1 = s[i]; idx1 = i;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (max2 < s[i]) {\n\t\t\t\t\t\t\t\t\tmax2 = s[i]; idx2 = i;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsb.append((char)(idx1+'A')+\"\"+ (char)(idx2+'A') + \" \");\n\t\t\t\t\t\ts[idx1]--; s[idx2]--;\n\t\t\t\t\t}\n\n\t\t\t\t} else if (nbParty == 2) {\n\t\t\t\t\tint idx1 = -1;\n\t\t\t\t\tint idx2 = -1;\n\t\t\t\t\tfor (int i1 = 0; i1 < N; i1++) {\n\t\t\t\t\t\tif (s[i1] > 0) {\n\t\t\t\t\t\t\tif (idx1 == -1) idx1 = i1;\n\t\t\t\t\t\t\telse idx2 = i1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (s[idx1] > s[idx2]) {\n\t\t\t\t\t\tsb.append((char)(idx1+'A')+\" \");\n\t\t\t\t\t\ts[idx1]--;\n\t\t\t\t\t} else if (s[idx2] > s[idx1]) {\n\t\t\t\t\t\tsb.append((char)(idx2+'A')+\" \");\n\t\t\t\t\t\ts[idx2]--;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i1 = 0; i1 < s[idx1]; i1++) {\n\t\t\t\t\t\tsb.append((char)(idx1+'A')+\"\"+ (char)(idx2+'A'));\n\t\t\t\t\t\tif ( i1 != s[idx1] -1) sb.append(\" \");\n\t\t\t\t\t}\n\t\t\t\t\tsum = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.printf(\"Case #%d: %s\\n\", t, sb.toString());\n\t\t}\n\n\t\tsc.close();\n\t}\n}\n", "idx": "8874"}
{"func": "package googlejam8.p877;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\n\r\npublic class Round1CProblemA {\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t    try {\r\n\t\t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\tint T = Integer.parseInt(bf.readLine());\r\n\t\t\tfor (int i=0; i<T; i++) {\r\n\t\t\t\tint N = Integer.parseInt(bf.readLine());\r\n\t\t\t\tString[] strTemp = bf.readLine().split(\" \");\r\n\t\t\t\t\r\n\t\t\t\tint[] P = new int[N];\r\n\t\t\t\tint total = 0;\r\n\t\t\t\t\r\n\t\t\t\tfor (int j=0; j<N; j++) {\r\n\t\t\t\t\tP[j] = Integer.parseInt(strTemp[j]);\r\n\t\t\t\t\ttotal +=P[j];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.print(\"Case #\" + (i+1) + \":\");\r\n\t\t\t\twhile (total > 0) {\r\n\t\t\t\t\tint maxSenatesAllowed = (total - 2)/2; \r\n\t\t\t\t\t\r\n\t\t\t\t\tint[] defaultEvac = {-1, -1};\r\n\t\t\t\t\tint[] requiredEvac = {-1, -1};\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (int x=0; x<N; x++) {\r\n\t\t\t\t\t\tif (defaultEvac[0] == -1) {\r\n\t\t\t\t\t\t\tif (P[x] >= 2) defaultEvac[1] = x;\r\n\t\t\t\t\t\t\tif (P[x] >= 1) defaultEvac[0] = x;\r\n\t\t\t\t\t\t} else if (defaultEvac[1] == -1) {\r\n\t\t\t\t\t\t\tif (P[x] >= 1) defaultEvac[1] = x;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (P[x] > maxSenatesAllowed) {\r\n\t\t\t\t\t\t\tif (requiredEvac[0] == -1) requiredEvac[0] = x;\r\n\t\t\t\t\t\t\telse if (requiredEvac[1] == -1) requiredEvac[1] = x;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (requiredEvac[0] == -1) \r\n\t\t\t\t\t\trequiredEvac = defaultEvac;\r\n\t\t\t\t\telse if (requiredEvac[1] == -1) {\r\n\t\t\t\t\t\tif (defaultEvac[0] != -1 && defaultEvac[0] != requiredEvac[0]) {\r\n\t\t\t\t\t\t\trequiredEvac[1] = defaultEvac[0];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trequiredEvac[1] = defaultEvac[1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (total == 3) requiredEvac[1] = -1; \r\n\t\t\t\t\t\r\n\t\t\t\t\tSystem.out.print(\" \");\r\n\t\t\t\t\tint count = 0;\r\n\t\t\t\t\tif (count<2 && requiredEvac[0] != -1) {\r\n\t\t\t\t\t\tSystem.out.print((char) ('A' + (char) requiredEvac[0]) );\r\n\t\t\t\t\t\tP[requiredEvac[0]]--;\r\n\t\t\t\t\t\ttotal--;\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (count<2 && requiredEvac[1] != -1) {\r\n\t\t\t\t\t\tSystem.out.print((char) ('A' + (char) requiredEvac[1]) );\r\n\t\t\t\t\t\tP[requiredEvac[1]]--;\r\n\t\t\t\t\t\ttotal--;\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "8877"}
{"func": "package googlejam8.p879;\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n\r\nclass codejam3\r\n{\r\n\tpublic static void main (String[] args) throws java.lang.Exception\r\n\t{\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tint testcases; int hash;\r\n\t\ttestcases = in.nextInt(); hash = testcases+1;\r\n\t\twhile(testcases>0){\r\n\t\t\tint n;\r\n\t\t\tn = in.nextInt();\r\n\t\t\tint arr[] = new int[n];\r\n\t\t\tString result=\"\";\r\n\t\t\tfor(int i=0;i<n;i++){\r\n\t\t\t\tarr[i] = in.nextInt();\r\n\t\t\t}\r\n\t\t\twhile(arr[0]!=0){\r\n\t\t\t\tint m1=-1; int m2=-1; int t1=0; int t2=0;\r\n\t\t\t\tfor(int i=0;i<n;i++){\r\n\t\t\t\t\tif(arr[i]>m1){\r\n\t\t\t\t\t\tm1 = arr[i];\r\n\t\t\t\t\t\tt1 = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(int i=0;i<t1;i++){\r\n\t\t\t\t\tif(arr[i]==m1){\r\n\t\t\t\t\t\tm2 = m1;\r\n\t\t\t\t\t\tt2 = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(m1==3){\r\n\t\t\t\t\tint temp1 = arr[t1]-(m1/2);\r\n\t\t\t\t\tarr[t1] = (m1/2);\r\n\t\t\t\t\twhile(temp1!=0){\r\n\t\t\t\t\t\tif(t1==0){\r\n\t\t\t\t\t\t\tresult = result + \"A\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(t1==1)\r\n\t\t\t\t\t\t\tresult = result+ \"B\";\r\n\t\t\t\t\t\telse \r\n\t\t\t\t\t\t\tresult = result+ \"C\";\r\n\t\t\t\t\t\ttemp1--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult = result+\" \";\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(m1!=-1 && m2!=-1){\r\n\t\t\t\t\tint temp1 = arr[t1]-(m1/2);\r\n\t\t\t\t\tarr[t1] = (m1/2);\r\n\t\t\t\t\tint temp2 = arr[t2]-(m2/2);\r\n\t\t\t\t\tarr[t2] = (m2/2);\r\n\t\t\t\t\t\twhile(temp1!=0){\r\n\t\t\t\t\t\t\tif(t1==0){\r\n\t\t\t\t\t\t\t\tresult = result + \"A\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(t1==1)\r\n\t\t\t\t\t\t\t\tresult = result+ \"B\";\r\n\t\t\t\t\t\t\telse \r\n\t\t\t\t\t\t\t\tresult = result+ \"C\";\r\n\t\t\t\t\t\t\ttemp1--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(temp2!=0){\r\n\t\t\t\t\t\t\tif(t2==0){\r\n\t\t\t\t\t\t\t\tresult = result + \"A\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(t2==1)\r\n\t\t\t\t\t\t\t\tresult = result+ \"B\";\r\n\t\t\t\t\t\t\telse \r\n\t\t\t\t\t\t\t\tresult = result+ \"C\";\r\n\t\t\t\t\t\t\ttemp1--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresult = result+\" \";\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tint temp1 = arr[t1]-(m1/2);\r\n\t\t\t\t\t\tarr[t1] = (m1/2);\r\n\t\t\t\t\t\twhile(temp1!=0){\r\n\t\t\t\t\t\t\tif(t1==0){\r\n\t\t\t\t\t\t\t\tresult = result + \"A\";\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(t1==1)\r\n\t\t\t\t\t\t\t\tresult = result+ \"B\";\r\n\t\t\t\t\t\t\telse \r\n\t\t\t\t\t\t\t\tresult = result+ \"C\";\r\n\t\t\t\t\t\t\ttemp1--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresult = result+\" \";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\"+(hash-testcases)+\":  \"+ result);\r\n\t\t\ttestcases--;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//   System.out.println(\"Case #\"+(hash-testcases)+\":  \"+ out);", "idx": "8879"}
{"func": "package googlejam8.p889;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass CodeJam161CA \r\n{\r\n\tpublic static void main(String[] args) throws Exception\r\n\t{\r\n\t\tFile file = new File(\"D:\\\\A-small.in\");\r\n\t\tFile outFile = new File(\"D:\\\\A-small.out\");\r\n\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(file));\r\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(outFile));\r\n\r\n\t\tint testCases = Integer.parseInt(br.readLine());\r\n\t\tfor(int t=1;t<=testCases;t++)\r\n\t\t{\r\n\t\t\tint N = Integer.parseInt(br.readLine());\r\n\t\t\tint[] Ninput = new int[N];\r\n\r\n\t\t\t//put info to array\r\n\t\t\tString input = br.readLine();\r\n\t\t\tStringTokenizer strToken = new StringTokenizer(input);\r\n\t\t\tint count = strToken.countTokens();\r\n\r\n\t\t\tfor(int x = 0;x < count;x++){\r\n\t\t\t\tNinput[x] = Integer.parseInt((String)strToken.nextElement());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tSystem.out.println(\"=============\");\r\n\t\t\t//System.out.println(Arrays.toString(Ninput));\r\n\r\n\t\t\tString removed = \"\";\r\n\r\n\t\t\twhile (!areAllZero(Ninput))\r\n\t\t\t{\r\n\t\t\t\tString removedSen = \"\";\r\n\r\n\t\t\t\t\r\n\t\t\t\tint large1;\r\n\t\t\t\tint large2;\r\n\t\t\t\t\r\n\t\t\t\tint largeindex1;\r\n\t\t\t\tint largeindex2;\r\n\t\t\t\tint sum = Ninput[0]+Ninput[1];\r\n\r\n\t\t\t\tif (Ninput[0]>Ninput[1])\r\n\t\t\t\t{\r\n\t\t\t\t\tlarge1 = Ninput[0];\r\n\t\t\t\t\tlarge2 = Ninput[1];\r\n\t\t\t\t\tlargeindex1 = 0;\r\n\t\t\t\t\tlargeindex2 = 1;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlarge1 = Ninput[1];\r\n\t\t\t\t\tlarge2 = Ninput[0];\r\n\t\t\t\t\tlargeindex1 = 1;\r\n\t\t\t\t\tlargeindex2 = 0;\r\n\t\t\t\t}\r\n\t\t\t\tfor(int i=2; i< Ninput.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tsum += Ninput[i];\r\n\t\t\t\t\tif(Ninput[i] >= large1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlarge2 = large1;\r\n\t\t\t\t\t\tlarge1 = Ninput[i];\r\n\t\t\t\t\t\tlargeindex2 = largeindex1;\r\n\t\t\t\t\t\tlargeindex1 = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (Ninput[i] >= large2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlarge2 = Ninput[i];\r\n\t\t\t\t\t\tlarge2 = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (Ninput[largeindex1]>0)\r\n\t\t\t\t{\r\n\t\t\t\t\tNinput[largeindex1]--;\r\n\t\t\t\t\tremovedSen += (char)(largeindex1+0x41);\r\n\t\t\t\t}\r\n\t\t\t\tif (largeindex1 != largeindex2 && sum % 2==0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (Ninput[largeindex2]>0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tNinput[largeindex2]--;\r\n\t\t\t\t\t\tremovedSen += (char)(largeindex2+0x41);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//System.out.println(largeindex1+\" \"+largeindex2);\r\n\t\t\t\t//System.out.println(Arrays.toString(Ninput));\r\n\t\t\t\t//System.out.println(removedSen);\r\n\t\t\t\tremoved += removedSen + \" \";\r\n\t\t\t}\r\n\r\n\t\t\tbw.write(\"Case #\" + t +\": \"+removed+\"\\n\");\r\n\t\t}\r\n\t\tbr.close();\r\n\t\tbw.close();\r\n\t}\r\n\tpublic static boolean areAllZero(int[] array)\r\n\t{\r\n\t\tfor(int b : array) if(b>0) return false;\r\n\t\treturn true;\r\n\t}\r\n}\r\n", "idx": "8889"}
{"func": "package googlejam8.p893;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Senate{\r\n \r\n\t public static void main(String args[])throws Exception{\r\n\t \r\n\t BufferedReader br=new BufferedReader(new FileReader(\"E:/gcj16/senate.txt\"));\r\n\t PrintWriter pw=new PrintWriter(\"E:/gcj16/senate_out.txt\");\r\n\r\n\t int tc=Integer.parseInt(br.readLine())+1;\r\n\t int i=0,j=0,k=0,l=0,min=0,max=1001,i1=0,n=0;\r\n\t int []ax=null;\r\n\t int count=0;\r\n\t StringTokenizer st=null;\r\n\t String temp=\"\",op=\"\";\r\n\t for(i1=1;i1<tc;i1++)\r\n\t\t  {\r\n                    ax=new int[26];\r\n\t\t    count=0;\r\n\t\t    n=Integer.parseInt(br.readLine());\r\n\t\t    st=new StringTokenizer(br.readLine());\r\n\t\t    for(i=0;i<n;i++){\r\n\t\t\t    ax[i]=Integer.parseInt(st.nextToken());\r\n\t\t\t    count+=ax[i];\r\n\t\t    }\r\n                    op=\"\";\r\n\t\t    while(count>0)\r\n\t\t    {       max=-1;\r\n\t\t\t    for(i=0;i<n;i++)\r\n                             if(ax[i]>max)\r\n\t\t\t\t     max=ax[i];\r\n\r\n                            j=count!=3?2:1;\r\n\t\t\t    for(i=0;i<n&&j>0;i++)\r\n\t\t\t\t    if(ax[i]==max)\r\n\t\t\t\t    {\r\n\t\t\t\t\t    j--;\r\n\t\t\t\t\t    count--;\r\n\t\t\t\t\t    ax[i]--;\r\n\t\t\t\t\t    op+=(\"\"+((char)(65+i)));\r\n\t\t\t\t    }\r\n\t\t\t    op+=\" \";\r\n\r\n\t\t    }\r\n\t\t    System.out.println(\"Case #\"+i1+\": \"+op.trim());\r\n\t\t    pw.println(\"Case #\"+i1+\": \"+op.trim());\r\n\r\n\r\n\t\t  }\r\n\r\n\t  pw.close();\r\n\t \r\n\t \r\n\t }\r\n\r\n\r\n\r\n}\r\n\r\n", "idx": "8893"}
{"func": "package googlejam8.p909;\nimport java.util.*;\nimport java.io.*;\n\npublic class Round1C_A {\n\n\n\tpublic static void main(String []args) throws IOException {\n\n\t\tFileReader fr = new FileReader(\"A-large11.in\");\n\t\tBufferedReader br = new BufferedReader(fr);\n\t\tString s;\n\n\n\t\t//Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n\t\tint T;\n\t\tif((s = br.readLine()) != null)\n\t\t\tT = Integer.parseInt(s);//c.nextInt();\n\t\telse\n\t\t{\n\t\t\tSystem.out.println(\"File has nothing to read.\");\n\t\t\treturn;\n\t\t}\n\t\tif(T < 1 || T > 100) {\n\t\t\tSystem.out.println(\"Improper number of test cases.\");\n\t\t\treturn;\n\t\t}\n\n\t\tint N;\n\t\tint arr[], temp[];\n\t\tfor(int k = 0;k < T;k++) {\n\t\t\tif((s = br.readLine()) != null)\n\t\t\t\tN = Integer.parseInt(s);//c.nextInt();\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"File has nothing to read.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tarr = new int[N];\n\t\t\tif((s = br.readLine()) == null) {\n\t\t\t\tSystem.out.println(\"File has nothing to read.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tScanner sc;\n\t\t\tsc = new Scanner(s);\n\t\t\tint p = 0;\n\t\t\twhile(sc.hasNext()) {\n\t\t\t\tarr[p] = sc.nextInt();p++;\n\t\t\t}\n\t\t\t\n\t\t\tint tot, max, secmax;tot = 0;\n\t\t\tfor(int i = 0;i < N;i++)\n\t\t\t\ttot += arr[i];\t\n\t\t\tint print[];\n\t\t\tint printIndex;\n\t\t\tprint = new int[2002];Arrays.fill(print, -1);\n\t\t\tprintIndex = 0;\n\n\t\t\twhile(true) {\n\t\t\t\t//temp = Arrays.copyOf(arr, N);\n\t\t\t\t//Arrays.sort(temp);\n\t\t\t\tint maxpos, secmaxpos;maxpos = 0;max = arr[0];\n\t\t\t\tfor(int i = 1;i < N;i++) {\n\t\t\t\t\tif(arr[i] > max) {\n\t\t\t\t\t\tmax = arr[i];\n\t\t\t\t\t\tmaxpos = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tboolean flag, tflag;tflag = false;\n\t\t\t\tflag = false;\n\t\t\t\tint tcount;\n\t\t\t\ttcount = 0;\n\t\t\t\tif(max == 1) {\n\t\t\t\t\tint count;\n\t\t\t\t\tcount = 0;\n\t\t\t\t\tfor(int i = 0;i < N;i++) {\n\t\t\t\t\t\tif(arr[i] == 1)\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tif(arr[i] == 0)\n\t\t\t\t\t\t\ttcount++;\n\t\t\t\t\t}\n\t\t\t\t\tif(tcount == N) {\n\t\t\t\t\t\ttflag = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(count == 3)\n\t\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t\tif(!flag) {\n\t\t\t\t\tprint[printIndex++] = maxpos;\n\t\t\t\t\tsecmax = -1;secmaxpos = 0;\n\t\t\t\t\tfor(int i = 0;i < N;i++) {\n\t\t\t\t\t\tif(i != maxpos && arr[i] > secmax) {\n\t\t\t\t\t\t\tsecmax = arr[i];\n\t\t\t\t\t\t\tsecmaxpos = i;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\tprint[printIndex++] = secmaxpos;\n\t\t\t\t\tarr[maxpos]--;\n\t\t\t\t\tarr[secmaxpos]--;\n\t\t\t\t\tprint[printIndex++] = -2;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprint[printIndex++] = maxpos;\n\t\t\t\t\tarr[maxpos]--;\n\t\t\t\t\tprint[printIndex++] = -2;\n\n\t\t\t\t\tfor(int i = 0;i < N;i++) \n\t\t\t\t\t\tif(arr[i] == 1) { \n\t\t\t\t\t\t\tprint[printIndex++] = i;\n\t\tarr[i]--;}\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttot = 0;\n\t\t\t\tfor(int i = 0;i < N;i++)\n\t\t\t\t\ttot += arr[i];\n\t\t\t\tif(tot == 0)\n\t\t\t\t\tbreak;\t\n\n\t\t\t}\t\n\n\n\t\t\tSystem.out.print(\"Case #\" + (k + 1) + \": \");\n\t\t\tfor(int j = 0;j < 2000 && print[j] != -1;j++) \n\t\t\t\tif(print[j] != -2) \n\t\t\t\t\tSystem.out.print(  ((char)(print[j] + 65)) );\n\t\t\t\telse\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\n\t\t\tSystem.out.println();\t\n\t\t\t\n\t\t}\n\n\t}\n\n}\n", "idx": "8909"}
{"func": "package googlejam8.p910;\nimport java.util.*;\nimport java.io.*;\n\npublic class CA {\n\n\tpublic static void main(String[] args) {\n    \tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n    \tint testCases = in.nextInt();\n\n    \tfor (int i = 1; i <= testCases; i++) {\n    \t\tint n = in.nextInt();\n    \t\tString[] senators = new String[n];\n    \t\tint currentParty = 65;\n    \t\tint sens = 0; \n    \t\tString plan = \"\";\n\n    \t\tfor (int j = 0; j < n; j++) {\n    \t\t\tint sen = in.nextInt();\n\t\t\t\tString toReturn = \"\";\n\t\t\t\tfor (int i1 = 0; i1 < sen; i1++) {\n\t\t\t\t\ttoReturn += (char) currentParty;\n\t\t\t\t}\n    \t\t\tsenators[j] = toReturn;\n    \t\t\tcurrentParty++;\n    \t\t\tsens += sen;\n    \t\t}\n\t\t\tArrays.sort(senators, new Comparator<String>(){\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic int compare(String s1, String s2) {\n\t\t\t\t\t\t\treturn s2.length() - s1.length();\n\t\t\t\t\t\t}\n\t\t\t});\n\n    \t\tsenators = senators;\n\n    \t\tif (sens % 2 != 0) {\n    \t\t\tplan += senators[0].charAt(0) + \" \";\n\t\t\t\tStringBuilder sb = new StringBuilder(senators[0]);\n\t\t\t\tsb.deleteCharAt(0);\n    \t\t\tsenators[0] = sb.toString();\n\t\t\t\tArrays.sort(senators, new Comparator<String>(){\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic int compare(String s1, String s2) {\n\t\t\t\t\t\t\t\treturn s2.length() - s1.length();\n\t\t\t\t\t\t\t}\n\t\t\t\t});\n    \t\t\tsenators = senators;\n    \t\t}\n\n    \t\twhile (!senators[0].equals(\"\")) {\n    \t\t\tplan += senators[0].charAt(0);\n    \t\t\tif (senators[1].length() != 0) {\n    \t\t\t\tplan += senators[1].charAt(0);\n\t\t\t\t\tStringBuilder sb = new StringBuilder(senators[1]);\n\t\t\t\t\tsb.deleteCharAt(0);\n    \t\t\t\tsenators[1] = sb.toString();\n    \t\t\t}\n\t\t\t\tStringBuilder sb = new StringBuilder(senators[0]);\n\t\t\t\tsb.deleteCharAt(0);\n\n    \t\t\tsenators[0] = sb.toString();\n    \t\t\tplan += \" \";\n\t\t\t\tArrays.sort(senators, new Comparator<String>(){\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic int compare(String s1, String s2) {\n\t\t\t\t\t\t\t\treturn s2.length() - s1.length();\n\t\t\t\t\t\t\t}\n\t\t\t\t});\n    \t\t\tsenators = senators;\n    \t\t}\n\n    \t\tSystem.out.println(\"Case #\" + i + \": \" + plan.trim());\n    \t}\n\t}\n\n}\n", "idx": "8910"}
{"func": "package googlejam8.p911;\n\n\nimport java.util.*;\n\npublic class Problem1 {\n\n    private static boolean debug = false;\n\n    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n\n        int t = sc.nextInt();\n\n        for (int _t = 1; _t <= t; _t++) {\n\n            int n = sc.nextInt(); sc.nextLine();\n            int[] p = new int[n];\n            int total = 0;\n            char ich = 'A';\n            int max = -1;\n            char[] labels = new char[n];\n            for (int i=0; i < n; i++) {\n                p[i] = sc.nextInt();\n                total += p[i];\n                labels[i] = ich;\n                ich++;\n                if (p[i] > max) {\n                    max = p[i];\n                }\n            }\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t        Stack<Character> s = new Stack<>();\n\t\t\t\n\t\t\t        while (s.size() != total) {\n\t\t\t\n\t\t\t            for (int i=0; i<n; i++) {\n\t\t\t\n\t\t\t                if (p[i] > 0) {\n\t\t\t                    sb.append(labels[i]);\n\t\t\t                    s.push(labels[i]);\n\t\t\t                    p[i]--;\n\t\t\t                }\n\t\t\t            }\n\t\t\t        }\n\t\t\t\n\t\t\t        if (debug) {\n\t\t\t\t\t    System.out.println(\"sb: \"+sb);\n\t\t\t\t\t}\n\t\t\t        if (debug) {\n\t\t\t\t\t    System.out.println(\"s: \"+s);\n\t\t\t\t\t}\n\t\t\t/*\n\t\t\t\n\t\t\t        StringBuilder sb2 = new StringBuilder();\n\t\t\t        for (int j=0; j<sb.length(); j++) {\n\t\t\t            sb2.append(sb.charAt(j));\n\t\t\t\n\t\t\t            if (sb.length()%2 == 0) {\n\t\t\t                if (j%2==1) {\n\t\t\t                    sb2.append(\" \");\n\t\t\t                }\n\t\t\t            } else {\n\t\t\t\n\t\t\t                if (j == sb.length()-3) {\n\t\t\t                    sb2.append(sb.charAt(sb.length()-1));\n\t\t\t                    sb2.append(\" \");\n\t\t\t                    sb2.append(sb.charAt(sb.length()-3));\n\t\t\t                    sb2.append(sb.charAt(sb.length()-2));\n\t\t\t                    break;\n\t\t\t                } else {\n\t\t\t                    if (j%2==1) {\n\t\t\t                        sb2.append(\" \");\n\t\t\t                    }\n\t\t\t                }\n\t\t\t            }\n\t\t\t\n\t\t\t        }\n\t\t\t*/\n\t\t\t\n\t\t\t        StringBuilder sb3 = new StringBuilder();\n\t\t\t        while(!s.empty()) {\n\t\t\t            if (s.size() == 3) {\n\t\t\t                char c1 = s.pop(), c2 = s.pop(), c3 = s.pop();\n\t\t\t                sb3.append(c3);\n\t\t\t                sb3.append(' ');\n\t\t\t                sb3.append(c2);\n\t\t\t                sb3.append(c1);\n\t\t\t                sb3.append(' ');\n\t\t\t            } else {\n\t\t\t                char c1 = s.pop(), c2 = s.pop();\n\t\t\t                sb3.append(c2);\n\t\t\t                sb3.append(c1);\n\t\t\t                sb3.append(' ');\n\t\t\t            }\n\t\t\t        }\n\n            String result = sb3.toString();\n            System.out.printf(\"Case #%d: %s%n\", _t, result);\n        }\n    }\n}", "idx": "8911"}
{"func": "package googlejam8.p914;\nimport java.util.*;\nimport java.io.*;\n\npublic class Senate {\n\n\tpublic static void main(String[] args) {\n    \tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in))); // MY_PROGRAM < large_input.txt > large_output.txt\n    \tint testCases = in.nextInt();\n\n    \tfor (int i = 1; i <= testCases; i++) {\n    \t\tint n = in.nextInt();\n    \t\tString[] senators = new String[n];\n    \t\tint currentParty = 65;\n    \t\tint totalSen = 0; \n    \t\tString evacuation = \"\";\n\n    \t\tfor (int j = 0; j < n; j++) {\n    \t\t\tint sen = in.nextInt();\n\t\t\t\tString toReturn = \"\";\n\t\t\t\tfor (int i1 = 0; i1 < sen; i1++) {\n\t\t\t\t\ttoReturn += (char) currentParty;\n\t\t\t\t}\n    \t\t\tsenators[j] = toReturn;\n    \t\t\tcurrentParty++;\n    \t\t\ttotalSen += sen;\n    \t\t}\n\t\t\tArrays.sort(senators, new Comparator<String>(){\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic int compare(String s1, String s2) {\n\t\t\t\t\t\t\treturn s2.length() - s1.length();\n\t\t\t\t\t\t}\n\t\t\t});\n\n    \t\tsenators = senators;\n\n    \t\tif (totalSen % 2 != 0) {\n    \t\t\tevacuation += senators[0].charAt(0) + \" \";\n\t\t\t\tStringBuilder sb = new StringBuilder(senators[0]);\n\t\t\t\tsb.deleteCharAt(0);\n    \t\t\tsenators[0] = sb.toString();\n\t\t\t\tArrays.sort(senators, new Comparator<String>(){\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic int compare(String s1, String s2) {\n\t\t\t\t\t\t\t\treturn s2.length() - s1.length();\n\t\t\t\t\t\t\t}\n\t\t\t\t});\n    \t\t\tsenators = senators;\n    \t\t}\n\n    \t\twhile (!senators[0].equals(\"\")) {\n    \t\t\tevacuation += senators[0].charAt(0);\n    \t\t\tif (senators[1].length() != 0) {\n    \t\t\t\tevacuation += senators[1].charAt(0);\n\t\t\t\t\tStringBuilder sb = new StringBuilder(senators[1]);\n\t\t\t\t\tsb.deleteCharAt(0);\n    \t\t\t\tsenators[1] = sb.toString();\n    \t\t\t}\n\t\t\t\tStringBuilder sb = new StringBuilder(senators[0]);\n\t\t\t\tsb.deleteCharAt(0);\n\n    \t\t\tsenators[0] = sb.toString();\n    \t\t\tevacuation += \" \";\n\t\t\t\tArrays.sort(senators, new Comparator<String>(){\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic int compare(String s1, String s2) {\n\t\t\t\t\t\t\t\treturn s2.length() - s1.length();\n\t\t\t\t\t\t\t}\n\t\t\t\t});\n    \t\t\tsenators = senators;\n    \t\t}\n\n    \t\tSystem.out.println(\"Case #\" + i + \": \" + evacuation.trim());\n    \t}\n\t}\n\n}", "idx": "8914"}
{"func": "package googlejam8.p918;\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.util.Scanner;\r\n\r\npublic class Solve2016R1C_A {\r\n\tprivate static String filePath = \"A-small-attempt0.in\";\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tStringBuffer answer = new StringBuffer();\r\n\t\tchar[] parties = new char[26];\r\n\t\tfor (int i = 0; i < parties.length; i++) parties[i] = (char)('A' + i);\r\n\r\n\t\ttry (Scanner sc = new Scanner(new File(filePath))) {\r\n\t\t\tint T = sc.nextInt();\r\n\t\t\tfor (int i = 1; i <= T; i++) {\r\n\t\t\t\tanswer.append(\"Case #\" + i + \":\");\r\n\t\t\t\tint N = sc.nextInt();\r\n\t\t\t\tint[] Pi = new int[N];\r\n\t\t\t\tint sum = 0;\r\n\t\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\t\tPi[j] = sc.nextInt();\r\n\t\t\t\t\tsum += Pi[j];\r\n\t\t\t\t\tPi[j] *= 2;\r\n\t\t\t\t}\r\n\t\t\t\twhile (sum > 0) {\r\n\t\t\t\t\tanswer.append(\" \");\r\n\t\t\t\t\t\r\n\t\t\t\t\tint flag = 0;\r\n\t\t\t\t\tsum--;\r\n\t\t\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\t\t\tif (Pi[j] > sum) {\r\n\t\t\t\t\t\t\tif (flag == 0) {\r\n\t\t\t\t\t\t\t\tanswer.append(parties[j]);\r\n\t\t\t\t\t\t\t\tPi[j] -= 2;\r\n\t\t\t\t\t\t\t\tflag = 1;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tanswer.append(parties[j]);\r\n\t\t\t\t\t\t\t\tPi[j] -= 2;\r\n\t\t\t\t\t\t\t\tsum--;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (flag == 0) {\r\n\t\t\t\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\t\t\t\tif (Pi[j] > 0) {\r\n\t\t\t\t\t\t\t\tanswer.append(parties[0]);\r\n\t\t\t\t\t\t\t\tPi[0] -= 2;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tanswer.append(\"\\n\");\r\n\t\t\t}\r\n\t\t\tString outPath = \"answer.out\";\n\t\t\tif (filePath != null && !filePath.equals(\"\")) {\n\t\t\t\toutPath = filePath.substring(0, filePath.length() - 2) + \"out\";\n\t\t\t}\n\t\t\ttry (FileOutputStream fos = new FileOutputStream(outPath, false)) {\n\t\t\t\tfos.write(answer.toString().getBytes());\n\t\t\t}\n\t\t\tSystem.out.println(answer);\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "8918"}
{"func": "package googlejam8.p927;\nimport java.util.*;\n\npublic class a {\n\tpublic static void main(String args[]){\n\t\t\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint cases = in.nextInt();\n\t\tint n;\n\t\tint parties[] = new int[0];\n\t\t\n\t\tfor (int i = 0; i < cases; i++)\n\t\t{\n\t\t\tn = in.nextInt();\t\t\t\n\t\t\tparties = new int[n];\n\t\t\tSystem.out.println();\n\t\t\tSystem.out.print(\"Case #\"+(i+1)+\": \");\n\t\t\t\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t{\t\t\t\t\n\t\t\t\tparties[j] = in.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\t// evacuate the suckers if 2 party system\n\t\t\tif (n == 2)\n\t\t\t{\n\t\t\t\tfor (int k = 0; k < parties[0]; k++)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.print(\"AB \");\n\t\t\t\t}\t\t\t\t\t\n\t\t\t}\n\t\t\t// else evacuate the fools\n\t\t\telse\n\t\t\t{\n\t\t\t\tint winner = 0;\n\t\t\t\tint runnerup = 0;\n\t\t\t\tint loser = 0; \n\t\t\t\tint windex = 0;\n\t\t\t\tint rindex = 0;\n\t\t\t\tint lindex = 0;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t// figure out whos in charge\n\t\t\t\tfor (int l = 0; l < n; l++)\n\t\t\t\t{\n\t\t\t\t\tif (parties[l] > winner)\n\t\t\t\t\t{\n\t\t\t\t\t\tloser = runnerup;\n\t\t\t\t\t\tlindex = rindex;\n\t\t\t\t\t\trunnerup = winner;\n\t\t\t\t\t\trindex = windex;\n\t\t\t\t\t\twinner = parties[l];\n\t\t\t\t\t\twindex = l;\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse if (parties[l] > runnerup)\n\t\t\t\t\t{\n\t\t\t\t\t\tloser = runnerup;\n\t\t\t\t\t\tlindex = rindex;\n\t\t\t\t\t\trunnerup = parties[l];\n\t\t\t\t\t\trindex = l;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tloser = parties[l];\n\t\t\t\t\t\tlindex = l;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// get the majority out first\n\t\t\t\twhile (parties[windex] > parties[rindex])\n\t\t\t\t{\n\t\t\t\t\tchar win = (char) ('A' + windex);\n\t\t\t\t\tSystem.out.print(win+\" \");\n\t\t\t\t\tparties[windex] -= 1;\n\t\t\t\t}\n\t\t\t\t// then clear out the losers\n\t\t\t\twhile (parties[lindex] > 0)\n\t\t\t\t{\n\t\t\t\t\tchar los = (char) ('A' + lindex);\n\t\t\t\t\tSystem.out.print(los+\" \");\n\t\t\t\t\tparties[lindex] -= 1;\n\t\t\t\t}\n\t\t\t\t// then march the rest out holding hands\n\t\t\t\twhile (parties[windex] > 0)\n\t\t\t\t{\n\t\t\t\t\tchar win = (char) ('A' + windex);\n\t\t\t\t\tchar rin = (char) ('A' + rindex);\n\t\t\t\t\tSystem.out.print(win+\"\"+ rin+\" \");\n\t\t\t\t\tparties[windex] -= 1;\n\t\t\t\t\tparties[rindex] -= 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tin.close();\n\t}\n}\n", "idx": "8927"}
{"func": "package googlejam8.p929;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass A\r\n{\r\n\tpublic static void main(String[] args)throws IOException\r\n\t{\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tPrintStream ot = new PrintStream(new FileOutputStream(\"Out1C_A.txt\"));\r\n        System.setOut(ot);\r\n\t\tint t = sc.nextInt(),t1=t;\r\n\t\twhile(t-->0)\r\n\t\t{\r\n\t\t\tint n = sc.nextInt(),lg=-1,p1=-1,p2=-1,c=0,p3=-1;\r\n\t\t\tint a[] = new int[n];\r\n\t\t\tfor(int i=0; i<n; i++) \r\n\t\t\t{\r\n\t\t\t\ta[i] = sc.nextInt();\r\n\t\t\t\tif(a[i]>lg) \r\n\t\t\t\t{\r\n\t\t\t\t\tlg=a[p1=i];\r\n\t\t\t\t\tp2=p3=-1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(p2==-1&&a[i]==lg) p2=i;\r\n\t\t\t\telse if(p3==-1&&a[i]==lg) p3=i;\r\n\t\t\t\tc+=a[i];\r\n\t\t\t}\r\n\t\t\tString s1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n\t\t\tSystem.out.print(\"Case #\"+(t1-t)+\": \");\r\n\t\t\tdo{\r\n\t\t\t\tif(c!=1)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(p3!=-1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSystem.out.print(s1.charAt(p1)+\" \");\r\n\t\t\t\t\t\ta[p1]--;\r\n\t\t\t\t\t\tc--;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(p2!=-1&&a[p1]==a[p2])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSystem.out.print(s1.charAt(p1)+\"\"+s1.charAt(p2)+\" \");\r\n\t\t\t\t\t\ta[p1]--;\r\n\t\t\t\t\t\ta[p2]--;\r\n\t\t\t\t\t\tc-=2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tSystem.out.print(s1.charAt(p1)+\"\"+s1.charAt(p1)+\" \");\r\n\t\t\t\t\t\ta[p1]-=2;\r\n\t\t\t\t\t\tc-=2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tSystem.out.print(s1.charAt(p1)+\" \");\r\n\t\t\t\t\ta[p1]--;\r\n\t\t\t\t\tc--;\r\n\t\t\t\t}\r\n\t\t\t\tlg=p1=p2=p3=-1;\r\n\t\t\t\tfor(int i=0; i<n; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(a[i]>lg) lg=a[p1=i];\r\n\t\t\t\t\telse if(p2==-1&&a[i]==lg) p2=i;\r\n\t\t\t\t\telse if(p3==-1&&a[i]==lg) p3=i;\r\n\t\t\t\t}\r\n\t\t\t}while(c!=0);\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n}", "idx": "8929"}
{"func": "package googlejam8.p933;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * \r\n */\r\n\r\n/**\r\n * @author Sagar\r\n *\r\n */\r\npublic class GCJ16R1CA {\r\n\r\n\r\n\r\n\t/**\r\n\t * @param args\r\n\t * @throws IOException \r\n\t */\r\n\tpublic static void main(String[] args){\r\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t\tint t = in.nextInt();\r\n\t\tfor(int i = 1 ; i <= t; i++){\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint a[] = new int[26];\r\n\t\t\tint p[] = new int[n];\r\n\t\t\tint total = 0;\r\n\t\t\tfor(int j = 0; j<n;j++){\r\n\t\t\t\tp[j] = in.nextInt();\r\n\t\t\t\ttotal += p[j];\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\" + i + \": \");\r\n\t\t\twhile(total > 0){\r\n\t\t\t\tint max1 = 0;\r\n\t\t\t\tint max2 = 0;\r\n\t\t\t\tint max3 = 0;\r\n\t\t\t\tfor(int j = 1 ;j<n;j++){\r\n\t\t\t\t\tif(p[j] >= p[max1]){\r\n\t\t\t\t\t\tmax3 = max2;\r\n\t\t\t\t\t\tmax2 = max1;\r\n\t\t\t\t\t\tmax1 = j;\r\n\t\t\t\t\t} else if(p[j] >= p[max2]){\r\n\t\t\t\t\t\tmax3 = max2;\r\n\t\t\t\t\t\tmax2 = j;\r\n\t\t\t\t\t} else if(p[j] >= p[max3]){\r\n\t\t\t\t\t\tmax3 = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif((p[max1] - 2)< total/2 && p[max2] < total /2 && p[max3] < total/2){\r\n\t\t\t\t\tSystem.out.print(\"\" + (char)('A' + max1) + (char)('A' + max1) + \" \");\r\n\t\t\t\t\ttotal -= 2; \r\n\t\t\t\t\tp[max1] -= 2;\r\n\t\t\t\t} else if((p[max1] - 1) < total/2 && (p[max2] - 1) < total/2 && p[max3] < total/2) {\r\n\t\t\t\t\tSystem.out.print(\"\" + (char)('A' + max1) + (char)('A' + max2) + \" \");\r\n\t\t\t\t\ttotal -= 2;\r\n\t\t\t\t\tp[max1] -= 1;\r\n\t\t\t\t\tp[max2] -= 1;\r\n\t\t\t\t} else if(p[max1] == p[max2] && p[max3] == p[max2] && max1 != max2 && max2 != max3) {\r\n\t\t\t\t\tSystem.out.print(\"\" + (char)('A' + max3) + \" \");\r\n\t\t\t\t\ttotal -= 1;\r\n\t\t\t\t\tp[max3] -= 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tSystem.out.print(\"\" + (char)('A' + max1) + (char)('A' + max2) + \" \");\r\n\t\t\t\t\ttotal -= 2;\r\n\t\t\t\t\tp[max1] -= 1;\r\n\t\t\t\t\tp[max2] -= 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t\tin.close();\r\n\t}\r\n\r\n}\r\n", "idx": "8933"}
{"func": "package googlejam8.p934;\nimport java.io.*;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    static Scanner scanner;\r\n    static PrintWriter writer;\r\n    static String name = \"A-small-attempt0\";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        scanner = new Scanner(new BufferedReader(new FileReader(new File(name + \".in\"))));\r\n        writer = new PrintWriter(new FileWriter(new File(name + \".out\")));\r\n\r\n        int t = scanner.nextInt();  // Scanner has functions to read ints, longs, strings, chars, etc.\r\n        for (int i = 1; i <= t; ++i) {\r\n            writer.print(\"Case #\" + i + \": \");\r\n            int max = scanner.nextInt();\n\t\t\tint[] count = new int[14];\n\t\t\tint total = 0;\n\t\t\tint[] save = new int[3];\n\t\t\t\n\t\t\tfor (int i1 = 0; i1 < max; i1++) {\n\t\t\t    count[i1] = scanner.nextInt();\n\t\t\t    total += count[i1];\n\t\t\t}\n\t\t\t\n\t\t\twhile (total > 0) {\n\t\t\t    int m = -1;\n\t\t\t    int s = 0;\n\t\t\t    for (int i3 = 0; i3 < max && s <= 2; i3++) {\n\t\t\t        if (count[i3] > m) {\n\t\t\t            m = count[i3];\n\t\t\t            s = 0;\n\t\t\t            save[s] = i3;\n\t\t\t            s++;\n\t\t\t        }\n\t\t\t        else if (count[i3] == m) {\n\t\t\t            save[s] = i3;\n\t\t\t            s++;\n\t\t\t        }\n\t\t\t    }\n\t\t\t\n\t\t\t    if (s > 2) {\n\t\t\t        s = 1;\n\t\t\t    }\n\t\t\t\n\t\t\t    for (int i2 = 0; i2 < s; i2++) {\n\t\t\t        writer.print((char)('A' + save[i2]));\n\t\t\t        count[save[i2]]--;\n\t\t\t        total--;\n\t\t\t    }\n\t\t\t\n\t\t\t    writer.print(' ');\n\t\t\t}\n\t\t\t\n\t\t\twriter.println();\r\n        }\r\n\r\n        writer.close();\r\n        scanner.close();\r\n    }\r\n}", "idx": "8934"}
{"func": "package googlejam8.p942;\n/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.io.*;\r\n/**\r\n *\r\n * @author Admin\r\n */\r\npublic class senate {\r\n\r\n    /**\r\n     * @param args the command line arguments\r\n     */\r\n    public static void main(String[] args) {\r\n        // TODO code application logic here\r\n        Scanner s=new Scanner(System.in);\r\n        int t=s.nextInt();\r\n        for(int f=1;f<=t;f++)\r\n        {\r\n            System.out.print(\"Case #\"+f+\": \");\r\n            //code here\r\n            int n=s.nextInt();\r\n            int[] p=new int[n];\r\n            for(int i=0;i<n;i++)\r\n                p[i]=s.nextInt();\r\n            \r\n            while(true)\r\n            {\r\n                int max=0,m_ind=-1;\r\n                int sec=0,s_ind=-1;\r\n                int count=0,flag=0;\r\n                if(n%2!=0)\r\n                {\r\n                for(int i=0;i<n&&p[i]==1;i++)\r\n                        count++;\r\n                if(count==n)\r\n                    flag=1;\r\n                }\r\n                if(flag==0)\r\n                {\r\n                for(int i=0;i<n;i++)\r\n                {\r\n                    if(max<p[i])\r\n                    {\r\n                        max=p[i];\r\n                        m_ind=i;\r\n                    }\r\n                }\r\n                \r\n                if(max==0)\r\n                    break;\r\n                for(int i=0;i<n;i++)\r\n                {\r\n                    if(sec<p[i]&&i!=m_ind)\r\n                    {\r\n                        sec=p[i];\r\n                        s_ind=i;\r\n                    }\r\n                }\r\n            p[m_ind]--;\r\n            p[s_ind]--;\r\n            int on=65+m_ind;\r\n            int tw=65+s_ind;\r\n            System.out.print((char)on);\r\n            System.out.print((char)tw);\r\n            System.out.print(\" \");\r\n        \r\n                    }\r\n            \r\n            else\r\n                {\r\n                    p[0]--;\r\n                    int on=65;\r\n                    System.out.print((char)(on)+\" \");\r\n                    flag=0;\r\n                }\r\n              }\r\n            System.out.println();\r\n            }\r\n            \r\n            \r\n            \r\n        }\r\n    }\r\n    \r\n\r\n", "idx": "8942"}
{"func": "package googlejam8.p948;\n\n\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.util.concurrent.ArrayBlockingQueue;\n\npublic class Problem1 {\n\t\n\tfinal static String PROBLEM_NAME = \"problem1\";\n\tfinal static String WORK_DIR = \"/Users/manisharya/Desktop/jam/\" + PROBLEM_NAME + \"/\";\n\tfinal static String INPUT_FILE_NAME = \"A-small-attempt0.in\";\n\tfinal static String OUTPUT_FILE_NAME = \"output.txt\";\n\t\n\tint[] map;\n\tint[] letter;\n\tint n = -1;\n\t\n\t\n\tpublic static void main(String[] args) throws Exception {\n\n\t\tScanner sc = new Scanner(new FileReader(WORK_DIR + INPUT_FILE_NAME));\n\t\tPrintWriter pw = new PrintWriter(new FileWriter(WORK_DIR\n\t\t\t\t+ OUTPUT_FILE_NAME));\n\t\tint caseCnt = sc.nextInt();\n\t\tfor (int caseNum = 0; caseNum < caseCnt; caseNum++) {\n\t\t\tpw.print(\"Case #\" + (caseNum + 1) + \": \");\n\t\t\tProblem1 r = new Problem1();\n\t\t\tr.n = sc.nextInt();\n\t\t\tr.map = new int[r.n];\n\t\t\tr.letter = new int[r.n];\n\t\t\t\n\t\t\tfor(int index = 0; index < r.n; index++) {\n\t\t\t\tr.map[index] = sc.nextInt();\n\t\t\t\tr.letter[index] = index;\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i = 0; i < r.n; i++) {\n\t\t\t\tfor(int j = i+1; j < r.n ; j++) {\n\t\t\t\t\tif(r.map[i] < r.map[j]) {\n\t\t\t\t\t\tint temp = r.map[i];\n\t\t\t\t\t\tr.map[i] = r.map[j];\n\t\t\t\t\t\tr.map[j] = temp;\n\t\t\t\t\t\t\n\t\t\t\t\t\ttemp = r.letter[i];\n\t\t\t\t\t\tr.letter[i] = r.letter[j];\n\t\t\t\t\t\tr.letter[j] = temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\twhile(true) {\n\t\t\t\t\n\t\t\t\tif(r.map[0] == 0)\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tif(r.map[0] > 1){\n\t\t\t\t\tif(r.map[1] > 0) {\n\t\t\t\t\t\tr.map[0] = r.map[0] - 1;\n\t\t\t\t\t\tr.map[1] = r.map[1] - 1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tpw.print(Character.toChars(r.letter[0] + 65));\n\t\t\t\t\t\tpw.print(Character.toChars(r.letter[1] + 65));\n\t\t\t\n\t\t\t\t\t\tpw.print(\" \");\n\t\t\t\t\t\tfor(int i = 0; i < r.n; i++) {\n\t\t\t\t\t\t\tfor(int j = i+1; j < r.n ; j++) {\n\t\t\t\t\t\t\t\tif(r.map[i] < r.map[j]) {\n\t\t\t\t\t\t\t\t\tint temp = r.map[i];\n\t\t\t\t\t\t\t\t\tr.map[i] = r.map[j];\n\t\t\t\t\t\t\t\t\tr.map[j] = temp;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\ttemp = r.letter[i];\n\t\t\t\t\t\t\t\t\tr.letter[i] = r.letter[j];\n\t\t\t\t\t\t\t\t\tr.letter[j] = temp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr.map[0] = r.map[0] - 1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tpw.print(Character.toChars(r.letter[0] + 65));\n\t\t\t\n\t\t\t\t\t\tpw.print(\" \");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} \n\t\t\t\t} else {\n\t\t\t\t\tif(r.map[1] > 0) {\n\t\t\t\t\t\tif((r.n % 2) != 0 && r.map[2] > 0) {\n\t\t\t\t\t\t\tr.map[0] = r.map[0] - 1;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tpw.print(Character.toChars(r.letter[0] + 65));\n\t\t\t\n\t\t\t\t\t\t\tpw.print(\" \");\n\t\t\t\t\t\t\tfor(int i = 0; i < r.n; i++) {\n\t\t\t\t\t\t\t\tfor(int j = i+1; j < r.n ; j++) {\n\t\t\t\t\t\t\t\t\tif(r.map[i] < r.map[j]) {\n\t\t\t\t\t\t\t\t\t\tint temp = r.map[i];\n\t\t\t\t\t\t\t\t\t\tr.map[i] = r.map[j];\n\t\t\t\t\t\t\t\t\t\tr.map[j] = temp;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\ttemp = r.letter[i];\n\t\t\t\t\t\t\t\t\t\tr.letter[i] = r.letter[j];\n\t\t\t\t\t\t\t\t\t\tr.letter[j] = temp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tr.map[0] = r.map[0] - 1;\n\t\t\t\t\t\t\tr.map[1] = r.map[1] - 1;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tpw.print(Character.toChars(r.letter[0] + 65));\n\t\t\t\t\t\t\tpw.print(Character.toChars(r.letter[1] + 65));\n\t\t\t\t\t\t\tpw.print(\" \");\n\t\t\t\t\t\t\tfor(int i = 0; i < r.n; i++) {\n\t\t\t\t\t\t\t\tfor(int j = i+1; j < r.n ; j++) {\n\t\t\t\t\t\t\t\t\tif(r.map[i] < r.map[j]) {\n\t\t\t\t\t\t\t\t\t\tint temp = r.map[i];\n\t\t\t\t\t\t\t\t\t\tr.map[i] = r.map[j];\n\t\t\t\t\t\t\t\t\t\tr.map[j] = temp;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\ttemp = r.letter[i];\n\t\t\t\t\t\t\t\t\t\tr.letter[i] = r.letter[j];\n\t\t\t\t\t\t\t\t\t\tr.letter[j] = temp;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr.map[0] = r.map[0] - 1;\n\t\t\t\t\t\t\n\t\t\t\t\t\tpw.print(Character.toChars(r.letter[0] + 65));\n\t\t\t\t\t\tpw.print(\" \");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tpw.println();\n\t\t}\n\t\tpw.flush();\n\t\tpw.close();\n\t\tsc.close();\n\t}\n\n\n\n}\n", "idx": "8948"}
{"func": "package googlejam8.p952;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Senate {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int numOfCases = scanner.nextInt();\n        for (int i = 1; i <= numOfCases; ++i) {\n            int numOfParties = scanner.nextInt();\n            List<Integer> parties = new ArrayList<>();\n            for (int v = 0; v < numOfParties; ++v) {\n                int num = scanner.nextInt();\n                parties.add(num);\n            }\n\t\t\tfinal List<Integer> parties1 = parties;\n\t\t\tStringBuffer sb = new StringBuffer(\"\");\n\t\t\tint sum = parties1.stream().reduce(0, (a, v) -> a + v);;\n\t\t\twhile (sum != 0) {\n\t\t\t    if (sum % 2 == 1) {\n\t\t\t        int max1 = 0;\n\t\t\t\t\tint position = -1;\n\t\t\t\t\tfor (int i1 = 0; i1 < parties1.size(); i1++) {\n\t\t\t\t\t    if (parties1.get(i1) > max1) {\n\t\t\t\t\t        position = i1;\n\t\t\t\t\t        max1 = parties1.get(i1);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\tint max = position;\n\t\t\t        parties1.set(max, parties1.get(max) - 1);\n\t\t\t        sb.append(\" \").append((char)('A' + max));\n\t\t\t    } else {\n\t\t\t        int max2 = 0;\n\t\t\t\t\tint position1 = -1;\n\t\t\t\t\tfor (int i2 = 0; i2 < parties1.size(); i2++) {\n\t\t\t\t\t    if (parties1.get(i2) > max2) {\n\t\t\t\t\t        position1 = i2;\n\t\t\t\t\t        max2 = parties1.get(i2);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\tint max = position1;\n\t\t\t\t\tint max1 = 0;\n\t\t\t\t\tint position = -1;\n\t\t\t\t\tfor (int i1 = 0; i1 < parties1.size(); i1++) {\n\t\t\t\t\t    if (i1 != max && parties1.get(i1) > max1) {\n\t\t\t\t\t        position = i1;\n\t\t\t\t\t        max1 = parties1.get(i1);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t        int max2nd = position;\n\t\t\t        if (max2nd == -1) {\n\t\t\t            System.err.println(\"Something wrong\");\n\t\t\t            parties1.forEach(System.err::print);\n\t\t\t            System.err.println(\" \" + sb.toString());\n\t\t\t            throw new RuntimeException(\"Something went wrong\");\n\t\t\t        } else {\n\t\t\t            if ((((double) parties1.get(max2nd)) / ((double) (sum - 2))) >= 0.6){\n\t\t\t                sb.append(\" \").append((char) ('A'+max)).append((char)('A'+max2nd));\n\t\t\t                parties1.set(max, parties1.get(max) - 1);\n\t\t\t                parties1.set(max2nd, parties1.get(max2nd) - 1);\n\t\t\t            } else {\n\t\t\t                sb.append(\" \").append((char)('A'+max)).append((char)('A'+max));\n\t\t\t                parties1.set(max, parties1.get(max) - 2);\n\t\t\t            }\n\t\t\t        }\n\t\t\t    }\n\t\t\t    sum = parties1.stream().reduce(0, (a, v) -> a + v);\n\t\t\t}\n            String plan = sb.toString();\n            System.out.println(\"Case #\" + i + \":\" + plan);\n            scanner.nextLine();\n        }\n    }\n}\n", "idx": "8952"}
{"func": "package googlejam8.p956;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.math.BigInteger;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\nimport java.util.TreeMap;\r\n\r\n\r\npublic class SenateEvac {\r\n\tpublic static void main(String[] args){\r\n\t\tFile a = new File(\"A-small-attempt2.in\");\r\n\t\tScanner input = null;\r\n\t\ttry {\r\n\t\t\tinput = new Scanner(a);\r\n\t\t} catch (FileNotFoundException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t//Scanner input = new Scanner(System.in);\r\n\t\t\r\n\t\tFile b = new File(\"A-output.txt\");\r\n\t\tFileWriter fw = null;\r\n\t\ttry {\r\n\t\t\tfw = new FileWriter(b);\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\tint number = input.nextInt();\r\n\t\tinput.nextLine();\r\n\t\tint cases = number;\r\n\t\t\r\n\t\twhile(number > 0){\r\n\t\t\tint parties = input.nextInt();\r\n\t\t\tint[] partySizes = new int[parties];\r\n\t\t\tint totalMembers = 0;\r\n\t\t\tfor(int i = 0; i < parties; i ++){\r\n\t\t\t\tpartySizes[i] = input.nextInt();\r\n\t\t\t\ttotalMembers += partySizes[i];\r\n\t\t\t}\r\n\t\t\tString result = \"\";\r\n\t\t\t\r\n\t\t\twhile(totalMembers > 0){\r\n\t\t\t\tint max = -1;\r\n\t\t\t\tint maxIndex = -1;\r\n\t\t\t\tint otherIndex = -1;\r\n\t\t\t\tint thirdIndex = -1;\r\n\t\t\t\tfor (int i =0; i < parties; i++){\r\n\t\t\t\t\tif (partySizes[i] > max){\r\n\t\t\t\t\t\tmax = partySizes[i];\r\n\t\t\t\t\t\tmaxIndex = i;\r\n\t\t\t\t\t} else if (partySizes[i] == max){\r\n\t\t\t\t\t\tif(otherIndex != -1 && max == 1){\r\n\t\t\t\t\t\t\totherIndex = -1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\totherIndex = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(otherIndex != -1){\r\n\t\t\t\t\tpartySizes[maxIndex] -= 1;\r\n\t\t\t\t\tpartySizes[otherIndex] -= 1;\r\n\t\t\t\t\tresult = result + (char)(65 + maxIndex) + (char) (65 + otherIndex) + \" \";\r\n\t\t\t\t\ttotalMembers -= 2;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpartySizes[maxIndex] -= 1;\r\n\t\t\t\t\tresult = result + (char)(65 + maxIndex) + \" \";\r\n\t\t\t\t\ttotalMembers -= 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tchar f = (char)65;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\r\n\t\t\t\tfw.write(\"Case #\" + (cases - number + 1) + \": \" + result + \"\\n\");\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tnumber--;\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tfw.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n}\r\n", "idx": "8956"}
{"func": "package googlejam8.p963;\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by Igor Cha on 5/8/2016.\r\n */\r\npublic class ProblemA {\r\n    public static void main(String[] args) throws FileNotFoundException\r\n    {\r\n        FileReader file = new FileReader(\"A-small-attempt0.in\");\r\n        Scanner in = new Scanner(file);\r\n        PrintWriter out = new PrintWriter(\"output.txt\");\r\n\r\n        int t = in.nextInt();\r\n        char[] letters = \"ABCDEFGHIJKLMNOPQESTUVWXYZ\".toCharArray();\r\n        for(int i = 1; i<=t; i++)\r\n        {\r\n            int n = in.nextInt();\r\n            int[] ar = new int[n];\r\n            int[] c = new int[n];\r\n            for(int j = 0; j<n; j++)\r\n            {\r\n                ar[j] = in.nextInt();\r\n                c[j] = ar[j];\r\n            }\r\n            String output =\"\";\r\n            Arrays.sort(ar);\r\n            while(ar[n-1] > 0)\r\n            {\r\n                if(n==2 || ar[n-3]==0)\r\n                {\r\n                    for(int k = 0; k<c.length; k++)\r\n                    {\r\n                        if(c[k] == ar[n-1])\r\n                        {\r\n                            output += letters[k];\r\n                            c[k]--;\r\n                        }\r\n                    }\r\n                    ar[n-1]--;\r\n                    ar[n-2]--;\r\n                    output+=\" \";\r\n                }\r\n                else\r\n                {\r\n                    for(int k = 0; k<c.length; k++)\r\n                    {\r\n                        if(c[k] == ar[n-1])\r\n                        {\r\n                            output += letters[k]+\" \";\r\n                            c[k]--;\r\n                            break;\r\n                        }\r\n                    }\r\n                    ar[n-1]--;\r\n\r\n                }\r\n                Arrays.sort(ar);\r\n            }\r\n            out.println(\"Case #\" + i + \": \" + output);\r\n\r\n        }\r\n        in.close();\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "8963"}
{"func": "package googlejam8.p972;\n\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport java.util.Arrays;\n\npublic class GameA {\n\tpublic final static String inpath = \"//Users/simon/Downloads/B-small-attempt0.in\";\n\tpublic final static String outpath = \"//Users/simon/Downloads/A-small-result.txt\";\n\tpublic static PrintWriter writer = null;\n\tpublic static Integer testint = null;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tint noOfCase = 0;\n\t\t\n\t\twriter = new PrintWriter(new File(outpath));\n\n\t\ttry (BufferedReader br = new BufferedReader(new FileReader(inpath))) {\n\n\t\t\tString line =br.readLine();\n\t\t\tnoOfCase = Integer.parseInt(line);\n\t\t\t//System.out.println(\"NoOfCase: \" + noOfCase);\n\t\t\tString result = \"\";\n\n\t\t\tfor (int caseNo = 0; caseNo < noOfCase; caseNo++) {\n\t\t\t\tint noOfParty =Integer.parseInt(br.readLine());\t\n\t\t\t\tline = br.readLine();\n\t\t\t\tString[] lineSplit = line.split(\" \");\n\t\t\t\tint[] senors = new int[noOfParty];\n\t\t\t\tString[] senParty = new String[noOfParty];\n\t\t\t\tresult =\"\";\n\t\t\t\tint total = 0; \n\t\t\t\tfor (byte i=0; i<noOfParty; i++){\n\t\t\t\t\tsenors[i] = Integer.parseInt(lineSplit[i]);\n\t\t\t\t\ttotal += senors[i];\n\t\t\t\t\t\n\t\t\t\t\tchar c = 'A' ;\n\t\t\t\t\tc += i;\n\t\t\t\t\tsenParty[i] = lineSplit[i] + c;\n\t\t\t\t\t//System.out.println(senParty[i] + \" \");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\twhile  (total>0){\n\t\t\t\t\tArrays.sort(senParty);\n\t\t\t\t\tString maxParty = senParty[noOfParty-1];\n\t\t\t\t\tString maxPartyMinux = senParty[noOfParty-2];\n\t\t\t\t\t\n\t\t\t\t\t//System.out.println (\"Test: \" + maxParty + \" , \" + maxPartyMinux);\n\t\t\t\t\t\n\t\t\t\t\tif (total!=3){\n\t\t\t\t\t\t\tresult = result + maxParty.charAt(1) + \"\";\n\t\t\t\t\t\t\tchar c = maxParty.charAt(0);\n\t\t\t\t\t\t\tc = (char)( c - 1) ;\n\t\t\t\t\t\t\tsenParty[noOfParty-1] = c + \"\" +  maxParty.charAt(1);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ( (maxPartyMinux.charAt(0) - '0') !=0){\n\t\t\t\t\t\t\t\tresult = result + maxPartyMinux.charAt(1) ;\n\t\t\t\t\t\t\t\tc = maxPartyMinux.charAt(0);\n\t\t\t\t\t\t\t\tc = (char) (c- 1) ;\n\t\t\t\t\t\t\t\tsenParty[noOfParty-2] = c + \"\" +  maxPartyMinux.charAt(1);\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttotal = total -2;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tresult = result + maxParty.charAt(1) + \"\";\n\t\t\t\t\t\tchar c = maxParty.charAt(0);\n\t\t\t\t\t\tc = (char)( c - 1) ;\n\t\t\t\t\t\tsenParty[noOfParty-1] = c + \"\" +  maxParty.charAt(1);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\ttotal = total -\t1;\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tif (total>0)\n\t\t\t\t\t\tresult = result + \" \";\n\t\t\t\t}\n\t\t\t\tString msg = String.format(\"Case #%d: %S \", caseNo+1, result);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\twriter.println(msg);\n\t\t\t\tSystem.out.println(msg);\n\n\t\t\t}\n\t\t\tbr.close();\n\n\t\t}\n\t\twriter.close();\n\t\t\n\t}\t\n\t\n\n}", "idx": "8972"}
{"func": "package googlejam8.p978;\n\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\n\npublic class Problem1A {\n\n\tprivate static BufferedReader in;\n\tprivate static PrintWriter out;\n\tpublic static boolean SUBMIT = true;\n\tpublic static final String NAME = \"A-small-attempt1\";\n\tstatic String alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t\n\tpublic static void main(String[] args) throws IOException{\n\t\tif (SUBMIT) {\n\t\t      in = new BufferedReader(new FileReader(NAME + \".in\"));\n\t\t      out = new PrintWriter(NAME + \".out\");\n\t\t    } else {\n\t\t      in = new BufferedReader(new FileReader(\"testA.in\"));\n\t\t      out = new PrintWriter(\"testA.out\");\n\t\t    }\n\n\t\t \tString line = in.readLine();\n\t\t    int totalCases = Integer.parseInt(line);\n\t\t    for(int caseNum=1;caseNum<=totalCases;caseNum++){\n\t\t    \tout.print(\"Case #\" + caseNum + \": \");\n\t\t    \tin.readLine();\n\t\t    \tLinkedHashMap<String, Integer> map = new LinkedHashMap<String, Integer>();\n\t\t\t\tString test = in.readLine();\n\t\t\t\tString[] number = test.split(\" \");\n\t\t\t\tfor(int k=0;k<number.length;k++){\n\t\t\t\t\t map.put(\"\"+alpha.charAt(k), Integer.parseInt(number[k]));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tString result = \"\";\n\t\t\t\t\n\t\t\t\twhile(true){\n\t\t\t\t\n\t\t\t\tint current = -1;\n\t\t\t\tString equalKey = \"\";\n\t\t\t\tString bigKey = \"\";\n\t\t\t\tString currentKey = \"\";\n\t\t\t\tboolean zeroFOund = false;\n\t\t\t\t\n\t\t\t\tIterator it = map.entrySet().iterator();\n\t\t\t\twhile (it.hasNext()) {\n\t\t\t\t    Map.Entry pair = (Map.Entry)it.next();\n\t\t\t\t    int val = (int) pair.getValue();\n\t\t\t\t    if(val == 0){\n\t\t\t\t    \tzeroFOund = true;\n\t\t\t\t    \tcontinue;\n\t\t\t\t    }else{\n\t\t\t\t    \tzeroFOund = false;\n\t\t\t\t    }\n\t\t\t\t    if(current < val){\n\t\t\t\t    \tcurrent = val;\n\t\t\t\t    \tcurrentKey = (String) pair.getKey();\n\t\t\t\t    \tequalKey = \"\";\n\t\t\t\t    \tbigKey = (String) pair.getKey();\n\t\t\t\t    }else if(current == val){\n\t\t\t\t    \tequalKey = currentKey + (String) pair.getKey();\n\t\t\t\t    }\n\t\t\t\t    System.out.println(pair.getKey() + \" = \" + pair.getValue());\n\t\t\t\t   // it.remove(); // avoids a ConcurrentModificationException\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(equalKey.length() > 0){\n\t\t\t\t\tfor(int i=0;i<2;i++){\n\t\t\t\t\t\tString key = \"\"+equalKey.charAt(i);\n\t\t\t\t\t\tint value = map.get(key);\n\t\t\t\t\t\tvalue = value - 1;\n\t\t\t\t\t\tmap.put(key, value);\n\t\t\t\t\t\tresult = result + key;\n\t\t\t\t\t}\n\t\t\t\t\tresult = result + \" \";\n\t\t\t\t}else if(bigKey.length() > 0){\n\t\t\t\t\tint value = map.get(bigKey);\n\t\t\t\t\tif(value >= 2){\n\t\t\t\t\t\tvalue = value - 2;\t\n\t\t\t\t\t\tresult = result + bigKey + bigKey + \" \";\n\t\t\t\t\t}else{\n\t\t\t\t\t\tvalue = value - 1;\n\t\t\t\t\t\tresult = bigKey + \" \" + result;\n\t\t\t\t\t}\n\t\t\t\t\tmap.put(bigKey, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(zeroFOund){\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(result);\n\t\t\t\tout.print(result);\n\t\t\t\tout.println();\n\t\t    }\n\n\t\t    out.close();\n\t\t    System.exit(0);\n\t}\n\t\n\t\n}\n", "idx": "8978"}
{"func": "package googlejam8.p981;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tScanner sc;\r\n\t\ttry \r\n\t\t{\r\n\t\t\t//sc = new Scanner(new File(\"A.in\"));\r\n\t\t\tsc = new Scanner(new File(\"A-small-attempt0.in\"));\r\n\t\t\t//sc = new Scanner(new File(\"A-large-attempt0.in\"));\r\n\t\t\t//PrintWriter out = new PrintWriter(\"A.out\");\r\n\t\t\tPrintWriter out = new PrintWriter(\"A-small-attempt0.out\");\r\n\t\t\t//PrintWriter out = new PrintWriter(\"A-large-attempt0.out\");\r\n\t\t\tint T = Integer.parseInt(sc.nextLine());\r\n\t\t\tint testcase = 1;\r\n\t\t\tchar[] alphabet = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};\r\n\t\t\twhile(T-- > 0)\r\n\t\t\t{\r\n\t\t\t\tout.print(\"Case #\" + testcase + \": \");\r\n\t\t\t\tint N = Integer.parseInt(sc.nextLine());\r\n\t\t\t\tString line = sc.nextLine();\r\n\t\t\t\tString[] arr = line.split(\" \");\r\n\t\t\t\tint[] p = new int[N];\r\n\t\t\t\tint sump = 0;\r\n\t\t\t\tfor(int i=0; i<N; i++)\r\n\t\t\t\t\t{\tp[i] = Integer.parseInt(arr[i]);\r\n\t\t\t\t\t\tsump += p[i];\r\n\t\t\t\t\t}\r\n\t\t\t\tint large=-1,seclarge=-1;\r\n\t\t\t\tint lar,seclar;\r\n\t\t\t\tdouble tempsum,tempsum1,tempsum2,tempsum3;\r\n\t\t\t\twhile(sump>0)\r\n\t\t\t\t{\r\n\t\t\t\t\t\r\n\t\t\t\t\t//find largest & secondlargest\r\n\t\t\t\t\tlar = Integer.MIN_VALUE;\r\n\t\t\t\t\tseclar = Integer.MIN_VALUE;\r\n\t\t\t\t\tfor(int i=0; i<N; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(p[i] >= lar)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\tseclar = lar;\r\n\t\t\t\t\t\tseclarge = large;\r\n\t\t\t\t\t\tlar = p[i];\r\n\t\t\t\t\t\tlarge = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(p[i] >= seclar)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tseclar = p[i];\r\n\t\t\t\t\t\t\tseclarge = i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//out.println();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(sump <=2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twhile(p[large]>0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp[large] = p[large] - 1;\r\n\t\t\t\t\t\t\tout.print(alphabet[large]);\r\n\t\t\t\t\t\t\tsump = sump-1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(p[seclarge]>0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tp[seclarge] = p[seclarge] - 1;\r\n\t\t\t\t\t\t\tout.print(alphabet[seclarge]);\r\n\t\t\t\t\t\t\tsump = sump - 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tboolean flag = true;\r\n\t\t\t\t\tfor(int i=0; i<N; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(p[i] > 1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tflag = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(flag)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(N%2 == 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tout.print(alphabet[large]);\r\n\t\t\t\t\t\t\tout.print(alphabet[seclarge]);\r\n\t\t\t\t\t\t\tout.print(\" \");\r\n\t\t\t\t\t\t\tp[large] = p[large] - 1;\r\n\t\t\t\t\t\t\tp[seclarge] = p[seclarge] -1;\r\n\t\t\t\t\t\t\tsump = sump - 2;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tout.print(alphabet[large]);\r\n\t\t\t\t\t\t\tout.print(\" \");\r\n\t\t\t\t\t\t\tp[large] = p[large] - 1;\r\n\t\t\t\t\t\t\tsump = sump - 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t//out.print(alphabet[large] + \" \" + alphabet[seclarge]+\" \" + p[large] + \" \" + p[seclarge]+\" \"+sump);\r\n\t\t\t\t\tif(p[large] > 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdouble val = sump-2;\r\n\t\t\t\t\t\t//out.print(\" ... \" +p[seclarge] + \" \" + val);\r\n\t\t\t\t\t\ttempsum1 = (p[seclarge]/val)*100;  //2 largest removed\r\n\t\t\t\t\t\tif(tempsum1 <= 50)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//out.print(\"loop 1 \"+ tempsum1);\r\n\t\t\t\t\t\t\tp[large] = p[large] - 2;\r\n\t\t\t\t\t\t\tout.print(alphabet[large]);\r\n\t\t\t\t\t\t\tout.print(alphabet[large]);\r\n\t\t\t\t\t\t\tout.print(\" \");\r\n\t\t\t\t\t\t\tsump = sump - 2;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(p[seclarge] > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttempsum2 = ((p[seclarge] - 1)/(sump-2))*100; //1 largest & 1 second largest\r\n\t\t\t\t\t\tif(tempsum2 <= 50)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//out.write(\"loop2 + \" + tempsum2);\r\n\t\t\t\t\t\t\tout.print(alphabet[large]);\r\n\t\t\t\t\t\t\tout.print(alphabet[seclarge]);\r\n\t\t\t\t\t\t\tout.print(\" \");\r\n\t\t\t\t\t\t\tp[large] = p[large] - 1;\r\n\t\t\t\t\t\t\tp[seclarge] = p[seclarge] -1;\r\n\t\t\t\t\t\t\tsump = sump - 2;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttempsum = ((p[large]-1)/(sump-1))*100;\t//1 largest removed\r\n\t\t\t\t\ttempsum3 = ((p[seclarge])/(sump-1)) * 100; //1 largest removed\r\n\t\t\t\t\tif(tempsum <= 50 && tempsum3<=50)   //1 largest removed\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//out.write(\"loop3 \" + tempsum + \" \" + tempsum3 + \" \");\r\n\t\t\t\t\t\tout.print(alphabet[large]);\r\n\t\t\t\t\t\tout.print(\" \");\r\n\t\t\t\t\t\tp[large] = p[large] - 1;\r\n\t\t\t\t\t\tsump = sump - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\ttestcase++;\r\n\t\t\tout.println();\r\n\t\t} \r\n\t\t\tout.close();\r\n\t\t}\r\n\t\tcatch (FileNotFoundException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} \r\n\t}\r\n}\r\n", "idx": "8981"}
{"func": "package googlejam8.p985;\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.PrintStream;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class senateevac {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tint T,i,j,N,ptotal,evac=0,k,kcount=0,check=0;\r\n\t\tint [] P = new int[26];\r\n\t\tchar [] alphabet = new char[26];\r\n\t\tString [] result = new String[1000];\r\n\t\tScanner filein = new Scanner(new File(\"C:/codejamdata/A-small-attempt0.in\"));\r\n\t\tPrintStream fileout = new PrintStream(new FileOutputStream(\"C:/codejamdata/gcj1casoutput.txt\"));\r\n\t\talphabet[0] = 'A';\r\n\t\tfor(i=1;i<26;i++)\r\n\t\t{\r\n\t\t\talphabet[i] = (char) ((int) alphabet[i-1] +1);\r\n\t\t}\r\n\t\tT = filein.nextInt();\r\n\t\tfor(i=0;i<T;i++)\r\n\t\t{\r\n\t\t\tN = filein.nextInt();\r\n\t\t\tptotal=0;\r\n\t\t\tfor(j=0;j<N;j++)\r\n\t\t\t{\r\n\t\t\t\tP[j] = filein.nextInt();\r\n\t\t\t\t//System.out.println(P[j]);\r\n\t\t\t\tptotal = ptotal + P[j];\r\n\t\t\t}\r\n\t\t\t//System.out.println(\"ptotal is \" + ptotal);\r\n\t\t\tevac=0;\r\n\t\t\tk=0;\r\n\t\t\tkcount=0;\r\n\t\t\tif(ptotal%2>0)\r\n\t\t\t\tcheck = (ptotal+1)/2;\r\n\t\t\telse\r\n\t\t\t\tcheck = ptotal/2;\r\n\t\t\twhile(evac==0)\r\n\t\t\t{\r\n\t\t\t\tif(ptotal<=0)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tresult[k] = \"\";\r\n\t\t\t\tfor(j=0;j<N;j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(P[j] >= check)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult[k] = result[k] + alphabet[j];\r\n\t\t\t\t\t\tkcount++;\r\n\t\t\t\t\t\tP[j]--;\r\n\t\t\t\t\t\t//System.out.println(result[k] + \" \" + ptotal);\r\n\t\t\t\t\t\tif(kcount==2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tptotal = ptotal -kcount;\r\n\t\t\t\tkcount=0;\r\n\t\t\t\tif(result[k]==\"\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(j=0;j<N;j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(P[j]>0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tresult[k] = result[k] + alphabet[j];\r\n\t\t\t\t\t\t\tptotal--;\r\n\t\t\t\t\t\t\tkcount++;\r\n\t\t\t\t\t\t\tP[j]--;\r\n\t\t\t\t\t\t\t//System.out.println(result[k] + \" first  \" + ptotal);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(ptotal != 1 )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tkcount=0;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tk++;\r\n\t\t\t\tif(ptotal%2>0)\r\n\t\t\t\t\tcheck = (ptotal+1)/2;\r\n\t\t\t\telse\r\n\t\t\t\t\tcheck = ptotal/2;\r\n\t\t\t}\r\n\t\t\tfileout.print(\"Case #\" + (i+1) + \": \");\r\n\t\t\tfor(j=0;j<k;j++)\r\n\t\t\t{\r\n\t\t\t\tfileout.print(\" \" + result[j]);\r\n\t\t\t}\r\n\t\t\tfileout.println();\r\n\r\n\t\t}\r\n\t\tfilein.close();\r\n\t\tfileout.close();\r\n\t}\r\n\r\n}\r\n", "idx": "8985"}
{"func": "package googlejam8.p986;\nimport java.util.*;\r\npublic class GoogleCodeJamProblem {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        int t = in.nextInt();\r\n        for (int i = 0; i < t; i++) {\r\n            int n = in.nextInt();\r\n            int[] num = new int[n];\r\n            int total = 0;\r\n            for (int j = 0; j < n; j++) {\r\n                num[j] = in.nextInt();\r\n                total += num[j];\r\n            }\r\n            String[] alph = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\",\r\n                \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\r\n            String evacuation = \"\";\r\n            if (n == 2) {\r\n                if (total == 2) {\r\n                    evacuation = \"AB\";\r\n                } else if (total == 4) {\r\n                    evacuation = \"AB AB\";\r\n                } else if (total == 6) {\r\n                    evacuation = \"AB AB AB\";\r\n                } else if (total == 8) {\r\n                    evacuation = \"AB AB AB AB\";\r\n                }\r\n            } else {\r\n                if (num[0] == 1 && num[1] == 1 && num[2] == 1) {\r\n                    evacuation = \"A BC\";\r\n                } else {\r\n                    int a = num[0];\r\n                    int b = num[1];\r\n                    int c = num[2];\r\n                    // <editor-fold>\r\n                    if (a == 4 || b == 4 || c == 4) {\r\n                        if (a == 4) {\r\n                            num[0] = 3;\r\n                            evacuation += \"A\";\r\n                        }\r\n                        if (b == 4) {\r\n                            num[1] = 3;\r\n                            evacuation += \"B\";\r\n                        }\r\n                        if (c == 4) {\r\n                            num[2] = 3;\r\n                            evacuation += \"C\";\r\n                        }\r\n                        evacuation += \" \";\r\n                    }\r\n                    // </editor-fold>\r\n                    a = num[0];\r\n                    b = num[1];\r\n                    c = num[2];\r\n                    // <editor-fold>\r\n                    if (a == 3 || b == 3 || c == 3) {\r\n                        if (a == 3 && b == 3 && c == 3) {\r\n                            evacuation = \"A BC A BC A BC\";\r\n                            num[0] = 0;\r\n                            num[1] = 0;\r\n                            num[2] = 0;\r\n                        } else {\r\n                            if (a == 3) {\r\n                                evacuation += \"A\";\r\n                                num[0] = 2;\r\n                            }\r\n                            if (b == 3) {\r\n                                evacuation += \"B\";\r\n                                num[1] = 2;\r\n                            }\r\n                            if (c == 3) {\r\n                                evacuation += \"C\";\r\n                                num[2] = 2;\r\n                            }\r\n                            evacuation += \" \";\r\n                        }\r\n                    }\r\n                    // </editor-fold>\r\n                    a = num[0];\r\n                    b = num[1];\r\n                    c = num[2];\r\n                    // <editor-fold>\r\n                    if (a == 2 || b == 2 || c == 2) {\r\n                        if (a == 2 && b == 2 && c == 2) {\r\n                            evacuation += \"A BC A BC\";\r\n                            num[0] = 0;\r\n                            num[1] = 0;\r\n                            num[2] = 0;\r\n                        } else {\r\n                            if (a == 2) {\r\n                                num[0] = 1;\r\n                                evacuation += \"A\";\r\n                            }\r\n                            if (b == 2) {\r\n                                num[1] = 1;\r\n                                evacuation += \"B\";\r\n                            }\r\n                            if (c == 2) {\r\n                                num[2] = 1;\r\n                                evacuation += \"C\";\r\n                            }\r\n                            evacuation += \" \";\r\n                            evacuation += \"A BC\";\r\n                        }\r\n                    }\r\n                    // </editor-fold>\r\n                }\r\n            }\r\n            System.out.println(\"Case #\" + (i + 1) + \": \" + evacuation);\r\n        }\r\n    }\r\n    \r\n}\r\n", "idx": "8986"}
{"func": "package googlejam8.p992;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Collections;\nimport java.util.Vector;\n\n\npublic class MainRoundC {\n\tpublic static void main(String[] args) throws IOException {\n\t\t\tFile f = new File (\"A-small-attempt0.inahawaa\");\n\t\t\tFileWriter fw = new FileWriter (f);\n\t\t\tInputStream ips=new FileInputStream(\"A-small-attempt0.in\"); \n\t\t\tInputStreamReader ipsr=new InputStreamReader(ips);\n\t\t\tBufferedReader br=new BufferedReader(ipsr);\n\t\t\tString ligne = br.readLine();\n\t\t\tString out;\n\t\t\tint hhh = 0;\n\t\t\twhile ((ligne=br.readLine())!=null){\n\t\t\t\tligne=br.readLine();\n\t\t\t\ttry{\n\t\t\t\t\thhh++;\n\t\t\t\t\tString s = ligne;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tString[] elements = s.split(\" \");\n\t\t\t\t\tVector<Integer> output = new Vector<Integer>() ; \n\t\t\t\t\tVector<Character> outputL = new Vector<Character>() ; \n\t\t\t\t\tString letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\t\t\t\t\tfor (int i = 0 ;i<elements.length;i++){\n\t\t\t\t\t\toutput.add(Integer.parseInt(elements[i]));\n\t\t\t\t\t\toutputL.add(letters.charAt(i));\n\t\t\t\t\t\tSystem.out.println(output.elementAt(i)+\"  \"+outputL.elementAt(i));\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tboolean estnull = true;\n\t\t\t\t\tfor(int z = 0; z< output.size();z++){\n\t\t\t\t\t\tSystem.out.print(output.elementAt(z));\n\t\t\t\t\t\tif(output.elementAt(z) != 0){\n\t\t\t\t\t\t\testnull = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tString ch = \"\";\n\t\t\t\t\twhile(!estnull){\n\t\t\t\t\t\tch = ch + \" \";\n\t\t\t\t\tint maxIndex = 0;\n\t\t\t\t\tfor (int i = 1; i < output.size(); i++){\n\t\t\t\t\t   int newnumber = output.elementAt(i);\n\t\t\t\t\t   if (newnumber > output.elementAt(maxIndex)){\n\t\t\t\t\t   maxIndex = i;\n\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t\t//System.out.println(outputL.elementAt(maxIndex));\n\t\t\t\t\t\n\t\t\t\t\tint maxIndex2 = 0;\n\t\t\t\t\tint k = output.elementAt(maxIndex);\n\t\t\t\t\tint occ = Collections.frequency(output, k);\n\t\t\t\t\tif(occ != output.size()){\n\t\t\t\t\twhile(output.elementAt(maxIndex2) == output.elementAt(maxIndex)){\n\t\t\t\t\t\tmaxIndex2++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tfor (int i = maxIndex2+1; i < output.size(); i++){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(output.elementAt(i) != k){\n\t\t\t\t\t\t   int newnumber = output.elementAt(i);\n\t\t\t\t\t\t   //System.out.println(\"new nubr :\"+newnumber);\n\t\t\t\t\t\t   if (newnumber > output.elementAt(maxIndex2)){\n\t\t\t\t\t\t\t  // System.out.println(\"haw output[i] : \"+output.elementAt(i)+\"  haw output[maxindex2] :\"+output.elementAt(maxIndex2));\n\t\t\t\t\t\t   maxIndex2 = i;\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t\t//System.out.println(outputL.elementAt(maxIndex2));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t if(occ==1 && occ != output.size()){\n\t\t\t\t\t\tint dif = output.elementAt(maxIndex)-output.elementAt(maxIndex2);\n\t\t\t\t\t\tif(dif == 1){\n\t\t\t\t\t\t\tch = ch+outputL.elementAt(maxIndex);\n\t\t\t\t\t\t\tSystem.out.println(outputL.elementAt(maxIndex));\n\t\t\t\t\t\t\toutput.set(maxIndex, output.elementAt(maxIndex)-1);\n\t\t\t\t\t\t}else if(dif >= 2){\n\t\t\t\t\t\t\t//System.out.println(\"slt\");\n\t\t\t\t\t\t\tch = ch+outputL.elementAt(maxIndex)+outputL.elementAt(maxIndex);\n\t\t\t\t\t\t\tSystem.out.print(outputL.elementAt(maxIndex));\n\t\t\t\t\t\t\tSystem.out.println(outputL.elementAt(maxIndex));\n\t\t\t\t\t\t\toutput.set(maxIndex, output.elementAt(maxIndex)-2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(occ >= 2 && occ != output.size()){\n\t\t\t\t\t\tch = ch+outputL.elementAt(maxIndex);\n\t\t\t\t\t\tSystem.out.print(outputL.elementAt(maxIndex));\n\t\t\t\t\t\toutput.set(maxIndex, output.elementAt(maxIndex)-1);\n\t\t\t\t\t\tint y = maxIndex;\n\t\t\t\t\t\twhile(y< output.size()){\n\t\t\t\t\t\t\ty++;\n\t\t\t\t\t\t\tif(output.elementAt(y) == k){\n\t\t\t\t\t\t\t\tch = ch+outputL.elementAt(y);\n\t\t\t\t\t\t\t\tSystem.out.println(outputL.elementAt(y));\n\t\t\t\t\t\t\t\toutput.set(y, output.elementAt(y)-1);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}else if(occ > 2 && occ == output.size()){\n\t\t\t\t\t\tch = ch+outputL.elementAt(maxIndex);\n\t\t\t\t\t\tSystem.out.println(outputL.elementAt(maxIndex));\n\t\t\t\t\t\toutput.set(maxIndex, output.elementAt(maxIndex)-1);\n\t\t\t\t\t}\n\t\t\t\t\telse if(occ == 2 && occ == output.size()){\n\t\t\t\t\t\tch = ch+outputL.elementAt(maxIndex);\n\t\t\t\t\t\tSystem.out.print(outputL.elementAt(maxIndex));\n\t\t\t\t\t\toutput.set(maxIndex, output.elementAt(maxIndex)-1);\n\t\t\t\t\t\tint y = maxIndex;\n\t\t\t\t\t\twhile(y< output.size()){\n\t\t\t\t\t\t\ty++;\n\t\t\t\t\t\t\tif(output.elementAt(y) == k){\n\t\t\t\t\t\t\t\tch = ch+outputL.elementAt(y);\n\t\t\t\t\t\t\t\tSystem.out.println(outputL.elementAt(y));\n\t\t\t\t\t\t\t\toutput.set(y, output.elementAt(y)-1);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if( occ != output.size()){\n\t\t\t\t\t\tch = ch+outputL.elementAt(maxIndex);\n\t\t\t\t\t\tSystem.out.println(outputL.elementAt(maxIndex));\n\t\t\t\t\t\toutput.set(maxIndex, output.elementAt(maxIndex)-1);\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"ahawaaaaa  \"+ch);\n\t\t\t\t\testnull = true;\n\t\t\t\t\tfor(int z = 0; z< output.size();z++){\n\t\t\t\t\t\tSystem.out.print(output.elementAt(z));\n\t\t\t\t\t\tif(output.elementAt(z) != 0){\n\t\t\t\t\t\t\testnull = false;\n\t\t\t\t\t\t\t//break;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t fw.write (\"Case #\" + hhh + \": \" + ch +\"\\r\\n\");\n\t\t\t\t}catch(Exception e){\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tbr.close(); \n\t\t\tfw.close();\n\n\t}\n\n}\n", "idx": "8992"}
{"func": "package googlejam9.p001;\nimport java.util.*;\nimport java.io.*;\n\npublic class B\n{\n    static int N;\n\n    static int ans;\n\n    public static void main(String ... orange) throws Exception\n    {\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++)\n        {\n            int B = input.nextInt();\n            long M = input.nextLong();\n\n            if (M > (1L << (B - 2)))\n            {\n                System.out.printf(\"Case #%d: IMPOSSIBLE\\n\", n + 1);\n                continue;\n            }\n\n            boolean[][] slides = new boolean[B][B];\n            if (M == (1L << (B - 2)))\n            {\n            for (int i = 0; i < B; i++)\n                for (int j = i + 1; j < B; j++)\n                    slides[i][j] = true;\n            }\n            for (int i = 0; i + 1 < B; i++)\n                for (int j = i + 1; j + 1 < B; j++)\n                    slides[i][j] = true;\n            for (int i = 0; i + 2 < B; i++)\n                if ((M & (1L << i)) > 0)\n                    slides[i + 1][B - 1] = true;\n\n            System.out.printf(\"Case #%d: POSSIBLE\\n\", n + 1);\n            for (int i = 0; i < B; i++)\n            {\n                for (int j = 0; j < B; j++)\n                    System.out.print(slides[i][j] ? '1' : '0');\n                System.out.println();\n            }\n        }\n    }\n}\n", "idx": "9001"}
{"func": "package googlejam9.p004;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class ProblemB {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString fileName = args[0];\r\n\t\tProblemB obj = new ProblemB();\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(fileName));\n\t\tBufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(fileName + \".out\"));\n\t\t\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tfor (int i = 0; i < T; i++) {\n\t\t\tString str = br.readLine();\n\t\t\tStringTokenizer token = new StringTokenizer(str, \" \");\n\t\t\tint B = Integer.parseInt(token.nextToken());\n\t\t\tlong M = Long.parseLong(token.nextToken());\n\t\t\n\t\t\tboolean[][] mtx = new boolean[B][B];\n\t\t\tfor (int j = 1; j < B - 1; j++) {\n\t\t\t\tfor (int k = 0; k < j; k++) {\n\t\t\t\t\tmtx[k][j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tfor (int j = 0; j < B - 2; j++) {\n\t\t\t\tif (M >= (1L << (B - j - 3))) {\n\t\t\t\t\tmtx[B - j - 2][B - 1] = true;\n\t\t\t\t\tM -= (1L << (B - j - 3));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (M >= 1) {\n\t\t\t\tmtx[0][B - 1] = true;\n\t\t\t\tM -= 1;\n\t\t\t}\n\t\t\tif (M == 0) {\n\t\t\t\tbw.write(\"Case #\" + (i + 1) + \": \" + \"POSSIBLE\");\n\t\t\t\tbw.write(\"\\r\\n\");\n\t\t\t\tfor (int j = 0; j < B; j++) {\n\t\t\t\t\tfor (int k = 0; k < B; k++) {\n\t\t\t\t\t\tbw.write(mtx[j][k] ? '1' : '0');\n\t\t\t\t\t}\n\t\t\t\t\tbw.write(\"\\r\\n\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbw.write(\"Case #\" + (i + 1) + \": \" + \"IMPOSSIBLE\");\n\t\t\t\tbw.write(\"\\r\\n\");\n\t\t\t}\n\t\t}\n\t\tbw.close();\n\t\tbr.close();\r\n\t}\r\n}\r\n", "idx": "9004"}
{"func": "package googlejam9.p008;\n\n\nimport java.io.*;\n\n/**\n * @auther chao\n * @date 16/5/8\n */\npublic class B {\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(\"/Users/chao/Downloads/B-large.in\"));\n        //BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        FileWriter out = new FileWriter(\"/Users/chao/Desktop/B-large.txt\");\n        //PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\n        String s = in.readLine();\n        int m = Integer.parseInt(s);\n        for (int cases = 1; cases <= m; cases++) {\n            String[] ss = in.readLine().split(\" \");\n            int B = Integer.parseInt(ss[0]);\n            long M = Long.parseLong(ss[1]);\n            out.write(\"Case #\" + cases + \": \");\n            int n = B;\n\t\t\tlong x = 1;\n\t\t\tfor (int i1 = 0; i1 < B-2; i1++) {\n\t\t\t    x*=2;\n\t\t\t}\n            long max = x;\n            if (max >= M) {\n                out.write(\"POSSIBLE\\n\");\n                int[][] map = new int[n][n];\n                for (int i = 1; i < n; i++) {\n                    for (int j = i + 1; j < n; j++) {\n                        map[i][j] = 1;\n                    }\n                }\n                for (int k = 1; k < n; k++) {\n                    if (k != n-1) max = max/2;\n                    if (max <= M) {\n                        M-=max;\n                        map[0][k] = 1;\n                    }\n                }\n                for (int i = 0; i < n; i++) {\n                    for (int j = 0; j < n; j++) {\n                        out.write(\"\"+map[i][j]);\n                    }\n                    out.write(\"\\n\");\n                }\n            } else {\n                out.write(\"IMPOSSIBLE\\n\");\n            }\n        }\n        in.close();\n        out.flush();\n        out.close();\n    }\n\n}\n", "idx": "9008"}
{"func": "package googlejam9.p011;\n\r\n\r\nimport java.io.*;\r\nimport java.util.Scanner;\r\n\r\npublic class TaskB {\r\n    public static void main(String[] args) {\r\n        String fileName = \"B-large.in\";\r\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\r\n\r\n            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + \".out\"))) {\r\n                int tests = Integer.valueOf(br.readLine());\r\n                for (int test = 1; test <= tests; ++test) {\r\n                    Scanner scanner = new Scanner(br.readLine());\r\n                    int b = scanner.nextInt();\r\n                    long m = scanner.nextLong();\r\n                    long initM = m;\r\n                    bw.write(\"Case #\" + test + \": \");\r\n                    int tt[][] = new int[b][b];\r\n                    long max = ((long) Math.pow(2, b - 2));\r\n                    if (m > max) {\r\n                        bw.write(\"IMPOSSIBLE\\n\");\r\n                    } else {\r\n                        bw.write(\"POSSIBLE\\n\");\r\n                        StringBuffer res = new StringBuffer();\r\n                        if (m == max) {\r\n                            res.append(\"1\");\r\n                            tt[0][b - 1] = 1;\r\n                            --m;\r\n                        } else {\r\n                            res.append(\"0\");\r\n                            tt[0][b - 1] = 0;\r\n                        }\r\n\r\n                        for (int i = 1; i < b; ++i) {\r\n                            boolean set = (m & 1) != 0;\r\n                            res.append(set ? \"1\" : \"0\");\r\n                            tt[0][b - 1 - i] = set ? 1 : 0;\r\n                            m = m >> 1;\r\n                        }\r\n                        bw.write(res.reverse().toString() + \"\\n\");\r\n                        for (int i = 2; i < b + 1; ++i) {\r\n                            StringBuffer sb = new StringBuffer();\r\n\r\n                            for (int j = 0; j < i; ++j) {\r\n                                sb.append(\"0\");\r\n                                tt[i - 1][j] = 0;\r\n                            }\r\n                            for (int j = 0; j < b - i; ++j) {\r\n                                sb.append(\"1\");\r\n                                tt[i - 1][j + i] = 1;\r\n                            }\r\n                            sb.append(\"\\n\");\r\n                            bw.write(sb.toString());\r\n                        }\r\n                        long val[] = new long[b];\r\n                        for (int i = 0; i < b; ++i)\r\n                            val[i] = 0;\r\n                        val[b - 1] = 1;\r\n                        for (int i = 0; i < b; ++i) {\r\n                            for (int j = b - i - 1; j >= 0; --j) {\r\n                                if (tt[j][b - i - 1] == 1)\r\n                                    val[j] += val[b - i - 1];\r\n                            }\r\n                        }\r\n                        if (initM != val[0])\r\n                            break;\r\n                    }\r\n\r\n                }\r\n                bw.close();\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}", "idx": "9011"}
{"func": "package googlejam9.p012;\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Main {\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tScanner scanner = new Scanner(System.in);\r\n\t\t//Scanner scanner = new Scanner(new FileInputStream(new File(\"B-large.in\")));\r\n\t\t//FileOutputStream fo = new FileOutputStream(new File(\"output.out\"));\r\n\t\tint t = scanner.nextInt();\r\n\t\tfor(int x = 1; x <= t; ++x){\r\n\t\t\tint b = scanner.nextInt();\r\n\t\t\tlong m = scanner.nextLong();\r\n\t\t\tSystem.out.print(\"Case #\"+x+\": \");\r\n\t\t\t//fo.write((\"Case #\"+x+\": \").getBytes());\r\n\t\t\tif(m > Math.pow(2, b - 2)){\r\n\t\t\t\tSystem.out.print(\"IMPOSSIBLE\\n\");\r\n\t\t\t\t//fo.write((\"IMPOSSIBLE\\n\").getBytes());\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tSystem.out.print(\"POSSIBLE\\n\");\r\n\t\t\t\t//fo.write((\"POSSIBLE\\n\").getBytes());\r\n\t\t\tint[][] slides = new int[b][b];\r\n\t\t\tfor(int i = 0; i < b; ++i){\r\n\t\t\t\tfor(int j = i + 1; j < b; ++j){\r\n\t\t\t\t\tslides[i][j] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tString str = Long.toBinaryString(m-1) + \"\";\r\n\t\t\tif(str.equals(\"0\"))\r\n\t\t\t\tstr = \"\";\r\n\t\t\twhile(str.length() < b - 1){\r\n\t\t\t\tstr = \"0\" + str;\r\n\t\t\t}\r\n\t\t\tstr += \"1\";\r\n\t\t\t//fo.write((str+\"\\n\").getBytes());\r\n\t\t\tSystem.out.println(str);\r\n\t\t\tfor(int i = 1; i < b; ++i){\r\n\t\t\t\tfor(int j = 0; j < b; ++j){\r\n\t\t\t\t\t//fo.write((slides[i][j]+\"\").getBytes());\r\n\t\t\t\t\tSystem.out.print(slides[i][j]);\r\n\t\t\t\t}\r\n\t\t\t\t//fo.write((\"\\n\").getBytes());\r\n\t\t\t\tSystem.out.print(\"\\n\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "9012"}
{"func": "package googlejam9.p019;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.PriorityQueue;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class B {\r\n\r\n\tstatic StringTokenizer st;\r\n\tstatic BufferedReader br;\r\n\tstatic PrintWriter pw;\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\r\n//\t\tbr = new BufferedReader(new FileReader(\"B-small.in\"));\r\n//\t\tpw = new PrintWriter(new BufferedWriter(new FileWriter(\"B-small.out\")));\r\n\t\tint cnttest = Integer.parseInt(next());\r\n\t\tfor (int test = 1; test <= cnttest; test++) {\r\n\t\t\tpw.print(\"Case #\"+test+\": \");\r\n\t\t\tint n = Integer.parseInt(next());\r\n\t\t\tlong m = Long.parseLong(next());\r\n\t\t\tint[][]a = new int[n+1][n+1];\r\n\t\t\tlong M = m;\r\n\t\t\tint pow = 0;\r\n\t\t\twhile (M % 2==0) {\r\n\t\t\t\tM /= 2;\r\n\t\t\t\tpow++;\r\n\t\t\t}\r\n\t\t\tboolean ok = true;\r\n\t\t\tif (M==1) {\r\n\t\t\t\tif (pow+2 > n)\r\n\t\t\t\t\tok = false;\r\n\t\t\t\telse {\r\n\t\t\t\t\tfor (int i = 1; i <= pow+1; i++) {\r\n\t\t\t\t\t\tfor (int j = 1; j < i; j++) {\r\n\t\t\t\t\t\t\ta[j][i] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (int i = 1; i <= pow+1; i++) {\r\n\t\t\t\t\t\ta[i][n] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\t\t\tfor (int j = 1; j < i; j++) {\r\n\t\t\t\t\t\ta[j][i] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int i = 0; i < 60; i++) {\r\n\t\t\t\t\tif ((m & (1l << i)) != 0) {\r\n\t\t\t\t\t\tif (i+2 >= n) {\r\n\t\t\t\t\t\t\tok = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ta[i+2][n] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (ok) {\r\n\t\t\t\tpw.println(\"POSSIBLE\");\r\n\t\t\t\tfor (int i = 1; i <= n; i++) {\r\n\t\t\t\t\tfor (int j = 1; j <= n; j++) {\r\n\t\t\t\t\t\tpw.print(a[i][j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpw.println();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tpw.println(\"IMPOSSIBLE\");\r\n\t\t}\r\n\t\tpw.close();\r\n\t}\r\n\r\n\r\n\tprivate static String next() throws IOException{\r\n\t\twhile (st==null || !st.hasMoreTokens())\r\n\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\treturn st.nextToken();\r\n\t}\r\n\r\n}\r\n", "idx": "9019"}
{"func": "package googlejam9.p023;\n\n\nimport java.util.Arrays;\nimport java.util.BitSet;\nimport java.util.Iterator;\nimport java.util.Scanner;\n\npublic class B {\n    private static final double EPS = 1e-12;\n    private static final int INF = 1 << 20;\n    private static final int[] di = {-1, 0, 0, 1};\n    private static final int[] dj = {0, -1, 1, 0};\n\n    // shared table\n    static {\n        // :TODO\n    }\n\n    final int B;\n    final long M;\n    final static String possible = \"POSSIBLE\";\n    final static String impossible = \"IMPOSSIBLE\";\n\n    // parse\n    public B(final Scanner sc) {\n        B = sc.nextInt();\n        M = sc.nextLong();\n    }\n\n    // Template\n    public static void main(String... args) throws Exception {\n        try (final Scanner sc = new Scanner(System.in)) {\n            final int T = sc.nextInt();\n            final Object[] solvers = new Object[T];\n            for (int i = 0; i < T; i++)\n                solvers[i] = new B(sc);\n            final Iterator<String> results = Arrays.stream(solvers)\n                    .map(Object::toString)\n                    .iterator();\n            for (int i = 1; i <= T; i++)\n                System.out.printf(\"Case #%s: %s\\n\", i, results.next());\n        }\n    }\n}\n", "idx": "9023"}
{"func": "package googlejam9.p026;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\nimport java.math.BigInteger;\r\nimport java.util.HashMap;\r\n\r\npublic class B {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n//\t\tBufferedReader br = new BufferedReader(new FileReader(\"B-small-attempt1.in\"));\r\n//        PrintWriter pw = new PrintWriter(new File(\"B-small.out\"));\r\n        BufferedReader br = new BufferedReader(new FileReader(\"B-large.in\"));\r\n        PrintWriter pw = new PrintWriter(new File(\"B-large.out\"));\r\n        int T = Integer.parseInt(br.readLine());\r\n        for(int i=1;i<=T;i++){\r\n        \tString[] l = br.readLine().split(\" \");\r\n        \tint B = Integer.parseInt(l[0]);\r\n        \tlong M = Long.parseLong(l[1]);\r\n        \tBigInteger x = BigInteger.valueOf(2);\r\n        \tif(BigInteger.valueOf(M).compareTo(x.pow(B-2))>0){\r\n        \t\tpw.println(\"Case #\"+i+\": IMPOSSIBLE\");\r\n        \t\tcontinue;\r\n        \t}\r\n        \tpw.println(\"Case #\"+i+\": POSSIBLE\");\r\n        \tif(BigInteger.valueOf(M).compareTo(x.pow(B-2))==0){\r\n        \t\tString s = Long.toString(M-1, 2);\r\n        \t\tint le = s.length();\r\n        \t\tfor(int b=0;b<B-le-2;b++)\r\n        \t\t\ts = \"0\"+s;\r\n        \t\tpw.println(\"0\"+(M==1?\"\":s)+\"1\");\r\n        \t}\r\n        \telse{\r\n        \t\tString s = Long.toString(M, 2);\r\n        \t\tint le = s.length();\r\n        \t\tfor(int b=0;b<B-le-2;b++)\r\n        \t\t\ts = \"0\"+s;\r\n        \t\tpw.println(\"0\"+s+\"0\");\r\n        \t}\r\n        \tfor(int j=1;j<B;j++){\r\n        \t\tString s = \"\";\r\n        \t\tfor(int z=0;z<j+1;z++)\r\n        \t\t\ts+=\"0\";\r\n        \t\tfor(int o=B-2-j;o>=0;o--)\r\n        \t\t\ts+=\"1\";\r\n        \t\tpw.println(s);\r\n        \t}\r\n        }\r\n        pw.close();\r\n        br.close();\r\n\t}\r\n}\r\n", "idx": "9026"}
{"func": "package googlejam9.p027;\nimport org.psjava.util.FromTo;\nimport org.psjava.util.ZeroTo;\n\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class B implements Runnable {\n\n    @Override\n    public void run() {\n        Scanner in = new Scanner(System.in);\n        for (int casei : ZeroTo.get(in.nextInt())) {\n            int n = in.nextInt();\n            long m = in.nextLong();\n            long max = 1L << (long) (n - 2);\n//            System.out.println(max);\n\n            System.out.print(\"Case #\" + (casei + 1) + \": \");\n            if (m <= max) {\n                System.out.println(\"POSSIBLE\");\n                for (int i : ZeroTo.get(n)) {\n                    boolean[] row = new boolean[n];\n                    if (i < n - 1) {\n                        row[i + 1] = true;\n                        long coverEnd = 1L << (long) (n - i - 2);\n                        long coverStart = Math.max(1, coverEnd / 2);\n//                        System.out.println(i + \" \" + coverStart + \" \" + coverEnd);\n                        if (coverStart < m && m < coverEnd) {\n                            long remain = m - coverStart;\n                            long factor = coverStart / 2;\n//                            System.out.println(\"factor \" + factor);\n                            for (int j : FromTo.get(i + 2, n)) {\n                                if (remain >= factor) {\n                                    row[j] = true;\n                                    remain -= factor;\n                                }\n                                factor = Math.max(1, factor / 2);\n                            }\n                        } else if (m >= coverEnd) {\n                            for (int j : FromTo.get(i + 2, n))\n                                row[j] = true;\n                        }\n                    }\n                    for (boolean v : row)\n                        System.out.print(v ? 1 : 0);\n                    System.out.println();\n                }\n            } else {\n                System.out.println(\"IMPOSSIBLE\");\n            }\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        System.setIn(new BufferedInputStream(new FileInputStream(\"/Users/imyoyo/Desktop/B-large.in\")));\n        System.setOut(new PrintStream(new OutputStream() {\n\t\t    @Override\n\t\t    public void write(int b) throws IOException {\n\t\t        System.out.write(b);\n\t\t        new PrintStream(\"/Users/imyoyo/kb/mavens/solutions/src/main/java/output.txt\").write(b);\n\t\t    }\n\t\t}));\n        new B().run();\n    }\n\n}\n", "idx": "9027"}
{"func": "package googlejam9.p030;\n\n\nimport java.util.Scanner;\n\nclass B {\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    int T = scanner.nextInt();\n    scanner.nextLine();\n    for (int t = 1; t <= T; t++) {\n      int B = scanner.nextInt();\n\tlong M = scanner.nextLong();\n\t\n\tboolean pos = true;\n\tlong max = 1;\n\tfor (int i = 0; i < B - 2; i++) {\n\t  max = max * 2;\n\t}\n\t\n\tif (max < M) {\n\t  pos = false;\n\t}\n\t\n\tSystem.out.printf(\"Case #%d: %s\\n\", t, pos?\"POSSIBLE\":\"IMPOSSIBLE\");\n\t\n\tif (pos) {\n\t  int [][] matrix = new int[B][];\n\t  for (int i = 0; i < B; i++) {\n\t    matrix[i] = new int[B];\n\t  }\n\t\n\t  int use = B - 2;\n\t  while (max > M) {\n\t    max /= 2;\n\t    use --;\n\t  }\n\t\n\t  for (int i = 0; i <= use; i++) {\n\t    matrix[i][B-1] = 1;\n\t    for (int j = i + 1; j <= use; j++) {\n\t      matrix[i][j] = 1;\n\t    }\n\t  }\n\t\n\t  int next = use + 1;\n\t  long diff = M - max;\n\t  while (diff > 0) {\n\t    long link = 1;\n\t    int log = 0;\n\t    while (link * 2 <= diff) {\n\t      link *= 2;\n\t      log ++;\n\t    }\n\t\n\t    matrix[next][B-1] = 1;\n\t    matrix[log+1][next] = 1;\n\t    diff -= link;\n\t  }\n\t\n\t  for (int i = 0; i < B; i++) {\n\t    for (int j = 0; j < B; j++) {\n\t      System.out.print(matrix[i][j]);\n\t    }\n\t    System.out.print(\"\\n\");\n\t  }\n\t}\n    }\n  }\n}", "idx": "9030"}
{"func": "package googlejam9.p032;\nimport java.util.Scanner;\npublic class B {\n\tpublic static void main(String args[]) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\tfor(int i = 1; i<=T; i++) {\n\t\t\tint B = sc.nextInt();\n\t\t\tString s = sc.next();\n\t\t\tlong M = Long.parseLong(s);\n\t\t\tlong prod = 1;\n\t\t\tfor(int i1 = 2; i1<=B-1; i1++) {\n\t\t\t\tprod*=2;\n\t\t\t}\n\t\t\tlong p2 = prod;\n\t\t\tif(p2<M) {\n\t\t\t\tSystem.out.println(\"Case #\" + i + \": IMPOSSIBLE\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\" + i + \": POSSIBLE\");\n\t\t\tboolean[][] board = new boolean[B][B];\n\t\t\tfor(int r = 0; r<B; r++) {\n\t\t\t\tfor(int c = r+1; c<B; c++) {\n\t\t\t\t\tboard[r][c] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong diff = p2-M;\n\t\t\tint d = 1;\n\t\t\twhile(diff>0) {\n\t\t\t\tif(diff%2 == 1) {\n\t\t\t\t\tboard[d][B-1] = false;\n\t\t\t\t}\n\t\t\t\tdiff /=2;\n\t\t\t\td++;\n\t\t\t}\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tfor(int r = 0; r<B; r++) {\n\t\t\t\tfor(int c = 0; c<B; c++) {\n\t\t\t\t\tif(board[r][c]) \n\t\t\t\t\t\tsb.append('1');\n\t\t\t\t\telse\n\t\t\t\t\t\tsb.append('0');\t\n\t\t\t\t}\n\t\t\t\tsb.append('\\n');\n\t\t\t}\n\t\t\tSystem.out.print(sb);\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n}", "idx": "9032"}
{"func": "package googlejam9.p034;\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class B {\r\n\t\r\n\tprivate static int d;\r\n\tprivate static int[] n1;\r\n\tprivate static int[] n2;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tString s = r.readLine();\r\n\t\tint T = Integer.parseInt(s);\r\n\t\tStringBuilder sb = new StringBuilder();\t\r\n\t\tfor (int i = 0; i < T; i++) {\r\n\t\t\tsb.append(\"Case #\" + (i+1) + \": \");\r\n\t\t\ts = r.readLine();\r\n\t\t\tString[] parts = s.split(\" \");\r\n\t\t\tint B = Integer.parseInt(parts[0]);\r\n\t\t\tlong M = Long.parseLong(parts[1]);\r\n\t\t\tif (Math.pow(2, B-2) < M) {\r\n\t\t\t\tsb.append(\"IMPOSSIBLE\");\r\n\t\t\t} else {\r\n\t\t\t\tsb.append(\"POSSIBLE\\n\");\r\n\t\t\t\tsb.append(\"0\");\r\n\t\t\t\tfor (int j = 1; j < B; j++) {\r\n\t\t\t\t\tsb.append(\"1\");\r\n\t\t\t\t}\r\n\t\t\t\tboolean[] binear = new boolean[B];\r\n\t\t\t\tM--;\r\n\t\t\t\tfor (int j = 0; j < B; j++) {\r\n\t\t\t\t\tif (M >= Math.pow(2, B-j-1)) {\r\n\t\t\t\t\t\tbinear[j] = true;\r\n\t\t\t\t\t\tM -= Math.pow(2, B-j-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int j = 1; j < B; j++) {\r\n\t\t\t\t\tsb.append(\"\\n\");\r\n\t\t\t\t\tfor (int k = 0; k < B; k++) {\r\n\t\t\t\t\t\tif (k <= j) {\r\n\t\t\t\t\t\t\tsb.append(\"0\");\r\n\t\t\t\t\t\t} else if (k == B-1){\r\n\t\t\t\t\t\t\tif (binear[B-j]) {\r\n\t\t\t\t\t\t\t\tsb.append(\"1\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tsb.append(\"0\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsb.append(\"1\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t\tsb.append(\"\\n\");\r\n\t\t}\r\n\t\tSystem.out.println(sb.toString());\r\n\t\tPrintWriter writer = new PrintWriter(\"Qual1C.BBB.txt\", \"UTF-8\");\r\n\t\twriter.println(sb.toString());\r\n\t\twriter.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "9034"}
{"func": "package googlejam9.p035;\n\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner sc = new Scanner(System.in);\n\t\tint tests = sc.nextInt();\n\t\tfor(int testNum = 1; testNum <= tests; testNum++)\n\t\t{\n\t\t\tSystem.out.print(\"Case #\" + testNum + \": \");\n\t\t\tint buildings = sc.nextInt();\n\t\t\tlong ways = sc.nextLong();\n\t\t\t\n\t\t\tif(ways > Math.pow(2, buildings - 2))\n\t\t\t\tSystem.out.println(\"IMPOSSIBLE\");\n\t\t\telse if(buildings == 2)\n\t\t\t{\n\t\t\t\t//Special case for n = 2\n\t\t\t\tSystem.out.println(\"POSSIBLE\");\n\t\t\t\tif(ways == 0)\n\t\t\t\t\tSystem.out.println(\"00\\n00\");\n\t\t\t\telse if(ways == 1)\n\t\t\t\t\tSystem.out.println(\"01\\n00\");\n\t\t\t}\n\t\t\telse if(ways == Math.pow(2, buildings - 2))\n\t\t\t{\n\t\t\t\tSystem.out.println(\"POSSIBLE\");\n\t\t\t\tfor(int i = 0; i < buildings; i++)\n\t\t\t\t{\n\t\t\t\t\tfor(int j = 0; j < buildings; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(i < j)\n\t\t\t\t\t\t\tSystem.out.print(\"1\");\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tSystem.out.print(\"0\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSystem.out.println(\"POSSIBLE\");\n\t\t\t\t\n\t\t\t\tint[][] edges = new int[buildings][buildings];\n\t\t\t\t//Create 2^(i - 1) ways to reach building i\n\t\t\t\tfor(int i = 0; i < buildings - 1; i++)\n\t\t\t\t{\n\t\t\t\t\tfor(int j = i + 1; j < buildings - 1; j++)\n\t\t\t\t\t\tedges[i][j] = 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//Find binary representation to add edges to last building\n\t\t\t\tfor(int i = 0; i < buildings - 1; i++)\n\t\t\t\t{\n\t\t\t\t\tif((1L << i & ways) > 0)\n\t\t\t\t\t\tedges[i + 1][buildings - 1] = 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int i = 0; i < buildings; i++)\n\t\t\t\t{\n\t\t\t\t\tfor(int j = 0; j < buildings; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.print(edges[i][j]);\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//countWays(edges);\n\t\t\t}\n\t\t}\n\t}\n}\n", "idx": "9035"}
{"func": "package googlejam9.p036;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.StreamTokenizer;\r\n\r\npublic class Slides {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tSlides object = new Slides();\r\n\t\tString className = object.getClass().getSimpleName();\r\n\r\n\t\tFileReader fileReader = new FileReader(new File(className.toLowerCase() + \".in\"));\r\n\t\tStreamTokenizer st = new StreamTokenizer(new BufferedReader(fileReader));\r\n\r\n\t\tFileWriter wr = new FileWriter(className.toLowerCase() + \".out\");\r\n\r\n\t\tst.nextToken();\r\n\t\tint testCases = (int) st.nval;\r\n\r\n\t\tst.resetSyntax();\r\n\t\tst.wordChars(0, 256);\r\n\t\tst.whitespaceChars(0, 32);\r\n\r\n\t\tfor (int tc = 1; tc <= testCases; tc++) {\r\n\r\n\t\t\tSystem.out.println(\"At test \" + tc + \"/\" + testCases);\r\n\r\n\t\t\tst.nextToken();\r\n\t\t\tint B = Integer.valueOf(st.sval);\r\n\r\n\t\t\tst.nextToken();\r\n\t\t\tlong M = Long.valueOf(st.sval);\n\t\t\tint[][] mat = new int[B][B];\n\t\t\tString result1 = \"IMPOSSIBLE\";\n\t\t\t\n\t\t\tlong[] row = new long[B];\n\t\t\t\n\t\t\tfor (int i = 0; i < B - 1; i++)\n\t\t\t\tfor (int j = 0; j < B - 1; j++) {\n\t\t\t\n\t\t\t\t\tif (i >= j) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tmat[i][j] = 1;\n\t\t\t\t}\n\t\t\t\n\t\t\trow[0] = row[1] = 1;\n\t\t\tfor (int i = 2; i < B - 1; i++) {\n\t\t\t\trow[i] = 2 * row[i - 1];\n\t\t\t}\n\t\t\t\n\t\t\tlong requested = M;\n\t\t\t\n\t\t\tfor (int i = B - 2; i >= 0; i--) {\n\t\t\t\n\t\t\t\tif (row[i] <= requested) {\n\t\t\t\t\trequested -= row[i];\n\t\t\t\t\tmat[i][B - 1] = 1;\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (requested == 0) {\n\t\t\t\t// encode\n\t\t\t\n\t\t\t\tresult1 = \"POSSIBLE\\n\";\n\t\t\t\n\t\t\t\tfor (int i = 0; i < B; i++) {\n\t\t\t\t\tfor (int j = 0; j < B; j++)\n\t\t\t\t\t\tresult1 += mat[i][j];\n\t\t\t\n\t\t\t\t\tresult1 += \"\\n\";\n\t\t\t\t}\n\t\t\t}\r\n\r\n\t\t\tString result = result1;\r\n\r\n\t\t\twr.write(\"Case #\" + tc + \": \" + result.trim() + \"\\r\\n\");\r\n\t\t}\r\n\r\n\t\twr.close();\r\n\t}\r\n\r\n}\r\n", "idx": "9036"}
{"func": "package googlejam9.p039;\nimport java.io.FileNotFoundException;\nimport java.io.PrintStream;\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\n/**\n * Created by slycer on 4/1/16.\n */\npublic class B {\n\n    public static void main ( String [] args ) throws FileNotFoundException {\n        System.setOut( new PrintStream( \"B.out\" ));\n        Scanner s = new Scanner( System.in ) ;\n        int tests = s.nextInt();\n        for ( int  test=1; test<=tests; test++ ){\n            String answer = \"\";\n            int b = s.nextInt();\n            BigInteger m = s.nextBigInteger();\n\n            long max = (1l<<(b-2));\n\n            if ( m.compareTo(BigInteger.valueOf(max))> 0 ){\n                answer = \"IMPOSSIBLE\";\n            } else {\n                m = m.subtract( BigInteger.ONE );\n\n                answer = \"POSSIBLE\\n\";\n                for ( int i=0; i<b; i++ ){\n                    for ( int j=0; j<b; j++ ){\n                        if ( i>0 && i<j && j == b - 1 ){\n                            if ( (m.longValue() & ( 1l<<(i-1))) >0){\n                                answer += \"1\";\n                            } else {\n                                answer += \"0\";\n                            }\n                        } else {\n                            if ( i<j){\n                                answer = answer + \"1\";\n                            } else {\n                                answer = answer + \"0\";\n                            }\n                        }\n                    }\n                    if ( i<b-1) {\n                        answer += \"\\n\";\n                    }\n                }\n            }\n\n            System.err.println(\"Case #\"+test + \": \" + b + \" \" + (m.add( BigInteger.ONE )));\n            System.err.println(\"Case #\"+test + \": \" + answer );\n            System.out.println(\"Case #\"+test + \": \" + answer );\n        }\n    }\n\n}\n", "idx": "9039"}
{"func": "package googlejam9.p046;\n\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class b {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tFileInputStream in = null;\n\t\tPrintWriter out = null;\n\n\t      try {\n\t         in = new FileInputStream(\"B-large.in\");\n\t         out = new PrintWriter( \"outputB-large.txt\" );\n\n\t         Scanner sc = new Scanner (in);\n\t         String line = sc.nextLine();\n\n\t         int T = Integer.parseInt(line);\n\n\t         for(int t=1; t<=T; t++) {\n\t        \t line = sc.nextLine();\n\t        \t \n\t        \t int B = Integer.parseInt(line.split(\" \")[0]);\n\t        \t long M = Long.parseLong(line.split(\" \")[1]);\n\t        \t \n\t        \t String output = \"Case #\" + t + \": \";\n\t        \t \n\t        \t if((1L << (B-2)) < M ) {\n\t        \t\t output += \"IMPOSSIBLE\\n\";\n\t        \t\t out.print( output );\n\t        \t\t continue;\n\t        \t }\n\t        \t output += \"POSSIBLE\\n\";\n\t        \t for (int i=0; i<B; i++) {\n\t        \t      for (int j=0; j<B; j++) {\n\t        \t        int k = 0;\n\t        \t        if (i < j) {\n\t        \t          if (i != 0) k = 1;\n\t        \t          else if (j == B-1) k = 1;\n\t        \t          else if ( ((1L << (B-j-2)) & (M-1)) != 0 ) k = 1;\n\t        \t        }\n\t        \t        output += k;\n\t        \t      }\n\t        \t      output += \"\\n\";\n\t        \t }\n\t        \t out.print( output );\n\t         }\n\t      } finally {\n\t    \t  if (in != null) {\n\t            in.close();\n\t    \t  }\n\t    \t  if (out != null) {\n\t            out.close();\n\t         }\n\t      }\n\t}\n}\n\t", "idx": "9046"}
{"func": "package googlejam9.p048;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Slides\r\n{\r\n\tpublic static void main(String[] args) throws Exception\r\n\t{\r\n\t\t\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint T = Integer.parseInt(in.readLine());\r\n\t\tfor (int t = 0; t < T; ++t)\r\n\t\t{\r\n\t\t\tStringTokenizer st = new StringTokenizer(in.readLine());\r\n\t\t\tint B = Integer.parseInt(st.nextToken());\r\n\t\t\tlong M = Long.parseLong(st.nextToken());\r\n\t\t\tlong MAX = (1L<<(B-2));\r\n\t\t\tif (M > MAX) System.out.printf(\"Case #%d: IMPOSSIBLE\\n\", t+1);\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tSystem.out.printf(\"Case #%d: POSSIBLE\\n\", t+1);\r\n\t\t\t\tString S = Long.toBinaryString(M-1)+\"1\";\r\n\t\t\t\twhile (S.length() < B) S = \"0\"+S;\r\n\t\t\t\tSystem.out.println(S);\r\n\t\t\t\tfor (int i = 1; i < B-1; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (int j = 0; j < B; ++j)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (j <= i) System.out.print(\"0\");\r\n\t\t\t\t\t\telse System.out.print(\"1\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t}\r\n\t\t\t\tfor (int i = 0; i < B; ++i) System.out.print(\"0\");\r\n\t\t\t\tSystem.out.println();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "9048"}
{"func": "package googlejam9.p049;\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n//\t\tScanner scan = new Scanner(System.in);\r\n//\t\tPrintWriter out = new PrintWriter(System.out);\r\n\t\tScanner scan = new Scanner(new FileInputStream(new File(\"B.in\")));\r\n\t\tPrintWriter out = new PrintWriter(new FileOutputStream(new File(\"B.out\")));\r\n\t\tint T = scan.nextInt();\r\n\t\tfor(int t=1;t<=T;t++) {\r\n\t\t\tint B = scan.nextInt();\r\n\t\t\tlong M = scan.nextLong();\r\n\t\t\tboolean[][] adj = new boolean[B][B];\r\n\t\t\tlong[] cnts = new long[B];\r\n\t\t\tcnts[B-1] = 1;\r\n\t\t\tfor(int i=B-2;i>0;i--) {\r\n\t\t\t\tcnts[i] = 0;\r\n\t\t\t\tfor(int j=B-1;j>i;j--) {\r\n\t\t\t\t\tadj[i][j] = true;\r\n\t\t\t\t\tcnts[i] += cnts[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint ptr = 1;\r\n\t\t\twhile(ptr < B && M > 0) {\r\n\t\t\t\tif(M >= cnts[ptr]) {\r\n\t\t\t\t\tadj[0][ptr] = true;\r\n\t\t\t\t\tM -= cnts[ptr];\r\n\t\t\t\t}\r\n\t\t\t\tptr++;\r\n\t\t\t}\r\n\t\t\tboolean possible = M == 0;\r\n\t\t\t\r\n\t\t\tout.printf(\"Case #%d: %s\\n\", t, possible ? \"POSSIBLE\" : \"IMPOSSIBLE\");\r\n\t\t\tif(possible) {\r\n\t\t\t\tfor(int i=0;i<B;i++) {\r\n\t\t\t\t\tfor(int j=0;j<B;j++) {\r\n\t\t\t\t\t\tif(adj[i][j])\r\n\t\t\t\t\t\t\tout.print(\"1\");\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tout.print(\"0\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tout.println();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "9049"}
{"func": "package googlejam9.p051;\nimport java.math.BigInteger;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\tpublic static void main(String[] args) {\r\n\t\t/*\r\n\t\tBigInteger[] ways = new BigInteger[50];\r\n\t\tfor(int i =0; i<50; i++){\r\n\t\t\tways[i] = new BigInteger(\"0\");\r\n\t\t}\r\n\t\tways[0] = new BigInteger(\"1\");\r\n\t\tfor(int i = 1; i<50; i++){\r\n\t\t\tfor(int j =0; j<i; j++){\r\n\t\t\t\tways[i]=ways[i].add(ways[j]);\r\n\t\t\t}\r\n\t\t\tSystem.out.println(ways[i].toString());\r\n\t\t}\r\n\t\t*/\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\tlong max = (1L<<48);\r\n\t\tint cases=in.nextInt();\r\n\t\tfor(int q=1; q<=cases;q++){\r\n\t\t\tint builds = in.nextInt();\r\n\t\t\tlong ways = in.nextLong();\r\n\t\t\tlong max2 = (1L<<(builds-2));\r\n\t\t\tif(ways>max2){\r\n\t\t\t\tSystem.out.println(\"Case #\"+q+\": IMPOSSIBLE\");\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tSystem.out.println(\"Case #\"+q+\": POSSIBLE\");\r\n\t\t\t\tString[] strings = new String[builds];\r\n\t\t\t\tArrays.fill(strings, \"\");\r\n\t\t\t\tfor(int i =0; i<builds;i++){\r\n\t\t\t\t\tfor(int j = 0;j<=i;j++){\r\n\t\t\t\t\t\tstrings[i]+=\"0\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(int j = i+1;j+1<builds;j++){\r\n\t\t\t\t\t\tstrings[i]+=\"1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(int i = builds-2;i>=0;i--){\r\n\t\t\t\t\tlong can = 1;\r\n\t\t\t\t\tif(i>0){\r\n\t\t\t\t\t\tcan = (1L<<i-1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(can<=ways){\r\n\t\t\t\t\t\tways-=can;\r\n\t\t\t\t\t\tstrings[i]+=\"1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tstrings[i]+=\"0\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(int i =0;i<builds; i++){\r\n\t\t\t\t\tSystem.out.println(strings[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "9051"}
{"func": "package googlejam9.p054;\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\npublic class Slides {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tBufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\r\n\r\n\t\tint T = Integer.parseInt(bf.readLine());\r\n\r\n\t\tfinal StringBuilder[] results = new StringBuilder[T];\r\n\t\tfor (int testcase = 1; testcase <= T; testcase++) {\r\n\r\n\t\t\t// hahahahaha, this reduces to printing a bitstring\r\n\t\t\t// that's really weird, eh?\r\n\t\t\tStringTokenizer st = new StringTokenizer(bf.readLine());\r\n\t\t\tint B = Integer.parseInt(st.nextToken());\r\n\t\t\tlong M = Long.parseLong(st.nextToken());\r\n\r\n\t\t\tStringBuilder output = new StringBuilder();\r\n\t\t\t\r\n\t\t\tlong numBits = B - 2;\r\n\t\t\tlong maxValue = 1L << numBits;\r\n\t\t\tif(M <= maxValue){\r\n\t\t\t\toutput.append(\"POSSIBLE\");\r\n\t\t\t\tint[][] adjMatrix = new int[B][B];\r\n\t\t\t\tfor(int i=1; i < B -1; i++){\r\n\t\t\t\t\t// every bit connects to the end\r\n\t\t\t\t\tadjMatrix[i][B-1] = 1;\r\n\t\t\t\t\t// every bit connects to each lower bit\r\n\t\t\t\t\tfor(int j=1; j < i; j++){\r\n\t\t\t\t\t\tadjMatrix[i][j] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(M == maxValue){\r\n\t\t\t\t\t// connect everything\r\n\t\t\t\t\tfor(int i=1; i < B; i++){\r\n\t\t\t\t\t\tadjMatrix[0][i] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// each entry (i+1) has exactly 2^i  paths leading from it, and they add summatively\r\n\t\t\t\t\tfor(int i=0; i < numBits; i++){\r\n\t\t\t\t\t\tif((M & (1L << i)) > 0){\r\n\t\t\t\t\t\t\tadjMatrix[0][i+1] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor(int i=0; i < B; i++){\r\n\t\t\t\t\toutput.append(\"\\n\");\r\n\t\t\t\t\tfor(int j=0; j < B; j++){\r\n\t\t\t\t\t\toutput.append(adjMatrix[i][j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\toutput.append(\"IMPOSSIBLE\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresults[testcase - 1] = output;\r\n\r\n\t\t}\r\n\r\n\t\tfor (int testcase = 1; testcase <= T; testcase++) {\r\n\t\t\tSystem.out.println(\"Case #\" + testcase + \": \"\r\n\t\t\t\t\t+ results[testcase - 1].toString());\r\n\t\t}\r\n\t}\r\n\r\n}\r\n", "idx": "9054"}
{"func": "package googlejam9.p056;\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Slides {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t Scanner in = new Scanner(new File(\"B-large.in\"));\r\n\t\t// System.out.println(\"HELLO\");\r\n\t\t//Scanner in = new Scanner(System.in);\r\n\t\tPrintWriter fileOut = new PrintWriter(new FileWriter(\"SlidesLarge.out\"));\r\n\t\tint T = in.nextInt();\r\n\t\tfor (int test = 1; test <= T; test++)\r\n\t\t{\r\n\t\t\tint B = in.nextInt();\r\n\t\t\tlong M = in.nextLong();\r\n\t\t\tlong maxB = (long) Math.pow(2, B-2);\r\n\t\t\tif (M <= maxB)\r\n\t\t\t{\r\n\t\t\t\tfileOut.printf(\"Case #%d: POSSIBLE\\n\", test);\r\n\t\t\t\tint[][] arr = new int[B][B];\r\n\t\t\t\tfor (int r = 1; r < B; r++)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor (int c = 0; c < B; c++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (c > r)\r\n\t\t\t\t\t\t\tarr[r][c] = 1;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tarr[r][c] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Lower triangle now\r\n\t\t\t\t// Make first line binary of M;\r\n\t\t\t\t// work from back...\r\n\t\t\t\tM --;\r\n\t\t\t\tarr[0][B-1] = 1;\r\n\t\t\t\tString bin = Long.toBinaryString(M);\r\n\t\t\t\tint l = bin.length();\r\n\t\t\t\t//System.out.println(bin);\r\n\t\t\t\tfor (int i = 0; i < l; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (bin.charAt(l-i-1) == '1')\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tarr[0][B-i-2] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Now print arr\r\n\t\t\t\tfor(int i = 0; i< B; i++)\r\n\t\t\t\t{\r\n\t\t\t\t    for(int j = 0; j< B; j++)\r\n\t\t\t\t    {\r\n\t\t\t\t        fileOut.print(arr[i][j]);\r\n\t\t\t\t    }\r\n\t\t\t\t    fileOut.println();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// Not possible\r\n\t\t\t\tfileOut.printf(\"Case #%d: IMPOSSIBLE\\n\", test);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfileOut.close();\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "9056"}
{"func": "package googlejam9.p057;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Scanner;\r\n\r\npublic class Slides {\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n        int t = in.nextInt(); \r\n        for (int i = 1; i <= t; ++i) {\r\n            int b = in.nextInt();\r\n            long m = in.nextLong();\r\n            long p = pow(2,b-2);\r\n            if (p<m){\r\n                System.out.println(\"Case #\" + i + \": IMPOSSIBLE\");\r\n            } else {\r\n                System.out.println(\"Case #\" + i + \": POSSIBLE\");\r\n                if (p==m){\r\n                    for (int j1=0; j1<b; ++j1){\r\n                        String s = \"\";\r\n                        for (int j2 = 0; j2<b; ++j2){\r\n                            if (j2<=j1) s += \"0\";\r\n                            else s += \"1\";\r\n                        }\r\n                        System.out.println(s);\r\n                    }\r\n                } else {\r\n                    for (int j1=0; j1<b; ++j1){\r\n                        String s = \"\";\r\n                        for (int j2 = 0; j2<b-1; ++j2){\r\n                            if (j2<=j1) s += \"0\";\r\n                            else s += \"1\";\r\n                        }\r\n                        if (j1 == 0) s += \"0\";\r\n                        else {\r\n                            if (m%2==1) s += \"1\";\r\n                            else s += \"0\";\r\n                            m /= 2;\r\n                        }\r\n                        System.out.println(s);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        in.close();\r\n    }\r\n    \r\n    public static long pow(long a, long b){\r\n        if (b==0) return 1;\r\n        else if (b%2==0) return pow(a*a,b/2);\r\n        else return a*pow(a*a,b/2);\r\n    }\r\n}", "idx": "9057"}
{"func": "package googlejam9.p059;\nimport java.io.*;\r\nimport java.util.*;\r\npublic class slides{\r\n   private static String fileName = \"B-small\";\r\n   public static void main(String[] args) throws IOException{\r\n      BufferedReader f = new BufferedReader(new FileReader(fileName+\".in\"));\r\n      PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName+\".out\")));\r\n      int Num=Integer.parseInt(f.readLine());\r\n      for(int ind=0;ind<Num;ind++){\r\n         String[] inar=f.readLine().split(\" \");\r\n         long B = Long.parseLong(inar[0]);\r\n         long M = Long.parseLong(inar[1]);\r\n         \r\n         if(M>Math.pow(2,B-2))\r\n            out.println(\"Case #\"+(ind+1)+\": IMPOSSIBLE\");\r\n         else{\r\n            long T = (long)Math.pow(2,B-2)-M;\r\n            int[] connected=new int[(int)B];\r\n            for(int x=0;x<B;x++)\r\n               connected[x]=1;\r\n            String bin = Long.toBinaryString(T);\r\n            int i=1;\r\n            for(int x=bin.length()-1;x>=0;x--){\r\n               if(bin.substring(x,x+1).compareTo(\"1\")==0)\r\n                  connected[i]=0;\r\n               i++;\r\n            }\r\n                 \r\n            out.println(\"Case #\"+(ind+1)+\": POSSIBLE\");\r\n            for(int x=0;x<B-1;x++){\r\n               for(int y=0;y<=x;y++)\r\n                  out.print(\"0\");\r\n               for(int y=x+1;y<B-1;y++)\r\n                  out.print(\"1\");\r\n               out.print(connected[x]);\r\n               out.print(\"\\n\");\r\n            }\r\n            for(int x=0;x<B;x++)\r\n               out.print(\"0\");\r\n            out.print(\"\\n\");\r\n         }\r\n      }\r\n      out.close();\r\n   }\r\n}\r\n", "idx": "9059"}
{"func": "package googlejam9.p060;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        Scanner in = new Scanner(new File(\"B-large.in\"));\r\n        BufferedWriter out = new BufferedWriter(new FileWriter(\"out.txt\"));\r\n\r\n        int caseLength = in.nextInt();\r\n        for (int caseNumber = 1; caseNumber <= caseLength; caseNumber++) {\r\n            System.out.println(\"==\" + caseNumber);\r\n            out.write(String.format(\"Case #%d: \", caseNumber));\r\n            int buildingCount = in.nextInt();\r\n            long target = in.nextLong() - 1;\r\n\r\n            long temp = Long.highestOneBit(target);\r\n            int buildingNeeded = temp != 0 ? Long.numberOfTrailingZeros(temp) + 3 : 2;\r\n\r\n            if (buildingCount < buildingNeeded) {\r\n                out.write(\"IMPOSSIBLE\\n\");\r\n                continue;\r\n            }\r\n\r\n            out.write(\"POSSIBLE\\n\");\r\n\r\n            boolean[] answer = new boolean[buildingCount];\r\n            answer[0] = true;\r\n\r\n            while (target > 0) {\r\n                System.out.println(target);\r\n\r\n                long temp2 = Long.highestOneBit(target);\r\n                answer[Long.numberOfTrailingZeros(temp2) + 1] = true;\r\n                target -= temp2;\r\n            }\r\n\r\n            for (int i = buildingCount - 1; i >= 0; i--) {\r\n                out.write(answer[i] ? '1' : '0');\r\n            }\r\n\r\n            out.newLine();\r\n\r\n            for (int i = 1; i < buildingCount; i++) {\r\n                for (int j = 0; j < i + 1; j++) {\r\n                    out.write('0');\r\n                }\r\n\r\n                for (int j = 0; j < buildingCount - (i + 1); j++) {\r\n                    out.write('1');\r\n                }\r\n\r\n                out.newLine();\r\n            }\r\n        }\r\n\r\n        out.close();\r\n    }\r\n}\r\n", "idx": "9060"}
{"func": "package googlejam9.p068;\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class q2 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t\tint t = in.nextInt();\r\n\t\tfor (int i=1; i<=t; i++) {\r\n\t\t\tSystem.out.print(\"Case #\" + i + \": \");\r\n\t\t\tint b = in.nextInt();\r\n\t\t\tlong m = in.nextLong();\r\n\t\t\tif (Math.pow(2, b-2)<m) {\r\n\t\t\t\tSystem.out.println(\"IMPOSSIBLE\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tSystem.out.println(\"POSSIBLE\");\r\n\t\t\t\tfor (int j=1; j<=b; j++) {\r\n\t\t\t\t\tif (j==1) {\r\n\t\t\t\t\t\tString first=\"0\";\r\n\t\t\t\t\t\tfor (int a=0; a<b; a++) {\r\n\t\t\t\t\t\t\tif (((long)Math.pow(2, b-2)==m)) {\r\n\t\t\t\t\t\t\t\tif (a>0)\r\n\t\t\t\t\t\t\t\t\tfirst +='1';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse  if (a==0){\r\n\t\t\t\t\t\t\t\tfirst += Long.toBinaryString(m);\r\n\t\t\t\t\t\t\t\tfirst = first + \"0\";\r\n\t\t\t\t\t\t\t\twhile (first.length()<b) {\r\n\t\t\t\t\t\t\t\t\tfirst = \"0\" + first;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tSystem.out.println(first);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tfor (int k=1; k<=b; k++) {\r\n\t\t\t\t\t\t\tif (k>j) {\r\n\t\t\t\t\t\t\t\tSystem.out.print(\"1\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tSystem.out.print(\"0\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}", "idx": "9068"}
{"func": "package googlejam9.p069;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        //Scanner scanner = new Scanner(System.in);\r\n        Scanner scanner = new Scanner(new File(\"inputBlarge.txt\"));\r\n        int tests = scanner.nextInt();\r\n        for (int test=1; test<=tests; test++) {\r\n            scanner.nextLine();\r\n            int b = scanner.nextInt();\r\n            long m = scanner.nextLong();\r\n            int[][] ans = new int[b+1][b+1];\r\n\r\n            ans[1][b] = 1;\r\n            m--;\r\n            if (m > 0 && 2 < b) {\r\n                ans[2][b] = 1;\r\n                m--;\r\n            }\r\n\r\n            for (int i=2; i<b; i++) {\r\n                ans[1][i] = 1;\r\n            }\r\n\r\n            int next = 3;\r\n            long add = 2L;\r\n            while (m > 0 && next < b) {\r\n                ans[next][b] = 1;\r\n                for (int prev = next - 1; prev >= 2; prev--) {\r\n                    ans[next][prev] = 1;\r\n                }\r\n                m -= add;\r\n                add *= 2;\r\n                next++;\r\n            }\r\n            add /= 4;\r\n            int last = next - 1;\r\n            int prev = last - 1;\r\n            while (m < 0) {\r\n                while (add > -m) {\r\n                    prev--;\r\n                    add /= 2;\r\n                }\r\n                m += add;\r\n                ans[last][prev] = 0;\r\n            }\r\n\r\n            if (m > 0) {\r\n                System.out.println(\"Case #\" + test + \": IMPOSSIBLE\");\r\n            } else {\r\n                System.out.println(\"Case #\" + test + \": POSSIBLE\");\r\n                for (int y=1; y<ans.length; y++) {\r\n                    for (int x=1; x<ans[0].length; x++) {\r\n                        System.out.print(ans[y][x]);\r\n                    }\r\n                    System.out.println();\r\n                }\r\n            }\r\n        }\r\n\r\n        scanner.close();\r\n    }\r\n}\r\n", "idx": "9069"}
{"func": "package googlejam9.p070;\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by Lich on 2016/5/1.\r\n */\r\npublic class B {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        try (Scanner scanner = new Scanner(new File(\"round1C_B.in\"));\r\n             PrintWriter writer = new PrintWriter(new File(\"round1C_B.out\"))) {\r\n\r\n            int caseCount = scanner.nextInt();\r\n            for (int caseNo = 1; caseNo <= caseCount; ++caseNo) {\r\n                long b = scanner.nextInt();\r\n                long m = scanner.nextLong();\r\n                if ((1L << (b - 2)) < m) {\r\n                    writer.println(String.format(\"Case #%d: IMPOSSIBLE\", caseNo));\r\n                    continue;\r\n                }\r\n                writer.println(String.format(\"Case #%d: POSSIBLE\", caseNo));\r\n                boolean x[] = new boolean[(int) b];\r\n                Arrays.fill(x, false);\r\n                for (int i = 2; i < b; ++i) {\r\n                    if (((1L << (i - 2)) & (m - 1)) > 0) {\r\n                        x[i] = true;\r\n                    }\r\n                }\r\n\r\n                writer.print(0);\r\n                for (int j = 2; j <= b; j++)\r\n                    writer.print(1);\r\n                writer.println();\r\n\r\n                for (int i = 2; i < b; ++i) {\r\n                    for (int j = 1; j <= i; ++j)\r\n                        writer.print(0);\r\n                    for (int j = i + 1; j < b; ++j)\r\n                        writer.print(1);\r\n                    writer.println(x[i] ? 1 : 0);\r\n                }\r\n\r\n                for (int j = 1; j <= b; j++)\r\n                    writer.print(0);\r\n                writer.println();\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}\r\n", "idx": "9070"}
{"func": "package googlejam9.p071;\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * Created by pallavi on 8/5/16.\n */\npublic class Slides {\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scanner = new Scanner(new BufferedReader(new FileReader(\"in.txt\")));\n        PrintWriter writer = new PrintWriter(\"out.txt\");\n        int t = scanner.nextInt();\n        for (int i = 1; i <= t; i++) {\n            int b = scanner.nextInt();\n            long m = scanner.nextLong();\n            writer.print(\"Case #\" + i + \": \");\n            if (m > Math.pow(2, b-2)) {\n                writer.println(\"IMPOSSIBLE\");\n                continue;\n            }\n            writer.println(\"POSSIBLE\");\n            int[][] s = new int[b][b];\n            for (int j = 1; j < b; j++) {\n                for (int k = j+1; k < b; k++) {\n                    s[j][k] = 1;\n                }\n            }\n            if (m == Math.pow(2, b-2)) {\n                s[0][b-1] = 1;\n                m--;\n            }\n            for (int j = 1; j < b-1; j++) {\n                if ((m&(long)Math.pow(2, b-2-j)) != 0) {\n                    s[0][j] = 1;\n                }\n            }\n            for (int j = 0; j < b; j++) {\n                for (int k = 0; k < b; k++) {\n                    writer.print(s[j][k]);\n                }\n                writer.println();\n            }\n        }\n        writer.close();\n        scanner.close();\n    }\n}\n", "idx": "9071"}
{"func": "package googlejam9.p072;\nimport java.util.*;\nimport java.math.*;\n\n/**\n *\n * @author rahuljaisingh\n */\npublic class cj {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int T = sc.nextInt();\n        for(int i = 1; i <= T; i++)\n        {\n            System.out.print(\"Case #\" + i + \": \");\n            int B = sc.nextInt();\n            BigInteger M = new BigInteger(sc.next());\n            BigInteger two = new BigInteger(\"2\");\n            if(M.compareTo(two.pow(B-2)) == 1)\n            {\n                System.out.println(\"IMPOSSIBLE\");\n                continue;\n            }\n            System.out.println(\"POSSIBLE\");\n\t\t\tBigInteger M1 = M.subtract(BigInteger.ONE);\n            int res[][] = new int[B][B];\n\t\t\tfor(int i2 = 0; i2 < B; i2++)\n\t\t\t{\n\t\t\t    for(int j = 0; j < B; j++)\n\t\t\t    {\n\t\t\t        res[i2][j] = (j > i2) ? 1 : 0;\n\t\t\t    }\n\t\t\t}\n\t\t\tfor(int i4 = 1; i4 < B - 1; i4++)\n\t\t\t{\n\t\t\t    res[0][i4] = 0;\n\t\t\t}\n\t\t\tBigInteger two1 = new BigInteger(\"2\");\n\t\t\tfor(int i1 = B - 2; i1 > 0; i1--)\n\t\t\t{\n\t\t\t    if(M1.mod(two1).equals(BigInteger.ONE))\n\t\t\t    {\n\t\t\t        res[0][i1] = 1;\n\t\t\t    }\n\t\t\t    M1 = M1.divide(two1);\n\t\t\t}\n\t\t\tfor(int i3 = 0; i3 < B; i3++)\n\t\t\t{\n\t\t\t    for(int j = 0; j < B; j++)\n\t\t\t    {\n\t\t\t        System.out.print(res[i3][j]);\n\t\t\t    }\n\t\t\t    System.out.println();\n\t\t\t}\n        }\n            \n    }\n}\n", "idx": "9072"}
{"func": "package googlejam9.p085;\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemB {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(\r\n\t\t\t\tSystem.in)));\r\n\t\tin = new Scanner(new File(\"B-large.in\"));\r\n\t\t\r\n\t\tint T = in.nextInt();\r\n\t\tfor (int i=1; i<=T; i++) {\r\n\t\t\tint B = in.nextInt();\r\n\t\t\tlong M = in.nextLong();\r\n\t\t\t\r\n\t\t\tlong temp = (long)Math.pow(2, B-2);\r\n\t\t\tif (M > temp) {\r\n\t\t\t\tSystem.out.printf(\"Case #%d: IMPOSSIBLE\\n\", i);\r\n\t\t\t} else {\r\n\t\t\t\tboolean[] b = new boolean[B];\r\n\t\t\t\tfor (int j=1; j<B; j++) {\r\n\t\t\t\t\ttemp /= 2;\r\n\t\t\t\t\tif (M > temp) {\r\n\t\t\t\t\t\tM -= temp;\r\n\t\t\t\t\t\tb[B-1-j] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\t\tfor (int j=0; j<B; j++) {\r\n\t\t\t\t\tsb.append('\\n');\r\n\t\t\t\t\tfor (int k=0; k<=j; k++) {\r\n\t\t\t\t\t\tsb.append('0');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (int k=j+1; k<B; k++) {\r\n\t\t\t\t\t\tif (k == B-1) {\r\n\t\t\t\t\t\t\tsb.append(b[j]?'1':'0');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsb.append('1');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tSystem.out.printf(\"Case #%d: POSSIBLE\", i);\r\n\t\t\t\tSystem.out.println(sb.toString());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}", "idx": "9085"}
{"func": "package googlejam9.p091;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class ProblemB {\r\n\t\r\n\tpublic static void main(String[] agrs) throws FileNotFoundException {\r\n\t\tString FILENAME = \"longB\";\r\n\t\t\r\n\t\tFile FILE = new File(FILENAME);\r\n\t\t\r\n\t\tScanner fileReader = new Scanner(FILE);\r\n\t\t\r\n\t\tint T =  fileReader.nextInt();\r\n\t\t\r\n\t\tfor (int test = 0; test < T; test ++) {\r\n\t\t\tint B = fileReader.nextInt();\r\n\t\t\tString M1 = fileReader.next();\r\n\t\t\t\r\n\t\t\tlong M = Long.parseLong(M1);\r\n\t\t\t\r\n\t\t\tint num = B - 2;\r\n\t\t\tlong max = (long) Math.pow((double)2, (double)num);\r\n\t\t\tint[] x = new int[num];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (M > max) {\r\n\t\t\t\tSystem.out.println(\"Case #\" + (test+1) + \": IMPOSSIBLE\");\r\n\t\t\t} else {\r\n\t\t\t\tint[][] matrix = new int[B][B];\r\n\t\t\t\tfor (int i = 0; i < B; i ++) {\r\n\t\t\t\t\tfor (int j = i+1; j < B-1; j ++) {\r\n\t\t\t\t\t\tmatrix[i][j] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlong dec = max / 2;\r\n\t\t\t\tlong left = M;\r\n\t\t\t\tint index = 0;\r\n\t\t\t\tfor (int i = 0; i < num; i ++) {\r\n\t\t\t\t\tif (left >= dec) {\r\n\t\t\t\t\t\tleft -= dec;\r\n\t\t\t\t\t\tx[i] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdec = dec / 2;\r\n\t\t\t\t}\r\n\t\t\t\tint indi = 0;\r\n\t\t\t\tfor (int i = B-2; i > 0; i --) {\r\n\t\t\t\t\tmatrix[i][B-1] = x[indi];\r\n\t\t\t\t\tindi ++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (left == 1) {\r\n\t\t\t\t\tmatrix[0][B-1] = 1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tSystem.out.println(\"Case #\" + (test+1) + \": POSSIBLE\");\r\n\t\t\t\tfor (int i = 0; i < B; i ++) {\r\n\t\t\t\t\tfor (int j = 0; j < B; j ++) {\r\n\t\t\t\t\t\tSystem.out.print(matrix[i][j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println(\"\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t}\r\n\t\tfileReader.close();\r\n\t}\r\n}", "idx": "9091"}
{"func": "package googlejam9.p099;\n\r\n\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by Benedek on 5/8/2016.\r\n */\r\npublic class CB {\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        int T = in.nextInt();\r\n\r\n        for (int t = 1; t <= T; t++) {\r\n            int B = in.nextInt();\r\n            Long M = in.nextLong();\r\n            String ans = \"\";\r\n            if (Math.pow(2, B - 2) < M) {\r\n                ans = \"IMPOSSIBLE\";\r\n                System.out.printf(\"Case #%d: \", t);\r\n                System.out.println(ans);\r\n            } else {\r\n                ans = \"POSSIBLE\";\r\n                System.out.printf(\"Case #%d: \", t);\r\n                System.out.println(ans);\r\n\r\n                String binary = Long.toBinaryString(M-1);\r\n                int l = binary.length();\r\n                if (B == 2) {\r\n                    if (M == 1) {\r\n                        System.out.println(\"01\");\r\n                        System.out.println(\"00\");\r\n                    }\r\n                } else {\r\n                    for (int i = 0; i < B; i++) {\r\n                        if (i == 0) {\r\n                            String firstLine = \"\";\r\n                            firstLine = binary + \"1\";\r\n                            while (firstLine.length() < B) {\r\n                                firstLine = \"0\" + firstLine;\r\n                            }\r\n                            System.out.print(firstLine);\r\n                        } else {\r\n                            for (int j = 0; j < B; j++) {\r\n                                if (j <= i) {\r\n                                    System.out.print(\"0\");\r\n                                } else {\r\n                                    System.out.print(\"1\");\r\n                                }\r\n                            }\r\n                        }\r\n                        System.out.println();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "idx": "9099"}
{"func": "package googlejam9.p102;\n\n\nimport java.util.Scanner;\n\n/**\n * Created by LevinLMKwong on 8/5/16.\n */\npublic class B {\n    public static void main(String[] args) {\n        long[] max = new long[51];\n        max[0] = 0; max[1] = 0; max[2] = 1;\n        for (int i = 3; i <= 50; i++) {\n            max[i] = max[i-1] * 2;\n        }\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        for (int t=1; t<=T; t++) {\n            int B = in.nextInt();\n            long M = in.nextLong();\n            if (M > max[B]) {\n                System.out.format(\"Case #%d: IMPOSSIBLE\\n\", t);\n            } else {\n                System.out.format(\"Case #%d: POSSIBLE\\n\", t);\n                if (M == max[B]) {\n                    for (int i = 0; i < B; i++) {\n                        for (int j = 0; j < B; j++) {\n                            if (j>i) System.out.print('1');\n                            else System.out.print('0');\n                        }\n                        System.out.println();\n                    }\n                } else {\n                    String binaryB = Long.toBinaryString(M);\n                    binaryB = '0' + binaryB + '0';\n                    while (binaryB.length() < B) {\n                        binaryB = '0' + binaryB;\n                    }\n                    System.out.println(binaryB);\n                    boolean flag = false;\n                    for (int i = 1; i < B; i++) {\n                        if (binaryB.charAt(i) == '1') {\n                            flag = true;\n                        }\n                        for (int j = 0; j < B; j++) {\n                            if (flag && j>i) System.out.print('1');\n                            else System.out.print('0');\n                        }\n                        System.out.println();\n                    }\n                }\n            }\n        }\n    }\n}\n", "idx": "9102"}
{"func": "package googlejam9.p103;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\npublic class Be\n{\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tout = new PrintWriter(new FileWriter(\"outB.txt\"));\n\t\tint testCases = Integer.parseInt(next());\n\t\tfor (int t = 1; t <= testCases; t++)\n\t\t{\n\t\t\tint b = Integer.parseInt(next());\n\t\t\tlong m = Long.parseLong(next());\n\n\t\t\tif (Math.pow(2, b - 2) < m)\n\t\t\t\tout.printf(\"Case #%d: IMPOSSIBLE%n\", t);\n\t\t\telse\n\t\t\t{\n\t\t\t\tint[][] g = new int[b][b];\n\t\t\t\tfor (int i = 1; i < b; i++)\n\t\t\t\t\tg[0][i] = 1;\n\n\t\t\t\tlong c = 1;\n\n\t\t\t\tlong[] p = new long[b];\n\t\t\t\tp[b - 1] = 1;\n\n\t\t\t\tfor (int i = b - 2; i >= 0; i--)\n\t\t\t\t\tfor (int j = i + 1; j < b; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (c == m)\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tif (c + p[j] <= m)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tg[i][j] = 1;\n\t\t\t\t\t\t\tp[i] += p[j];\n\t\t\t\t\t\t\tc += p[j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\tif (c == m)\n\t\t\t\t{\n\t\t\t\t\tout.printf(\"Case #%d: POSSIBLE%n\", t);\n\t\t\t\t\tfor (int i = 0; i < b; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (int j = 0; j < b; j++)\n\t\t\t\t\t\t\tout.print(Math.min(1, g[i][j]));\n\t\t\t\t\t\tout.println();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tout.printf(\"Case #%d: IMPOSSIBLE%n\", t);\n\t\t\t}\n\t\t}\n\t\tout.close();\n\t}\n\n\tstatic BufferedReader br = new BufferedReader(new InputStreamReader(\n\t\t\tSystem.in));\n\tstatic PrintWriter out = new PrintWriter(new BufferedWriter(\n\t\t\tnew OutputStreamWriter(System.out)));\n\tstatic StringTokenizer st;\n\n\tstatic String next() throws IOException\n\t{\n\t\twhile (st == null || !st.hasMoreTokens())\n\t\t\tst = new StringTokenizer(br.readLine().trim());\n\t\treturn st.nextToken();\n\t}\n\n}\n", "idx": "9103"}
{"func": "package googlejam9.p104;\nimport java.util.*;\nimport java.io.*;\nimport java.math.*;\nimport static java.lang.Math.*;\nimport static java.lang.System.*;\nimport static java.lang.Integer.*;\n\npublic class B {\n    public static void main(String args[]) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(in));\n        int T = parseInt(br.readLine());\n        for (int z=0;z<T;z++) {\n            String[] ss = br.readLine().trim().split(\"\\\\s+\");\n            int B = parseInt(ss[0]);\n            Long M = Long.parseLong(ss[1]);\n\n            long x = 1L << (B-2);\n            if (M > x) {\n                out.println(\"Case #\" + (z+1) + \": IMPOSSIBLE\");\n                continue;\n            } \n            boolean[][] mat = new boolean[B][B];\n            for(int i=1;i<B;i++) {\n                for(int j=i+1;j<B;j++) {\n                    mat[i][j] = true;\n                }\n            }\n            if (M == x) {\n                for(int j=1;j<B;j++) {\n                    mat[0][j] = true;\n                }\n            } else {\n                int u = B-2;\n                while (M > 0) {\n                    if ((M&1) == 1) {\n                        mat[0][u] = true;\n                    }\n                    u--;\n                    M >>= 1;\n                }\n            }\n            out.println(\"Case #\" + (z+1) + \": POSSIBLE\");\n            StringBuilder sb = new StringBuilder();\n            for(int i=0;i<B;i++) {\n                for(int j=0;j<B;j++) {\n                    sb.append(mat[i][j] ? 1 : 0);\n                }\n                sb.append(\"\\n\");\n            }\n            out.print(sb);\n        }\n    }\n}\n", "idx": "9104"}
{"func": "package googlejam9.p106;\n/**\r\n * File Name: Main.java\r\n * Package Name: com.ncfxy.MyAlgorithm\r\n * Description\uff1a TODO \r\n *\r\n *   ver\t\t\t\t\tdate\t\t\tauthor\r\n * \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n *   1.0-SNAPSHOT\t\t\t2016\u5e744\u67089\u65e5\t\t\tAdministrator\r\n *\r\n * Copyright (c) 2016, ncfxy All Rights Reserved.\r\n */\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.PriorityQueue;\r\nimport java.util.Scanner;\r\nimport java.util.TreeMap;\r\n\r\n/**\r\n * ClassName: Main<br/>\r\n * Description: TODO ADD Description\r\n *\r\n * @author Administrator\r\n * @version 1.0-SNAPSHOT\r\n * @Date 2016 2016\u5e744\u67089\u65e5 \u4e0a\u53489:45:38\r\n */\r\n\r\npublic class Main1 {\r\n\r\n\tpublic static void main(String[] args) {\r\n\r\n\t\tScanner cin = new Scanner(System.in);\r\n\t\twhile (cin.hasNext()) {\r\n\t\t\tint t = cin.nextInt();\r\n\t\t\tfor (int i = 0; i < t; i++) {\r\n\t\t\t\tint index = i + 1;\n\t\t\t\tlong b = cin.nextLong();\n\t\t\t\tlong m = cin.nextLong();\n\t\t\t\tlong temp = 1;\n\t\t\t\ttemp = temp << (b-2);\n\t\t\t\tif (m > temp) {\n\t\t\t\t\tSystem.out.println(\"Case #\" + index + \": IMPOSSIBLE\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"Case #\" + index + \": POSSIBLE\");\n\t\t\t\t\tlong tmpM = m - 1;\n\t\t\t\t\tlong index1 = 2;\n\t\t\t\t\tList<Long> list = new ArrayList<Long>();\n\t\t\t\t\twhile (tmpM > 0) {\n\t\t\t\t\t\tif ((tmpM & 1) > 0) {\n\t\t\t\t\t\t\tlist.add(index1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmpM = tmpM >> 1;\n\t\t\t\t\t\tindex1++;\n\t\t\t\t\t}\n\t\t\t\t\tint matrix[][] = new int[60][60];\n\t\t\t\t\tfor (int i3 = 1; i3 <= b; i3++) {\n\t\t\t\t\t\tfor (int j = 1; j < b; j++) {\n\t\t\t\t\t\t\tif (i3 < j) {\n\t\t\t\t\t\t\t\tmatrix[i3][j] = 1;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmatrix[i3][j] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i1 = 1; i1 <= b; i1++) {\n\t\t\t\t\t\tmatrix[i1][(int) b] = 0;\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i2 = 0; i2 < list.size(); i2++) {\n\t\t\t\t\t\tlong tmp = list.get(i2);\n\t\t\t\t\t\tmatrix[(int) tmp][(int) b] = 1;\n\t\t\t\t\t}\n\t\t\t\t\tmatrix[1][(int)b] = 1;\n\t\t\t\t\tfor (int i4 = 1; i4 <= b; i4++) {\n\t\t\t\t\t\tfor (int j = 1; j <= b; j++) {\n\t\t\t\t\t\t\tif (j == b) {\n\t\t\t\t\t\t\t\tSystem.out.println(matrix[i4][j]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tSystem.out.print(matrix[i4][j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n", "idx": "9106"}
{"func": "package googlejam9.p107;\nimport java.util.*;\nimport java.io.*;\nimport java.math.*;\n\npublic class B {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\n        int t = in.nextInt();  // number of test cases\n        in.nextLine();\n        for (int i = 1; i <= t; ++i) {\n            String[] nums = in.nextLine().split(\" \");\n            int B = Integer.parseInt(nums[0]);\n            BigInteger M = new BigInteger(nums[1]);\n\t\t\tBigInteger[] result = new BigInteger[B+1];\n\t\t\tresult[0] = BigInteger.ZERO;\n\t\t\tresult[1] = BigInteger.ONE;\n\t\t\tBigInteger runningSum = BigInteger.ONE;\n\t\t\tfor(int i4=2; i4<=B; i4++) {\n\t\t\t    result[i4] = runningSum;\n\t\t\t    runningSum = runningSum.add(result[i4]);\n\t\t\t}\n            // System.out.println(B + \"\");\n            // System.out.println(M.toString());\n            BigInteger[] numWays = result;\n            // System.out.println(numWays[B]);\n            if (numWays[B].compareTo(M) < 0) {\n                System.out.println(\"Case #\" + i + \": IMPOSSIBLE\");            \n            } else {\n                System.out.println(\"Case #\" + i + \": POSSIBLE\");    \n                int[][] matrix = new int[B][B];\n\t\t\t\tfor(int i3=0; i3<B;i3++) {\n\t\t\t\t    for(int j=i3+1; j<B;j++) {\n\t\t\t\t        matrix[i3][j] = 1;\n\t\t\t\t    }    \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tBigInteger difference = numWays[B].subtract(M);\n\t\t\t\t\n\t\t\t\twhile(difference.compareTo(BigInteger.ZERO) != 0) {\n\t\t\t\t    for(int i2=B-1; i2>=1; i2--){\n\t\t\t\t        if (difference.compareTo(numWays[i2]) >= 0) {\n\t\t\t\t            //System.out.println(i);\n\t\t\t\t            matrix[i2-1][B-1] = 0;\n\t\t\t\t            difference = difference.subtract(numWays[i2]);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor(int i1=0; i1<B;i1++) {\n\t\t\t\t    for(int j=0; j<B;j++) {\n\t\t\t\t        System.out.print(matrix[i1][j]);\n\t\t\t\t    }    \n\t\t\t\t    System.out.println(\"\");\n\t\t\t\t}   \n            }\n        }\n    }\n}\n\n", "idx": "9107"}
{"func": "package googlejam9.p108;\n\nimport java.io.*;\nimport java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\n    private static final String inputPath = \"/home/abduqodir/Programming/ideaProjects/Other/functions.in\";\n    private static final String outputPath = \"/home/abduqodir/Programming/ideaProjects/Other/functions.out\";\n\n    public static void main (String[] args) throws IOException {\n        Scanner scanner = new Scanner(new FileInputStream(inputPath));\n        PrintWriter printer = new PrintWriter(new FileOutputStream(outputPath));\n        int T = scanner.nextInt();\n        for (int i = 0; i < T; i++) {\n            printer.format(\"Case #%d: \", i + 1);\n            int b = scanner.nextInt();\n            long m = scanner.nextLong();\n            int[][] map = new int[b][b];\n            for (int j = 1; j < b; j++) {\n                for (int k = j + 1; k < b; k++) {\n                    map[j][k] = 1;\n                }\n            }\n            map[0][b - 1] = 1;\n            m--;\n            long bin = 1;\n            for (int j = 2; j < b - 1; j++) {\n                bin *= 2;\n            }\n            for (int j = 1; j < b - 1; j++) {\n                if (m >= bin) {\n                    map[0][j] = 1;\n                    m -= bin;\n                }\n                bin /= 2;\n            }\n            if (m == 0) {\n                printer.println(\"POSSIBLE\");\n                for (int j = 0; j < b; j++) {\n                    for (int k = 0; k < b; k++) {\n                        printer.print(map[j][k]);\n                    }\n                    printer.println();\n                }\n            } else {\n                printer.print(\"IMPOSSIBLE\");\n                printer.println();\n            }\n            printer.flush();\n        }\n    }\n}\n", "idx": "9108"}
{"func": "package googlejam9.p111;\nimport java.util.*;\r\nimport java.math.BigInteger;\r\n\r\npublic class Main {\r\n\t\r\n\tprivate static Scanner scan = new Scanner(System.in);\r\n\tstatic long p2[] = new long[101];\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tint T = scan.nextInt();\r\n\t\tp2[0] = 1;\r\n\t\tfor(int i=1; i<101; i++) p2[i] = p2[i-1]*2;\r\n\t\tint X = 1;\r\n\t\twhile(T-- > 0) {\r\n\t\t\tint n = scan.nextInt();\r\n\t\t\tlong m = scan.nextLong();\r\n\t\t\tboolean [][] ans = new boolean[n][n];\r\n\t\t\tfor(int i=0; i<n; i++) {\r\n\t\t\t\tfor(int j=i+1; j<n; j++) {\r\n\t\t\t\t\tans[i][j] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.print(\"Case #\" + (X++) + \": \");\r\n\t\t\tif(m <= p2[n-2]) {\r\n\t\t\t\tSystem.out.println(\"POSSIBLE\");\r\n\t\t\t\tBigInteger bi = new BigInteger(\"\" + (p2[n-2] - m));\r\n\t\t\t\tString s = bi.toString(2);\r\n\t\t\t\tfor(int i=s.length()-1; i>=0; i--) {\r\n\t\t\t\t\tif(s.charAt(i) == '1') {\r\n\t\t\t\t\t\tans[s.length()-i][n-1] = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(int i=0; i<n; i++) {\r\n\t\t\t\t\tfor(int j=0; j<n; j++) {\r\n\t\t\t\t\t\tif(ans[i][j] == true) System.out.print(\"1\");\r\n\t\t\t\t\t\telse System.out.print(\"0\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tSystem.out.println(\"IMPOSSIBLE\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "idx": "9111"}
{"func": "package googlejam9.p113;\nimport java.util.*;\r\n\r\npublic class B {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tB b = new B();\r\n\t\tScanner in = new Scanner(System.in);\n\t\tint cases = Integer.parseInt(in.nextLine());\n\t\tfor (int a=0; a<cases; a++) {\n\t\t\tString[] line = in.nextLine().split(\" \");\n\t\t\tint b1 = Integer.parseInt(line[0]);\n\t\t\tlong m = Long.parseLong(line[1]);\n\t\t\tboolean[][] connected = new boolean[b1][b1];\n\t\t\tlong[] value = new long[b1];\n\t\t\tvalue[b1-1] = 1;\n\t\t\tvalue[b1-2] = 1;\n\t\t\tconnected[b1-2][b1-1] = true;\n\t\t\tfor (int i=b1-3; i>=0; i--) {\n\t\t\t\tint j = i+1;\n\t\t\t\twhile (j < b1 && value[i] < m) {\n\t\t\t\t\tif (value[i] + value[j] <= m) {\n\t\t\t\t\t\tvalue[i] += value[j];\n\t\t\t\t\t\tconnected[i][j] = true;\n\t\t\t\t\t}\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (value[0]==m) {\n\t\t\t\tSystem.out.printf(\"Case #%d: POSSIBLE\\n\",a+1);\n\t\t\t\tint b2 = connected.length;\n\t\t\t\tfor (int i=0; i<b2; i++) {\n\t\t\t\t\tStringBuilder build = new StringBuilder();\n\t\t\t\t\tfor (int j=0; j<b2; j++) {\n\t\t\t\t\t\tif (connected[i][j]) {\n\t\t\t\t\t\t\tbuild.append(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbuild.append(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(build.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.printf(\"Case #%d: IMPOSSIBLE\\n\",a+1);\n\t\t\t}\n\t\t}\r\n\t}\r\n}", "idx": "9113"}
{"func": "package googlejam9.p114;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\n/*\r\n * To change this license header, choose License Headers in Project Properties.\r\n * To change this template file, choose Tools | Templates\r\n * and open the template in the editor.\r\n */\r\n/**\r\n *\r\n * @author Madi\r\n */\r\npublic class CodeJam3_B {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException, IOException {\r\n        try (BufferedReader br = new BufferedReader(new FileReader(\"C:/Users/Madi/codejam/B-small-practice.in\"));\r\n                BufferedWriter bw = new BufferedWriter(new FileWriter(\"C:/Users/Madi/codejam/B-small-practice.out\"))) {\r\n\r\n            int t = Integer.parseInt(br.readLine());\r\n\r\n            for (int i = 0; i < t; i++) {\r\n                String[] s = br.readLine().split(\" \");\r\n                int b = Integer.parseInt(s[0]);\r\n                long m = Long.parseLong(s[1]);\n\t\t\t\tint cs = i + 1;\r\n                if (m > Math.pow(2, b - 2)) {\n\t\t\t\t    bw.write(\"Case #\" + cs + \": IMPOSSIBLE\");\n\t\t\t\t    bw.write(\"\\n\");\n\t\t\t\t    bw.flush();\n\t\t\t\t} else {\n\t\t\t\t\n\t\t\t\t    int pow = 0;\n\t\t\t\t    long res = 1;\n\t\t\t\t    while (pow < b - 2) {\n\t\t\t\t        res *= 2;\n\t\t\t\t        pow++;\n\t\t\t\t    }\n\t\t\t\t    res -= m;\n\t\t\t\t    ArrayList<Integer> list = new ArrayList<>();\n\t\t\t\t    while (res > 0) {\n\t\t\t\t        pow = 0;\n\t\t\t\t        long k = 1;\n\t\t\t\t        while (pow <= 50) {\n\t\t\t\t            if (k == res) {\n\t\t\t\t                list.add(pow + 1);\n\t\t\t\t                res = 0;\n\t\t\t\t                break;\n\t\t\t\t            } else if (k > res) {\n\t\t\t\t                list.add(pow);\n\t\t\t\t                res -= k / 2;\n\t\t\t\t                break;\n\t\t\t\t            }\n\t\t\t\t            k *= 2;\n\t\t\t\t            pow++;\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t\n\t\t\t\t    bw.write(\"Case #\" + cs + \": POSSIBLE\\n\");\n\t\t\t\t\n\t\t\t\t    for (int i1 = 0; i1 < b; i1++) {\n\t\t\t\t        for (int j = 0; j < b; j++) {\n\t\t\t\t            if (i1 >= j || (j == b - 1 && list.contains(i1))) {\n\t\t\t\t                bw.write(\"0\");\n\t\t\t\t            } else {\n\t\t\t\t                bw.write(\"1\");\n\t\t\t\t            }\n\t\t\t\t        }\n\t\t\t\t        bw.write(\"\\n\");\n\t\t\t\t    }\n\t\t\t\t    bw.flush();\n\t\t\t\t}\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n", "idx": "9114"}
{"func": "package googlejam9.p116;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.util.Scanner;\n\npublic class B {\n\tpublic static void main(String[] args) throws FileNotFoundException, UnsupportedEncodingException {\n\t\tString filename = \"B-large\";\n\t\tScanner sc = new Scanner(new File(filename + \".in\"));\n\t\t//Scanner sc = new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(filename + \".out\", \"UTF-8\");\n\t\twhile (sc.hasNext()) {\n\t\t\tint T = sc.nextInt();\n\t\t\tfor (int i = 1; i <= T; i++) {\n\t\t\t\tint B = sc.nextInt();\n\t\t\t\tlong M = sc.nextLong();\n\t\t\t\tlong max = 1L << (B - 2);\n\t\t\t\tif (M > max) {\n\t\t\t\t\tSystem.out.println(\"Case #\" + i + \": IMPOSSIBLE\");\n\t\t\t\t\tpw.println(\"Case #\" + i + \": IMPOSSIBLE\");\n\t\t\t\t} else {\n\t\t\t\t\tString str = \"0\";\n\t\t\t\t\tSystem.out.println(\"Case #\" + i + \": POSSIBLE\");\n\t\t\t\t\tpw.println(\"Case #\" + i + \": POSSIBLE\");\n\t\t\t\t\tfor(int j = B-2; j > 0; j--) {\n\t\t\t\t\t\tif(M >= (1L << (j-1))) {\n\t\t\t\t\t\t\tM -= (1L << (j-1));\n\t\t\t\t\t\t\tstr += \"1\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr += \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstr += M==1 ? \"1\" : \"0\";\n\t\t\t\t\tpw.println(str);\n\t\t\t\t\tSystem.out.println(str);\n\t\t\t\t\tfor(int j = 1; j < B; j++) {\n\t\t\t\t\t\tfor(int k = 0; k < B; k++) {\n\t\t\t\t\t\t\tpw.print(k <= j ? \"0\" : \"1\");\n\t\t\t\t\t\t\tSystem.out.print(k <= j ? \"0\" : \"1\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpw.println();\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tpw.close();\n\t\t}\n\t}\n\n}", "idx": "9116"}
{"func": "package googlejam9.p118;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n * Created by fleeon on 5/8/16.\n */\npublic class B {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        Scanner scanner = new Scanner(new File(\"B.in\"));\n        PrintWriter writer = new PrintWriter(\"B.out\");\n        int T = scanner.nextInt();\n        for (int t = 0; t < T; t++) {\n            int B = scanner.nextInt();\n            long M = scanner.nextLong();\n            long bi[] = new long[B + 1];\n            long now = 1, sum = now;\n            bi[1] = now;\n            for (int b = 2; b < B; b++) {\n                now = Math.min(now, M - sum);\n                if (now == 0) break;\n                bi[b] = now;\n                sum += now;\n                now *= 2;\n            }\n            bi[B] = sum;\n//            writer.println(Arrays.toString(bi));\n\n            writer.printf(\"Case #%d: \", t + 1);\n            if (bi[B] < M) {\n                writer.println(\"IMPOSSIBLE\");\n            } else {\n                writer.println(\"POSSIBLE\");\n                int res[][] = new int[B + 1][B + 1];\n                for (int i = 1; i <= B; i++) {\n                    sum = bi[i];\n                    for (int j = i - 1; j >= 1 && sum > 0; j--) {\n                        if (bi[j] == 0 || sum - bi[j] < 0) continue;\n                        sum -= bi[j];\n                        res[j][i] = 1;\n                    }\n                }\n                for (int i = 1; i <= B; i++) {\n                    for (int j = 1; j <= B; j++) {\n                        writer.print(res[i][j]);\n                    }\n                    writer.println();\n                }\n            }\n        }\n        writer.close();\n    }\n}\n", "idx": "9118"}
{"func": "package googlejam9.p120;\n\nimport java.util.*;\n\npublic class B {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n\n        for (int t = 1; t <= T; ++t) {\n            int n = in.nextInt();\n            long m = in.nextLong();\n            boolean[][] b = new boolean[n][n];\n            long[] sum = new long[n];\n            sum[0] = 1;\n            b[0][n - 1] = true;\n            --m;\n            int cur = 1;\n            while (m > 0 && cur < n - 1) {\n                b[cur][n - 1] = true;\n                b[0][cur] = true;\n                --m;\n                sum[cur]++;\n                for (int prev = cur - 1; prev > 0; --prev) {\n                    if (m >= sum[prev]) {\n                        b[prev][cur] = true;\n                        m -= sum[prev];\n                        sum[cur] += sum[prev];\n                    }\n                }\n                ++cur;\n            }\n\n            if (m > 0) {\n                System.out.println(\"Case #\" + t + \": IMPOSSIBLE\");\n            } else {\n                System.out.println(\"Case #\" + t + \": POSSIBLE\");\n                for (int i = 0; i < n; ++i) {\n                    for (int j = 0; j < n; ++j) {\n                        System.out.print(b[i][j] ? 1 : 0);\n                    }\n                    System.out.println();\n                }\n            }\n        }\n    }\n}\n", "idx": "9120"}
{"func": "package googlejam9.p125;\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class B {\r\n\tstatic Scanner in = null;\r\n\tstatic PrintWriter out = null;\r\n\tstatic FileInputStream toclose=null;\r\n\t\r\n\t//static String file = \"B-training.in\";\r\n\t//static String file = \"B-small-attempt1.in\";\r\n\tstatic String file = \"B-large.in\";\r\n\tstatic String folder = \"CodeJam16\";\r\n\tstatic String contest = \"1C\";\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tString empInput = \"C:/Users/Momo/Desktop/\"+folder+\"/\"+file;\n\t\tString empOutput = \"C:/Users/Momo/Desktop/\"+folder+\"/Liet-\"+contest+\"-\"+file+\".out\";\n\t\ttry {\n\t\t\ttoclose = new FileInputStream(empInput);\n\t\t\tSystem.setIn(toclose);\n\t\t\tin = new Scanner(System.in);\n\t\t\tout = new PrintWriter(empOutput);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"Ouverture\");\n\t\t\te.printStackTrace();\n\t\t}\r\n\r\n\t\tint nbLig = in.nextInt();\r\n\t\t\r\n\t\tfor(int lig=0; lig<nbLig; lig++){\r\n\t\t\tint nBuild = in.nextInt();\r\n\t\t\tlong nMouv = in.nextLong();\r\n\t\t\t\r\n\t\t\tint[][] slides = new int[nBuild][nBuild];\r\n\t\t\t\r\n\t\t\tif( ((long)Math.pow(2, nBuild-2)) < nMouv ){\r\n\t\t\t\tout.println(\"Case #\"+(lig+1)+\": \"+ \"IMPOSSIBLE\" );\r\n\t\t\t}else{\r\n\t\t\t\tout.println(\"Case #\"+(lig+1)+\": \"+ \"POSSIBLE\" );\r\n\t\t\t\t\r\n\t\t\t\tfor(int i=0; i<nBuild; i++){\r\n\t\t\t\t\tfor(int j=i+1; j<nBuild; j++){\r\n\t\t\t\t\t\tif(j!=nBuild-1 || i==0){\r\n\t\t\t\t\t\t\tslides[i][j]=1;\r\n\t\t\t\t\t\t}else{ //last collumn\r\n\t\t\t\t\t\t\tslides[i][j]= (int) (((nMouv-1)>>(i-1) )%2);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tfor(int i=0; i<nBuild; i++){\r\n\t\t\t\t\tfor(int j=0; j<nBuild; j++){\r\n\t\t\t\t\t\tout.print(slides[i][j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tout.println();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\tin.close();\n\t\tout.close();\n\t\ttry {\n\t\t\ttoclose.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\r\n\t}\r\n\t\r\n}\r\n", "idx": "9125"}
{"func": "package googlejam9.p126;\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\n\nimport javafx.util.Pair;\n\n\npublic class Slides {\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint t = scanner.nextInt();\n\t\tfor(int cas=1; cas<=t; ++cas) {\n\t\t\tint b = scanner.nextInt();\n\t\t\tlong m = scanner.nextLong();\n\t\t\tif(m > Math.pow(2, b-2)){\n\t\t\t\tSystem.out.printf(\"Case #%d: IMPOSSIBLE\\n\", cas);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tboolean[][] ans = new boolean[b][b];\n\t\t\t\tif(m>0) {\n\t\t\t\t\tans[0][b-1] = true;\n\t\t\t\t\tm--;\n\t\t\t\t}\n\t\t\t\tfor(int i=0; i<b-1; ++i) {\n\t\t\t\t\tif(m>0) \n\t\t\t\t\t\tans[i+1][b-1] = true;\n\t\t\t\t\tif(m>=Math.pow(2, i)) {\n\t\t\t\t\t\tfor(int j=0; j<=i; ++j)\n\t\t\t\t\t\t\tans[j][i+1] = true;\n\t\t\t\t\t\tm-=Math.pow(2,i);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tint row = 1;\n\t\t\t\t\t\twhile(m>0) {\n\t\t\t\t\t\t\tif(m%2==1) {\n\t\t\t\t\t\t\t\tans[row][i+1] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tm/=2;\n\t\t\t\t\t\t\trow++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.printf(\"Case #%d: POSSIBLE\\n\", cas);\n\t\t\t\tfor(int i=0; i<b; ++i){\n\t\t\t\t\tfor(int j=0; j<b; ++j)\n\t\t\t\t\t\tSystem.out.printf(\"%s\", ans[i][j]?\"1\":\"0\");\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n}\n", "idx": "9126"}
{"func": "package googlejam9.p127;\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class R1C_B_1 {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner scanner = new Scanner(new File(\"D:/ForPrograms/java/TESTS/B-large.in\"));\r\n\t\tFileWriter writer = new FileWriter(\"D:/ForPrograms/java/TESTS/B-large.out\", false);\r\n\t\t\r\n\t\tint cases = scanner.nextInt();\r\n\t\t\r\n\t\t\r\n\t\tfor(int i=0;i<cases;i++){\r\n\t\t\t\r\n\t\t\tint b = scanner.nextInt();\r\n\t\t\tlong c = scanner.nextLong();\r\n\t\t\t\r\n\t\t\twriter.write(\"Case #\"+(i+1)+\": \");\r\n\t\t\t\r\n\t\t\tlong rc = b-2;\r\n\t\t\tlong maxCount = 1;\r\n\t\t\twhile(rc>0){\r\n\t\t\t\tmaxCount *= 2;\r\n\t\t\t\trc--;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(maxCount >= c){\r\n\t\t\t\twriter.write(\"POSSIBLE\");\r\n\t\t\t\t\r\n\t\t\t\tlong needMinus = maxCount-c;\r\n\t\t\t\t\r\n\t\t\t\tlong[][] arr = new long[b][b];\r\n\t\t\t\tfor(int j=0;j<b;j++){\r\n\t\t\t\t\tArrays.fill(arr[j], 0);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(c == 0){\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(int j=0;j<b;j++){\r\n\t\t\t\t\t\tfor(int k=0;k<b;k++){\r\n\t\t\t\t\t\t\tif(k>j){\r\n\t\t\t\t\t\t\t\tarr[j][k] = 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(maxCount == c){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlong[] arrm = new long[b-2];\r\n\t\t\t\t\t\tArrays.fill(arrm, 0);\r\n\t\t\t\t\t\tlong cn = 1;\r\n\t\t\t\t\t\tfor(int j=b-3;j>=0;j--){\r\n\t\t\t\t\t\t\tcn*=2;\r\n\t\t\t\t\t\t\tarrm[j] = cn/2;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//arrm[b-2] = 1;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(int l=0;l<b-2;l++){\r\n\t\t\t\t\t\t\tif(needMinus >= arrm[l]){\r\n\t\t\t\t\t\t\t\tneedMinus -= arrm[l];\r\n\t\t\t\t\t\t\t\tarr[0][l+1] = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\twriter.append('\\r');\r\n\t\t\t\twriter.append('\\n');\r\n\t\t\t\tfor(int j=0;j<b;j++){\r\n\t\t\t\t\tfor(int k=0;k<b;k++){\r\n\t\t\t\t\t\tSystem.out.print(arr[j][k]+\"\");\r\n\t\t\t\t\t\twriter.write(arr[j][k]+\"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println(\"\");\r\n\t\t\t\t\twriter.append('\\r');\r\n\t\t\t\t\twriter.append('\\n');\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\twriter.write(\"IMPOSSIBLE\");\r\n\t\t\t\twriter.append('\\r');\r\n\t\t\t\twriter.append('\\n');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t//writer.append('\\r');\r\n\t\t\t//writer.append('\\n');\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t/*if(i != cases-1)\r\n\t\t\t\tscanner.nextLine();*/\r\n\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tscanner.close();\r\n\t\twriter.close();\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "9127"}
{"func": "package googlejam9.p130;\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner scanner = new Scanner(new File(\"E:/Downloads/B-large.in\"));\r\n\t\tFileWriter writer = new FileWriter(\"E:/Downloads/data.out\", false);\r\n\t\t\r\n\t\tint cases = scanner.nextInt();\r\n\t\t\r\n\t\t\r\n\t\tfor(int i=0;i<cases;i++){\r\n\t\t\t\r\n\t\t\tint br = scanner.nextInt();\r\n\t\t\tlong cr = scanner.nextLong();\r\n\t\t\t\r\n\t\t\twriter.write(\"Case #\"+(i+1)+\": \");\r\n\t\t\t\r\n\t\t\tlong rc = br-2;\r\n\t\t\tlong maximu = 1;\r\n\t\t\twhile(rc>0){\r\n\t\t\t\tmaximu *= 2;\r\n\t\t\t\trc--;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(maximu >= cr){\r\n\t\t\t\twriter.write(\"POSSIBLE\");\r\n\t\t\t\t\r\n\t\t\t\tlong needMinus = maximu-cr;\r\n\t\t\t\t\r\n\t\t\t\tlong[][] arr = new long[br][br];\r\n\t\t\t\tfor(int j=0;j<br;j++){\r\n\t\t\t\t\tArrays.fill(arr[j], 0);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(cr == 0){\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tfor(int j=0;j<br;j++){\r\n\t\t\t\t\t\tfor(int k=0;k<br;k++){\r\n\t\t\t\t\t\t\tif(k>j){\r\n\t\t\t\t\t\t\t\tarr[j][k] = 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(maximu == cr){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlong[] arraywith = new long[br-2];\r\n\t\t\t\t\t\tArrays.fill(arraywith, 0);\r\n\t\t\t\t\t\tlong cn = 1;\r\n\t\t\t\t\t\tfor(int j=br-3;j>=0;j--){\r\n\t\t\t\t\t\t\tcn*=2;\r\n\t\t\t\t\t\t\tarraywith[j] = cn/2;\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tfor(int l=0;l<br-2;l++){\r\n\t\t\t\t\t\t\tif(needMinus >= arraywith[l]){\r\n\t\t\t\t\t\t\t\tneedMinus -= arraywith[l];\r\n\t\t\t\t\t\t\t\tarr[0][l+1] = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\twriter.append('\\r');\r\n\t\t\t\twriter.append('\\n');\r\n\t\t\t\tfor(int j=0;j<br;j++){\r\n\t\t\t\t\tfor(int k=0;k<br;k++){\r\n\t\t\t\t\t\tSystem.out.print(arr[j][k]+\"\");\r\n\t\t\t\t\t\twriter.write(arr[j][k]+\"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println(\"\");\r\n\t\t\t\t\twriter.append('\\r');\r\n\t\t\t\t\twriter.append('\\n');\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\twriter.write(\"IMPOSSIBLE\");\r\n\t\t\t\twriter.append('\\r');\r\n\t\t\t\twriter.append('\\n');\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tscanner.close();\r\n\t\twriter.close();\r\n\t\t\r\n\t\t\r\n\t}\r\n\r\n}\r\n", "idx": "9130"}
{"func": "package googlejam9.p131;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\n\r\npublic class B{\r\n\tstatic final String inFile=\"B-small.in\";\r\n\tstatic final String outFile=\"B.out\";\r\n\t\r\n\tstatic int t,n,count;\r\n\tstatic long m, rem;\r\n\tstatic String line,str,s,u;\r\n\tstatic String[]row;\r\n\tstatic int[][]a;\r\n\tstatic boolean debug = false;\r\n\t\r\n\tpublic static void main(String [ ] args) throws IOException{\r\n\t\tB r = new B();\n\t\tint i,j,k,l;\n\t\t\n\t\tBufferedReader br = new BufferedReader(new FileReader(B.inFile));\n\t\ttry {\n\t\t\tFile file = new File(B.outFile);\n\t\t\tif (!file.exists()) {file.createNewFile();}\n\t\t\tFileWriter fw = new FileWriter(file.getAbsoluteFile());\n\t\t\tBufferedWriter bw = new BufferedWriter(fw);\n\t\t\t\n\t\t    B.line = br.readLine();\n\t\t    B.t = Integer.valueOf(B.line); //1 <= T <= 200\n\t\t\n\t\t\tB.a = new int[50][50];\n\t\t    for(l = 0; l < B.t; l++){\n\t\t    \tB.line = br.readLine();\n\t\t\t\tB.row = B.line.split(\"\\\\s\");\n\t\t\t\tB.n = Integer.valueOf(B.row[0]);\n\t\t\t\tB.m = Long.valueOf(B.row[1]);\n\t\t\t\tfor(i = 0; i < B.n; i++){\n\t\t\t\t\tArrays.fill(B.a[i], 0);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//m\n\t\t\t\tbw.write(\"Case #\"+(l+1)+\": \");\n\t\t\t\tif(B.m > Math.pow(2,B.n-2)){\n\t\t\t\t\tbw.write(\"IMPOSSIBLE\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tif (B.m>0) {\n\t\t\t\t\t\tint i1,j1,k1;\n\t\t\t\t\t\tB.a[0][B.n-1]=1;\n\t\t\t\t\t\tB.rem = B.m;\n\t\t\t\t\t\tint pow = 0;\n\t\t\t\t\t\tfor(; B.rem>0; ){\n\t\t\t\t\t\t\tB.rem/=2;pow++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tB.rem = (long) Math.pow(2, pow-1);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//System.out.println(\"AC\"+rem);\n\t\t\t\t\t\t//create pow matrix\n\t\t\t\t\t\tfor(i1 = 1; i1 <pow; i1++){\n\t\t\t\t\t\t\tfor(j1 = i1; j1 <pow; j1++){\n\t\t\t\t\t\t\t\t\tif(i1<j1) B.a[i1][j1]=1;\n\t\t\t\t\t\t\t\t\tif(j1<B.n-1) B.a[j1][B.n-1]=1;\n\t\t\t\t\t\t\t\t\tB.a[0][j1]=1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//last 2^pow-2^pow elements\n\t\t\t\t\t\tB.rem = B.m - (long) Math.pow(2, pow-1);\n\t\t\t\t\t\tif(B.rem>0){\n\t\t\t\t\t\t\t//connect i = pow\n\t\t\t\t\t\t\tB.a[0][pow]=1;\n\t\t\t\t\t\t\tB.a[pow][B.n-1]=1;\n\t\t\t\t\t\t\tB.rem--;//1 done\n\t\t\t\t\t\t\t//add a[pow][j] iff 1 is in j position in binary representation\n\t\t\t\t\t\t\t//System.out.println(\"AB\"+(rem));\n\t\t\t\t\t\t\t//System.out.println(\"AA\"+pow);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(int step=1;B.rem>0;step++){\n\t\t\t\t\t\t\t\tSystem.out.print(B.rem%2);\n\t\t\t\t\t\t\t\tif(B.rem%2==1) {\n\t\t\t\t\t\t\t\t\tB.a[pow][pow-step]=1;\n\t\t\t\t\t\t\t\t\t//System.out.println(\"A[\"+(pow-step));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tB.rem/=2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//System.out.println(\"AA\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//output\n\t\t\t\t\tbw.write(\"POSSIBLE\\n\");\n\t\t\t\t\tfor(i = 0; i < B.n; i++){\n\t\t\t\t\t\tfor(j = 0; j < B.n; j++){\n\t\t\t\t\t\t\tbw.write(\"\"+B.a[i][j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbw.write(\"\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t    }\n\t\t\tbw.close();\n\t\t} finally {br.close();}\r\n\t}\r\n}\r\n", "idx": "9131"}
{"func": "package googlejam9.p132;\nimport java.io.*;\r\n\r\nimport java.util.*;\r\n\r\npublic class codejam {\r\n\r\n    static String i0 = \"dummy.in\";\r\n    static String o0 = \"dummy.out\";\r\n\r\n    static String i1 = \"small.in\";\r\n    static String o1 = \"small.out\";\r\n\r\n    static String i2 = \"large.in\";\r\n    static String o2 = \"large.out\";\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        Scanner r = null;\r\n        FileWriter w = null;\r\n\r\n        r = new Scanner(new FileReader(i0));\r\n        w = new FileWriter(new File(o0));\r\n\r\n        int t = r.nextInt();\r\n        //r.nextLine();\r\n        \r\n        for (int i=0;i<t;i++){\r\n            w.write(\"Case #\"+(i+1)+\": \");\r\n            int b = r.nextInt();\r\n            long m = r.nextLong();\r\n            if (m > (long)Math.pow(2, b-2)){\r\n                w.write(\"IMPOSSIBLE\\n\");\r\n                continue;\r\n            } else {\r\n                w.write(\"POSSIBLE\\n\");\r\n                String s = Long.toBinaryString(m-1);\r\n                int len = s.length();\r\n                w.write(\"0\");\r\n                if (s.length() < b-2){\r\n                    for(int j=0;j<b-2-len;j++){\r\n                        s = \"0\"+s;\r\n                    }\r\n                }\r\n                if (b != 2){\r\n                    w.write(s);\r\n                }\r\n                w.write(\"1\\n\");\r\n                for(int j=1;j<b;j++){\r\n                    for (int k=0;k<=j;k++){\r\n                        w.write(\"0\");\r\n                    }\r\n                    for (int k=j+1;k<b;k++){\r\n                        w.write(\"1\");\r\n                    }\r\n                    w.write(\"\\n\");\r\n                }\r\n            }\r\n            //w.write(\"\\n\");\r\n        }\r\n        w.close();\r\n    }\r\n}\r\n", "idx": "9132"}
{"func": "package googlejam9.p133;\n\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\n\npublic class B {\n  public static void main(String[] args) throws Exception {\n    BufferedWriter bw = new BufferedWriter(new FileWriter(\n        \"B-large.out\"));\n    BufferedReader br = new BufferedReader(new FileReader(\n        \"B-large.in\"));\n    br.readLine();\n    String line;\n    int testCase = 1;\n    while ((line = br.readLine()) != null) {\n      if (line.length() == 0) {\n        break;\n      }\n      bw.write(\"Case #\" + testCase++ + \": \");\n      String[] parts = line.split(\" \");\n      long b = Long.parseLong(parts[0]);\n      long m = Long.parseLong(parts[1]);\n      if (b == 2) {\n        if (m != 1) {\n          bw.write(\"IMPOSSIBLE\\n\");\n        } else {\n          bw.write(\"POSSIBLE\\n01\\n00\\n\");\n        }\n      } else {\n        long max = (1L << (b - 2));\n        if (m > max) {\n          bw.write(\"IMPOSSIBLE\\n\");\n        } else {\n          bw.write(\"POSSIBLE\\n0\");\n          bw.write(String.format(\"%\" + (b - 2) + \"s\",\n              Long.toBinaryString(m - 1))\n              .replace(' ', '0'));\n          bw.write(\"1\\n\");\n          for (int j = 1; j < b; j++) {\n            for (int k = 0; k < b; k++) {\n              bw.write(k <= j ? \"0\" : \"1\");\n            }\n            bw.write(\"\\n\");\n          }\n        }\n      }\n    }\n    br.close();\n    bw.close();\n  }\n}\n", "idx": "9133"}
{"func": "package googlejam9.p137;\n\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n *\n * @author astorres\n */\npublic class B1 {\n\n    public static final String rutaDatos = \"C:\\\\Users\\\\Augusto\\\\Desktop\\\\Code Jam\\\\\";\n    \n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        String problem = \"B\";\n        //String input=problem+\"-sample.in\";\n        //String input=problem+\"-small-attempt1.in\";\n        String input=problem+\"-large.in\";\n        Scanner in = new Scanner(new File(rutaDatos+\"input\\\\\"+input));\n        PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(rutaDatos+\"output\\\\\"+input+\".out.txt\")));    \n        \n        int T = in.nextInt();\n        for(int i=0;i<T;i++) {\n            \n            /*********************************/\n            \n            int B = in.nextInt();\n            long M = in.nextLong();\n            \n            \n            \n            String answer = \"Case #\"+(i+1)+\": \";\n            \n            long l = 1;\n            for(int j=0;j<B-2;j++) l = l*2;\n            \n            if(M>l) {\n                answer += \"IMPOSSIBLE\";\n                System.out.println(answer);\n                out.println(answer);\n            }\n            else {\n                answer += \"POSSIBLE\";\n                System.out.println(answer);\n                out.println(answer);\n                for(int j=0;j<B;j++) {\n                    for(int k=0;k<B;k++) {\n                        int d=0;\n                        if(k>j&&k<B-1) {\n                            d = 1;\n                        }\n                        if(j==0&&k==B-1) d=1;\n                        else if(k==B-1) {\n                            long p = M-1;\n                            String s = Long.toBinaryString(p);\n                            //System.out.println(\"*\"+s+\"*\");\n                            if(j>s.length()) d=0;\n                            else d = (s.charAt(s.length()-j))-'0';\n                        }\n                        System.out.print(d);\n                        out.print(d);\n                    }\n                    System.out.println();\n                    out.println();\n                }\n            }\n            \n            \n            \n            \n            /*********************************/\n            \n            \n        }\n        out.close();\n    }\n    \n}\n", "idx": "9137"}
{"func": "package googlejam9.p141;\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\npublic class CodeJam {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tfinal int T = Integer.parseInt(sc.nextLine());\r\n\t\tfor (int caseCount = 1; caseCount <= T; caseCount++) {\r\n\t\t\tfinal int B = sc.nextInt();\r\n\t\t\tfinal long M = sc.nextLong();\r\n\t\t\tint[][] g = new int[B][B];\r\n\t\t\tlong[] pathCounts = new long[B];\r\n\t\t\tg[B-2][B-1] = 1;\r\n\t\t\tpathCounts[B-1] = 1;\r\n\t\t\tfor (int y = B - 2; y >= 0; y--) {\r\n\t\t\t\tlong count = 0;\r\n\t\t\t\tfor (int x = y + 1; x < B; x++) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\tif (count + pathCounts[x] <= M) {\r\n\t\t\t\t\t\tg[y][x] = 1;\r\n\t\t\t\t\t\tcount += pathCounts[x];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t} catch (InputMismatchException e) {\r\n\t\t\t\t\t    System.out.print(e.getMessage()); //try to find out specific reason.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tpathCounts[y] = count;\r\n\t\t\t}\r\n\t\t\tboolean possible = (pathCounts[0] == M);\r\n\r\n\t\t\tSystem.out.print(\"Case #\" + caseCount + \": \");\r\n\t\t\tif (possible) {\r\n\t\t\t\tSystem.out.println(\"POSSIBLE\");\r\n\t\t\t\tfor (int y = 0; y < B; y++) {\r\n\t\t\t\t\tfor (int x = 0; x < B; x++) {\r\n\t\t\t\t\t\tSystem.out.print(g[y][x]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.println(\"IMPOSSIBLE\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tsc.close();\r\n\t}\r\n\r\n}", "idx": "9141"}
{"func": "package googlejam9.p142;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class RoundThreeProblemThree {\n\n    public static void main(String[] args) {\n\n//        String ipf = \"/Users/KiRaN/Desktop/CodeBase/Google_CodeBase/SheepSleep/src/small.in\";\n//        String opf = \"/Users/KiRaN/Desktop/CodeBase/Google_CodeBase/SheepSleep/src/small.out\";\n        \n        String ipf = \"/Users/KiRaN/Desktop/CodeBase/Google_CodeBase/SheepSleep/src/large.in\";\n        String opf = \"/Users/KiRaN/Desktop/CodeBase/Google_CodeBase/SheepSleep/src/large.out\";\n        \n        \n        try {\n\n            BufferedReader bufferedReader = new BufferedReader(new FileReader(ipf));\n            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(opf));\n\n            // Total number of test cases\n            int noOfTestCases = Integer.valueOf(bufferedReader.readLine());\n            \n            \n            \n            for (int testCases = 0; testCases < noOfTestCases; testCases++){\n                String var1 = bufferedReader.readLine();\n                int var2 = Integer.parseInt(var1.split(\" \")[0]);\n                long var3 = Long.parseLong(var1.split(\" \")[1]);\n                long var4 = var3;\n                long var5;\n                String v6 = \"\";\n                String v7 = \"0\";\n                \n                for(int it1=2;it1<var2;it1++){\n                    v6 += v7;\n\n                    for(int it2=1;it2<var2;it2++){\n                        \n                        if(it1<=it2)\n                            v6 += \"1\";\n                        else\n                            v6 += \"0\";\n                        \n                    }\n\n                    v6 += \"\\n\";\n\n                }\n                for(int it3=0;it3<var2;it3++){\n                    \n                        v6 += \"0\";\n                    \n                }\n                \n                boolean v8[]  = new boolean[var2-1];\n//              for(int i = 0; i < (b-1); i++){\n//                  tempA[i] = false;\n//                  \n//              }\n                long v9 = (long) Math.pow(2, (var2-2));\n                System.out.println(\"  maxPossible  \" + v9);\n                if(var2 == 2 && var3 == 1){\n                    \n                    bufferedWriter.write(\"Case #\" + (testCases + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n                    bufferedWriter.write(\"01\" + \"\\n\");\n                    bufferedWriter.write(\"00\" + \"\\n\");\n                    System.out.println(\"Case #\" + (testCases + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n                    System.out.println(\"01\" + \"\\n\");\n                    System.out.println(\"00\" + \"\\n\");\n\n                }else if(var3 > v9){\n                    \n\n                    bufferedWriter.write(\"Case #\" + (testCases + 1) + \": \" + \"IMPOSSIBLE\" + \"\\n\");\n                    System.out.println(\"Case #\" + (testCases + 1) + \": \" + \"IMPOSSIBLE\" + \"\\n\");\n                    \n                }else{\n                    \n                    bufferedWriter.write(\"Case #\" + (testCases + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n\n                    var5 = v9/2;\n                    for(int i = 0; i < (var2-1); i++){\n                        \n                        if(var4 == 0)\n                            break;\n                        \n                        if(var4 >= var5){\n                            \n                            v8[i] = true;\n                            var4 -= var5;\n                            \n                        }\n                        var5 /=2;\n                        \n                    }\n                    String tempresult = \"0\";\n\n                    for(int i = 0; i < (var2-1); i++){\n                        if(v8[i]){\n                            tempresult = tempresult + \"1\";\n                        }else{\n                            tempresult = tempresult + \"0\";\n                        }\n                        \n                    }   \n                    \n                    v6 = tempresult + \"\\n\" + v6;\n\n                    \n                    System.out.println(v6);\n\n                    bufferedWriter.write(v6 + \"\\n\");\n\n                }\n\n\n                \n\n            }\n                \n            bufferedReader.close();\n            bufferedWriter.close();\n\n        } catch (FileNotFoundException fileNotFoundException) {\n\n            System.out.println(\"Some Exception: \" + fileNotFoundException.getMessage());\n            fileNotFoundException.printStackTrace();\n\n        } catch (IOException ioException) {\n\n            System.out.println(\"Some Exception: \" + ioException.getMessage());\n            ioException.printStackTrace();\n\n        } catch (Exception exception) {\n            \n            System.out.println(\"Some Exception: \" + exception.getMessage());\n            exception.printStackTrace();\n        }\n\n    }\n\n}\n", "idx": "9142"}
{"func": "package googlejam9.p151;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\n\n\npublic class B {\n\n\tpublic static void main(String[] args) {\n\n//\t\tString in = \"/Users/Moshin/Code Jam//small.in\";\n//\t\tString out = \"/Users/Moshin/Code Jam/small.out\";\n\t\tString in = \"/Users/Moshin/Code Jam/large.in\";\n\t\tString out = \"/Users/Moshin/Code Jam/large.out\";\n\n\t\ttry {\n\n\t\t\tBufferedReader bufferedReader = new BufferedReader(new FileReader(in));\n\t        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(out));\n\n\t\t\t// Total number of test cases\n\t\t\tint noOfTestCases = Integer.valueOf(bufferedReader.readLine());\n\t\t\t\n\t\t\t\n\t\t\n\t\t\tfor (int t = 0; t < noOfTestCases; t++){\n\t\t\t\tString bm = bufferedReader.readLine();\n\t\t\t\tint b = Integer.parseInt(bm.split(\" \")[0]);\n\t\t\t\tlong m = Long.parseLong(bm.split(\" \")[1]);\n\t\t\t\tlong tempM = m;\n\t\t\t\tlong tempMax;\n\t\t\t\tString result = \"\";\n\t\t\t\tString first = \"0\";\n\t\t\t\t\n\t\t\t\tfor(int i=2;i<b;i++){\n\t\t\t\t\tresult += first;\n\n\t\t\t\t\tfor(int j=1;j<b;j++){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(i<=j)\n\t\t\t\t\t\t\tresult += \"1\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tresult += \"0\";\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\t\t\t\t\tresult += \"\\n\";\n\n\t\t\t\t}\n\t\t\t\tfor(int j=0;j<b;j++){\n\t\t\t\t\t\n\t\t\t\t\t\tresult += \"0\";\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tboolean tempA[]  = new boolean[b-1];\n//\t\t\t\tfor(int i = 0; i < (b-1); i++){\n//\t\t\t\t\ttempA[i] = false;\n//\t\t\t\t\t\n//\t\t\t\t}\n\t\t\t\tlong maxPossible = (long) Math.pow(2, (b-2));\n\t\t\t\tSystem.out.println(\"  maxPossible  \" + maxPossible);\n\t\t\t\tif(b == 2 && m == 1){\n\t\t\t\t\t\n\t                bufferedWriter.write(\"Case #\" + (t + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n\t                bufferedWriter.write(\"01\" + \"\\n\");\n\t                bufferedWriter.write(\"00\" + \"\\n\");\n\t                System.out.println(\"Case #\" + (t + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n\t                System.out.println(\"01\" + \"\\n\");\n\t                System.out.println(\"00\" + \"\\n\");\n\n\t\t\t\t}else if(m > maxPossible){\n\t\t\t\t\t\n\n\t                bufferedWriter.write(\"Case #\" + (t + 1) + \": \" + \"IMPOSSIBLE\" + \"\\n\");\n\t                System.out.println(\"Case #\" + (t + 1) + \": \" + \"IMPOSSIBLE\" + \"\\n\");\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\t\n\t                bufferedWriter.write(\"Case #\" + (t + 1) + \": \" + \"POSSIBLE\" + \"\\n\");\n\n\t\t\t\t\ttempMax = maxPossible/2;\n\t\t\t\t\tfor(int i = 0; i < (b-1); i++){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(tempM == 0)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(tempM >= tempMax){\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttempA[i] = true;\n\t\t\t\t\t\t\ttempM -= tempMax;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttempMax /=2;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tString tempresult = \"0\";\n\n\t\t\t\t\tfor(int i = 0; i < (b-1); i++){\n\t\t\t\t\t\tif(tempA[i]){\n\t\t\t\t\t\t\ttempresult = tempresult + \"1\";\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\ttempresult = tempresult + \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\t\n\t\t\t\t\t\n\t\t\t\t\tresult = tempresult + \"\\n\" + result;\n\n\t\t\t\t\t\n\t\t\t\t\tSystem.out.println(result);\n\n\t                bufferedWriter.write(result + \"\\n\");\n\n\t\t\t\t}\n\n\n                \n\n            }\n                \n            bufferedReader.close();\n            bufferedWriter.close();\n\n\t\t}catch (Exception exception) {\n\t\t\t\n\t\t\texception.printStackTrace();\n\t\t\n\t\t}\n\n\t}\n\n\n}\n", "idx": "9151"}
{"func": "package googlejam9.p153;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class B {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner s = new Scanner(new File(\"b.in\"));\r\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"b.out\"));\r\n\t\tint T = s.nextInt();\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tout.write(\"Case #\"+t+\": \"); \r\n\t\t\tint B  = s.nextInt();\r\n\t\t\tint M = s.nextInt();\r\n\t\t\tint magicNumber = (B*B-B)/2;\r\n\t\t\tmatrix = new boolean[B][B];\r\n\t\t\tint magicLimit = 1<<magicNumber;\r\n\t\t\tboolean foundAnswer=false;\r\n\t\t\tfor(int magic=0; magic<magicLimit && !foundAnswer; magic++){\r\n\t\t\t\tint it=0;\r\n\t\t\t\tfor(int j=0; j<B; j++){\r\n\t\t\t\t\tfor(int k=j+1; k<B; k++){\r\n\t\t\t\t\t\tmatrix[j][k]=(magic>>it++)%2==1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcant = new int[B];\r\n\t\t\t\tcant[B-1]=1;\r\n\t\t\t\tfor(int i=B-2; i>=0; i--){\r\n\t\t\t\t\tfor(int j=0; j<B; j++){\r\n\t\t\t\t\t\tif(matrix[i][j])\r\n\t\t\t\t\t\t\tcant[i]+=cant[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(cant[0]==M){\r\n\t\t\t\t\tfoundAnswer=true;\r\n\t\t\t\t\tout.write(\"POSSIBLE\\n\");\r\n\t\t\t\t\tfor(int i=0; i<B; i++){\r\n\t\t\t\t\t\tfor(int j=0; j<B; j++){\r\n\t\t\t\t\t\t\tif(matrix[i][j]){\r\n\t\t\t\t\t\t\t\tout.write(\"1\");\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tout.write(\"0\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tout.write(\"\\n\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!foundAnswer){\r\n\t\t\t\tout.write(\"IMPOSSIBLE\\n\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n\t\r\n\tstatic boolean[][] matrix;\r\n\tstatic int[] cant;\r\n}\r\n", "idx": "9153"}
{"func": "package googlejam9.p162;\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\n\r\n\r\n\r\npublic class Slides {\r\n\tpublic static void main(String[] args) {\r\n\t    //Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t\tScanner in = new Scanner(System.in);\r\n\t    int loops = in.nextInt();\r\n\t \t\r\n\t    for (int loop = 1; loop <= loops; ++loop) {\r\n\t    \tint b= in.nextInt(); long m = in.nextLong();\r\n\t    \tlong max = 1;\r\n\t    \tfor(int i = 2; i < b; i++) {\r\n\t    \t\tmax*=2;\r\n\t    \t}\r\n\t       if (m > max) {\r\n\t    \t   String line = String.format(\"Case #%1$s: IMPOSSIBLE\", loop);\r\n\t\t       System.out.println(line); \r\n\t\t       continue;\r\n\t       }\r\n\t    \t\r\n\t       String line = String.format(\"Case #%1$s: POSSIBLE\", loop);\r\n\t       System.out.println(line); \r\n\t       \r\n\t       \r\n\t       long pow = max/2;\r\n\t       boolean[] linked = new boolean[b];\r\n\t       int index = b-2;\r\n\t       while (m > 1) {\r\n\t    \t   if (m >= pow) {\r\n\t    \t\t   linked[index] = true;\r\n\t    \t\t   m -= pow;\r\n\t    \t   }\r\n\t    \t   pow /= 2;\r\n\t    \t   index--;\r\n\t       }\r\n\t       if (m == 1) {\r\n\t    \t   linked[0] = true;\r\n    \t\t   m -= 1;\r\n\t       }\r\n\t       \r\n\t       StringBuilder builder;\r\n\t       for (int i = 0; i < b-1; i++) {\r\n\t    \t   builder = new StringBuilder();\r\n\t    \t   for (int j = 0; j < i+1; j++)\r\n\t    \t\t   builder.append(0);\r\n\t    \t   for (int j = 0; j < b - i -2; j++)\r\n\t    \t\t   builder.append(1);\r\n\t    \t   builder.append(linked[i] ? 1 : 0);\r\n\t    \t\tSystem.out.println(builder);\r\n\t       }\r\n\t       builder = new StringBuilder();\r\n\t       for (int j = 0; j < b; j++)\r\n\t    \t   builder.append(0);\r\n\t       System.out.println(builder);\r\n\t       \r\n\t       //String line = String.format(\"Case #%1$s: %2$s\", loop, flow);\r\n\t       //System.out.println(line);\r\n\t    }\r\n\t    in.close();\r\n }\r\n}\r\n", "idx": "9162"}
{"func": "package googlejam9.p164;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\nclass B {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n\t\tScanner in = new Scanner(new File(\"B.in\"));\r\n        PrintWriter out = new PrintWriter(new File(\"B.out\"));\r\n\t\t\r\n\t\tint tt = in.nextInt();\r\n\t\tfor(int tc=1; tc<=tt; tc++) {            \r\n\t\t\tint b = in.nextInt();\r\n\t\t\tlong m = in.nextLong();\r\n\t\t\tout.print(\"Case #\"+tc+\": \");\r\n\t\t\tlong p = 1;\r\n\t\t\tlong[] pp = new long[b];\r\n\t\t\tpp[0] = 1;\r\n\t\t\tfor (int i = 1; i < b-1; i++) {\t\t\t\t\r\n\t\t\t\tpp[i] = p;\r\n\t\t\t\tp = p*2;\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif (p < m) {\r\n\t\t\t\tout.println(\"IMPOSSIBLE\");\r\n\t\t\t} else {\r\n\t\t\t\tout.println(\"POSSIBLE\");\r\n\t\t\t\t\r\n\t\t\t\tout.print(\"0\");\r\n\t\t\t\tfor (int i = 1; i < b; i++) {\r\n\t\t\t\t\tif (m >= pp[b-i-1]) {\r\n\t\t\t\t\t\tout.print(\"1\");\r\n\t\t\t\t\t\tm -= pp[b-i-1];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tout.print(\"0\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tout.println();\r\n\t\t\t\t\r\n\t\t\t\tfor (int i = 1; i < b; i++) {\r\n\t\t\t\t\tfor (int j = 0; j <= i; j++)\r\n\t\t\t\t\t\tout.print(\"0\");\r\n\t\t\t\t\tfor (int j = i+1; j < b; j++)\r\n\t\t\t\t\t\tout.print(\"1\");\r\n\t\t\t\t\tout.println();\r\n\t\t\t\t}\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tout.close();\r\n\t\tin.close();\r\n\t}\r\n}\r\n", "idx": "9164"}
{"func": "package googlejam9.p165;\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class B {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tScanner scanner = new Scanner(new File(\"D:/GCJ2016/B/B-large.in\"));\r\n\t\tFileWriter writer = new FileWriter(\"D:/GCJ2016/B/B-large.out\", false);\r\n\t\tint cases = scanner.nextInt();\r\n\t\tfor(int i=0;i<cases;i++){\t\r\n\t\t\tint br = scanner.nextInt();\r\n\t\t\tlong cr = scanner.nextLong();\r\n\t\t\twriter.write(\"Case #\"+(i+1)+\": \");\r\n\t\t\tlong rc = br-2;\r\n\t\t\tlong maximu = 1;\r\n\t\t\twhile(rc>0){\r\n\t\t\t\tmaximu *= 2;\r\n\t\t\t\trc--;\r\n\t\t\t}\r\n\t\t\tif(maximu >= cr){\r\n\t\t\t\twriter.write(\"POSSIBLE\");\r\n\t\t\t\tlong needMinus = maximu-cr;\r\n\t\t\t\tlong[][] arr = new long[br][br];\r\n\t\t\t\tfor(int j=0;j<br;j++){\r\n\t\t\t\t\tArrays.fill(arr[j], 0);\r\n\t\t\t\t}\r\n\t\t\t\tif(cr == 0){\t\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tfor(int j=0;j<br;j++){\r\n\t\t\t\t\t\tfor(int k=0;k<br;k++){\r\n\t\t\t\t\t\t\tif(k>j){\r\n\t\t\t\t\t\t\t\tarr[j][k] = 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(maximu == cr){\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlong[] arraywith = new long[br-2];\r\n\t\t\t\t\t\tArrays.fill(arraywith, 0);\r\n\t\t\t\t\t\tlong cn = 1;\r\n\t\t\t\t\t\tfor(int j=br-3;j>=0;j--){\r\n\t\t\t\t\t\t\tcn*=2;\r\n\t\t\t\t\t\t\tarraywith[j] = cn/2;\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tfor(int l=0;l<br-2;l++){\r\n\t\t\t\t\t\t\tif(needMinus >= arraywith[l]){\r\n\t\t\t\t\t\t\t\tneedMinus -= arraywith[l];\r\n\t\t\t\t\t\t\t\tarr[0][l+1] = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\twriter.append('\\r');\r\n\t\t\t\twriter.append('\\n');\r\n\t\t\t\tfor(int j=0;j<br;j++){\r\n\t\t\t\t\tfor(int k=0;k<br;k++){\r\n\t\t\t\t\t\tSystem.out.print(arr[j][k]+\"\");\r\n\t\t\t\t\t\twriter.write(arr[j][k]+\"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println(\"\");\r\n\t\t\t\t\twriter.append('\\r');\r\n\t\t\t\t\twriter.append('\\n');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\twriter.write(\"IMPOSSIBLE\");\r\n\t\t\t\twriter.append('\\r');\r\n\t\t\t\twriter.append('\\n');\r\n\t\t\t}\r\n\t\t}\r\n\t\tscanner.close();\r\n\t\twriter.close();\r\n\t}\r\n}\r\n", "idx": "9165"}
{"func": "package googlejam9.p191;\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class CodeJamCB {\n\tpublic static void main(String []args){\n\t\tScanner reader = new Scanner(System.in);\n\t\tint g = reader.nextInt();\n\t\tfor(int k=0;k<g;k++){\n\t\t\tint b = reader.nextInt();\n\t\t\tlong m = reader.nextLong();\n\t\t\tBigInteger c = new BigInteger(m+\"\");\n\t\t\tBigInteger two = new BigInteger(\"2\");\n\t\t\tBigInteger rez = two.pow(b-2);\n\t\t\tif(rez.compareTo(c)<0){\n\t\t\t\tSystem.out.println(\"Case #\"+(k+1)+\": IMPOSSIBLE\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"Case #\"+(k+1)+\": POSSIBLE\");\n\t\t\t\tBigInteger e = new BigInteger(m+\"\");\n\t\t\t\tint max = lo(m)+1;\n\t\t\t\tint [][] t = new int[b][b];\n\t\t\t\tfor(int i=0;i<=max;i++){\n\t\t\t\t\tfor(int j=i+1;j<=max;j++){\n\t\t\t\t\t\tt[i][j] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twhile(m>0){\n\t\t\t\t\tif(m==1){\n\t\t\t\t\t\tt[0][b-1] = 1;\n\t\t\t\t\t\tm--;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tint log = lo(m)+1;\n\t\t\t\t\t\tt[log][b-1] = 1;\n\t\t\t\t\t\tm-= Math.pow(2, log-1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(int i=0;i<b;i++){\n\t\t\t\t\tt[b-1][i] = 0;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tfor(int i=0;i<t.length;i++){\n\t\t\t\t\tfor(int j=0;j<t.length;j++){\n\t\t\t\t\t\tSystem.out.print(t[i][j]);\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\treader.close();\n\t}\n\tpublic static int lo(long a){\n\t\tdouble c = (double) a;\n\t\tdouble rez = Math.log(c)/Math.log(2);\n\t\treturn (int) rez;\n\t}\n}\n", "idx": "9191"}
{"func": "package googlejam9.p198;\nimport java.util.Scanner;\r\nimport java.io.FileInputStream;\r\nimport java.io.PrintStream;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        // set up scanner and iterate over test cases\r\n        Scanner scanner = new Scanner(new FileInputStream(\r\n            \"C:\\\\Users\\\\Stefan\\\\Downloads\\\\B-small-attempt1.in\"));\r\n        PrintStream output = new PrintStream(\r\n            \"C:\\\\Users\\\\Stefan\\\\Downloads\\\\B-small-attempt1.out\");\r\n        int T = scanner.nextInt();\r\n        for (int t = 1; t <= T; ++t) {\r\n            // get parameters\r\n            int B = scanner.nextInt();\r\n            int M = scanner.nextInt();\r\n            // solve problem\r\n            output.print(\"Case #\" + t + \":\");\r\n            // there are no cycles in graph\r\n            // determine if it is possible, only depends on maximum\r\n            long maxWays = 0x01 << (B - 2);\r\n            if (M > maxWays) {\r\n                output.println(\" IMPOSSIBLE\");\r\n                continue;\r\n            }\r\n           \toutput.println(\" POSSIBLE\");\r\n           \t// print solution matrix\r\n           \t// first node: construct M by using counts of 2 ^ X\r\n           \tif (B == 2)\r\n           \t\toutput.println(\"01\");\r\n           \telse {\r\n           \t\tlong maxNodeWays = 0x01 << (B - 3);\r\n           \t\toutput.print(\"0\");\r\n                for (int slide = 1; slide < B - 1; ++slide) {\r\n                \tif (M >= maxNodeWays) {\r\n                   \t\toutput.print(\"1\");\r\n                   \t\tM -= maxNodeWays;\r\n                \t}\r\n                \telse\r\n                \t\toutput.print(\"0\");\r\n               \t\tmaxNodeWays /= 2;\r\n                }\r\n           \t\tif (M > 0)\r\n           \t\t\toutput.println(\"1\");\r\n           \t\telse\r\n           \t\t\toutput.println(\"0\");\r\n           \t}\r\n           \t// output slides from building b towards any other building\r\n        \t// make slides between all nodes except 1 and B\r\n            for (int b = 1; b < B - 1; ++b) {\r\n\t            for (int slide = 0; slide < B; ++slide)\r\n\t            \tif (slide <= b)\r\n\t            \t\toutput.print(\"0\");\r\n\t            \telse\r\n\t            \t\toutput.print(\"1\");\r\n\t           \toutput.println();\r\n            }\r\n            // no slides from last node\r\n            for (int slide = 0; slide < B; ++slide)\r\n        \t\toutput.print(\"0\");\r\n           \toutput.println();\r\n        }\r\n        output.close();\r\n        System.out.println(\"finished\");\r\n    }\r\n}\r\n", "idx": "9198"}
{"func": "package googlejam9.p202;\n\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class Solution {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        FileInputStream fileInputStream = new FileInputStream(\"/Users/ratmir/Downloads/B-small-attempt1 (1).in\");\n        //Scanner sc = new Scanner(System.in);\n        Scanner sc = new Scanner(fileInputStream);\n        FileOutputStream outputStream = new FileOutputStream(\"/Users/ratmir/Documents/code/hackerrank/algs/src/codejam/y2016/r3/z2/ztest3.txt\");\n        PrintWriter printWriter = new PrintWriter(outputStream);\n        int tn = sc.nextInt();\n        for (int ti = 1; ti <= tn; ti++) {\n            int n = sc.nextInt();\n            int m = sc.nextInt();\n            if (n==2 && m==1) {\n                String res = \"Case #\" + ti + \": POSSIBLE\\n01\\n00\";// + ways.get(n-1)+\" \"+i;\n                printWriter.write(res + \"\\n\");\n                System.out.println(res);\n                continue;\n            }\n            if (n==2 && m>1) {\n                String res = \"Case #\" + ti + \": IMPOSSIBLE\";// + ways.get(n-1)+\" \"+i;\n                printWriter.write(res + \"\\n\");\n                System.out.println(res);\n                continue;\n            }\n            int nv = 1 + ((n - 1) * (n - 2));\n            int cnt = 1 << nv;\n            System.err.println(cnt);\n            int cntt = 0;\n            boolean ok = false;\n            int [] rx = new int[nv];\n            int [] cx = new int[nv];\n            int cidx = 0;\n            for (int i=0;i<n-1;i++) {\n                for (int j=1;j<=n-1;j++) {\n                    if (i!=j) {\n                        rx[cidx] = i;\n                        cx[cidx] = j;\n                        cidx++;\n                    }\n                }\n            }\n            inner:\n            for (int i = 0; i < cnt; i++) {\n                Map<Integer, Set<Integer>> map = new HashMap<Integer, Set<Integer>>();\n                Map<Integer, Integer> income = new HashMap<Integer, Integer>();\n                int k = i;\n                int kx = 0;\n                while (k > 0) {\n                    if (k % 2 == 1) {\n                        int v = rx[kx];\n                        int v2 = cx[kx];\n                        Set<Integer> integers = map.get(v);\n                        if (integers == null) {\n                            integers = new HashSet<Integer>();\n                            map.put(v, integers);\n                        }\n                        integers.add(v2);\n                        Integer idx1 = income.get(v2);\n                        if (idx1 == null) {\n                            income.put(v2, 1);\n                        } else {\n                            income.put(v2, idx1 + 1);\n                        }\n                    }\n                    k = k / 2;\n                    kx++;\n                }\n//                map.put(0, new HashSet<Integer>());\n//                map.put(1, new HashSet<Integer>());\n//                map.put(2, new HashSet<Integer>());\n//                map.put(3, new HashSet<Integer>());\n//                map.get(0).add(4);\n//                map.get(0).add(1);\n//                map.get(1).add(2);\n//                map.get(1).add(3);\n//                map.get(2).add(4);\n//                map.get(3).add(2);\n//                map.get(3).add(4);\n//                income.put(0, 0);\n//                income.put(1, 1);\n//                income.put(2, 2);\n//                income.put(3, 1);\n//                income.put(4,3);\n                Map<Integer, Integer> ways = new HashMap<Integer, Integer>();\n                ways.put(0, 1);\n                Set<Integer> cur = new HashSet<Integer>();\n                cur.add(0);\n                int x = 0;\n                while (cur.size() > 0) {\n                    x++;\n                    if (x > 100) {\n                        continue inner;\n                    }\n                    Set<Integer> cs = new HashSet<Integer>();\n                    for (Integer integer : cur) {\n                        Set<Integer> ss = map.get(integer);\n                        if (ss == null) {\n                            continue;\n                        }\n                        for (Integer v1 : map.get(integer)) {\n                            //System.err.println(integer+\" \"+v1);\n                            Integer w1 = ways.get(v1);\n                            if (w1 == null) {\n                                ways.put(v1, ways.get(integer));\n                            } else {\n                                ways.put(v1, w1 + ways.get(integer));\n                            }\n                            Integer inc = income.get(v1);\n                            if (inc == 1) {\n                                cs.add(v1);\n                            } else {\n                                income.put(v1, inc - 1);\n                            }\n                        }\n                    }\n                    cur = cs;\n                }\n                if (ways.get(n - 1) != null && ways.get(n - 1) == m) {\n//                   if (true) {\n//                    System.out.println(map);\n                    String res = \"Case #\" + ti + \": POSSIBLE\";// + ways.get(n-1)+\" \"+i;\n                    printWriter.write(res + \"\\n\");\n                    System.out.println(res);\n                    StringBuilder sb = new StringBuilder();\n                    for (int idx = 0; idx < n; idx++) {\n                        for (int jdx = 0; jdx < n; jdx++) {\n                            if (idx == jdx) {\n                                sb = sb.append(0);\n                            } else {\n                                sb = sb.append((map.get(idx) == null || !map.get(idx).contains(jdx)) ? 0 : 1);\n                            }\n                        }\n                        sb = sb.append(\"\\n\");\n                    }\n                    System.out.print(sb);\n                    printWriter.write(sb.toString());\n                    ok = true;\n                    break inner;\n                }\n            }\n            if (!ok) {\n                String res = \"Case #\" + ti + \": IMPOSSIBLE\";\n                printWriter.write(res + \"\\n\");\n                System.out.println(res);\n            }\n        }\n        printWriter.close();\n    }\n\n}\n", "idx": "9202"}
{"func": "package googlejam9.p206;\nimport java.util.Scanner;\r\npublic class Main{\r\n\tpublic static void main(String[] args){\r\n\t\tScanner sc = new Scanner(System.in);\r\n\t\tint cases = sc.nextInt();\r\n\t\tfor(int c=1;c<=cases;c++){\r\n\t\t\tint B = sc.nextInt();\r\n\t\t\tlong M = sc.nextLong();\r\n\t\t\tif(M>1<<B-2) System.out.printf(\"Case #%d: IMPOSSIBLE\\n\",c);\r\n\t\t\telse{\r\n\t\t\t\tSystem.out.printf(\"Case #%d: POSSIBLE\\n\",c);\r\n\t\t\t\tint[][] paths = new int[B][B];\r\n\t\t\t\tfor(int i=0; i<B;i++){\r\n\t\t\t\t\tfor(int j=0;j<B;j++){\r\n\t\t\t\t\t\tif(j>i) paths[i][j] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tchar[] ch = Long.toBinaryString(M-1).toCharArray();\r\n\t\t\t\tfor(int i=0;i<B-1;i++) paths[0][i] = 0;\r\n\t\t\t\tfor(int i=B-ch.length-1;i<B-1;i++) paths[0][i] = ch[i-B+ch.length+1]-48;\r\n\t\t\t\tfor(int i=0; i<B;i++){\r\n\t\t\t\t\tfor(int j=0;j<B;j++){\r\n\t\t\t\t\t\tSystem.out.print(paths[i][j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}", "idx": "9206"}
{"func": "package googlejam9.p209;\nimport java.io.FileInputStream;\r\nimport java.io.FileOutputStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class GCJR1B {\r\n\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tScanner cin = new Scanner(new FileInputStream(\"B-small-attempt1.in\"));\r\n\t\tPrintWriter cout = new PrintWriter(new FileOutputStream(\"output.txt\"));\r\n\t\tint T = cin.nextInt();\r\n\t\tfor (int t = 0; t < T; ++t) {\r\n\t\t\tint B = cin.nextInt(), M = cin.nextInt();\r\n\t\t\tcout.print(\"Case #\" + (t + 1) + \": \");\r\n\t\t\tif (M > (1 << (B - 2))) {\r\n\t\t\t\tcout.println(\"IMPOSSIBLE\");\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tint[][] a = new int[10][10];\r\n\t\t\tfor (int i = 0; i < 10; ++i)\r\n\t\t\t\tArrays.fill(a[i], 0);\r\n\t\t\tswitch (M) {\r\n\t\t\tcase 1:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\ta[1][3] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 7:\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\ta[1][3] = 1;\r\n\t\t\t\ta[2][3] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 8:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\ta[1][3] = 1;\r\n\t\t\t\ta[2][3] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 9:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[0][4] = 1;\r\n\t\t\t\ta[4][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\ta[1][3] = 1;\r\n\t\t\t\ta[2][3] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 10:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[0][4] = 1;\r\n\t\t\t\ta[4][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\ta[1][3] = 1;\r\n\t\t\t\ta[2][3] = 1;\r\n\t\t\t\ta[1][4] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 11:\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[0][4] = 1;\r\n\t\t\t\ta[4][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\ta[1][3] = 1;\r\n\t\t\t\ta[2][3] = 1;\r\n\t\t\t\ta[1][4] = 1;\r\n\t\t\t\ta[2][4] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 12:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[0][4] = 1;\r\n\t\t\t\ta[4][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\ta[1][3] = 1;\r\n\t\t\t\ta[2][3] = 1;\r\n\t\t\t\ta[1][4] = 1;\r\n\t\t\t\ta[2][4] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 13:\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[0][4] = 1;\r\n\t\t\t\ta[4][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\ta[1][3] = 1;\r\n\t\t\t\ta[2][3] = 1;\r\n\t\t\t\ta[1][4] = 1;\r\n\t\t\t\ta[2][4] = 1;\r\n\t\t\t\ta[3][4] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 14:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[0][4] = 1;\r\n\t\t\t\ta[4][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\ta[1][3] = 1;\r\n\t\t\t\ta[2][3] = 1;\r\n\t\t\t\ta[1][4] = 1;\r\n\t\t\t\ta[2][4] = 1;\r\n\t\t\t\ta[3][4] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 15:\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[0][4] = 1;\r\n\t\t\t\ta[4][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\ta[1][3] = 1;\r\n\t\t\t\ta[2][3] = 1;\r\n\t\t\t\ta[1][4] = 1;\r\n\t\t\t\ta[2][4] = 1;\r\n\t\t\t\ta[3][4] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 16:\r\n\t\t\t\ta[0][B - 1] = 1;\r\n\t\t\t\ta[0][1] = 1;\r\n\t\t\t\ta[1][B - 1] = 1;\r\n\t\t\t\ta[0][2] = 1;\r\n\t\t\t\ta[2][B - 1] = 1;\r\n\t\t\t\ta[0][3] = 1;\r\n\t\t\t\ta[3][B - 1] = 1;\r\n\t\t\t\ta[0][4] = 1;\r\n\t\t\t\ta[4][B - 1] = 1;\r\n\t\t\t\ta[1][2] = 1;\r\n\t\t\t\ta[1][3] = 1;\r\n\t\t\t\ta[2][3] = 1;\r\n\t\t\t\ta[1][4] = 1;\r\n\t\t\t\ta[2][4] = 1;\r\n\t\t\t\ta[3][4] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tcout.println(\"POSSIBLE\");\r\n\t\t\tfor (int i = 0; i < B; ++i) {\r\n\t\t\t\tfor (int j = 0; j < B; ++j)\r\n\t\t\t\t\tcout.print(a[i][j]);\r\n\t\t\t\tcout.println();\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t * if (M >= 1) a[0][B - 1] = 1; if (M >= 2){ a[0][1] = 1; a[1][B -\r\n\t\t\t * 1] = 1; if (M >= 3){ a[0][2] = 1; a[2][B - 1] = 1; } } if (M >=\r\n\t\t\t * 4){ a[1][2] = 1; if (M >= 5){ a[0][3] = 1; a[3][B - 1] = 1; } if\r\n\t\t\t * (M >= 6){ a[1][3] = 1; } }\r\n\t\t\t */\r\n\t\t}\r\n\t\tcout.flush();\r\n\t}\r\n\r\n}\r\n", "idx": "9209"}
{"func": "package googlejam9.p212;\nimport java.util.Scanner;\npublic class b {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner input = new Scanner(System.in);\n\t\tint numCases = input.nextInt();\n\t     \n\t    for (int n = 0; n < numCases; n++){\n\t    \t\n\t    \tint b = input.nextInt();\n\t    \tint m = input.nextInt();\n\t    \t\n\t    \tint[][] test = new int[b][b];\n\t    \tint[] road = new int[b];\n\t    \t\n\t    \tfor(int i = 0;i<b;i++)\n\t    \t\troad[i]=1;\n\t    \t\t\n\t    \tint ans=0,tmp=0,t=0,br=0;\n\t    \tfor(int i = b-2;i>=0;i--)\n\t    \t{ \t\n\t    \t\ttmp=ans;\n\t    \t\tt=0;\n\t    \t\tbr=i;\n\t    \t\tfor(int j = b-1;j>i;j--)\n\t    \t\t{\n\t    \t\t\tans+=road[j];\n\t    \t\t\tt+=road[j];\n\t    \t\t\ttest[i][j]=1;\n\t\t    \t\tif(t>=m)\n\t\t    \t\t\tbreak;\n\t    \t\t}\n\t    \t\troad[i]=ans-tmp;\n\t    \t\tif(t>=m)\n\t    \t\t\tbreak;\n\n\t    \t}\n\t    \t\n\t    \tif(t>=m){\n\t    \tSystem.out.printf(\"Case #%d: POSSIBLE\\n\", n + 1);\n\t    \tif(t>m)\n\t    \t{int tt=0;\n\t    \t\tfor(int i = br+1;i<b;i++){\n\t    \t\t\ttt+=road[i];\n\t    \t\t\tif(tt>m){\n\t    \t\t\t\ttest[br][i]=0;\n\t    \t\t\t\ttt-=road[i];\n\t    \t\t\t}\n\t    \t\t}\n\t    \t    \t\n\t    \t}\n\t    \tint pos=0;\n\t    \tfor(int i = b-1;i>=0;i--){\n\t    \t\tint tm=0;\n\t    \t\tfor(int j = 0;j<b;j++)\n\t\t    \t\ttm+=test[i][j];\n\t    \t\tif(tm>0)\n\t    \t\t\tpos=i;\n\t    \t}\n\t    \tfor(int i = 0;i<pos;i++)\n\t    \t{\n\t    \t\ttest[i][i+1]=1;\n\t    \t}\n\t    \tfor(int i = 0;i<b;i++){\n\t    \t\tfor(int j = 0;j<b;j++)\n\t    \t\t\tSystem.out.printf(\"%d\",test[i][j]);\n\t    \t\tSystem.out.println();\n\t    \t\t}\n\t    \t}\n\t    \telse\n\t    \t\tSystem.out.printf(\"Case #%d: IMPOSSIBLE\\n\", n + 1);\t\n\n\t    }\n\t}\n\n}\n", "idx": "9212"}
{"func": "package googlejam9.p044;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class B {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner in = new Scanner(new File(\"BL.in\"));\n\t\tPrintWriter out = new PrintWriter(\"BL.out\");\n\t\tlong[] counts = new long[55];\n\t\tcounts[0] = 1;\n\t\tfor (int i = 1; i < 55; i++) {\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tcounts[i] += counts[j]; // 2^(i-1)\n\t\t\t}\n\t\t}\n\t\tint tc = in.nextInt();\n\t\tfor (int cc = 1; cc <= tc; cc++) {\n\t\t\tint b = in.nextInt();\n\t\t\tlong t = in.nextLong();\n\t\t\tchar[][] result = new char[b][b];\n\t\t\tfor (char[] a : result)\n\t\t\t\tArrays.fill(a, '0');\n\t\t\tfor (int i = b - 1; i > 0; i--) {\n\t\t\t\tfor (int j = i + 1; j < b; j++) {\n\t\t\t\t\tresult[i][j] = '1';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (t > counts[b - 1]) {\n\t\t\t\tSystem.out.printf(\"Case #%d: IMPOSSIBLE\\n\", cc);\n\t\t\t\tout.printf(\"Case #%d: IMPOSSIBLE\\n\", cc);\n\n\t\t\t} else {\n\t\t\t\tSystem.out.printf(\"Case #%d: POSSIBLE\\n\", cc);\n\t\t\t\tout.printf(\"Case #%d: POSSIBLE\\n\", cc);\n\n\t\t\t\tif (t == counts[b - 1]) {\n\t\t\t\t\tfor (int i = 1; i < b; i++) {\n\t\t\t\t\t\tresult[0][i] = '1';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twhile (t > 0) {\n\t\t\t\t\t\tlong bit = t & -t;\n\t\t\t\t\t\tint idx = 0;\n\t\t\t\t\t\twhile (1L << idx < bit)\n\t\t\t\t\t\t\tidx++;\n\t\t\t\t\t\tif (idx >= b) {\n\t\t\t\t\t\t\tthrow new Exception(\"That's how you know you ....ed up\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult[0][b - 1 - (idx + 1)] = '1';\n\t\t\t\t\t\tt -= bit;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < b; i++) {\n\t\t\t\t\tSystem.out.printf(new String(result[i]) + \"\\n\");\n\t\t\t\t\tout.printf(new String(result[i]) + \"\\n\");\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout.close();\n\t}\n}\n", "idx": "9044"}
{"func": "package googlejam9.p081;\nimport java.util.*;\r\n\r\n\r\npublic class Main_Round1C_2016_B {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\r\n\t\tint t = sc.nextInt();\r\n\t\tfor (int casei = 1; casei <= t; casei++) {\r\n\t\t\tint b = sc.nextInt();\r\n\t\t\tlong m = sc.nextLong();\n\t\t\tlong ret1 = 1;\n\t\t\tfor (int i1 = 0; i1 < b - 2; i1++) {\n\t\t\t\tret1 *= 2;\n\t\t\t}\r\n\r\n\t\t\tlong max = ret1;\r\n\r\n\t\t\tif (m > max) {\r\n\t\t\t\tSystem.out.printf(\"Case #%d: %s\\n\", casei, \"IMPOSSIBLE\");\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.printf(\"Case #%d: %s\\n\", casei, \"POSSIBLE\");\r\n\r\n\t\t\t\tint[][] ret = new int[b][b];\r\n\t\t\t\tfor (int i = 1; i < b; i++) {\r\n\t\t\t\t\tfor (int j = i + 1; j < b; j++) {\r\n\t\t\t\t\t\tret[i][j] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (m == max) {\r\n\t\t\t\t\tfor (int j = 1; j < b; j++) {\r\n\t\t\t\t\t\tret[0][j] = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tint bit = b - 2;\r\n\t\t\t\t\twhile (m > 0) {\r\n\t\t\t\t\t\tif (m % 2 != 0) {\r\n\t\t\t\t\t\t\tret[0][bit] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbit--;\r\n\t\t\t\t\t\tm /= 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (int i = 0; i < b; i++) {\r\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\t\t\tfor (int j = 0; j < b; j++) {\r\n\t\t\t\t\t\tsb.append((char)('0' + ret[i][j]));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println(sb);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsc.close();\r\n\t}\r\n}\r\n", "idx": "9081"}
{"func": "package googlejam9.p119;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class ProblemB {\r\n\tpublic static void main(String[] args) throws FileNotFoundException {\r\n//\t\tScanner sc = new Scanner(new File(\"B-small-attempt3.in\"));\r\n//\t\tScanner sc = new Scanner(new File(\"B.in\"));\r\n\t\tScanner sc = new Scanner(new File(\"B-large.in\"));\r\n\r\n\t\tint t = sc.nextInt();\r\n\t\tint count = 1;\r\n\t\t\r\n\t\tlong[] possibleRoutes = new long[52];\r\n\t\tfor(int i = 2; i <= 50; i++) {\r\n\t\t\tpossibleRoutes[i] = 1;\r\n\t\t\tfor(int j = 0; j < i; j++) {\r\n\t\t\t\tpossibleRoutes[i] += possibleRoutes[j];\r\n\t\t\t}\r\n\t\t\t\r\n//\t\t\tSystem.out.println(\"Numbuildings: \" + (i) + \" Possible routes: \" + possibleRoutes[i]);\r\n\t\t}\r\n\t\tpossibleRoutes[1] = 1;\r\n\r\n\t\twhile (t-- > 0) {\r\n\t\t\tint B = sc.nextInt(); // num buildings\r\n\t\t\tlong M = sc.nextLong(); // num routes\r\n\t\t\t\r\n\t\t\t// To many routes needed\r\n\t\t\tif(M > possibleRoutes[B]) {\r\n\t\t\t\tSystem.out.println(\"Case #\" + count + \": \" + \"IMPOSSIBLE\");\r\n\t\t\t// \r\n\t\t\t} else {\r\n\t\t\t\tint building = B;\r\n\t\t\t\tlong routes = M;\r\n\t\t\t\tSystem.out.println(\"Case #\" + count + \": \" + \"POSSIBLE\");\r\n//\t\t\t\tSystem.out.println(building);\r\n\t\t\t\tboolean buildSlides = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(int j = 0; j < B; j++) {\r\n\t\t\t\t\tif(routes < possibleRoutes[building] && !buildSlides) {\r\n//\t\t\t\t\t\tSystem.out.println(\"Don't use building: \" + building + \" it gives: \" + test[building] + \" extra routes\");\r\n\t\t\t\t\t\t// Next one also gives to much slides\r\n\t\t\t\t\t\tif(routes <= possibleRoutes[building-1]) {\r\n\t\t\t\t\t\t\tfor(int i = 0; i < B; i++) {\r\n\t\t\t\t\t\t\t\tif(i == j+1) {\r\n\t\t\t\t\t\t\t\t\tSystem.out.print(\"1\");\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tSystem.out.print(\"0\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tSystem.out.println(\"\");\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbuildSlides = true;\r\n//\t\t\t\t\t\t\troutes -= possibleRoutes[building-1];\r\n\t\t\t\t\t\t\tfor(int i = B; i > 0; i--) {\r\n\t\t\t\t\t\t\t\tif(possibleRoutes[i] <= routes) {\r\n\t\t\t\t\t\t\t\t\troutes -= possibleRoutes[i];\r\n\t\t\t\t\t\t\t\t\tSystem.out.print(\"1\");\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tSystem.out.print(\"0\");\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tSystem.out.println(\"\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n//\t\t\t\t\t\tSystem.out.println(\"Use building: \" + building);\r\n\t\t\t\t\t\tbuildSlides = true;\r\n\t\t\t\t\t\tfor(int i = 0; i < B; i++) {\r\n\t\t\t\t\t\t\tif(i > j) {\r\n\t\t\t\t\t\t\t\tSystem.out.print(\"1\");\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tSystem.out.print(\"0\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tSystem.out.println(\"\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbuilding--;\r\n\t\t\t\t}\r\n//\t\t\t\tSystem.out.println(routes);\r\n\t\t\t}\r\n\r\n\t\t\t\r\n\t\t\tcount++;\r\n\t\t}\r\n\r\n\t\tsc.close();\r\n\t}\r\n}\r\n", "idx": "9119"}
{"func": "package googlejam10.p022;\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n\tScanner sc;\r\n\tPrintWriter pw;\r\n\tint N;\r\n\tint[] p = new int[3];\r\n\t\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tString filePrefix = args.length>0?args[0]:\"A-large\";\r\n\r\n\t\ttry {\r\n\t\t\tA r = new A();\n\t\t\tr.sc = new Scanner(new FileReader(filePrefix + \".in\"));\n\t\t\tr.pw = new PrintWriter(new FileWriter(filePrefix + \".out\"));\n\t\t\tint ntest = r.sc.nextInt();\n\t\t\tfor(int test=1; test<=ntest; test++) {\n\t\t\t\tScanner sc = r.sc;\n\t\t\t\tr.N = sc.nextInt();\n\t\t\t\tfor(int i=0; i<3; i++)\n\t\t\t\t\tr.p[i] = sc.nextInt();\n\t\t\t\tr.pw.print(\"Case #\" + test + \": \");\n\t\t\t\tSystem.out.print(\"Case #\" + test + \": \");\n\t\t\t\tint SIZE = 1<<r.N;\n\t\t\t\tchar[] C = {'R','P','S'};\n\t\t\t\tchar[] ans = null;\n\t\t\t\tfor(int i=0; i<3; i++) {\n\t\t\t\t\tint[] win = new int[SIZE*2-1];\n\t\t\t\t\twin[0] = i;\n\t\t\t\t\tfor(int j=0; j<SIZE-1; j++) {\n\t\t\t\t\t\twin[j*2+1] = win[j];\n\t\t\t\t\t\twin[j*2+2] = (win[j]+2)%3;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tint[] cnt = new int[3];\n\t\t\t\t\tchar[] ini = new char[SIZE];\n\t\t\t\t\tfor(int j=0; j<SIZE; j++) {\n\t\t\t\t\t\tcnt[win[SIZE-1+j]]++;\n\t\t\t\t\t\tini[j] = C[win[SIZE-1+j]];\n\t\t\t\t\t}\n\t\t\t\t\tboolean ok = true;\n\t\t\t\t\tfor(int j=0; j<3; j++)\n\t\t\t\t\t\tif(cnt[j]!=r.p[j])\n\t\t\t\t\t\t\tok = false;\n\t\t\t\t\t\n\t\t\t\t\tif(!ok)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\n\t\t\t\t\t//sort for alphabetical \n\t\t\t\t\tfor(int j=0; j<r.N; j++) {\n\t\t\t\t\t\tfor(int k=0; k<SIZE; k+=1<<(j+1)) {\n\t\t\t\t\t\t\tboolean rev = false;\n\t\t\t\t\t\t\tfor(int l=0; l<1<<j; l++) {\n\t\t\t\t\t\t\t\tif(ini[k+l] > ini[k+(1<<j)+l]) {\n\t\t\t\t\t\t\t\t\trev = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(rev) {\n\t\t\t\t\t\t\t\tfor(int l=0; l<1<<j; l++) {\n\t\t\t\t\t\t\t\t\tchar temp = ini[k+l];\n\t\t\t\t\t\t\t\t\tini[k+l] = ini[k+(1<<j)+l];\n\t\t\t\t\t\t\t\t\tini[k+(1<<j)+l] = temp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(ans==null || String.valueOf(ini).compareTo(String.valueOf(ans))<0)\n\t\t\t\t\t\tans = ini;\n\t\t\t\t}\n\t\t\t\tObject s = ans==null ? \"IMPOSSIBLE\" : String.valueOf(ans);\n\t\t\t\t\n\t\t\t\tr.pw.println(s);\n\t\t\t\tSystem.out.println(s);\n\t\t\t}\n\t\t\tSystem.out.println(\"Finished.\");\n\t\t\tr.sc.close();\n\t\t\tr.pw.close();\r\n\t\t} catch(Exception e) {\r\n\t\t\tSystem.err.println(e);\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "10022"}
{"func": "package googlejam10.p041;\n\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Scanner;\nimport java.util.Vector;\n\npublic class R2_A {\n\t\n\tpublic static void main(String args[]) throws IOException {\n\t\n\t\t\n\t\tFileInputStream in = null;\n\t\tPrintWriter out = null;\n\n\t    try {\n\t         in = new FileInputStream(\"A-large.in\");\n\t         out = new PrintWriter( \"A-large.output\" );\n\t        \t    \n\t        \t    \n\t         Scanner sc = new Scanner (in);\n\t         String line = sc.nextLine();\n\t           \n\t         int T = Integer.parseInt(line);\n        \t \n             for(int t=1 ; t <= T ; t++) {\n            \t String output = \"Case #\" + t + \":\";\n            \t \n            \t line = sc.nextLine();\n            \t int n = Integer.parseInt(line.split(\" \")[0]);\n            \t int r = Integer.parseInt(line.split(\" \")[1]);\n            \t int p = Integer.parseInt(line.split(\" \")[2]);\n            \t int s = Integer.parseInt(line.split(\" \")[3]);\n            \t \n            \t Vector<HashMap<String, String>> memo = new Vector<HashMap<String, String>>();;\n            \t HashMap<String, String> base = new HashMap<String, String>();\n            \t base.put(\"P\", \"P\");\n            \t base.put(\"R\", \"R\");\n            \t base.put(\"S\", \"S\");\n            \t memo.add(base);\n            \t \n            \t for(int i=1; i<=12; ++i) {\n            \t\t HashMap<String, String> subMemo = new HashMap<String, String>();\n            \t\t if ( memo.elementAt(i-1).get(\"P\").compareTo(memo.elementAt(i-1).get(\"R\")) < 0 ) {\n            \t\t\t String ss = memo.elementAt(i-1).get(\"P\") + memo.elementAt(i-1).get(\"R\"); \t\t\t \n            \t\t\t subMemo.put(\"P\", ss);\n            \t\t } else {\n            \t\t\t String ss = memo.elementAt(i-1).get(\"R\") + memo.elementAt(i-1).get(\"P\");\n            \t\t\t subMemo.put(\"P\", ss);\n            \t\t }\n            \t\t if ( memo.elementAt(i-1).get(\"R\").compareTo(memo.elementAt(i-1).get(\"S\")) < 0  ) {\n            \t\t\t String ss = memo.elementAt(i-1).get(\"R\") + memo.elementAt(i-1).get(\"S\");\n            \t\t\t subMemo.put(\"R\", ss);\n            \t\t } else {\n            \t\t\t String ss = memo.elementAt(i-1).get(\"S\") + memo.elementAt(i-1).get(\"R\");\n            \t\t\t subMemo.put(\"R\", ss);\n            \t\t }\n            \t\t if ( memo.elementAt(i-1).get(\"P\").compareTo(memo.elementAt(i-1).get(\"S\")) < 0 ) {\n            \t\t\t String ss = memo.elementAt(i-1).get(\"P\") + memo.elementAt(i-1).get(\"S\");\n            \t\t\t subMemo.put(\"S\", ss);\n            \t\t } else {\n            \t\t\t String ss = memo.elementAt(i-1).get(\"S\") + memo.elementAt(i-1).get(\"P\");\n            \t\t\t subMemo.put(\"S\", ss);\n            \t\t }\n            \t\t memo.add(subMemo);\n            \t }\n            \t \n            \t int flag = 0;\n            \t for(String key : Arrays.asList(\"P\", \"R\", \"S\")) {\n            \t\t int pNum = 0, rNum = 0, sNum = 0;\n            \t\t String currentS = memo.elementAt(n).get(key);\n            \t\t for (int k = 0; k < currentS.length(); k++){\n            \t\t\t char c = currentS.charAt(k); \n            \t\t\t if ( c == 'P' ) ++pNum;\n            \t\t\t else if ( c == 'R' ) ++rNum;\n            \t\t\t else if ( c == 'S' ) ++sNum;\n            \t\t }\n            \t\t if (pNum == p && rNum == r && sNum == s) {\n            \t\t\t output += \" \" + memo.elementAt(n).get(key);\n            \t\t\t out.println( output );\n            \t\t\t flag = 1;\n            \t\t     break;\n            \t\t }\n            \t }\n            \t \n            \t if( flag == 0 ) {\n            \t\t output += \" \" + \"IMPOSSIBLE\";\n            \t\t out.println( output );\n            \t }\n             }\n         \n\t     } finally {\n\t         if (in != null) {\n\t            in.close();\n\t         }\n\t         if (out != null) {\n\t            out.close();\n\t         }\n\t     }\n\t}\n\n}\n", "idx": "10041"}
{"func": "package googlejam10.p043;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\npublic class A {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/A-large.in\"))));\r\n\r\n\t\tString output = \"\";\r\n\t\tint t = sc.nextInt();\r\n\t\tsc.nextLine();\r\n\t\tfor (int i = 1; i <= t; i++) {\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint r = sc.nextInt();\r\n\t\t\tint p = sc.nextInt();\r\n\t\t\tint s = sc.nextInt();\r\n\t\t\tArrayList<String> poss = new ArrayList<String>();\r\n\t\t\t\r\n\t\t\tString ans = \"P\";\r\n\t\t\tint ar = 0;\r\n\t\t\tint ap = 0;\r\n\t\t\tint as = 0;\r\n\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\tStringBuilder next = new StringBuilder();\r\n\t\t\t\tfor (char c : ans.toCharArray()) {\r\n\t\t\t\t\tif (c=='P')\r\n\t\t\t\t\t\tnext.append(\"PR\");\r\n\t\t\t\t\tif (c=='S')\r\n\t\t\t\t\t\tnext.append(\"PS\");\r\n\t\t\t\t\tif (c=='R')\r\n\t\t\t\t\t\tnext.append(\"RS\");\r\n\t\t\t\t}\r\n\t\t\t\tans = next.toString();\r\n\t\t\t}\r\n\t\t\tfor (char c : ans.toCharArray()) {\r\n\t\t\t\tif (c=='P')\r\n\t\t\t\t\tap++;\r\n\t\t\t\tif (c=='R')\r\n\t\t\t\t\tar++;\r\n\t\t\t\tif (c=='S')\r\n\t\t\t\t\tas++;\r\n\t\t\t}\r\n\t\t\tif (ap==p&&ar==r&&as==s) {\r\n\t\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\t\tStringBuilder fa = new StringBuilder();\r\n\t\t\t\t\tint step = 1<<j;\r\n\t\t\t\t\tfor (int k = 0; k < ans.length(); k += step*2) {\r\n\t\t\t\t\t\tif (ans.substring(k, k+step).compareTo(ans.substring(k+step, k+step*2)) < 0) {\r\n\t\t\t\t\t\t\tfa.append(ans.substring(k, k+step*2));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfa.append(ans.substring(k+step, k+step*2));\r\n\t\t\t\t\t\t\tfa.append(ans.substring(k, k+step));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tans = fa.toString();\r\n\t\t\t\t}\r\n\t\t\t\tposs.add(ans);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tans = \"R\";\r\n\t\t\tar = 0;\r\n\t\t\tap = 0;\r\n\t\t\tas = 0;\r\n\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\tStringBuilder next = new StringBuilder();\r\n\t\t\t\tfor (char c : ans.toCharArray()) {\r\n\t\t\t\t\tif (c=='P')\r\n\t\t\t\t\t\tnext.append(\"PR\");\r\n\t\t\t\t\tif (c=='S')\r\n\t\t\t\t\t\tnext.append(\"PS\");\r\n\t\t\t\t\tif (c=='R')\r\n\t\t\t\t\t\tnext.append(\"RS\");\r\n\t\t\t\t}\r\n\t\t\t\tans = next.toString();\r\n\t\t\t}\r\n\t\t\tfor (char c : ans.toCharArray()) {\r\n\t\t\t\tif (c=='P')\r\n\t\t\t\t\tap++;\r\n\t\t\t\tif (c=='R')\r\n\t\t\t\t\tar++;\r\n\t\t\t\tif (c=='S')\r\n\t\t\t\t\tas++;\r\n\t\t\t}\r\n\t\t\tif (ap==p&&ar==r&&as==s) {\r\n\t\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\t\tStringBuilder fa = new StringBuilder();\r\n\t\t\t\t\tint step = 1<<j;\r\n\t\t\t\t\tfor (int k = 0; k < ans.length(); k += step*2) {\r\n\t\t\t\t\t\tif (ans.substring(k, k+step).compareTo(ans.substring(k+step, k+step*2)) < 0) {\r\n\t\t\t\t\t\t\tfa.append(ans.substring(k, k+step*2));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfa.append(ans.substring(k+step, k+step*2));\r\n\t\t\t\t\t\t\tfa.append(ans.substring(k, k+step));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tans = fa.toString();\r\n\t\t\t\t}\r\n\t\t\t\tposs.add(ans);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tans = \"S\";\r\n\t\t\tar = 0;\r\n\t\t\tap = 0;\r\n\t\t\tas = 0;\r\n\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\tStringBuilder next = new StringBuilder();\r\n\t\t\t\tfor (char c : ans.toCharArray()) {\r\n\t\t\t\t\tif (c=='P')\r\n\t\t\t\t\t\tnext.append(\"PR\");\r\n\t\t\t\t\tif (c=='S')\r\n\t\t\t\t\t\tnext.append(\"PS\");\r\n\t\t\t\t\tif (c=='R')\r\n\t\t\t\t\t\tnext.append(\"RS\");\r\n\t\t\t\t}\r\n\t\t\t\tans = next.toString();\r\n\t\t\t}\r\n\t\t\tfor (char c : ans.toCharArray()) {\r\n\t\t\t\tif (c=='P')\r\n\t\t\t\t\tap++;\r\n\t\t\t\tif (c=='R')\r\n\t\t\t\t\tar++;\r\n\t\t\t\tif (c=='S')\r\n\t\t\t\t\tas++;\r\n\t\t\t}\r\n\t\t\tif (ap==p&&ar==r&&as==s) {\r\n\t\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\t\tStringBuilder fa = new StringBuilder();\r\n\t\t\t\t\tint step = 1<<j;\r\n\t\t\t\t\tfor (int k = 0; k < ans.length(); k += step*2) {\r\n\t\t\t\t\t\tif (ans.substring(k, k+step).compareTo(ans.substring(k+step, k+step*2)) < 0) {\r\n\t\t\t\t\t\t\tfa.append(ans.substring(k, k+step*2));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfa.append(ans.substring(k+step, k+step*2));\r\n\t\t\t\t\t\t\tfa.append(ans.substring(k, k+step));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tans = fa.toString();\r\n\t\t\t\t}\r\n\t\t\t\tposs.add(ans);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (poss.size() == 0)\r\n\t\t\t\toutput += \"Case #\" + i + \": \" + \"IMPOSSIBLE\" + \"\\n\";\r\n\t\t\telse {\r\n\t\t\t\tCollections.sort(poss);\r\n\t\t\t\toutput += \"Case #\" + i + \": \" + poss.get(0) + \"\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src/A-large.out\"), \"utf-8\"));\r\n\t\tbw.write(output);\r\n\t\tbw.close();\r\n\t}\r\n}", "idx": "10043"}
{"func": "package googlejam10.p067;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class RatherPerplexingShowdown {\r\n    \r\n    public static void main(String[] args) throws Exception {\r\n        File inputFile = new File(\"A-large.in\");\r\n        Scanner in = new Scanner(inputFile);\r\n        File outputFile = new File(\"output.txt\");\r\n        PrintWriter out = new PrintWriter(outputFile);\r\n\r\n        String[][] answers = new String[13][3];\r\n        answers[0] = new String[] {\"P\", \"R\", \"S\"};\r\n        for (int n=1; n<=12; n++) {\r\n            // P <- P R\r\n            String s1 = answers[n-1][0] + answers[n-1][1];\r\n            String s2 = answers[n-1][1] + answers[n-1][0];\r\n            answers[n][0] = s1.compareTo(s2) < 0 ? s1 : s2;\r\n            // R <- R S\r\n            s1 = answers[n-1][1] + answers[n-1][2];\r\n            s2 = answers[n-1][2] + answers[n-1][1];\r\n            answers[n][1] = s1.compareTo(s2) < 0 ? s1 : s2;\r\n            // S <- S P\r\n            s1 = answers[n-1][2] + answers[n-1][0];\r\n            s2 = answers[n-1][0] + answers[n-1][2];\r\n            answers[n][2] = s1.compareTo(s2) < 0 ? s1 : s2;            \r\n        }\r\n\r\n        int T = in.nextInt();\r\n        for (int t=0; t<T; t++) {\r\n            int N = in.nextInt();\r\n            int R = in.nextInt();\r\n            int P = in.nextInt();\r\n            int S = in.nextInt();\r\n            String best = null;\r\n            for (int i=0; i<3; i++) {\r\n                String cand = answers[N][i];\r\n                int[] stats = new int[3];\r\n                for (char c : cand.toCharArray()) {\r\n                    if (c == 'R') {\r\n                        stats[0]++;\r\n                    } else if (c == 'P') {\r\n                        stats[1]++;\r\n                    } else {\r\n                        stats[2]++;\r\n                    }\r\n                }\r\n                if (stats[0] == R && stats[1] == P && stats[2] == S) {\r\n                    if (best == null || cand.compareTo(best) < 0) {\r\n                        best = cand;\r\n                    }\r\n                }\r\n            }\r\n            String answer = (best == null) ? \"IMPOSSIBLE\" : best;\r\n            out.println(\"Case #\"+(t+1)+\": \"+answer);\r\n        }\r\n\r\n        out.close();\r\n    }\r\n    \r\n}\r\n", "idx": "10067"}
{"func": "package googlejam10.p093;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\n\r\n\r\npublic class RPS {\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tBufferedReader buf = new BufferedReader(new FileReader(\"RPS.in\"));\r\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(\"RPS.out\")));\r\n\t\tint t = Integer.parseInt(buf.readLine());\r\n\t\tfor(int i = 1; i <= t; i++){\r\n\t\t\tString[] str = buf.readLine().split(\" \");\r\n\t\t\tint n = Integer.parseInt(str[0]);\r\n\t\t\tint r = Integer.parseInt(str[1]);\r\n\t\t\tint p = Integer.parseInt(str[2]);\r\n\t\t\tint s = Integer.parseInt(str[3]);\r\n\t\t\tString st = \"R\";\r\n\t\t\tString st2 = \"P\";\r\n\t\t\tString st3 = \"S\";\r\n\t\t\tfor(int j = 0; j < n; j++){\r\n\t\t\t\tString stemp = \"\";\r\n\t\t\t\tString stemp2 = \"\";\r\n\t\t\t\tString stemp3 = \"\";\r\n\t\t\t\tif(st.compareTo(st2) < 0){\r\n\t\t\t\t\tstemp = st + st2;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstemp = st2 + st;\r\n\t\t\t\t}\r\n\t\t\t\tif(st2.compareTo(st3) < 0){\r\n\t\t\t\t\tstemp2 = st2 + st3;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstemp2 = st3 + st2;\r\n\t\t\t\t}\r\n\t\t\t\tif(st3.compareTo(st) < 0){\r\n\t\t\t\t\tstemp3 = st3 + st;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstemp3 = st + st3;\r\n\t\t\t\t}\r\n\t\t\t\tst = stemp;\r\n\t\t\t\tst2 = stemp2;\r\n\t\t\t\tst3 = stemp3;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\tfor(int j = 0; j < n; j++){\r\n\t\t\t\tString stemp = \"\";\r\n\t\t\t\tfor(int k = 0; k < st.length(); k++){\r\n\t\t\t\t\tif(st.charAt(k) == 'R'){\r\n\t\t\t\t\t\tif(j == n - 1){\r\n\t\t\t\t\t\t\tstemp = stemp + \"RS\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tstemp = stemp + \"SR\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if(st.charAt(k) == 'P'){\r\n\t\t\t\t\t\tstemp = stemp + \"PR\";\r\n\t\t\t\t\t} else if(st.charAt(k) == 'S'){\r\n\t\t\t\t\t\tstemp = stemp + \"PS\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tst = stemp;\r\n\t\t\t}\r\n\t\t\tString st2 = \"P\";\r\n\t\t\tfor(int j = 0; j < n; j++){\r\n\t\t\t\tString stemp = \"\";\r\n\t\t\t\tfor(int k = 0; k < st2.length(); k++){\r\n\t\t\t\t\tif(st2.charAt(k) == 'R'){\r\n\t\t\t\t\t\tif(j == n - 1){\r\n\t\t\t\t\t\t\tstemp = stemp + \"RS\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tstemp = stemp + \"SR\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if(st2.charAt(k) == 'P'){\r\n\t\t\t\t\t\tstemp = stemp + \"PR\";\r\n\t\t\t\t\t} else if(st2.charAt(k) == 'S'){\r\n\t\t\t\t\t\tstemp = stemp + \"PS\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tst2 = stemp;\r\n\t\t\t}\r\n\t\t\tString st3 = \"S\";\r\n\t\t\tfor(int j = 0; j < n; j++){\r\n\t\t\t\tString stemp = \"\";\r\n\t\t\t\tfor(int k = 0; k < st3.length(); k++){\r\n\t\t\t\t\tif(st3.charAt(k) == 'R'){\r\n\t\t\t\t\t\tif(j == n - 1){\r\n\t\t\t\t\t\t\tstemp = stemp + \"RS\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tstemp = stemp + \"SR\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if(st3.charAt(k) == 'P'){\r\n\t\t\t\t\t\tstemp = stemp + \"PR\";\r\n\t\t\t\t\t} else if(st3.charAt(k) == 'S'){\r\n\t\t\t\t\t\tstemp = stemp + \"PS\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tst3 = stemp;\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\tout.print(\"Case #\" + i + \": \");\r\n\t\t\tint countr = 0;\r\n\t\t\tint countp = 0;\r\n\t\t\tint counts = 0;\r\n\t\t\tfor(int j = 0; j < st.length(); j++){\r\n\t\t\t\tif(st.charAt(j) == 'R'){\r\n\t\t\t\t\tcountr++;\r\n\t\t\t\t} else if(st.charAt(j) == 'P'){\r\n\t\t\t\t\tcountp++;\r\n\t\t\t\t} else if(st.charAt(j) == 'S'){\r\n\t\t\t\t\tcounts++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (countr == r && countp == p && counts == s){\r\n\t\t\t\tout.println(st);\r\n\t\t\t} else {\r\n\t\t\t\tcountr = 0;\r\n\t\t\t\tcountp = 0;\r\n\t\t\t\tcounts = 0;\r\n\t\t\t\tfor(int j = 0; j < st.length(); j++){\r\n\t\t\t\t\tif(st2.charAt(j) == 'R'){\r\n\t\t\t\t\t\tcountr++;\r\n\t\t\t\t\t} else if(st2.charAt(j) == 'P'){\r\n\t\t\t\t\t\tcountp++;\r\n\t\t\t\t\t} else if(st2.charAt(j) == 'S'){\r\n\t\t\t\t\t\tcounts++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (countr == r && countp == p && counts == s){\r\n\t\t\t\t\tout.println(st2);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcountr = 0;\r\n\t\t\t\t\tcountp = 0;\r\n\t\t\t\t\tcounts = 0;\r\n\t\t\t\t\tfor(int j = 0; j < st.length(); j++){\r\n\t\t\t\t\t\tif(st3.charAt(j) == 'R'){\r\n\t\t\t\t\t\t\tcountr++;\r\n\t\t\t\t\t\t} else if(st3.charAt(j) == 'P'){\r\n\t\t\t\t\t\t\tcountp++;\r\n\t\t\t\t\t\t} else if(st3.charAt(j) == 'S'){\r\n\t\t\t\t\t\t\tcounts++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (countr == r && countp == p && counts == s){\r\n\t\t\t\t\t\tout.println(st3);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tout.println(\"IMPOSSIBLE\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "10093"}
{"func": "package googlejam10.p104;\nimport java.util.Scanner;\n\npublic class A {\n    static String[] r = new String[13];\n    static String[] p = new String[13];\n    static String[] s = new String[13];\n\n    public static void main(String[] args) {\n        r[0] = \"R\";\n        p[0] = \"P\";\n        s[0] = \"S\";\n        for (int i = 0; i < 12; i++) {\n            if (r[i].compareTo(p[i]) < 0) {\n                p[i + 1] = r[i] + p[i];\n            } else {\n                p[i + 1] = p[i] + r[i];\n            }\n\n            if (r[i].compareTo(s[i]) < 0) {\n                r[i + 1] = r[i] + s[i];\n            } else {\n                r[i + 1] = s[i] + r[i];\n            }\n\n            if (s[i].compareTo(p[i]) < 0) {\n                s[i + 1] = s[i] + p[i];\n            } else {\n                s[i + 1] = p[i] + s[i];\n            }\n        }\n\n        Scanner sc = new Scanner(System.in);\n        int numCases = sc.nextInt();\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n            int N = sc.nextInt();\n\n            int[] R = new int[N + 1];\n            R[0] = sc.nextInt();\n            int[] P = new int[N + 1];\n            P[0] = sc.nextInt();\n            int[] S = new int[N + 1];\n            S[0] = sc.nextInt();\n\n            for (int i = 0; i < N; i++) {\n                P[i + 1] = (P[i] + R[i] - S[i]) / 2;\n                R[i + 1] = (R[i] + S[i] - P[i]) / 2;\n                S[i + 1] = (P[i] + S[i] - R[i]) / 2;\n            }\n\n            System.out.print(\"Case #\" + caseNum + \": \");\n            boolean possible = true;\n            for (int i = 0; i <= N; i++) {\n                if (R[i] < 0 || P[i] < 0 || S[i] < 0) {\n                    System.out.println(\"IMPOSSIBLE\");\n                    possible = false;\n                    break;\n                }\n            }\n            if (!possible) {\n                continue;\n            }\n            if (R[N] == 1) {\n                System.out.println(r[N]);\n            } else if (P[N] == 1) {\n                System.out.println(p[N]);\n            } else {\n                System.out.println(s[N]);\n            }\n        }\n        sc.close();\n    }\n}\n", "idx": "10104"}
{"func": "package googlejam10.p106;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\npublic class ProblemA {\r\n\r\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\r\n\t\tScanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));\r\n\t\tint numCases = Integer.parseInt(in.nextLine());\r\n\t\tfor (int caseNum = 1; caseNum <= numCases; caseNum++) {\r\n\t\t\tString line = in.nextLine();\r\n\t\t\tScanner sc = new Scanner(line);\r\n\t\t\tint n = Integer.parseInt(sc.next());\r\n\t\t\tint r = Integer.parseInt(sc.next());\r\n\t\t\tint p = Integer.parseInt(sc.next());\r\n\t\t\tint s = Integer.parseInt(sc.next());\r\n\t\t\tint[] test = new int[3];\r\n\t\t\ttest[0] = 1;\r\n\t\t\ttest[1] = 1;\r\n\t\t\tfor(int i = 1; i < n; i++){\r\n\t\t\t\tint[] nextStep = new int[3];\r\n\t\t\t\tnextStep[0] = test[0] + test[2];\r\n\t\t\t\tnextStep[1] = test[1] + test[0];\r\n\t\t\t\tnextStep[2] = test[1] + test[2];\r\n\t\t\t\ttest[0] = nextStep[0];\r\n\t\t\t\ttest[1] = nextStep[1];\r\n\t\t\t\ttest[2] = nextStep[2];\r\n\t\t\t}\r\n\t\t\tArrayList<String> round = new ArrayList<String>();\r\n\t\t\t\t\r\n\t\t\tif(test[0] == p && test[1] == r && test[2] == s){\r\n\t\t\t\tround.add(\"PR\");\r\n\t\t\t} else if(test[0] == r && test[1] == s && test[2] == p){\r\n\t\t\t\tround.add(\"RS\");\r\n\t\t\t} else if(test[0] == s && test[1] == p && test[2] == r){\r\n\t\t\t\tround.add(\"PS\");\r\n\t\t\t} else {\r\n\t\t\t\tSystem.out.println(\"Case #\" + caseNum + \": \" + \"IMPOSSIBLE\");\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tfor(int i = 1; i < n; i++){\r\n\t\t\t\tArrayList<String> nextRound = new ArrayList<String>();\r\n\t\t\t\tfor(int j = 0; j < round.size(); j++){\r\n\t\t\t\t\tif(round.get(j).equals(\"PR\")){\r\n\t\t\t\t\t\tnextRound.add(\"PR\");\r\n\t\t\t\t\t\tnextRound.add(\"RS\");\r\n\t\t\t\t\t} else if(round.get(j).equals(\"PS\")){\r\n\t\t\t\t\t\tnextRound.add(\"PR\");\r\n\t\t\t\t\t\tnextRound.add(\"PS\");\r\n\t\t\t\t\t} else if(round.get(j).equals(\"RS\")){\r\n\t\t\t\t\t\tnextRound.add(\"RS\");\r\n\t\t\t\t\t\tnextRound.add(\"PS\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tround = nextRound;\r\n\t\t\t}\r\n\t\t\tfor(int i = 1; i < n; i++){\r\n\t\t\t\tArrayList<String> lastRound = new ArrayList<String>();\r\n\t\t\t\tfor(int j = 0; j < round.size()/2; j++){\r\n\t\t\t\t\tString s1 = round.get(2*j);\r\n\t\t\t\t\tString s2 = round.get(2*j + 1);\r\n\t\t\t\t\tif(s1.compareTo(s2) < 0){\r\n\t\t\t\t\t\tlastRound.add(s1 + s2);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlastRound.add(s2 + s1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tround = lastRound;\r\n\t\t\t}\r\n\t\t\tif(round.size() != 1){\r\n\t\t\t\tSystem.out.println(\"FAIL\");\r\n\t\t\t}\r\n\t\t\tSystem.out.println(\"Case #\" + caseNum + \": \" + round.get(0));\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "10106"}
{"func": "package googlejam10.p107;\nimport java.util.*;\n\nclass A {\n  static int MAX_N = 12;\n\n  public static void main(String[] args) {\n    List[] p = new ArrayList[MAX_N];\n    List[] r = new ArrayList[MAX_N];\n    List[] s = new ArrayList[MAX_N];\n    List[] merged = new ArrayList[MAX_N];\n    for (int i = 0; i < MAX_N; ++i) {\n      p[i] = new ArrayList();\n      r[i] = new ArrayList();\n      s[i] = new ArrayList();\n      if (i == 0) {\n        p[0].add(\"PR\");\n        r[0].add(\"RS\");\n        s[0].add(\"PS\");\n      } else {\n        for (Object ao: p[i-1]) for (Object bo: r[i-1]) {\n\t\t  String aos = ao.toString();\n\t\t  String bos = bo.toString();\n\t\t  if (aos.compareTo(bos) > 0) { aos = bo.toString(); bos = ao.toString(); }\n\t\t  p[i].add(aos + bos);\n\t\t}\n        for (Object ao: r[i-1]) for (Object bo: s[i-1]) {\n\t\t  String aos = ao.toString();\n\t\t  String bos = bo.toString();\n\t\t  if (aos.compareTo(bos) > 0) { aos = bo.toString(); bos = ao.toString(); }\n\t\t  r[i].add(aos + bos);\n\t\t}\n        for (Object ao: p[i-1]) for (Object bo: s[i-1]) {\n\t\t  String aos = ao.toString();\n\t\t  String bos = bo.toString();\n\t\t  if (aos.compareTo(bos) > 0) { aos = bo.toString(); bos = ao.toString(); }\n\t\t  s[i].add(aos + bos);\n\t\t}\n      }\n      merged[i] = new ArrayList();\n      merged[i].addAll(p[i]);\n      merged[i].addAll(r[i]);\n      merged[i].addAll(s[i]);\n      Collections.sort(merged[i]);\n    }\n\n    Scanner scan = new Scanner(System.in);\n    int tcc = scan.nextInt();\n    for (int tc = 1; tc <= tcc; ++tc) {\n      int n = scan.nextInt();\n      int rc = scan.nextInt();\n      int pc = scan.nextInt();\n      int sc = scan.nextInt();\n      String best = null;\n      for (Object o: merged[n - 1]) {\n        String os = o.toString();\n        if (best != null && o.toString().compareTo(best) > 0) break;\n        int rrc = 0;\n        int rpc = 0;\n        int rsc = 0;\n        for (int i = 0; i < os.length(); ++i) {\n          if (os.charAt(i) == 'R') ++rrc;\n          if (os.charAt(i) == 'P') ++rpc;\n          if (os.charAt(i) == 'S') ++rsc;\n        }\n        if (rrc == rc && rpc == pc && rsc == sc) best = os;\n      }\n      System.out.printf(\"Case #%d: \", tc);\n      System.out.println(best == null ? \"IMPOSSIBLE\" : best);\n    }\n  }\n}\n", "idx": "10107"}
{"func": "package googlejam10.p113;\n/* Andy Rock\n * May 23, 2016\n * \n * Round 2 2016: Problem A. \n */\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\npublic class A\n{\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tBufferedReader in  = new BufferedReader(new FileReader(\"A.in\"));\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"A.out\"));\n\n\t\tint T = Integer.parseInt(in.readLine());\n\t\tfor(int t=1;t<=T;t++)\n\t\t{\n\t\t\tStringTokenizer st = new StringTokenizer(in.readLine());\n\t\t\tint N = Integer.parseInt(st.nextToken());\n\t\t\tint R = Integer.parseInt(st.nextToken());\n\t\t\tint P = Integer.parseInt(st.nextToken());\n\t\t\tint S = Integer.parseInt(st.nextToken());\n\n\t\t\tString ans = \"IMPOSSIBLE\";\n\n\t\t\tint[][] win = {{0, 1}, {1, 2}, {0, 2}};\n\t\t\tfor(int i=0;i<3;i++)\n\t\t\t{\n\t\t\t\tString store = new String[]{\"P\", \"R\", \"S\"}[i];\n\t\t\t\tfor(int k=0;k<N;k++)\n\t\t\t\t{\n\t\t\t\t\tString temp = \"\";\n\t\t\t\t\tfor(char c : store.toCharArray())\n\t\t\t\t\t\tif(c == 'P')\n\t\t\t\t\t\t\ttemp += \"PR\";\n\t\t\t\t\t\telse if(c == 'R')\n\t\t\t\t\t\t\ttemp += \"RS\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ttemp += \"PS\";\n\n\t\t\t\t\tstore = temp;\n\t\t\t\t}\n\n\t\t\t\tint p = 0, r = 0, s = 0;\n\t\t\t\tfor(char c : store.toCharArray())\n\t\t\t\t\tif(c == 'P')\n\t\t\t\t\t\tp++;\n\t\t\t\t\telse if(c == 'R')\n\t\t\t\t\t\tr++;\n\t\t\t\t\telse\n\t\t\t\t\t\ts++;\n\n\t\t\t\tfor(int j=1;j<(1 << N);j *= 2)\n\t\t\t\t\tfor(int k=0;k+j<(1 << N);k+=j+j)\n\t\t\t\t\t\tif(store.substring(k+j, k+2*j).compareTo(store.substring(k, k+j)) < 0)\n\t\t\t\t\t\t\tstore = store.substring(0, k) + store.substring(k+j, k+2*j) + store.substring(k, k+j) + store.substring(k+2*j);\n\n\t\t\t\tif(P == p && R == r && S == s && (ans.equals(\"IMPOSSIBLE\") || store.compareTo(ans) < 0))\n\t\t\t\t\tans = store;\n\t\t\t}\n\n\t\t\tout.write(\"Case #\"+t+\": \");\n\t\t\tout.write(ans);\n\t\t\tout.write(\"\\n\");\n\t\t}\n\n\t\tin .close();\n\t\tout.close();\n\t}\n}", "idx": "10113"}
{"func": "package googlejam10.p128;\n\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\nimport java.io.*;\r\npublic class A {\r\n\t\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\t\r\n//\t\tScanner qwe = new Scanner(System.in);\r\n\t\tScanner qwe = new Scanner(new File(\"A.in\"));\r\n\r\n\t\tint T = qwe.nextInt();\r\n\t\t\r\n\t\tint p = 0;\r\n\t\tint r = 1;\r\n\t\tint s = 2;\r\n\t\t\r\n\t\tint[][][] am = new int[13][3][3];\r\n\t\tint[][] ordering = new int[13][3];\r\n\t\tString[][] str = new String[13][3];\r\n\t\t\r\n\t\tfor(int i =0; i < 3; i++) am[0][i][i] = 1;\r\n\t\tordering[0][p] = 0;\r\n\t\tordering[0][r] = 1;\r\n\t\tordering[0][s] = 2;\r\n\t\tstr[0][p] = \"P\";\r\n\t\tstr[0][r] = \"R\";\r\n\t\tstr[0][s] = \"S\";\r\n\t\t\r\n\t\tfor(int lvl =1; lvl < 13; lvl++){\r\n\t\t\t\r\n\t\t\tfor(int i =0; i < 3; i++){\r\n\t\t\t\tfor(int j =0; j < 3; j++)\r\n\t\t\t\t\tam[lvl][i][j] = am[lvl-1][(i+1)%3][j]+am[lvl-1][i][j];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int i =0; i < 3; i++)\r\n\t\t\t{\r\n\t\t\t\tordering[lvl][i] = ordering[lvl-1][i]+ordering[lvl-1][(i+1)%3]-1;\r\n\t\t\t\tString a = str[lvl-1][i]+str[lvl-1][(i+1)%3];\r\n\t\t\t\tString b = str[lvl-1][(i+1)%3]+str[lvl-1][i];\r\n\t\t\t\tif(a.compareTo(b) < 0){\r\n\t\t\t\t\tstr[lvl][i] = a;\r\n\t\t\t\t}\r\n\t\t\t\telse str[lvl][i] = b;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//System.out.println(Arrays.toString(ordering[lvl]));\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tfor(int cse = 1; cse <= T; cse++){\r\n\t\t\tint N = qwe.nextInt();\r\n\t\t\tint R = qwe.nextInt();\r\n\t\t\tint P = qwe.nextInt();\r\n\t\t\tint S = qwe.nextInt();\r\n\t\t\t\r\n\t\t\tboolean pos = false;\r\n\t\t\tint best = 3;\r\n\t\t\tString ans = \"\";\r\n\t\t\tfor(int i =0; i < 3; i++){\r\n\t\t\t\tint next = ordering[N][i];\r\n\t\t\t\tif(next < best){\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(am[N][i][p] == P && am[N][i][r] == R && am[N][i][s] == S){\r\n\t\t\t\t\t\tans = str[N][i];\r\n\t\t\t\t\t\tbest=  next;\r\n\t\t\t\t\t\tpos = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(pos) System.out.println(\"Case #\"+cse+\": \"+ans);\r\n\t\t\telse{\r\n\t\t\t\tSystem.out.println(\"Case #\"+cse+\": IMPOSSIBLE\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tqwe.close();\r\n\t}\r\n\r\n}\r\n", "idx": "10128"}
{"func": "package googlejam10.p153;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.io.PrintWriter;\nimport java.util.*;\n\n\npublic class Showdown {\n\tpublic static void main(String[] args) throws IOException{\n\t\tScanner kb = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(new FileWriter(\"showdown.out\"));\n\t\t//PrintStream out = System.out;\n\t\tint [][][] solutions = new int[13][3][3];\n\t\tsolutions[0][0][0] = 1; // p\n\t\tsolutions[0][1][1] = 1; // r\n\t\tsolutions[0][2][2] = 1; // s\n\t\t\n\t\tString[][] answers = new String[13][3];\n\t\tanswers[0][0] = \"P\"; // p\n\t\tanswers[0][1] = \"R\"; // r\n\t\tanswers[0][2] = \"S\"; // s\n\t\t\n\t\tfor (int i=1; i <= 12; i++) {\n\t\t\tfor (int j=0; j < 3; j++) {\n\t\t\t\tsolutions[i][j][0] = solutions[i-1][j][0] + solutions[i-1][j][2];\n\t\t\t\tsolutions[i][j][1] = solutions[i-1][j][1] + solutions[i-1][j][0];\n\t\t\t\tsolutions[i][j][2] = solutions[i-1][j][2] + solutions[i-1][j][1];\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\tanswers[i][0] = minString(answers[i-1][0], answers[i-1][1]);\n\t\t\tanswers[i][1] = minString(answers[i-1][1], answers[i-1][2]);\n\t\t\tanswers[i][2] = minString(answers[i-1][2], answers[i-1][0]);\n\t\t}\n\t\t\n\t\tint cases = kb.nextInt();\n\t\tfor(int n=0; n < cases; n++) {\n\t\t\tout.print(\"Case #\" + (n + 1) + \": \");\n\t\t\t\n\t\t\tint N = kb.nextInt();\n\t\t\tint r = kb.nextInt();\n\t\t\tint p = kb.nextInt();\n\t\t\tint s = kb.nextInt();\n\t\t\t\n\t\t\tboolean found = false;\n\t\t\tfor (int j=0; j < 3; j++) {\n\t\t\t\tif (solutions[N][j][0] == p && solutions[N][j][1] == r && solutions[N][j][2] == s) {\n\t\t\t\t\tout.print(answers[N][j]);\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!found)\n\t\t\t\tout.print(\"IMPOSSIBLE\");\n\t\t\t\n\t\t\t\n\t\t\tout.println();\n\t\t}\n\t\tout.close();\n\t}\n\t\n\tpublic static String minString (String a, String b) {\n\t\tif (a.compareTo(b) < 0) return a + b;\n\t\treturn b + a;\n\t}\n}\n", "idx": "10153"}
{"func": "package googlejam10.p160;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new FileReader(new File(\"A.in\")));\n\t\tPrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(new File(\"A.out\"))));\n\n\t\tString[][] prs = new String[13][3];\n\t\tprs[0][0] = \"P\";\n\t\tprs[0][1] = \"R\";\n\t\tprs[0][2] = \"S\";\n\t\tint[][] prsp = new int[13][3];\n\t\tint[][] prsr = new int[13][3];\n\t\tint[][] prss = new int[13][3];\n\t\tprsp[0][0] = 1;\n\t\tprsr[0][1] = 1;\n\t\tprss[0][2] = 1;\n\t\tfor (int n = 0; n < 12; n++) {\n\t\t\tprsp[n+1][0] = prsp[n][0] + prsp[n][1];\n\t\t\tprsp[n+1][1] = prsp[n][1] + prsp[n][2];\n\t\t\tprsp[n+1][2] = prsp[n][2] + prsp[n][0];\n\t\t\tprsr[n+1][0] = prsr[n][0] + prsr[n][1];\n\t\t\tprsr[n+1][1] = prsr[n][1] + prsr[n][2];\n\t\t\tprsr[n+1][2] = prsr[n][2] + prsr[n][0];\n\t\t\tprss[n+1][0] = prss[n][0] + prss[n][1];\n\t\t\tprss[n+1][1] = prss[n][1] + prss[n][2];\n\t\t\tprss[n+1][2] = prss[n][2] + prss[n][0];\n\t\t\tif (prs[n][0].compareTo(prs[n][1]) < 0) prs[n+1][0] = prs[n][0]+prs[n][1];\n\t\t\telse prs[n+1][0] = prs[n][1]+prs[n][0];\n\t\t\tif (prs[n][1].compareTo(prs[n][2]) < 0) prs[n+1][1] = prs[n][1]+prs[n][2];\n\t\t\telse prs[n+1][1] = prs[n][2]+prs[n][1];\n\t\t\tif (prs[n][2].compareTo(prs[n][0]) < 0) prs[n+1][2] = prs[n][2]+prs[n][0];\n\t\t\telse prs[n+1][2] = prs[n][0]+prs[n][2];\n\t\t}\n\t\t\n\t\t\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tfor (int t = 0; t < T; t++) {\n\t\t\tString[] str = br.readLine().split(\" \");\n\t\t\tint N = Integer.parseInt(str[0]);\n\t\t\tint R = Integer.parseInt(str[1]);\n\t\t\tint P = Integer.parseInt(str[2]);\n\t\t\tint S = Integer.parseInt(str[3]);\n\t\t\t\n\t\t\tString answer = \"IMPOSSIBLE\";\n\t\t\t\n\t\t\tif (prsp[N][0] == P && prsr[N][0] == R && prss[N][0] == S) answer = prs[N][0];\n\t\t\telse if (prsp[N][1] == P && prsr[N][1] == R && prss[N][1] == S) answer = prs[N][1];\n\t\t\telse if (prsp[N][2] == P && prsr[N][2] == R && prss[N][2] == S) answer = prs[N][2];\n\t\t\t\n\t\t\tpw.println(\"Case #\"+(t+1)+\": \"+answer);\n\t\t\tpw.flush();\n\t\t}\n\t\t\n\t\tpw.close();\n\t\tbr.close();\n\t}\n}\n", "idx": "10160"}
{"func": "package googlejam10.p166;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A\r\n{\r\n\tstatic char[] let={'P','R','S'};\r\n\tpublic static void main(String[] args)\r\n\t{\r\n\t\tString[][] table = new String[3][13];\r\n\t\tfor (int i=0; i<3; i++)\r\n\t\t\ttable[i][0]=\"\"+let[i];\r\n\t\tfor (int n=0; n<=11; n++)\r\n\t\t\tfor (int i=0; i<3; i++)\r\n\t\t\t{\r\n\t\t\t\tString a=table[i][n], b=table[(i+1)%3][n];\r\n\t\t\t\tif (a.compareTo(b)<0)\r\n\t\t\t\t\ttable[i][n+1]=a+b;\r\n\t\t\t\telse\r\n\t\t\t\t\ttable[i][n+1]=b+a;\r\n\t\t\t}\r\n\t\t\r\n\t\tScanner in=new Scanner(System.in);\r\n\t\tint numRuns=in.nextInt();\r\n\t\tint[] count=new int[3];\r\n\t\tfor (int run=1; run<=numRuns; run++)\r\n\t\t{\r\n\t\t\tint n=in.nextInt();\r\n\t\t\tcount[1]=in.nextInt();\r\n\t\t\tcount[0]=in.nextInt();\r\n\t\t\tcount[2]=in.nextInt();\r\n\t\t\tboolean match=false;\r\n\t\t\tfor (int i=0; i<3; i++)\r\n\t\t\t{\r\n\t\t\t\tmatch=true;\r\n\t\t\t\tString game=table[i][n];\r\n\t\t\t\tfor (int j=0; j<3; j++)\r\n\t\t\t\t\tif (game.length()-game.replace(\"\"+let[j],\"\").length()!=count[j])\r\n\t\t\t\t\t\tmatch=false;\r\n\t\t\t\tif (match)\r\n\t\t\t\t{\r\n\t\t\t\t\tSystem.out.println(\"Case #\"+run+\": \"+game);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!match)\r\n\t\t\t\tSystem.out.println(\"Case #\"+run+\": IMPOSSIBLE\");\r\n\t\t}\r\n\t}\r\n}", "idx": "10166"}
{"func": "package googlejam10.p167;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class RatherPerplexingShowdown {\r\n\t\r\n\tstatic final String IMPOSSIBLE = \"IMPOSSIBLE\";\r\n\t\t\r\n\tpublic static void main(String[] args) {\r\n\t\ttry {\r\n\t\t\tScanner in = new Scanner(new BufferedReader(new FileReader(new File(\"A-large.in\")), 256 << 10));\r\n\t\t\tBufferedWriter out = new BufferedWriter(new FileWriter(new File(\"output.txt\")), 256 << 10);\r\n\r\n\t\t\tint testsNumber = in.nextInt();\r\n\t\t\tfor (int testId = 1; testId <= testsNumber; testId++) {\r\n\t\t\t\tint rounds = in.nextInt();\r\n\t\t\t\tint n = 1 << rounds;\r\n\t\t\t\tint r = in.nextInt();\r\n\t\t\t\tint p = in.nextInt();\r\n\t\t\t\tint s = in.nextInt();\r\n\t\t\t\t\r\n\t\t\t\tString[] pp = new String[rounds+1];\r\n\t\t\t\tString[] rr = new String[rounds+1];\r\n\t\t\t\tString[] ss = new String[rounds+1];\r\n\r\n\t\t\t\tpp[0] = \"P\";\r\n\t\t\t\trr[0] = \"R\";\r\n\t\t\t\tss[0] = \"S\";\r\n\t\t\t\t\r\n\t\t\t\tfor (int i = 1; i <= rounds; i++) {\r\n\t\t\t\t\tif (pp[i-1].compareTo(rr[i-1]) < 0)\r\n\t\t\t\t\t\tpp[i] =  pp[i-1] + rr[i-1];\r\n\t\t\t\t\telse \r\n\t\t\t\t\t\tpp[i] =  rr[i-1] + pp[i-1];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (rr[i-1].compareTo(ss[i-1]) < 0)\r\n\t\t\t\t\t\trr[i] =  rr[i-1] + ss[i-1];\r\n\t\t\t\t\telse \r\n\t\t\t\t\t\trr[i] =  ss[i-1] + rr[i-1];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (pp[i-1].compareTo(ss[i-1]) < 0)\r\n\t\t\t\t\t\tss[i] =  pp[i-1] + ss[i-1];\r\n\t\t\t\t\telse \r\n\t\t\t\t\t\tss[i] =  ss[i-1] + pp[i-1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tString result = null;\r\n\t\t\t\tint ar = 0, ap = 0, as = 0;\r\n\t\t\t\tfor (int i = 0; i < pp[rounds].length(); i++) {\r\n\t\t\t\t\tchar ch = pp[rounds].charAt(i);\r\n\t\t\t\t\tif (ch == 'P')\r\n\t\t\t\t\t\tap++;\r\n\t\t\t\t\telse if (ch == 'R')\r\n\t\t\t\t\t\tar++;\r\n\t\t\t\t\telse if (ch == 'S')\r\n\t\t\t\t\t\tas++;\r\n\t\t\t\t}\r\n\t\t\t\tif (ar == r & as == s & ap == p) {\r\n\t\t\t\t\tif (result == null || result.compareTo(pp[rounds]) > 0)\r\n\t\t\t\t\t\tresult = pp[rounds];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tar = 0; ap = 0; as = 0;\r\n\t\t\t\tfor (int i = 0; i < rr[rounds].length(); i++) {\r\n\t\t\t\t\tchar ch = rr[rounds].charAt(i);\r\n\t\t\t\t\tif (ch == 'P')\r\n\t\t\t\t\t\tap++;\r\n\t\t\t\t\telse if (ch == 'R')\r\n\t\t\t\t\t\tar++;\r\n\t\t\t\t\telse if (ch == 'S')\r\n\t\t\t\t\t\tas++;\r\n\t\t\t\t}\r\n\t\t\t\tif (ar == r & as == s & ap == p) {\r\n\t\t\t\t\tif (result == null || result.compareTo(rr[rounds]) > 0)\r\n\t\t\t\t\t\tresult = rr[rounds];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tar = 0; ap = 0; as = 0;\r\n\t\t\t\tfor (int i = 0; i < ss[rounds].length(); i++) {\r\n\t\t\t\t\tchar ch = ss[rounds].charAt(i);\r\n\t\t\t\t\tif (ch == 'P')\r\n\t\t\t\t\t\tap++;\r\n\t\t\t\t\telse if (ch == 'R')\r\n\t\t\t\t\t\tar++;\r\n\t\t\t\t\telse if (ch == 'S')\r\n\t\t\t\t\t\tas++;\r\n\t\t\t\t}\r\n\t\t\t\tif (ar == r & as == s & ap == p) {\r\n\t\t\t\t\tif (result == null || result.compareTo(ss[rounds]) > 0)\r\n\t\t\t\t\t\tresult = ss[rounds];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (result == null)\r\n\t\t\t\t\tresult = IMPOSSIBLE;\r\n\t\t\t\tout.append(\"Case #\" + testId + \": \" + result);\r\n\t\t\t\t\r\n\t\t\t\tout.append(\"\\n\");\r\n\t\t\t}\r\n\t\t\tin.close();\r\n\t\t\tout.close();\r\n\t\t}\r\n\t\tcatch (RuntimeException rte) {\r\n\t\t\tthrow rte;\r\n\t\t}\r\n\t\tcatch (Exception e) {\r\n\t\t\tSystem.err.println(\"Error:\" + e.getMessage());\r\n\t\t}\r\n\t}\r\n}\r\n", "idx": "10167"}
{"func": "package googlejam10.p181;\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n    public static void main(String[]args) throws IOException {\r\n        BufferedReader x = new BufferedReader(new InputStreamReader(System.in));\r\n        int t = Integer.parseInt(x.readLine());\r\n        for (int cases = 1; cases <= t; cases++) {\r\n            StringTokenizer st = new StringTokenizer(x.readLine());\r\n            int n = Integer.parseInt(st.nextToken());\r\n            int r = Integer.parseInt(st.nextToken());\r\n            int p = Integer.parseInt(st.nextToken());\r\n            int s = Integer.parseInt(st.nextToken());\n\t\t\tint num1 = 1;\n\t\t\tfor (int i1 = 0; i1 < n; i1++) {\n\t\t\t    num1 *= 2;\n\t\t\t}\r\n            //check possibility\r\n            int num = num1;\r\n            if (n % 2 == 1) num++;\r\n            num /= 3;\r\n            if ((r == num && s == num) || (s == num && p == num) || (r == num && p == num)) {\r\n                if (n == 1) {\r\n                    if (r == 0) System.out.println(\"Case #\" + cases + \": PS\");\r\n                    if (s == 0) System.out.println(\"Case #\" + cases + \": PR\");\r\n                    if (p == 0) System.out.println(\"Case #\" + cases + \": RS\");\r\n                    continue;\r\n                }\r\n                String ans = \"\";\r\n                if (n % 2 == 0) {\r\n                    if (p != num) ans = \"S\";\r\n                    if (r != num) ans = \"P\";\r\n                    if (s != num) ans = \"R\";\r\n                } else {\r\n                    if (p != num) ans = \"P\";\r\n                    if (r != num) ans = \"R\";\r\n                    if (s != num) ans = \"S\";\r\n                }\r\n                for (int i = n - 1; i >= 0; i--) {\r\n                    String temp = \"\";\r\n                    for (int j = 0; j < ans.length(); j++) {\r\n                        if (ans.charAt(j) == 'S') {\r\n                            if (i % 6 == 0 || i % 6 == 1 || i % 6 == 5) {\r\n                                temp += \"PS\";\r\n                            } else {\r\n                                temp += \"SP\";\r\n                            }\r\n                        }\r\n                        if (ans.charAt(j) == 'P') {\r\n                            if (i % 6 == 0 || i % 6 == 1 || i % 6 == 2) {\r\n                                temp += \"PR\";\r\n                            } else {\r\n                                temp += \"RP\";\r\n                            }\r\n                        }\r\n                        if (ans.charAt(j) == 'R') {\r\n                            if (i % 6 == 0 || i % 6 == 4 || i % 6 == 5) {\r\n                                temp += \"RS\";\r\n                            } else {\r\n                                temp += \"SR\";\r\n                            }\r\n                        }\r\n                    }\r\n                    ans = temp;\r\n                }\r\n                System.out.println(\"Case #\" + cases + \": \" + ans);\r\n            } else {\r\n                System.out.println(\"Case #\" + cases + \": IMPOSSIBLE\");\r\n            }\r\n        }\r\n    }\r\n}", "idx": "10181"}
{"func": "package googlejam10.p189;\n\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.PrintWriter;\r\n\r\npublic class A {\r\n\r\n\t\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tBufferedReader br = new BufferedReader(new FileReader(\"A-small-attempt0.in\"));\r\n        PrintWriter pw = new PrintWriter(new File(\"A-small.out\"));\r\n//        BufferedReader br = new BufferedReader(new FileReader(\"A-large.in\"));\r\n//        PrintWriter pw = new PrintWriter(new File(\"A-large.out\"));\r\n        int T = Integer.parseInt(br.readLine());\r\n        for(int i=1;i<=T;i++){\r\n        \tString[] l = br.readLine().split(\" \");\r\n        \tint n = Integer.parseInt(l[0]);\r\n        \tint r = Integer.parseInt(l[1]);\r\n        \tint p = Integer.parseInt(l[2]);\r\n        \tint s = Integer.parseInt(l[3]);\r\n        \tint max = Math.max(p,Math.max(r,s));\r\n        \tif(n==1){\r\n        \t\tif(max>1){\r\n\t        \t\tpw.println(\"Case #\"+i+\": IMPOSSIBLE\");\r\n\t        \t\tcontinue;\r\n        \t\t}\r\n        \t\tif(p==1&&r==1){\r\n        \t\t\tpw.println(\"Case #\"+i+\": PR\");\r\n        \t\t\tcontinue;\r\n        \t\t}\r\n        \t\tif(p==1&&s==1){\r\n        \t\t\tpw.println(\"Case #\"+i+\": PS\");\r\n        \t\t\tcontinue;\r\n        \t\t}\r\n        \t\tif(s==1&&r==1){\r\n        \t\t\tpw.println(\"Case #\"+i+\": RS\");\r\n        \t\t\tcontinue;\r\n        \t\t}\r\n        \t}\r\n        \tif(n==2){\r\n        \t\tif(max>=3||p*r*s==0){\r\n\t        \t\tpw.println(\"Case #\"+i+\": IMPOSSIBLE\");\r\n\t        \t\tcontinue;\r\n        \t\t}\r\n        \t\tif(p==1&&r==1){\r\n        \t\t\tpw.println(\"Case #\"+i+\": PSRS\");\r\n        \t\t\tcontinue;\r\n        \t\t}\r\n        \t\tif(p==1&&s==1){\r\n        \t\t\tpw.println(\"Case #\"+i+\": PRRS\");\r\n        \t\t\tcontinue;\r\n        \t\t}\r\n        \t\tif(s==1&&r==1){\r\n        \t\t\tpw.println(\"Case #\"+i+\": PRPS\");\r\n        \t\t\tcontinue;\r\n        \t\t}\r\n        \t}\r\n        \tif(n==3){\r\n        \t\tif(max>=4||p*r*s==0){\r\n\t        \t\tpw.println(\"Case #\"+i+\": IMPOSSIBLE\");\r\n\t        \t\tcontinue;\r\n        \t\t}\r\n        \t\tif(p==3&&r==3){\r\n        \t\t\tpw.println(\"Case #\"+i+\": PRPSPRRS\");\r\n        \t\t\tcontinue;\r\n        \t\t}\r\n        \t\tif(p==3&&s==3){\r\n        \t\t\tpw.println(\"Case #\"+i+\": PRPSPSRS\");\r\n        \t\t\tcontinue;\r\n        \t\t}\r\n        \t\tif(s==3&&r==3){\r\n        \t\t\tpw.println(\"Case #\"+i+\": PRRSPSRS\");\r\n        \t\t\tcontinue;\r\n        \t\t}\r\n        \t}\r\n        }\r\n        pw.close();\r\n        br.close();\r\n\t}\r\n}\r\n", "idx": "10189"}
{"func": "package googlejam10.p192;\nimport java.util.*;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\t\r\n\t\tint num = in.nextInt();\r\n\t\tfor(int i = 0; i < num; i++) {\r\n\t\t\tboolean ayy = false;\r\n\t\t\tSystem.out.print(\"Case #\" + (i+1) + \": \");\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint nn = (int) Math.pow(2, n);\r\n\t\t\tint r = in.nextInt();\r\n\t\t\tint p = in.nextInt();\r\n\t\t\tint s = in.nextInt();\r\n\t\t\tchar[] test = new char[nn];\r\n\t\t\tArrays.fill(test, 'p');\r\n\t\t\tif(p == nn) {\r\n\t\t\t\tSystem.out.print(\"IMPOSSIBLE\");\r\n\t\t\t\tayy = true;\r\n\t\t\t} else {\r\n\t\t\t\tboolean solvable = true;\r\n\t\t\t\tboolean unsolved = true;\r\n\t\t\t\twhile(solvable) {\r\n\t\t\t\t\tfor(int ii = nn-1; ii >= 0; ii--) {\r\n\t\t\t\t\t\tif(test[ii] == 'p') {\r\n\t\t\t\t\t\t\ttest[ii] = 'r';\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else if (test[ii] == 'r') {\r\n\t\t\t\t\t\t\ttest[ii] = 's';\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(ii == 0) {\r\n\t\t\t\t\t\t\tsolvable = false;\r\n\t\t\t\t\t\t\ts = -1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttest[ii] = 'p';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tint cr = 0;\r\n\t\t\t\t\tint cp = 0;\r\n\t\t\t\t\tint cs = 0;\r\n\t\t\t\t\t/*for(int ff = 0; ff < nn; ff++) {\r\n\t\t\t\t\t\tSystem.out.print(test[ff]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tSystem.out.println();*/\r\n\t\t\t\t\tfor(int j = 0; j < nn; j++) {\r\n\t\t\t\t\t\tif(test[j] == 'p') cp++;\r\n\t\t\t\t\t\tif(test[j] == 'r') cr++;\r\n\t\t\t\t\t\tif(test[j] == 's') cs++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(cr != r || cp != p || cs != s) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t//System.out.println(\"GOOD\");\r\n\t\t\t\t\tboolean decent = true;\r\n\t\t\t\t\twhile(true && unsolved && decent) {\r\n\t\t\t\t\t\tint nnn = nn;\r\n\t\t\t\t\t\tchar[] prev = new char[nn];\r\n\t\t\t\t\t\tchar[] rec;\r\n\t\t\t\t\t\tfor(int sp = 0; sp < nn; sp++) {\r\n\t\t\t\t\t\t\tprev[sp] = test[sp];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\twhile(nnn > 1) {\r\n\t\t\t\t\t\t\tnnn /= 2;\r\n\t\t\t\t\t\t\trec = new char[nnn];\r\n\t\t\t\t\t\t\tfor(int mm = 0; mm < nnn; mm++) {\r\n\t\t\t\t\t\t\t\tif(prev[mm*2] == prev[mm*2+1]) {\r\n\t\t\t\t\t\t\t\t\tnnn = 0;\r\n\t\t\t\t\t\t\t\t\tdecent = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(prev[mm*2] != 'r' && prev[mm*2+1] != 'r') {\r\n\t\t\t\t\t\t\t\t\trec[mm] = 's';\r\n\t\t\t\t\t\t\t\t} else if(prev[mm*2] != 's' && prev[mm*2+1] != 's') {\r\n\t\t\t\t\t\t\t\t\trec[mm] = 'p';\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\trec[mm] = 'r';\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tprev = rec;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(decent) {\r\n\t\t\t\t\t\t\tunsolved = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!unsolved) {\r\n\t\t\t\t\t\tfor(int meh = 0; meh < nn; meh++) {\r\n\t\t\t\t\t\t\tif(test[meh] == 'r') System.out.print('R');\r\n\t\t\t\t\t\t\telse if(test[meh] == 's') System.out.print('S');\r\n\t\t\t\t\t\t\telse System.out.print('P');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tayy = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!ayy) System.out.print(\"IMPOSSIBLE\");\r\n\t\t\tSystem.out.println();\r\n\t\t}\r\n\t}\r\n\r\n}", "idx": "10192"}
{"func": "package googlejam10.p195;\n\r\n\r\nimport java.io.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class TaskA {\r\n    public static void main(String[] args) {\r\n        String fileName = \"A-small-attempt1.in\";\r\n        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\r\n\r\n            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName + \".out\"))) {\r\n                int tests = Integer.valueOf(br.readLine());\r\n                for (int test = 1; test <= tests; ++test) {\r\n                    Scanner scanner = new Scanner(br.readLine());\r\n                    int nn = scanner.nextInt();\r\n                    int rr = scanner.nextInt();\r\n                    int pp = scanner.nextInt();\r\n                    int ss = scanner.nextInt();\r\n                    List<String> res = new ArrayList<>();\r\n  /*                  char tmp[] = new char[(int)Math.pow(2, nn)];\r\n                    Arrays.fill(tmp, 'P');\r\n                    String tmpRes = null;\r\n                    while (true) {\r\n                        int cur = tmp.length - 1;\r\n                        int r = rr;\r\n                        int p = pp;\r\n                        int s = ss;\r\n                        boolean good = true;\r\n                        for (char c: tmp) {\r\n                            if ('P' == c)\r\n                                --p;\r\n                            if ('R' == c)\r\n                                --r;\r\n                            if ('S' == c)\r\n                                --s;\r\n                            if (p < 0 || s < 0 || r < 0) {\r\n                                good = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (good) {\r\n                            char tPrev[] = Arrays.copyOf(tmp, tmp.length);\r\n                            while (tPrev.length > 1) {\r\n                                char tCur[] = new char[tPrev.length / 2];\r\n                                for(int i =0; i < tCur.length; ++i) {\r\n                                    if ((tPrev[i*2] == 'R' && tPrev[i*2+1] == 'P')\r\n                                        || (tPrev[i*2] == 'P' && tPrev[i*2+1] == 'R'))\r\n                                        tCur[i] = 'P';\r\n                                    else if ((tPrev[i*2] == 'R' && tPrev[i*2+1] == 'S')\r\n                                            || (tPrev[i*2] == 'S' && tPrev[i*2+1] == 'R'))\r\n                                        tCur[i] = 'R';\r\n                                    else if ((tPrev[i*2] == 'P' && tPrev[i*2+1] == 'S')\r\n                                            || (tPrev[i*2] == 'S' && tPrev[i*2+1] == 'P'))\r\n                                        tCur[i] = 'S';\r\n                                    else {\r\n                                        good = false;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                tPrev = tCur;\r\n                            }\r\n                            if (good) {\r\n                                String tt = new String(tmp);\r\n                                if (tmpRes == null)\r\n                                    tmpRes = tt;\r\n                                else if (tmpRes.compareTo(tt) > 0)\r\n                                    tmpRes = tt;\r\n                            }\r\n                        }\r\n\r\n                        while( cur >= 0 && tmp[cur] == 'S')\r\n                            --cur;\r\n                        if (cur < 0)\r\n                            break;\r\n                        if (tmp[cur] == 'P')\r\n                            tmp[cur] = 'R';\r\n                        else if (tmp[cur] == 'R')\r\n                            tmp[cur] = 'S';\r\n                        for (int i = cur + 1; i < tmp.length; ++i)\r\n                            tmp[i] = 'P';\r\n                    }\r\n                    if (tmpRes != null)\r\n                        bw.write(tmpRes + \"\\n\");\r\n                    else\r\n                        bw.write(\"IMPOSSIBLE\" + \"\\n\");\r\n*/\r\n\r\n                    start:\r\n                    for (int start = 0; start <= 2; ++start) {\r\n                        int n = nn;\r\n                        int r = rr;\r\n                        int p = pp;\r\n                        int s = ss;\r\n                        int prevLen = 1;\r\n                        char prev[] = new char[prevLen];\r\n                        if (start == 0)\r\n                            prev[0] = 'P';\r\n                        if (start == 1)\r\n                            prev[0] = 'R';\r\n                        if (start == 2)\r\n                            prev[0] = 'S';\r\n                        int curLen;\r\n                        while (n-- > 0) {\r\n                            curLen = prevLen * 2;\r\n                            char cur[] = new char[curLen];\r\n                            for (int i = 0; i < prevLen; ++i) {\r\n                                if (prev[i] == 'P') {\r\n                                    cur[i*2] = 'P';\r\n                                    cur[i*2 + 1] = 'R';\r\n                                } else if (prev[i] == 'R') {\r\n                                    if (n == 0) {\r\n                                        cur[i*2] = 'R';\r\n                                        cur[i*2 + 1] = 'S';\r\n                                    } else {\r\n                                        cur[i*2] = 'S';\r\n                                        cur[i*2 + 1] = 'R';\r\n                                    }\r\n                                } else if (prev[i] == 'S') {\r\n                                    if (n >= 2) {\r\n                                        cur[i*2] = 'S';\r\n                                        cur[i*2 + 1] = 'P';\r\n                                    } else {\r\n                                        cur[i*2] = 'P';\r\n                                        cur[i*2 + 1] = 'S';\r\n                                    }\r\n                                }\r\n                            }\r\n                            prevLen = curLen;\r\n                            prev = cur;\r\n                        }\r\n                        int a = 1;\r\n                        for (char c: prev) {\r\n                            if ('P' == c)\r\n                                --p;\r\n                            if ('R' == c)\r\n                                --r;\r\n                            if ('S' == c)\r\n                                --s;\r\n                            if (p < 0 || s < 0 || r < 0)\r\n                                continue start;\r\n                        }\r\n                        res.add(new String(prev));\r\n                    }\r\n                    bw.write(\"Case #\" + test + \": \");\r\n                    if (res.isEmpty())\r\n                        bw.write(\"IMPOSSIBLE\");\r\n                    else {\r\n                        String result = null;\r\n                        for (String s: res) {\r\n                            if (result == null)\r\n                                result = s;\r\n                            else {\r\n                                if (result.compareTo(s) > 0)\r\n                                    result = s;\r\n                            }\r\n                        }\r\n                        bw.write(result);\r\n                    }\r\n                    bw.write(\"\\n\");\r\n                }\r\n                bw.close();\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n", "idx": "10195"}
{"func": "package googlejam11.p025;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class B {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner in = new Scanner(new File(\"BL.in\"));\n\t\tPrintWriter out = new PrintWriter(\"BL.out\");\n\t\tint tc = in.nextInt();\n\t\tfor (int cc = 1; cc <= tc; cc++) {\n\t\t\tint n = in.nextInt();\n\t\t\tint k = in.nextInt();\n\t\t\tdouble[] p = new double[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tp[i] = in.nextDouble();\n\t\t\t}\n\t\t\tArrays.sort(p);\n//\t\t\tdouble result = 0;\n//\t\t\tfor (int i = 0; i < 1 << n; i++) {\n//\t\t\t\tif (Integer.bitCount(i) != k)\n//\t\t\t\t\tcontinue;\n//\t\t\t\tdouble[] dp = new double[k + 1];\n//\t\t\t\tdp[0] = 1;\n//\t\t\t\tfor (int j = 0; j < n; j++) {\n//\t\t\t\t\tif ((i & 1 << j) != 0) {\n//\t\t\t\t\t\tfor (int m = k; m >= 0; m--) {\n//\t\t\t\t\t\t\tdp[m] = dp[m] * p[j] + (m == 0 ? 0 : dp[m - 1] * (1 - p[j]));\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t\tdouble sum = 0;\n//\t\t\t\tfor (int x = 0; x <= k; x++) {\n//\t\t\t\t\tsum += dp[x];\n//\t\t\t\t}\n//\t\t\t\tif (Math.abs(sum - 1) > 1e-9) {\n//\t\t\t\t\tthrow new Exception();\n//\t\t\t\t}\n//\t\t\t\tresult = Math.max(result, dp[k / 2]);\n//\t\t\t}\n\t\t\tdouble result2 = 0;\n\t\t\tfor (int i = 0; i <= k; i++) {\n\t\t\t\tdouble[] dp = new double[k + 1];\n\t\t\t\tdp[0] = 1;\n\t\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\t\tfor (int m = k; m >= 0; m--) {\n\t\t\t\t\t\tdp[m] = dp[m] * p[j] + (m == 0 ? 0 : dp[m - 1] * (1 - p[j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int j = n - (k - i); j < n; j++) {\n\t\t\t\t\tfor (int m = k; m >= 0; m--) {\n\t\t\t\t\t\tdp[m] = dp[m] * p[j] + (m == 0 ? 0 : dp[m - 1] * (1 - p[j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult2 = Math.max(result2, dp[k / 2]);\n\t\t\t}\n//\t\t\tif (Math.abs(result2 - result) > 1e-9) {\n//\t\t\t\tthrow new Exception();\n//\t\t\t}\n\t\t\tSystem.out.printf(\"Case #%d: %.8f\\n\", cc, result2);\n\t\t\tout.printf(\"Case #%d: %.8f\\n\", cc, result2);\n\t\t}\n\t\tout.close();\n\t}\n}\n", "idx": "11025"}
{"func": "package googlejam11.p034;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class RedTapeCommittee1 {\r\n\r\n\r\n    static int n, k;\r\n    static double[] p;\r\n    static double[] cand;\r\n    static double[][] f;\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n//        Scanner cin = new Scanner(new File(\"B-small-attempt0.in\"));\r\n//        PrintStream cout = new PrintStream(\"B-small-attempt-mine.out\");\r\n        Scanner cin = new Scanner(new File(\"B-large.in\"));\r\n        PrintStream cout = new PrintStream(\"B-large.out\");\r\n//        Scanner cin = new Scanner(System.in);\r\n//        PrintStream cout = System.out;\r\n\r\n        int _case = 0;\r\n\r\n        for (int T = cin.nextInt(); T > 0; T--) {\r\n            _case++;\r\n            StringBuilder ans = new StringBuilder();\r\n\r\n            n = cin.nextInt();\r\n            k = cin.nextInt();\r\n            p = new double[n];\r\n            cand = new double[k];\r\n            double max = 0;\r\n            for (int i = 0; i < n; i++) p[i] = cin.nextDouble();\r\n            Arrays.sort(p);\r\n\r\n            for (int x = 0; x <= k; x++) {\r\n                int ptr = 0;\r\n                for (int j = 0; j < x; j++) cand[ptr++] = p[j];\r\n                for (int j = n - 1; j >= n + x - k; j--) cand[ptr++] = p[j];\r\n\r\n                f = new double[k][k + 1];\r\n                f[0][0] = 1 - cand[0];\r\n                f[0][1] = cand[0];\r\n                for (int i = 1; i < k; i++)\r\n                    for (int j = 0; j <= k; j++) {\r\n                        f[i][j] = (1 - cand[i]) * f[i - 1][j]; // vote for \"NO\"\r\n                        if (j > 0) f[i][j] += cand[i] * f[i - 1][j - 1]; // vote for \"YES\"\r\n                    }\r\n                max = Math.max(max, f[k - 1][k / 2]);\r\n            }\r\n            ans.append(String.format(\"%.10f\", max));\r\n\r\n            cout.printf(\"Case #%d: %s%n\", _case, ans.toString());\r\n        }\r\n\r\n        cin.close();\r\n        cout.close();\r\n    }\r\n}\r\n", "idx": "11034"}
{"func": "package googlejam11.p042;\n\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Collections;\nimport java.util.Scanner;\nimport java.util.Vector;\n\npublic class R2_B {\n\n\tpublic static void main(String args[]) throws IOException {\n\t\n\t\t\n\t\tFileInputStream in = null;\n\t\tPrintWriter out = null;\n\n\t    try {\n\t         in = new FileInputStream(\"B-large.in\");\n\t         out = new PrintWriter( \"B-large.output\" );\n\t        \t    \n\t        \t    \n\t         Scanner sc = new Scanner (in);\n\t         String line = sc.nextLine();\n\t           \n\t         int T = Integer.parseInt(line);\n        \t \n             for(int t=1 ; t <= T ; t++) {\n            \t String output = \"Case #\" + t + \":\";\n            \t \n            \t line = sc.nextLine();\n            \t int n = Integer.parseInt(line.split(\" \")[0]);\n            \t int k = Integer.parseInt(line.split(\" \")[1]);\n            \t \n            \t Vector<Double> input = new Vector<Double>();\n            \t line = sc.nextLine();\n            \t for(int i=0; i<n; ++i) {\n            \t\t input.add(Double.parseDouble(line.split(\" \")[i]));\n            \t }\n            \t Collections.sort(input);\n            \t Vector<Double> temp = new Vector<Double>();\n            \t double answer = 0.0;\n            \t for(int i=0; i<=k; ++i) {\n            \t\t for (int j=0; j<i; ++j) {\n            \t\t\t temp.add(input.elementAt(j));\n            \t\t }\n            \t\t for(int j=0; j<k-i; ++j) {\n            \t\t\t temp.add(input.elementAt(n-j-1));\n            \t\t }\n            \t\t Vector<Vector<Double>> memo = new Vector<Vector<Double>>();\n            \t\t for (int j=0; j<k; ++j) {\n            \t\t\t Vector<Double> subMemo = new Vector<Double>();\n            \t\t\t for (int jj=0; jj <= k+1; jj++) {\n            \t\t\t\t subMemo.add(jj, 0.0);\n            \t\t\t }\n            \t\t\t memo.add(subMemo);\n            \t\t }\n            \t\t memo.elementAt(0).set(0, 1.0);\n            \t\t for(int j=0; j<k; ++j) {\n            \t\t\t for (int x = 0; x <= j+1 ; ++x) {\n            \t\t\t\t if ( j == 0 ) {\n            \t\t\t\t\t memo.elementAt(j).set(0, 1-temp.elementAt(j));\n            \t\t\t\t\t memo.elementAt(j).set(1, temp.elementAt(j));\n            \t\t\t\t } else if (x == 0 ) {\n            \t\t\t\t\t double val = memo.elementAt(j).elementAt(x);\n            \t\t\t\t\t val += (1-temp.elementAt(j)) * memo.elementAt(j-1).elementAt(x);\n            \t\t\t\t\t memo.elementAt(j).set(x,val);\n            \t\t\t\t } else {\n            \t\t\t\t\t double val = memo.elementAt(j).elementAt(x); \n            \t\t\t\t\t val += (1-temp.elementAt(j)) * memo.elementAt(j-1).elementAt(x);\n            \t\t\t\t\t val += (temp.elementAt(j) * memo.elementAt(j-1).elementAt(x-1));\n            \t\t\t\t\t memo.elementAt(j).set(x, val);\n            \t\t\t\t }\t \n            \t\t\t }\n            \t\t }\n            \t\t temp.clear();\n            \t\t if (answer < memo.elementAt(k-1).elementAt(k/2) )\n            \t\t\t answer = memo.elementAt(k-1).elementAt(k/2);\n            \t }\n            \t \n            \t output += \" \" + answer;\n            \t out.println(output);\n             }\n         \n\t     }finally {\n\t         if (in != null) {\n\t            in.close();\n\t         }\n\t         if (out != null) {\n\t            out.close();\n\t         }\n\t      }\n\t}\n}\n", "idx": "11042"}
{"func": "package googlejam11.p043;\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\npublic class B_large {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tScanner sc = new Scanner(new BufferedReader(new InputStreamReader(new FileInputStream(\"src/B-large.in\"))));\r\n\r\n\t\tString output = \"\";\r\n\t\tint t = sc.nextInt();\r\n\t\tsc.nextLine();\r\n\t\tfor (int i = 1; i <= t; i++) {\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint k = sc.nextInt();\r\n\t\t\tdouble[] p = new double[n];\r\n\t\t\tfor (int j = 0; j < n; j++)\r\n\t\t\t\tp[j] = sc.nextDouble();\r\n\t\t\tArrays.sort(p);\r\n\t\t\t\r\n\t\t\tdouble max = 0;\r\n\t\t\tfor (int j = 0; j <= k; j++) {\r\n\t\t\t\tdouble[][] dp = new double[k+1][k+1];\r\n\t\t\t\tdp[0][0] = 1;\r\n\t\t\t\tfor (int a = 0; a < j; a++) {\r\n\t\t\t\t\tdp[a+1][0] += dp[a][0]*(1-p[a]);\r\n\t\t\t\t\tdp[a+1][a+1] += dp[a][a]*p[a];\r\n\t\t\t\t\tfor (int b = 1; b <= a; b++) {\r\n\t\t\t\t\t\tdp[a+1][b] += dp[a][b]*(1-p[a]);\r\n\t\t\t\t\t\tdp[a+1][b] += dp[a][b-1]*p[a];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int a = j; a < k; a++) {\r\n\t\t\t\t\tdp[a+1][0] += dp[a][0]*(1-p[n-(a-j)-1]);\r\n\t\t\t\t\tdp[a+1][a+1] += dp[a][a]*p[n-(a-j)-1];\r\n\t\t\t\t\tfor (int b = 1; b <= a; b++) {\r\n\t\t\t\t\t\tdp[a+1][b] += dp[a][b]*(1-p[n-(a-j)-1]);\r\n\t\t\t\t\t\tdp[a+1][b] += dp[a][b-1]*p[n-(a-j)-1];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (dp[k][k/2] > max)\r\n\t\t\t\t\tmax = dp[k][k/2];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\toutput += \"Case #\" + i + \": \" + max + \"\\n\";\r\n\t\t}\r\n\t\t\r\n\t\tBufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(\"src/B-large.out\"), \"utf-8\"));\r\n\t\tbw.write(output);\r\n\t\tbw.close();\r\n\t}\r\n}", "idx": "11043"}
{"func": "package googlejam11.p051;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.lang.reflect.Array;\r\nimport java.util.Arrays;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by vitalii on 30.04.2016.\r\n */\r\npublic class B {\r\n    PrintWriter out;\r\n    Scanner in;\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        B r = new B();\n\t\tr.in = new Scanner(new File(\"B.in\"));\n\t\t        r.out = new PrintWriter(\"B.out\");\n\t\t        int t = r.in.nextInt();\n\t\t        for (int i = 1; i <= t; i++) {\n\t\t            System.err.println(i);\n\t\t            r.out.print(\"Case #\" + i + \": \");\n\t\t            int n = r.in.nextInt(), k = r.in.nextInt();\n\t\t\t\t\tdouble[] a = new double[n];\n\t\t\t\t\tfor (int i1 = 0; i1 < n; i1++) {\n\t\t\t\t\t    a[i1] = Double.parseDouble(r.in.next());\n\t\t\t\t\t}\n\t\t\t\t\tArrays.sort(a);\n\t\t\t\t\tdouble[][] perF = new double[n+1][2*n+1];\n\t\t\t\t\tdouble[][] perB = new double[n+1][2*n+1];\n\t\t\t\t\tperF[0][n] = 1;\n\t\t\t\t\tperB[0][n] = 1;\n\t\t\t\t\t\n\t\t\t\t\tfor (int i2 = 1; i2 <= n; i2++) {\n\t\t\t\t\t    for (int j = 0; j < 2  *n + 1; j++) {\n\t\t\t\t\t        if (j > 0) {\n\t\t\t\t\t            perF[i2][j] += perF[i2-1][j-1]*a[i2-1];\n\t\t\t\t\t            perB[i2][j] += perB[i2-1][j-1]*a[n-i2];\n\t\t\t\t\t        }\n\t\t\t\t\t        if (j < 2*n) {\n\t\t\t\t\t            perF[i2][j] += perF[i2-1][j+1]*(1- a[i2-1]);\n\t\t\t\t\t            perB[i2][j] += perB[i2-1][j+1]*(1-a[n-i2]);\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdouble ans = 0;\n\t\t\t\t\tfor (int t1 = 0; t1 <=k; t1++) {\n\t\t\t\t\t    double cand = 0;\n\t\t\t\t\t    for (int bal = -t1; bal <= t1; bal++) {\n\t\t\t\t\t        int i11 = n + bal;\n\t\t\t\t\t        int i2 = n - bal;\n\t\t\t\t\t        if (i2 >= 0 && i2 <= 2*n) {\n\t\t\t\t\t            cand += perF[t1][i11] * perB[k - t1][i2];\n\t\t\t\t\t        }\n\t\t\t\t\t    }\n\t\t\t\t\t    ans = Math.max(ans, cand);\n\t\t\t\t\t}\n\t\t\t\t\tLocale.setDefault(Locale.US);\n\t\t\t\t\tr.out.printf(\"%.9f\",ans);\n\t\t//            out.print(\" \");\n\t\t//            solveStupid();\n\t\t            r.out.println();\n\t\t        }\n\t\t        r.in.close();\n\t\t        r.out.close();\r\n    }\r\n}\r\n", "idx": "11051"}
{"func": "package googlejam11.p060;\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Round_2_B {\r\n\r\n\tstatic BufferedReader br;\r\n\tstatic PrintWriter out;\r\n\tstatic StringTokenizer st;\r\n\r\n\tstatic int T, N, K;\r\n\r\n\tstatic double[] prob;\r\n\r\n\tpublic static void main (String[] args) throws IOException {\r\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tout = new PrintWriter(new OutputStreamWriter(System.out));\r\n\t\tbr = new BufferedReader(new FileReader(\"in.txt\"));\r\n\t\tout = new PrintWriter(new FileWriter(\"out.txt\"));\r\n\r\n\t\tT = Integer.parseInt(next());\r\n\r\n\t\tfor (int t = 1; t <= T; t++) {\r\n\t\t\tSystem.out.println(t);\r\n\t\t\tN = Integer.parseInt(next());\r\n\t\t\tK = Integer.parseInt(next());\r\n\t\t\tprob = new double[N];\r\n\r\n\t\t\tfor (int i = 0; i < N; i++)\r\n\t\t\t\tprob[i] = Double.parseDouble(next());\r\n\r\n\t\t\tdouble ans = 0;\r\n\r\n\t\t\tfor (int i = 0; i < 1 << N; i++) {\r\n\t\t\t\tint sz = 0;\r\n\t\t\t\tfor (int j = 0; j < N; j++) {\r\n\t\t\t\t\tif ((i & 1 << j) > 0)\r\n\t\t\t\t\t\tsz++;\r\n\t\t\t\t}\r\n\t\t\t\tif (sz == K) {\r\n\t\t\t\t\tdouble total = 0;\r\n\t\t\t\t\tfor (int j = 0; j < 1 << N; j++) {\r\n\t\t\t\t\t\tif ((i & j) == j) {\r\n\t\t\t\t\t\t\tint sz2 = 0;\r\n\t\t\t\t\t\t\tdouble currProb = 1;\r\n\t\t\t\t\t\t\tfor (int k = 0; k < N; k++) {\r\n\t\t\t\t\t\t\t\tif ((j & 1 << k) > 0) {\r\n\t\t\t\t\t\t\t\t\tsz2++;\r\n\t\t\t\t\t\t\t\t\tcurrProb *= prob[k];\r\n\t\t\t\t\t\t\t\t} else if ((i & 1 << k) > 0) {\r\n\t\t\t\t\t\t\t\t\tcurrProb *= (1 - prob[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (sz2 == K / 2)\r\n\t\t\t\t\t\t\t\ttotal += currProb;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tans = Math.max(ans, total);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.printf(\"Case #%d: %f\\n\", t, ans);\r\n\t\t}\r\n\r\n\t\tout.close();\r\n\t}\r\n\r\n\tstatic String next () throws IOException {\r\n\t\twhile (st == null || !st.hasMoreTokens())\r\n\t\t\tst = new StringTokenizer(br.readLine().trim());\r\n\t\treturn st.nextToken();\r\n\t}\r\n}\r\n\r\n", "idx": "11060"}
{"func": "package googlejam11.p065;\n\r\n\r\nimport java.io.File;\r\nimport java.io.PrintWriter;\r\nimport java.util.Locale;\r\nimport java.util.Scanner;\r\n\r\npublic class RedTapeCommittee {\r\n    \r\n    public static void main(String[] args) throws Exception {\r\n        Locale.setDefault(Locale.ENGLISH);\r\n        File inputFile = new File(\"B-small-attempt0.in\");\r\n        Scanner in = new Scanner(inputFile);\r\n        File outputFile = new File(\"output.txt\");\r\n        PrintWriter out = new PrintWriter(outputFile);\r\n\r\n        int T = in.nextInt();\r\n        for (int t=0; t<T; t++) {\r\n            int N = in.nextInt();\r\n            int K = in.nextInt();\r\n            double[] P = new double[N];\r\n            for (int n=0; n<N; n++) {\r\n                P[n] = in.nextDouble();\r\n            }\r\n            double best = 0;\r\n            int limit = 1<<N;\r\n            for (int mask=0; mask<limit; mask++) {\r\n                if (Integer.bitCount(mask) == K) {\r\n                    int bits[] = new int[K];\r\n                    int next = 0;\r\n                    for (int i=0; i<N; i++) {\r\n                        if ((mask & (1<<i)) != 0) {\r\n                            bits[next++] = i;\r\n                        }\r\n                    }\r\n\r\n                    double pst = 0;\r\n                    int limit2 = 1<<K;\r\n                    for (int m=0; m<limit2; m++) {\r\n                        if (Integer.bitCount(m) == K/2) {\r\n                            double p = 1;\r\n                            for (int k=0; k<K; k++) {\r\n                                if ((m&(1<<k)) != 0) {\r\n                                    p *= P[bits[k]];\r\n                                } else {\r\n                                    p *= 1-P[bits[k]];\r\n                                }\r\n                            }\r\n                            pst += p;\r\n                        }\r\n                    }\r\n                    best = Math.max(best, pst);\r\n                }\r\n            }\r\n            \r\n            out.println(\"Case #\"+(t+1)+\": \"+best);\r\n        }\r\n\r\n        out.close();\r\n    }\r\n    \r\n}\r\n", "idx": "11065"}
{"func": "package googlejam11.p071;\nimport static java.lang.Math.*;\r\n\r\nimport java.io.BufferedInputStream;\r\nimport java.io.BufferedOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.InputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.*;\r\n\r\npublic class B {\r\n\tScanner scan;\r\n\r\n\tpublic B(Scanner s) {\r\n\t\tscan = s;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) throws Exception{\r\n\t\tLocale.setDefault(Locale.US);\r\n\t\tString cn = \"src/\"+B.class.getName();\r\n\t\tString sampleName = cn+\"-sample.in\";\r\n\t\tString smallName = cn+\"-small-attempt0.in\";\r\n\t\tString largeName = cn+\"-large.in\";\r\n\t\t\r\n\t\tString name = smallName;\r\n\t\t\r\n\t\tString outName = name.substring(0, name.indexOf('.'))+\".out\";\r\n\t\tInputStream in = new BufferedInputStream(new FileInputStream(name));\r\n\t\tPrintStream out =null;\r\n\t\tout = new PrintStream(new File(outName));\r\n\t\tif(out==null) out = System.out;\r\n\t\tScanner scan = new Scanner(in);\r\n\t\t\r\n\t\tint N = Integer.parseInt(scan.nextLine());\r\n\t\tfor(int c=1;c<=N;c++) {\r\n\t\t\tB r = new B(scan);\n\t\t\tint n = r.scan.nextInt();\n\t\t\tint k= r.scan.nextInt();\n\t\t\tdouble[]P = new double[n];\n\t\t\tfor(int i=0;i<P.length;i++)P[i]=r.scan.nextDouble();\n\t\t\tdouble res1 =0;\n\t\t\tfor(int m=0;m<(1<<n);m++){\n\t\t\t\tif(Integer.bitCount(m)!=k)continue;\n\t\t\t\tdouble[]A = new double[k/2+1];\n\t\t\t\tA[0]=1;\n\t\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\t\tif((m&(1<<i))==0)continue;\n\t\t\t\t\tdouble x = P[i];\n\t\t\t\t\tdouble[]NA =new double[n];\n\t\t\t\t\tfor(int j=0;j<A.length;j++){\n\t\t\t\t\t\tNA[j]=A[j]*(1-x);\n\t\t\t\t\t\tif(j>0)NA[j]+=A[j-1]*x;\n\t\t\t\t\t}\n\t\t\t\t\tA = NA;\n\t\t\t\t}\n\t\t\t\tres1 = max(res1, A[k/2]);\n\t\t\t}\n\t\t\tString res = \"\"+res1;\r\n\t\t\tout.printf(\"Case #%d: %s\\n\",c, res);\r\n\t\t\tif(out!=System.out)System.err.println(c + \" done\");\r\n\t\t}\r\n\t\tif(out!=System.out)System.err.println(\"All done\");\r\n\t\t\r\n\t}\r\n}\r\n", "idx": "11071"}
{"func": "package googlejam11.p093;\n\r\nimport java.util.*;\r\n\r\npublic class bsmall {\r\n    \r\n    public static void main(String[] args) {\r\n        \r\n        Scanner stdin = new Scanner(System.in);\r\n        int numCases = stdin.nextInt();\r\n        \r\n        for (int loop=1; loop<=numCases; loop++) {\r\n            \r\n            int n = stdin.nextInt();\r\n            int k = stdin.nextInt();\r\n            double[] p = new double[n];\r\n            for (int i=0; i<n; i++)\r\n                p[i] = stdin.nextDouble();\r\n            \r\n            double res = 0;\r\n            for (int i=1; i<(1<<n); i++) {        \r\n                if (Integer.bitCount(i) != k) continue;\r\n\r\n                double tmp = 0;\r\n                for (int mask=i; mask>0; mask = ((mask-1)&i) ) {\r\n                    \r\n                    if (Integer.bitCount(mask) != k/2) continue;\r\n                    \r\n                    double thisP = 1;\r\n                    for (int j=0; j<n; j++) {\r\n                        if ((mask&(1<<j)) > 0)\r\n                            thisP = thisP*p[j];\r\n                        else if ((i&(1<<j)) > 0)\r\n                            thisP = thisP*(1-p[j]);\r\n                 \r\n                    }\r\n                    tmp += thisP;\r\n                }\r\n                res = Math.max(res, tmp);\r\n            }\r\n            \r\n            System.out.printf(\"Case #%d: %.9f\\n\", loop, res);\r\n        }\r\n    }\r\n}", "idx": "11093"}
{"func": "package googlejam11.p096;\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\npublic class RedTape {\r\n\tpublic static void main(String [] args) throws IOException {\r\n\t\tScanner input = new Scanner(new File(\"input.txt\"));\r\n\t\tPrintWriter out = new PrintWriter(new File(\"output.txt\"));\r\n\t\t\r\n\t\tint max = input.nextInt();\r\n\t\tfor(int c = 1; c <= max; c++) {\r\n\t\t\tint size = input.nextInt();\r\n\t\t\tint comm = input.nextInt();\r\n\t\t\t\r\n\t\t\tdouble[] arr = new double[size];\r\n\t\t\tfor(int j = 0; j < size; j++)\r\n\t\t\t\tarr[j] = input.nextDouble();\r\n\t\t\tArrays.sort(arr);\r\n\t\t\tdouble maxV = 0;\r\n\t\t\tfor(int cut = 0; cut <= comm; cut++) {\r\n\t\t\t\tdouble[] a = new double[comm];\r\n\t\t\t\tfor(int j = 0; j < cut; j++)\r\n\t\t\t\t\ta[j] = arr[j];\r\n\t\t\t\tfor(int j = 0; j < comm - cut; j++)\r\n\t\t\t\t\ta[j + cut] = arr[size - j - 1];\r\n\t\t\t\t\r\n\t\t\t\tdouble[][] prob = new double[201][201];\r\n\t\t\t\tint tie = 100;\r\n\t\t\t\tprob[0][tie-1] = a[0];\r\n\t\t\t\tprob[0][tie+1] = 1 - a[0];\r\n\t\t\t\tfor(int i = 1; i < comm; i++)\r\n\t\t\t\t\tfor(int j = tie - i - 1; j <= tie + i + 1; j++)\r\n\t\t\t\t\t\tif(j > 0 && j < 200)\r\n\t\t\t\t\t\t\tprob[i][j] = prob[i-1][j+1] * a[i] + prob[i-1][j-1] * (1 - a[i]);\r\n\t\t\t\tmaxV = Math.max(maxV, prob[comm-1][tie]);\r\n\t\t\t}\r\n\t\t\tout.printf(\"Case #%d: %.10f%n\", c, maxV);\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n}\r\n", "idx": "11096"}
{"func": "package googlejam11.p101;\nimport java.util.Scanner;\n\npublic class B {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int numCases = sc.nextInt();\n        for (int caseNum = 1; caseNum <= numCases; caseNum++) {\n            int N = sc.nextInt();\n            int K = sc.nextInt();\n            double[] p = new double[N];\n            for (int i = 0; i < N; i++) {\n                p[i] = sc.nextDouble();\n            }\n\n            double best = 0;\n            for (long mask = 0; mask < (1 << N); mask++) {\n                if (Long.bitCount(mask) != K) {\n                    continue;\n                }\n                double total = 0;\n                for (long yesMask = mask; yesMask != 0; yesMask = ((yesMask - 1) & mask)) {\n                    if (Long.bitCount(yesMask) != K / 2) {\n                        continue;\n                    }\n                    double prob = 1;\n                    for (int i = 0; i < N; i++) {\n                        if ((yesMask & (1 << i)) != 0) {\n                            prob *= p[i];\n                        } else if ((mask & (1 << i)) != 0) {\n                            prob *= (1 - p[i]);\n                        }\n                    }\n                    total += prob;\n                }\n                best = Math.max(total, best);\n            }\n            System.out.print(\"Case #\" + caseNum + \": \");\n            System.out.println(best);\n        }\n        sc.close();\n    }\n}\n", "idx": "11101"}
{"func": "package googlejam11.p104;\nimport java.util.*;\n\nclass B {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int tcc = sc.nextInt();\n    for (int tc = 1; tc <= tcc; ++tc) {\n      int n = sc.nextInt();\n      int k = sc.nextInt();\n      double[] p = new double[n];\n      double[] pc = new double[k];\n      for (int i = 0; i < n; ++i) p[i] = sc.nextDouble();\n\n      double ans = 0;\n      for (int bm = 0; bm < (1 << n); ++bm) {\n        int bs = 0;\n        for (int i = 0; i < n; ++i) if ((bm & (1 << i)) > 0) ++bs;\n        if (bs != k) continue;\n        bs = 0;\n        for (int i = 0; i < n; ++i) if ((bm & (1 << i)) > 0) pc[bs++] = p[i];\n        double[][] comp = new double[k + 1][];\n        comp[0] = new double[] { 1 };\n        for (int i = 1; i <= k; ++i) {\n          comp[i] = new double[i + 1];\n          double cp = pc[i - 1];\n          for (int j = 0; j <= i; ++j) {\n            if (j != 0) comp[i][j] += cp * comp[i-1][j-1];\n            if (j != i) comp[i][j] += (1 - cp) * comp[i-1][j];\n          }\n        }\n        ans = Math.max(ans, comp[k][k / 2]);\n      }\n\n      System.out.printf(\"Case #%d: %.6f%n\", tc, ans);\n    }\n  }\n}\n", "idx": "11104"}
{"func": "package googlejam11.p110;\n/* Andy Rock\n * May 23, 2016\n * \n * Round 2 2016: Problem B. \n */\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\npublic class B\n{\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tBufferedReader in  = new BufferedReader(new FileReader(\"B.in\"));\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(\"B.out\"));\n\n\t\tint T = Integer.parseInt(in.readLine());\n\t\tfor(int t=1;t<=T;t++)\n\t\t{\n\t\t\tStringTokenizer st = new StringTokenizer(in.readLine());\n\t\t\tint N = Integer.parseInt(st.nextToken());\n\t\t\tint K = Integer.parseInt(st.nextToken());\n\n\t\t\tst = new StringTokenizer(in.readLine());\n\t\t\tdouble[] P = new double[N];\n\t\t\tfor(int i=0;i<N;i++)\n\t\t\t\tP[i] = Double.parseDouble(st.nextToken());\n\n\t\t\tdouble[][] tt = new double[N][N];\n\t\t\tdouble[][] tf = new double[N][N];\n\t\t\tdouble[][] ft = new double[N][N];\n\t\t\tdouble[][] ff = new double[N][N];\n\t\t\tfor(int i=0;i<N;i++)\n\t\t\t\tfor(int j=0;j<N;j++)\n\t\t\t\t{\n\t\t\t\t\ttt[i][j] =      P[i]  *      P[j];\n\t\t\t\t\ttf[i][j] =      P[i]  * (1 - P[j]);\n\t\t\t\t\tft[i][j] = (1 - P[i]) *      P[j];\n\t\t\t\t\tff[i][j] = (1 - P[i]) * (1 - P[j]);\n\t\t\t\t}\n\n\t\t\tdouble ans = 0;\n\t\t\tfor(int i=0;i<(1 << N);i++)\n\t\t\t{\n\t\t\t\tint num = 0;\n\t\t\t\tfor(int j=0;j<N;j++)\n\t\t\t\t\tif((i & (1 << j)) != 0)\n\t\t\t\t\t\tnum++;\n\n\t\t\t\tif(num == K)\n\t\t\t\t{\n\t\t\t\t\tdouble[] prob = new double[K+1];\n\t\t\t\t\tprob[0] = 1;\n\n\t\t\t\t\tfor(int j=0;j<N;j++)\n\t\t\t\t\t\tif((i & (1 << j)) != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdouble[] temp = new double[K+1];\n\t\t\t\t\t\t\ttemp[0] = prob[0] * (1 - P[j]);\n\t\t\t\t\t\t\tfor(int a=1;a<=K;a++)\n\t\t\t\t\t\t\t\ttemp[a] = prob[a] * (1-P[j]) + prob[a-1] * P[j];\n\t\t\t\t\t\t\tprob = temp;\n\t\t\t\t\t\t}\n\t\t\t\t\tans = Math.max(ans, prob[K/2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tout.write(\"Case #\"+t+\": \");\n\t\t\tout.write(\"\"+ans);\n\t\t\tout.write(\"\\n\");\n\t\t}\n\n\t\tin .close();\n\t\tout.close();\n\t}\n}", "idx": "11110"}
{"func": "package googlejam11.p119;\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\npublic class BSmall {\r\n\r\n  static final String FILENAME = \"B-small-attempt1\";\r\n  static final String IN = FILENAME + \".in\";\r\n  static final String OUT = FILENAME + \".out\";\r\n  Scanner sc;\r\n  BufferedWriter out;\r\n  \r\n  public static void main(String args[]) throws Exception {\r\n    BSmall r = new BSmall();\n\tr.sc = new Scanner(new File(BSmall.IN));\n\tr.out = new BufferedWriter(new FileWriter(BSmall.OUT));\n\tint t = r.sc.nextInt();\n\tfor (int i = 1; i <= t; i++) {\n\t  r.out.write(\"Case #\" + i + \": \");\n\t  int n = r.sc.nextInt();\n\tint k = r.sc.nextInt();\n\tdouble[] p = new double[n];\n\tfor(int i2 = 0; i2 < n; i2++) {\n\t  p[i2] = r.sc.nextDouble();\n\t}\n\tdouble ans = -1;\n\tfor(int msk = 0; msk < (1 << n); msk++) {\n\t  if(Integer.bitCount(msk) != k) {\n\t    continue;\n\t  }\n\t  int[] idx = new int[k + 1];\n\t  int c = 0;\n\t  int l = 0;\n\t  while(c < n) {\n\t    if((msk & (1 << c)) > 0) {\n\t      idx[l] = c;\n\t      l++;\n\t    }\n\t    c++;\n\t  }\n\t  double[][] dp = new double[k + 1][k + 1];\n\t  for(int i1 = 1; i1 <= k; i1++) {\n\t    for(int j = 0; j <= k/2; j++) {\n\t      if(j == 0) {\n\t        dp[i1][j] = 1;\n\t        for(int x = 0; x < i1; x++) {\n\t          dp[i1][j] *= 1 - p[idx[x]];\n\t        }\n\t      } else if(i1 < j) {\n\t        dp[i1][j] = 0;\n\t      } else if(i1 == j) {\n\t        dp[i1][j] = 1;\n\t        for(int x = 0; x < i1; x++) {\n\t          dp[i1][j] *= p[idx[x]];\n\t        }\n\t      } else {\n\t        dp[i1][j] = dp[i1 - 1][j - 1] * p[idx[i1 - 1]] + dp[i1 - 1][j] * (1 - p[idx[i1 - 1]]);\n\t      }\n\t    }\n\t  }\n\t  ans = Math.max(ans, dp[k][k/2]);\n\t}\n\tr.out.write(Double.toString(ans));\n\tr.out.newLine();\n\t}\n\tr.sc.close();\n\tr.out.close();\r\n  }\r\n}\r\n", "idx": "11119"}
{"func": "package googlejam11.p120;\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.PrintWriter;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class B {\r\n\r\n\tstatic StringTokenizer st;\r\n\tstatic BufferedReader br;\r\n\tstatic PrintWriter pw;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException{\r\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\r\n//\t\tbr = new BufferedReader(new FileReader(\"B-small.in\"));\r\n//\t\tpw = new PrintWriter(new BufferedWriter(new FileWriter(\"B-small.out\")));\r\n\t\tint tests = Integer.parseInt(next());\r\n\t\tfor (int test = 1; test <= tests; test++) {\r\n\t\t\tpw.print(\"Case #\"+test+\": \");\r\n\t\t\tint n = Integer.parseInt(next());\r\n\t\t\tint k = Integer.parseInt(next());\r\n\t\t\tdouble[]p = new double[n];\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tp[i] = Double.parseDouble(next());\r\n\t\t\t}\r\n\t\t\tdouble[]pp = new double[1 << n];\r\n\t\t\tdouble[]pp0 = new double[1 << n];\r\n\t\t\tfor (int mask = 0; mask < (1 << n); mask++) {\r\n\t\t\t\tpp[mask] = 1;\r\n\t\t\t\tpp0[mask] = 1;\r\n\t\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\t\tif ((mask & (1 << i)) != 0) {\r\n\t\t\t\t\t\tpp[mask] *= p[i];\r\n\t\t\t\t\t\tpp0[mask] *= 1-p[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdouble ans = 0;\r\n\t\t\tfor (int mask = 0; mask < (1 << n); mask++) {\r\n\t\t\t\tif (Integer.bitCount(mask)==k) {\r\n\t\t\t\t\tdouble cur = 0;\r\n\t\t\t\t\tfor (int sub_mask = mask; sub_mask != 0; sub_mask = ((sub_mask-1) & mask)) {\r\n\t\t\t\t\t\tif (Integer.bitCount(sub_mask)==k/2) {\r\n\t\t\t\t\t\t\tcur += pp[sub_mask] * pp0[mask ^ sub_mask];\r\n\t\t\t\t\t\t\tans = Math.max(ans, cur);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tans = Math.max(ans, cur);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpw.println(ans);\r\n\t\t}\r\n\t\tpw.close();\r\n\t}\r\n\r\n\tprivate static String next() throws IOException{\r\n\t\twhile (st==null || !st.hasMoreTokens())\r\n\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\treturn st.nextToken();\r\n\t}\r\n\r\n}\r\n", "idx": "11120"}
{"func": "package googlejam11.p128;\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.FileWriter;\r\nimport java.io.InputStreamReader;\r\nimport java.text.DecimalFormat;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class ProblemB {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tString fileName = args[0];\r\n\t\tProblemB obj = new ProblemB();\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(\n\t\t\t\tobj.getClass().getResourceAsStream(fileName)));\n\t\tint sfx = fileName.indexOf('.');\n\t\tBufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(\"./src/\" + fileName.substring(0, sfx) + \".out\"));\n\t\t\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tfor (int i = 0; i < T; i++) {\n\t\t\tString str = br.readLine();\n\t\t\tStringTokenizer token = new StringTokenizer(str, \" \");\n\t\t\tint N = Integer.parseInt(token.nextToken());\n\t\t\tint K = Integer.parseInt(token.nextToken());\n\t\t\n\t\t\tdouble[] P = new double[N];\n\t\t\tstr = br.readLine();\n\t\t\ttoken = new StringTokenizer(str, \" \");\n\t\t\tfor (int j = 0; j < N; j++) {\n\t\t\t\tP[j] = Double.parseDouble(token.nextToken());\n\t\t\t}\n\t\t\n\t\t\tArrays.sort(P);\n\t\t\tdouble ans = 0.0;\n\t\t\tfor (int s = 0; s <= N - K; s++) {\n\t\t\t\tfor (int e = 0; e <= N - K - s; e++) {\n\t\t\t\t\tfor (int a = 0; a <= K; a++) {\n\t\t\t\t\t\tdouble[][] dp = new double[2][K + 1];\n\t\t\t\t\t\tdp[1][0] = 1.0;\n\t\t\t\t\t\tfor (int k = 0; k < a; k++) {\n\t\t\t\t\t\t\tdouble p = P[k + s];\n\t\t\t\t\t\t\tfor (int j = 0; j <= k + 1; j++) {\n\t\t\t\t\t\t\t\tdp[k % 2][j] = dp[(k + 1) % 2][j] * (1 - p);\n\t\t\t\t\t\t\t\tif (j != 0) {\n\t\t\t\t\t\t\t\t\tdp[k % 2][j] += dp[(k + 1) % 2][j - 1] * p;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int k = a; k < K; k++) {\n\t\t\t\t\t\t\tdouble p = P[N - (k - a) - 1 - e];\n\t\t\t\t\t\t\tfor (int j = 0; j <= k + 1; j++) {\n\t\t\t\t\t\t\t\tdp[k % 2][j] = dp[(k + 1) % 2][j] * (1 - p);\n\t\t\t\t\t\t\t\tif (j != 0) {\n\t\t\t\t\t\t\t\t\tdp[k % 2][j] += dp[(k + 1) % 2][j - 1] * p;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tans = Math.max(ans, dp[1][K / 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tDecimalFormat ft = new DecimalFormat(\"0.000000000\");\n\t\t\tbw.write(\"Case #\" + (i + 1) + \": \" + ft.format(ans));\n\t\t\tbw.write(\"\\r\\n\");\n\t\t}\n\t\tbw.close();\n\t\tbr.close();\r\n\t}\r\n}\r\n", "idx": "11128"}
{"func": "package googlejam11.p139;\nimport java.util.*;\r\n\r\n\r\npublic class Main_Round2_2016_B {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner sc = new Scanner(System.in);\r\n\r\n\t\tint t = sc.nextInt();\r\n\t\tfor (int casei = 1; casei <= t; casei++) {\r\n\t\t\tint n = sc.nextInt();\r\n\t\t\tint k = sc.nextInt();\r\n\r\n\t\t\tdouble[] p = new double[n];\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tp[i] = sc.nextDouble();\r\n\t\t\t}\r\n\r\n\t\t\tdouble max = 0;\r\n\t\t\tfor (int i = 0; i < 0x1 << n; i++) {\r\n\t\t\t\tif (Integer.bitCount(i) != k) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tList<Double> pp = new ArrayList<>();\r\n\t\t\t\tfor (int j = 0; j < n; j++) {\r\n\t\t\t\t\tif ((i & 0x1 << j) != 0) {\r\n\t\t\t\t\t\tpp.add(p[j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdouble tmp2 = 0;\r\n\t\t\t\tfor (int j = 0; j < 0x1 << k; j++) {\r\n\t\t\t\t\tif (Integer.bitCount(j) != k / 2) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdouble tmp = 1;\r\n\t\t\t\t\tfor (int l = 0; l < k; l++) {\r\n\t\t\t\t\t\tif ((j & 0x1 << l) == 0) {\r\n\t\t\t\t\t\t\ttmp *= (1 - pp.get(l));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttmp *= pp.get(l);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttmp2 += tmp;\r\n\t\t\t\t}\r\n\t\t\t\tmax = Math.max(max, tmp2);\r\n\t\t\t}\r\n\r\n\t\t\tSystem.out.printf(\"Case #%d: %.7f\\n\", casei, max);\r\n\t\t}\r\n\r\n\t\tsc.close();\r\n\t}\r\n}\r\n", "idx": "11139"}
{"func": "package googlejam11.p140;\n/**\n * Created by qixinzhu on 4/8/16.\n */\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\npublic class B {\n\n\n    public static void main(String[] args) throws FileNotFoundException {\n        // test case\n//        genLargeP();\n//        File inputFile = new File(\"test.txt\");\n//        PrintWriter out = new PrintWriter(\"test_out.txt\");\n\n        // real case\n//        File inputFile = new File(\"B-small-practice.in\");\n\n        File inputFile = new File(\"B-small-attempt0.in\");\n        PrintWriter out = new PrintWriter(\"B-small-out.txt\");\n\n//        File inputFile = new File(\"B-large-practice.in\");\n\n//        File inputFile = new File(\"B-large.in\");\n//        PrintWriter out = new PrintWriter(\"B-large-out.txt\");\n\n        Scanner in = new Scanner(inputFile);\n\n        long time0 = System.currentTimeMillis();\n\n        int T = in.nextInt();\n        for (int t = 0; t < T; t++) {\n            int N = in.nextInt();\n            int K = in.nextInt();\n            double[] P = new double[N];\n            for (int n = 0; n < N; n++) {\n                P[n] = in.nextDouble();\n            }\n\n            double maxProb = 0;\n\n            for (int i = 0; i < (1 << N); i++) {\n                int k = 0;\n                for (int n = 0; n < N; n++) {\n                    if ((i & 1 << n) != 0) {\n                        k++;\n                    }\n                }\n                if (k != K) continue;\n                double[] p = new double[K];\n                int loc = 0;\n                for (int n = 0; n < N; n++) {\n                    if ((i & 1 << n) != 0) {\n                        p[loc] = P[n];\n                        loc++;\n                    }\n                }\n\n                double curProb = 0;\n                for (int j = 0; j < (1 << K); j++) {\n                    int yes = 0;\n                    for (k = 0; k < K; k++) {\n                        if ((j & 1 << k) != 0) {\n                            yes++;\n                        }\n                    }\n                    if (yes != K/2) continue;\n                    double temp = 1;\n                    for (k = 0; k < K; k++) {\n                        if ((j & 1 << k) != 0) {\n                            temp *= p[k];\n                        } else {\n                            temp *= (1-p[k]);\n                        }\n                    }\n                    curProb += temp;\n                }\n                if (curProb > maxProb) maxProb = curProb;\n            }\n\n            out.printf(\"Case #%d: %f\\n\", t + 1, maxProb);     //// -----\n        }\n\n        long time1 = System.currentTimeMillis();\n        System.out.printf(\"[%dms] Nodes created.\\n\", time1 - time0);\n\n        in.close();\n        out.close();\n    }\n}\n", "idx": "11140"}
{"func": "package googlejam11.p144;\n\n\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.Scanner;\n\npublic class B {\n    private static final double EPS = 1e-12;\n\n    final int N, K;\n    final double[] P;\n\n    // parse\n    public B(final Scanner sc) {\n        N = sc.nextInt();\n        K = sc.nextInt();\n        P = new double[N];\n        for (int i = 0; i < N; i++)\n            P[i] = sc.nextDouble();\n    }\n\n    // Template\n    public static void main(String... args) throws Exception {\n        try (final Scanner sc = new Scanner(System.in)) {\n            final int T = sc.nextInt();\n            final Object[] solvers = new Object[T];\n            for (int i = 0; i < T; i++)\n                solvers[i] = new B(sc);\n            final Iterator<String> results = Arrays.stream(solvers)\n                    .map(Object::toString)\n                    .iterator();\n            for (int i = 1; i <= T; i++)\n                System.out.printf(\"Case #%s: %s\\n\", i, results.next());\n        }\n    }\n}\n", "idx": "11144"}
{"func": "package googlejam11.p146;\nimport java.io.PrintWriter;\nimport java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.Locale;\nimport java.util.Scanner;\n\npublic class Bs {\n\n    private static Scanner in;\n    private static PrintWriter out;\n\n    public static void main( String[] args ) {\n        Locale.setDefault(Locale.US);\n        in = new Scanner( System.in );\n        out = new PrintWriter( System.out );\n        int tn = in.nextInt();\n\t\t        for ( int test = 1; test <= tn; test ++ ) {\n\t\t            int n = in.nextInt();\n\t\t            int k = in.nextInt();\n\t\t            double[] q = new double[n];\n\t\t            for ( int i = 0; i < n; i ++ ) {\n\t\t                q[i] = in.nextDouble();\n\t\t            }\n\t\t            double r = 0.0;\n\t\t            for ( int m = 0; m < ( 1 << n ); m ++ ) {\n\t\t                if ( Integer.bitCount( m ) != k ) continue;\n\t\t                double[][] p = new double[2][k + 1];\n\t\t                p[0][0] = 1.0;\n\t\t                int cnt = 0;\n\t\t                for ( int i = 0; i < n; i ++ ) {\n\t\t                    if ( ( m & ( 1 << i ) ) == 0 ) continue;\n\t\t                    Arrays.fill( p[( cnt & 1 ) ^ 1], 0.0 );\n\t\t                    for ( int j = 0; j < k; j ++ ) {\n\t\t                        p[( cnt & 1 ) ^ 1][j] += ( 1.0 - q[i] ) * p[cnt & 1][j];\n\t\t                        p[( cnt & 1 ) ^ 1][j + 1] += q[i] * p[cnt & 1][j];\n\t\t                    }\n\t\t                    cnt ++;\n\t\t                }\n\t\t//                System.out.println( m + \" \" + p[cnt & 1][k / 2] );\n\t\t                r = Math.max( r, p[cnt & 1][k / 2] );\n\t\t            }\n\t\t            out.println( \"Case #\" + test + \": \" + r );\n\t\t        }\n        out.close();\n    }\n}\n", "idx": "11146"}
{"func": "package googlejam12.p005;\nimport static java.lang.Math.*;\nimport static java.util.Arrays.*;\n\nimport java.io.*;\nimport java.util.*;\n\npublic class A {\n\t\n\tpublic static int PARALLEL = 10;\n\tpublic static int ID = 0;\n\t\n\tint id;\n\tPrintWriter out;\n\t\n\tchar[] cs;\n\tchar[] CJ = {'C', 'J'};\n\t\n\tpublic static void main(String[] args) {\n\t\tSystem.setOut(null);\n\t\tString input;\n\t\tif (args.length == 0) {\n\t\t\tinput = A.class.getName() + \".in\";\n\t\t\tPARALLEL = 1;\n\t\t} else {\n\t\t\tinput = args[0];\n\t\t\tif (args.length >= 2) ID = Integer.parseInt(args[1]);\n\t\t}\n\t\tSystem.err.printf(\"Input = %s%n\", input);\n\t\tfinal A[] solvers;\n\t\tfinal StringWriter[] outs;\n\t\ttry (Scanner sc = new Scanner(new BufferedInputStream(new FileInputStream(input)))) {\n\t\t\tint caseN = sc.nextInt();\n\t\t\tsolvers = new A[caseN];\n\t\t\touts = new StringWriter[caseN];\n\t\t\tfor (int i = 0; i < caseN; i++) {\n\t\t\t\tsolvers[i] = new A();\n\t\t\t\tsolvers[i].id = i + 1;\n\t\t\t\tsolvers[i].out = new PrintWriter(outs[i] = new StringWriter());\n\t\t\t\tsolvers[i].out.printf(\"Case #%d: \", i + 1);\n\t\t\t\tsolvers[i].cs = sc.next().toCharArray();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\tif (ID >= 1) {\n\t\t\tint id = ID - 1;\n\t\t\tA r = solvers[id];\n\t\t\tint n = r.cs.length;\n\t\t\tint[][][] dp = new int[2][2][n + 1];\n\t\t\tfor (int j = 0; j < 2; j++) fill(dp[0][j], -1);\n\t\t\tdp[0][0][0] = dp[0][1][0] = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tfor (int j = 0; j < 2; j++) fill(dp[(i + 1) & 1][j], -1);\n\t\t\t\tfor (int j = 0; j < 2; j++) {\n\t\t\t\t\tfor (int k = 0; k < n; k++) if (dp[i & 1][j][k] >= 0) {\n\t\t\t\t\t\tif (k > 0) {\n\t\t\t\t\t\t\tdp[(i + 1) & 1][1 - j][k - 1] = max(dp[(i + 1) & 1][1 - j][k - 1], dp[i & 1][j][k] + (r.CJ[j] == r.cs[i] ? 0 : -5));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdp[(i + 1) & 1][1 - j][k + 1] = max(dp[(i + 1) & 1][1 - j][k + 1], dp[i & 1][j][k] + (r.CJ[1 - j] == r.cs[i] ? 10 : 5));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (int j = 0; j < 2; j++) {\n\t\t\t\t\tdp[(i + 1) & 1][j][0] = max(dp[(i + 1) & 1][j][0], dp[(i + 1) & 1][1 - j][0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tr.out.println(max(dp[n & 1][0][0], dp[n & 1][1][0]));\n\t\t\tSystem.err.flush();\n\t\t\tSystem.err.print(outs[id].toString());\n\t\t\treturn;\n\t\t}\n\t\tThread[] ts = new Thread[PARALLEL];\n\t\tfor (int i = 0; i < PARALLEL; i++) {\n\t\t\tts[i] = new Thread(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tfor (;;) {\n\t\t\t\t\t\tint id;\n\t\t\t\t\t\tsynchronized (A.class) {\n\t\t\t\t\t\t\tif (ID == solvers.length) return;\n\t\t\t\t\t\t\tid = ID++;\n\t\t\t\t\t\t\tSystem.err.printf(\"Solve: %d / %d%n\", id + 1, solvers.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tA r = solvers[id];\n\t\t\t\t\t\t\tint n = r.cs.length;\n\t\t\t\t\t\t\tint[][][] dp = new int[2][2][n + 1];\n\t\t\t\t\t\t\tfor (int j = 0; j < 2; j++) fill(dp[0][j], -1);\n\t\t\t\t\t\t\tdp[0][0][0] = dp[0][1][0] = 0;\n\t\t\t\t\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t\t\t\t\tfor (int j = 0; j < 2; j++) fill(dp[(i + 1) & 1][j], -1);\n\t\t\t\t\t\t\t\tfor (int j = 0; j < 2; j++) {\n\t\t\t\t\t\t\t\t\tfor (int k = 0; k < n; k++) if (dp[i & 1][j][k] >= 0) {\n\t\t\t\t\t\t\t\t\t\tif (k > 0) {\n\t\t\t\t\t\t\t\t\t\t\tdp[(i + 1) & 1][1 - j][k - 1] = max(dp[(i + 1) & 1][1 - j][k - 1], dp[i & 1][j][k] + (r.CJ[j] == r.cs[i] ? 0 : -5));\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdp[(i + 1) & 1][1 - j][k + 1] = max(dp[(i + 1) & 1][1 - j][k + 1], dp[i & 1][j][k] + (r.CJ[1 - j] == r.cs[i] ? 10 : 5));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfor (int j = 0; j < 2; j++) {\n\t\t\t\t\t\t\t\t\tdp[(i + 1) & 1][j][0] = max(dp[(i + 1) & 1][j][0], dp[(i + 1) & 1][1 - j][0]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tr.out.println(max(dp[n & 1][0][0], dp[n & 1][1][0]));\n\t\t\t\t\t\t} catch (RuntimeException e) {\n\t\t\t\t\t\t\tSystem.err.printf(\"Error occurred in case %d:%n\", id + 1);\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\tSystem.exit(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsolvers[id].out.flush();\n\t\t\t\t\t\tsolvers[id] = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tts[i].start();\n\t\t}\n\t\tfor (int i = 0; i < PARALLEL; i++) {\n\t\t\ttry {\n\t\t\t\tts[i].join();\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\ti--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tPrintWriter out;\n\t\tString file = null;\n\t\tif (args.length > 0) {\n\t\t\tfile = args[0].substring(0, args[0].lastIndexOf('.')) + \".out\";\n\t\t\ttry {\n\t\t\t\tout = new PrintWriter(new File(file));\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.err.println(\"========== output ==========\");\n\t\t\tSystem.err.flush();\n\t\t\tout = new PrintWriter(System.err);\n\t\t}\n\t\tfor (int i = 0; i < solvers.length; i++) {\n\t\t\tout.print(outs[i].toString());\n\t\t}\n\t\tout.flush();\n\t\tif (file != null) {\n\t\t\tSystem.err.println(\"Output = \" + file);\n\t\t}\n\t}\n\t\n}\n", "idx": "12005"}
{"func": "package googlejam12.p019;\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.PrintStream;\r\nimport java.math.BigInteger;\r\nimport java.util.Scanner;\r\nimport java.util.Stack;\r\n\r\npublic class TeachingAssistant {\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n//        Scanner cin = new Scanner(new File(\"A-small-attempt0.in\"));\r\n//        PrintStream cout = new PrintStream(\"A-small-attempt0.out\");\r\n        Scanner cin = new Scanner(new File(\"A-large.in\"));\r\n        PrintStream cout = new PrintStream(\"A-large.out\");\r\n//        Scanner cin = new Scanner(System.in);\r\n//        PrintStream cout = System.out;\r\n\r\n        int _case = 0;\r\n        for (int T = cin.nextInt(); T > 0; T--) {\r\n            _case++;\r\n            StringBuilder ans = new StringBuilder();\r\n\r\n            String s = cin.next();\r\n            int totalRequested = 0;\r\n            Stack<Character> stack = new Stack<>();\r\n            Stack<Integer> points = new Stack<>();\r\n            int maxPoints = 0;\r\n            int cnt = 0;\r\n            for (int i = 0; i < s.length(); i++) {\r\n                if (!stack.empty() && stack.peek() == s.charAt(i) || totalRequested == s.length() / 2) {\r\n                    maxPoints += stack.pop() == s.charAt(i) ? points.pop() : points.pop() - 5;\r\n                } else {\r\n                    stack.push(s.charAt(i));\r\n                    points.push(10);\r\n                    totalRequested++;\r\n                }\r\n            }\r\n            ans.append(maxPoints);\r\n\r\n            cout.printf(\"Case #%d: %s%n\", _case, ans.toString());\r\n        }\r\n\r\n        cin.close();\r\n        cout.close();\r\n    }\r\n}\r\n", "idx": "12019"}
{"func": "package googlejam12.p022;\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\nimport java.util.Stack;\n\npublic class A {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner in = new Scanner(new File(\"AL.in\"));\n\t\tPrintWriter out = new PrintWriter(\"AL.out\");\n\t\tint tc = in.nextInt();\n\t\tfor (int cc = 1; cc <= tc; cc++) {\n\t\t\tString s = in.next();\n\t\t\tint gain = 0;\n\t\t\twhile (true) {\n\t\t\t\tStack<Character> stack = new Stack<>();\n\t\t\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\t\t\tif (!stack.isEmpty() && stack.peek() == s.charAt(i)) {\n\t\t\t\t\t\tstack.pop();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstack.push(s.charAt(i));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tStringBuilder next = new StringBuilder();\n\t\t\t\tfor (Character c : stack) {\n\t\t\t\t\tnext.append(c);\n\t\t\t\t}\n\t\t\t\tString nx = next.toString();\n\t\t\t\tint value = (s.length() - nx.length()) / 2 * 10;\n\t\t\t\ts = nx;\n\t\t\t\tif (value == 0)\n\t\t\t\t\tbreak;\n\t\t\t\tgain += value;\n\t\t\t}\n\t\t\tgain += s.length() / 2 * 5;\n\t\t\tSystem.out.printf(\"Case #%d: %d\\n\", cc, gain);\n\t\t\tout.printf(\"Case #%d: %d\\n\", cc, gain);\n\t\t}\n\t\tout.close();\n\t}\n}\n", "idx": "12022"}
{"func": "package googlejam12.p027;\nimport java.util.*;\nimport java.io.*;\nimport static lib.Util.*;\n\npublic class A\n{\n    static int N;\n\n    static int ans;\n\n    public static void main(String ... orange) throws Exception\n    {\n        Scanner input = new Scanner(System.in);\n        int numCases = input.nextInt();\n        for (int n = 0; n < numCases; n++)\n        {\n            char[] S = input.next().toCharArray();\n            int K = S.length;\n            int[][] table = new int[K + 1][K + 1];\n            for (int len = 2; len <= K; len += 2)\n                for (int start = 0; start + len <= K; start++)\n                {\n                    table[start][len] = (S[start] == S[start + len - 1] ? 10 : 5) + table[start + 1][len - 2];\n                    for (int first = 2; first < len; first += 2)\n                        if (table[start][first] + table[start + first][len - first] > table[start][len])\n                            table[start][len] = table[start][first] + table[start + first][len - first];\n                }\n\n            System.out.printf(\"Case #%d: \", n + 1);\n            System.out.println(table[0][K]);\n        }\n    }\n}\n\n", "idx": "12027"}
